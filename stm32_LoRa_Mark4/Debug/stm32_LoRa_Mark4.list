
stm32_LoRa_Mark4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dfe0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  0801e120  0801e120  0001f120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801efd0  0801efd0  0001ffd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801f0a8  0801f0a8  00021300  2**0
                  CONTENTS
  5 .ARM          00000008  0801f0a8  0801f0a8  000200a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801f0b0  0801f0b0  00021300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801f0b0  0801f0b0  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0801f0b4  0801f0b4  000200b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000300  20000000  0801f0b8  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001bec  20000300  0801f3b8  00021300  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001eec  0801f3b8  00021eec  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00021300  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003f7c4  00000000  00000000  0002132a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009ea9  00000000  00000000  00060aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003220  00000000  00000000  0006a998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002604  00000000  00000000  0006dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000280df  00000000  00000000  000701bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d58e  00000000  00000000  0009829b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cae13  00000000  00000000  000d5829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a063c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dd5c  00000000  00000000  001a0680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  001ae3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000300 	.word	0x20000300
 800015c:	00000000 	.word	0x00000000
 8000160:	0801e108 	.word	0x0801e108

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000304 	.word	0x20000304
 800017c:	0801e108 	.word	0x0801e108

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_f2iz>:
 8000d74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d78:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d7c:	d30f      	bcc.n	8000d9e <__aeabi_f2iz+0x2a>
 8000d7e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d86:	d90d      	bls.n	8000da4 <__aeabi_f2iz+0x30>
 8000d88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d90:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d94:	fa23 f002 	lsr.w	r0, r3, r2
 8000d98:	bf18      	it	ne
 8000d9a:	4240      	negne	r0, r0
 8000d9c:	4770      	bx	lr
 8000d9e:	f04f 0000 	mov.w	r0, #0
 8000da2:	4770      	bx	lr
 8000da4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000da8:	d101      	bne.n	8000dae <__aeabi_f2iz+0x3a>
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	d105      	bne.n	8000dba <__aeabi_f2iz+0x46>
 8000dae:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_uldivmod>:
 8000dc0:	b953      	cbnz	r3, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc2:	b94a      	cbnz	r2, 8000dd8 <__aeabi_uldivmod+0x18>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	bf08      	it	eq
 8000dc8:	2800      	cmpeq	r0, #0
 8000dca:	bf1c      	itt	ne
 8000dcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000dd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd4:	f000 b96a 	b.w	80010ac <__aeabi_idiv0>
 8000dd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000de0:	f000 f806 	bl	8000df0 <__udivmoddi4>
 8000de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dec:	b004      	add	sp, #16
 8000dee:	4770      	bx	lr

08000df0 <__udivmoddi4>:
 8000df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	9d08      	ldr	r5, [sp, #32]
 8000df6:	460c      	mov	r4, r1
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d14e      	bne.n	8000e9a <__udivmoddi4+0xaa>
 8000dfc:	4694      	mov	ip, r2
 8000dfe:	458c      	cmp	ip, r1
 8000e00:	4686      	mov	lr, r0
 8000e02:	fab2 f282 	clz	r2, r2
 8000e06:	d962      	bls.n	8000ece <__udivmoddi4+0xde>
 8000e08:	b14a      	cbz	r2, 8000e1e <__udivmoddi4+0x2e>
 8000e0a:	f1c2 0320 	rsb	r3, r2, #32
 8000e0e:	4091      	lsls	r1, r2
 8000e10:	fa20 f303 	lsr.w	r3, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	4319      	orrs	r1, r3
 8000e1a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f f68c 	uxth.w	r6, ip
 8000e26:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb07 1114 	mls	r1, r7, r4, r1
 8000e32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e36:	fb04 f106 	mul.w	r1, r4, r6
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	d90a      	bls.n	8000e54 <__udivmoddi4+0x64>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e46:	f080 8112 	bcs.w	800106e <__udivmoddi4+0x27e>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 810f 	bls.w	800106e <__udivmoddi4+0x27e>
 8000e50:	3c02      	subs	r4, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a59      	subs	r1, r3, r1
 8000e56:	fa1f f38e 	uxth.w	r3, lr
 8000e5a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e5e:	fb07 1110 	mls	r1, r7, r0, r1
 8000e62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e66:	fb00 f606 	mul.w	r6, r0, r6
 8000e6a:	429e      	cmp	r6, r3
 8000e6c:	d90a      	bls.n	8000e84 <__udivmoddi4+0x94>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e76:	f080 80fc 	bcs.w	8001072 <__udivmoddi4+0x282>
 8000e7a:	429e      	cmp	r6, r3
 8000e7c:	f240 80f9 	bls.w	8001072 <__udivmoddi4+0x282>
 8000e80:	4463      	add	r3, ip
 8000e82:	3802      	subs	r0, #2
 8000e84:	1b9b      	subs	r3, r3, r6
 8000e86:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11d      	cbz	r5, 8000e96 <__udivmoddi4+0xa6>
 8000e8e:	40d3      	lsrs	r3, r2
 8000e90:	2200      	movs	r2, #0
 8000e92:	e9c5 3200 	strd	r3, r2, [r5]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d905      	bls.n	8000eaa <__udivmoddi4+0xba>
 8000e9e:	b10d      	cbz	r5, 8000ea4 <__udivmoddi4+0xb4>
 8000ea0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e7f5      	b.n	8000e96 <__udivmoddi4+0xa6>
 8000eaa:	fab3 f183 	clz	r1, r3
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	d146      	bne.n	8000f40 <__udivmoddi4+0x150>
 8000eb2:	42a3      	cmp	r3, r4
 8000eb4:	d302      	bcc.n	8000ebc <__udivmoddi4+0xcc>
 8000eb6:	4290      	cmp	r0, r2
 8000eb8:	f0c0 80f0 	bcc.w	800109c <__udivmoddi4+0x2ac>
 8000ebc:	1a86      	subs	r6, r0, r2
 8000ebe:	eb64 0303 	sbc.w	r3, r4, r3
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	2d00      	cmp	r5, #0
 8000ec6:	d0e6      	beq.n	8000e96 <__udivmoddi4+0xa6>
 8000ec8:	e9c5 6300 	strd	r6, r3, [r5]
 8000ecc:	e7e3      	b.n	8000e96 <__udivmoddi4+0xa6>
 8000ece:	2a00      	cmp	r2, #0
 8000ed0:	f040 8090 	bne.w	8000ff4 <__udivmoddi4+0x204>
 8000ed4:	eba1 040c 	sub.w	r4, r1, ip
 8000ed8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000edc:	fa1f f78c 	uxth.w	r7, ip
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ee6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eea:	fb08 4416 	mls	r4, r8, r6, r4
 8000eee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ef2:	fb07 f006 	mul.w	r0, r7, r6
 8000ef6:	4298      	cmp	r0, r3
 8000ef8:	d908      	bls.n	8000f0c <__udivmoddi4+0x11c>
 8000efa:	eb1c 0303 	adds.w	r3, ip, r3
 8000efe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f02:	d202      	bcs.n	8000f0a <__udivmoddi4+0x11a>
 8000f04:	4298      	cmp	r0, r3
 8000f06:	f200 80cd 	bhi.w	80010a4 <__udivmoddi4+0x2b4>
 8000f0a:	4626      	mov	r6, r4
 8000f0c:	1a1c      	subs	r4, r3, r0
 8000f0e:	fa1f f38e 	uxth.w	r3, lr
 8000f12:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f16:	fb08 4410 	mls	r4, r8, r0, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb00 f707 	mul.w	r7, r0, r7
 8000f22:	429f      	cmp	r7, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x148>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x146>
 8000f30:	429f      	cmp	r7, r3
 8000f32:	f200 80b0 	bhi.w	8001096 <__udivmoddi4+0x2a6>
 8000f36:	4620      	mov	r0, r4
 8000f38:	1bdb      	subs	r3, r3, r7
 8000f3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f3e:	e7a5      	b.n	8000e8c <__udivmoddi4+0x9c>
 8000f40:	f1c1 0620 	rsb	r6, r1, #32
 8000f44:	408b      	lsls	r3, r1
 8000f46:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4a:	431f      	orrs	r7, r3
 8000f4c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f50:	fa04 f301 	lsl.w	r3, r4, r1
 8000f54:	ea43 030c 	orr.w	r3, r3, ip
 8000f58:	40f4      	lsrs	r4, r6
 8000f5a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f5e:	0c38      	lsrs	r0, r7, #16
 8000f60:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f64:	fbb4 fef0 	udiv	lr, r4, r0
 8000f68:	fa1f fc87 	uxth.w	ip, r7
 8000f6c:	fb00 441e 	mls	r4, r0, lr, r4
 8000f70:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f74:	fb0e f90c 	mul.w	r9, lr, ip
 8000f78:	45a1      	cmp	r9, r4
 8000f7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7e:	d90a      	bls.n	8000f96 <__udivmoddi4+0x1a6>
 8000f80:	193c      	adds	r4, r7, r4
 8000f82:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f86:	f080 8084 	bcs.w	8001092 <__udivmoddi4+0x2a2>
 8000f8a:	45a1      	cmp	r9, r4
 8000f8c:	f240 8081 	bls.w	8001092 <__udivmoddi4+0x2a2>
 8000f90:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f94:	443c      	add	r4, r7
 8000f96:	eba4 0409 	sub.w	r4, r4, r9
 8000f9a:	fa1f f983 	uxth.w	r9, r3
 8000f9e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fa2:	fb00 4413 	mls	r4, r0, r3, r4
 8000fa6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000faa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fae:	45a4      	cmp	ip, r4
 8000fb0:	d907      	bls.n	8000fc2 <__udivmoddi4+0x1d2>
 8000fb2:	193c      	adds	r4, r7, r4
 8000fb4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fb8:	d267      	bcs.n	800108a <__udivmoddi4+0x29a>
 8000fba:	45a4      	cmp	ip, r4
 8000fbc:	d965      	bls.n	800108a <__udivmoddi4+0x29a>
 8000fbe:	3b02      	subs	r3, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fc6:	fba0 9302 	umull	r9, r3, r0, r2
 8000fca:	eba4 040c 	sub.w	r4, r4, ip
 8000fce:	429c      	cmp	r4, r3
 8000fd0:	46ce      	mov	lr, r9
 8000fd2:	469c      	mov	ip, r3
 8000fd4:	d351      	bcc.n	800107a <__udivmoddi4+0x28a>
 8000fd6:	d04e      	beq.n	8001076 <__udivmoddi4+0x286>
 8000fd8:	b155      	cbz	r5, 8000ff0 <__udivmoddi4+0x200>
 8000fda:	ebb8 030e 	subs.w	r3, r8, lr
 8000fde:	eb64 040c 	sbc.w	r4, r4, ip
 8000fe2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fe6:	40cb      	lsrs	r3, r1
 8000fe8:	431e      	orrs	r6, r3
 8000fea:	40cc      	lsrs	r4, r1
 8000fec:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	e750      	b.n	8000e96 <__udivmoddi4+0xa6>
 8000ff4:	f1c2 0320 	rsb	r3, r2, #32
 8000ff8:	fa20 f103 	lsr.w	r1, r0, r3
 8000ffc:	fa0c fc02 	lsl.w	ip, ip, r2
 8001000:	fa24 f303 	lsr.w	r3, r4, r3
 8001004:	4094      	lsls	r4, r2
 8001006:	430c      	orrs	r4, r1
 8001008:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800100c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001010:	fa1f f78c 	uxth.w	r7, ip
 8001014:	fbb3 f0f8 	udiv	r0, r3, r8
 8001018:	fb08 3110 	mls	r1, r8, r0, r3
 800101c:	0c23      	lsrs	r3, r4, #16
 800101e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001022:	fb00 f107 	mul.w	r1, r0, r7
 8001026:	4299      	cmp	r1, r3
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x24c>
 800102a:	eb1c 0303 	adds.w	r3, ip, r3
 800102e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001032:	d22c      	bcs.n	800108e <__udivmoddi4+0x29e>
 8001034:	4299      	cmp	r1, r3
 8001036:	d92a      	bls.n	800108e <__udivmoddi4+0x29e>
 8001038:	3802      	subs	r0, #2
 800103a:	4463      	add	r3, ip
 800103c:	1a5b      	subs	r3, r3, r1
 800103e:	b2a4      	uxth	r4, r4
 8001040:	fbb3 f1f8 	udiv	r1, r3, r8
 8001044:	fb08 3311 	mls	r3, r8, r1, r3
 8001048:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800104c:	fb01 f307 	mul.w	r3, r1, r7
 8001050:	42a3      	cmp	r3, r4
 8001052:	d908      	bls.n	8001066 <__udivmoddi4+0x276>
 8001054:	eb1c 0404 	adds.w	r4, ip, r4
 8001058:	f101 36ff 	add.w	r6, r1, #4294967295
 800105c:	d213      	bcs.n	8001086 <__udivmoddi4+0x296>
 800105e:	42a3      	cmp	r3, r4
 8001060:	d911      	bls.n	8001086 <__udivmoddi4+0x296>
 8001062:	3902      	subs	r1, #2
 8001064:	4464      	add	r4, ip
 8001066:	1ae4      	subs	r4, r4, r3
 8001068:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800106c:	e739      	b.n	8000ee2 <__udivmoddi4+0xf2>
 800106e:	4604      	mov	r4, r0
 8001070:	e6f0      	b.n	8000e54 <__udivmoddi4+0x64>
 8001072:	4608      	mov	r0, r1
 8001074:	e706      	b.n	8000e84 <__udivmoddi4+0x94>
 8001076:	45c8      	cmp	r8, r9
 8001078:	d2ae      	bcs.n	8000fd8 <__udivmoddi4+0x1e8>
 800107a:	ebb9 0e02 	subs.w	lr, r9, r2
 800107e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001082:	3801      	subs	r0, #1
 8001084:	e7a8      	b.n	8000fd8 <__udivmoddi4+0x1e8>
 8001086:	4631      	mov	r1, r6
 8001088:	e7ed      	b.n	8001066 <__udivmoddi4+0x276>
 800108a:	4603      	mov	r3, r0
 800108c:	e799      	b.n	8000fc2 <__udivmoddi4+0x1d2>
 800108e:	4630      	mov	r0, r6
 8001090:	e7d4      	b.n	800103c <__udivmoddi4+0x24c>
 8001092:	46d6      	mov	lr, sl
 8001094:	e77f      	b.n	8000f96 <__udivmoddi4+0x1a6>
 8001096:	4463      	add	r3, ip
 8001098:	3802      	subs	r0, #2
 800109a:	e74d      	b.n	8000f38 <__udivmoddi4+0x148>
 800109c:	4606      	mov	r6, r0
 800109e:	4623      	mov	r3, r4
 80010a0:	4608      	mov	r0, r1
 80010a2:	e70f      	b.n	8000ec4 <__udivmoddi4+0xd4>
 80010a4:	3e02      	subs	r6, #2
 80010a6:	4463      	add	r3, ip
 80010a8:	e730      	b.n	8000f0c <__udivmoddi4+0x11c>
 80010aa:	bf00      	nop

080010ac <__aeabi_idiv0>:
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d4:	68fb      	ldr	r3, [r7, #12]
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80010e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010f6:	4013      	ands	r3, r2
 80010f8:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001108:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <MX_ADC_Init+0x94>)
 800110a:	4a24      	ldr	r2, [pc, #144]	@ (800119c <MX_ADC_Init+0x98>)
 800110c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800110e:	4b22      	ldr	r3, [pc, #136]	@ (8001198 <MX_ADC_Init+0x94>)
 8001110:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001114:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001116:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <MX_ADC_Init+0x94>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111c:	4b1e      	ldr	r3, [pc, #120]	@ (8001198 <MX_ADC_Init+0x94>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001122:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <MX_ADC_Init+0x94>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <MX_ADC_Init+0x94>)
 800112a:	2204      	movs	r2, #4
 800112c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800112e:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_ADC_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001134:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <MX_ADC_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <MX_ADC_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001140:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <MX_ADC_Init+0x94>)
 8001142:	2201      	movs	r2, #1
 8001144:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001146:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <MX_ADC_Init+0x94>)
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800114e:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <MX_ADC_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001154:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <MX_ADC_Init+0x94>)
 8001156:	2200      	movs	r2, #0
 8001158:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800115a:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <MX_ADC_Init+0x94>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001162:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <MX_ADC_Init+0x94>)
 8001164:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001168:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <MX_ADC_Init+0x94>)
 800116c:	2207      	movs	r2, #7
 800116e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001170:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <MX_ADC_Init+0x94>)
 8001172:	2207      	movs	r2, #7
 8001174:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <MX_ADC_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <MX_ADC_Init+0x94>)
 8001180:	2200      	movs	r2, #0
 8001182:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <MX_ADC_Init+0x94>)
 8001186:	f002 f931 	bl	80033ec <HAL_ADC_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001190:	f000 fcae 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000031c 	.word	0x2000031c
 800119c:	40012400 	.word	0x40012400

080011a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a09      	ldr	r2, [pc, #36]	@ (80011d4 <HAL_ADC_MspInit+0x34>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d10b      	bne.n	80011ca <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011b6:	f7ff ff7b 	bl	80010b0 <LL_APB2_GRP1_EnableClock>

    /* ADC interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2012      	movs	r0, #18
 80011c0:	f003 fa53 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011c4:	2012      	movs	r0, #18
 80011c6:	f003 fa6a 	bl	800469e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40012400 	.word	0x40012400

080011d8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <HAL_ADC_MspDeInit+0x28>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d106      	bne.n	80011f8 <HAL_ADC_MspDeInit+0x20>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80011ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011ee:	f7ff ff77 	bl	80010e0 <LL_APB2_GRP1_DisableClock>

    /* ADC interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 80011f2:	2012      	movs	r0, #18
 80011f4:	f003 fa61 	bl	80046ba <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40012400 	.word	0x40012400

08001204 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001208:	4b03      	ldr	r3, [pc, #12]	@ (8001218 <SYS_InitMeasurement+0x14>)
 800120a:	4a04      	ldr	r2, [pc, #16]	@ (800121c <SYS_InitMeasurement+0x18>)
 800120c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	2000031c 	.word	0x2000031c
 800121c:	40012400 	.word	0x40012400

08001220 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800122e:	f000 f869 	bl	8001304 <SYS_GetBatteryLevel>
 8001232:	4603      	mov	r3, r0
 8001234:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001236:	482d      	ldr	r0, [pc, #180]	@ (80012ec <SYS_GetTemperatureLevel+0xcc>)
 8001238:	f000 f898 	bl	800136c <ADC_ReadChannels>
 800123c:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800123e:	4b2c      	ldr	r3, [pc, #176]	@ (80012f0 <SYS_GetTemperatureLevel+0xd0>)
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <SYS_GetTemperatureLevel+0xd4>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d026      	beq.n	8001298 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 800124a:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <SYS_GetTemperatureLevel+0xd0>)
 800124c:	881a      	ldrh	r2, [r3, #0]
 800124e:	4b29      	ldr	r3, [pc, #164]	@ (80012f4 <SYS_GetTemperatureLevel+0xd4>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d01c      	beq.n	8001290 <SYS_GetTemperatureLevel+0x70>
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	fb02 f303 	mul.w	r3, r2, r3
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	4a25      	ldr	r2, [pc, #148]	@ (80012f8 <SYS_GetTemperatureLevel+0xd8>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	461a      	mov	r2, r3
 800126a:	4b22      	ldr	r3, [pc, #136]	@ (80012f4 <SYS_GetTemperatureLevel+0xd4>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2264      	movs	r2, #100	@ 0x64
 8001272:	fb03 f202 	mul.w	r2, r3, r2
 8001276:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <SYS_GetTemperatureLevel+0xd0>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	4619      	mov	r1, r3
 800127c:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <SYS_GetTemperatureLevel+0xd4>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	1acb      	subs	r3, r1, r3
 8001282:	fb92 f3f3 	sdiv	r3, r2, r3
 8001286:	b29b      	uxth	r3, r3
 8001288:	331e      	adds	r3, #30
 800128a:	b29b      	uxth	r3, r3
 800128c:	b21b      	sxth	r3, r3
 800128e:	e001      	b.n	8001294 <SYS_GetTemperatureLevel+0x74>
 8001290:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001294:	803b      	strh	r3, [r7, #0]
 8001296:	e01d      	b.n	80012d4 <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001298:	887b      	ldrh	r3, [r7, #2]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	fb03 f202 	mul.w	r2, r3, r2
 80012a0:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <SYS_GetTemperatureLevel+0xdc>)
 80012a2:	fba3 1302 	umull	r1, r3, r3, r2
 80012a6:	1ad2      	subs	r2, r2, r3
 80012a8:	0852      	lsrs	r2, r2, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	0adb      	lsrs	r3, r3, #11
 80012ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012b2:	fb02 f303 	mul.w	r3, r2, r3
 80012b6:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 80012ba:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 80012be:	4a10      	ldr	r2, [pc, #64]	@ (8001300 <SYS_GetTemperatureLevel+0xe0>)
 80012c0:	fb82 1203 	smull	r1, r2, r2, r3
 80012c4:	1292      	asrs	r2, r2, #10
 80012c6:	17db      	asrs	r3, r3, #31
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	331e      	adds	r3, #30
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 80012d4:	883b      	ldrh	r3, [r7, #0]
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21b      	sxth	r3, r3
 80012dc:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 80012de:	883b      	ldrh	r3, [r7, #0]
 80012e0:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	b0001000 	.word	0xb0001000
 80012f0:	1fff75c8 	.word	0x1fff75c8
 80012f4:	1fff75a8 	.word	0x1fff75a8
 80012f8:	09ee009f 	.word	0x09ee009f
 80012fc:	00100101 	.word	0x00100101
 8001300:	68db8bad 	.word	0x68db8bad

08001304 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001312:	4813      	ldr	r0, [pc, #76]	@ (8001360 <SYS_GetBatteryLevel+0x5c>)
 8001314:	f000 f82a 	bl	800136c <ADC_ReadChannels>
 8001318:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	80fb      	strh	r3, [r7, #6]
 8001324:	e016      	b.n	8001354 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <SYS_GetBatteryLevel+0x60>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800132e:	4293      	cmp	r3, r2
 8001330:	d00b      	beq.n	800134a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001332:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <SYS_GetBatteryLevel+0x60>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800133c:	fb03 f202 	mul.w	r2, r3, r2
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	80fb      	strh	r3, [r7, #6]
 8001348:	e004      	b.n	8001354 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800134a:	4a07      	ldr	r2, [pc, #28]	@ (8001368 <SYS_GetBatteryLevel+0x64>)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001354:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	b4002000 	.word	0xb4002000
 8001364:	1fff75aa 	.word	0x1fff75aa
 8001368:	004c08d8 	.word	0x004c08d8

0800136c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001378:	f107 0308 	add.w	r3, r7, #8
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001384:	f7ff febe 	bl	8001104 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001388:	481a      	ldr	r0, [pc, #104]	@ (80013f4 <ADC_ReadChannels+0x88>)
 800138a:	f002 ff82 	bl	8004292 <HAL_ADCEx_Calibration_Start>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001394:	f000 fbac 	bl	8001af0 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4619      	mov	r1, r3
 80013aa:	4812      	ldr	r0, [pc, #72]	@ (80013f4 <ADC_ReadChannels+0x88>)
 80013ac:	f002 fc8e 	bl	8003ccc <HAL_ADC_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80013b6:	f000 fb9b 	bl	8001af0 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80013ba:	480e      	ldr	r0, [pc, #56]	@ (80013f4 <ADC_ReadChannels+0x88>)
 80013bc:	f002 fa36 	bl	800382c <HAL_ADC_Start>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80013c6:	f000 fb93 	bl	8001af0 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80013ca:	f04f 31ff 	mov.w	r1, #4294967295
 80013ce:	4809      	ldr	r0, [pc, #36]	@ (80013f4 <ADC_ReadChannels+0x88>)
 80013d0:	f002 faa4 	bl	800391c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80013d4:	4807      	ldr	r0, [pc, #28]	@ (80013f4 <ADC_ReadChannels+0x88>)
 80013d6:	f002 fa6f 	bl	80038b8 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80013da:	4806      	ldr	r0, [pc, #24]	@ (80013f4 <ADC_ReadChannels+0x88>)
 80013dc:	f002 fb35 	bl	8003a4a <HAL_ADC_GetValue>
 80013e0:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80013e2:	4804      	ldr	r0, [pc, #16]	@ (80013f4 <ADC_ReadChannels+0x88>)
 80013e4:	f002 f996 	bl	8003714 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80013e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000031c 	.word	0x2000031c

080013f8 <LL_AHB1_GRP1_EnableClock>:
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001404:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4313      	orrs	r3, r2
 800140e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001414:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4013      	ands	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800141c:	68fb      	ldr	r3, [r7, #12]
}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800142c:	2004      	movs	r0, #4
 800142e:	f7ff ffe3 	bl	80013f8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001432:	2001      	movs	r0, #1
 8001434:	f7ff ffe0 	bl	80013f8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	200b      	movs	r0, #11
 800143e:	f003 f914 	bl	800466a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001442:	200b      	movs	r0, #11
 8001444:	f003 f92b 	bl	800469e <HAL_NVIC_EnableIRQ>

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001458:	23ff      	movs	r3, #255	@ 0xff
 800145a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001462:	d311      	bcc.n	8001488 <FLASH_IF_Write+0x3c>
 8001464:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <FLASH_IF_Write+0x48>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	029a      	lsls	r2, r3, #10
 800146a:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <FLASH_IF_Write+0x4c>)
 800146c:	4013      	ands	r3, r2
 800146e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001472:	3b01      	subs	r3, #1
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4293      	cmp	r3, r2
 8001478:	d306      	bcc.n	8001488 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 f85a 	bl	8001538 <FLASH_IF_INT_Write>
 8001484:	4603      	mov	r3, r0
 8001486:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001488:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	1fff75e0 	.word	0x1fff75e0
 8001498:	03fffc00 	.word	0x03fffc00

0800149c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014a8:	23ff      	movs	r3, #255	@ 0xff
 80014aa:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80014b2:	d311      	bcc.n	80014d8 <FLASH_IF_Read+0x3c>
 80014b4:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <FLASH_IF_Read+0x48>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	029a      	lsls	r2, r3, #10
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <FLASH_IF_Read+0x4c>)
 80014bc:	4013      	ands	r3, r2
 80014be:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80014c2:	3b01      	subs	r3, #1
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d306      	bcc.n	80014d8 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f000 f93a 	bl	8001748 <FLASH_IF_INT_Read>
 80014d4:	4603      	mov	r3, r0
 80014d6:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 80014d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	1fff75e0 	.word	0x1fff75e0
 80014e8:	03fffc00 	.word	0x03fffc00

080014ec <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014f6:	23ff      	movs	r3, #255	@ 0xff
 80014f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001500:	d310      	bcc.n	8001524 <FLASH_IF_Erase+0x38>
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <FLASH_IF_Erase+0x44>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	029a      	lsls	r2, r3, #10
 8001508:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <FLASH_IF_Erase+0x48>)
 800150a:	4013      	ands	r3, r2
 800150c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001510:	3b01      	subs	r3, #1
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	4293      	cmp	r3, r2
 8001516:	d305      	bcc.n	8001524 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001518:	6839      	ldr	r1, [r7, #0]
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f932 	bl	8001784 <FLASH_IF_INT_Erase>
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001524:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	1fff75e0 	.word	0x1fff75e0
 8001534:	03fffc00 	.word	0x03fffc00

08001538 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b090      	sub	sp, #64	@ 0x40
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00c      	beq.n	8001576 <FLASH_IF_INT_Write+0x3e>
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d009      	beq.n	8001576 <FLASH_IF_INT_Write+0x3e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	2b00      	cmp	r3, #0
 800156a:	d104      	bne.n	8001576 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001576:	f06f 0305 	mvn.w	r3, #5
 800157a:	e0da      	b.n	8001732 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800157c:	f000 f992 	bl	80018a4 <FLASH_IF_INT_Clear_Error>
 8001580:	4603      	mov	r3, r0
 8001582:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 8001586:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800158a:	2b00      	cmp	r3, #0
 800158c:	f040 80cf 	bne.w	800172e <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001590:	f003 fcdc 	bl	8004f4c <HAL_FLASH_Unlock>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 80c6 	bne.w	8001728 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 800159c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800159e:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80015a2:	4b66      	ldr	r3, [pc, #408]	@ (800173c <FLASH_IF_INT_Write+0x204>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	0299      	lsls	r1, r3, #10
 80015a8:	4b65      	ldr	r3, [pc, #404]	@ (8001740 <FLASH_IF_INT_Write+0x208>)
 80015aa:	400b      	ands	r3, r1
 80015ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	0adb      	lsrs	r3, r3, #11
 80015b8:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 80015ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80015c4:	3b01      	subs	r3, #1
 80015c6:	4a5d      	ldr	r2, [pc, #372]	@ (800173c <FLASH_IF_INT_Write+0x204>)
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	0291      	lsls	r1, r2, #10
 80015cc:	4a5c      	ldr	r2, [pc, #368]	@ (8001740 <FLASH_IF_INT_Write+0x208>)
 80015ce:	400a      	ands	r2, r1
 80015d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80015d4:	fb01 f202 	mul.w	r2, r1, r2
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	0ada      	lsrs	r2, r3, #11
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d905      	bls.n	80015f6 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80015ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015f0:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015f4:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015fa:	e089      	b.n	8001710 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80015fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015fe:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001602:	02db      	lsls	r3, r3, #11
 8001604:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001606:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 f925 	bl	8001858 <FLASH_IF_INT_IsEmpty>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d031      	beq.n	8001678 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001614:	4b4b      	ldr	r3, [pc, #300]	@ (8001744 <FLASH_IF_INT_Write+0x20c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d103      	bne.n	8001624 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 800161c:	23fa      	movs	r3, #250	@ 0xfa
 800161e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001622:	e07e      	b.n	8001722 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001624:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <FLASH_IF_INT_Write+0x20c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6939      	ldr	r1, [r7, #16]
 800162a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f88a 	bl	8001748 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001634:	4b43      	ldr	r3, [pc, #268]	@ (8001744 <FLASH_IF_INT_Write+0x20c>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800163a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800163e:	4413      	add	r3, r2
 8001640:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001644:	b292      	uxth	r2, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f018 fd56 	bl	801a0f8 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f896 	bl	8001784 <FLASH_IF_INT_Erase>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800165e:	23fe      	movs	r3, #254	@ 0xfe
 8001660:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001664:	e05d      	b.n	8001722 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 800166a:	4b36      	ldr	r3, [pc, #216]	@ (8001744 <FLASH_IF_INT_Write+0x20c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001670:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	e005      	b.n	8001684 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 800167c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800167e:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001682:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001688:	e026      	b.n	80016d8 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800168a:	6a3a      	ldr	r2, [r7, #32]
 800168c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800168e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001696:	2001      	movs	r0, #1
 8001698:	f003 fc14 	bl	8004ec4 <HAL_FLASH_Program>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d113      	bne.n	80016ca <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a8:	6a3a      	ldr	r2, [r7, #32]
 80016aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ac:	4413      	add	r3, r2
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	4299      	cmp	r1, r3
 80016b4:	bf08      	it	eq
 80016b6:	4290      	cmpeq	r0, r2
 80016b8:	d003      	beq.n	80016c2 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 80016ba:	23fc      	movs	r3, #252	@ 0xfc
 80016bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 80016c0:	e00e      	b.n	80016e0 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	3308      	adds	r3, #8
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c8:	e003      	b.n	80016d2 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80016ca:	23fc      	movs	r3, #252	@ 0xfc
 80016cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 80016d0:	e006      	b.n	80016e0 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80016d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016d4:	3308      	adds	r3, #8
 80016d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d3d4      	bcc.n	800168a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80016e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d11b      	bne.n	8001720 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80016e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016ec:	4413      	add	r3, r2
 80016ee:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 80016f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016f4:	4413      	add	r3, r2
 80016f6:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001702:	bf28      	it	cs
 8001704:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8001708:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800170a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800170c:	3301      	adds	r3, #1
 800170e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	4413      	add	r3, r2
 8001716:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001718:	429a      	cmp	r2, r3
 800171a:	f4ff af6f 	bcc.w	80015fc <FLASH_IF_INT_Write+0xc4>
 800171e:	e000      	b.n	8001722 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001720:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001722:	f003 fc35 	bl	8004f90 <HAL_FLASH_Lock>
 8001726:	e002      	b.n	800172e <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001728:	23fb      	movs	r3, #251	@ 0xfb
 800172a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 800172e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8001732:	4618      	mov	r0, r3
 8001734:	3740      	adds	r7, #64	@ 0x40
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	1fff75e0 	.word	0x1fff75e0
 8001740:	03fffc00 	.word	0x03fffc00
 8001744:	20000380 	.word	0x20000380

08001748 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <FLASH_IF_INT_Read+0x1c>
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001764:	f06f 0305 	mvn.w	r3, #5
 8001768:	e008      	b.n	800177c <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	b29b      	uxth	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f018 fcc0 	bl	801a0f8 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001778:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 80017a4:	f06f 0305 	mvn.w	r3, #5
 80017a8:	e04e      	b.n	8001848 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80017aa:	f000 f87b 	bl	80018a4 <FLASH_IF_INT_Clear_Error>
 80017ae:	4603      	mov	r3, r0
 80017b0:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 80017b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d144      	bne.n	8001844 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80017ba:	f003 fbc7 	bl	8004f4c <HAL_FLASH_Unlock>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d13d      	bne.n	8001840 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80017c4:	2302      	movs	r3, #2
 80017c6:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80017ce:	4b20      	ldr	r3, [pc, #128]	@ (8001850 <FLASH_IF_INT_Erase+0xcc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	0299      	lsls	r1, r3, #10
 80017d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001854 <FLASH_IF_INT_Erase+0xd0>)
 80017d6:	400b      	ands	r3, r1
 80017d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80017dc:	fb01 f303 	mul.w	r3, r1, r3
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	0adb      	lsrs	r3, r3, #11
 80017e4:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80017f0:	3b01      	subs	r3, #1
 80017f2:	4a17      	ldr	r2, [pc, #92]	@ (8001850 <FLASH_IF_INT_Erase+0xcc>)
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	0291      	lsls	r1, r2, #10
 80017f8:	4a16      	ldr	r2, [pc, #88]	@ (8001854 <FLASH_IF_INT_Erase+0xd0>)
 80017fa:	400a      	ands	r2, r1
 80017fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001800:	fb01 f202 	mul.w	r2, r1, r2
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	0ada      	lsrs	r2, r3, #11
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	3301      	adds	r3, #1
 800180e:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001810:	f107 0214 	add.w	r2, r7, #20
 8001814:	f107 0308 	add.w	r3, r7, #8
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f003 fc98 	bl	8005150 <HAL_FLASHEx_Erase>
 8001820:	4603      	mov	r3, r0
 8001822:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001824:	7fbb      	ldrb	r3, [r7, #30]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d007      	beq.n	800183a <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800182a:	7fbb      	ldrb	r3, [r7, #30]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d101      	bne.n	8001834 <FLASH_IF_INT_Erase+0xb0>
 8001830:	2301      	movs	r3, #1
 8001832:	e001      	b.n	8001838 <FLASH_IF_INT_Erase+0xb4>
 8001834:	f06f 0301 	mvn.w	r3, #1
 8001838:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800183a:	f003 fba9 	bl	8004f90 <HAL_FLASH_Lock>
 800183e:	e001      	b.n	8001844 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001840:	23fb      	movs	r3, #251	@ 0xfb
 8001842:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001844:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	1fff75e0 	.word	0x1fff75e0
 8001854:	03fffc00 	.word	0x03fffc00

08001858 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	e011      	b.n	8001890 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001876:	bf08      	it	eq
 8001878:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800187c:	d002      	beq.n	8001884 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 800187e:	2301      	movs	r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
      break;
 8001882:	e009      	b.n	8001898 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3308      	adds	r3, #8
 8001888:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	3308      	adds	r3, #8
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d3e9      	bcc.n	800186c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001898:	68fb      	ldr	r3, [r7, #12]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80018aa:	23fb      	movs	r3, #251	@ 0xfb
 80018ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80018ae:	f003 fb4d 	bl	8004f4c <HAL_FLASH_Unlock>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d110      	bne.n	80018da <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80018b8:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <FLASH_IF_INT_Clear_Error+0x44>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <FLASH_IF_INT_Clear_Error+0x44>)
 80018be:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <FLASH_IF_INT_Clear_Error+0x44>)
 80018c6:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 80018ca:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80018cc:	f003 fb60 	bl	8004f90 <HAL_FLASH_Lock>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	58004000 	.word	0x58004000

080018ec <LL_AHB2_GRP1_EnableClock>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4313      	orrs	r3, r2
 8001902:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001908:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001910:	68fb      	ldr	r3, [r7, #12]
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	2001      	movs	r0, #1
 8001932:	f7ff ffdb 	bl	80018ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001936:	2004      	movs	r0, #4
 8001938:	f7ff ffd8 	bl	80018ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193c:	2002      	movs	r0, #2
 800193e:	f7ff ffd5 	bl	80018ec <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_10, GPIO_PIN_SET);
 8001942:	2201      	movs	r2, #1
 8001944:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001948:	4820      	ldr	r0, [pc, #128]	@ (80019cc <MX_GPIO_Init+0xb0>)
 800194a:	f003 ff03 	bl	8005754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	2120      	movs	r1, #32
 8001952:	481e      	ldr	r0, [pc, #120]	@ (80019cc <MX_GPIO_Init+0xb0>)
 8001954:	f003 fefe 	bl	8005754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_4, GPIO_PIN_SET);
 8001958:	2201      	movs	r2, #1
 800195a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800195e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001962:	f003 fef7 	bl	8005754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	2120      	movs	r1, #32
 800196a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800196e:	f003 fef1 	bl	8005754 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
 8001972:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8001976:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001978:	2301      	movs	r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	4619      	mov	r1, r3
 8001988:	4810      	ldr	r0, [pc, #64]	@ (80019cc <MX_GPIO_Init+0xb0>)
 800198a:	f003 fcb5 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800198e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001992:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001998:	2301      	movs	r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	480a      	ldr	r0, [pc, #40]	@ (80019cc <MX_GPIO_Init+0xb0>)
 80019a2:	f003 fca9 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_5;
 80019a6:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80019aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	4619      	mov	r1, r3
 80019bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019c0:	f003 fc9a 	bl	80052f8 <HAL_GPIO_Init>

}
 80019c4:	bf00      	nop
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	48000400 	.word	0x48000400

080019d0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80019d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e0:	f023 0218 	bic.w	r2, r3, #24
 80019e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019fe:	f001 faad 	bl	8002f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a02:	f000 f80d 	bl	8001a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a06:	f7ff ff89 	bl	800191c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a0a:	f7ff fd0d 	bl	8001428 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001a0e:	f000 ff09 	bl	8002824 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8001a12:	f000 ffab 	bl	800296c <MX_USART2_UART_Init>
  MX_LoRaWAN_Init();
 8001a16:	f008 fd2d 	bl	800a474 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001a1a:	f008 fd33 	bl	800a484 <MX_LoRaWAN_Process>
 8001a1e:	e7fc      	b.n	8001a1a <main+0x20>

08001a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b09a      	sub	sp, #104	@ 0x68
 8001a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a26:	f107 0320 	add.w	r3, r7, #32
 8001a2a:	2248      	movs	r2, #72	@ 0x48
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f01a fb81 	bl	801c136 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
 8001a44:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a46:	f003 fe9d 	bl	8005784 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff ffc0 	bl	80019d0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a50:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <SystemClock_Config+0xcc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a58:	4a24      	ldr	r2, [pc, #144]	@ (8001aec <SystemClock_Config+0xcc>)
 8001a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <SystemClock_Config+0xcc>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001a6c:	2306      	movs	r3, #6
 8001a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a70:	2381      	movs	r3, #129	@ 0x81
 8001a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a78:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a7a:	2340      	movs	r3, #64	@ 0x40
 8001a7c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a82:	2302      	movs	r3, #2
 8001a84:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 8001a8a:	2306      	movs	r3, #6
 8001a8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a94:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a98:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a9e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa0:	f107 0320 	add.w	r3, r7, #32
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f004 f9b9 	bl	8005e1c <HAL_RCC_OscConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ab0:	f000 f81e 	bl	8001af0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001ab4:	234f      	movs	r3, #79	@ 0x4f
 8001ab6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f004 fd24 	bl	8006520 <HAL_RCC_ClockConfig>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ade:	f000 f807 	bl	8001af0 <Error_Handler>
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	3768      	adds	r7, #104	@ 0x68
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	58000400 	.word	0x58000400

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <Error_Handler+0x8>

08001afc <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <LL_APB1_GRP1_EnableClock>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b40:	68fb      	ldr	r3, [r7, #12]
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08c      	sub	sp, #48	@ 0x30
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	222c      	movs	r2, #44	@ 0x2c
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f01a faec 	bl	801c136 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b5e:	4b22      	ldr	r3, [pc, #136]	@ (8001be8 <MX_RTC_Init+0x9c>)
 8001b60:	4a22      	ldr	r2, [pc, #136]	@ (8001bec <MX_RTC_Init+0xa0>)
 8001b62:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001b64:	4b20      	ldr	r3, [pc, #128]	@ (8001be8 <MX_RTC_Init+0x9c>)
 8001b66:	221f      	movs	r2, #31
 8001b68:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001be8 <MX_RTC_Init+0x9c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b70:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <MX_RTC_Init+0x9c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b76:	4b1c      	ldr	r3, [pc, #112]	@ (8001be8 <MX_RTC_Init+0x9c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <MX_RTC_Init+0x9c>)
 8001b7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b82:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001b84:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <MX_RTC_Init+0x9c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001b8a:	4b17      	ldr	r3, [pc, #92]	@ (8001be8 <MX_RTC_Init+0x9c>)
 8001b8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b92:	4815      	ldr	r0, [pc, #84]	@ (8001be8 <MX_RTC_Init+0x9c>)
 8001b94:	f005 f980 	bl	8006e98 <HAL_RTC_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001b9e:	f7ff ffa7 	bl	8001af0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001ba2:	4811      	ldr	r0, [pc, #68]	@ (8001be8 <MX_RTC_Init+0x9c>)
 8001ba4:	f005 fc76 	bl	8007494 <HAL_RTCEx_SetSSRU_IT>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001bae:	f7ff ff9f 	bl	8001af0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001bbe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001bc2:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001bc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <MX_RTC_Init+0x9c>)
 8001bd2:	f005 f9e3 	bl	8006f9c <HAL_RTC_SetAlarm_IT>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001bdc:	f7ff ff88 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001be0:	bf00      	nop
 8001be2:	3730      	adds	r7, #48	@ 0x30
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000384 	.word	0x20000384
 8001bec:	40002800 	.word	0x40002800

08001bf0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b090      	sub	sp, #64	@ 0x40
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf8:	f107 0308 	add.w	r3, r7, #8
 8001bfc:	2238      	movs	r2, #56	@ 0x38
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f01a fa98 	bl	801c136 <memset>
  if(rtcHandle->Instance==RTC)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a16      	ldr	r2, [pc, #88]	@ (8001c64 <HAL_RTC_MspInit+0x74>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d125      	bne.n	8001c5c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c14:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1c:	f107 0308 	add.w	r3, r7, #8
 8001c20:	4618      	mov	r0, r3
 8001c22:	f005 f81f 	bl	8006c64 <HAL_RCCEx_PeriphCLKConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001c2c:	f7ff ff60 	bl	8001af0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c30:	f7ff ff64 	bl	8001afc <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001c34:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001c38:	f7ff ff70 	bl	8001b1c <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2002      	movs	r0, #2
 8001c42:	f002 fd12 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001c46:	2002      	movs	r0, #2
 8001c48:	f002 fd29 	bl	800469e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	202a      	movs	r0, #42	@ 0x2a
 8001c52:	f002 fd0a 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001c56:	202a      	movs	r0, #42	@ 0x2a
 8001c58:	f002 fd21 	bl	800469e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3740      	adds	r7, #64	@ 0x40
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40002800 	.word	0x40002800

08001c68 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	58000400 	.word	0x58000400

08001c80 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001c9c:	f001 f9ca 	bl	8003034 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001ca0:	f7ff ffe2 	bl	8001c68 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f003 fdff 	bl	80058a8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}

08001cae <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001cb2:	f001 f9cd 	bl	8003050 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001cb6:	f001 f8a7 	bl	8002e08 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001cc2:	f001 f9b7 	bl	8003034 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f003 fd69 	bl	80057a0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001cd6:	f001 f9bb 	bl	8003050 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cee:	bf00      	nop
 8001cf0:	e7fd      	b.n	8001cee <NMI_Handler+0x4>

08001cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf6:	bf00      	nop
 8001cf8:	e7fd      	b.n	8001cf6 <HardFault_Handler+0x4>

08001cfa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cfe:	bf00      	nop
 8001d00:	e7fd      	b.n	8001cfe <MemManage_Handler+0x4>

08001d02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d06:	bf00      	nop
 8001d08:	e7fd      	b.n	8001d06 <BusFault_Handler+0x4>

08001d0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d0e:	bf00      	nop
 8001d10:	e7fd      	b.n	8001d0e <UsageFault_Handler+0x4>

08001d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d3a:	f001 f969 	bl	8003010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001d48:	4802      	ldr	r0, [pc, #8]	@ (8001d54 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001d4a:	f005 fbdf 	bl	800750c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000384 	.word	0x20000384

08001d58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d5c:	4802      	ldr	r0, [pc, #8]	@ (8001d68 <DMA1_Channel1_IRQHandler+0x10>)
 8001d5e:	f002 ff41 	bl	8004be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000058c 	.word	0x2000058c

08001d6c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC Interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001d70:	4802      	ldr	r0, [pc, #8]	@ (8001d7c <ADC_IRQHandler+0x10>)
 8001d72:	f001 fe76 	bl	8003a62 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000031c 	.word	0x2000031c

08001d80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d84:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <USART1_IRQHandler+0x10>)
 8001d86:	f006 fa0f 	bl	80081a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000464 	.word	0x20000464

08001d94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <USART2_IRQHandler+0x10>)
 8001d9a:	f006 fa05 	bl	80081a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200004f8 	.word	0x200004f8

08001da8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <LPUART1_IRQHandler+0x10>)
 8001dae:	f006 f9fb 	bl	80081a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200003d0 	.word	0x200003d0

08001dbc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001dc0:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <RTC_Alarm_IRQHandler+0x10>)
 8001dc2:	f005 fa53 	bl	800726c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000384 	.word	0x20000384

08001dd0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001dd6:	f005 ff07 	bl	8007be8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200003bc 	.word	0x200003bc

08001de4 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001df2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e00:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4013      	ands	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e08:	68fb      	ldr	r3, [r7, #12]
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <MX_SUBGHZ_Init+0x20>)
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	@ (8001e34 <MX_SUBGHZ_Init+0x20>)
 8001e20:	f005 fc60 	bl	80076e4 <HAL_SUBGHZ_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001e2a:	f7ff fe61 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200003bc 	.word	0x200003bc

08001e38 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001e40:	2001      	movs	r0, #1
 8001e42:	f7ff ffcf 	bl	8001de4 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2032      	movs	r0, #50	@ 0x32
 8001e4c:	f002 fc0d 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001e50:	2032      	movs	r0, #50	@ 0x32
 8001e52:	f002 fc24 	bl	800469e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001e70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001e88:	4b02      	ldr	r3, [pc, #8]	@ (8001e94 <LL_FLASH_GetUDN+0x10>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	1fff7580 	.word	0x1fff7580

08001e98 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001e9c:	4b03      	ldr	r3, [pc, #12]	@ (8001eac <LL_FLASH_GetDeviceID+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b2db      	uxtb	r3, r3
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	1fff7584 	.word	0x1fff7584

08001eb0 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001eb4:	4b03      	ldr	r3, [pc, #12]	@ (8001ec4 <LL_FLASH_GetSTCompanyID+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	1fff7584 	.word	0x1fff7584

08001ec8 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f7ff ffc6 	bl	8001e5e <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001ed2:	f018 fe9d 	bl	801ac10 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <SystemApp_Init+0x48>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001edc:	f000 f97e 	bl	80021dc <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001ee0:	f019 f926 	bl	801b130 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001ee4:	480b      	ldr	r0, [pc, #44]	@ (8001f14 <SystemApp_Init+0x4c>)
 8001ee6:	f019 f9d1 	bl	801b28c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <SystemApp_Init+0x50>)
 8001eec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ef0:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001ef2:	2002      	movs	r0, #2
 8001ef4:	f019 f9d8 	bl	801b2a8 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001ef8:	f7ff f984 	bl	8001204 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001efc:	f000 f9ae 	bl	800225c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001f00:	f018 f854 	bl	8019fac <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f04:	2101      	movs	r1, #1
 8001f06:	2001      	movs	r0, #1
 8001f08:	f018 f890 	bl	801a02c <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200003c8 	.word	0x200003c8
 8001f14:	080020e9 	.word	0x080020e9
 8001f18:	58004000 	.word	0x58004000

08001f1c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001f20:	f018 f8b4 	bl	801a08c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001f32:	f7ff f9e7 	bl	8001304 <SYS_GetBatteryLevel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001f3a:	88bb      	ldrh	r3, [r7, #4]
 8001f3c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d902      	bls.n	8001f4a <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001f44:	23fe      	movs	r3, #254	@ 0xfe
 8001f46:	71fb      	strb	r3, [r7, #7]
 8001f48:	e014      	b.n	8001f74 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001f4a:	88bb      	ldrh	r3, [r7, #4]
 8001f4c:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001f50:	d202      	bcs.n	8001f58 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	e00d      	b.n	8001f74 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001f58:	88bb      	ldrh	r3, [r7, #4]
 8001f5a:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4613      	mov	r3, r2
 8001f62:	01db      	lsls	r3, r3, #7
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <GetBatteryLevel+0x58>)
 8001f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8001f70:	09db      	lsrs	r3, r3, #7
 8001f72:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001f74:	79fb      	ldrb	r3, [r7, #7]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	1b4e81b5 	.word	0x1b4e81b5

08001f84 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f931 	bl	80021f8 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe feeb 	bl	8000d74 <__aeabi_f2iz>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001fa2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001fae:	b590      	push	{r4, r7, lr}
 8001fb0:	b087      	sub	sp, #28
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001fba:	f7ff ff63 	bl	8001e84 <LL_FLASH_GetUDN>
 8001fbe:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc6:	d138      	bne.n	800203a <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001fc8:	f001 f850 	bl	800306c <HAL_GetUIDw0>
 8001fcc:	4604      	mov	r4, r0
 8001fce:	f001 f861 	bl	8003094 <HAL_GetUIDw2>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4423      	add	r3, r4
 8001fd6:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001fd8:	f001 f852 	bl	8003080 <HAL_GetUIDw1>
 8001fdc:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	0e1a      	lsrs	r2, r3, #24
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3307      	adds	r3, #7
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	0c1a      	lsrs	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3306      	adds	r3, #6
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	0a1a      	lsrs	r2, r3, #8
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3305      	adds	r3, #5
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3304      	adds	r3, #4
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	0e1a      	lsrs	r2, r3, #24
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3303      	adds	r3, #3
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	0c1a      	lsrs	r2, r3, #16
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3302      	adds	r3, #2
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	0a1a      	lsrs	r2, r3, #8
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3301      	adds	r3, #1
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002038:	e031      	b.n	800209e <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3307      	adds	r3, #7
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	0a1a      	lsrs	r2, r3, #8
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3306      	adds	r3, #6
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	0c1a      	lsrs	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3305      	adds	r3, #5
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	0e1a      	lsrs	r2, r3, #24
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3304      	adds	r3, #4
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002068:	f7ff ff16 	bl	8001e98 <LL_FLASH_GetDeviceID>
 800206c:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3303      	adds	r3, #3
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002078:	f7ff ff1a 	bl	8001eb0 <LL_FLASH_GetSTCompanyID>
 800207c:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3302      	adds	r3, #2
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	0a1a      	lsrs	r2, r3, #8
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3301      	adds	r3, #1
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	0c1b      	lsrs	r3, r3, #16
 8002098:	b2da      	uxtb	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	701a      	strb	r2, [r3, #0]
}
 800209e:	bf00      	nop
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd90      	pop	{r4, r7, pc}

080020a6 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80020a6:	b590      	push	{r4, r7, lr}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 80020ae:	f7ff fee9 	bl	8001e84 <LL_FLASH_GetUDN>
 80020b2:	4602      	mov	r2, r0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d10d      	bne.n	80020de <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80020c2:	f000 ffd3 	bl	800306c <HAL_GetUIDw0>
 80020c6:	4604      	mov	r4, r0
 80020c8:	f000 ffda 	bl	8003080 <HAL_GetUIDw1>
 80020cc:	4603      	mov	r3, r0
 80020ce:	405c      	eors	r4, r3
 80020d0:	f000 ffe0 	bl	8003094 <HAL_GetUIDw2>
 80020d4:	4603      	mov	r3, r0
 80020d6:	ea84 0203 	eor.w	r2, r4, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd90      	pop	{r4, r7, pc}
	...

080020e8 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80020f2:	f107 0308 	add.w	r3, r7, #8
 80020f6:	4618      	mov	r0, r3
 80020f8:	f018 f8d8 	bl	801a2ac <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002102:	9200      	str	r2, [sp, #0]
 8002104:	4a07      	ldr	r2, [pc, #28]	@ (8002124 <TimestampNow+0x3c>)
 8002106:	2110      	movs	r1, #16
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f81d 	bl	8002148 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe f886 	bl	8000220 <strlen>
 8002114:	4603      	mov	r3, r0
 8002116:	b29a      	uxth	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	0801e120 	.word	0x0801e120

08002128 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800212c:	2101      	movs	r1, #1
 800212e:	2002      	movs	r0, #2
 8002130:	f017 ff4c 	bl	8019fcc <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800213c:	2100      	movs	r1, #0
 800213e:	2002      	movs	r0, #2
 8002140:	f017 ff44 	bl	8019fcc <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}

08002148 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002148:	b40c      	push	{r2, r3}
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800215a:	6839      	ldr	r1, [r7, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f018 fa75 	bl	801a650 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002170:	b002      	add	sp, #8
 8002172:	4770      	bx	lr

08002174 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_GetTick+0x24>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002186:	f000 f935 	bl	80023f4 <TIMER_IF_GetTimerValue>
 800218a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 800218c:	687b      	ldr	r3, [r7, #4]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200003c8 	.word	0x200003c8

0800219c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f9ab 	bl	8002502 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <LL_EXTI_EnableIT_32_63+0x24>)
 80021be:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80021c2:	4905      	ldr	r1, [pc, #20]	@ (80021d8 <LL_EXTI_EnableIT_32_63+0x24>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	58000800 	.word	0x58000800

080021dc <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 80021e0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80021e4:	f7ff ffe6 	bl	80021b4 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 80021e8:	f000 ff5e 	bl	80030a8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80021ec:	f000 ff62 	bl	80030b4 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80021f0:	f000 ff66 	bl	80030c0 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002200:	4b11      	ldr	r3, [pc, #68]	@ (8002248 <EnvSensors_Read+0x50>)
 8002202:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <EnvSensors_Read+0x54>)
 8002206:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002208:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <EnvSensors_Read+0x58>)
 800220a:	60fb      	str	r3, [r7, #12]
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 800220c:	f7ff f808 	bl	8001220 <SYS_GetTemperatureLevel>
 8002210:	4603      	mov	r3, r0
 8002212:	121b      	asrs	r3, r3, #8
 8002214:	b21b      	sxth	r3, r3
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe fd58 	bl	8000ccc <__aeabi_i2f>
 800221c:	4603      	mov	r3, r0
 800221e:	613b      	str	r3, [r7, #16]
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a07      	ldr	r2, [pc, #28]	@ (8002254 <EnvSensors_Read+0x5c>)
 8002236:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a07      	ldr	r2, [pc, #28]	@ (8002258 <EnvSensors_Read+0x60>)
 800223c:	611a      	str	r2, [r3, #16]

  return 0;
 800223e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	42480000 	.word	0x42480000
 800224c:	41900000 	.word	0x41900000
 8002250:	447a0000 	.word	0x447a0000
 8002254:	003e090d 	.word	0x003e090d
 8002258:	000503ab 	.word	0x000503ab

0800225c <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
 8002266:	687b      	ldr	r3, [r7, #4]
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800229e:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <TIMER_IF_Init+0x5c>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f083 0301 	eor.w	r3, r3, #1
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01b      	beq.n	80022e4 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022ac:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <TIMER_IF_Init+0x60>)
 80022ae:	f04f 32ff 	mov.w	r2, #4294967295
 80022b2:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 80022b4:	f7ff fc4a 	bl	8001b4c <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 80022b8:	f000 f856 	bl	8002368 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80022bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022c0:	480c      	ldr	r0, [pc, #48]	@ (80022f4 <TIMER_IF_Init+0x60>)
 80022c2:	f004 ff77 	bl	80071b4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80022c6:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <TIMER_IF_Init+0x60>)
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80022ce:	4809      	ldr	r0, [pc, #36]	@ (80022f4 <TIMER_IF_Init+0x60>)
 80022d0:	f005 f8ae 	bl	8007430 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80022d4:	2000      	movs	r0, #0
 80022d6:	f000 f9d3 	bl	8002680 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80022da:	f000 f85f 	bl	800239c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80022de:	4b04      	ldr	r3, [pc, #16]	@ (80022f0 <TIMER_IF_Init+0x5c>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80022e4:	79fb      	ldrb	r3, [r7, #7]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200003c9 	.word	0x200003c9
 80022f4:	20000384 	.word	0x20000384

080022f8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08e      	sub	sp, #56	@ 0x38
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002306:	f107 0308 	add.w	r3, r7, #8
 800230a:	222c      	movs	r2, #44	@ 0x2c
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f019 ff11 	bl	801c136 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002314:	f000 f828 	bl	8002368 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <TIMER_IF_StartTimer+0x68>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	4413      	add	r3, r2
 8002320:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	43db      	mvns	r3, r3
 800232a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002330:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002334:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002336:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800233a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800233c:	f107 0308 	add.w	r3, r7, #8
 8002340:	2201      	movs	r2, #1
 8002342:	4619      	mov	r1, r3
 8002344:	4807      	ldr	r0, [pc, #28]	@ (8002364 <TIMER_IF_StartTimer+0x6c>)
 8002346:	f004 fe29 	bl	8006f9c <HAL_RTC_SetAlarm_IT>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002350:	f7ff fbce 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002354:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002358:	4618      	mov	r0, r3
 800235a:	3738      	adds	r7, #56	@ 0x38
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200003cc 	.word	0x200003cc
 8002364:	20000384 	.word	0x20000384

08002368 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002372:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <TIMER_IF_StopTimer+0x2c>)
 8002374:	2201      	movs	r2, #1
 8002376:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002378:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800237c:	4806      	ldr	r0, [pc, #24]	@ (8002398 <TIMER_IF_StopTimer+0x30>)
 800237e:	f004 ff19 	bl	80071b4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002382:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <TIMER_IF_StopTimer+0x30>)
 8002384:	f04f 32ff 	mov.w	r2, #4294967295
 8002388:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800238a:	79fb      	ldrb	r3, [r7, #7]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40002800 	.word	0x40002800
 8002398:	20000384 	.word	0x20000384

0800239c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80023a0:	f000 f98e 	bl	80026c0 <GetTimerTicks>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4a03      	ldr	r2, [pc, #12]	@ (80023b4 <TIMER_IF_SetTimerContext+0x18>)
 80023a8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80023aa:	4b02      	ldr	r3, [pc, #8]	@ (80023b4 <TIMER_IF_SetTimerContext+0x18>)
 80023ac:	681b      	ldr	r3, [r3, #0]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200003cc 	.word	0x200003cc

080023b8 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80023bc:	4b02      	ldr	r3, [pc, #8]	@ (80023c8 <TIMER_IF_GetTimerContext+0x10>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	200003cc 	.word	0x200003cc

080023cc <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80023d6:	f000 f973 	bl	80026c0 <GetTimerTicks>
 80023da:	4602      	mov	r2, r0
 80023dc:	4b04      	ldr	r3, [pc, #16]	@ (80023f0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80023e4:	687b      	ldr	r3, [r7, #4]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200003cc 	.word	0x200003cc

080023f4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80023fe:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <TIMER_IF_GetTimerValue+0x24>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002406:	f000 f95b 	bl	80026c0 <GetTimerTicks>
 800240a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 800240c:	687b      	ldr	r3, [r7, #4]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200003c9 	.word	0x200003c9

0800241c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002426:	2303      	movs	r3, #3
 8002428:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800242a:	687b      	ldr	r3, [r7, #4]
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr

08002436 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002436:	b5b0      	push	{r4, r5, r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800243e:	2100      	movs	r1, #0
 8002440:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	2000      	movs	r0, #0
 8002446:	460a      	mov	r2, r1
 8002448:	4603      	mov	r3, r0
 800244a:	0d95      	lsrs	r5, r2, #22
 800244c:	0294      	lsls	r4, r2, #10
 800244e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	4620      	mov	r0, r4
 8002458:	4629      	mov	r1, r5
 800245a:	f7fe fcb1 	bl	8000dc0 <__aeabi_uldivmod>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4613      	mov	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002466:	68fb      	ldr	r3, [r7, #12]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bdb0      	pop	{r4, r5, r7, pc}

08002470 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002470:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800247a:	2100      	movs	r1, #0
 800247c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	2000      	movs	r0, #0
 8002482:	460c      	mov	r4, r1
 8002484:	4605      	mov	r5, r0
 8002486:	4620      	mov	r0, r4
 8002488:	4629      	mov	r1, r5
 800248a:	f04f 0a00 	mov.w	sl, #0
 800248e:	f04f 0b00 	mov.w	fp, #0
 8002492:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002496:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800249a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800249e:	4650      	mov	r0, sl
 80024a0:	4659      	mov	r1, fp
 80024a2:	1b02      	subs	r2, r0, r4
 80024a4:	eb61 0305 	sbc.w	r3, r1, r5
 80024a8:	f04f 0000 	mov.w	r0, #0
 80024ac:	f04f 0100 	mov.w	r1, #0
 80024b0:	0099      	lsls	r1, r3, #2
 80024b2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80024b6:	0090      	lsls	r0, r2, #2
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	eb12 0804 	adds.w	r8, r2, r4
 80024c0:	eb43 0905 	adc.w	r9, r3, r5
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024d8:	4690      	mov	r8, r2
 80024da:	4699      	mov	r9, r3
 80024dc:	4640      	mov	r0, r8
 80024de:	4649      	mov	r1, r9
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	0a82      	lsrs	r2, r0, #10
 80024ea:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80024ee:	0a8b      	lsrs	r3, r1, #10
 80024f0:	4613      	mov	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80024f4:	68fb      	ldr	r3, [r7, #12]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002500:	4770      	bx	lr

08002502 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ff93 	bl	8002436 <TIMER_IF_Convert_ms2Tick>
 8002510:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002512:	f000 f8d5 	bl	80026c0 <GetTimerTicks>
 8002516:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002518:	e000      	b.n	800251c <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800251a:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800251c:	f000 f8d0 	bl	80026c0 <GetTimerTicks>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f6      	bhi.n	800251a <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800253e:	f018 fcb5 	bl	801aeac <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002552:	f000 f8a5 	bl	80026a0 <TIMER_IF_BkUp_Read_MSBticks>
 8002556:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3301      	adds	r3, #1
 800255c:	4618      	mov	r0, r3
 800255e:	f000 f88f 	bl	8002680 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800256a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800256e:	b08c      	sub	sp, #48	@ 0x30
 8002570:	af00      	add	r7, sp, #0
 8002572:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002578:	f000 f8a2 	bl	80026c0 <GetTimerTicks>
 800257c:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800257e:	f000 f88f 	bl	80026a0 <TIMER_IF_BkUp_Read_MSBticks>
 8002582:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	2200      	movs	r2, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	60fa      	str	r2, [r7, #12]
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	000b      	movs	r3, r1
 8002598:	2200      	movs	r2, #0
 800259a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800259c:	2000      	movs	r0, #0
 800259e:	460c      	mov	r4, r1
 80025a0:	4605      	mov	r5, r0
 80025a2:	eb12 0804 	adds.w	r8, r2, r4
 80025a6:	eb43 0905 	adc.w	r9, r3, r5
 80025aa:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80025ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	0a82      	lsrs	r2, r0, #10
 80025bc:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80025c0:	0a8b      	lsrs	r3, r1, #10
 80025c2:	4613      	mov	r3, r2
 80025c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2200      	movs	r2, #0
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80025d4:	f04f 0b00 	mov.w	fp, #0
 80025d8:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff46 	bl	8002470 <TIMER_IF_Convert_Tick2ms>
 80025e4:	4603      	mov	r3, r0
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80025ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3730      	adds	r7, #48	@ 0x30
 80025f2:	46bd      	mov	sp, r7
 80025f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080025f8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	2100      	movs	r1, #0
 8002604:	4803      	ldr	r0, [pc, #12]	@ (8002614 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002606:	f004 ffa5 	bl	8007554 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000384 	.word	0x20000384

08002618 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	2101      	movs	r1, #1
 8002624:	4803      	ldr	r0, [pc, #12]	@ (8002634 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002626:	f004 ff95 	bl	8007554 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000384 	.word	0x20000384

08002638 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002642:	2100      	movs	r1, #0
 8002644:	4804      	ldr	r0, [pc, #16]	@ (8002658 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002646:	f004 ff9d 	bl	8007584 <HAL_RTCEx_BKUPRead>
 800264a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 800264c:	687b      	ldr	r3, [r7, #4]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000384 	.word	0x20000384

0800265c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002666:	2101      	movs	r1, #1
 8002668:	4804      	ldr	r0, [pc, #16]	@ (800267c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800266a:	f004 ff8b 	bl	8007584 <HAL_RTCEx_BKUPRead>
 800266e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002670:	687b      	ldr	r3, [r7, #4]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000384 	.word	0x20000384

08002680 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	2102      	movs	r1, #2
 800268c:	4803      	ldr	r0, [pc, #12]	@ (800269c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800268e:	f004 ff61 	bl	8007554 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000384 	.word	0x20000384

080026a0 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80026a6:	2102      	movs	r1, #2
 80026a8:	4804      	ldr	r0, [pc, #16]	@ (80026bc <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80026aa:	f004 ff6b 	bl	8007584 <HAL_RTCEx_BKUPRead>
 80026ae:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80026b0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000384 	.word	0x20000384

080026c0 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80026c6:	480b      	ldr	r0, [pc, #44]	@ (80026f4 <GetTimerTicks+0x34>)
 80026c8:	f7ff fdd9 	bl	800227e <LL_RTC_TIME_GetSubSecond>
 80026cc:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80026ce:	e003      	b.n	80026d8 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80026d0:	4808      	ldr	r0, [pc, #32]	@ (80026f4 <GetTimerTicks+0x34>)
 80026d2:	f7ff fdd4 	bl	800227e <LL_RTC_TIME_GetSubSecond>
 80026d6:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80026d8:	4806      	ldr	r0, [pc, #24]	@ (80026f4 <GetTimerTicks+0x34>)
 80026da:	f7ff fdd0 	bl	800227e <LL_RTC_TIME_GetSubSecond>
 80026de:	4602      	mov	r2, r0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d1f4      	bne.n	80026d0 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40002800 	.word	0x40002800

080026f8 <LL_AHB2_GRP1_EnableClock>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002704:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002706:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4313      	orrs	r3, r2
 800270e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002714:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4013      	ands	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800271c:	68fb      	ldr	r3, [r7, #12]
}
 800271e:	bf00      	nop
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <LL_APB1_GRP1_EnableClock>:
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002734:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002736:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4313      	orrs	r3, r2
 800273e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002740:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002744:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800274c:	68fb      	ldr	r3, [r7, #12]
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <LL_APB1_GRP2_EnableClock>:
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002764:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002766:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4313      	orrs	r3, r2
 800276e:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002774:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4013      	ands	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800277c:	68fb      	ldr	r3, [r7, #12]
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <LL_APB1_GRP1_DisableClock>:
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002794:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	43db      	mvns	r3, r3
 800279a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800279e:	4013      	ands	r3, r2
 80027a0:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <LL_APB1_GRP2_DisableClock>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 80027b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	43db      	mvns	r3, r3
 80027be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027c2:	4013      	ands	r3, r2
 80027c4:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <LL_APB2_GRP1_EnableClock>:
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80027d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80027e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4013      	ands	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027f4:	68fb      	ldr	r3, [r7, #12]
}
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <LL_APB2_GRP1_DisableClock>:
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800280c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	43db      	mvns	r3, r3
 8002812:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002816:	4013      	ands	r3, r2
 8002818:	660b      	str	r3, [r1, #96]	@ 0x60
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002828:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 800282a:	4a29      	ldr	r2, [pc, #164]	@ (80028d0 <MX_LPUART1_UART_Init+0xac>)
 800282c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800282e:	4b27      	ldr	r3, [pc, #156]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 8002830:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002834:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002836:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800283c:	4b23      	ldr	r3, [pc, #140]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 800283e:	2200      	movs	r2, #0
 8002840:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002842:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002848:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 800284a:	220c      	movs	r2, #12
 800284c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800284e:	4b1f      	ldr	r3, [pc, #124]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 8002850:	2200      	movs	r2, #0
 8002852:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002854:	4b1d      	ldr	r3, [pc, #116]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 8002856:	2200      	movs	r2, #0
 8002858:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800285a:	4b1c      	ldr	r3, [pc, #112]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 800285c:	2200      	movs	r2, #0
 800285e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002860:	4b1a      	ldr	r3, [pc, #104]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 8002862:	2200      	movs	r2, #0
 8002864:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002866:	4b19      	ldr	r3, [pc, #100]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 8002868:	2200      	movs	r2, #0
 800286a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800286c:	4817      	ldr	r0, [pc, #92]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 800286e:	f005 fb7e 	bl	8007f6e <HAL_UART_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002878:	f7ff f93a 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800287c:	2100      	movs	r1, #0
 800287e:	4813      	ldr	r0, [pc, #76]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 8002880:	f007 fd0d 	bl	800a29e <HAL_UARTEx_SetTxFifoThreshold>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800288a:	f7ff f931 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800288e:	2100      	movs	r1, #0
 8002890:	480e      	ldr	r0, [pc, #56]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 8002892:	f007 fd42 	bl	800a31a <HAL_UARTEx_SetRxFifoThreshold>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800289c:	f7ff f928 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80028a0:	480a      	ldr	r0, [pc, #40]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 80028a2:	f007 fcc4 	bl	800a22e <HAL_UARTEx_DisableFifoMode>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80028ac:	f7ff f920 	bl	8001af0 <Error_Handler>
  }
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80028b0:	2300      	movs	r3, #0
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	4805      	ldr	r0, [pc, #20]	@ (80028cc <MX_LPUART1_UART_Init+0xa8>)
 80028b8:	f007 fba8 	bl	800a00c <HAL_RS485Ex_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_LPUART1_UART_Init+0xa2>
  {
    Error_Handler();
 80028c2:	f7ff f915 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200003d0 	.word	0x200003d0
 80028d0:	40008000 	.word	0x40008000

080028d4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028d8:	4b22      	ldr	r3, [pc, #136]	@ (8002964 <MX_USART1_UART_Init+0x90>)
 80028da:	4a23      	ldr	r2, [pc, #140]	@ (8002968 <MX_USART1_UART_Init+0x94>)
 80028dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028de:	4b21      	ldr	r3, [pc, #132]	@ (8002964 <MX_USART1_UART_Init+0x90>)
 80028e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002964 <MX_USART1_UART_Init+0x90>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002964 <MX_USART1_UART_Init+0x90>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002964 <MX_USART1_UART_Init+0x90>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002964 <MX_USART1_UART_Init+0x90>)
 80028fa:	220c      	movs	r2, #12
 80028fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028fe:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <MX_USART1_UART_Init+0x90>)
 8002900:	2200      	movs	r2, #0
 8002902:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002904:	4b17      	ldr	r3, [pc, #92]	@ (8002964 <MX_USART1_UART_Init+0x90>)
 8002906:	2200      	movs	r2, #0
 8002908:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800290a:	4b16      	ldr	r3, [pc, #88]	@ (8002964 <MX_USART1_UART_Init+0x90>)
 800290c:	2200      	movs	r2, #0
 800290e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002910:	4b14      	ldr	r3, [pc, #80]	@ (8002964 <MX_USART1_UART_Init+0x90>)
 8002912:	2200      	movs	r2, #0
 8002914:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002916:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <MX_USART1_UART_Init+0x90>)
 8002918:	2200      	movs	r2, #0
 800291a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800291c:	4811      	ldr	r0, [pc, #68]	@ (8002964 <MX_USART1_UART_Init+0x90>)
 800291e:	f005 fb26 	bl	8007f6e <HAL_UART_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002928:	f7ff f8e2 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800292c:	2100      	movs	r1, #0
 800292e:	480d      	ldr	r0, [pc, #52]	@ (8002964 <MX_USART1_UART_Init+0x90>)
 8002930:	f007 fcb5 	bl	800a29e <HAL_UARTEx_SetTxFifoThreshold>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800293a:	f7ff f8d9 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800293e:	2100      	movs	r1, #0
 8002940:	4808      	ldr	r0, [pc, #32]	@ (8002964 <MX_USART1_UART_Init+0x90>)
 8002942:	f007 fcea 	bl	800a31a <HAL_UARTEx_SetRxFifoThreshold>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800294c:	f7ff f8d0 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002950:	4804      	ldr	r0, [pc, #16]	@ (8002964 <MX_USART1_UART_Init+0x90>)
 8002952:	f007 fc6c 	bl	800a22e <HAL_UARTEx_DisableFifoMode>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800295c:	f7ff f8c8 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000464 	.word	0x20000464
 8002968:	40013800 	.word	0x40013800

0800296c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002970:	4b22      	ldr	r3, [pc, #136]	@ (80029fc <MX_USART2_UART_Init+0x90>)
 8002972:	4a23      	ldr	r2, [pc, #140]	@ (8002a00 <MX_USART2_UART_Init+0x94>)
 8002974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002976:	4b21      	ldr	r3, [pc, #132]	@ (80029fc <MX_USART2_UART_Init+0x90>)
 8002978:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800297c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800297e:	4b1f      	ldr	r3, [pc, #124]	@ (80029fc <MX_USART2_UART_Init+0x90>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002984:	4b1d      	ldr	r3, [pc, #116]	@ (80029fc <MX_USART2_UART_Init+0x90>)
 8002986:	2200      	movs	r2, #0
 8002988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800298a:	4b1c      	ldr	r3, [pc, #112]	@ (80029fc <MX_USART2_UART_Init+0x90>)
 800298c:	2200      	movs	r2, #0
 800298e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002990:	4b1a      	ldr	r3, [pc, #104]	@ (80029fc <MX_USART2_UART_Init+0x90>)
 8002992:	220c      	movs	r2, #12
 8002994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002996:	4b19      	ldr	r3, [pc, #100]	@ (80029fc <MX_USART2_UART_Init+0x90>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800299c:	4b17      	ldr	r3, [pc, #92]	@ (80029fc <MX_USART2_UART_Init+0x90>)
 800299e:	2200      	movs	r2, #0
 80029a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029a2:	4b16      	ldr	r3, [pc, #88]	@ (80029fc <MX_USART2_UART_Init+0x90>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029a8:	4b14      	ldr	r3, [pc, #80]	@ (80029fc <MX_USART2_UART_Init+0x90>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029ae:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <MX_USART2_UART_Init+0x90>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029b4:	4811      	ldr	r0, [pc, #68]	@ (80029fc <MX_USART2_UART_Init+0x90>)
 80029b6:	f005 fada 	bl	8007f6e <HAL_UART_Init>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80029c0:	f7ff f896 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029c4:	2100      	movs	r1, #0
 80029c6:	480d      	ldr	r0, [pc, #52]	@ (80029fc <MX_USART2_UART_Init+0x90>)
 80029c8:	f007 fc69 	bl	800a29e <HAL_UARTEx_SetTxFifoThreshold>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80029d2:	f7ff f88d 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029d6:	2100      	movs	r1, #0
 80029d8:	4808      	ldr	r0, [pc, #32]	@ (80029fc <MX_USART2_UART_Init+0x90>)
 80029da:	f007 fc9e 	bl	800a31a <HAL_UARTEx_SetRxFifoThreshold>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80029e4:	f7ff f884 	bl	8001af0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80029e8:	4804      	ldr	r0, [pc, #16]	@ (80029fc <MX_USART2_UART_Init+0x90>)
 80029ea:	f007 fc20 	bl	800a22e <HAL_UARTEx_DisableFifoMode>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80029f4:	f7ff f87c 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029f8:	bf00      	nop
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	200004f8 	.word	0x200004f8
 8002a00:	40004400 	.word	0x40004400

08002a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b096      	sub	sp, #88	@ 0x58
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	2238      	movs	r2, #56	@ 0x38
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f019 fb86 	bl	801c136 <memset>
  if(uartHandle->Instance==LPUART1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a6b      	ldr	r2, [pc, #428]	@ (8002bdc <HAL_UART_MspInit+0x1d8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d140      	bne.n	8002ab6 <HAL_UART_MspInit+0xb2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002a34:	2320      	movs	r3, #32
 8002a36:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8002a38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a3c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a3e:	f107 030c 	add.w	r3, r7, #12
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 f90e 	bl	8006c64 <HAL_RCCEx_PeriphCLKConfig>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a4e:	f7ff f84f 	bl	8001af0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002a52:	2001      	movs	r0, #1
 8002a54:	f7ff fe80 	bl	8002758 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a58:	2002      	movs	r0, #2
 8002a5a:	f7ff fe4d 	bl	80026f8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5e:	2004      	movs	r0, #4
 8002a60:	f7ff fe4a 	bl	80026f8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB1     ------> LPUART1_DE
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a64:	2302      	movs	r3, #2
 8002a66:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	2300      	movs	r3, #0
 8002a72:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002a74:	2308      	movs	r3, #8
 8002a76:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a78:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4858      	ldr	r0, [pc, #352]	@ (8002be0 <HAL_UART_MspInit+0x1dc>)
 8002a80:	f002 fc3a 	bl	80052f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002a84:	2303      	movs	r3, #3
 8002a86:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a90:	2300      	movs	r3, #0
 8002a92:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002a94:	2308      	movs	r3, #8
 8002a96:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a98:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4851      	ldr	r0, [pc, #324]	@ (8002be4 <HAL_UART_MspInit+0x1e0>)
 8002aa0:	f002 fc2a 	bl	80052f8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	2026      	movs	r0, #38	@ 0x26
 8002aaa:	f001 fdde 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002aae:	2026      	movs	r0, #38	@ 0x26
 8002ab0:	f001 fdf5 	bl	800469e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ab4:	e08e      	b.n	8002bd4 <HAL_UART_MspInit+0x1d0>
  else if(uartHandle->Instance==USART1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a4b      	ldr	r2, [pc, #300]	@ (8002be8 <HAL_UART_MspInit+0x1e4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d156      	bne.n	8002b6e <HAL_UART_MspInit+0x16a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8002ac4:	4b49      	ldr	r3, [pc, #292]	@ (8002bec <HAL_UART_MspInit+0x1e8>)
 8002ac6:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ac8:	f107 030c 	add.w	r3, r7, #12
 8002acc:	4618      	mov	r0, r3
 8002ace:	f004 f8c9 	bl	8006c64 <HAL_RCCEx_PeriphCLKConfig>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002ad8:	f7ff f80a 	bl	8001af0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002adc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002ae0:	f7ff fe76 	bl	80027d0 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae4:	2002      	movs	r0, #2
 8002ae6:	f7ff fe07 	bl	80026f8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002aea:	23c0      	movs	r3, #192	@ 0xc0
 8002aec:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aee:	2302      	movs	r3, #2
 8002af0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af6:	2300      	movs	r3, #0
 8002af8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002afa:	2307      	movs	r3, #7
 8002afc:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002b02:	4619      	mov	r1, r3
 8002b04:	4836      	ldr	r0, [pc, #216]	@ (8002be0 <HAL_UART_MspInit+0x1dc>)
 8002b06:	f002 fbf7 	bl	80052f8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002b0a:	4b39      	ldr	r3, [pc, #228]	@ (8002bf0 <HAL_UART_MspInit+0x1ec>)
 8002b0c:	4a39      	ldr	r2, [pc, #228]	@ (8002bf4 <HAL_UART_MspInit+0x1f0>)
 8002b0e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002b10:	4b37      	ldr	r3, [pc, #220]	@ (8002bf0 <HAL_UART_MspInit+0x1ec>)
 8002b12:	2212      	movs	r2, #18
 8002b14:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b16:	4b36      	ldr	r3, [pc, #216]	@ (8002bf0 <HAL_UART_MspInit+0x1ec>)
 8002b18:	2210      	movs	r2, #16
 8002b1a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b1c:	4b34      	ldr	r3, [pc, #208]	@ (8002bf0 <HAL_UART_MspInit+0x1ec>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b22:	4b33      	ldr	r3, [pc, #204]	@ (8002bf0 <HAL_UART_MspInit+0x1ec>)
 8002b24:	2280      	movs	r2, #128	@ 0x80
 8002b26:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b28:	4b31      	ldr	r3, [pc, #196]	@ (8002bf0 <HAL_UART_MspInit+0x1ec>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b2e:	4b30      	ldr	r3, [pc, #192]	@ (8002bf0 <HAL_UART_MspInit+0x1ec>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002b34:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf0 <HAL_UART_MspInit+0x1ec>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf0 <HAL_UART_MspInit+0x1ec>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b40:	482b      	ldr	r0, [pc, #172]	@ (8002bf0 <HAL_UART_MspInit+0x1ec>)
 8002b42:	f001 fdd5 	bl	80046f0 <HAL_DMA_Init>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8002b4c:	f7fe ffd0 	bl	8001af0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a27      	ldr	r2, [pc, #156]	@ (8002bf0 <HAL_UART_MspInit+0x1ec>)
 8002b54:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002b56:	4a26      	ldr	r2, [pc, #152]	@ (8002bf0 <HAL_UART_MspInit+0x1ec>)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2100      	movs	r1, #0
 8002b60:	2024      	movs	r0, #36	@ 0x24
 8002b62:	f001 fd82 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b66:	2024      	movs	r0, #36	@ 0x24
 8002b68:	f001 fd99 	bl	800469e <HAL_NVIC_EnableIRQ>
}
 8002b6c:	e032      	b.n	8002bd4 <HAL_UART_MspInit+0x1d0>
  else if(uartHandle->Instance==USART2)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a21      	ldr	r2, [pc, #132]	@ (8002bf8 <HAL_UART_MspInit+0x1f4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d12d      	bne.n	8002bd4 <HAL_UART_MspInit+0x1d0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8002b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bfc <HAL_UART_MspInit+0x1f8>)
 8002b7e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 f86d 	bl	8006c64 <HAL_RCCEx_PeriphCLKConfig>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8002b90:	f7fe ffae 	bl	8001af0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b94:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002b98:	f7ff fdc6 	bl	8002728 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	f7ff fdab 	bl	80026f8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002ba2:	230c      	movs	r3, #12
 8002ba4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bb2:	2307      	movs	r3, #7
 8002bb4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bc0:	f002 fb9a 	bl	80052f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	2025      	movs	r0, #37	@ 0x25
 8002bca:	f001 fd4e 	bl	800466a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bce:	2025      	movs	r0, #37	@ 0x25
 8002bd0:	f001 fd65 	bl	800469e <HAL_NVIC_EnableIRQ>
}
 8002bd4:	bf00      	nop
 8002bd6:	3758      	adds	r7, #88	@ 0x58
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40008000 	.word	0x40008000
 8002be0:	48000400 	.word	0x48000400
 8002be4:	48000800 	.word	0x48000800
 8002be8:	40013800 	.word	0x40013800
 8002bec:	00030002 	.word	0x00030002
 8002bf0:	2000058c 	.word	0x2000058c
 8002bf4:	40020008 	.word	0x40020008
 8002bf8:	40004400 	.word	0x40004400
 8002bfc:	000c0008 	.word	0x000c0008

08002c00 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8002c88 <HAL_UART_MspDeInit+0x88>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10e      	bne.n	8002c30 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8002c12:	2001      	movs	r0, #1
 8002c14:	f7ff fdca 	bl	80027ac <LL_APB1_GRP2_DisableClock>
    /**LPUART1 GPIO Configuration
    PB1     ------> LPUART1_DE
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 8002c18:	2102      	movs	r1, #2
 8002c1a:	481c      	ldr	r0, [pc, #112]	@ (8002c8c <HAL_UART_MspDeInit+0x8c>)
 8002c1c:	f002 fccc 	bl	80055b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_0);
 8002c20:	2103      	movs	r1, #3
 8002c22:	481b      	ldr	r0, [pc, #108]	@ (8002c90 <HAL_UART_MspDeInit+0x90>)
 8002c24:	f002 fcc8 	bl	80055b8 <HAL_GPIO_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8002c28:	2026      	movs	r0, #38	@ 0x26
 8002c2a:	f001 fd46 	bl	80046ba <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002c2e:	e026      	b.n	8002c7e <HAL_UART_MspDeInit+0x7e>
  else if(uartHandle->Instance==USART1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a17      	ldr	r2, [pc, #92]	@ (8002c94 <HAL_UART_MspDeInit+0x94>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d110      	bne.n	8002c5c <HAL_UART_MspDeInit+0x5c>
    __HAL_RCC_USART1_CLK_DISABLE();
 8002c3a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002c3e:	f7ff fddf 	bl	8002800 <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 8002c42:	21c0      	movs	r1, #192	@ 0xc0
 8002c44:	4811      	ldr	r0, [pc, #68]	@ (8002c8c <HAL_UART_MspDeInit+0x8c>)
 8002c46:	f002 fcb7 	bl	80055b8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f001 fdf6 	bl	8004840 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002c54:	2024      	movs	r0, #36	@ 0x24
 8002c56:	f001 fd30 	bl	80046ba <HAL_NVIC_DisableIRQ>
}
 8002c5a:	e010      	b.n	8002c7e <HAL_UART_MspDeInit+0x7e>
  else if(uartHandle->Instance==USART2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0d      	ldr	r2, [pc, #52]	@ (8002c98 <HAL_UART_MspDeInit+0x98>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d10b      	bne.n	8002c7e <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002c66:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002c6a:	f7ff fd8d 	bl	8002788 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002c6e:	210c      	movs	r1, #12
 8002c70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c74:	f002 fca0 	bl	80055b8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002c78:	2025      	movs	r0, #37	@ 0x25
 8002c7a:	f001 fd1e 	bl	80046ba <HAL_NVIC_DisableIRQ>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40008000 	.word	0x40008000
 8002c8c:	48000400 	.word	0x48000400
 8002c90:	48000800 	.word	0x48000800
 8002c94:	40013800 	.word	0x40013800
 8002c98:	40004400 	.word	0x40004400

08002c9c <LL_APB2_GRP1_ForceReset>:
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002caa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <LL_APB2_GRP1_ReleaseReset>:
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
	...

08002ce4 <LL_EXTI_EnableIT_0_31>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <LL_EXTI_EnableIT_0_31+0x24>)
 8002cee:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002cf2:	4905      	ldr	r1, [pc, #20]	@ (8002d08 <LL_EXTI_EnableIT_0_31+0x24>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	58000800 	.word	0x58000800

08002d0c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002d14:	4a07      	ldr	r2, [pc, #28]	@ (8002d34 <vcom_Init+0x28>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002d1a:	f7fe fb85 	bl	8001428 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002d1e:	f7ff fdd9 	bl	80028d4 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002d22:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002d26:	f7ff ffdd 	bl	8002ce4 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002d2a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200005f0 	.word	0x200005f0

08002d38 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002d3c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002d40:	f7ff ffac 	bl	8002c9c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002d44:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002d48:	f7ff ffb9 	bl	8002cbe <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002d4c:	4804      	ldr	r0, [pc, #16]	@ (8002d60 <vcom_DeInit+0x28>)
 8002d4e:	f7ff ff57 	bl	8002c00 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002d52:	200f      	movs	r0, #15
 8002d54:	f001 fcb1 	bl	80046ba <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002d58:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000464 	.word	0x20000464

08002d64 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	461a      	mov	r2, r3
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4804      	ldr	r0, [pc, #16]	@ (8002d88 <vcom_Trace_DMA+0x24>)
 8002d78:	f005 f996 	bl	80080a8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002d7c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000464 	.word	0x20000464

08002d8c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002d94:	4a19      	ldr	r2, [pc, #100]	@ (8002dfc <vcom_ReceiveInit+0x70>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002d9a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d9e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002da0:	f107 0308 	add.w	r3, r7, #8
 8002da4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002da8:	4815      	ldr	r0, [pc, #84]	@ (8002e00 <vcom_ReceiveInit+0x74>)
 8002daa:	f007 f9b3 	bl	800a114 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002dae:	bf00      	nop
 8002db0:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <vcom_ReceiveInit+0x74>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dbe:	d0f7      	beq.n	8002db0 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002dc0:	bf00      	nop
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <vcom_ReceiveInit+0x74>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dd0:	d1f7      	bne.n	8002dc2 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <vcom_ReceiveInit+0x74>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <vcom_ReceiveInit+0x74>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002de0:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002de2:	4807      	ldr	r0, [pc, #28]	@ (8002e00 <vcom_ReceiveInit+0x74>)
 8002de4:	f007 f9f1 	bl	800a1ca <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002de8:	2201      	movs	r2, #1
 8002dea:	4906      	ldr	r1, [pc, #24]	@ (8002e04 <vcom_ReceiveInit+0x78>)
 8002dec:	4804      	ldr	r0, [pc, #16]	@ (8002e00 <vcom_ReceiveInit+0x74>)
 8002dee:	f005 f90f 	bl	8008010 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002df2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	200005f4 	.word	0x200005f4
 8002e00:	20000464 	.word	0x20000464
 8002e04:	200005ec 	.word	0x200005ec

08002e08 <vcom_Resume>:

void vcom_Resume(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e0c:	4808      	ldr	r0, [pc, #32]	@ (8002e30 <vcom_Resume+0x28>)
 8002e0e:	f005 f8ae 	bl	8007f6e <HAL_UART_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <vcom_Resume+0x14>
  {
    Error_Handler();
 8002e18:	f7fe fe6a 	bl	8001af0 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002e1c:	4805      	ldr	r0, [pc, #20]	@ (8002e34 <vcom_Resume+0x2c>)
 8002e1e:	f001 fc67 	bl	80046f0 <HAL_DMA_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <vcom_Resume+0x24>
  {
    Error_Handler();
 8002e28:	f7fe fe62 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000464 	.word	0x20000464
 8002e34:	2000058c 	.word	0x2000058c

08002e38 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a05      	ldr	r2, [pc, #20]	@ (8002e5c <HAL_UART_TxCpltCallback+0x24>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d103      	bne.n	8002e52 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002e4a:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <HAL_UART_TxCpltCallback+0x28>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2000      	movs	r0, #0
 8002e50:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40013800 	.word	0x40013800
 8002e60:	200005f0 	.word	0x200005f0

08002e64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea8 <HAL_UART_RxCpltCallback+0x44>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d113      	bne.n	8002e9e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002e76:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <HAL_UART_RxCpltCallback+0x48>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_UART_RxCpltCallback+0x30>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002e88:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <HAL_UART_RxCpltCallback+0x48>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2101      	movs	r1, #1
 8002e90:	4807      	ldr	r0, [pc, #28]	@ (8002eb0 <HAL_UART_RxCpltCallback+0x4c>)
 8002e92:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002e94:	2201      	movs	r2, #1
 8002e96:	4906      	ldr	r1, [pc, #24]	@ (8002eb0 <HAL_UART_RxCpltCallback+0x4c>)
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f005 f8b9 	bl	8008010 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40013800 	.word	0x40013800
 8002eac:	200005f4 	.word	0x200005f4
 8002eb0:	200005ec 	.word	0x200005ec

08002eb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002eb4:	480d      	ldr	r0, [pc, #52]	@ (8002eec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002eb8:	f7ff f9db 	bl	8002272 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ebc:	480c      	ldr	r0, [pc, #48]	@ (8002ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ebe:	490d      	ldr	r1, [pc, #52]	@ (8002ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef8 <LoopForever+0xe>)
  movs r3, #0
 8002ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec4:	e002      	b.n	8002ecc <LoopCopyDataInit>

08002ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eca:	3304      	adds	r3, #4

08002ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ed0:	d3f9      	bcc.n	8002ec6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8002f00 <LoopForever+0x16>)
  movs r3, #0
 8002ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed8:	e001      	b.n	8002ede <LoopFillZerobss>

08002eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002edc:	3204      	adds	r2, #4

08002ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ee0:	d3fb      	bcc.n	8002eda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ee2:	f019 f97b 	bl	801c1dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ee6:	f7fe fd88 	bl	80019fa <main>

08002eea <LoopForever>:

LoopForever:
    b LoopForever
 8002eea:	e7fe      	b.n	8002eea <LoopForever>
  ldr   r0, =_estack
 8002eec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef4:	20000300 	.word	0x20000300
  ldr r2, =_sidata
 8002ef8:	0801f0b8 	.word	0x0801f0b8
  ldr r2, =_sbss
 8002efc:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 8002f00:	20001eec 	.word	0x20001eec

08002f04 <AES_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f04:	e7fe      	b.n	8002f04 <AES_IRQHandler>
	...

08002f08 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f0c:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a03      	ldr	r2, [pc, #12]	@ (8002f20 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6053      	str	r3, [r2, #4]
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	e0042000 	.word	0xe0042000

08002f24 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002f28:	4b04      	ldr	r3, [pc, #16]	@ (8002f3c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a03      	ldr	r2, [pc, #12]	@ (8002f3c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002f2e:	f043 0302 	orr.w	r3, r3, #2
 8002f32:	6053      	str	r3, [r2, #4]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	e0042000 	.word	0xe0042000

08002f40 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002f44:	4b04      	ldr	r3, [pc, #16]	@ (8002f58 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4a03      	ldr	r2, [pc, #12]	@ (8002f58 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002f4a:	f043 0304 	orr.w	r3, r3, #4
 8002f4e:	6053      	str	r3, [r2, #4]
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	e0042000 	.word	0xe0042000

08002f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f66:	2003      	movs	r0, #3
 8002f68:	f001 fb74 	bl	8004654 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f6c:	f003 fc9c 	bl	80068a8 <HAL_RCC_GetHCLKFreq>
 8002f70:	4603      	mov	r3, r0
 8002f72:	4a09      	ldr	r2, [pc, #36]	@ (8002f98 <HAL_Init+0x3c>)
 8002f74:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f76:	2000      	movs	r0, #0
 8002f78:	f000 f810 	bl	8002f9c <HAL_InitTick>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	71fb      	strb	r3, [r7, #7]
 8002f86:	e001      	b.n	8002f8c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f88:	f7fe fea9 	bl	8001cde <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000000 	.word	0x20000000

08002f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002fa8:	4b17      	ldr	r3, [pc, #92]	@ (8003008 <HAL_InitTick+0x6c>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d024      	beq.n	8002ffa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002fb0:	f003 fc7a 	bl	80068a8 <HAL_RCC_GetHCLKFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b14      	ldr	r3, [pc, #80]	@ (8003008 <HAL_InitTick+0x6c>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 fb84 	bl	80046d6 <HAL_SYSTICK_Config>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10f      	bne.n	8002ff4 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b0f      	cmp	r3, #15
 8002fd8:	d809      	bhi.n	8002fee <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe2:	f001 fb42 	bl	800466a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fe6:	4a09      	ldr	r2, [pc, #36]	@ (800300c <HAL_InitTick+0x70>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	e007      	b.n	8002ffe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
 8002ff2:	e004      	b.n	8002ffe <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
 8002ff8:	e001      	b.n	8002ffe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000008 	.word	0x20000008
 800300c:	20000004 	.word	0x20000004

08003010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <HAL_IncTick+0x1c>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_IncTick+0x20>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4413      	add	r3, r2
 8003020:	4a03      	ldr	r2, [pc, #12]	@ (8003030 <HAL_IncTick+0x20>)
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	20000008 	.word	0x20000008
 8003030:	200005f8 	.word	0x200005f8

08003034 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003038:	4b04      	ldr	r3, [pc, #16]	@ (800304c <HAL_SuspendTick+0x18>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a03      	ldr	r2, [pc, #12]	@ (800304c <HAL_SuspendTick+0x18>)
 800303e:	f023 0302 	bic.w	r3, r3, #2
 8003042:	6013      	str	r3, [r2, #0]
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	e000e010 	.word	0xe000e010

08003050 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003054:	4b04      	ldr	r3, [pc, #16]	@ (8003068 <HAL_ResumeTick+0x18>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a03      	ldr	r2, [pc, #12]	@ (8003068 <HAL_ResumeTick+0x18>)
 800305a:	f043 0302 	orr.w	r3, r3, #2
 800305e:	6013      	str	r3, [r2, #0]
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	e000e010 	.word	0xe000e010

0800306c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003070:	4b02      	ldr	r3, [pc, #8]	@ (800307c <HAL_GetUIDw0+0x10>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr
 800307c:	1fff7590 	.word	0x1fff7590

08003080 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003084:	4b02      	ldr	r3, [pc, #8]	@ (8003090 <HAL_GetUIDw1+0x10>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr
 8003090:	1fff7594 	.word	0x1fff7594

08003094 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003098:	4b02      	ldr	r3, [pc, #8]	@ (80030a4 <HAL_GetUIDw2+0x10>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr
 80030a4:	1fff7598 	.word	0x1fff7598

080030a8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80030ac:	f7ff ff2c 	bl	8002f08 <LL_DBGMCU_EnableDBGSleepMode>
}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80030b8:	f7ff ff34 	bl	8002f24 <LL_DBGMCU_EnableDBGStopMode>
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80030c4:	f7ff ff3c 	bl	8002f40 <LL_DBGMCU_EnableDBGStandbyMode>
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}

080030cc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	601a      	str	r2, [r3, #0]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2107      	movs	r1, #7
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	401a      	ands	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	431a      	orrs	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2107      	movs	r1, #7
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800319a:	b480      	push	{r7}
 800319c:	b085      	sub	sp, #20
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	210f      	movs	r1, #15
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	401a      	ands	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0e9b      	lsrs	r3, r3, #26
 80031be:	f003 010f 	and.w	r1, r3, #15
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	431a      	orrs	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003214:	43db      	mvns	r3, r3
 8003216:	401a      	ands	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr

08003226 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f003 0303 	and.w	r3, r3, #3
}
 8003236:	4618      	mov	r0, r3
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	43db      	mvns	r3, r3
 8003256:	401a      	ands	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	0219      	lsls	r1, r3, #8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	400b      	ands	r3, r1
 8003260:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8003264:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003268:	431a      	orrs	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003288:	f023 0317 	bic.w	r3, r3, #23
 800328c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr

0800329e <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80032ae:	f023 0317 	bic.w	r3, r3, #23
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6093      	str	r3, [r2, #8]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032d4:	d101      	bne.n	80032da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032f6:	f023 0317 	bic.w	r3, r3, #23
 80032fa:	f043 0201 	orr.w	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800331c:	f023 0317 	bic.w	r3, r3, #23
 8003320:	f043 0202 	orr.w	r2, r3, #2
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr

08003332 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <LL_ADC_IsEnabled+0x18>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <LL_ADC_IsEnabled+0x1a>
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	d101      	bne.n	800336e <LL_ADC_IsDisableOngoing+0x18>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <LL_ADC_IsDisableOngoing+0x1a>
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800338a:	f023 0317 	bic.w	r3, r3, #23
 800338e:	f043 0204 	orr.w	r2, r3, #4
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033b0:	f023 0317 	bic.w	r3, r3, #23
 80033b4:	f043 0210 	orr.w	r2, r3, #16
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d101      	bne.n	80033de <LL_ADC_REG_IsConversionOngoing+0x18>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
	...

080033ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e17e      	b.n	800370c <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003418:	2b00      	cmp	r3, #0
 800341a:	d109      	bne.n	8003430 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7fd febf 	bl	80011a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ff43 	bl	80032c0 <LL_ADC_IsInternalRegulatorEnabled>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d115      	bne.n	800346c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff17 	bl	8003278 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800344a:	4b9e      	ldr	r3, [pc, #632]	@ (80036c4 <HAL_ADC_Init+0x2d8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	099b      	lsrs	r3, r3, #6
 8003450:	4a9d      	ldr	r2, [pc, #628]	@ (80036c8 <HAL_ADC_Init+0x2dc>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	099b      	lsrs	r3, r3, #6
 8003458:	3301      	adds	r3, #1
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800345e:	e002      	b.n	8003466 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3b01      	subs	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f9      	bne.n	8003460 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff25 	bl	80032c0 <LL_ADC_IsInternalRegulatorEnabled>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10d      	bne.n	8003498 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003480:	f043 0210 	orr.w	r2, r3, #16
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348c:	f043 0201 	orr.w	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ff92 	bl	80033c6 <LL_ADC_REG_IsConversionOngoing>
 80034a2:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f040 8124 	bne.w	80036fa <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f040 8120 	bne.w	80036fa <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034be:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80034c2:	f043 0202 	orr.w	r2, r3, #2
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff ff2f 	bl	8003332 <LL_ADC_IsEnabled>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f040 80a7 	bne.w	800362a <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7e1b      	ldrb	r3, [r3, #24]
 80034e4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80034e6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7e5b      	ldrb	r3, [r3, #25]
 80034ec:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034ee:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	7e9b      	ldrb	r3, [r3, #26]
 80034f4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80034f6:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80034fc:	2a00      	cmp	r2, #0
 80034fe:	d002      	beq.n	8003506 <HAL_ADC_Init+0x11a>
 8003500:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003504:	e000      	b.n	8003508 <HAL_ADC_Init+0x11c>
 8003506:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003508:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800350e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	da04      	bge.n	8003522 <HAL_ADC_Init+0x136>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003520:	e001      	b.n	8003526 <HAL_ADC_Init+0x13a>
 8003522:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8003526:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800352e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003530:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d114      	bne.n	800356c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7e9b      	ldrb	r3, [r3, #26]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d104      	bne.n	8003554 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	e00b      	b.n	800356c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003558:	f043 0220 	orr.w	r2, r3, #32
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003564:	f043 0201 	orr.w	r2, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	2b00      	cmp	r3, #0
 8003572:	d009      	beq.n	8003588 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003580:	4313      	orrs	r3, r2
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4313      	orrs	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8003592:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	69b9      	ldr	r1, [r7, #24]
 800359c:	430b      	orrs	r3, r1
 800359e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035ac:	4313      	orrs	r3, r2
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d111      	bne.n	80035e2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035ca:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80035d0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80035d6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	4b38      	ldr	r3, [pc, #224]	@ (80036cc <HAL_ADC_Init+0x2e0>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	6979      	ldr	r1, [r7, #20]
 80035f2:	430b      	orrs	r3, r1
 80035f4:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80035fe:	d014      	beq.n	800362a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003608:	d00f      	beq.n	800362a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800360e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003612:	d00a      	beq.n	800362a <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003614:	4b2e      	ldr	r3, [pc, #184]	@ (80036d0 <HAL_ADC_Init+0x2e4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003624:	492a      	ldr	r1, [pc, #168]	@ (80036d0 <HAL_ADC_Init+0x2e4>)
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003632:	461a      	mov	r2, r3
 8003634:	2100      	movs	r1, #0
 8003636:	f7ff fd68 	bl	800310a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003642:	461a      	mov	r2, r3
 8003644:	4923      	ldr	r1, [pc, #140]	@ (80036d4 <HAL_ADC_Init+0x2e8>)
 8003646:	f7ff fd60 	bl	800310a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d108      	bne.n	8003664 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f062 020f 	orn	r2, r2, #15
 8003660:	629a      	str	r2, [r3, #40]	@ 0x28
 8003662:	e017      	b.n	8003694 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800366c:	d112      	bne.n	8003694 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	3b01      	subs	r3, #1
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	f003 031c 	and.w	r3, r3, #28
 8003680:	f06f 020f 	mvn.w	r2, #15
 8003684:	fa02 f103 	lsl.w	r1, r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fd53 	bl	8003146 <LL_ADC_GetSamplingTimeCommonChannels>
 80036a0:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d116      	bne.n	80036d8 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b4:	f023 0303 	bic.w	r3, r3, #3
 80036b8:	f043 0201 	orr.w	r2, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80036c0:	e023      	b.n	800370a <HAL_ADC_Init+0x31e>
 80036c2:	bf00      	nop
 80036c4:	20000000 	.word	0x20000000
 80036c8:	053e2d63 	.word	0x053e2d63
 80036cc:	1ffffc02 	.word	0x1ffffc02
 80036d0:	40012708 	.word	0x40012708
 80036d4:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036dc:	f023 0312 	bic.w	r3, r3, #18
 80036e0:	f043 0210 	orr.w	r2, r3, #16
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ec:	f043 0201 	orr.w	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80036f8:	e007      	b.n	800370a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fe:	f043 0210 	orr.w	r2, r3, #16
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800370a:	7ffb      	ldrb	r3, [r7, #31]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3720      	adds	r7, #32
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e07a      	b.n	800381c <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372a:	f043 0202 	orr.w	r2, r3, #2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fc02 	bl	8003f3c <ADC_ConversionStop>
 8003738:	4603      	mov	r3, r0
 800373a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10f      	bne.n	8003762 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fcc6 	bl	80040d4 <ADC_Disable>
 8003748:	4603      	mov	r3, r0
 800374a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fd9e 	bl	800329e <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003770:	f023 0303 	bic.w	r3, r3, #3
 8003774:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f240 329f 	movw	r2, #927	@ 0x39f
 800377e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68d9      	ldr	r1, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4b26      	ldr	r3, [pc, #152]	@ (8003824 <HAL_ADC_DeInit+0x110>)
 800378c:	400b      	ands	r3, r1
 800378e:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0207 	bic.w	r2, r2, #7
 800379e:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2200      	movs	r2, #0
 80037ac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80037bc:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80037cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80037dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 80037ec:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80037ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003828 <HAL_ADC_DeInit+0x114>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003828 <HAL_ADC_DeInit+0x114>)
 80037f4:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 80037f8:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd fcec 	bl	80011d8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800381a:	7bfb      	ldrb	r3, [r7, #15]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	833e0200 	.word	0x833e0200
 8003828:	40012708 	.word	0x40012708

0800382c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fdc4 	bl	80033c6 <LL_ADC_REG_IsConversionOngoing>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d132      	bne.n	80038aa <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_ADC_Start+0x26>
 800384e:	2302      	movs	r3, #2
 8003850:	e02e      	b.n	80038b0 <HAL_ADC_Start+0x84>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fbb4 	bl	8003fc8 <ADC_Enable>
 8003860:	4603      	mov	r3, r0
 8003862:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11a      	bne.n	80038a0 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003872:	f023 0301 	bic.w	r3, r3, #1
 8003876:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	221c      	movs	r2, #28
 800388a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fd6e 	bl	800337a <LL_ADC_REG_StartConversion>
 800389e:	e006      	b.n	80038ae <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80038a8:	e001      	b.n	80038ae <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038aa:	2302      	movs	r3, #2
 80038ac:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_Stop+0x16>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e022      	b.n	8003914 <HAL_ADC_Stop+0x5c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fb30 	bl	8003f3c <ADC_ConversionStop>
 80038dc:	4603      	mov	r3, r0
 80038de:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d111      	bne.n	800390a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fbf4 	bl	80040d4 <ADC_Disable>
 80038ec:	4603      	mov	r3, r0
 80038ee:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038fe:	f023 0301 	bic.w	r3, r3, #1
 8003902:	f043 0201 	orr.w	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	2b08      	cmp	r3, #8
 800392c:	d102      	bne.n	8003934 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800392e:	2308      	movs	r3, #8
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	e010      	b.n	8003956 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003946:	f043 0220 	orr.w	r2, r3, #32
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e077      	b.n	8003a42 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003952:	2304      	movs	r3, #4
 8003954:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003956:	f7fe fc0d 	bl	8002174 <HAL_GetTick>
 800395a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800395c:	e021      	b.n	80039a2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d01d      	beq.n	80039a2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003966:	f7fe fc05 	bl	8002174 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <HAL_ADC_PollForConversion+0x60>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d112      	bne.n	80039a2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10b      	bne.n	80039a2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398e:	f043 0204 	orr.w	r2, r3, #4
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e04f      	b.n	8003a42 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0d6      	beq.n	800395e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff fbd8 	bl	8003176 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d031      	beq.n	8003a30 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	7e9b      	ldrb	r3, [r3, #26]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d12d      	bne.n	8003a30 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d126      	bne.n	8003a30 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fced 	bl	80033c6 <LL_ADC_REG_IsConversionOngoing>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d112      	bne.n	8003a18 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 020c 	bic.w	r2, r2, #12
 8003a00:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	f043 0201 	orr.w	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a16:	e00b      	b.n	8003a30 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1c:	f043 0220 	orr.w	r2, r3, #32
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a28:	f043 0201 	orr.w	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	7e1b      	ldrb	r3, [r3, #24]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d103      	bne.n	8003a40 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	220c      	movs	r2, #12
 8003a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr

08003a62 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b086      	sub	sp, #24
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d017      	beq.n	8003ab8 <HAL_ADC_IRQHandler+0x56>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d012      	beq.n	8003ab8 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d105      	bne.n	8003aaa <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fcd0 	bl	8004450 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d004      	beq.n	8003acc <HAL_ADC_IRQHandler+0x6a>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d109      	bne.n	8003ae0 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d051      	beq.n	8003b7a <HAL_ADC_IRQHandler+0x118>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d04c      	beq.n	8003b7a <HAL_ADC_IRQHandler+0x118>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fb3a 	bl	8003176 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d031      	beq.n	8003b6c <HAL_ADC_IRQHandler+0x10a>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	7e9b      	ldrb	r3, [r3, #26]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d12d      	bne.n	8003b6c <HAL_ADC_IRQHandler+0x10a>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d126      	bne.n	8003b6c <HAL_ADC_IRQHandler+0x10a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fc4f 	bl	80033c6 <LL_ADC_REG_IsConversionOngoing>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d112      	bne.n	8003b54 <HAL_ADC_IRQHandler+0xf2>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 020c 	bic.w	r2, r2, #12
 8003b3c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b52:	e00b      	b.n	8003b6c <HAL_ADC_IRQHandler+0x10a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b64:	f043 0201 	orr.w	r2, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f892 	bl	8003c96 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	220c      	movs	r2, #12
 8003b78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d011      	beq.n	8003ba8 <HAL_ADC_IRQHandler+0x146>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00c      	beq.n	8003ba8 <HAL_ADC_IRQHandler+0x146>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b92:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f884 	bl	8003ca8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2280      	movs	r2, #128	@ 0x80
 8003ba6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d012      	beq.n	8003bd8 <HAL_ADC_IRQHandler+0x176>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00d      	beq.n	8003bd8 <HAL_ADC_IRQHandler+0x176>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fc2f 	bl	800442c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bd6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d012      	beq.n	8003c08 <HAL_ADC_IRQHandler+0x1a6>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00d      	beq.n	8003c08 <HAL_ADC_IRQHandler+0x1a6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fc20 	bl	800443e <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d02b      	beq.n	8003c6a <HAL_ADC_IRQHandler+0x208>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d026      	beq.n	8003c6a <HAL_ADC_IRQHandler+0x208>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d102      	bne.n	8003c2a <HAL_ADC_IRQHandler+0x1c8>
    {
      overrun_error = 1UL;
 8003c24:	2301      	movs	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	e009      	b.n	8003c3e <HAL_ADC_IRQHandler+0x1dc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff faf9 	bl	8003226 <LL_ADC_REG_GetDMATransfer>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_ADC_IRQHandler+0x1dc>
      {
        overrun_error = 1UL;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d10e      	bne.n	8003c62 <HAL_ADC_IRQHandler+0x200>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c48:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c54:	f043 0202 	orr.w	r2, r3, #2
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f82c 	bl	8003cba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2210      	movs	r2, #16
 8003c68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00c      	beq.n	8003c8e <HAL_ADC_IRQHandler+0x22c>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <HAL_ADC_IRQHandler+0x22c>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fbef 	bl	8004462 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c8c:	601a      	str	r2, [r3, #0]
  }
}
 8003c8e:	bf00      	nop
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x28>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e110      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x24a>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fb60 	bl	80033c6 <LL_ADC_REG_IsConversionOngoing>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f040 80f7 	bne.w	8003efc <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	f000 80b1 	beq.w	8003e7a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d20:	d004      	beq.n	8003d2c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d26:	4a7e      	ldr	r2, [pc, #504]	@ (8003f20 <HAL_ADC_ConfigChannel+0x254>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d108      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f7ff fa50 	bl	80031dc <LL_ADC_REG_SetSequencerChAdd>
 8003d3c:	e041      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	210f      	movs	r1, #15
 8003d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	401a      	ands	r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d105      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0xa0>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	0e9b      	lsrs	r3, r3, #26
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	e011      	b.n	8003d90 <HAL_ADC_ConfigChannel+0xc4>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003d84:	2320      	movs	r3, #32
 8003d86:	e003      	b.n	8003d90 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	fab3 f383 	clz	r3, r3
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	6839      	ldr	r1, [r7, #0]
 8003d92:	6849      	ldr	r1, [r1, #4]
 8003d94:	f001 011f 	and.w	r1, r1, #31
 8003d98:	408b      	lsls	r3, r1
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	089b      	lsrs	r3, r3, #2
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d808      	bhi.n	8003dc2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f7ff f9ec 	bl	800319a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6819      	ldr	r1, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f7ff fa36 	bl	8003240 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f280 8097 	bge.w	8003f0c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dde:	4851      	ldr	r0, [pc, #324]	@ (8003f24 <HAL_ADC_ConfigChannel+0x258>)
 8003de0:	f7ff f986 	bl	80030f0 <LL_ADC_GetCommonPathInternalCh>
 8003de4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a4f      	ldr	r2, [pc, #316]	@ (8003f28 <HAL_ADC_ConfigChannel+0x25c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d120      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d11b      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e00:	4619      	mov	r1, r3
 8003e02:	4848      	ldr	r0, [pc, #288]	@ (8003f24 <HAL_ADC_ConfigChannel+0x258>)
 8003e04:	f7ff f962 	bl	80030cc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e08:	4b48      	ldr	r3, [pc, #288]	@ (8003f2c <HAL_ADC_ConfigChannel+0x260>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	4a48      	ldr	r2, [pc, #288]	@ (8003f30 <HAL_ADC_ConfigChannel+0x264>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	4613      	mov	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003e22:	e002      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f9      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003e30:	e06c      	b.n	8003f0c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a3f      	ldr	r2, [pc, #252]	@ (8003f34 <HAL_ADC_ConfigChannel+0x268>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d10c      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d107      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4835      	ldr	r0, [pc, #212]	@ (8003f24 <HAL_ADC_ConfigChannel+0x258>)
 8003e50:	f7ff f93c 	bl	80030cc <LL_ADC_SetCommonPathInternalCh>
 8003e54:	e05a      	b.n	8003f0c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a37      	ldr	r2, [pc, #220]	@ (8003f38 <HAL_ADC_ConfigChannel+0x26c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d155      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d150      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e70:	4619      	mov	r1, r3
 8003e72:	482c      	ldr	r0, [pc, #176]	@ (8003f24 <HAL_ADC_ConfigChannel+0x258>)
 8003e74:	f7ff f92a 	bl	80030cc <LL_ADC_SetCommonPathInternalCh>
 8003e78:	e048      	b.n	8003f0c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e82:	d004      	beq.n	8003e8e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e88:	4a25      	ldr	r2, [pc, #148]	@ (8003f20 <HAL_ADC_ConfigChannel+0x254>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d107      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4619      	mov	r1, r3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	f7ff f9b1 	bl	8003200 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	da32      	bge.n	8003f0c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ea6:	481f      	ldr	r0, [pc, #124]	@ (8003f24 <HAL_ADC_ConfigChannel+0x258>)
 8003ea8:	f7ff f922 	bl	80030f0 <LL_ADC_GetCommonPathInternalCh>
 8003eac:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f28 <HAL_ADC_ConfigChannel+0x25c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d107      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4818      	ldr	r0, [pc, #96]	@ (8003f24 <HAL_ADC_ConfigChannel+0x258>)
 8003ec2:	f7ff f903 	bl	80030cc <LL_ADC_SetCommonPathInternalCh>
 8003ec6:	e021      	b.n	8003f0c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a19      	ldr	r2, [pc, #100]	@ (8003f34 <HAL_ADC_ConfigChannel+0x268>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d107      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4812      	ldr	r0, [pc, #72]	@ (8003f24 <HAL_ADC_ConfigChannel+0x258>)
 8003edc:	f7ff f8f6 	bl	80030cc <LL_ADC_SetCommonPathInternalCh>
 8003ee0:	e014      	b.n	8003f0c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a14      	ldr	r2, [pc, #80]	@ (8003f38 <HAL_ADC_ConfigChannel+0x26c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d10f      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	480b      	ldr	r0, [pc, #44]	@ (8003f24 <HAL_ADC_ConfigChannel+0x258>)
 8003ef6:	f7ff f8e9 	bl	80030cc <LL_ADC_SetCommonPathInternalCh>
 8003efa:	e007      	b.n	8003f0c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003f14:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3720      	adds	r7, #32
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	80000004 	.word	0x80000004
 8003f24:	40012708 	.word	0x40012708
 8003f28:	b0001000 	.word	0xb0001000
 8003f2c:	20000000 	.word	0x20000000
 8003f30:	053e2d63 	.word	0x053e2d63
 8003f34:	b8004000 	.word	0xb8004000
 8003f38:	b4002000 	.word	0xb4002000

08003f3c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fa3c 	bl	80033c6 <LL_ADC_REG_IsConversionOngoing>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d033      	beq.n	8003fbc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff f9fc 	bl	8003356 <LL_ADC_IsDisableOngoing>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d104      	bne.n	8003f6e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff fa19 	bl	80033a0 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f6e:	f7fe f901 	bl	8002174 <HAL_GetTick>
 8003f72:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003f74:	e01b      	b.n	8003fae <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003f76:	f7fe f8fd 	bl	8002174 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d914      	bls.n	8003fae <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00d      	beq.n	8003fae <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f96:	f043 0210 	orr.w	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa2:	f043 0201 	orr.w	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e007      	b.n	8003fbe <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1dc      	bne.n	8003f76 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff f9aa 	bl	8003332 <LL_ADC_IsEnabled>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d169      	bne.n	80040b8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	4b36      	ldr	r3, [pc, #216]	@ (80040c4 <ADC_Enable+0xfc>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00d      	beq.n	800400e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff6:	f043 0210 	orr.w	r2, r3, #16
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004002:	f043 0201 	orr.w	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e055      	b.n	80040ba <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff f967 	bl	80032e6 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004018:	482b      	ldr	r0, [pc, #172]	@ (80040c8 <ADC_Enable+0x100>)
 800401a:	f7ff f869 	bl	80030f0 <LL_ADC_GetCommonPathInternalCh>
 800401e:	4603      	mov	r3, r0
 8004020:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00f      	beq.n	8004048 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004028:	4b28      	ldr	r3, [pc, #160]	@ (80040cc <ADC_Enable+0x104>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	099b      	lsrs	r3, r3, #6
 800402e:	4a28      	ldr	r2, [pc, #160]	@ (80040d0 <ADC_Enable+0x108>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	099b      	lsrs	r3, r3, #6
 8004036:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004038:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800403a:	e002      	b.n	8004042 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	3b01      	subs	r3, #1
 8004040:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f9      	bne.n	800403c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7e5b      	ldrb	r3, [r3, #25]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d033      	beq.n	80040b8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004050:	f7fe f890 	bl	8002174 <HAL_GetTick>
 8004054:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004056:	e028      	b.n	80040aa <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff f968 	bl	8003332 <LL_ADC_IsEnabled>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d104      	bne.n	8004072 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff f93a 	bl	80032e6 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004072:	f7fe f87f 	bl	8002174 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d914      	bls.n	80040aa <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b01      	cmp	r3, #1
 800408c:	d00d      	beq.n	80040aa <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004092:	f043 0210 	orr.w	r2, r3, #16
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409e:	f043 0201 	orr.w	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e007      	b.n	80040ba <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d1cf      	bne.n	8004058 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	80000017 	.word	0x80000017
 80040c8:	40012708 	.word	0x40012708
 80040cc:	20000000 	.word	0x20000000
 80040d0:	053e2d63 	.word	0x053e2d63

080040d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff f938 	bl	8003356 <LL_ADC_IsDisableOngoing>
 80040e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff f920 	bl	8003332 <LL_ADC_IsEnabled>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d047      	beq.n	8004188 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d144      	bne.n	8004188 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0305 	and.w	r3, r3, #5
 8004108:	2b01      	cmp	r3, #1
 800410a:	d10c      	bne.n	8004126 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff f8fb 	bl	800330c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2203      	movs	r2, #3
 800411c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800411e:	f7fe f829 	bl	8002174 <HAL_GetTick>
 8004122:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004124:	e029      	b.n	800417a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412a:	f043 0210 	orr.w	r2, r3, #16
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004136:	f043 0201 	orr.w	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e023      	b.n	800418a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004142:	f7fe f817 	bl	8002174 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d914      	bls.n	800417a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00d      	beq.n	800417a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004162:	f043 0210 	orr.w	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416e:	f043 0201 	orr.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e007      	b.n	800418a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1dc      	bne.n	8004142 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <LL_ADC_SetCalibrationFactor>:
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041a2:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <LL_ADC_GetCalibrationFactor>:
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr

080041d6 <LL_ADC_Enable>:
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041e6:	f023 0317 	bic.w	r3, r3, #23
 80041ea:	f043 0201 	orr.w	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	609a      	str	r2, [r3, #8]
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr

080041fc <LL_ADC_Disable>:
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800420c:	f023 0317 	bic.w	r3, r3, #23
 8004210:	f043 0202 	orr.w	r2, r3, #2
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	609a      	str	r2, [r3, #8]
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr

08004222 <LL_ADC_IsEnabled>:
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <LL_ADC_IsEnabled+0x18>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <LL_ADC_IsEnabled+0x1a>
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr

08004246 <LL_ADC_StartCalibration>:
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004256:	f023 0317 	bic.w	r3, r3, #23
 800425a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	609a      	str	r2, [r3, #8]
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <LL_ADC_IsCalibrationOnGoing>:
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800427c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004280:	d101      	bne.n	8004286 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr

08004292 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b088      	sub	sp, #32
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800429a:	2300      	movs	r3, #0
 800429c:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_ADCEx_Calibration_Start+0x1e>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e0b9      	b.n	8004424 <HAL_ADCEx_Calibration_Start+0x192>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ff0b 	bl	80040d4 <ADC_Disable>
 80042be:	4603      	mov	r3, r0
 80042c0:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff ffab 	bl	8004222 <LL_ADC_IsEnabled>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f040 809d 	bne.w	800440e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80042dc:	f043 0202 	orr.w	r2, r3, #2
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	f248 0303 	movw	r3, #32771	@ 0x8003
 80042ee:	4013      	ands	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004300:	f023 0303 	bic.w	r3, r3, #3
 8004304:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004306:	2300      	movs	r3, #0
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	e02e      	b.n	800436a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ff98 	bl	8004246 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004316:	e014      	b.n	8004342 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	3301      	adds	r3, #1
 800431c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8004324:	d30d      	bcc.n	8004342 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432a:	f023 0312 	bic.w	r3, r3, #18
 800432e:	f043 0210 	orr.w	r2, r3, #16
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e070      	b.n	8004424 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff ff90 	bl	800426c <LL_ADC_IsCalibrationOnGoing>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e2      	bne.n	8004318 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff ff2f 	bl	80041ba <LL_ADC_GetCalibrationFactor>
 800435c:	4602      	mov	r2, r0
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	4413      	add	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	3301      	adds	r3, #1
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	2b07      	cmp	r3, #7
 800436e:	d9cd      	bls.n	800430c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	fbb2 f3f3 	udiv	r3, r2, r3
 8004378:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff ff29 	bl	80041d6 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69b9      	ldr	r1, [r7, #24]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff ff01 	bl	8004192 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff ff31 	bl	80041fc <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800439a:	f7fd feeb 	bl	8002174 <HAL_GetTick>
 800439e:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043a0:	e01c      	b.n	80043dc <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80043a2:	f7fd fee7 	bl	8002174 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d915      	bls.n	80043dc <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff ff34 	bl	8004222 <LL_ADC_IsEnabled>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00d      	beq.n	80043dc <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c4:	f043 0210 	orr.w	r2, r3, #16
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d0:	f043 0201 	orr.w	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e023      	b.n	8004424 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff ff1e 	bl	8004222 <LL_ADC_IsEnabled>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1da      	bne.n	80043a2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68d9      	ldr	r1, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004400:	f023 0303 	bic.w	r3, r3, #3
 8004404:	f043 0201 	orr.w	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	659a      	str	r2, [r3, #88]	@ 0x58
 800440c:	e005      	b.n	800441a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004412:	f043 0210 	orr.w	r2, r3, #16
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004422:	7dfb      	ldrb	r3, [r7, #23]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr

0800443e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr

08004450 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr

08004462 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004484:	4b0c      	ldr	r3, [pc, #48]	@ (80044b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004490:	4013      	ands	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800449c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044a6:	4a04      	ldr	r2, [pc, #16]	@ (80044b8 <__NVIC_SetPriorityGrouping+0x44>)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	60d3      	str	r3, [r2, #12]
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044c0:	4b04      	ldr	r3, [pc, #16]	@ (80044d4 <__NVIC_GetPriorityGrouping+0x18>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	0a1b      	lsrs	r3, r3, #8
 80044c6:	f003 0307 	and.w	r3, r3, #7
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	db0b      	blt.n	8004502 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	f003 021f 	and.w	r2, r3, #31
 80044f0:	4906      	ldr	r1, [pc, #24]	@ (800450c <__NVIC_EnableIRQ+0x34>)
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	2001      	movs	r0, #1
 80044fa:	fa00 f202 	lsl.w	r2, r0, r2
 80044fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr
 800450c:	e000e100 	.word	0xe000e100

08004510 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800451a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451e:	2b00      	cmp	r3, #0
 8004520:	db12      	blt.n	8004548 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004522:	79fb      	ldrb	r3, [r7, #7]
 8004524:	f003 021f 	and.w	r2, r3, #31
 8004528:	490a      	ldr	r1, [pc, #40]	@ (8004554 <__NVIC_DisableIRQ+0x44>)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	2001      	movs	r0, #1
 8004532:	fa00 f202 	lsl.w	r2, r0, r2
 8004536:	3320      	adds	r3, #32
 8004538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800453c:	f3bf 8f4f 	dsb	sy
}
 8004540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004542:	f3bf 8f6f 	isb	sy
}
 8004546:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	e000e100 	.word	0xe000e100

08004558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	6039      	str	r1, [r7, #0]
 8004562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004568:	2b00      	cmp	r3, #0
 800456a:	db0a      	blt.n	8004582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	b2da      	uxtb	r2, r3
 8004570:	490c      	ldr	r1, [pc, #48]	@ (80045a4 <__NVIC_SetPriority+0x4c>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	0112      	lsls	r2, r2, #4
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	440b      	add	r3, r1
 800457c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004580:	e00a      	b.n	8004598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	4908      	ldr	r1, [pc, #32]	@ (80045a8 <__NVIC_SetPriority+0x50>)
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	3b04      	subs	r3, #4
 8004590:	0112      	lsls	r2, r2, #4
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	440b      	add	r3, r1
 8004596:	761a      	strb	r2, [r3, #24]
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	e000e100 	.word	0xe000e100
 80045a8:	e000ed00 	.word	0xe000ed00

080045ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b089      	sub	sp, #36	@ 0x24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f1c3 0307 	rsb	r3, r3, #7
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	bf28      	it	cs
 80045ca:	2304      	movcs	r3, #4
 80045cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3304      	adds	r3, #4
 80045d2:	2b06      	cmp	r3, #6
 80045d4:	d902      	bls.n	80045dc <NVIC_EncodePriority+0x30>
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3b03      	subs	r3, #3
 80045da:	e000      	b.n	80045de <NVIC_EncodePriority+0x32>
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e0:	f04f 32ff 	mov.w	r2, #4294967295
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	43da      	mvns	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	401a      	ands	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f4:	f04f 31ff 	mov.w	r1, #4294967295
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	fa01 f303 	lsl.w	r3, r1, r3
 80045fe:	43d9      	mvns	r1, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004604:	4313      	orrs	r3, r2
         );
}
 8004606:	4618      	mov	r0, r3
 8004608:	3724      	adds	r7, #36	@ 0x24
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr

08004610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3b01      	subs	r3, #1
 800461c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004620:	d301      	bcc.n	8004626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004622:	2301      	movs	r3, #1
 8004624:	e00f      	b.n	8004646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004626:	4a0a      	ldr	r2, [pc, #40]	@ (8004650 <SysTick_Config+0x40>)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3b01      	subs	r3, #1
 800462c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800462e:	210f      	movs	r1, #15
 8004630:	f04f 30ff 	mov.w	r0, #4294967295
 8004634:	f7ff ff90 	bl	8004558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004638:	4b05      	ldr	r3, [pc, #20]	@ (8004650 <SysTick_Config+0x40>)
 800463a:	2200      	movs	r2, #0
 800463c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800463e:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <SysTick_Config+0x40>)
 8004640:	2207      	movs	r2, #7
 8004642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	e000e010 	.word	0xe000e010

08004654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff ff09 	bl	8004474 <__NVIC_SetPriorityGrouping>
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b086      	sub	sp, #24
 800466e:	af00      	add	r7, sp, #0
 8004670:	4603      	mov	r3, r0
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
 8004676:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004678:	f7ff ff20 	bl	80044bc <__NVIC_GetPriorityGrouping>
 800467c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	6978      	ldr	r0, [r7, #20]
 8004684:	f7ff ff92 	bl	80045ac <NVIC_EncodePriority>
 8004688:	4602      	mov	r2, r0
 800468a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468e:	4611      	mov	r1, r2
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ff61 	bl	8004558 <__NVIC_SetPriority>
}
 8004696:	bf00      	nop
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	4603      	mov	r3, r0
 80046a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff ff13 	bl	80044d8 <__NVIC_EnableIRQ>
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	4603      	mov	r3, r0
 80046c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff ff21 	bl	8004510 <__NVIC_DisableIRQ>
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff ff96 	bl	8004610 <SysTick_Config>
 80046e4:	4603      	mov	r3, r0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e08e      	b.n	8004820 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	4b47      	ldr	r3, [pc, #284]	@ (8004828 <HAL_DMA_Init+0x138>)
 800470a:	429a      	cmp	r2, r3
 800470c:	d80f      	bhi.n	800472e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	4b45      	ldr	r3, [pc, #276]	@ (800482c <HAL_DMA_Init+0x13c>)
 8004716:	4413      	add	r3, r2
 8004718:	4a45      	ldr	r2, [pc, #276]	@ (8004830 <HAL_DMA_Init+0x140>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	091b      	lsrs	r3, r3, #4
 8004720:	009a      	lsls	r2, r3, #2
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a42      	ldr	r2, [pc, #264]	@ (8004834 <HAL_DMA_Init+0x144>)
 800472a:	641a      	str	r2, [r3, #64]	@ 0x40
 800472c:	e00e      	b.n	800474c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	4b40      	ldr	r3, [pc, #256]	@ (8004838 <HAL_DMA_Init+0x148>)
 8004736:	4413      	add	r3, r2
 8004738:	4a3d      	ldr	r2, [pc, #244]	@ (8004830 <HAL_DMA_Init+0x140>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	009a      	lsls	r2, r3, #2
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a3c      	ldr	r2, [pc, #240]	@ (800483c <HAL_DMA_Init+0x14c>)
 800474a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004766:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6819      	ldr	r1, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fb24 	bl	8004dec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047ac:	d102      	bne.n	80047b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047c0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80047ca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d010      	beq.n	80047f6 <HAL_DMA_Init+0x106>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d80c      	bhi.n	80047f6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fb4d 	bl	8004e7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80047f2:	605a      	str	r2, [r3, #4]
 80047f4:	e008      	b.n	8004808 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40020407 	.word	0x40020407
 800482c:	bffdfff8 	.word	0xbffdfff8
 8004830:	cccccccd 	.word	0xcccccccd
 8004834:	40020000 	.word	0x40020000
 8004838:	bffdfbf8 	.word	0xbffdfbf8
 800483c:	40020400 	.word	0x40020400

08004840 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e07b      	b.n	800494a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	4b3a      	ldr	r3, [pc, #232]	@ (8004954 <HAL_DMA_DeInit+0x114>)
 800486a:	429a      	cmp	r2, r3
 800486c:	d80f      	bhi.n	800488e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	4b38      	ldr	r3, [pc, #224]	@ (8004958 <HAL_DMA_DeInit+0x118>)
 8004876:	4413      	add	r3, r2
 8004878:	4a38      	ldr	r2, [pc, #224]	@ (800495c <HAL_DMA_DeInit+0x11c>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	091b      	lsrs	r3, r3, #4
 8004880:	009a      	lsls	r2, r3, #2
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a35      	ldr	r2, [pc, #212]	@ (8004960 <HAL_DMA_DeInit+0x120>)
 800488a:	641a      	str	r2, [r3, #64]	@ 0x40
 800488c:	e00e      	b.n	80048ac <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	4b33      	ldr	r3, [pc, #204]	@ (8004964 <HAL_DMA_DeInit+0x124>)
 8004896:	4413      	add	r3, r2
 8004898:	4a30      	ldr	r2, [pc, #192]	@ (800495c <HAL_DMA_DeInit+0x11c>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	091b      	lsrs	r3, r3, #4
 80048a0:	009a      	lsls	r2, r3, #2
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2f      	ldr	r2, [pc, #188]	@ (8004968 <HAL_DMA_DeInit+0x128>)
 80048aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b8:	f003 021c 	and.w	r2, r3, #28
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c0:	2101      	movs	r1, #1
 80048c2:	fa01 f202 	lsl.w	r2, r1, r2
 80048c6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fa8f 	bl	8004dec <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048de:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00f      	beq.n	8004908 <HAL_DMA_DeInit+0xc8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d80b      	bhi.n	8004908 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fac3 	bl	8004e7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004906:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40020407 	.word	0x40020407
 8004958:	bffdfff8 	.word	0xbffdfff8
 800495c:	cccccccd 	.word	0xcccccccd
 8004960:	40020000 	.word	0x40020000
 8004964:	bffdfbf8 	.word	0xbffdfbf8
 8004968:	40020400 	.word	0x40020400

0800496c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_DMA_Start_IT+0x20>
 8004988:	2302      	movs	r3, #2
 800498a:	e069      	b.n	8004a60 <HAL_DMA_Start_IT+0xf4>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d155      	bne.n	8004a4c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0201 	bic.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f9d3 	bl	8004d70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d008      	beq.n	80049e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 020e 	orr.w	r2, r2, #14
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	e00f      	b.n	8004a04 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0204 	bic.w	r2, r2, #4
 80049f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 020a 	orr.w	r2, r2, #10
 8004a02:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a20:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a38:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e008      	b.n	8004a5e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2280      	movs	r2, #128	@ 0x80
 8004a50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e04f      	b.n	8004b1a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d008      	beq.n	8004a98 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2204      	movs	r2, #4
 8004a8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e040      	b.n	8004b1a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 020e 	bic.w	r2, r2, #14
 8004aa6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ab2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ab6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0201 	bic.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004acc:	f003 021c 	and.w	r2, r3, #28
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8004ada:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ae4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00c      	beq.n	8004b08 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004afc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b06:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d005      	beq.n	8004b48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2204      	movs	r2, #4
 8004b40:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	73fb      	strb	r3, [r7, #15]
 8004b46:	e047      	b.n	8004bd8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 020e 	bic.w	r2, r2, #14
 8004b56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7c:	f003 021c 	and.w	r2, r3, #28
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b84:	2101      	movs	r1, #1
 8004b86:	fa01 f202 	lsl.w	r2, r1, r2
 8004b8a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b94:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00c      	beq.n	8004bb8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004bb6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	4798      	blx	r3
    }
  }
  return status;
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c00:	f003 031c 	and.w	r3, r3, #28
 8004c04:	2204      	movs	r2, #4
 8004c06:	409a      	lsls	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d027      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x7c>
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f003 0304 	and.w	r3, r3, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d022      	beq.n	8004c60 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d107      	bne.n	8004c38 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0204 	bic.w	r2, r2, #4
 8004c36:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3c:	f003 021c 	and.w	r2, r3, #28
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c44:	2104      	movs	r1, #4
 8004c46:	fa01 f202 	lsl.w	r2, r1, r2
 8004c4a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 8081 	beq.w	8004d58 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004c5e:	e07b      	b.n	8004d58 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c64:	f003 031c 	and.w	r3, r3, #28
 8004c68:	2202      	movs	r2, #2
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d03d      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x10c>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d038      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10b      	bne.n	8004ca4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 020a 	bic.w	r2, r2, #10
 8004c9a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4b2e      	ldr	r3, [pc, #184]	@ (8004d64 <HAL_DMA_IRQHandler+0x180>)
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d909      	bls.n	8004cc4 <HAL_DMA_IRQHandler+0xe0>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb4:	f003 031c 	and.w	r3, r3, #28
 8004cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8004d68 <HAL_DMA_IRQHandler+0x184>)
 8004cba:	2102      	movs	r1, #2
 8004cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc0:	6053      	str	r3, [r2, #4]
 8004cc2:	e008      	b.n	8004cd6 <HAL_DMA_IRQHandler+0xf2>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc8:	f003 031c 	and.w	r3, r3, #28
 8004ccc:	4a27      	ldr	r2, [pc, #156]	@ (8004d6c <HAL_DMA_IRQHandler+0x188>)
 8004cce:	2102      	movs	r1, #2
 8004cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd4:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d038      	beq.n	8004d58 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004cee:	e033      	b.n	8004d58 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf4:	f003 031c 	and.w	r3, r3, #28
 8004cf8:	2208      	movs	r2, #8
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d02a      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x176>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d025      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 020e 	bic.w	r2, r2, #14
 8004d1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d22:	f003 021c 	and.w	r2, r3, #28
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d30:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d004      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
}
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40020080 	.word	0x40020080
 8004d68:	40020400 	.word	0x40020400
 8004d6c:	40020000 	.word	0x40020000

08004d70 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d86:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d004      	beq.n	8004d9a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d98:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9e:	f003 021c 	and.w	r2, r3, #28
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	2101      	movs	r1, #1
 8004da8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d108      	bne.n	8004dd0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004dce:	e007      	b.n	8004de0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	60da      	str	r2, [r3, #12]
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr
	...

08004dec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8004e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d813      	bhi.n	8004e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e04:	089b      	lsrs	r3, r3, #2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e0c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	3b08      	subs	r3, #8
 8004e1c:	4a14      	ldr	r2, [pc, #80]	@ (8004e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	091b      	lsrs	r3, r3, #4
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e011      	b.n	8004e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2c:	089b      	lsrs	r3, r3, #2
 8004e2e:	009a      	lsls	r2, r3, #2
 8004e30:	4b10      	ldr	r3, [pc, #64]	@ (8004e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004e32:	4413      	add	r3, r2
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	3b08      	subs	r3, #8
 8004e40:	4a0b      	ldr	r2, [pc, #44]	@ (8004e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	3307      	adds	r3, #7
 8004e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004e50:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	2201      	movs	r2, #1
 8004e5a:	409a      	lsls	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004e60:	bf00      	nop
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40020407 	.word	0x40020407
 8004e70:	cccccccd 	.word	0xcccccccd
 8004e74:	4002081c 	.word	0x4002081c
 8004e78:	40020880 	.word	0x40020880

08004e7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4b0a      	ldr	r3, [pc, #40]	@ (8004ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	461a      	mov	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a08      	ldr	r2, [pc, #32]	@ (8004ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ea0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2201      	movs	r2, #1
 8004eac:	409a      	lsls	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	1000823f 	.word	0x1000823f
 8004ec0:	40020940 	.word	0x40020940

08004ec4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8004f44 <HAL_FLASH_Program+0x80>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_FLASH_Program+0x1a>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e02d      	b.n	8004f3a <HAL_FLASH_Program+0x76>
 8004ede:	4b19      	ldr	r3, [pc, #100]	@ (8004f44 <HAL_FLASH_Program+0x80>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ee4:	4b17      	ldr	r3, [pc, #92]	@ (8004f44 <HAL_FLASH_Program+0x80>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004eea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004eee:	f000 f869 	bl	8004fc4 <FLASH_WaitForLastOperation>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d11a      	bne.n	8004f32 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d105      	bne.n	8004f0e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f06:	68b8      	ldr	r0, [r7, #8]
 8004f08:	f000 f8be 	bl	8005088 <FLASH_Program_DoubleWord>
 8004f0c:	e004      	b.n	8004f18 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	4619      	mov	r1, r3
 8004f12:	68b8      	ldr	r0, [r7, #8]
 8004f14:	f000 f8de 	bl	80050d4 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f1c:	f000 f852 	bl	8004fc4 <FLASH_WaitForLastOperation>
 8004f20:	4603      	mov	r3, r0
 8004f22:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004f24:	4b08      	ldr	r3, [pc, #32]	@ (8004f48 <HAL_FLASH_Program+0x84>)
 8004f26:	695a      	ldr	r2, [r3, #20]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	4906      	ldr	r1, [pc, #24]	@ (8004f48 <HAL_FLASH_Program+0x84>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f32:	4b04      	ldr	r3, [pc, #16]	@ (8004f44 <HAL_FLASH_Program+0x80>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	200005fc 	.word	0x200005fc
 8004f48:	58004000 	.word	0x58004000

08004f4c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004f56:	4b0b      	ldr	r3, [pc, #44]	@ (8004f84 <HAL_FLASH_Unlock+0x38>)
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	da0b      	bge.n	8004f76 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004f5e:	4b09      	ldr	r3, [pc, #36]	@ (8004f84 <HAL_FLASH_Unlock+0x38>)
 8004f60:	4a09      	ldr	r2, [pc, #36]	@ (8004f88 <HAL_FLASH_Unlock+0x3c>)
 8004f62:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004f64:	4b07      	ldr	r3, [pc, #28]	@ (8004f84 <HAL_FLASH_Unlock+0x38>)
 8004f66:	4a09      	ldr	r2, [pc, #36]	@ (8004f8c <HAL_FLASH_Unlock+0x40>)
 8004f68:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004f6a:	4b06      	ldr	r3, [pc, #24]	@ (8004f84 <HAL_FLASH_Unlock+0x38>)
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	da01      	bge.n	8004f76 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004f76:	79fb      	ldrb	r3, [r7, #7]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	58004000 	.word	0x58004000
 8004f88:	45670123 	.word	0x45670123
 8004f8c:	cdef89ab 	.word	0xcdef89ab

08004f90 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004f9a:	4b09      	ldr	r3, [pc, #36]	@ (8004fc0 <HAL_FLASH_Lock+0x30>)
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	4a08      	ldr	r2, [pc, #32]	@ (8004fc0 <HAL_FLASH_Lock+0x30>)
 8004fa0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004fa4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004fa6:	4b06      	ldr	r3, [pc, #24]	@ (8004fc0 <HAL_FLASH_Lock+0x30>)
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	db01      	blt.n	8004fb2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bc80      	pop	{r7}
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	58004000 	.word	0x58004000

08004fc4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004fcc:	f7fd f8d2 	bl	8002174 <HAL_GetTick>
 8004fd0:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004fd2:	e009      	b.n	8004fe8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004fd4:	f7fd f8ce 	bl	8002174 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d801      	bhi.n	8004fe8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e046      	b.n	8005076 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004fe8:	4b25      	ldr	r3, [pc, #148]	@ (8005080 <FLASH_WaitForLastOperation+0xbc>)
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff4:	d0ee      	beq.n	8004fd4 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004ff6:	4b22      	ldr	r3, [pc, #136]	@ (8005080 <FLASH_WaitForLastOperation+0xbc>)
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005006:	4b1e      	ldr	r3, [pc, #120]	@ (8005080 <FLASH_WaitForLastOperation+0xbc>)
 8005008:	2201      	movs	r2, #1
 800500a:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8005012:	4013      	ands	r3, r2
 8005014:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501c:	d307      	bcc.n	800502e <FLASH_WaitForLastOperation+0x6a>
 800501e:	4b18      	ldr	r3, [pc, #96]	@ (8005080 <FLASH_WaitForLastOperation+0xbc>)
 8005020:	699a      	ldr	r2, [r3, #24]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005028:	4915      	ldr	r1, [pc, #84]	@ (8005080 <FLASH_WaitForLastOperation+0xbc>)
 800502a:	4313      	orrs	r3, r2
 800502c:	618b      	str	r3, [r1, #24]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d004      	beq.n	8005042 <FLASH_WaitForLastOperation+0x7e>
 8005038:	4a11      	ldr	r2, [pc, #68]	@ (8005080 <FLASH_WaitForLastOperation+0xbc>)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005040:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00e      	beq.n	8005066 <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005048:	4a0e      	ldr	r2, [pc, #56]	@ (8005084 <FLASH_WaitForLastOperation+0xc0>)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e011      	b.n	8005076 <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005052:	f7fd f88f 	bl	8002174 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	429a      	cmp	r2, r3
 8005060:	d801      	bhi.n	8005066 <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e007      	b.n	8005076 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005066:	4b06      	ldr	r3, [pc, #24]	@ (8005080 <FLASH_WaitForLastOperation+0xbc>)
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800506e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005072:	d0ee      	beq.n	8005052 <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	58004000 	.word	0x58004000
 8005084:	200005fc 	.word	0x200005fc

08005088 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005094:	4b0e      	ldr	r3, [pc, #56]	@ (80050d0 <FLASH_Program_DoubleWord+0x48>)
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	4a0d      	ldr	r2, [pc, #52]	@ (80050d0 <FLASH_Program_DoubleWord+0x48>)
 800509a:	f043 0301 	orr.w	r3, r3, #1
 800509e:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80050a6:	f3bf 8f6f 	isb	sy
}
 80050aa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80050ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	000a      	movs	r2, r1
 80050ba:	2300      	movs	r3, #0
 80050bc:	68f9      	ldr	r1, [r7, #12]
 80050be:	3104      	adds	r1, #4
 80050c0:	4613      	mov	r3, r2
 80050c2:	600b      	str	r3, [r1, #0]
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	58004000 	.word	0x58004000

080050d4 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 80050d4:	b480      	push	{r7}
 80050d6:	b089      	sub	sp, #36	@ 0x24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80050de:	2340      	movs	r3, #64	@ 0x40
 80050e0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80050ea:	4b18      	ldr	r3, [pc, #96]	@ (800514c <FLASH_Program_Fast+0x78>)
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	4a17      	ldr	r2, [pc, #92]	@ (800514c <FLASH_Program_Fast+0x78>)
 80050f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050f4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f6:	f3ef 8310 	mrs	r3, PRIMASK
 80050fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80050fc:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 80050fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005100:	b672      	cpsid	i
}
 8005102:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	3304      	adds	r3, #4
 8005110:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	3304      	adds	r3, #4
 8005116:	617b      	str	r3, [r7, #20]
    row_index--;
 8005118:	7ffb      	ldrb	r3, [r7, #31]
 800511a:	3b01      	subs	r3, #1
 800511c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800511e:	7ffb      	ldrb	r3, [r7, #31]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1ef      	bne.n	8005104 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005124:	bf00      	nop
 8005126:	4b09      	ldr	r3, [pc, #36]	@ (800514c <FLASH_Program_Fast+0x78>)
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800512e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005132:	d0f8      	beq.n	8005126 <FLASH_Program_Fast+0x52>
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f383 8810 	msr	PRIMASK, r3
}
 800513e:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005140:	bf00      	nop
 8005142:	3724      	adds	r7, #36	@ 0x24
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	58004000 	.word	0x58004000

08005150 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800515a:	4b28      	ldr	r3, [pc, #160]	@ (80051fc <HAL_FLASHEx_Erase+0xac>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_FLASHEx_Erase+0x16>
 8005162:	2302      	movs	r3, #2
 8005164:	e046      	b.n	80051f4 <HAL_FLASHEx_Erase+0xa4>
 8005166:	4b25      	ldr	r3, [pc, #148]	@ (80051fc <HAL_FLASHEx_Erase+0xac>)
 8005168:	2201      	movs	r2, #1
 800516a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800516c:	4b23      	ldr	r3, [pc, #140]	@ (80051fc <HAL_FLASHEx_Erase+0xac>)
 800516e:	2200      	movs	r2, #0
 8005170:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005172:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005176:	f7ff ff25 	bl	8004fc4 <FLASH_WaitForLastOperation>
 800517a:	4603      	mov	r3, r0
 800517c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d133      	bne.n	80051ec <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b04      	cmp	r3, #4
 800518a:	d108      	bne.n	800519e <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 800518c:	f000 f838 	bl	8005200 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005190:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005194:	f7ff ff16 	bl	8004fc4 <FLASH_WaitForLastOperation>
 8005198:	4603      	mov	r3, r0
 800519a:	73fb      	strb	r3, [r7, #15]
 800519c:	e024      	b.n	80051e8 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	f04f 32ff 	mov.w	r2, #4294967295
 80051a4:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	60bb      	str	r3, [r7, #8]
 80051ac:	e012      	b.n	80051d4 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80051ae:	68b8      	ldr	r0, [r7, #8]
 80051b0:	f000 f836 	bl	8005220 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80051b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80051b8:	f7ff ff04 	bl	8004fc4 <FLASH_WaitForLastOperation>
 80051bc:	4603      	mov	r3, r0
 80051be:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	601a      	str	r2, [r3, #0]
          break;
 80051cc:	e00a      	b.n	80051e4 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	3301      	adds	r3, #1
 80051d2:	60bb      	str	r3, [r7, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	4413      	add	r3, r2
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d3e4      	bcc.n	80051ae <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 80051e4:	f000 f878 	bl	80052d8 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80051e8:	f000 f832 	bl	8005250 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80051ec:	4b03      	ldr	r3, [pc, #12]	@ (80051fc <HAL_FLASHEx_Erase+0xac>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	701a      	strb	r2, [r3, #0]

  return status;
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	200005fc 	.word	0x200005fc

08005200 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005204:	4b05      	ldr	r3, [pc, #20]	@ (800521c <FLASH_MassErase+0x1c>)
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	4a04      	ldr	r2, [pc, #16]	@ (800521c <FLASH_MassErase+0x1c>)
 800520a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800520e:	f043 0304 	orr.w	r3, r3, #4
 8005212:	6153      	str	r3, [r2, #20]
#endif
}
 8005214:	bf00      	nop
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr
 800521c:	58004000 	.word	0x58004000

08005220 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005228:	4b08      	ldr	r3, [pc, #32]	@ (800524c <FLASH_PageErase+0x2c>)
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	4313      	orrs	r3, r2
 8005236:	4a05      	ldr	r2, [pc, #20]	@ (800524c <FLASH_PageErase+0x2c>)
 8005238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800523c:	f043 0302 	orr.w	r3, r3, #2
 8005240:	6153      	str	r3, [r2, #20]
#endif
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr
 800524c:	58004000 	.word	0x58004000

08005250 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005254:	4b1f      	ldr	r3, [pc, #124]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800525c:	2b01      	cmp	r3, #1
 800525e:	d117      	bne.n	8005290 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005260:	4b1c      	ldr	r3, [pc, #112]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1b      	ldr	r2, [pc, #108]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 8005266:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800526a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800526c:	4b19      	ldr	r3, [pc, #100]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a18      	ldr	r2, [pc, #96]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 8005272:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	4b16      	ldr	r3, [pc, #88]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a15      	ldr	r2, [pc, #84]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 800527e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005282:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005284:	4b13      	ldr	r3, [pc, #76]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a12      	ldr	r2, [pc, #72]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 800528a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800528e:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005290:	4b10      	ldr	r3, [pc, #64]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005298:	2b01      	cmp	r3, #1
 800529a:	d117      	bne.n	80052cc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800529c:	4b0d      	ldr	r3, [pc, #52]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a0c      	ldr	r2, [pc, #48]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 80052a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052a6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80052a8:	4b0a      	ldr	r3, [pc, #40]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a09      	ldr	r2, [pc, #36]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 80052ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	4b07      	ldr	r3, [pc, #28]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a06      	ldr	r2, [pc, #24]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 80052ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052be:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80052c0:	4b04      	ldr	r3, [pc, #16]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a03      	ldr	r2, [pc, #12]	@ (80052d4 <FLASH_FlushCaches+0x84>)
 80052c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052ca:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80052cc:	bf00      	nop
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr
 80052d4:	58004000 	.word	0x58004000

080052d8 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80052dc:	4b05      	ldr	r3, [pc, #20]	@ (80052f4 <FLASH_AcknowledgePageErase+0x1c>)
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	4a04      	ldr	r2, [pc, #16]	@ (80052f4 <FLASH_AcknowledgePageErase+0x1c>)
 80052e2:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 80052e6:	f023 0302 	bic.w	r3, r3, #2
 80052ea:	6153      	str	r3, [r2, #20]
#endif
}
 80052ec:	bf00      	nop
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr
 80052f4:	58004000 	.word	0x58004000

080052f8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005306:	e140      	b.n	800558a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	2101      	movs	r1, #1
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	fa01 f303 	lsl.w	r3, r1, r3
 8005314:	4013      	ands	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 8132 	beq.w	8005584 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	2b01      	cmp	r3, #1
 800532a:	d005      	beq.n	8005338 <HAL_GPIO_Init+0x40>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f003 0303 	and.w	r3, r3, #3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d130      	bne.n	800539a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	2203      	movs	r2, #3
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	43db      	mvns	r3, r3
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4013      	ands	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800536e:	2201      	movs	r2, #1
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	43db      	mvns	r3, r3
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4013      	ands	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	091b      	lsrs	r3, r3, #4
 8005384:	f003 0201 	and.w	r2, r3, #1
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d017      	beq.n	80053d6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	2203      	movs	r2, #3
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	43db      	mvns	r3, r3
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4013      	ands	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d123      	bne.n	800542a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	08da      	lsrs	r2, r3, #3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3208      	adds	r2, #8
 80053ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	220f      	movs	r2, #15
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	43db      	mvns	r3, r3
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4013      	ands	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	08da      	lsrs	r2, r3, #3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3208      	adds	r2, #8
 8005424:	6939      	ldr	r1, [r7, #16]
 8005426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	2203      	movs	r2, #3
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4013      	ands	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f003 0203 	and.w	r2, r3, #3
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 808c 	beq.w	8005584 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800546c:	4a4e      	ldr	r2, [pc, #312]	@ (80055a8 <HAL_GPIO_Init+0x2b0>)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	089b      	lsrs	r3, r3, #2
 8005472:	3302      	adds	r3, #2
 8005474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005478:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	2207      	movs	r2, #7
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	43db      	mvns	r3, r3
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4013      	ands	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005496:	d00d      	beq.n	80054b4 <HAL_GPIO_Init+0x1bc>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a44      	ldr	r2, [pc, #272]	@ (80055ac <HAL_GPIO_Init+0x2b4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d007      	beq.n	80054b0 <HAL_GPIO_Init+0x1b8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a43      	ldr	r2, [pc, #268]	@ (80055b0 <HAL_GPIO_Init+0x2b8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d101      	bne.n	80054ac <HAL_GPIO_Init+0x1b4>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e004      	b.n	80054b6 <HAL_GPIO_Init+0x1be>
 80054ac:	2307      	movs	r3, #7
 80054ae:	e002      	b.n	80054b6 <HAL_GPIO_Init+0x1be>
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <HAL_GPIO_Init+0x1be>
 80054b4:	2300      	movs	r3, #0
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	f002 0203 	and.w	r2, r2, #3
 80054bc:	0092      	lsls	r2, r2, #2
 80054be:	4093      	lsls	r3, r2
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80054c6:	4938      	ldr	r1, [pc, #224]	@ (80055a8 <HAL_GPIO_Init+0x2b0>)
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	089b      	lsrs	r3, r3, #2
 80054cc:	3302      	adds	r3, #2
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054d4:	4b37      	ldr	r3, [pc, #220]	@ (80055b4 <HAL_GPIO_Init+0x2bc>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	43db      	mvns	r3, r3
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4013      	ands	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054f8:	4a2e      	ldr	r2, [pc, #184]	@ (80055b4 <HAL_GPIO_Init+0x2bc>)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80054fe:	4b2d      	ldr	r3, [pc, #180]	@ (80055b4 <HAL_GPIO_Init+0x2bc>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	43db      	mvns	r3, r3
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4013      	ands	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005522:	4a24      	ldr	r2, [pc, #144]	@ (80055b4 <HAL_GPIO_Init+0x2bc>)
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005528:	4b22      	ldr	r3, [pc, #136]	@ (80055b4 <HAL_GPIO_Init+0x2bc>)
 800552a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800552e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	43db      	mvns	r3, r3
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4013      	ands	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800554e:	4a19      	ldr	r2, [pc, #100]	@ (80055b4 <HAL_GPIO_Init+0x2bc>)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005556:	4b17      	ldr	r3, [pc, #92]	@ (80055b4 <HAL_GPIO_Init+0x2bc>)
 8005558:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800555c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	43db      	mvns	r3, r3
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4013      	ands	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800557c:	4a0d      	ldr	r2, [pc, #52]	@ (80055b4 <HAL_GPIO_Init+0x2bc>)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	3301      	adds	r3, #1
 8005588:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	fa22 f303 	lsr.w	r3, r2, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	f47f aeb7 	bne.w	8005308 <HAL_GPIO_Init+0x10>
  }
}
 800559a:	bf00      	nop
 800559c:	bf00      	nop
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40010000 	.word	0x40010000
 80055ac:	48000400 	.word	0x48000400
 80055b0:	48000800 	.word	0x48000800
 80055b4:	58000800 	.word	0x58000800

080055b8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80055c6:	e0af      	b.n	8005728 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80055c8:	2201      	movs	r2, #1
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	4013      	ands	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 80a2 	beq.w	8005722 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80055de:	4a59      	ldr	r2, [pc, #356]	@ (8005744 <HAL_GPIO_DeInit+0x18c>)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	3302      	adds	r3, #2
 80055e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	2207      	movs	r2, #7
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4013      	ands	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005606:	d00d      	beq.n	8005624 <HAL_GPIO_DeInit+0x6c>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a4f      	ldr	r2, [pc, #316]	@ (8005748 <HAL_GPIO_DeInit+0x190>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d007      	beq.n	8005620 <HAL_GPIO_DeInit+0x68>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a4e      	ldr	r2, [pc, #312]	@ (800574c <HAL_GPIO_DeInit+0x194>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d101      	bne.n	800561c <HAL_GPIO_DeInit+0x64>
 8005618:	2302      	movs	r3, #2
 800561a:	e004      	b.n	8005626 <HAL_GPIO_DeInit+0x6e>
 800561c:	2307      	movs	r3, #7
 800561e:	e002      	b.n	8005626 <HAL_GPIO_DeInit+0x6e>
 8005620:	2301      	movs	r3, #1
 8005622:	e000      	b.n	8005626 <HAL_GPIO_DeInit+0x6e>
 8005624:	2300      	movs	r3, #0
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	f002 0203 	and.w	r2, r2, #3
 800562c:	0092      	lsls	r2, r2, #2
 800562e:	4093      	lsls	r3, r2
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	429a      	cmp	r2, r3
 8005634:	d136      	bne.n	80056a4 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005636:	4b46      	ldr	r3, [pc, #280]	@ (8005750 <HAL_GPIO_DeInit+0x198>)
 8005638:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	43db      	mvns	r3, r3
 8005640:	4943      	ldr	r1, [pc, #268]	@ (8005750 <HAL_GPIO_DeInit+0x198>)
 8005642:	4013      	ands	r3, r2
 8005644:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005648:	4b41      	ldr	r3, [pc, #260]	@ (8005750 <HAL_GPIO_DeInit+0x198>)
 800564a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	43db      	mvns	r3, r3
 8005652:	493f      	ldr	r1, [pc, #252]	@ (8005750 <HAL_GPIO_DeInit+0x198>)
 8005654:	4013      	ands	r3, r2
 8005656:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800565a:	4b3d      	ldr	r3, [pc, #244]	@ (8005750 <HAL_GPIO_DeInit+0x198>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	43db      	mvns	r3, r3
 8005662:	493b      	ldr	r1, [pc, #236]	@ (8005750 <HAL_GPIO_DeInit+0x198>)
 8005664:	4013      	ands	r3, r2
 8005666:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005668:	4b39      	ldr	r3, [pc, #228]	@ (8005750 <HAL_GPIO_DeInit+0x198>)
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	43db      	mvns	r3, r3
 8005670:	4937      	ldr	r1, [pc, #220]	@ (8005750 <HAL_GPIO_DeInit+0x198>)
 8005672:	4013      	ands	r3, r2
 8005674:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	2207      	movs	r2, #7
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005686:	4a2f      	ldr	r2, [pc, #188]	@ (8005744 <HAL_GPIO_DeInit+0x18c>)
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	089b      	lsrs	r3, r3, #2
 800568c:	3302      	adds	r3, #2
 800568e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	43da      	mvns	r2, r3
 8005696:	482b      	ldr	r0, [pc, #172]	@ (8005744 <HAL_GPIO_DeInit+0x18c>)
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	089b      	lsrs	r3, r3, #2
 800569c:	400a      	ands	r2, r1
 800569e:	3302      	adds	r3, #2
 80056a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	2103      	movs	r1, #3
 80056ae:	fa01 f303 	lsl.w	r3, r1, r3
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	08da      	lsrs	r2, r3, #3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3208      	adds	r2, #8
 80056c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	220f      	movs	r2, #15
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43db      	mvns	r3, r3
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	08d2      	lsrs	r2, r2, #3
 80056d8:	4019      	ands	r1, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3208      	adds	r2, #8
 80056de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	2103      	movs	r1, #3
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	401a      	ands	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	2101      	movs	r1, #1
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	fa01 f303 	lsl.w	r3, r1, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	401a      	ands	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	2103      	movs	r1, #3
 8005716:	fa01 f303 	lsl.w	r3, r1, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	401a      	ands	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	3301      	adds	r3, #1
 8005726:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	f47f af49 	bne.w	80055c8 <HAL_GPIO_DeInit+0x10>
  }
}
 8005736:	bf00      	nop
 8005738:	bf00      	nop
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	bc80      	pop	{r7}
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40010000 	.word	0x40010000
 8005748:	48000400 	.word	0x48000400
 800574c:	48000800 	.word	0x48000800
 8005750:	58000800 	.word	0x58000800

08005754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	807b      	strh	r3, [r7, #2]
 8005760:	4613      	mov	r3, r2
 8005762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005764:	787b      	ldrb	r3, [r7, #1]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800576a:	887a      	ldrh	r2, [r7, #2]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005770:	e002      	b.n	8005778 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005772:	887a      	ldrh	r2, [r7, #2]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr
	...

08005784 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005788:	4b04      	ldr	r3, [pc, #16]	@ (800579c <HAL_PWR_EnableBkUpAccess+0x18>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a03      	ldr	r2, [pc, #12]	@ (800579c <HAL_PWR_EnableBkUpAccess+0x18>)
 800578e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005792:	6013      	str	r3, [r2, #0]
}
 8005794:	bf00      	nop
 8005796:	46bd      	mov	sp, r7
 8005798:	bc80      	pop	{r7}
 800579a:	4770      	bx	lr
 800579c:	58000400 	.word	0x58000400

080057a0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10c      	bne.n	80057cc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80057b2:	4b13      	ldr	r3, [pc, #76]	@ (8005800 <HAL_PWR_EnterSLEEPMode+0x60>)
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057be:	d10d      	bne.n	80057dc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80057c0:	f000 f83c 	bl	800583c <HAL_PWREx_DisableLowPowerRunMode>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d008      	beq.n	80057dc <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80057ca:	e015      	b.n	80057f8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80057cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005800 <HAL_PWR_EnterSLEEPMode+0x60>)
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80057d8:	f000 f822 	bl	8005820 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80057dc:	4b09      	ldr	r3, [pc, #36]	@ (8005804 <HAL_PWR_EnterSLEEPMode+0x64>)
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	4a08      	ldr	r2, [pc, #32]	@ (8005804 <HAL_PWR_EnterSLEEPMode+0x64>)
 80057e2:	f023 0304 	bic.w	r3, r3, #4
 80057e6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80057ee:	bf30      	wfi
 80057f0:	e002      	b.n	80057f8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80057f2:	bf40      	sev
    __WFE();
 80057f4:	bf20      	wfe
    __WFE();
 80057f6:	bf20      	wfe
  }
}
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	58000400 	.word	0x58000400
 8005804:	e000ed00 	.word	0xe000ed00

08005808 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800580c:	4b03      	ldr	r3, [pc, #12]	@ (800581c <HAL_PWREx_GetVoltageRange+0x14>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005814:	4618      	mov	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr
 800581c:	58000400 	.word	0x58000400

08005820 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005824:	4b04      	ldr	r3, [pc, #16]	@ (8005838 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a03      	ldr	r2, [pc, #12]	@ (8005838 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800582a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800582e:	6013      	str	r3, [r2, #0]
}
 8005830:	bf00      	nop
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr
 8005838:	58000400 	.word	0x58000400

0800583c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005842:	4b16      	ldr	r3, [pc, #88]	@ (800589c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a15      	ldr	r2, [pc, #84]	@ (800589c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005848:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800584c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800584e:	4b14      	ldr	r3, [pc, #80]	@ (80058a0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2232      	movs	r2, #50	@ 0x32
 8005854:	fb02 f303 	mul.w	r3, r2, r3
 8005858:	4a12      	ldr	r2, [pc, #72]	@ (80058a4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	0c9b      	lsrs	r3, r3, #18
 8005860:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005862:	e002      	b.n	800586a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3b01      	subs	r3, #1
 8005868:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800586a:	4b0c      	ldr	r3, [pc, #48]	@ (800589c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005876:	d102      	bne.n	800587e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f2      	bne.n	8005864 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800587e:	4b07      	ldr	r3, [pc, #28]	@ (800589c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005886:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800588a:	d101      	bne.n	8005890 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e000      	b.n	8005892 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr
 800589c:	58000400 	.word	0x58000400
 80058a0:	20000000 	.word	0x20000000
 80058a4:	431bde83 	.word	0x431bde83

080058a8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80058b2:	4b10      	ldr	r3, [pc, #64]	@ (80058f4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 0307 	bic.w	r3, r3, #7
 80058ba:	4a0e      	ldr	r2, [pc, #56]	@ (80058f4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80058bc:	f043 0302 	orr.w	r3, r3, #2
 80058c0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80058c2:	4b0d      	ldr	r3, [pc, #52]	@ (80058f8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	4a0c      	ldr	r2, [pc, #48]	@ (80058f8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80058c8:	f043 0304 	orr.w	r3, r3, #4
 80058cc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80058d4:	bf30      	wfi
 80058d6:	e002      	b.n	80058de <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80058d8:	bf40      	sev
    __WFE();
 80058da:	bf20      	wfe
    __WFE();
 80058dc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80058de:	4b06      	ldr	r3, [pc, #24]	@ (80058f8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	4a05      	ldr	r2, [pc, #20]	@ (80058f8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80058e4:	f023 0304 	bic.w	r3, r3, #4
 80058e8:	6113      	str	r3, [r2, #16]
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr
 80058f4:	58000400 	.word	0x58000400
 80058f8:	e000ed00 	.word	0xe000ed00

080058fc <LL_PWR_IsEnabledBkUpAccess>:
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005900:	4b06      	ldr	r3, [pc, #24]	@ (800591c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800590c:	d101      	bne.n	8005912 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr
 800591c:	58000400 	.word	0x58000400

08005920 <LL_RCC_HSE_EnableTcxo>:
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800592e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005932:	6013      	str	r3, [r2, #0]
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr

0800593c <LL_RCC_HSE_DisableTcxo>:
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800594a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800594e:	6013      	str	r3, [r2, #0]
}
 8005950:	bf00      	nop
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr

08005958 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800595c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800596a:	d101      	bne.n	8005970 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr

0800597a <LL_RCC_HSE_Enable>:
{
 800597a:	b480      	push	{r7}
 800597c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800597e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800598c:	6013      	str	r3, [r2, #0]
}
 800598e:	bf00      	nop
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr

08005996 <LL_RCC_HSE_Disable>:
{
 8005996:	b480      	push	{r7}
 8005998:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800599a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059a8:	6013      	str	r3, [r2, #0]
}
 80059aa:	bf00      	nop
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr

080059b2 <LL_RCC_HSE_IsReady>:
{
 80059b2:	b480      	push	{r7}
 80059b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80059b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059c4:	d101      	bne.n	80059ca <LL_RCC_HSE_IsReady+0x18>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e000      	b.n	80059cc <LL_RCC_HSE_IsReady+0x1a>
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <LL_RCC_HSI_Enable>:
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80059d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059e6:	6013      	str	r3, [r2, #0]
}
 80059e8:	bf00      	nop
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <LL_RCC_HSI_Disable>:
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80059f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a02:	6013      	str	r3, [r2, #0]
}
 8005a04:	bf00      	nop
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr

08005a0c <LL_RCC_HSI_IsReady>:
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a1e:	d101      	bne.n	8005a24 <LL_RCC_HSI_IsReady+0x18>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <LL_RCC_HSI_IsReady+0x1a>
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr

08005a2e <LL_RCC_HSI_SetCalibTrimming>:
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	061b      	lsls	r3, r3, #24
 8005a44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	604b      	str	r3, [r1, #4]
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc80      	pop	{r7}
 8005a54:	4770      	bx	lr

08005a56 <LL_RCC_LSE_IsReady>:
{
 8005a56:	b480      	push	{r7}
 8005a58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005a5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d101      	bne.n	8005a6e <LL_RCC_LSE_IsReady+0x18>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <LL_RCC_LSE_IsReady+0x1a>
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bc80      	pop	{r7}
 8005a76:	4770      	bx	lr

08005a78 <LL_RCC_LSI_Enable>:
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005a90:	bf00      	nop
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr

08005a98 <LL_RCC_LSI_Disable>:
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005a9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005aa8:	f023 0301 	bic.w	r3, r3, #1
 8005aac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005ab0:	bf00      	nop
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr

08005ab8 <LL_RCC_LSI_IsReady>:
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d101      	bne.n	8005ad0 <LL_RCC_LSI_IsReady+0x18>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <LL_RCC_LSI_IsReady+0x1a>
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr

08005ada <LL_RCC_MSI_Enable>:
{
 8005ada:	b480      	push	{r7}
 8005adc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005ade:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ae8:	f043 0301 	orr.w	r3, r3, #1
 8005aec:	6013      	str	r3, [r2, #0]
}
 8005aee:	bf00      	nop
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr

08005af6 <LL_RCC_MSI_Disable>:
{
 8005af6:	b480      	push	{r7}
 8005af8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	6013      	str	r3, [r2, #0]
}
 8005b0a:	bf00      	nop
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr

08005b12 <LL_RCC_MSI_IsReady>:
{
 8005b12:	b480      	push	{r7}
 8005b14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005b16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d101      	bne.n	8005b28 <LL_RCC_MSI_IsReady+0x16>
 8005b24:	2301      	movs	r3, #1
 8005b26:	e000      	b.n	8005b2a <LL_RCC_MSI_IsReady+0x18>
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr

08005b32 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005b32:	b480      	push	{r7}
 8005b34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d101      	bne.n	8005b48 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005b44:	2301      	movs	r3, #1
 8005b46:	e000      	b.n	8005b4a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr

08005b52 <LL_RCC_MSI_GetRange>:
{
 8005b52:	b480      	push	{r7}
 8005b54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr

08005b68 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b74:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr

08005b80 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	604b      	str	r3, [r1, #4]
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr

08005ba8 <LL_RCC_SetSysClkSource>:
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f023 0203 	bic.w	r2, r3, #3
 8005bba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	608b      	str	r3, [r1, #8]
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr

08005bce <LL_RCC_GetSysClkSource>:
{
 8005bce:	b480      	push	{r7}
 8005bd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f003 030c 	and.w	r3, r3, #12
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <LL_RCC_SetAHBPrescaler>:
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	608b      	str	r3, [r1, #8]
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr

08005c0a <LL_RCC_SetAHB3Prescaler>:
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c16:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005c1a:	f023 020f 	bic.w	r2, r3, #15
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	091b      	lsrs	r3, r3, #4
 8005c22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bc80      	pop	{r7}
 8005c34:	4770      	bx	lr

08005c36 <LL_RCC_SetAPB1Prescaler>:
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	608b      	str	r3, [r1, #8]
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr

08005c5c <LL_RCC_SetAPB2Prescaler>:
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	608b      	str	r3, [r1, #8]
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr

08005c82 <LL_RCC_GetAHBPrescaler>:
{
 8005c82:	b480      	push	{r7}
 8005c84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr

08005c98 <LL_RCC_GetAHB3Prescaler>:
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ca0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr

08005cb2 <LL_RCC_GetAPB1Prescaler>:
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005cb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <LL_RCC_GetAPB2Prescaler>:
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bc80      	pop	{r7}
 8005cdc:	4770      	bx	lr

08005cde <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005cec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cf0:	6013      	str	r3, [r2, #0]
}
 8005cf2:	bf00      	nop
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr

08005cfa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d0c:	6013      	str	r3, [r2, #0]
}
 8005d0e:	bf00      	nop
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr

08005d16 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005d16:	b480      	push	{r7}
 8005d18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d28:	d101      	bne.n	8005d2e <LL_RCC_PLL_IsReady+0x18>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <LL_RCC_PLL_IsReady+0x1a>
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr

08005d38 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	0a1b      	lsrs	r3, r3, #8
 8005d44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr

08005d50 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc80      	pop	{r7}
 8005d64:	4770      	bx	lr

08005d66 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr

08005d7c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f003 0303 	and.w	r3, r3, #3
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr

08005d92 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005d92:	b480      	push	{r7}
 8005d94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005da4:	d101      	bne.n	8005daa <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e000      	b.n	8005dac <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr

08005db4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dbc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dc8:	d101      	bne.n	8005dce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr

08005dd8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dea:	d101      	bne.n	8005df0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bc80      	pop	{r7}
 8005df8:	4770      	bx	lr

08005dfa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e0c:	d101      	bne.n	8005e12 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr

08005e1c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e36f      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e2e:	f7ff fece 	bl	8005bce <LL_RCC_GetSysClkSource>
 8005e32:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e34:	f7ff ffa2 	bl	8005d7c <LL_RCC_PLL_GetMainSource>
 8005e38:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80c4 	beq.w	8005fd0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_RCC_OscConfig+0x3e>
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	2b0c      	cmp	r3, #12
 8005e52:	d176      	bne.n	8005f42 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d173      	bne.n	8005f42 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e353      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <HAL_RCC_OscConfig+0x68>
 8005e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e82:	e006      	b.n	8005e92 <HAL_RCC_OscConfig+0x76>
 8005e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d222      	bcs.n	8005edc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fd3c 	bl	8006918 <RCC_SetFlashLatencyFromMSIRange>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e331      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eb4:	f043 0308 	orr.w	r3, r3, #8
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff fe53 	bl	8005b80 <LL_RCC_MSI_SetCalibTrimming>
 8005eda:	e021      	b.n	8005f20 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ee6:	f043 0308 	orr.w	r3, r3, #8
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005efe:	4313      	orrs	r3, r2
 8005f00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fe3a 	bl	8005b80 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 fd01 	bl	8006918 <RCC_SetFlashLatencyFromMSIRange>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e2f6      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f20:	f000 fcc2 	bl	80068a8 <HAL_RCC_GetHCLKFreq>
 8005f24:	4603      	mov	r3, r0
 8005f26:	4aa7      	ldr	r2, [pc, #668]	@ (80061c4 <HAL_RCC_OscConfig+0x3a8>)
 8005f28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8005f2a:	4ba7      	ldr	r3, [pc, #668]	@ (80061c8 <HAL_RCC_OscConfig+0x3ac>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fd f834 	bl	8002f9c <HAL_InitTick>
 8005f34:	4603      	mov	r3, r0
 8005f36:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005f38:	7cfb      	ldrb	r3, [r7, #19]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d047      	beq.n	8005fce <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8005f3e:	7cfb      	ldrb	r3, [r7, #19]
 8005f40:	e2e5      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d02c      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f4a:	f7ff fdc6 	bl	8005ada <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f4e:	f7fc f911 	bl	8002174 <HAL_GetTick>
 8005f52:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f54:	e008      	b.n	8005f68 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f56:	f7fc f90d 	bl	8002174 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e2d2      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f68:	f7ff fdd3 	bl	8005b12 <LL_RCC_MSI_IsReady>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f1      	beq.n	8005f56 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f7c:	f043 0308 	orr.w	r3, r3, #8
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f94:	4313      	orrs	r3, r2
 8005f96:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff fdef 	bl	8005b80 <LL_RCC_MSI_SetCalibTrimming>
 8005fa2:	e015      	b.n	8005fd0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005fa4:	f7ff fda7 	bl	8005af6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fa8:	f7fc f8e4 	bl	8002174 <HAL_GetTick>
 8005fac:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fb0:	f7fc f8e0 	bl	8002174 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e2a5      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005fc2:	f7ff fda6 	bl	8005b12 <LL_RCC_MSI_IsReady>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1f1      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x194>
 8005fcc:	e000      	b.n	8005fd0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005fce:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d058      	beq.n	800608e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d005      	beq.n	8005fee <HAL_RCC_OscConfig+0x1d2>
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	2b0c      	cmp	r3, #12
 8005fe6:	d108      	bne.n	8005ffa <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d105      	bne.n	8005ffa <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d14b      	bne.n	800608e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e289      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800600c:	4313      	orrs	r3, r2
 800600e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006018:	d102      	bne.n	8006020 <HAL_RCC_OscConfig+0x204>
 800601a:	f7ff fcae 	bl	800597a <LL_RCC_HSE_Enable>
 800601e:	e00d      	b.n	800603c <HAL_RCC_OscConfig+0x220>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8006028:	d104      	bne.n	8006034 <HAL_RCC_OscConfig+0x218>
 800602a:	f7ff fc79 	bl	8005920 <LL_RCC_HSE_EnableTcxo>
 800602e:	f7ff fca4 	bl	800597a <LL_RCC_HSE_Enable>
 8006032:	e003      	b.n	800603c <HAL_RCC_OscConfig+0x220>
 8006034:	f7ff fcaf 	bl	8005996 <LL_RCC_HSE_Disable>
 8006038:	f7ff fc80 	bl	800593c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d012      	beq.n	800606a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006044:	f7fc f896 	bl	8002174 <HAL_GetTick>
 8006048:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800604c:	f7fc f892 	bl	8002174 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b64      	cmp	r3, #100	@ 0x64
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e257      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800605e:	f7ff fca8 	bl	80059b2 <LL_RCC_HSE_IsReady>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0f1      	beq.n	800604c <HAL_RCC_OscConfig+0x230>
 8006068:	e011      	b.n	800608e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800606a:	f7fc f883 	bl	8002174 <HAL_GetTick>
 800606e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006070:	e008      	b.n	8006084 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006072:	f7fc f87f 	bl	8002174 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b64      	cmp	r3, #100	@ 0x64
 800607e:	d901      	bls.n	8006084 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e244      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006084:	f7ff fc95 	bl	80059b2 <LL_RCC_HSE_IsReady>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f1      	bne.n	8006072 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d046      	beq.n	8006128 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	2b04      	cmp	r3, #4
 800609e:	d005      	beq.n	80060ac <HAL_RCC_OscConfig+0x290>
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	2b0c      	cmp	r3, #12
 80060a4:	d10e      	bne.n	80060c4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d10b      	bne.n	80060c4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e22a      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff fcb6 	bl	8005a2e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80060c2:	e031      	b.n	8006128 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d019      	beq.n	8006100 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060cc:	f7ff fc82 	bl	80059d4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d0:	f7fc f850 	bl	8002174 <HAL_GetTick>
 80060d4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060d8:	f7fc f84c 	bl	8002174 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e211      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80060ea:	f7ff fc8f 	bl	8005a0c <LL_RCC_HSI_IsReady>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0f1      	beq.n	80060d8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff fc98 	bl	8005a2e <LL_RCC_HSI_SetCalibTrimming>
 80060fe:	e013      	b.n	8006128 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006100:	f7ff fc76 	bl	80059f0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006104:	f7fc f836 	bl	8002174 <HAL_GetTick>
 8006108:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800610c:	f7fc f832 	bl	8002174 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e1f7      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800611e:	f7ff fc75 	bl	8005a0c <LL_RCC_HSI_IsReady>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1f1      	bne.n	800610c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d06e      	beq.n	8006212 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d056      	beq.n	80061ea <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800613c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006144:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69da      	ldr	r2, [r3, #28]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f003 0310 	and.w	r3, r3, #16
 8006150:	429a      	cmp	r2, r3
 8006152:	d031      	beq.n	80061b8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d006      	beq.n	800616c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e1d0      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d013      	beq.n	800619e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8006176:	f7ff fc8f 	bl	8005a98 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800617a:	f7fb fffb 	bl	8002174 <HAL_GetTick>
 800617e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006180:	e008      	b.n	8006194 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006182:	f7fb fff7 	bl	8002174 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b11      	cmp	r3, #17
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e1bc      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8006194:	f7ff fc90 	bl	8005ab8 <LL_RCC_LSI_IsReady>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1f1      	bne.n	8006182 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800619e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061a6:	f023 0210 	bic.w	r2, r3, #16
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061b8:	f7ff fc5e 	bl	8005a78 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061bc:	f7fb ffda 	bl	8002174 <HAL_GetTick>
 80061c0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80061c2:	e00c      	b.n	80061de <HAL_RCC_OscConfig+0x3c2>
 80061c4:	20000000 	.word	0x20000000
 80061c8:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061cc:	f7fb ffd2 	bl	8002174 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b11      	cmp	r3, #17
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e197      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80061de:	f7ff fc6b 	bl	8005ab8 <LL_RCC_LSI_IsReady>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0f1      	beq.n	80061cc <HAL_RCC_OscConfig+0x3b0>
 80061e8:	e013      	b.n	8006212 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061ea:	f7ff fc55 	bl	8005a98 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061ee:	f7fb ffc1 	bl	8002174 <HAL_GetTick>
 80061f2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80061f4:	e008      	b.n	8006208 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061f6:	f7fb ffbd 	bl	8002174 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b11      	cmp	r3, #17
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e182      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006208:	f7ff fc56 	bl	8005ab8 <LL_RCC_LSI_IsReady>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1f1      	bne.n	80061f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 80d8 	beq.w	80063d0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006220:	f7ff fb6c 	bl	80058fc <LL_PWR_IsEnabledBkUpAccess>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d113      	bne.n	8006252 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800622a:	f7ff faab 	bl	8005784 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800622e:	f7fb ffa1 	bl	8002174 <HAL_GetTick>
 8006232:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006236:	f7fb ff9d 	bl	8002174 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e162      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006248:	f7ff fb58 	bl	80058fc <LL_PWR_IsEnabledBkUpAccess>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f1      	beq.n	8006236 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d07b      	beq.n	8006352 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	2b85      	cmp	r3, #133	@ 0x85
 8006260:	d003      	beq.n	800626a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	2b05      	cmp	r3, #5
 8006268:	d109      	bne.n	800627e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800626a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800626e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006272:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006276:	f043 0304 	orr.w	r3, r3, #4
 800627a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800627e:	f7fb ff79 	bl	8002174 <HAL_GetTick>
 8006282:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800628c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006290:	f043 0301 	orr.w	r3, r3, #1
 8006294:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006298:	e00a      	b.n	80062b0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800629a:	f7fb ff6b 	bl	8002174 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e12e      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80062b0:	f7ff fbd1 	bl	8005a56 <LL_RCC_LSE_IsReady>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0ef      	beq.n	800629a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	2b81      	cmp	r3, #129	@ 0x81
 80062c0:	d003      	beq.n	80062ca <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	2b85      	cmp	r3, #133	@ 0x85
 80062c8:	d121      	bne.n	800630e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ca:	f7fb ff53 	bl	8002174 <HAL_GetTick>
 80062ce:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80062d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80062e4:	e00a      	b.n	80062fc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e6:	f7fb ff45 	bl	8002174 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d901      	bls.n	80062fc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e108      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80062fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006308:	2b00      	cmp	r3, #0
 800630a:	d0ec      	beq.n	80062e6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800630c:	e060      	b.n	80063d0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800630e:	f7fb ff31 	bl	8002174 <HAL_GetTick>
 8006312:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800631c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006320:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006324:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006328:	e00a      	b.n	8006340 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800632a:	f7fb ff23 	bl	8002174 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006338:	4293      	cmp	r3, r2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e0e6      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006348:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1ec      	bne.n	800632a <HAL_RCC_OscConfig+0x50e>
 8006350:	e03e      	b.n	80063d0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006352:	f7fb ff0f 	bl	8002174 <HAL_GetTick>
 8006356:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800635c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006360:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006364:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800636c:	e00a      	b.n	8006384 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800636e:	f7fb ff01 	bl	8002174 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800637c:	4293      	cmp	r3, r2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e0c4      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1ec      	bne.n	800636e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006394:	f7fb feee 	bl	8002174 <HAL_GetTick>
 8006398:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800639a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063a6:	f023 0301 	bic.w	r3, r3, #1
 80063aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80063ae:	e00a      	b.n	80063c6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b0:	f7fb fee0 	bl	8002174 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063be:	4293      	cmp	r3, r2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e0a3      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80063c6:	f7ff fb46 	bl	8005a56 <LL_RCC_LSE_IsReady>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1ef      	bne.n	80063b0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 8099 	beq.w	800650c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	2b0c      	cmp	r3, #12
 80063de:	d06c      	beq.n	80064ba <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d14b      	bne.n	8006480 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063e8:	f7ff fc87 	bl	8005cfa <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ec:	f7fb fec2 	bl	8002174 <HAL_GetTick>
 80063f0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063f4:	f7fb febe 	bl	8002174 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b0a      	cmp	r3, #10
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e083      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006406:	f7ff fc86 	bl	8005d16 <LL_RCC_PLL_IsReady>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1f1      	bne.n	80063f4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	4b40      	ldr	r3, [pc, #256]	@ (8006518 <HAL_RCC_OscConfig+0x6fc>)
 8006418:	4013      	ands	r3, r2
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006422:	4311      	orrs	r1, r2
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006428:	0212      	lsls	r2, r2, #8
 800642a:	4311      	orrs	r1, r2
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006430:	4311      	orrs	r1, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006436:	4311      	orrs	r1, r2
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800643c:	430a      	orrs	r2, r1
 800643e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006442:	4313      	orrs	r3, r2
 8006444:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006446:	f7ff fc4a 	bl	8005cde <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800644a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006458:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800645a:	f7fb fe8b 	bl	8002174 <HAL_GetTick>
 800645e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006460:	e008      	b.n	8006474 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006462:	f7fb fe87 	bl	8002174 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b0a      	cmp	r3, #10
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e04c      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006474:	f7ff fc4f 	bl	8005d16 <LL_RCC_PLL_IsReady>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f1      	beq.n	8006462 <HAL_RCC_OscConfig+0x646>
 800647e:	e045      	b.n	800650c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006480:	f7ff fc3b 	bl	8005cfa <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006484:	f7fb fe76 	bl	8002174 <HAL_GetTick>
 8006488:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800648c:	f7fb fe72 	bl	8002174 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b0a      	cmp	r3, #10
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e037      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800649e:	f7ff fc3a 	bl	8005d16 <LL_RCC_PLL_IsReady>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1f1      	bne.n	800648c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80064a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064b2:	4b1a      	ldr	r3, [pc, #104]	@ (800651c <HAL_RCC_OscConfig+0x700>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	60cb      	str	r3, [r1, #12]
 80064b8:	e028      	b.n	800650c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d101      	bne.n	80064c6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e023      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	f003 0203 	and.w	r2, r3, #3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d8:	429a      	cmp	r2, r3
 80064da:	d115      	bne.n	8006508 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d10e      	bne.n	8006508 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f4:	021b      	lsls	r3, r3, #8
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d106      	bne.n	8006508 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006504:	429a      	cmp	r2, r3
 8006506:	d001      	beq.n	800650c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e000      	b.n	800650e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3720      	adds	r7, #32
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	11c1808c 	.word	0x11c1808c
 800651c:	eefefffc 	.word	0xeefefffc

08006520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e10f      	b.n	8006754 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006534:	4b89      	ldr	r3, [pc, #548]	@ (800675c <HAL_RCC_ClockConfig+0x23c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	429a      	cmp	r2, r3
 8006540:	d91b      	bls.n	800657a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006542:	4b86      	ldr	r3, [pc, #536]	@ (800675c <HAL_RCC_ClockConfig+0x23c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f023 0207 	bic.w	r2, r3, #7
 800654a:	4984      	ldr	r1, [pc, #528]	@ (800675c <HAL_RCC_ClockConfig+0x23c>)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	4313      	orrs	r3, r2
 8006550:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006552:	f7fb fe0f 	bl	8002174 <HAL_GetTick>
 8006556:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006558:	e008      	b.n	800656c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800655a:	f7fb fe0b 	bl	8002174 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e0f3      	b.n	8006754 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800656c:	4b7b      	ldr	r3, [pc, #492]	@ (800675c <HAL_RCC_ClockConfig+0x23c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d1ef      	bne.n	800655a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d016      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	4618      	mov	r0, r3
 800658c:	f7ff fb2a 	bl	8005be4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006590:	f7fb fdf0 	bl	8002174 <HAL_GetTick>
 8006594:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006596:	e008      	b.n	80065aa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006598:	f7fb fdec 	bl	8002174 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e0d4      	b.n	8006754 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80065aa:	f7ff fbf2 	bl	8005d92 <LL_RCC_IsActiveFlag_HPRE>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0f1      	beq.n	8006598 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d016      	beq.n	80065ee <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff fb20 	bl	8005c0a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065ca:	f7fb fdd3 	bl	8002174 <HAL_GetTick>
 80065ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065d2:	f7fb fdcf 	bl	8002174 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e0b7      	b.n	8006754 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80065e4:	f7ff fbe6 	bl	8005db4 <LL_RCC_IsActiveFlag_SHDHPRE>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0f1      	beq.n	80065d2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d016      	beq.n	8006628 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	4618      	mov	r0, r3
 8006600:	f7ff fb19 	bl	8005c36 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006604:	f7fb fdb6 	bl	8002174 <HAL_GetTick>
 8006608:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800660a:	e008      	b.n	800661e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800660c:	f7fb fdb2 	bl	8002174 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d901      	bls.n	800661e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e09a      	b.n	8006754 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800661e:	f7ff fbdb 	bl	8005dd8 <LL_RCC_IsActiveFlag_PPRE1>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0f1      	beq.n	800660c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	2b00      	cmp	r3, #0
 8006632:	d017      	beq.n	8006664 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	4618      	mov	r0, r3
 800663c:	f7ff fb0e 	bl	8005c5c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006640:	f7fb fd98 	bl	8002174 <HAL_GetTick>
 8006644:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006646:	e008      	b.n	800665a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006648:	f7fb fd94 	bl	8002174 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d901      	bls.n	800665a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e07c      	b.n	8006754 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800665a:	f7ff fbce 	bl	8005dfa <LL_RCC_IsActiveFlag_PPRE2>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d0f1      	beq.n	8006648 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d043      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d106      	bne.n	8006686 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006678:	f7ff f99b 	bl	80059b2 <LL_RCC_HSE_IsReady>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d11e      	bne.n	80066c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e066      	b.n	8006754 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b03      	cmp	r3, #3
 800668c:	d106      	bne.n	800669c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800668e:	f7ff fb42 	bl	8005d16 <LL_RCC_PLL_IsReady>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d113      	bne.n	80066c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e05b      	b.n	8006754 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80066a4:	f7ff fa35 	bl	8005b12 <LL_RCC_MSI_IsReady>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d108      	bne.n	80066c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e050      	b.n	8006754 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80066b2:	f7ff f9ab 	bl	8005a0c <LL_RCC_HSI_IsReady>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e049      	b.n	8006754 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7ff fa6f 	bl	8005ba8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066ca:	f7fb fd53 	bl	8002174 <HAL_GetTick>
 80066ce:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d0:	e00a      	b.n	80066e8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066d2:	f7fb fd4f 	bl	8002174 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e035      	b.n	8006754 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066e8:	f7ff fa71 	bl	8005bce <LL_RCC_GetSysClkSource>
 80066ec:	4602      	mov	r2, r0
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d1ec      	bne.n	80066d2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066f8:	4b18      	ldr	r3, [pc, #96]	@ (800675c <HAL_RCC_ClockConfig+0x23c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d21b      	bcs.n	800673e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006706:	4b15      	ldr	r3, [pc, #84]	@ (800675c <HAL_RCC_ClockConfig+0x23c>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f023 0207 	bic.w	r2, r3, #7
 800670e:	4913      	ldr	r1, [pc, #76]	@ (800675c <HAL_RCC_ClockConfig+0x23c>)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	4313      	orrs	r3, r2
 8006714:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006716:	f7fb fd2d 	bl	8002174 <HAL_GetTick>
 800671a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800671c:	e008      	b.n	8006730 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800671e:	f7fb fd29 	bl	8002174 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d901      	bls.n	8006730 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e011      	b.n	8006754 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006730:	4b0a      	ldr	r3, [pc, #40]	@ (800675c <HAL_RCC_ClockConfig+0x23c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d1ef      	bne.n	800671e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800673e:	f000 f8b3 	bl	80068a8 <HAL_RCC_GetHCLKFreq>
 8006742:	4603      	mov	r3, r0
 8006744:	4a06      	ldr	r2, [pc, #24]	@ (8006760 <HAL_RCC_ClockConfig+0x240>)
 8006746:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8006748:	4b06      	ldr	r3, [pc, #24]	@ (8006764 <HAL_RCC_ClockConfig+0x244>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4618      	mov	r0, r3
 800674e:	f7fc fc25 	bl	8002f9c <HAL_InitTick>
 8006752:	4603      	mov	r3, r0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	58004000 	.word	0x58004000
 8006760:	20000000 	.word	0x20000000
 8006764:	20000004 	.word	0x20000004

08006768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006768:	b590      	push	{r4, r7, lr}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006776:	f7ff fa2a 	bl	8005bce <LL_RCC_GetSysClkSource>
 800677a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800677c:	f7ff fafe 	bl	8005d7c <LL_RCC_PLL_GetMainSource>
 8006780:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <HAL_RCC_GetSysClockFreq+0x2c>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b0c      	cmp	r3, #12
 800678c:	d139      	bne.n	8006802 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d136      	bne.n	8006802 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006794:	f7ff f9cd 	bl	8005b32 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d115      	bne.n	80067ca <HAL_RCC_GetSysClockFreq+0x62>
 800679e:	f7ff f9c8 	bl	8005b32 <LL_RCC_MSI_IsEnabledRangeSelect>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d106      	bne.n	80067b6 <HAL_RCC_GetSysClockFreq+0x4e>
 80067a8:	f7ff f9d3 	bl	8005b52 <LL_RCC_MSI_GetRange>
 80067ac:	4603      	mov	r3, r0
 80067ae:	0a1b      	lsrs	r3, r3, #8
 80067b0:	f003 030f 	and.w	r3, r3, #15
 80067b4:	e005      	b.n	80067c2 <HAL_RCC_GetSysClockFreq+0x5a>
 80067b6:	f7ff f9d7 	bl	8005b68 <LL_RCC_MSI_GetRangeAfterStandby>
 80067ba:	4603      	mov	r3, r0
 80067bc:	0a1b      	lsrs	r3, r3, #8
 80067be:	f003 030f 	and.w	r3, r3, #15
 80067c2:	4a36      	ldr	r2, [pc, #216]	@ (800689c <HAL_RCC_GetSysClockFreq+0x134>)
 80067c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c8:	e014      	b.n	80067f4 <HAL_RCC_GetSysClockFreq+0x8c>
 80067ca:	f7ff f9b2 	bl	8005b32 <LL_RCC_MSI_IsEnabledRangeSelect>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d106      	bne.n	80067e2 <HAL_RCC_GetSysClockFreq+0x7a>
 80067d4:	f7ff f9bd 	bl	8005b52 <LL_RCC_MSI_GetRange>
 80067d8:	4603      	mov	r3, r0
 80067da:	091b      	lsrs	r3, r3, #4
 80067dc:	f003 030f 	and.w	r3, r3, #15
 80067e0:	e005      	b.n	80067ee <HAL_RCC_GetSysClockFreq+0x86>
 80067e2:	f7ff f9c1 	bl	8005b68 <LL_RCC_MSI_GetRangeAfterStandby>
 80067e6:	4603      	mov	r3, r0
 80067e8:	091b      	lsrs	r3, r3, #4
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	4a2b      	ldr	r2, [pc, #172]	@ (800689c <HAL_RCC_GetSysClockFreq+0x134>)
 80067f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067f4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d115      	bne.n	8006828 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006800:	e012      	b.n	8006828 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2b04      	cmp	r3, #4
 8006806:	d102      	bne.n	800680e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006808:	4b25      	ldr	r3, [pc, #148]	@ (80068a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	e00c      	b.n	8006828 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b08      	cmp	r3, #8
 8006812:	d109      	bne.n	8006828 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006814:	f7ff f8a0 	bl	8005958 <LL_RCC_HSE_IsEnabledDiv2>
 8006818:	4603      	mov	r3, r0
 800681a:	2b01      	cmp	r3, #1
 800681c:	d102      	bne.n	8006824 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800681e:	4b20      	ldr	r3, [pc, #128]	@ (80068a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	e001      	b.n	8006828 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006824:	4b1f      	ldr	r3, [pc, #124]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006826:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006828:	f7ff f9d1 	bl	8005bce <LL_RCC_GetSysClkSource>
 800682c:	4603      	mov	r3, r0
 800682e:	2b0c      	cmp	r3, #12
 8006830:	d12f      	bne.n	8006892 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006832:	f7ff faa3 	bl	8005d7c <LL_RCC_PLL_GetMainSource>
 8006836:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b02      	cmp	r3, #2
 800683c:	d003      	beq.n	8006846 <HAL_RCC_GetSysClockFreq+0xde>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b03      	cmp	r3, #3
 8006842:	d003      	beq.n	800684c <HAL_RCC_GetSysClockFreq+0xe4>
 8006844:	e00d      	b.n	8006862 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006846:	4b16      	ldr	r3, [pc, #88]	@ (80068a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006848:	60fb      	str	r3, [r7, #12]
        break;
 800684a:	e00d      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800684c:	f7ff f884 	bl	8005958 <LL_RCC_HSE_IsEnabledDiv2>
 8006850:	4603      	mov	r3, r0
 8006852:	2b01      	cmp	r3, #1
 8006854:	d102      	bne.n	800685c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006856:	4b12      	ldr	r3, [pc, #72]	@ (80068a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006858:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800685a:	e005      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800685c:	4b11      	ldr	r3, [pc, #68]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800685e:	60fb      	str	r3, [r7, #12]
        break;
 8006860:	e002      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	60fb      	str	r3, [r7, #12]
        break;
 8006866:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006868:	f7ff fa66 	bl	8005d38 <LL_RCC_PLL_GetN>
 800686c:	4602      	mov	r2, r0
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	fb03 f402 	mul.w	r4, r3, r2
 8006874:	f7ff fa77 	bl	8005d66 <LL_RCC_PLL_GetDivider>
 8006878:	4603      	mov	r3, r0
 800687a:	091b      	lsrs	r3, r3, #4
 800687c:	3301      	adds	r3, #1
 800687e:	fbb4 f4f3 	udiv	r4, r4, r3
 8006882:	f7ff fa65 	bl	8005d50 <LL_RCC_PLL_GetR>
 8006886:	4603      	mov	r3, r0
 8006888:	0f5b      	lsrs	r3, r3, #29
 800688a:	3301      	adds	r3, #1
 800688c:	fbb4 f3f3 	udiv	r3, r4, r3
 8006890:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006892:	697b      	ldr	r3, [r7, #20]
}
 8006894:	4618      	mov	r0, r3
 8006896:	371c      	adds	r7, #28
 8006898:	46bd      	mov	sp, r7
 800689a:	bd90      	pop	{r4, r7, pc}
 800689c:	0801e67c 	.word	0x0801e67c
 80068a0:	00f42400 	.word	0x00f42400
 80068a4:	01e84800 	.word	0x01e84800

080068a8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068a8:	b598      	push	{r3, r4, r7, lr}
 80068aa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80068ac:	f7ff ff5c 	bl	8006768 <HAL_RCC_GetSysClockFreq>
 80068b0:	4604      	mov	r4, r0
 80068b2:	f7ff f9e6 	bl	8005c82 <LL_RCC_GetAHBPrescaler>
 80068b6:	4603      	mov	r3, r0
 80068b8:	091b      	lsrs	r3, r3, #4
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	4a03      	ldr	r2, [pc, #12]	@ (80068cc <HAL_RCC_GetHCLKFreq+0x24>)
 80068c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068c4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	bd98      	pop	{r3, r4, r7, pc}
 80068cc:	0801e61c 	.word	0x0801e61c

080068d0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068d0:	b598      	push	{r3, r4, r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80068d4:	f7ff ffe8 	bl	80068a8 <HAL_RCC_GetHCLKFreq>
 80068d8:	4604      	mov	r4, r0
 80068da:	f7ff f9ea 	bl	8005cb2 <LL_RCC_GetAPB1Prescaler>
 80068de:	4603      	mov	r3, r0
 80068e0:	0a1b      	lsrs	r3, r3, #8
 80068e2:	4a03      	ldr	r2, [pc, #12]	@ (80068f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	bd98      	pop	{r3, r4, r7, pc}
 80068f0:	0801e65c 	.word	0x0801e65c

080068f4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068f4:	b598      	push	{r3, r4, r7, lr}
 80068f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80068f8:	f7ff ffd6 	bl	80068a8 <HAL_RCC_GetHCLKFreq>
 80068fc:	4604      	mov	r4, r0
 80068fe:	f7ff f9e3 	bl	8005cc8 <LL_RCC_GetAPB2Prescaler>
 8006902:	4603      	mov	r3, r0
 8006904:	0adb      	lsrs	r3, r3, #11
 8006906:	4a03      	ldr	r2, [pc, #12]	@ (8006914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800690c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006910:	4618      	mov	r0, r3
 8006912:	bd98      	pop	{r3, r4, r7, pc}
 8006914:	0801e65c 	.word	0x0801e65c

08006918 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006918:	b590      	push	{r4, r7, lr}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	091b      	lsrs	r3, r3, #4
 8006924:	f003 030f 	and.w	r3, r3, #15
 8006928:	4a10      	ldr	r2, [pc, #64]	@ (800696c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800692a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800692e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006930:	f7ff f9b2 	bl	8005c98 <LL_RCC_GetAHB3Prescaler>
 8006934:	4603      	mov	r3, r0
 8006936:	091b      	lsrs	r3, r3, #4
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	4a0c      	ldr	r2, [pc, #48]	@ (8006970 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800693e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	fbb2 f3f3 	udiv	r3, r2, r3
 8006948:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	4a09      	ldr	r2, [pc, #36]	@ (8006974 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800694e:	fba2 2303 	umull	r2, r3, r2, r3
 8006952:	0c9c      	lsrs	r4, r3, #18
 8006954:	f7fe ff58 	bl	8005808 <HAL_PWREx_GetVoltageRange>
 8006958:	4603      	mov	r3, r0
 800695a:	4619      	mov	r1, r3
 800695c:	4620      	mov	r0, r4
 800695e:	f000 f80b 	bl	8006978 <RCC_SetFlashLatency>
 8006962:	4603      	mov	r3, r0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	bd90      	pop	{r4, r7, pc}
 800696c:	0801e67c 	.word	0x0801e67c
 8006970:	0801e61c 	.word	0x0801e61c
 8006974:	431bde83 	.word	0x431bde83

08006978 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08e      	sub	sp, #56	@ 0x38
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006982:	4a3a      	ldr	r2, [pc, #232]	@ (8006a6c <RCC_SetFlashLatency+0xf4>)
 8006984:	f107 0320 	add.w	r3, r7, #32
 8006988:	e892 0003 	ldmia.w	r2, {r0, r1}
 800698c:	6018      	str	r0, [r3, #0]
 800698e:	3304      	adds	r3, #4
 8006990:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006992:	4a37      	ldr	r2, [pc, #220]	@ (8006a70 <RCC_SetFlashLatency+0xf8>)
 8006994:	f107 0318 	add.w	r3, r7, #24
 8006998:	e892 0003 	ldmia.w	r2, {r0, r1}
 800699c:	6018      	str	r0, [r3, #0]
 800699e:	3304      	adds	r3, #4
 80069a0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80069a2:	4a34      	ldr	r2, [pc, #208]	@ (8006a74 <RCC_SetFlashLatency+0xfc>)
 80069a4:	f107 030c 	add.w	r3, r7, #12
 80069a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80069aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80069ae:	2300      	movs	r3, #0
 80069b0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069b8:	d11b      	bne.n	80069f2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80069ba:	2300      	movs	r3, #0
 80069bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80069be:	e014      	b.n	80069ea <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80069c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	3338      	adds	r3, #56	@ 0x38
 80069c6:	443b      	add	r3, r7
 80069c8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80069cc:	461a      	mov	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d807      	bhi.n	80069e4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80069d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	3338      	adds	r3, #56	@ 0x38
 80069da:	443b      	add	r3, r7
 80069dc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80069e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069e2:	e021      	b.n	8006a28 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80069e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e6:	3301      	adds	r3, #1
 80069e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d9e7      	bls.n	80069c0 <RCC_SetFlashLatency+0x48>
 80069f0:	e01a      	b.n	8006a28 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80069f2:	2300      	movs	r3, #0
 80069f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069f6:	e014      	b.n	8006a22 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80069f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	3338      	adds	r3, #56	@ 0x38
 80069fe:	443b      	add	r3, r7
 8006a00:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006a04:	461a      	mov	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d807      	bhi.n	8006a1c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	3338      	adds	r3, #56	@ 0x38
 8006a12:	443b      	add	r3, r7
 8006a14:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006a18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a1a:	e005      	b.n	8006a28 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1e:	3301      	adds	r3, #1
 8006a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d9e7      	bls.n	80069f8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006a28:	4b13      	ldr	r3, [pc, #76]	@ (8006a78 <RCC_SetFlashLatency+0x100>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f023 0207 	bic.w	r2, r3, #7
 8006a30:	4911      	ldr	r1, [pc, #68]	@ (8006a78 <RCC_SetFlashLatency+0x100>)
 8006a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a34:	4313      	orrs	r3, r2
 8006a36:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a38:	f7fb fb9c 	bl	8002174 <HAL_GetTick>
 8006a3c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006a3e:	e008      	b.n	8006a52 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006a40:	f7fb fb98 	bl	8002174 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e007      	b.n	8006a62 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006a52:	4b09      	ldr	r3, [pc, #36]	@ (8006a78 <RCC_SetFlashLatency+0x100>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0307 	and.w	r3, r3, #7
 8006a5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d1ef      	bne.n	8006a40 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3738      	adds	r7, #56	@ 0x38
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	0801e12c 	.word	0x0801e12c
 8006a70:	0801e134 	.word	0x0801e134
 8006a74:	0801e13c 	.word	0x0801e13c
 8006a78:	58004000 	.word	0x58004000

08006a7c <LL_RCC_LSE_IsReady>:
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d101      	bne.n	8006a94 <LL_RCC_LSE_IsReady+0x18>
 8006a90:	2301      	movs	r3, #1
 8006a92:	e000      	b.n	8006a96 <LL_RCC_LSE_IsReady+0x1a>
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	4770      	bx	lr

08006a9e <LL_RCC_SetUSARTClockSource>:
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aaa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	0c1b      	lsrs	r3, r3, #16
 8006ab2:	43db      	mvns	r3, r3
 8006ab4:	401a      	ands	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bc80      	pop	{r7}
 8006acc:	4770      	bx	lr

08006ace <LL_RCC_SetI2SClockSource>:
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006ad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ade:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ae2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr

08006af8 <LL_RCC_SetLPUARTClockSource>:
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b08:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bc80      	pop	{r7}
 8006b20:	4770      	bx	lr

08006b22 <LL_RCC_SetI2CClockSource>:
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	091b      	lsrs	r3, r3, #4
 8006b36:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006b3a:	43db      	mvns	r3, r3
 8006b3c:	401a      	ands	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	011b      	lsls	r3, r3, #4
 8006b42:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006b46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr

08006b5a <LL_RCC_SetLPTIMClockSource>:
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b66:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	0c1b      	lsrs	r3, r3, #16
 8006b6e:	041b      	lsls	r3, r3, #16
 8006b70:	43db      	mvns	r3, r3
 8006b72:	401a      	ands	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	041b      	lsls	r3, r3, #16
 8006b78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr

08006b8c <LL_RCC_SetRNGClockSource>:
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b9c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006ba0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bc80      	pop	{r7}
 8006bb4:	4770      	bx	lr

08006bb6 <LL_RCC_SetADCClockSource>:
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006bca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bc80      	pop	{r7}
 8006bde:	4770      	bx	lr

08006be0 <LL_RCC_SetRTCClockSource>:
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006bf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr

08006c0a <LL_RCC_GetRTCClockSource>:
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr

08006c22 <LL_RCC_ForceBackupDomainReset>:
{
 8006c22:	b480      	push	{r7}
 8006c24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006c3a:	bf00      	nop
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr

08006c42 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006c42:	b480      	push	{r7}
 8006c44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006c5a:	bf00      	nop
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr
	...

08006c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006c70:	2300      	movs	r3, #0
 8006c72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006c74:	2300      	movs	r3, #0
 8006c76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d058      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006c84:	f7fe fd7e 	bl	8005784 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c88:	f7fb fa74 	bl	8002174 <HAL_GetTick>
 8006c8c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006c8e:	e009      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c90:	f7fb fa70 	bl	8002174 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d902      	bls.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	74fb      	strb	r3, [r7, #19]
        break;
 8006ca2:	e006      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006ca4:	4b7b      	ldr	r3, [pc, #492]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cb0:	d1ee      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006cb2:	7cfb      	ldrb	r3, [r7, #19]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d13c      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006cb8:	f7ff ffa7 	bl	8006c0a <LL_RCC_GetRTCClockSource>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d00f      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cd2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cd4:	f7ff ffa5 	bl	8006c22 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cd8:	f7ff ffb3 	bl	8006c42 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006cdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d014      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf0:	f7fb fa40 	bl	8002174 <HAL_GetTick>
 8006cf4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006cf6:	e00b      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cf8:	f7fb fa3c 	bl	8002174 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d902      	bls.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	74fb      	strb	r3, [r7, #19]
            break;
 8006d0e:	e004      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006d10:	f7ff feb4 	bl	8006a7c <LL_RCC_LSE_IsReady>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d1ee      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006d1a:	7cfb      	ldrb	r3, [r7, #19]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d105      	bne.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff ff5b 	bl	8006be0 <LL_RCC_SetRTCClockSource>
 8006d2a:	e004      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d2c:	7cfb      	ldrb	r3, [r7, #19]
 8006d2e:	74bb      	strb	r3, [r7, #18]
 8006d30:	e001      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d32:	7cfb      	ldrb	r3, [r7, #19]
 8006d34:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff fea9 	bl	8006a9e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff fe9e 	bl	8006a9e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0320 	and.w	r3, r3, #32
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d004      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff fec0 	bl	8006af8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff fee6 	bl	8006b5a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d004      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff fedb 	bl	8006b5a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d004      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7ff fed0 	bl	8006b5a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d004      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff fea9 	bl	8006b22 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d004      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff fe9e 	bl	8006b22 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d004      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7ff fe93 	bl	8006b22 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d011      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff fe5e 	bl	8006ace <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e1a:	d107      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d010      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff fea5 	bl	8006b8c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d107      	bne.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e58:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d011      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7ff fea3 	bl	8006bb6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e78:	d107      	bne.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e88:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006e8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	58000400 	.word	0x58000400

08006e98 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d071      	beq.n	8006f8e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d106      	bne.n	8006ec4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7fa fe96 	bl	8001bf0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006ecc:	4b32      	ldr	r3, [pc, #200]	@ (8006f98 <HAL_RTC_Init+0x100>)
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b10      	cmp	r3, #16
 8006ed6:	d051      	beq.n	8006f7c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8006f98 <HAL_RTC_Init+0x100>)
 8006eda:	22ca      	movs	r2, #202	@ 0xca
 8006edc:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ede:	4b2e      	ldr	r3, [pc, #184]	@ (8006f98 <HAL_RTC_Init+0x100>)
 8006ee0:	2253      	movs	r2, #83	@ 0x53
 8006ee2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fa11 	bl	800730c <RTC_EnterInitMode>
 8006eea:	4603      	mov	r3, r0
 8006eec:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d13f      	bne.n	8006f74 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006ef4:	4b28      	ldr	r3, [pc, #160]	@ (8006f98 <HAL_RTC_Init+0x100>)
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	4a27      	ldr	r2, [pc, #156]	@ (8006f98 <HAL_RTC_Init+0x100>)
 8006efa:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006efe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f02:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006f04:	4b24      	ldr	r3, [pc, #144]	@ (8006f98 <HAL_RTC_Init+0x100>)
 8006f06:	699a      	ldr	r2, [r3, #24]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6859      	ldr	r1, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	4319      	orrs	r1, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	430b      	orrs	r3, r1
 8006f18:	491f      	ldr	r1, [pc, #124]	@ (8006f98 <HAL_RTC_Init+0x100>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	041b      	lsls	r3, r3, #16
 8006f28:	491b      	ldr	r1, [pc, #108]	@ (8006f98 <HAL_RTC_Init+0x100>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8006f98 <HAL_RTC_Init+0x100>)
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3e:	430b      	orrs	r3, r1
 8006f40:	4915      	ldr	r1, [pc, #84]	@ (8006f98 <HAL_RTC_Init+0x100>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fa14 	bl	8007374 <RTC_ExitInitMode>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10e      	bne.n	8006f74 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8006f56:	4b10      	ldr	r3, [pc, #64]	@ (8006f98 <HAL_RTC_Init+0x100>)
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a19      	ldr	r1, [r3, #32]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	4319      	orrs	r1, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	490a      	ldr	r1, [pc, #40]	@ (8006f98 <HAL_RTC_Init+0x100>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f74:	4b08      	ldr	r3, [pc, #32]	@ (8006f98 <HAL_RTC_Init+0x100>)
 8006f76:	22ff      	movs	r2, #255	@ 0xff
 8006f78:	625a      	str	r2, [r3, #36]	@ 0x24
 8006f7a:	e001      	b.n	8006f80 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d103      	bne.n	8006f8e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40002800 	.word	0x40002800

08006f9c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006f9c:	b590      	push	{r4, r7, lr}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d101      	bne.n	8006fba <HAL_RTC_SetAlarm_IT+0x1e>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e0f3      	b.n	80071a2 <HAL_RTC_SetAlarm_IT+0x206>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006fca:	4b78      	ldr	r3, [pc, #480]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fd2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fda:	d06a      	beq.n	80070b2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d13a      	bne.n	8007058 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006fe2:	4b72      	ldr	r3, [pc, #456]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d102      	bne.n	8006ff4 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	4618      	mov	r0, r3
 8007002:	f000 f9f5 	bl	80073f0 <RTC_ByteToBcd2>
 8007006:	4603      	mov	r3, r0
 8007008:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	785b      	ldrb	r3, [r3, #1]
 800700e:	4618      	mov	r0, r3
 8007010:	f000 f9ee 	bl	80073f0 <RTC_ByteToBcd2>
 8007014:	4603      	mov	r3, r0
 8007016:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007018:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	789b      	ldrb	r3, [r3, #2]
 800701e:	4618      	mov	r0, r3
 8007020:	f000 f9e6 	bl	80073f0 <RTC_ByteToBcd2>
 8007024:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007026:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	78db      	ldrb	r3, [r3, #3]
 800702e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007030:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800703a:	4618      	mov	r0, r3
 800703c:	f000 f9d8 	bl	80073f0 <RTC_ByteToBcd2>
 8007040:	4603      	mov	r3, r0
 8007042:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007044:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800704c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007052:	4313      	orrs	r3, r2
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	e02c      	b.n	80070b2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8007060:	d00d      	beq.n	800707e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800706a:	d008      	beq.n	800707e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800706c:	4b4f      	ldr	r3, [pc, #316]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007074:	2b00      	cmp	r3, #0
 8007076:	d102      	bne.n	800707e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2200      	movs	r2, #0
 800707c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	785b      	ldrb	r3, [r3, #1]
 8007088:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800708a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007090:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	78db      	ldrb	r3, [r3, #3]
 8007096:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007098:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80070a0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80070a2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070a8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070b2:	4b3e      	ldr	r3, [pc, #248]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 80070b4:	22ca      	movs	r2, #202	@ 0xca
 80070b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80070b8:	4b3c      	ldr	r3, [pc, #240]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 80070ba:	2253      	movs	r2, #83	@ 0x53
 80070bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070c6:	d12c      	bne.n	8007122 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80070c8:	4b38      	ldr	r3, [pc, #224]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	4a37      	ldr	r2, [pc, #220]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 80070ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80070d2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80070d4:	4b35      	ldr	r3, [pc, #212]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 80070d6:	2201      	movs	r2, #1
 80070d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070e0:	d107      	bne.n	80070f2 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	4930      	ldr	r1, [pc, #192]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	644b      	str	r3, [r1, #68]	@ 0x44
 80070f0:	e006      	b.n	8007100 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80070f2:	4a2e      	ldr	r2, [pc, #184]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80070f8:	4a2c      	ldr	r2, [pc, #176]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007100:	4a2a      	ldr	r2, [pc, #168]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710c:	f043 0201 	orr.w	r2, r3, #1
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007114:	4b25      	ldr	r3, [pc, #148]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	4a24      	ldr	r2, [pc, #144]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 800711a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800711e:	6193      	str	r3, [r2, #24]
 8007120:	e02b      	b.n	800717a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007122:	4b22      	ldr	r3, [pc, #136]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	4a21      	ldr	r2, [pc, #132]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 8007128:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800712c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800712e:	4b1f      	ldr	r3, [pc, #124]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 8007130:	2202      	movs	r2, #2
 8007132:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800713a:	d107      	bne.n	800714c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	699a      	ldr	r2, [r3, #24]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	4919      	ldr	r1, [pc, #100]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 8007146:	4313      	orrs	r3, r2
 8007148:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800714a:	e006      	b.n	800715a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800714c:	4a17      	ldr	r2, [pc, #92]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007152:	4a16      	ldr	r2, [pc, #88]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800715a:	4a14      	ldr	r2, [pc, #80]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007166:	f043 0202 	orr.w	r2, r3, #2
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800716e:	4b0f      	ldr	r3, [pc, #60]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	4a0e      	ldr	r2, [pc, #56]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 8007174:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8007178:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800717a:	4b0d      	ldr	r3, [pc, #52]	@ (80071b0 <HAL_RTC_SetAlarm_IT+0x214>)
 800717c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007180:	4a0b      	ldr	r2, [pc, #44]	@ (80071b0 <HAL_RTC_SetAlarm_IT+0x214>)
 8007182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007186:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800718a:	4b08      	ldr	r3, [pc, #32]	@ (80071ac <HAL_RTC_SetAlarm_IT+0x210>)
 800718c:	22ff      	movs	r2, #255	@ 0xff
 800718e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd90      	pop	{r4, r7, pc}
 80071aa:	bf00      	nop
 80071ac:	40002800 	.word	0x40002800
 80071b0:	58000800 	.word	0x58000800

080071b4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d101      	bne.n	80071cc <HAL_RTC_DeactivateAlarm+0x18>
 80071c8:	2302      	movs	r3, #2
 80071ca:	e048      	b.n	800725e <HAL_RTC_DeactivateAlarm+0xaa>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071dc:	4b22      	ldr	r3, [pc, #136]	@ (8007268 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071de:	22ca      	movs	r2, #202	@ 0xca
 80071e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80071e2:	4b21      	ldr	r3, [pc, #132]	@ (8007268 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071e4:	2253      	movs	r2, #83	@ 0x53
 80071e6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ee:	d115      	bne.n	800721c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80071f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007268 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007268 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80071fa:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80071fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007268 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007200:	4a19      	ldr	r2, [pc, #100]	@ (8007268 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007202:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007206:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720c:	f023 0201 	bic.w	r2, r3, #1
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007214:	4b14      	ldr	r3, [pc, #80]	@ (8007268 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007216:	2201      	movs	r2, #1
 8007218:	65da      	str	r2, [r3, #92]	@ 0x5c
 800721a:	e014      	b.n	8007246 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800721c:	4b12      	ldr	r3, [pc, #72]	@ (8007268 <HAL_RTC_DeactivateAlarm+0xb4>)
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	4a11      	ldr	r2, [pc, #68]	@ (8007268 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007222:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007226:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007228:	4b0f      	ldr	r3, [pc, #60]	@ (8007268 <HAL_RTC_DeactivateAlarm+0xb4>)
 800722a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800722c:	4a0e      	ldr	r2, [pc, #56]	@ (8007268 <HAL_RTC_DeactivateAlarm+0xb4>)
 800722e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007232:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007238:	f023 0202 	bic.w	r2, r3, #2
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007240:	4b09      	ldr	r3, [pc, #36]	@ (8007268 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007242:	2202      	movs	r2, #2
 8007244:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007246:	4b08      	ldr	r3, [pc, #32]	@ (8007268 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007248:	22ff      	movs	r2, #255	@ 0xff
 800724a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr
 8007268:	40002800 	.word	0x40002800

0800726c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007274:	4b11      	ldr	r3, [pc, #68]	@ (80072bc <HAL_RTC_AlarmIRQHandler+0x50>)
 8007276:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727c:	4013      	ands	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d005      	beq.n	8007296 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800728a:	4b0c      	ldr	r3, [pc, #48]	@ (80072bc <HAL_RTC_AlarmIRQHandler+0x50>)
 800728c:	2201      	movs	r2, #1
 800728e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7fb f950 	bl	8002536 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d005      	beq.n	80072ac <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80072a0:	4b06      	ldr	r3, [pc, #24]	@ (80072bc <HAL_RTC_AlarmIRQHandler+0x50>)
 80072a2:	2202      	movs	r2, #2
 80072a4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f94a 	bl	8007540 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80072b4:	bf00      	nop
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40002800 	.word	0x40002800

080072c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80072c8:	4b0f      	ldr	r3, [pc, #60]	@ (8007308 <HAL_RTC_WaitForSynchro+0x48>)
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	4a0e      	ldr	r2, [pc, #56]	@ (8007308 <HAL_RTC_WaitForSynchro+0x48>)
 80072ce:	f023 0320 	bic.w	r3, r3, #32
 80072d2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80072d4:	f7fa ff4e 	bl	8002174 <HAL_GetTick>
 80072d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80072da:	e009      	b.n	80072f0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072dc:	f7fa ff4a 	bl	8002174 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072ea:	d901      	bls.n	80072f0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e006      	b.n	80072fe <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80072f0:	4b05      	ldr	r3, [pc, #20]	@ (8007308 <HAL_RTC_WaitForSynchro+0x48>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0ef      	beq.n	80072dc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	40002800 	.word	0x40002800

0800730c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007318:	4b15      	ldr	r3, [pc, #84]	@ (8007370 <RTC_EnterInitMode+0x64>)
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d120      	bne.n	8007366 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007324:	4b12      	ldr	r3, [pc, #72]	@ (8007370 <RTC_EnterInitMode+0x64>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	4a11      	ldr	r2, [pc, #68]	@ (8007370 <RTC_EnterInitMode+0x64>)
 800732a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800732e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007330:	f7fa ff20 	bl	8002174 <HAL_GetTick>
 8007334:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007336:	e00d      	b.n	8007354 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007338:	f7fa ff1c 	bl	8002174 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007346:	d905      	bls.n	8007354 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2203      	movs	r2, #3
 8007350:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007354:	4b06      	ldr	r3, [pc, #24]	@ (8007370 <RTC_EnterInitMode+0x64>)
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800735c:	2b00      	cmp	r3, #0
 800735e:	d102      	bne.n	8007366 <RTC_EnterInitMode+0x5a>
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	2b03      	cmp	r3, #3
 8007364:	d1e8      	bne.n	8007338 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007366:	7bfb      	ldrb	r3, [r7, #15]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40002800 	.word	0x40002800

08007374 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007380:	4b1a      	ldr	r3, [pc, #104]	@ (80073ec <RTC_ExitInitMode+0x78>)
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	4a19      	ldr	r2, [pc, #100]	@ (80073ec <RTC_ExitInitMode+0x78>)
 8007386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800738a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800738c:	4b17      	ldr	r3, [pc, #92]	@ (80073ec <RTC_ExitInitMode+0x78>)
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10c      	bne.n	80073b2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7ff ff91 	bl	80072c0 <HAL_RTC_WaitForSynchro>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d01e      	beq.n	80073e2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2203      	movs	r2, #3
 80073a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	73fb      	strb	r3, [r7, #15]
 80073b0:	e017      	b.n	80073e2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80073b2:	4b0e      	ldr	r3, [pc, #56]	@ (80073ec <RTC_ExitInitMode+0x78>)
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	4a0d      	ldr	r2, [pc, #52]	@ (80073ec <RTC_ExitInitMode+0x78>)
 80073b8:	f023 0320 	bic.w	r3, r3, #32
 80073bc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff ff7e 	bl	80072c0 <HAL_RTC_WaitForSynchro>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d005      	beq.n	80073d6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2203      	movs	r2, #3
 80073ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80073d6:	4b05      	ldr	r3, [pc, #20]	@ (80073ec <RTC_ExitInitMode+0x78>)
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	4a04      	ldr	r2, [pc, #16]	@ (80073ec <RTC_ExitInitMode+0x78>)
 80073dc:	f043 0320 	orr.w	r3, r3, #32
 80073e0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80073e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	40002800 	.word	0x40002800

080073f0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	4603      	mov	r3, r0
 80073f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80073fe:	79fb      	ldrb	r3, [r7, #7]
 8007400:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007402:	e005      	b.n	8007410 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3301      	adds	r3, #1
 8007408:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800740a:	7afb      	ldrb	r3, [r7, #11]
 800740c:	3b0a      	subs	r3, #10
 800740e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007410:	7afb      	ldrb	r3, [r7, #11]
 8007412:	2b09      	cmp	r3, #9
 8007414:	d8f6      	bhi.n	8007404 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	b2db      	uxtb	r3, r3
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	b2da      	uxtb	r2, r3
 800741e:	7afb      	ldrb	r3, [r7, #11]
 8007420:	4313      	orrs	r3, r2
 8007422:	b2db      	uxtb	r3, r3
}
 8007424:	4618      	mov	r0, r3
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	bc80      	pop	{r7}
 800742c:	4770      	bx	lr
	...

08007430 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800743e:	2b01      	cmp	r3, #1
 8007440:	d101      	bne.n	8007446 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007442:	2302      	movs	r3, #2
 8007444:	e01f      	b.n	8007486 <HAL_RTCEx_EnableBypassShadow+0x56>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2202      	movs	r2, #2
 8007452:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007456:	4b0e      	ldr	r3, [pc, #56]	@ (8007490 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007458:	22ca      	movs	r2, #202	@ 0xca
 800745a:	625a      	str	r2, [r3, #36]	@ 0x24
 800745c:	4b0c      	ldr	r3, [pc, #48]	@ (8007490 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800745e:	2253      	movs	r2, #83	@ 0x53
 8007460:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007462:	4b0b      	ldr	r3, [pc, #44]	@ (8007490 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	4a0a      	ldr	r2, [pc, #40]	@ (8007490 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007468:	f043 0320 	orr.w	r3, r3, #32
 800746c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800746e:	4b08      	ldr	r3, [pc, #32]	@ (8007490 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007470:	22ff      	movs	r2, #255	@ 0xff
 8007472:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	bc80      	pop	{r7}
 800748e:	4770      	bx	lr
 8007490:	40002800 	.word	0x40002800

08007494 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d101      	bne.n	80074aa <HAL_RTCEx_SetSSRU_IT+0x16>
 80074a6:	2302      	movs	r3, #2
 80074a8:	e027      	b.n	80074fa <HAL_RTCEx_SetSSRU_IT+0x66>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2202      	movs	r2, #2
 80074b6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074ba:	4b12      	ldr	r3, [pc, #72]	@ (8007504 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80074bc:	22ca      	movs	r2, #202	@ 0xca
 80074be:	625a      	str	r2, [r3, #36]	@ 0x24
 80074c0:	4b10      	ldr	r3, [pc, #64]	@ (8007504 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80074c2:	2253      	movs	r2, #83	@ 0x53
 80074c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80074c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007504 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007504 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80074cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074d0:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80074d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007508 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80074d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074d8:	4a0b      	ldr	r2, [pc, #44]	@ (8007508 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80074da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074de:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074e2:	4b08      	ldr	r3, [pc, #32]	@ (8007504 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80074e4:	22ff      	movs	r2, #255	@ 0xff
 80074e6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	bc80      	pop	{r7}
 8007502:	4770      	bx	lr
 8007504:	40002800 	.word	0x40002800
 8007508:	58000800 	.word	0x58000800

0800750c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007514:	4b09      	ldr	r3, [pc, #36]	@ (800753c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007520:	4b06      	ldr	r3, [pc, #24]	@ (800753c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007522:	2240      	movs	r2, #64	@ 0x40
 8007524:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7fb f80f 	bl	800254a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	40002800 	.word	0x40002800

08007540 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr
	...

08007554 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007560:	4b07      	ldr	r3, [pc, #28]	@ (8007580 <HAL_RTCEx_BKUPWrite+0x2c>)
 8007562:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	4413      	add	r3, r2
 800756c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	601a      	str	r2, [r3, #0]
}
 8007574:	bf00      	nop
 8007576:	371c      	adds	r7, #28
 8007578:	46bd      	mov	sp, r7
 800757a:	bc80      	pop	{r7}
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	4000b100 	.word	0x4000b100

08007584 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800758e:	4b07      	ldr	r3, [pc, #28]	@ (80075ac <HAL_RTCEx_BKUPRead+0x28>)
 8007590:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4413      	add	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bc80      	pop	{r7}
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	4000b100 	.word	0x4000b100

080075b0 <LL_PWR_SetRadioBusyTrigger>:
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80075b8:	4b06      	ldr	r3, [pc, #24]	@ (80075d4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80075c0:	4904      	ldr	r1, [pc, #16]	@ (80075d4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	608b      	str	r3, [r1, #8]
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	58000400 	.word	0x58000400

080075d8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80075dc:	4b05      	ldr	r3, [pc, #20]	@ (80075f4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80075de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075e2:	4a04      	ldr	r2, [pc, #16]	@ (80075f4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80075e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80075ec:	bf00      	nop
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bc80      	pop	{r7}
 80075f2:	4770      	bx	lr
 80075f4:	58000400 	.word	0x58000400

080075f8 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80075f8:	b480      	push	{r7}
 80075fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80075fc:	4b05      	ldr	r3, [pc, #20]	@ (8007614 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80075fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007602:	4a04      	ldr	r2, [pc, #16]	@ (8007614 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007604:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800760c:	bf00      	nop
 800760e:	46bd      	mov	sp, r7
 8007610:	bc80      	pop	{r7}
 8007612:	4770      	bx	lr
 8007614:	58000400 	.word	0x58000400

08007618 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007618:	b480      	push	{r7}
 800761a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800761c:	4b03      	ldr	r3, [pc, #12]	@ (800762c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800761e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007622:	619a      	str	r2, [r3, #24]
}
 8007624:	bf00      	nop
 8007626:	46bd      	mov	sp, r7
 8007628:	bc80      	pop	{r7}
 800762a:	4770      	bx	lr
 800762c:	58000400 	.word	0x58000400

08007630 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007634:	4b06      	ldr	r3, [pc, #24]	@ (8007650 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b02      	cmp	r3, #2
 800763e:	d101      	bne.n	8007644 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007640:	2301      	movs	r3, #1
 8007642:	e000      	b.n	8007646 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	46bd      	mov	sp, r7
 800764a:	bc80      	pop	{r7}
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	58000400 	.word	0x58000400

08007654 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007654:	b480      	push	{r7}
 8007656:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007658:	4b06      	ldr	r3, [pc, #24]	@ (8007674 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b04      	cmp	r3, #4
 8007662:	d101      	bne.n	8007668 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007664:	2301      	movs	r3, #1
 8007666:	e000      	b.n	800766a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	46bd      	mov	sp, r7
 800766e:	bc80      	pop	{r7}
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	58000400 	.word	0x58000400

08007678 <LL_RCC_RF_DisableReset>:
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800767c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007680:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007684:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007688:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800768c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007690:	bf00      	nop
 8007692:	46bd      	mov	sp, r7
 8007694:	bc80      	pop	{r7}
 8007696:	4770      	bx	lr

08007698 <LL_RCC_IsRFUnderReset>:
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800769c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076ac:	d101      	bne.n	80076b2 <LL_RCC_IsRFUnderReset+0x1a>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e000      	b.n	80076b4 <LL_RCC_IsRFUnderReset+0x1c>
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bc80      	pop	{r7}
 80076ba:	4770      	bx	lr

080076bc <LL_EXTI_EnableIT_32_63>:
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80076c4:	4b06      	ldr	r3, [pc, #24]	@ (80076e0 <LL_EXTI_EnableIT_32_63+0x24>)
 80076c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80076ca:	4905      	ldr	r1, [pc, #20]	@ (80076e0 <LL_EXTI_EnableIT_32_63+0x24>)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	bc80      	pop	{r7}
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	58000800 	.word	0x58000800

080076e4 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	73fb      	strb	r3, [r7, #15]
    return status;
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	e052      	b.n	80077a0 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	799b      	ldrb	r3, [r3, #6]
 8007702:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8007704:	7bbb      	ldrb	r3, [r7, #14]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_SUBGHZ_Init+0x2c>
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	2b03      	cmp	r3, #3
 800770e:	d109      	bne.n	8007724 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7fa fb8e 	bl	8001e38 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800771c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007720:	f7ff ffcc 	bl	80076bc <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d126      	bne.n	8007778 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2202      	movs	r2, #2
 800772e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8007730:	f7ff ffa2 	bl	8007678 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007734:	4b1c      	ldr	r3, [pc, #112]	@ (80077a8 <HAL_SUBGHZ_Init+0xc4>)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	1a9b      	subs	r3, r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	0cdb      	lsrs	r3, r3, #19
 8007742:	2264      	movs	r2, #100	@ 0x64
 8007744:	fb02 f303 	mul.w	r3, r2, r3
 8007748:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d105      	bne.n	800775c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	609a      	str	r2, [r3, #8]
        break;
 800775a:	e007      	b.n	800776c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	3b01      	subs	r3, #1
 8007760:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007762:	f7ff ff99 	bl	8007698 <LL_RCC_IsRFUnderReset>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1ee      	bne.n	800774a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800776c:	f7ff ff34 	bl	80075d8 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007770:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007774:	f7ff ff1c 	bl	80075b0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007778:	f7ff ff4e 	bl	8007618 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10a      	bne.n	8007798 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4618      	mov	r0, r3
 8007788:	f000 fab0 	bl	8007cec <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	719a      	strb	r2, [r3, #6]

  return status;
 800779e:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000000 	.word	0x20000000

080077ac <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	607a      	str	r2, [r7, #4]
 80077b6:	461a      	mov	r2, r3
 80077b8:	460b      	mov	r3, r1
 80077ba:	817b      	strh	r3, [r7, #10]
 80077bc:	4613      	mov	r3, r2
 80077be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	799b      	ldrb	r3, [r3, #6]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d14a      	bne.n	8007860 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	795b      	ldrb	r3, [r3, #5]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e045      	b.n	8007862 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2202      	movs	r2, #2
 80077e0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 fb50 	bl	8007e88 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80077e8:	f7ff ff06 	bl	80075f8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80077ec:	210d      	movs	r1, #13
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f000 fa9c 	bl	8007d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80077f4:	897b      	ldrh	r3, [r7, #10]
 80077f6:	0a1b      	lsrs	r3, r3, #8
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	4619      	mov	r1, r3
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f000 fa94 	bl	8007d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007804:	897b      	ldrh	r3, [r7, #10]
 8007806:	b2db      	uxtb	r3, r3
 8007808:	4619      	mov	r1, r3
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 fa8e 	bl	8007d2c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007810:	2300      	movs	r3, #0
 8007812:	82bb      	strh	r3, [r7, #20]
 8007814:	e00a      	b.n	800782c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007816:	8abb      	ldrh	r3, [r7, #20]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	4413      	add	r3, r2
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	4619      	mov	r1, r3
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fa83 	bl	8007d2c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007826:	8abb      	ldrh	r3, [r7, #20]
 8007828:	3301      	adds	r3, #1
 800782a:	82bb      	strh	r3, [r7, #20]
 800782c:	8aba      	ldrh	r2, [r7, #20]
 800782e:	893b      	ldrh	r3, [r7, #8]
 8007830:	429a      	cmp	r2, r3
 8007832:	d3f0      	bcc.n	8007816 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007834:	f7ff fed0 	bl	80075d8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fb49 	bl	8007ed0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	75fb      	strb	r3, [r7, #23]
 800784a:	e001      	b.n	8007850 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2201      	movs	r2, #1
 8007854:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	715a      	strb	r2, [r3, #5]

    return status;
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	e000      	b.n	8007862 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007860:	2302      	movs	r3, #2
  }
}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b088      	sub	sp, #32
 800786e:	af00      	add	r7, sp, #0
 8007870:	60f8      	str	r0, [r7, #12]
 8007872:	607a      	str	r2, [r7, #4]
 8007874:	461a      	mov	r2, r3
 8007876:	460b      	mov	r3, r1
 8007878:	817b      	strh	r3, [r7, #10]
 800787a:	4613      	mov	r3, r2
 800787c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	799b      	ldrb	r3, [r3, #6]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b01      	cmp	r3, #1
 800788a:	d14a      	bne.n	8007922 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	795b      	ldrb	r3, [r3, #5]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007894:	2302      	movs	r3, #2
 8007896:	e045      	b.n	8007924 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 faf2 	bl	8007e88 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80078a4:	f7ff fea8 	bl	80075f8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80078a8:	211d      	movs	r1, #29
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 fa3e 	bl	8007d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80078b0:	897b      	ldrh	r3, [r7, #10]
 80078b2:	0a1b      	lsrs	r3, r3, #8
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	4619      	mov	r1, r3
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fa36 	bl	8007d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80078c0:	897b      	ldrh	r3, [r7, #10]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	4619      	mov	r1, r3
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 fa30 	bl	8007d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80078cc:	2100      	movs	r1, #0
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f000 fa2c 	bl	8007d2c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80078d4:	2300      	movs	r3, #0
 80078d6:	82fb      	strh	r3, [r7, #22]
 80078d8:	e009      	b.n	80078ee <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80078da:	69b9      	ldr	r1, [r7, #24]
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 fa7b 	bl	8007dd8 <SUBGHZSPI_Receive>
      pData++;
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	3301      	adds	r3, #1
 80078e6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80078e8:	8afb      	ldrh	r3, [r7, #22]
 80078ea:	3301      	adds	r3, #1
 80078ec:	82fb      	strh	r3, [r7, #22]
 80078ee:	8afa      	ldrh	r2, [r7, #22]
 80078f0:	893b      	ldrh	r3, [r7, #8]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d3f1      	bcc.n	80078da <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80078f6:	f7ff fe6f 	bl	80075d8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 fae8 	bl	8007ed0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	77fb      	strb	r3, [r7, #31]
 800790c:	e001      	b.n	8007912 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2201      	movs	r2, #1
 8007916:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	715a      	strb	r2, [r3, #5]

    return status;
 800791e:	7ffb      	ldrb	r3, [r7, #31]
 8007920:	e000      	b.n	8007924 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007922:	2302      	movs	r3, #2
  }
}
 8007924:	4618      	mov	r0, r3
 8007926:	3720      	adds	r7, #32
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	607a      	str	r2, [r7, #4]
 8007936:	461a      	mov	r2, r3
 8007938:	460b      	mov	r3, r1
 800793a:	72fb      	strb	r3, [r7, #11]
 800793c:	4613      	mov	r3, r2
 800793e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	799b      	ldrb	r3, [r3, #6]
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b01      	cmp	r3, #1
 8007948:	d14a      	bne.n	80079e0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	795b      	ldrb	r3, [r3, #5]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d101      	bne.n	8007956 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007952:	2302      	movs	r3, #2
 8007954:	e045      	b.n	80079e2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2201      	movs	r2, #1
 800795a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f000 fa93 	bl	8007e88 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007962:	7afb      	ldrb	r3, [r7, #11]
 8007964:	2b84      	cmp	r3, #132	@ 0x84
 8007966:	d002      	beq.n	800796e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	2b94      	cmp	r3, #148	@ 0x94
 800796c:	d103      	bne.n	8007976 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2201      	movs	r2, #1
 8007972:	711a      	strb	r2, [r3, #4]
 8007974:	e002      	b.n	800797c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800797c:	f7ff fe3c 	bl	80075f8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007980:	7afb      	ldrb	r3, [r7, #11]
 8007982:	4619      	mov	r1, r3
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f9d1 	bl	8007d2c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800798a:	2300      	movs	r3, #0
 800798c:	82bb      	strh	r3, [r7, #20]
 800798e:	e00a      	b.n	80079a6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007990:	8abb      	ldrh	r3, [r7, #20]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	4413      	add	r3, r2
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	4619      	mov	r1, r3
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 f9c6 	bl	8007d2c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80079a0:	8abb      	ldrh	r3, [r7, #20]
 80079a2:	3301      	adds	r3, #1
 80079a4:	82bb      	strh	r3, [r7, #20]
 80079a6:	8aba      	ldrh	r2, [r7, #20]
 80079a8:	893b      	ldrh	r3, [r7, #8]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d3f0      	bcc.n	8007990 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80079ae:	f7ff fe13 	bl	80075d8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80079b2:	7afb      	ldrb	r3, [r7, #11]
 80079b4:	2b84      	cmp	r3, #132	@ 0x84
 80079b6:	d002      	beq.n	80079be <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 fa89 	bl	8007ed0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	75fb      	strb	r3, [r7, #23]
 80079ca:	e001      	b.n	80079d0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2201      	movs	r2, #1
 80079d4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	715a      	strb	r2, [r3, #5]

    return status;
 80079dc:	7dfb      	ldrb	r3, [r7, #23]
 80079de:	e000      	b.n	80079e2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80079e0:	2302      	movs	r3, #2
  }
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b088      	sub	sp, #32
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	60f8      	str	r0, [r7, #12]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	461a      	mov	r2, r3
 80079f6:	460b      	mov	r3, r1
 80079f8:	72fb      	strb	r3, [r7, #11]
 80079fa:	4613      	mov	r3, r2
 80079fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	799b      	ldrb	r3, [r3, #6]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d13d      	bne.n	8007a88 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	795b      	ldrb	r3, [r3, #5]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e038      	b.n	8007a8a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 fa32 	bl	8007e88 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a24:	f7ff fde8 	bl	80075f8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007a28:	7afb      	ldrb	r3, [r7, #11]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f97d 	bl	8007d2c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007a32:	2100      	movs	r1, #0
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 f979 	bl	8007d2c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	82fb      	strh	r3, [r7, #22]
 8007a3e:	e009      	b.n	8007a54 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007a40:	69b9      	ldr	r1, [r7, #24]
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f000 f9c8 	bl	8007dd8 <SUBGHZSPI_Receive>
      pData++;
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007a4e:	8afb      	ldrh	r3, [r7, #22]
 8007a50:	3301      	adds	r3, #1
 8007a52:	82fb      	strh	r3, [r7, #22]
 8007a54:	8afa      	ldrh	r2, [r7, #22]
 8007a56:	893b      	ldrh	r3, [r7, #8]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d3f1      	bcc.n	8007a40 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a5c:	f7ff fdbc 	bl	80075d8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 fa35 	bl	8007ed0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d002      	beq.n	8007a74 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	77fb      	strb	r3, [r7, #31]
 8007a72:	e001      	b.n	8007a78 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	715a      	strb	r2, [r3, #5]

    return status;
 8007a84:	7ffb      	ldrb	r3, [r7, #31]
 8007a86:	e000      	b.n	8007a8a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007a88:	2302      	movs	r3, #2
  }
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3720      	adds	r7, #32
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b086      	sub	sp, #24
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	60f8      	str	r0, [r7, #12]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	72fb      	strb	r3, [r7, #11]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	799b      	ldrb	r3, [r3, #6]
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d13e      	bne.n	8007b2e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	795b      	ldrb	r3, [r3, #5]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d101      	bne.n	8007abc <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e039      	b.n	8007b30 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 f9e0 	bl	8007e88 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ac8:	f7ff fd96 	bl	80075f8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007acc:	210e      	movs	r1, #14
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 f92c 	bl	8007d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007ad4:	7afb      	ldrb	r3, [r7, #11]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 f927 	bl	8007d2c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007ade:	2300      	movs	r3, #0
 8007ae0:	82bb      	strh	r3, [r7, #20]
 8007ae2:	e00a      	b.n	8007afa <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007ae4:	8abb      	ldrh	r3, [r7, #20]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	4413      	add	r3, r2
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	4619      	mov	r1, r3
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 f91c 	bl	8007d2c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007af4:	8abb      	ldrh	r3, [r7, #20]
 8007af6:	3301      	adds	r3, #1
 8007af8:	82bb      	strh	r3, [r7, #20]
 8007afa:	8aba      	ldrh	r2, [r7, #20]
 8007afc:	893b      	ldrh	r3, [r7, #8]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d3f0      	bcc.n	8007ae4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007b02:	f7ff fd69 	bl	80075d8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 f9e2 	bl	8007ed0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	75fb      	strb	r3, [r7, #23]
 8007b18:	e001      	b.n	8007b1e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2201      	movs	r2, #1
 8007b22:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	715a      	strb	r2, [r3, #5]

    return status;
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	e000      	b.n	8007b30 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007b2e:	2302      	movs	r3, #2
  }
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3718      	adds	r7, #24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	607a      	str	r2, [r7, #4]
 8007b42:	461a      	mov	r2, r3
 8007b44:	460b      	mov	r3, r1
 8007b46:	72fb      	strb	r3, [r7, #11]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	799b      	ldrb	r3, [r3, #6]
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d141      	bne.n	8007bde <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	795b      	ldrb	r3, [r3, #5]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d101      	bne.n	8007b66 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007b62:	2302      	movs	r3, #2
 8007b64:	e03c      	b.n	8007be0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 f98b 	bl	8007e88 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007b72:	f7ff fd41 	bl	80075f8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007b76:	211e      	movs	r1, #30
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f8d7 	bl	8007d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007b7e:	7afb      	ldrb	r3, [r7, #11]
 8007b80:	4619      	mov	r1, r3
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 f8d2 	bl	8007d2c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007b88:	2100      	movs	r1, #0
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f000 f8ce 	bl	8007d2c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007b90:	2300      	movs	r3, #0
 8007b92:	82fb      	strh	r3, [r7, #22]
 8007b94:	e009      	b.n	8007baa <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007b96:	69b9      	ldr	r1, [r7, #24]
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 f91d 	bl	8007dd8 <SUBGHZSPI_Receive>
      pData++;
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007ba4:	8afb      	ldrh	r3, [r7, #22]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	82fb      	strh	r3, [r7, #22]
 8007baa:	8afa      	ldrh	r2, [r7, #22]
 8007bac:	893b      	ldrh	r3, [r7, #8]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d3f1      	bcc.n	8007b96 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007bb2:	f7ff fd11 	bl	80075d8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 f98a 	bl	8007ed0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	77fb      	strb	r3, [r7, #31]
 8007bc8:	e001      	b.n	8007bce <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	715a      	strb	r2, [r3, #5]

    return status;
 8007bda:	7ffb      	ldrb	r3, [r7, #31]
 8007bdc:	e000      	b.n	8007be0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007bde:	2302      	movs	r3, #2
  }
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3720      	adds	r7, #32
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007bf4:	f107 020c 	add.w	r2, r7, #12
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	2112      	movs	r1, #18
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7ff fef4 	bl	80079ea <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007c02:	7b3b      	ldrb	r3, [r7, #12]
 8007c04:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007c06:	89fb      	ldrh	r3, [r7, #14]
 8007c08:	021b      	lsls	r3, r3, #8
 8007c0a:	b21a      	sxth	r2, r3
 8007c0c:	7b7b      	ldrb	r3, [r7, #13]
 8007c0e:	b21b      	sxth	r3, r3
 8007c10:	4313      	orrs	r3, r2
 8007c12:	b21b      	sxth	r3, r3
 8007c14:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8007c16:	f107 020c 	add.w	r2, r7, #12
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	2102      	movs	r1, #2
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff fe84 	bl	800792c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007c24:	89fb      	ldrh	r3, [r7, #14]
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f011 ffe0 	bl	8019bf4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8007c34:	89fb      	ldrh	r3, [r7, #14]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d007      	beq.n	8007c4e <HAL_SUBGHZ_IRQHandler+0x66>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8007c3e:	89fb      	ldrh	r3, [r7, #14]
 8007c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d102      	bne.n	8007c4e <HAL_SUBGHZ_IRQHandler+0x66>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f011 ffe1 	bl	8019c10 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007c4e:	89fb      	ldrh	r3, [r7, #14]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f012 f831 	bl	8019cc0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007c5e:	89fb      	ldrh	r3, [r7, #14]
 8007c60:	f003 0308 	and.w	r3, r3, #8
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d002      	beq.n	8007c6e <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f012 f837 	bl	8019cdc <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007c6e:	89fb      	ldrh	r3, [r7, #14]
 8007c70:	f003 0310 	and.w	r3, r3, #16
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f012 f83d 	bl	8019cf8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007c7e:	89fb      	ldrh	r3, [r7, #14]
 8007c80:	f003 0320 	and.w	r3, r3, #32
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f012 f80b 	bl	8019ca4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007c8e:	89fb      	ldrh	r3, [r7, #14]
 8007c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <HAL_SUBGHZ_IRQHandler+0xb6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f011 ffc7 	bl	8019c2c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007c9e:	89fb      	ldrh	r3, [r7, #14]
 8007ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00d      	beq.n	8007cc4 <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007ca8:	89fb      	ldrh	r3, [r7, #14]
 8007caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d004      	beq.n	8007cbc <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f011 ffc7 	bl	8019c48 <HAL_SUBGHZ_CADStatusCallback>
 8007cba:	e003      	b.n	8007cc4 <HAL_SUBGHZ_IRQHandler+0xdc>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f011 ffc2 	bl	8019c48 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007cc4:	89fb      	ldrh	r3, [r7, #14]
 8007cc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f011 ffd8 	bl	8019c84 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007cd4:	89fb      	ldrh	r3, [r7, #14]
 8007cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <HAL_SUBGHZ_IRQHandler+0xfc>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f012 f818 	bl	8019d14 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8007ce4:	bf00      	nop
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8007d28 <SUBGHZSPI_Init+0x3c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8007d28 <SUBGHZSPI_Init+0x3c>)
 8007cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cfe:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007d00:	4a09      	ldr	r2, [pc, #36]	@ (8007d28 <SUBGHZSPI_Init+0x3c>)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007d08:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007d0a:	4b07      	ldr	r3, [pc, #28]	@ (8007d28 <SUBGHZSPI_Init+0x3c>)
 8007d0c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007d10:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007d12:	4b05      	ldr	r3, [pc, #20]	@ (8007d28 <SUBGHZSPI_Init+0x3c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a04      	ldr	r2, [pc, #16]	@ (8007d28 <SUBGHZSPI_Init+0x3c>)
 8007d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d1c:	6013      	str	r3, [r2, #0]
}
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bc80      	pop	{r7}
 8007d26:	4770      	bx	lr
 8007d28:	58010000 	.word	0x58010000

08007d2c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d3c:	4b23      	ldr	r3, [pc, #140]	@ (8007dcc <SUBGHZSPI_Transmit+0xa0>)
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	4613      	mov	r3, r2
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	1a9b      	subs	r3, r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	0cdb      	lsrs	r3, r3, #19
 8007d4a:	2264      	movs	r2, #100	@ 0x64
 8007d4c:	fb02 f303 	mul.w	r3, r2, r3
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d105      	bne.n	8007d64 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	609a      	str	r2, [r3, #8]
      break;
 8007d62:	e008      	b.n	8007d76 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007d6a:	4b19      	ldr	r3, [pc, #100]	@ (8007dd0 <SUBGHZSPI_Transmit+0xa4>)
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d1ed      	bne.n	8007d52 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007d76:	4b17      	ldr	r3, [pc, #92]	@ (8007dd4 <SUBGHZSPI_Transmit+0xa8>)
 8007d78:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	78fa      	ldrb	r2, [r7, #3]
 8007d7e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d80:	4b12      	ldr	r3, [pc, #72]	@ (8007dcc <SUBGHZSPI_Transmit+0xa0>)
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	4613      	mov	r3, r2
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	1a9b      	subs	r3, r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	0cdb      	lsrs	r3, r3, #19
 8007d8e:	2264      	movs	r2, #100	@ 0x64
 8007d90:	fb02 f303 	mul.w	r3, r2, r3
 8007d94:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d105      	bne.n	8007da8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	609a      	str	r2, [r3, #8]
      break;
 8007da6:	e008      	b.n	8007dba <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007dae:	4b08      	ldr	r3, [pc, #32]	@ (8007dd0 <SUBGHZSPI_Transmit+0xa4>)
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d1ed      	bne.n	8007d96 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007dba:	4b05      	ldr	r3, [pc, #20]	@ (8007dd0 <SUBGHZSPI_Transmit+0xa4>)
 8007dbc:	68db      	ldr	r3, [r3, #12]

  return status;
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	371c      	adds	r7, #28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bc80      	pop	{r7}
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	20000000 	.word	0x20000000
 8007dd0:	58010000 	.word	0x58010000
 8007dd4:	5801000c 	.word	0x5801000c

08007dd8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b087      	sub	sp, #28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007de6:	4b25      	ldr	r3, [pc, #148]	@ (8007e7c <SUBGHZSPI_Receive+0xa4>)
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	4613      	mov	r3, r2
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	1a9b      	subs	r3, r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	0cdb      	lsrs	r3, r3, #19
 8007df4:	2264      	movs	r2, #100	@ 0x64
 8007df6:	fb02 f303 	mul.w	r3, r2, r3
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d105      	bne.n	8007e0e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	609a      	str	r2, [r3, #8]
      break;
 8007e0c:	e008      	b.n	8007e20 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3b01      	subs	r3, #1
 8007e12:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007e14:	4b1a      	ldr	r3, [pc, #104]	@ (8007e80 <SUBGHZSPI_Receive+0xa8>)
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d1ed      	bne.n	8007dfc <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007e20:	4b18      	ldr	r3, [pc, #96]	@ (8007e84 <SUBGHZSPI_Receive+0xac>)
 8007e22:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	22ff      	movs	r2, #255	@ 0xff
 8007e28:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007e2a:	4b14      	ldr	r3, [pc, #80]	@ (8007e7c <SUBGHZSPI_Receive+0xa4>)
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	00db      	lsls	r3, r3, #3
 8007e32:	1a9b      	subs	r3, r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	0cdb      	lsrs	r3, r3, #19
 8007e38:	2264      	movs	r2, #100	@ 0x64
 8007e3a:	fb02 f303 	mul.w	r3, r2, r3
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d105      	bne.n	8007e52 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	609a      	str	r2, [r3, #8]
      break;
 8007e50:	e008      	b.n	8007e64 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007e58:	4b09      	ldr	r3, [pc, #36]	@ (8007e80 <SUBGHZSPI_Receive+0xa8>)
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f003 0301 	and.w	r3, r3, #1
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d1ed      	bne.n	8007e40 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007e64:	4b06      	ldr	r3, [pc, #24]	@ (8007e80 <SUBGHZSPI_Receive+0xa8>)
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	701a      	strb	r2, [r3, #0]

  return status;
 8007e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	371c      	adds	r7, #28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	20000000 	.word	0x20000000
 8007e80:	58010000 	.word	0x58010000
 8007e84:	5801000c 	.word	0x5801000c

08007e88 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	791b      	ldrb	r3, [r3, #4]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d111      	bne.n	8007ebc <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007e98:	4b0c      	ldr	r3, [pc, #48]	@ (8007ecc <SUBGHZ_CheckDeviceReady+0x44>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	4413      	add	r3, r2
 8007ea2:	00db      	lsls	r3, r3, #3
 8007ea4:	0c1b      	lsrs	r3, r3, #16
 8007ea6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ea8:	f7ff fba6 	bl	80075f8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1f9      	bne.n	8007eac <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007eb8:	f7ff fb8e 	bl	80075d8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f807 	bl	8007ed0 <SUBGHZ_WaitOnBusy>
 8007ec2:	4603      	mov	r3, r0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	20000000 	.word	0x20000000

08007ed0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007edc:	4b12      	ldr	r3, [pc, #72]	@ (8007f28 <SUBGHZ_WaitOnBusy+0x58>)
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	4413      	add	r3, r2
 8007ee6:	00db      	lsls	r3, r3, #3
 8007ee8:	0d1b      	lsrs	r3, r3, #20
 8007eea:	2264      	movs	r2, #100	@ 0x64
 8007eec:	fb02 f303 	mul.w	r3, r2, r3
 8007ef0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007ef2:	f7ff fbaf 	bl	8007654 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007ef6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d105      	bne.n	8007f0a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2202      	movs	r2, #2
 8007f06:	609a      	str	r2, [r3, #8]
      break;
 8007f08:	e009      	b.n	8007f1e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007f10:	f7ff fb8e 	bl	8007630 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007f14:	4602      	mov	r2, r0
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d0e9      	beq.n	8007ef2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	20000000 	.word	0x20000000

08007f2c <LL_RCC_GetUSARTClockSource>:
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f38:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	401a      	ands	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	041b      	lsls	r3, r3, #16
 8007f44:	4313      	orrs	r3, r2
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr

08007f50 <LL_RCC_GetLPUARTClockSource>:
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4013      	ands	r3, r2
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bc80      	pop	{r7}
 8007f6c:	4770      	bx	lr

08007f6e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b082      	sub	sp, #8
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e042      	b.n	8008006 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d106      	bne.n	8007f98 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7fa fd36 	bl	8002a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2224      	movs	r2, #36	@ 0x24
 8007f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 0201 	bic.w	r2, r2, #1
 8007fae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 feab 	bl	8008d14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fc34 	bl	800882c <UART_SetConfig>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d101      	bne.n	8007fce <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e01b      	b.n	8008006 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685a      	ldr	r2, [r3, #4]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007fdc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007fec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f042 0201 	orr.w	r2, r2, #1
 8007ffc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 ff29 	bl	8008e56 <UART_CheckIdleState>
 8008004:	4603      	mov	r3, r0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08a      	sub	sp, #40	@ 0x28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008024:	2b20      	cmp	r3, #32
 8008026:	d137      	bne.n	8008098 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <HAL_UART_Receive_IT+0x24>
 800802e:	88fb      	ldrh	r3, [r7, #6]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d101      	bne.n	8008038 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e030      	b.n	800809a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a18      	ldr	r2, [pc, #96]	@ (80080a4 <HAL_UART_Receive_IT+0x94>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d01f      	beq.n	8008088 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d018      	beq.n	8008088 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	e853 3f00 	ldrex	r3, [r3]
 8008062:	613b      	str	r3, [r7, #16]
   return(result);
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800806a:	627b      	str	r3, [r7, #36]	@ 0x24
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	461a      	mov	r2, r3
 8008072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008074:	623b      	str	r3, [r7, #32]
 8008076:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008078:	69f9      	ldr	r1, [r7, #28]
 800807a:	6a3a      	ldr	r2, [r7, #32]
 800807c:	e841 2300 	strex	r3, r2, [r1]
 8008080:	61bb      	str	r3, [r7, #24]
   return(result);
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1e6      	bne.n	8008056 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008088:	88fb      	ldrh	r3, [r7, #6]
 800808a:	461a      	mov	r2, r3
 800808c:	68b9      	ldr	r1, [r7, #8]
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f000 fffe 	bl	8009090 <UART_Start_Receive_IT>
 8008094:	4603      	mov	r3, r0
 8008096:	e000      	b.n	800809a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008098:	2302      	movs	r3, #2
  }
}
 800809a:	4618      	mov	r0, r3
 800809c:	3728      	adds	r7, #40	@ 0x28
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	40008000 	.word	0x40008000

080080a8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08a      	sub	sp, #40	@ 0x28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	4613      	mov	r3, r2
 80080b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080bc:	2b20      	cmp	r3, #32
 80080be:	d167      	bne.n	8008190 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d002      	beq.n	80080cc <HAL_UART_Transmit_DMA+0x24>
 80080c6:	88fb      	ldrh	r3, [r7, #6]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e060      	b.n	8008192 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	88fa      	ldrh	r2, [r7, #6]
 80080da:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	88fa      	ldrh	r2, [r7, #6]
 80080e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2221      	movs	r2, #33	@ 0x21
 80080f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d028      	beq.n	8008150 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008102:	4a26      	ldr	r2, [pc, #152]	@ (800819c <HAL_UART_Transmit_DMA+0xf4>)
 8008104:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800810a:	4a25      	ldr	r2, [pc, #148]	@ (80081a0 <HAL_UART_Transmit_DMA+0xf8>)
 800810c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008112:	4a24      	ldr	r2, [pc, #144]	@ (80081a4 <HAL_UART_Transmit_DMA+0xfc>)
 8008114:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800811a:	2200      	movs	r2, #0
 800811c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008126:	4619      	mov	r1, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3328      	adds	r3, #40	@ 0x28
 800812e:	461a      	mov	r2, r3
 8008130:	88fb      	ldrh	r3, [r7, #6]
 8008132:	f7fc fc1b 	bl	800496c <HAL_DMA_Start_IT>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d009      	beq.n	8008150 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2210      	movs	r2, #16
 8008140:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2220      	movs	r2, #32
 8008148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e020      	b.n	8008192 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2240      	movs	r2, #64	@ 0x40
 8008156:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3308      	adds	r3, #8
 800815e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	e853 3f00 	ldrex	r3, [r3]
 8008166:	613b      	str	r3, [r7, #16]
   return(result);
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800816e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3308      	adds	r3, #8
 8008176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008178:	623a      	str	r2, [r7, #32]
 800817a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817c:	69f9      	ldr	r1, [r7, #28]
 800817e:	6a3a      	ldr	r2, [r7, #32]
 8008180:	e841 2300 	strex	r3, r2, [r1]
 8008184:	61bb      	str	r3, [r7, #24]
   return(result);
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e5      	bne.n	8008158 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	e000      	b.n	8008192 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008190:	2302      	movs	r3, #2
  }
}
 8008192:	4618      	mov	r0, r3
 8008194:	3728      	adds	r7, #40	@ 0x28
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	0800941b 	.word	0x0800941b
 80081a0:	080094b5 	.word	0x080094b5
 80081a4:	080094d1 	.word	0x080094d1

080081a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b0ba      	sub	sp, #232	@ 0xe8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80081ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80081d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80081d6:	4013      	ands	r3, r2
 80081d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80081dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d11b      	bne.n	800821c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081e8:	f003 0320 	and.w	r3, r3, #32
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d015      	beq.n	800821c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f4:	f003 0320 	and.w	r3, r3, #32
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d105      	bne.n	8008208 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d009      	beq.n	800821c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 82e3 	beq.w	80087d8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	4798      	blx	r3
      }
      return;
 800821a:	e2dd      	b.n	80087d8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800821c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 8123 	beq.w	800846c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008226:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800822a:	4b8d      	ldr	r3, [pc, #564]	@ (8008460 <HAL_UART_IRQHandler+0x2b8>)
 800822c:	4013      	ands	r3, r2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d106      	bne.n	8008240 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008232:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008236:	4b8b      	ldr	r3, [pc, #556]	@ (8008464 <HAL_UART_IRQHandler+0x2bc>)
 8008238:	4013      	ands	r3, r2
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 8116 	beq.w	800846c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	d011      	beq.n	8008270 <HAL_UART_IRQHandler+0xc8>
 800824c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00b      	beq.n	8008270 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2201      	movs	r2, #1
 800825e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008266:	f043 0201 	orr.w	r2, r3, #1
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008274:	f003 0302 	and.w	r3, r3, #2
 8008278:	2b00      	cmp	r3, #0
 800827a:	d011      	beq.n	80082a0 <HAL_UART_IRQHandler+0xf8>
 800827c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2202      	movs	r2, #2
 800828e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008296:	f043 0204 	orr.w	r2, r3, #4
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d011      	beq.n	80082d0 <HAL_UART_IRQHandler+0x128>
 80082ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2204      	movs	r2, #4
 80082be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082c6:	f043 0202 	orr.w	r2, r3, #2
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082d4:	f003 0308 	and.w	r3, r3, #8
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d017      	beq.n	800830c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082e0:	f003 0320 	and.w	r3, r3, #32
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d105      	bne.n	80082f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80082e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80082ec:	4b5c      	ldr	r3, [pc, #368]	@ (8008460 <HAL_UART_IRQHandler+0x2b8>)
 80082ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2208      	movs	r2, #8
 80082fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008302:	f043 0208 	orr.w	r2, r3, #8
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800830c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008310:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008314:	2b00      	cmp	r3, #0
 8008316:	d012      	beq.n	800833e <HAL_UART_IRQHandler+0x196>
 8008318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800831c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00c      	beq.n	800833e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800832c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008334:	f043 0220 	orr.w	r2, r3, #32
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 8249 	beq.w	80087dc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800834a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800834e:	f003 0320 	and.w	r3, r3, #32
 8008352:	2b00      	cmp	r3, #0
 8008354:	d013      	beq.n	800837e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b00      	cmp	r3, #0
 8008360:	d105      	bne.n	800836e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d007      	beq.n	800837e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008372:	2b00      	cmp	r3, #0
 8008374:	d003      	beq.n	800837e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008384:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008392:	2b40      	cmp	r3, #64	@ 0x40
 8008394:	d005      	beq.n	80083a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800839a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d054      	beq.n	800844c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 ffd4 	bl	8009350 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b2:	2b40      	cmp	r3, #64	@ 0x40
 80083b4:	d146      	bne.n	8008444 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3308      	adds	r3, #8
 80083bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80083cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3308      	adds	r3, #8
 80083de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80083e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80083e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80083ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80083f2:	e841 2300 	strex	r3, r2, [r1]
 80083f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80083fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1d9      	bne.n	80083b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008408:	2b00      	cmp	r3, #0
 800840a:	d017      	beq.n	800843c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008412:	4a15      	ldr	r2, [pc, #84]	@ (8008468 <HAL_UART_IRQHandler+0x2c0>)
 8008414:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800841c:	4618      	mov	r0, r3
 800841e:	f7fc fb81 	bl	8004b24 <HAL_DMA_Abort_IT>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d019      	beq.n	800845c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800842e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008436:	4610      	mov	r0, r2
 8008438:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800843a:	e00f      	b.n	800845c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f9e0 	bl	8008802 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008442:	e00b      	b.n	800845c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f9dc 	bl	8008802 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800844a:	e007      	b.n	800845c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f9d8 	bl	8008802 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800845a:	e1bf      	b.n	80087dc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800845c:	bf00      	nop
    return;
 800845e:	e1bd      	b.n	80087dc <HAL_UART_IRQHandler+0x634>
 8008460:	10000001 	.word	0x10000001
 8008464:	04000120 	.word	0x04000120
 8008468:	08009551 	.word	0x08009551

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008470:	2b01      	cmp	r3, #1
 8008472:	f040 8153 	bne.w	800871c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800847a:	f003 0310 	and.w	r3, r3, #16
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 814c 	beq.w	800871c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008488:	f003 0310 	and.w	r3, r3, #16
 800848c:	2b00      	cmp	r3, #0
 800848e:	f000 8145 	beq.w	800871c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2210      	movs	r2, #16
 8008498:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a4:	2b40      	cmp	r3, #64	@ 0x40
 80084a6:	f040 80bb 	bne.w	8008620 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 818f 	beq.w	80087e0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084cc:	429a      	cmp	r2, r3
 80084ce:	f080 8187 	bcs.w	80087e0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0320 	and.w	r3, r3, #32
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f040 8087 	bne.w	80085fe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008504:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800850c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	461a      	mov	r2, r3
 8008516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800851a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800851e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008526:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1da      	bne.n	80084f0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	3308      	adds	r3, #8
 8008540:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008544:	e853 3f00 	ldrex	r3, [r3]
 8008548:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800854a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800854c:	f023 0301 	bic.w	r3, r3, #1
 8008550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3308      	adds	r3, #8
 800855a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800855e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008562:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008564:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008566:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e1      	bne.n	800853a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3308      	adds	r3, #8
 800857c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008580:	e853 3f00 	ldrex	r3, [r3]
 8008584:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008586:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800858c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3308      	adds	r3, #8
 8008596:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800859a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800859c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80085a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085a2:	e841 2300 	strex	r3, r2, [r1]
 80085a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80085a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1e3      	bne.n	8008576 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2220      	movs	r2, #32
 80085b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085c4:	e853 3f00 	ldrex	r3, [r3]
 80085c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80085ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085cc:	f023 0310 	bic.w	r3, r3, #16
 80085d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	461a      	mov	r2, r3
 80085da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085e6:	e841 2300 	strex	r3, r2, [r1]
 80085ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1e4      	bne.n	80085bc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fc fa35 	bl	8004a68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2202      	movs	r2, #2
 8008602:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008610:	b29b      	uxth	r3, r3
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	b29b      	uxth	r3, r3
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f8fb 	bl	8008814 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800861e:	e0df      	b.n	80087e0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800862c:	b29b      	uxth	r3, r3
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800863a:	b29b      	uxth	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 80d1 	beq.w	80087e4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008642:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008646:	2b00      	cmp	r3, #0
 8008648:	f000 80cc 	beq.w	80087e4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008654:	e853 3f00 	ldrex	r3, [r3]
 8008658:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800865a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800865c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008660:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	461a      	mov	r2, r3
 800866a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800866e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008670:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008672:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008676:	e841 2300 	strex	r3, r2, [r1]
 800867a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800867c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1e4      	bne.n	800864c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3308      	adds	r3, #8
 8008688:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868c:	e853 3f00 	ldrex	r3, [r3]
 8008690:	623b      	str	r3, [r7, #32]
   return(result);
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008698:	f023 0301 	bic.w	r3, r3, #1
 800869c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3308      	adds	r3, #8
 80086a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80086aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80086ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e1      	bne.n	8008682 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2220      	movs	r2, #32
 80086c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	e853 3f00 	ldrex	r3, [r3]
 80086de:	60fb      	str	r3, [r7, #12]
   return(result);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f023 0310 	bic.w	r3, r3, #16
 80086e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80086f4:	61fb      	str	r3, [r7, #28]
 80086f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f8:	69b9      	ldr	r1, [r7, #24]
 80086fa:	69fa      	ldr	r2, [r7, #28]
 80086fc:	e841 2300 	strex	r3, r2, [r1]
 8008700:	617b      	str	r3, [r7, #20]
   return(result);
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1e4      	bne.n	80086d2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800870e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f87d 	bl	8008814 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800871a:	e063      	b.n	80087e4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800871c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008720:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00e      	beq.n	8008746 <HAL_UART_IRQHandler+0x59e>
 8008728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800872c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d008      	beq.n	8008746 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800873c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f001 fccd 	bl	800a0de <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008744:	e051      	b.n	80087ea <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800874a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800874e:	2b00      	cmp	r3, #0
 8008750:	d014      	beq.n	800877c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800875a:	2b00      	cmp	r3, #0
 800875c:	d105      	bne.n	800876a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800875e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d008      	beq.n	800877c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800876e:	2b00      	cmp	r3, #0
 8008770:	d03a      	beq.n	80087e8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	4798      	blx	r3
    }
    return;
 800877a:	e035      	b.n	80087e8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800877c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008784:	2b00      	cmp	r3, #0
 8008786:	d009      	beq.n	800879c <HAL_UART_IRQHandler+0x5f4>
 8008788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800878c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008790:	2b00      	cmp	r3, #0
 8008792:	d003      	beq.n	800879c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fef1 	bl	800957c <UART_EndTransmit_IT>
    return;
 800879a:	e026      	b.n	80087ea <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800879c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d009      	beq.n	80087bc <HAL_UART_IRQHandler+0x614>
 80087a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d003      	beq.n	80087bc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 fca4 	bl	800a102 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087ba:	e016      	b.n	80087ea <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80087bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d010      	beq.n	80087ea <HAL_UART_IRQHandler+0x642>
 80087c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	da0c      	bge.n	80087ea <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f001 fc8d 	bl	800a0f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087d6:	e008      	b.n	80087ea <HAL_UART_IRQHandler+0x642>
      return;
 80087d8:	bf00      	nop
 80087da:	e006      	b.n	80087ea <HAL_UART_IRQHandler+0x642>
    return;
 80087dc:	bf00      	nop
 80087de:	e004      	b.n	80087ea <HAL_UART_IRQHandler+0x642>
      return;
 80087e0:	bf00      	nop
 80087e2:	e002      	b.n	80087ea <HAL_UART_IRQHandler+0x642>
      return;
 80087e4:	bf00      	nop
 80087e6:	e000      	b.n	80087ea <HAL_UART_IRQHandler+0x642>
    return;
 80087e8:	bf00      	nop
  }
}
 80087ea:	37e8      	adds	r7, #232	@ 0xe8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bc80      	pop	{r7}
 8008800:	4770      	bx	lr

08008802 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800880a:	bf00      	nop
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	bc80      	pop	{r7}
 8008812:	4770      	bx	lr

08008814 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	bc80      	pop	{r7}
 8008828:	4770      	bx	lr
	...

0800882c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800882c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008830:	b08c      	sub	sp, #48	@ 0x30
 8008832:	af00      	add	r7, sp, #0
 8008834:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	689a      	ldr	r2, [r3, #8]
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	431a      	orrs	r2, r3
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	431a      	orrs	r2, r3
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	4313      	orrs	r3, r2
 8008852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	4b94      	ldr	r3, [pc, #592]	@ (8008aac <UART_SetConfig+0x280>)
 800885c:	4013      	ands	r3, r2
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	6812      	ldr	r2, [r2, #0]
 8008862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008864:	430b      	orrs	r3, r1
 8008866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	68da      	ldr	r2, [r3, #12]
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a89      	ldr	r2, [pc, #548]	@ (8008ab0 <UART_SetConfig+0x284>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d004      	beq.n	8008898 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008894:	4313      	orrs	r3, r2
 8008896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80088a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	6812      	ldr	r2, [r2, #0]
 80088aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088ac:	430b      	orrs	r3, r1
 80088ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b6:	f023 010f 	bic.w	r1, r3, #15
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a7a      	ldr	r2, [pc, #488]	@ (8008ab4 <UART_SetConfig+0x288>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d127      	bne.n	8008920 <UART_SetConfig+0xf4>
 80088d0:	2003      	movs	r0, #3
 80088d2:	f7ff fb2b 	bl	8007f2c <LL_RCC_GetUSARTClockSource>
 80088d6:	4603      	mov	r3, r0
 80088d8:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d81b      	bhi.n	8008918 <UART_SetConfig+0xec>
 80088e0:	a201      	add	r2, pc, #4	@ (adr r2, 80088e8 <UART_SetConfig+0xbc>)
 80088e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e6:	bf00      	nop
 80088e8:	080088f9 	.word	0x080088f9
 80088ec:	08008909 	.word	0x08008909
 80088f0:	08008901 	.word	0x08008901
 80088f4:	08008911 	.word	0x08008911
 80088f8:	2301      	movs	r3, #1
 80088fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088fe:	e080      	b.n	8008a02 <UART_SetConfig+0x1d6>
 8008900:	2302      	movs	r3, #2
 8008902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008906:	e07c      	b.n	8008a02 <UART_SetConfig+0x1d6>
 8008908:	2304      	movs	r3, #4
 800890a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800890e:	e078      	b.n	8008a02 <UART_SetConfig+0x1d6>
 8008910:	2308      	movs	r3, #8
 8008912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008916:	e074      	b.n	8008a02 <UART_SetConfig+0x1d6>
 8008918:	2310      	movs	r3, #16
 800891a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800891e:	e070      	b.n	8008a02 <UART_SetConfig+0x1d6>
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a64      	ldr	r2, [pc, #400]	@ (8008ab8 <UART_SetConfig+0x28c>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d138      	bne.n	800899c <UART_SetConfig+0x170>
 800892a:	200c      	movs	r0, #12
 800892c:	f7ff fafe 	bl	8007f2c <LL_RCC_GetUSARTClockSource>
 8008930:	4603      	mov	r3, r0
 8008932:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8008936:	2b0c      	cmp	r3, #12
 8008938:	d82c      	bhi.n	8008994 <UART_SetConfig+0x168>
 800893a:	a201      	add	r2, pc, #4	@ (adr r2, 8008940 <UART_SetConfig+0x114>)
 800893c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008940:	08008975 	.word	0x08008975
 8008944:	08008995 	.word	0x08008995
 8008948:	08008995 	.word	0x08008995
 800894c:	08008995 	.word	0x08008995
 8008950:	08008985 	.word	0x08008985
 8008954:	08008995 	.word	0x08008995
 8008958:	08008995 	.word	0x08008995
 800895c:	08008995 	.word	0x08008995
 8008960:	0800897d 	.word	0x0800897d
 8008964:	08008995 	.word	0x08008995
 8008968:	08008995 	.word	0x08008995
 800896c:	08008995 	.word	0x08008995
 8008970:	0800898d 	.word	0x0800898d
 8008974:	2300      	movs	r3, #0
 8008976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800897a:	e042      	b.n	8008a02 <UART_SetConfig+0x1d6>
 800897c:	2302      	movs	r3, #2
 800897e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008982:	e03e      	b.n	8008a02 <UART_SetConfig+0x1d6>
 8008984:	2304      	movs	r3, #4
 8008986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800898a:	e03a      	b.n	8008a02 <UART_SetConfig+0x1d6>
 800898c:	2308      	movs	r3, #8
 800898e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008992:	e036      	b.n	8008a02 <UART_SetConfig+0x1d6>
 8008994:	2310      	movs	r3, #16
 8008996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800899a:	e032      	b.n	8008a02 <UART_SetConfig+0x1d6>
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a43      	ldr	r2, [pc, #268]	@ (8008ab0 <UART_SetConfig+0x284>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d12a      	bne.n	80089fc <UART_SetConfig+0x1d0>
 80089a6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80089aa:	f7ff fad1 	bl	8007f50 <LL_RCC_GetLPUARTClockSource>
 80089ae:	4603      	mov	r3, r0
 80089b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089b4:	d01a      	beq.n	80089ec <UART_SetConfig+0x1c0>
 80089b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089ba:	d81b      	bhi.n	80089f4 <UART_SetConfig+0x1c8>
 80089bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089c0:	d00c      	beq.n	80089dc <UART_SetConfig+0x1b0>
 80089c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089c6:	d815      	bhi.n	80089f4 <UART_SetConfig+0x1c8>
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <UART_SetConfig+0x1a8>
 80089cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089d0:	d008      	beq.n	80089e4 <UART_SetConfig+0x1b8>
 80089d2:	e00f      	b.n	80089f4 <UART_SetConfig+0x1c8>
 80089d4:	2300      	movs	r3, #0
 80089d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089da:	e012      	b.n	8008a02 <UART_SetConfig+0x1d6>
 80089dc:	2302      	movs	r3, #2
 80089de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089e2:	e00e      	b.n	8008a02 <UART_SetConfig+0x1d6>
 80089e4:	2304      	movs	r3, #4
 80089e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089ea:	e00a      	b.n	8008a02 <UART_SetConfig+0x1d6>
 80089ec:	2308      	movs	r3, #8
 80089ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089f2:	e006      	b.n	8008a02 <UART_SetConfig+0x1d6>
 80089f4:	2310      	movs	r3, #16
 80089f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089fa:	e002      	b.n	8008a02 <UART_SetConfig+0x1d6>
 80089fc:	2310      	movs	r3, #16
 80089fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a2a      	ldr	r2, [pc, #168]	@ (8008ab0 <UART_SetConfig+0x284>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	f040 80a4 	bne.w	8008b56 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a12:	2b08      	cmp	r3, #8
 8008a14:	d823      	bhi.n	8008a5e <UART_SetConfig+0x232>
 8008a16:	a201      	add	r2, pc, #4	@ (adr r2, 8008a1c <UART_SetConfig+0x1f0>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008a41 	.word	0x08008a41
 8008a20:	08008a5f 	.word	0x08008a5f
 8008a24:	08008a49 	.word	0x08008a49
 8008a28:	08008a5f 	.word	0x08008a5f
 8008a2c:	08008a4f 	.word	0x08008a4f
 8008a30:	08008a5f 	.word	0x08008a5f
 8008a34:	08008a5f 	.word	0x08008a5f
 8008a38:	08008a5f 	.word	0x08008a5f
 8008a3c:	08008a57 	.word	0x08008a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a40:	f7fd ff46 	bl	80068d0 <HAL_RCC_GetPCLK1Freq>
 8008a44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a46:	e010      	b.n	8008a6a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a48:	4b1c      	ldr	r3, [pc, #112]	@ (8008abc <UART_SetConfig+0x290>)
 8008a4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a4c:	e00d      	b.n	8008a6a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a4e:	f7fd fe8b 	bl	8006768 <HAL_RCC_GetSysClockFreq>
 8008a52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a54:	e009      	b.n	8008a6a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a5c:	e005      	b.n	8008a6a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008a68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f000 8137 	beq.w	8008ce0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a76:	4a12      	ldr	r2, [pc, #72]	@ (8008ac0 <UART_SetConfig+0x294>)
 8008a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a80:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	4413      	add	r3, r2
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d305      	bcc.n	8008aa2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d910      	bls.n	8008ac4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008aa8:	e11a      	b.n	8008ce0 <UART_SetConfig+0x4b4>
 8008aaa:	bf00      	nop
 8008aac:	cfff69f3 	.word	0xcfff69f3
 8008ab0:	40008000 	.word	0x40008000
 8008ab4:	40013800 	.word	0x40013800
 8008ab8:	40004400 	.word	0x40004400
 8008abc:	00f42400 	.word	0x00f42400
 8008ac0:	0801e70c 	.word	0x0801e70c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	60bb      	str	r3, [r7, #8]
 8008aca:	60fa      	str	r2, [r7, #12]
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad0:	4a8e      	ldr	r2, [pc, #568]	@ (8008d0c <UART_SetConfig+0x4e0>)
 8008ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	2200      	movs	r2, #0
 8008ada:	603b      	str	r3, [r7, #0]
 8008adc:	607a      	str	r2, [r7, #4]
 8008ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ae6:	f7f8 f96b 	bl	8000dc0 <__aeabi_uldivmod>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4610      	mov	r0, r2
 8008af0:	4619      	mov	r1, r3
 8008af2:	f04f 0200 	mov.w	r2, #0
 8008af6:	f04f 0300 	mov.w	r3, #0
 8008afa:	020b      	lsls	r3, r1, #8
 8008afc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b00:	0202      	lsls	r2, r0, #8
 8008b02:	6979      	ldr	r1, [r7, #20]
 8008b04:	6849      	ldr	r1, [r1, #4]
 8008b06:	0849      	lsrs	r1, r1, #1
 8008b08:	2000      	movs	r0, #0
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	4605      	mov	r5, r0
 8008b0e:	eb12 0804 	adds.w	r8, r2, r4
 8008b12:	eb43 0905 	adc.w	r9, r3, r5
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	469a      	mov	sl, r3
 8008b1e:	4693      	mov	fp, r2
 8008b20:	4652      	mov	r2, sl
 8008b22:	465b      	mov	r3, fp
 8008b24:	4640      	mov	r0, r8
 8008b26:	4649      	mov	r1, r9
 8008b28:	f7f8 f94a 	bl	8000dc0 <__aeabi_uldivmod>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4613      	mov	r3, r2
 8008b32:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b3a:	d308      	bcc.n	8008b4e <UART_SetConfig+0x322>
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b42:	d204      	bcs.n	8008b4e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6a3a      	ldr	r2, [r7, #32]
 8008b4a:	60da      	str	r2, [r3, #12]
 8008b4c:	e0c8      	b.n	8008ce0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b54:	e0c4      	b.n	8008ce0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b5e:	d167      	bne.n	8008c30 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8008b60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b64:	2b08      	cmp	r3, #8
 8008b66:	d828      	bhi.n	8008bba <UART_SetConfig+0x38e>
 8008b68:	a201      	add	r2, pc, #4	@ (adr r2, 8008b70 <UART_SetConfig+0x344>)
 8008b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6e:	bf00      	nop
 8008b70:	08008b95 	.word	0x08008b95
 8008b74:	08008b9d 	.word	0x08008b9d
 8008b78:	08008ba5 	.word	0x08008ba5
 8008b7c:	08008bbb 	.word	0x08008bbb
 8008b80:	08008bab 	.word	0x08008bab
 8008b84:	08008bbb 	.word	0x08008bbb
 8008b88:	08008bbb 	.word	0x08008bbb
 8008b8c:	08008bbb 	.word	0x08008bbb
 8008b90:	08008bb3 	.word	0x08008bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b94:	f7fd fe9c 	bl	80068d0 <HAL_RCC_GetPCLK1Freq>
 8008b98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b9a:	e014      	b.n	8008bc6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b9c:	f7fd feaa 	bl	80068f4 <HAL_RCC_GetPCLK2Freq>
 8008ba0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ba2:	e010      	b.n	8008bc6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ba4:	4b5a      	ldr	r3, [pc, #360]	@ (8008d10 <UART_SetConfig+0x4e4>)
 8008ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ba8:	e00d      	b.n	8008bc6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008baa:	f7fd fddd 	bl	8006768 <HAL_RCC_GetSysClockFreq>
 8008bae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bb0:	e009      	b.n	8008bc6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bb8:	e005      	b.n	8008bc6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008bc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 8089 	beq.w	8008ce0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd2:	4a4e      	ldr	r2, [pc, #312]	@ (8008d0c <UART_SetConfig+0x4e0>)
 8008bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008be0:	005a      	lsls	r2, r3, #1
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	085b      	lsrs	r3, r3, #1
 8008be8:	441a      	add	r2, r3
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	2b0f      	cmp	r3, #15
 8008bf8:	d916      	bls.n	8008c28 <UART_SetConfig+0x3fc>
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c00:	d212      	bcs.n	8008c28 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	f023 030f 	bic.w	r3, r3, #15
 8008c0a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	085b      	lsrs	r3, r3, #1
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	f003 0307 	and.w	r3, r3, #7
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	8bfb      	ldrh	r3, [r7, #30]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	8bfa      	ldrh	r2, [r7, #30]
 8008c24:	60da      	str	r2, [r3, #12]
 8008c26:	e05b      	b.n	8008ce0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008c2e:	e057      	b.n	8008ce0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c34:	2b08      	cmp	r3, #8
 8008c36:	d828      	bhi.n	8008c8a <UART_SetConfig+0x45e>
 8008c38:	a201      	add	r2, pc, #4	@ (adr r2, 8008c40 <UART_SetConfig+0x414>)
 8008c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3e:	bf00      	nop
 8008c40:	08008c65 	.word	0x08008c65
 8008c44:	08008c6d 	.word	0x08008c6d
 8008c48:	08008c75 	.word	0x08008c75
 8008c4c:	08008c8b 	.word	0x08008c8b
 8008c50:	08008c7b 	.word	0x08008c7b
 8008c54:	08008c8b 	.word	0x08008c8b
 8008c58:	08008c8b 	.word	0x08008c8b
 8008c5c:	08008c8b 	.word	0x08008c8b
 8008c60:	08008c83 	.word	0x08008c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c64:	f7fd fe34 	bl	80068d0 <HAL_RCC_GetPCLK1Freq>
 8008c68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c6a:	e014      	b.n	8008c96 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c6c:	f7fd fe42 	bl	80068f4 <HAL_RCC_GetPCLK2Freq>
 8008c70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c72:	e010      	b.n	8008c96 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c74:	4b26      	ldr	r3, [pc, #152]	@ (8008d10 <UART_SetConfig+0x4e4>)
 8008c76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c78:	e00d      	b.n	8008c96 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c7a:	f7fd fd75 	bl	8006768 <HAL_RCC_GetSysClockFreq>
 8008c7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c80:	e009      	b.n	8008c96 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c88:	e005      	b.n	8008c96 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c94:	bf00      	nop
    }

    if (pclk != 0U)
 8008c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d021      	beq.n	8008ce0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8008d0c <UART_SetConfig+0x4e0>)
 8008ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008caa:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	085b      	lsrs	r3, r3, #1
 8008cb4:	441a      	add	r2, r3
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	2b0f      	cmp	r3, #15
 8008cc4:	d909      	bls.n	8008cda <UART_SetConfig+0x4ae>
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ccc:	d205      	bcs.n	8008cda <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60da      	str	r2, [r3, #12]
 8008cd8:	e002      	b.n	8008ce0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008cfc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3730      	adds	r7, #48	@ 0x30
 8008d04:	46bd      	mov	sp, r7
 8008d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d0a:	bf00      	nop
 8008d0c:	0801e70c 	.word	0x0801e70c
 8008d10:	00f42400 	.word	0x00f42400

08008d14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d20:	f003 0308 	and.w	r3, r3, #8
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00a      	beq.n	8008d3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	430a      	orrs	r2, r1
 8008d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	430a      	orrs	r2, r1
 8008d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d64:	f003 0302 	and.w	r3, r3, #2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00a      	beq.n	8008d82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d86:	f003 0304 	and.w	r3, r3, #4
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00a      	beq.n	8008da4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	430a      	orrs	r2, r1
 8008da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da8:	f003 0310 	and.w	r3, r3, #16
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00a      	beq.n	8008dc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dca:	f003 0320 	and.w	r3, r3, #32
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00a      	beq.n	8008de8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	430a      	orrs	r2, r1
 8008de6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d01a      	beq.n	8008e2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	430a      	orrs	r2, r1
 8008e08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e12:	d10a      	bne.n	8008e2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00a      	beq.n	8008e4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	430a      	orrs	r2, r1
 8008e4a:	605a      	str	r2, [r3, #4]
  }
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bc80      	pop	{r7}
 8008e54:	4770      	bx	lr

08008e56 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b086      	sub	sp, #24
 8008e5a:	af02      	add	r7, sp, #8
 8008e5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e66:	f7f9 f985 	bl	8002174 <HAL_GetTick>
 8008e6a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0308 	and.w	r3, r3, #8
 8008e76:	2b08      	cmp	r3, #8
 8008e78:	d10e      	bne.n	8008e98 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f832 	bl	8008ef2 <UART_WaitOnFlagUntilTimeout>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e028      	b.n	8008eea <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0304 	and.w	r3, r3, #4
 8008ea2:	2b04      	cmp	r3, #4
 8008ea4:	d10e      	bne.n	8008ec4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ea6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f81c 	bl	8008ef2 <UART_WaitOnFlagUntilTimeout>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e012      	b.n	8008eea <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2220      	movs	r2, #32
 8008ed0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b09c      	sub	sp, #112	@ 0x70
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	60f8      	str	r0, [r7, #12]
 8008efa:	60b9      	str	r1, [r7, #8]
 8008efc:	603b      	str	r3, [r7, #0]
 8008efe:	4613      	mov	r3, r2
 8008f00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f02:	e0af      	b.n	8009064 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0a:	f000 80ab 	beq.w	8009064 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f0e:	f7f9 f931 	bl	8002174 <HAL_GetTick>
 8008f12:	4602      	mov	r2, r0
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d302      	bcc.n	8008f24 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d140      	bne.n	8008fa6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008f32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f34:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008f38:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f44:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008f48:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e6      	bne.n	8008f24 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f68:	f023 0301 	bic.w	r3, r3, #1
 8008f6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3308      	adds	r3, #8
 8008f74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008f76:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008f78:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e5      	bne.n	8008f56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	e06f      	b.n	8009086 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d057      	beq.n	8009064 <UART_WaitOnFlagUntilTimeout+0x172>
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2b80      	cmp	r3, #128	@ 0x80
 8008fb8:	d054      	beq.n	8009064 <UART_WaitOnFlagUntilTimeout+0x172>
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2b40      	cmp	r3, #64	@ 0x40
 8008fbe:	d051      	beq.n	8009064 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fce:	d149      	bne.n	8009064 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008fd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe2:	e853 3f00 	ldrex	r3, [r3]
 8008fe6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fea:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ffa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ffe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009000:	e841 2300 	strex	r3, r2, [r1]
 8009004:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e6      	bne.n	8008fda <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3308      	adds	r3, #8
 8009012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	e853 3f00 	ldrex	r3, [r3]
 800901a:	613b      	str	r3, [r7, #16]
   return(result);
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	f023 0301 	bic.w	r3, r3, #1
 8009022:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3308      	adds	r3, #8
 800902a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800902c:	623a      	str	r2, [r7, #32]
 800902e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009030:	69f9      	ldr	r1, [r7, #28]
 8009032:	6a3a      	ldr	r2, [r7, #32]
 8009034:	e841 2300 	strex	r3, r2, [r1]
 8009038:	61bb      	str	r3, [r7, #24]
   return(result);
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1e5      	bne.n	800900c <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2220      	movs	r2, #32
 8009044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2220      	movs	r2, #32
 800904c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2220      	movs	r2, #32
 8009054:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e010      	b.n	8009086 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	69da      	ldr	r2, [r3, #28]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	4013      	ands	r3, r2
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	429a      	cmp	r2, r3
 8009072:	bf0c      	ite	eq
 8009074:	2301      	moveq	r3, #1
 8009076:	2300      	movne	r3, #0
 8009078:	b2db      	uxtb	r3, r3
 800907a:	461a      	mov	r2, r3
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	429a      	cmp	r2, r3
 8009080:	f43f af40 	beq.w	8008f04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3770      	adds	r7, #112	@ 0x70
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
	...

08009090 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009090:	b480      	push	{r7}
 8009092:	b0a3      	sub	sp, #140	@ 0x8c
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	4613      	mov	r3, r2
 800909c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	88fa      	ldrh	r2, [r7, #6]
 80090a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	88fa      	ldrh	r2, [r7, #6]
 80090b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090c2:	d10e      	bne.n	80090e2 <UART_Start_Receive_IT+0x52>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d105      	bne.n	80090d8 <UART_Start_Receive_IT+0x48>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80090d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80090d6:	e02d      	b.n	8009134 <UART_Start_Receive_IT+0xa4>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	22ff      	movs	r2, #255	@ 0xff
 80090dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80090e0:	e028      	b.n	8009134 <UART_Start_Receive_IT+0xa4>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10d      	bne.n	8009106 <UART_Start_Receive_IT+0x76>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d104      	bne.n	80090fc <UART_Start_Receive_IT+0x6c>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	22ff      	movs	r2, #255	@ 0xff
 80090f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80090fa:	e01b      	b.n	8009134 <UART_Start_Receive_IT+0xa4>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	227f      	movs	r2, #127	@ 0x7f
 8009100:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009104:	e016      	b.n	8009134 <UART_Start_Receive_IT+0xa4>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800910e:	d10d      	bne.n	800912c <UART_Start_Receive_IT+0x9c>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d104      	bne.n	8009122 <UART_Start_Receive_IT+0x92>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	227f      	movs	r2, #127	@ 0x7f
 800911c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009120:	e008      	b.n	8009134 <UART_Start_Receive_IT+0xa4>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	223f      	movs	r2, #63	@ 0x3f
 8009126:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800912a:	e003      	b.n	8009134 <UART_Start_Receive_IT+0xa4>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2222      	movs	r2, #34	@ 0x22
 8009140:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3308      	adds	r3, #8
 800914a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800914e:	e853 3f00 	ldrex	r3, [r3]
 8009152:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009154:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009156:	f043 0301 	orr.w	r3, r3, #1
 800915a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3308      	adds	r3, #8
 8009164:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009168:	673a      	str	r2, [r7, #112]	@ 0x70
 800916a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800916e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009170:	e841 2300 	strex	r3, r2, [r1]
 8009174:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009176:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1e3      	bne.n	8009144 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009184:	d14f      	bne.n	8009226 <UART_Start_Receive_IT+0x196>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800918c:	88fa      	ldrh	r2, [r7, #6]
 800918e:	429a      	cmp	r2, r3
 8009190:	d349      	bcc.n	8009226 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800919a:	d107      	bne.n	80091ac <UART_Start_Receive_IT+0x11c>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d103      	bne.n	80091ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4a46      	ldr	r2, [pc, #280]	@ (80092c0 <UART_Start_Receive_IT+0x230>)
 80091a8:	675a      	str	r2, [r3, #116]	@ 0x74
 80091aa:	e002      	b.n	80091b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	4a45      	ldr	r2, [pc, #276]	@ (80092c4 <UART_Start_Receive_IT+0x234>)
 80091b0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d01a      	beq.n	80091f0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091c2:	e853 3f00 	ldrex	r3, [r3]
 80091c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80091c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	461a      	mov	r2, r3
 80091d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80091dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091de:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80091e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80091e4:	e841 2300 	strex	r3, r2, [r1]
 80091e8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80091ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1e4      	bne.n	80091ba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3308      	adds	r3, #8
 80091f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091fa:	e853 3f00 	ldrex	r3, [r3]
 80091fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009206:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3308      	adds	r3, #8
 800920e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009210:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009212:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009214:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009216:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009218:	e841 2300 	strex	r3, r2, [r1]
 800921c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800921e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e5      	bne.n	80091f0 <UART_Start_Receive_IT+0x160>
 8009224:	e046      	b.n	80092b4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800922e:	d107      	bne.n	8009240 <UART_Start_Receive_IT+0x1b0>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d103      	bne.n	8009240 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4a23      	ldr	r2, [pc, #140]	@ (80092c8 <UART_Start_Receive_IT+0x238>)
 800923c:	675a      	str	r2, [r3, #116]	@ 0x74
 800923e:	e002      	b.n	8009246 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4a22      	ldr	r2, [pc, #136]	@ (80092cc <UART_Start_Receive_IT+0x23c>)
 8009244:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d019      	beq.n	8009282 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009256:	e853 3f00 	ldrex	r3, [r3]
 800925a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800925c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009262:	677b      	str	r3, [r7, #116]	@ 0x74
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	461a      	mov	r2, r3
 800926a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800926c:	637b      	str	r3, [r7, #52]	@ 0x34
 800926e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009270:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009272:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009274:	e841 2300 	strex	r3, r2, [r1]
 8009278:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800927a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e6      	bne.n	800924e <UART_Start_Receive_IT+0x1be>
 8009280:	e018      	b.n	80092b4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	e853 3f00 	ldrex	r3, [r3]
 800928e:	613b      	str	r3, [r7, #16]
   return(result);
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	f043 0320 	orr.w	r3, r3, #32
 8009296:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	461a      	mov	r2, r3
 800929e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092a0:	623b      	str	r3, [r7, #32]
 80092a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a4:	69f9      	ldr	r1, [r7, #28]
 80092a6:	6a3a      	ldr	r2, [r7, #32]
 80092a8:	e841 2300 	strex	r3, r2, [r1]
 80092ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1e6      	bne.n	8009282 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	378c      	adds	r7, #140	@ 0x8c
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bc80      	pop	{r7}
 80092be:	4770      	bx	lr
 80092c0:	08009ca5 	.word	0x08009ca5
 80092c4:	08009945 	.word	0x08009945
 80092c8:	0800978d 	.word	0x0800978d
 80092cc:	080095d5 	.word	0x080095d5

080092d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b08f      	sub	sp, #60	@ 0x3c
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092de:	6a3b      	ldr	r3, [r7, #32]
 80092e0:	e853 3f00 	ldrex	r3, [r3]
 80092e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80092ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	461a      	mov	r2, r3
 80092f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092f8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092fe:	e841 2300 	strex	r3, r2, [r1]
 8009302:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1e6      	bne.n	80092d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3308      	adds	r3, #8
 8009310:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	e853 3f00 	ldrex	r3, [r3]
 8009318:	60bb      	str	r3, [r7, #8]
   return(result);
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009320:	633b      	str	r3, [r7, #48]	@ 0x30
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3308      	adds	r3, #8
 8009328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800932a:	61ba      	str	r2, [r7, #24]
 800932c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932e:	6979      	ldr	r1, [r7, #20]
 8009330:	69ba      	ldr	r2, [r7, #24]
 8009332:	e841 2300 	strex	r3, r2, [r1]
 8009336:	613b      	str	r3, [r7, #16]
   return(result);
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1e5      	bne.n	800930a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2220      	movs	r2, #32
 8009342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009346:	bf00      	nop
 8009348:	373c      	adds	r7, #60	@ 0x3c
 800934a:	46bd      	mov	sp, r7
 800934c:	bc80      	pop	{r7}
 800934e:	4770      	bx	lr

08009350 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009350:	b480      	push	{r7}
 8009352:	b095      	sub	sp, #84	@ 0x54
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009360:	e853 3f00 	ldrex	r3, [r3]
 8009364:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009368:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800936c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	461a      	mov	r2, r3
 8009374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009376:	643b      	str	r3, [r7, #64]	@ 0x40
 8009378:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800937c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800937e:	e841 2300 	strex	r3, r2, [r1]
 8009382:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1e6      	bne.n	8009358 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3308      	adds	r3, #8
 8009390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	e853 3f00 	ldrex	r3, [r3]
 8009398:	61fb      	str	r3, [r7, #28]
   return(result);
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093a0:	f023 0301 	bic.w	r3, r3, #1
 80093a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3308      	adds	r3, #8
 80093ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093b6:	e841 2300 	strex	r3, r2, [r1]
 80093ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1e3      	bne.n	800938a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d118      	bne.n	80093fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	e853 3f00 	ldrex	r3, [r3]
 80093d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	f023 0310 	bic.w	r3, r3, #16
 80093de:	647b      	str	r3, [r7, #68]	@ 0x44
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	461a      	mov	r2, r3
 80093e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093e8:	61bb      	str	r3, [r7, #24]
 80093ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ec:	6979      	ldr	r1, [r7, #20]
 80093ee:	69ba      	ldr	r2, [r7, #24]
 80093f0:	e841 2300 	strex	r3, r2, [r1]
 80093f4:	613b      	str	r3, [r7, #16]
   return(result);
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e6      	bne.n	80093ca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2220      	movs	r2, #32
 8009400:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009410:	bf00      	nop
 8009412:	3754      	adds	r7, #84	@ 0x54
 8009414:	46bd      	mov	sp, r7
 8009416:	bc80      	pop	{r7}
 8009418:	4770      	bx	lr

0800941a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b090      	sub	sp, #64	@ 0x40
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009426:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0320 	and.w	r3, r3, #32
 8009432:	2b00      	cmp	r3, #0
 8009434:	d137      	bne.n	80094a6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009438:	2200      	movs	r2, #0
 800943a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800943e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3308      	adds	r3, #8
 8009444:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009448:	e853 3f00 	ldrex	r3, [r3]
 800944c:	623b      	str	r3, [r7, #32]
   return(result);
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009454:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3308      	adds	r3, #8
 800945c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800945e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009460:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009466:	e841 2300 	strex	r3, r2, [r1]
 800946a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800946c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1e5      	bne.n	800943e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	e853 3f00 	ldrex	r3, [r3]
 800947e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009486:	637b      	str	r3, [r7, #52]	@ 0x34
 8009488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	461a      	mov	r2, r3
 800948e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009490:	61fb      	str	r3, [r7, #28]
 8009492:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009494:	69b9      	ldr	r1, [r7, #24]
 8009496:	69fa      	ldr	r2, [r7, #28]
 8009498:	e841 2300 	strex	r3, r2, [r1]
 800949c:	617b      	str	r3, [r7, #20]
   return(result);
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1e6      	bne.n	8009472 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094a4:	e002      	b.n	80094ac <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80094a6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80094a8:	f7f9 fcc6 	bl	8002e38 <HAL_UART_TxCpltCallback>
}
 80094ac:	bf00      	nop
 80094ae:	3740      	adds	r7, #64	@ 0x40
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f7ff f994 	bl	80087f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094c8:	bf00      	nop
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094dc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094ec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094f8:	2b80      	cmp	r3, #128	@ 0x80
 80094fa:	d109      	bne.n	8009510 <UART_DMAError+0x40>
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	2b21      	cmp	r3, #33	@ 0x21
 8009500:	d106      	bne.n	8009510 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2200      	movs	r2, #0
 8009506:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800950a:	6978      	ldr	r0, [r7, #20]
 800950c:	f7ff fee0 	bl	80092d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800951a:	2b40      	cmp	r3, #64	@ 0x40
 800951c:	d109      	bne.n	8009532 <UART_DMAError+0x62>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2b22      	cmp	r3, #34	@ 0x22
 8009522:	d106      	bne.n	8009532 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	2200      	movs	r2, #0
 8009528:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800952c:	6978      	ldr	r0, [r7, #20]
 800952e:	f7ff ff0f 	bl	8009350 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009538:	f043 0210 	orr.w	r2, r3, #16
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009542:	6978      	ldr	r0, [r7, #20]
 8009544:	f7ff f95d 	bl	8008802 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009548:	bf00      	nop
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f7ff f947 	bl	8008802 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009574:	bf00      	nop
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b088      	sub	sp, #32
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	e853 3f00 	ldrex	r3, [r3]
 8009590:	60bb      	str	r3, [r7, #8]
   return(result);
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009598:	61fb      	str	r3, [r7, #28]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	61bb      	str	r3, [r7, #24]
 80095a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a6:	6979      	ldr	r1, [r7, #20]
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	e841 2300 	strex	r3, r2, [r1]
 80095ae:	613b      	str	r3, [r7, #16]
   return(result);
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1e6      	bne.n	8009584 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2220      	movs	r2, #32
 80095ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7f9 fc37 	bl	8002e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095ca:	bf00      	nop
 80095cc:	3720      	adds	r7, #32
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b09c      	sub	sp, #112	@ 0x70
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095ec:	2b22      	cmp	r3, #34	@ 0x22
 80095ee:	f040 80be 	bne.w	800976e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009600:	b2d9      	uxtb	r1, r3
 8009602:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009606:	b2da      	uxtb	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800960c:	400a      	ands	r2, r1
 800960e:	b2d2      	uxtb	r2, r2
 8009610:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009622:	b29b      	uxth	r3, r3
 8009624:	3b01      	subs	r3, #1
 8009626:	b29a      	uxth	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009634:	b29b      	uxth	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	f040 80a1 	bne.w	800977e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800964a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800964c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009650:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800965a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800965c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009660:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009662:	e841 2300 	strex	r3, r2, [r1]
 8009666:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009668:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e6      	bne.n	800963c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	3308      	adds	r3, #8
 8009674:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009678:	e853 3f00 	ldrex	r3, [r3]
 800967c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800967e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009680:	f023 0301 	bic.w	r3, r3, #1
 8009684:	667b      	str	r3, [r7, #100]	@ 0x64
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3308      	adds	r3, #8
 800968c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800968e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009690:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009692:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009694:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009696:	e841 2300 	strex	r3, r2, [r1]
 800969a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800969c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e5      	bne.n	800966e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a33      	ldr	r2, [pc, #204]	@ (8009788 <UART_RxISR_8BIT+0x1b4>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d01f      	beq.n	8009700 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d018      	beq.n	8009700 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d6:	e853 3f00 	ldrex	r3, [r3]
 80096da:	623b      	str	r3, [r7, #32]
   return(result);
 80096dc:	6a3b      	ldr	r3, [r7, #32]
 80096de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	461a      	mov	r2, r3
 80096ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80096ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096f4:	e841 2300 	strex	r3, r2, [r1]
 80096f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1e6      	bne.n	80096ce <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009704:	2b01      	cmp	r3, #1
 8009706:	d12e      	bne.n	8009766 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	e853 3f00 	ldrex	r3, [r3]
 800971a:	60fb      	str	r3, [r7, #12]
   return(result);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f023 0310 	bic.w	r3, r3, #16
 8009722:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	461a      	mov	r2, r3
 800972a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800972c:	61fb      	str	r3, [r7, #28]
 800972e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009730:	69b9      	ldr	r1, [r7, #24]
 8009732:	69fa      	ldr	r2, [r7, #28]
 8009734:	e841 2300 	strex	r3, r2, [r1]
 8009738:	617b      	str	r3, [r7, #20]
   return(result);
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1e6      	bne.n	800970e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	69db      	ldr	r3, [r3, #28]
 8009746:	f003 0310 	and.w	r3, r3, #16
 800974a:	2b10      	cmp	r3, #16
 800974c:	d103      	bne.n	8009756 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2210      	movs	r2, #16
 8009754:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800975c:	4619      	mov	r1, r3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7ff f858 	bl	8008814 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009764:	e00b      	b.n	800977e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7f9 fb7c 	bl	8002e64 <HAL_UART_RxCpltCallback>
}
 800976c:	e007      	b.n	800977e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	699a      	ldr	r2, [r3, #24]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f042 0208 	orr.w	r2, r2, #8
 800977c:	619a      	str	r2, [r3, #24]
}
 800977e:	bf00      	nop
 8009780:	3770      	adds	r7, #112	@ 0x70
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	40008000 	.word	0x40008000

0800978c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b09c      	sub	sp, #112	@ 0x70
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800979a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097a4:	2b22      	cmp	r3, #34	@ 0x22
 80097a6:	f040 80be 	bne.w	8009926 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80097ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80097be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80097c2:	4013      	ands	r3, r2
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80097c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ce:	1c9a      	adds	r2, r3, #2
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097da:	b29b      	uxth	r3, r3
 80097dc:	3b01      	subs	r3, #1
 80097de:	b29a      	uxth	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f040 80a1 	bne.w	8009936 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097fc:	e853 3f00 	ldrex	r3, [r3]
 8009800:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009808:	667b      	str	r3, [r7, #100]	@ 0x64
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	461a      	mov	r2, r3
 8009810:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009812:	657b      	str	r3, [r7, #84]	@ 0x54
 8009814:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009816:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009818:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800981a:	e841 2300 	strex	r3, r2, [r1]
 800981e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1e6      	bne.n	80097f4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3308      	adds	r3, #8
 800982c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009830:	e853 3f00 	ldrex	r3, [r3]
 8009834:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009838:	f023 0301 	bic.w	r3, r3, #1
 800983c:	663b      	str	r3, [r7, #96]	@ 0x60
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3308      	adds	r3, #8
 8009844:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009846:	643a      	str	r2, [r7, #64]	@ 0x40
 8009848:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800984c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800984e:	e841 2300 	strex	r3, r2, [r1]
 8009852:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1e5      	bne.n	8009826 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2220      	movs	r2, #32
 800985e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a33      	ldr	r2, [pc, #204]	@ (8009940 <UART_RxISR_16BIT+0x1b4>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d01f      	beq.n	80098b8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d018      	beq.n	80098b8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988c:	6a3b      	ldr	r3, [r7, #32]
 800988e:	e853 3f00 	ldrex	r3, [r3]
 8009892:	61fb      	str	r3, [r7, #28]
   return(result);
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800989a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	461a      	mov	r2, r3
 80098a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098a6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098ac:	e841 2300 	strex	r3, r2, [r1]
 80098b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1e6      	bne.n	8009886 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d12e      	bne.n	800991e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	e853 3f00 	ldrex	r3, [r3]
 80098d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f023 0310 	bic.w	r3, r3, #16
 80098da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	461a      	mov	r2, r3
 80098e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80098e4:	61bb      	str	r3, [r7, #24]
 80098e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e8:	6979      	ldr	r1, [r7, #20]
 80098ea:	69ba      	ldr	r2, [r7, #24]
 80098ec:	e841 2300 	strex	r3, r2, [r1]
 80098f0:	613b      	str	r3, [r7, #16]
   return(result);
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1e6      	bne.n	80098c6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	69db      	ldr	r3, [r3, #28]
 80098fe:	f003 0310 	and.w	r3, r3, #16
 8009902:	2b10      	cmp	r3, #16
 8009904:	d103      	bne.n	800990e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2210      	movs	r2, #16
 800990c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009914:	4619      	mov	r1, r3
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f7fe ff7c 	bl	8008814 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800991c:	e00b      	b.n	8009936 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f7f9 faa0 	bl	8002e64 <HAL_UART_RxCpltCallback>
}
 8009924:	e007      	b.n	8009936 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	699a      	ldr	r2, [r3, #24]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f042 0208 	orr.w	r2, r2, #8
 8009934:	619a      	str	r2, [r3, #24]
}
 8009936:	bf00      	nop
 8009938:	3770      	adds	r7, #112	@ 0x70
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	40008000 	.word	0x40008000

08009944 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b0ac      	sub	sp, #176	@ 0xb0
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009952:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800997a:	2b22      	cmp	r3, #34	@ 0x22
 800997c:	f040 8182 	bne.w	8009c84 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009986:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800998a:	e125      	b.n	8009bd8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009992:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009996:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800999a:	b2d9      	uxtb	r1, r3
 800999c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80099a0:	b2da      	uxtb	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099a6:	400a      	ands	r2, r1
 80099a8:	b2d2      	uxtb	r2, r2
 80099aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099bc:	b29b      	uxth	r3, r3
 80099be:	3b01      	subs	r3, #1
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80099d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d053      	beq.n	8009a86 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80099de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d011      	beq.n	8009a0e <UART_RxISR_8BIT_FIFOEN+0xca>
 80099ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80099ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00b      	beq.n	8009a0e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2201      	movs	r2, #1
 80099fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a04:	f043 0201 	orr.w	r2, r3, #1
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a12:	f003 0302 	and.w	r3, r3, #2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d011      	beq.n	8009a3e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00b      	beq.n	8009a3e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a34:	f043 0204 	orr.w	r2, r3, #4
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a42:	f003 0304 	and.w	r3, r3, #4
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d011      	beq.n	8009a6e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a4e:	f003 0301 	and.w	r3, r3, #1
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00b      	beq.n	8009a6e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2204      	movs	r2, #4
 8009a5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a64:	f043 0202 	orr.w	r2, r3, #2
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d006      	beq.n	8009a86 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7fe fec2 	bl	8008802 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f040 80a2 	bne.w	8009bd8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009aa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ab6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ab8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aba:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009abc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009abe:	e841 2300 	strex	r3, r2, [r1]
 8009ac2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009ac4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1e4      	bne.n	8009a94 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3308      	adds	r3, #8
 8009ad0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ad4:	e853 3f00 	ldrex	r3, [r3]
 8009ad8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009ada:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ae0:	f023 0301 	bic.w	r3, r3, #1
 8009ae4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3308      	adds	r3, #8
 8009aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009af2:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009af4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009af8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009afa:	e841 2300 	strex	r3, r2, [r1]
 8009afe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009b00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1e1      	bne.n	8009aca <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a5f      	ldr	r2, [pc, #380]	@ (8009c9c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d021      	beq.n	8009b68 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d01a      	beq.n	8009b68 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b3a:	e853 3f00 	ldrex	r3, [r3]
 8009b3e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b42:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009b46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b54:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b56:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b58:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b5c:	e841 2300 	strex	r3, r2, [r1]
 8009b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1e4      	bne.n	8009b32 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d130      	bne.n	8009bd2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2200      	movs	r2, #0
 8009b74:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b7e:	e853 3f00 	ldrex	r3, [r3]
 8009b82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b86:	f023 0310 	bic.w	r3, r3, #16
 8009b8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	461a      	mov	r2, r3
 8009b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b98:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ba0:	e841 2300 	strex	r3, r2, [r1]
 8009ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e4      	bne.n	8009b76 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	f003 0310 	and.w	r3, r3, #16
 8009bb6:	2b10      	cmp	r3, #16
 8009bb8:	d103      	bne.n	8009bc2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2210      	movs	r2, #16
 8009bc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f7fe fe22 	bl	8008814 <HAL_UARTEx_RxEventCallback>
 8009bd0:	e002      	b.n	8009bd8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7f9 f946 	bl	8002e64 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bd8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d006      	beq.n	8009bee <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009be4:	f003 0320 	and.w	r3, r3, #32
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f47f aecf 	bne.w	800998c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bf4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009bf8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d049      	beq.n	8009c94 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009c06:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d242      	bcs.n	8009c94 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3308      	adds	r3, #8
 8009c14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	e853 3f00 	ldrex	r3, [r3]
 8009c1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3308      	adds	r3, #8
 8009c2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c3a:	e841 2300 	strex	r3, r2, [r1]
 8009c3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1e3      	bne.n	8009c0e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a15      	ldr	r2, [pc, #84]	@ (8009ca0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009c4a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	f043 0320 	orr.w	r3, r3, #32
 8009c60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c6e:	61bb      	str	r3, [r7, #24]
 8009c70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c72:	6979      	ldr	r1, [r7, #20]
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	e841 2300 	strex	r3, r2, [r1]
 8009c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1e4      	bne.n	8009c4c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c82:	e007      	b.n	8009c94 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	699a      	ldr	r2, [r3, #24]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f042 0208 	orr.w	r2, r2, #8
 8009c92:	619a      	str	r2, [r3, #24]
}
 8009c94:	bf00      	nop
 8009c96:	37b0      	adds	r7, #176	@ 0xb0
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	40008000 	.word	0x40008000
 8009ca0:	080095d5 	.word	0x080095d5

08009ca4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b0ae      	sub	sp, #184	@ 0xb8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009cb2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	69db      	ldr	r3, [r3, #28]
 8009cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cda:	2b22      	cmp	r3, #34	@ 0x22
 8009cdc:	f040 8186 	bne.w	8009fec <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ce6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009cea:	e129      	b.n	8009f40 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009cfe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009d02:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009d06:	4013      	ands	r3, r2
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d14:	1c9a      	adds	r2, r3, #2
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009d36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d3a:	f003 0307 	and.w	r3, r3, #7
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d053      	beq.n	8009dea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d46:	f003 0301 	and.w	r3, r3, #1
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d011      	beq.n	8009d72 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00b      	beq.n	8009d72 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d68:	f043 0201 	orr.w	r2, r3, #1
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009d76:	f003 0302 	and.w	r3, r3, #2
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d011      	beq.n	8009da2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009d7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d82:	f003 0301 	and.w	r3, r3, #1
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00b      	beq.n	8009da2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2202      	movs	r2, #2
 8009d90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d98:	f043 0204 	orr.w	r2, r3, #4
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009da2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009da6:	f003 0304 	and.w	r3, r3, #4
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d011      	beq.n	8009dd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009dae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009db2:	f003 0301 	and.w	r3, r3, #1
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00b      	beq.n	8009dd2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2204      	movs	r2, #4
 8009dc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dc8:	f043 0202 	orr.w	r2, r3, #2
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d006      	beq.n	8009dea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7fe fd10 	bl	8008802 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f040 80a4 	bne.w	8009f40 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009e06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	461a      	mov	r2, r3
 8009e16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009e22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e26:	e841 2300 	strex	r3, r2, [r1]
 8009e2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1e2      	bne.n	8009df8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3308      	adds	r3, #8
 8009e38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e3c:	e853 3f00 	ldrex	r3, [r3]
 8009e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e48:	f023 0301 	bic.w	r3, r3, #1
 8009e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3308      	adds	r3, #8
 8009e56:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009e5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e1      	bne.n	8009e32 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a5f      	ldr	r2, [pc, #380]	@ (800a004 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d021      	beq.n	8009ed0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d01a      	beq.n	8009ed0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ea2:	e853 3f00 	ldrex	r3, [r3]
 8009ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009eaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009eae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ebe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ec2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ec4:	e841 2300 	strex	r3, r2, [r1]
 8009ec8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1e4      	bne.n	8009e9a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d130      	bne.n	8009f3a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee6:	e853 3f00 	ldrex	r3, [r3]
 8009eea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eee:	f023 0310 	bic.w	r3, r3, #16
 8009ef2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	461a      	mov	r2, r3
 8009efc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f08:	e841 2300 	strex	r3, r2, [r1]
 8009f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1e4      	bne.n	8009ede <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	69db      	ldr	r3, [r3, #28]
 8009f1a:	f003 0310 	and.w	r3, r3, #16
 8009f1e:	2b10      	cmp	r3, #16
 8009f20:	d103      	bne.n	8009f2a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2210      	movs	r2, #16
 8009f28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7fe fc6e 	bl	8008814 <HAL_UARTEx_RxEventCallback>
 8009f38:	e002      	b.n	8009f40 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7f8 ff92 	bl	8002e64 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f40:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d006      	beq.n	8009f56 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009f48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f4c:	f003 0320 	and.w	r3, r3, #32
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f47f aecb 	bne.w	8009cec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f5c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009f60:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d049      	beq.n	8009ffc <UART_RxISR_16BIT_FIFOEN+0x358>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009f6e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d242      	bcs.n	8009ffc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3308      	adds	r3, #8
 8009f7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f80:	e853 3f00 	ldrex	r3, [r3]
 8009f84:	623b      	str	r3, [r7, #32]
   return(result);
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3308      	adds	r3, #8
 8009f96:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009f9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fa2:	e841 2300 	strex	r3, r2, [r1]
 8009fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e3      	bne.n	8009f76 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a15      	ldr	r2, [pc, #84]	@ (800a008 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009fb2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	e853 3f00 	ldrex	r3, [r3]
 8009fc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f043 0320 	orr.w	r3, r3, #32
 8009fc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009fd6:	61fb      	str	r3, [r7, #28]
 8009fd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fda:	69b9      	ldr	r1, [r7, #24]
 8009fdc:	69fa      	ldr	r2, [r7, #28]
 8009fde:	e841 2300 	strex	r3, r2, [r1]
 8009fe2:	617b      	str	r3, [r7, #20]
   return(result);
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1e4      	bne.n	8009fb4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009fea:	e007      	b.n	8009ffc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	699a      	ldr	r2, [r3, #24]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f042 0208 	orr.w	r2, r2, #8
 8009ffa:	619a      	str	r2, [r3, #24]
}
 8009ffc:	bf00      	nop
 8009ffe:	37b8      	adds	r7, #184	@ 0xb8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	40008000 	.word	0x40008000
 800a008:	0800978d 	.word	0x0800978d

0800a00c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
 800a018:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d101      	bne.n	800a024 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e058      	b.n	800a0d6 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d106      	bne.n	800a03c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f7f8 fce4 	bl	8002a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2224      	movs	r2, #36	@ 0x24
 800a040:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f022 0201 	bic.w	r2, r2, #1
 800a052:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d002      	beq.n	800a062 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f7fe fe59 	bl	8008d14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f7fe fbe2 	bl	800882c <UART_SetConfig>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d101      	bne.n	800a072 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e031      	b.n	800a0d6 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	689a      	ldr	r2, [r3, #8]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a080:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	430a      	orrs	r2, r1
 800a094:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	055b      	lsls	r3, r3, #21
 800a09a:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	041b      	lsls	r3, r3, #16
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 800a0b0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	6812      	ldr	r2, [r2, #0]
 800a0b8:	6979      	ldr	r1, [r7, #20]
 800a0ba:	430b      	orrs	r3, r1
 800a0bc:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f042 0201 	orr.w	r2, r2, #1
 800a0cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f7fe fec1 	bl	8008e56 <UART_CheckIdleState>
 800a0d4:	4603      	mov	r3, r0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3718      	adds	r7, #24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b083      	sub	sp, #12
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0e6:	bf00      	nop
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bc80      	pop	{r7}
 800a0ee:	4770      	bx	lr

0800a0f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bc80      	pop	{r7}
 800a100:	4770      	bx	lr

0800a102 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a102:	b480      	push	{r7}
 800a104:	b083      	sub	sp, #12
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a10a:	bf00      	nop
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	bc80      	pop	{r7}
 800a112:	4770      	bx	lr

0800a114 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b088      	sub	sp, #32
 800a118:	af02      	add	r7, sp, #8
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	1d3b      	adds	r3, r7, #4
 800a11e:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d101      	bne.n	800a134 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800a130:	2302      	movs	r3, #2
 800a132:	e046      	b.n	800a1c2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2201      	movs	r2, #1
 800a138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2224      	movs	r2, #36	@ 0x24
 800a140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f022 0201 	bic.w	r2, r2, #1
 800a152:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	430a      	orrs	r2, r1
 800a166:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d105      	bne.n	800a17a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800a16e:	1d3b      	adds	r3, r7, #4
 800a170:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f90e 	bl	800a396 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f042 0201 	orr.w	r2, r2, #1
 800a188:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a18a:	f7f7 fff3 	bl	8002174 <HAL_GetTick>
 800a18e:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a190:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	2200      	movs	r2, #0
 800a19a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f7fe fea7 	bl	8008ef2 <UART_WaitOnFlagUntilTimeout>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	75fb      	strb	r3, [r7, #23]
 800a1ae:	e003      	b.n	800a1b8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800a1c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3718      	adds	r7, #24
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b089      	sub	sp, #36	@ 0x24
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d101      	bne.n	800a1e0 <HAL_UARTEx_EnableStopMode+0x16>
 800a1dc:	2302      	movs	r3, #2
 800a1de:	e021      	b.n	800a224 <HAL_UARTEx_EnableStopMode+0x5a>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	e853 3f00 	ldrex	r3, [r3]
 800a1f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	f043 0302 	orr.w	r3, r3, #2
 800a1fc:	61fb      	str	r3, [r7, #28]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	61bb      	str	r3, [r7, #24]
 800a208:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20a:	6979      	ldr	r1, [r7, #20]
 800a20c:	69ba      	ldr	r2, [r7, #24]
 800a20e:	e841 2300 	strex	r3, r2, [r1]
 800a212:	613b      	str	r3, [r7, #16]
   return(result);
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1e6      	bne.n	800a1e8 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3724      	adds	r7, #36	@ 0x24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bc80      	pop	{r7}
 800a22c:	4770      	bx	lr

0800a22e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a22e:	b480      	push	{r7}
 800a230:	b085      	sub	sp, #20
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d101      	bne.n	800a244 <HAL_UARTEx_DisableFifoMode+0x16>
 800a240:	2302      	movs	r3, #2
 800a242:	e027      	b.n	800a294 <HAL_UARTEx_DisableFifoMode+0x66>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2224      	movs	r2, #36	@ 0x24
 800a250:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f022 0201 	bic.w	r2, r2, #1
 800a26a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a272:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2220      	movs	r2, #32
 800a286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3714      	adds	r7, #20
 800a298:	46bd      	mov	sp, r7
 800a29a:	bc80      	pop	{r7}
 800a29c:	4770      	bx	lr

0800a29e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d101      	bne.n	800a2b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e02d      	b.n	800a312 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2224      	movs	r2, #36	@ 0x24
 800a2c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f022 0201 	bic.w	r2, r2, #1
 800a2dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f872 	bl	800a3dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2220      	movs	r2, #32
 800a304:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b084      	sub	sp, #16
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d101      	bne.n	800a332 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a32e:	2302      	movs	r3, #2
 800a330:	e02d      	b.n	800a38e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2224      	movs	r2, #36	@ 0x24
 800a33e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f022 0201 	bic.w	r2, r2, #1
 800a358:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	683a      	ldr	r2, [r7, #0]
 800a36a:	430a      	orrs	r2, r1
 800a36c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f834 	bl	800a3dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2220      	movs	r2, #32
 800a380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a396:	b480      	push	{r7}
 800a398:	b085      	sub	sp, #20
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	60f8      	str	r0, [r7, #12]
 800a39e:	1d3b      	adds	r3, r7, #4
 800a3a0:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	f023 0210 	bic.w	r2, r3, #16
 800a3ae:	893b      	ldrh	r3, [r7, #8]
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	430a      	orrs	r2, r1
 800a3b8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800a3c4:	7abb      	ldrb	r3, [r7, #10]
 800a3c6:	061a      	lsls	r2, r3, #24
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	430a      	orrs	r2, r1
 800a3ce:	605a      	str	r2, [r3, #4]
}
 800a3d0:	bf00      	nop
 800a3d2:	3714      	adds	r7, #20
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bc80      	pop	{r7}
 800a3d8:	4770      	bx	lr
	...

0800a3dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d108      	bne.n	800a3fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a3fc:	e031      	b.n	800a462 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a3fe:	2308      	movs	r3, #8
 800a400:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a402:	2308      	movs	r3, #8
 800a404:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	0e5b      	lsrs	r3, r3, #25
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	f003 0307 	and.w	r3, r3, #7
 800a414:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	0f5b      	lsrs	r3, r3, #29
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	f003 0307 	and.w	r3, r3, #7
 800a424:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a426:	7bbb      	ldrb	r3, [r7, #14]
 800a428:	7b3a      	ldrb	r2, [r7, #12]
 800a42a:	4910      	ldr	r1, [pc, #64]	@ (800a46c <UARTEx_SetNbDataToProcess+0x90>)
 800a42c:	5c8a      	ldrb	r2, [r1, r2]
 800a42e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a432:	7b3a      	ldrb	r2, [r7, #12]
 800a434:	490e      	ldr	r1, [pc, #56]	@ (800a470 <UARTEx_SetNbDataToProcess+0x94>)
 800a436:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a438:	fb93 f3f2 	sdiv	r3, r3, r2
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a444:	7bfb      	ldrb	r3, [r7, #15]
 800a446:	7b7a      	ldrb	r2, [r7, #13]
 800a448:	4908      	ldr	r1, [pc, #32]	@ (800a46c <UARTEx_SetNbDataToProcess+0x90>)
 800a44a:	5c8a      	ldrb	r2, [r1, r2]
 800a44c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a450:	7b7a      	ldrb	r2, [r7, #13]
 800a452:	4907      	ldr	r1, [pc, #28]	@ (800a470 <UARTEx_SetNbDataToProcess+0x94>)
 800a454:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a456:	fb93 f3f2 	sdiv	r3, r3, r2
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a462:	bf00      	nop
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	bc80      	pop	{r7}
 800a46a:	4770      	bx	lr
 800a46c:	0801e724 	.word	0x0801e724
 800a470:	0801e72c 	.word	0x0801e72c

0800a474 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a478:	f7f7 fd26 	bl	8001ec8 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a47c:	f000 f820 	bl	800a4c0 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */
  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a480:	bf00      	nop
 800a482:	bd80      	pop	{r7, pc}

0800a484 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a488:	f04f 30ff 	mov.w	r0, #4294967295
 800a48c:	f010 fa32 	bl	801a8f4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a490:	bf00      	nop
 800a492:	bd80      	pop	{r7, pc}

0800a494 <__NVIC_SystemReset>:
{
 800a494:	b480      	push	{r7}
 800a496:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a498:	f3bf 8f4f 	dsb	sy
}
 800a49c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a49e:	4b06      	ldr	r3, [pc, #24]	@ (800a4b8 <__NVIC_SystemReset+0x24>)
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a4a6:	4904      	ldr	r1, [pc, #16]	@ (800a4b8 <__NVIC_SystemReset+0x24>)
 800a4a8:	4b04      	ldr	r3, [pc, #16]	@ (800a4bc <__NVIC_SystemReset+0x28>)
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a4ae:	f3bf 8f4f 	dsb	sy
}
 800a4b2:	bf00      	nop
    __NOP();
 800a4b4:	bf00      	nop
 800a4b6:	e7fd      	b.n	800a4b4 <__NVIC_SystemReset+0x20>
 800a4b8:	e000ed00 	.word	0xe000ed00
 800a4bc:	05fa0004 	.word	0x05fa0004

0800a4c0 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	9300      	str	r3, [sp, #0]
 800a4ca:	4b1f      	ldr	r3, [pc, #124]	@ (800a548 <LoRaWAN_Init+0x88>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a4d2:	481e      	ldr	r0, [pc, #120]	@ (800a54c <LoRaWAN_Init+0x8c>)
 800a4d4:	f010 fbac 	bl	801ac30 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a4d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a550 <LoRaWAN_Init+0x90>)
 800a4da:	2100      	movs	r1, #0
 800a4dc:	2001      	movs	r0, #1
 800a4de:	f010 fb05 	bl	801aaec <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a4e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a554 <LoRaWAN_Init+0x94>)
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	2002      	movs	r0, #2
 800a4e8:	f010 fb00 	bl	801aaec <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a4ec:	4a1a      	ldr	r2, [pc, #104]	@ (800a558 <LoRaWAN_Init+0x98>)
 800a4ee:	2100      	movs	r1, #0
 800a4f0:	2004      	movs	r0, #4
 800a4f2:	f010 fafb 	bl	801aaec <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a4f6:	4a19      	ldr	r2, [pc, #100]	@ (800a55c <LoRaWAN_Init+0x9c>)
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	2008      	movs	r0, #8
 800a4fc:	f010 faf6 	bl	801aaec <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a500:	f000 f9aa 	bl	800a858 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a504:	4916      	ldr	r1, [pc, #88]	@ (800a560 <LoRaWAN_Init+0xa0>)
 800a506:	4817      	ldr	r0, [pc, #92]	@ (800a564 <LoRaWAN_Init+0xa4>)
 800a508:	f001 fee6 	bl	800c2d8 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a50c:	4816      	ldr	r0, [pc, #88]	@ (800a568 <LoRaWAN_Init+0xa8>)
 800a50e:	f001 ff3f 	bl	800c390 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a512:	4b16      	ldr	r3, [pc, #88]	@ (800a56c <LoRaWAN_Init+0xac>)
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	4a16      	ldr	r2, [pc, #88]	@ (800a570 <LoRaWAN_Init+0xb0>)
 800a518:	7812      	ldrb	r2, [r2, #0]
 800a51a:	4611      	mov	r1, r2
 800a51c:	4618      	mov	r0, r3
 800a51e:	f001 fffd 	bl	800c51c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a522:	4b14      	ldr	r3, [pc, #80]	@ (800a574 <LoRaWAN_Init+0xb4>)
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10b      	bne.n	800a542 <LoRaWAN_Init+0x82>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a52a:	4b13      	ldr	r3, [pc, #76]	@ (800a578 <LoRaWAN_Init+0xb8>)
 800a52c:	6819      	ldr	r1, [r3, #0]
 800a52e:	2300      	movs	r3, #0
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	4b12      	ldr	r3, [pc, #72]	@ (800a57c <LoRaWAN_Init+0xbc>)
 800a534:	2200      	movs	r2, #0
 800a536:	4812      	ldr	r0, [pc, #72]	@ (800a580 <LoRaWAN_Init+0xc0>)
 800a538:	f010 fb7a 	bl	801ac30 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a53c:	4810      	ldr	r0, [pc, #64]	@ (800a580 <LoRaWAN_Init+0xc0>)
 800a53e:	f010 fbad 	bl	801ac9c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a542:	bf00      	nop
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	0800a759 	.word	0x0800a759
 800a54c:	20000630 	.word	0x20000630
 800a550:	0800c505 	.word	0x0800c505
 800a554:	0800a599 	.word	0x0800a599
 800a558:	0800a77d 	.word	0x0800a77d
 800a55c:	0800a6d9 	.word	0x0800a6d9
 800a560:	01030100 	.word	0x01030100
 800a564:	2000000c 	.word	0x2000000c
 800a568:	20000058 	.word	0x20000058
 800a56c:	20000009 	.word	0x20000009
 800a570:	2000000a 	.word	0x2000000a
 800a574:	20000614 	.word	0x20000614
 800a578:	20000070 	.word	0x20000070
 800a57c:	0800a5a5 	.word	0x0800a5a5
 800a580:	20000618 	.word	0x20000618

0800a584 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  /* USER CODE END OnRxData_1 */
}
 800a58e:	bf00      	nop
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	bc80      	pop	{r7}
 800a596:	4770      	bx	lr

0800a598 <SendTxData>:

static void SendTxData(void)
{
 800a598:	b480      	push	{r7}
 800a59a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */

  /* USER CODE END SendTxData_1 */
}
 800a59c:	bf00      	nop
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bc80      	pop	{r7}
 800a5a2:	4770      	bx	lr

0800a5a4 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	2002      	movs	r0, #2
 800a5b0:	f010 fabe 	bl	801ab30 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a5b4:	4803      	ldr	r0, [pc, #12]	@ (800a5c4 <OnTxTimerEvent+0x20>)
 800a5b6:	f010 fb71 	bl	801ac9c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a5ba:	bf00      	nop
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20000618 	.word	0x20000618

0800a5c8 <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  /* USER CODE END OnTxData_1 */
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bc80      	pop	{r7}
 800a5d8:	4770      	bx	lr

0800a5da <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b083      	sub	sp, #12
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  /* USER CODE END OnJoinRequest_1 */
}
 800a5e2:	bf00      	nop
 800a5e4:	370c      	adds	r7, #12
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bc80      	pop	{r7}
 800a5ea:	4770      	bx	lr

0800a5ec <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bc80      	pop	{r7}
 800a5fc:	4770      	bx	lr

0800a5fe <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800a5fe:	b480      	push	{r7}
 800a600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800a602:	bf00      	nop
 800a604:	46bd      	mov	sp, r7
 800a606:	bc80      	pop	{r7}
 800a608:	4770      	bx	lr

0800a60a <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	4603      	mov	r3, r0
 800a612:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  /* USER CODE END OnClassChange_1 */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	bc80      	pop	{r7}
 800a61c:	4770      	bx	lr

0800a61e <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a622:	2100      	movs	r1, #0
 800a624:	2001      	movs	r0, #1
 800a626:	f010 fa83 	bl	801ab30 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a62a:	bf00      	nop
 800a62c:	bd80      	pop	{r7, pc}
	...

0800a630 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a638:	4a0d      	ldr	r2, [pc, #52]	@ (800a670 <OnTxPeriodicityChanged+0x40>)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a63e:	4b0c      	ldr	r3, [pc, #48]	@ (800a670 <OnTxPeriodicityChanged+0x40>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d103      	bne.n	800a64e <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a646:	4b0a      	ldr	r3, [pc, #40]	@ (800a670 <OnTxPeriodicityChanged+0x40>)
 800a648:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a64c:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a64e:	4809      	ldr	r0, [pc, #36]	@ (800a674 <OnTxPeriodicityChanged+0x44>)
 800a650:	f010 fb92 	bl	801ad78 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a654:	4b06      	ldr	r3, [pc, #24]	@ (800a670 <OnTxPeriodicityChanged+0x40>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4619      	mov	r1, r3
 800a65a:	4806      	ldr	r0, [pc, #24]	@ (800a674 <OnTxPeriodicityChanged+0x44>)
 800a65c:	f010 fbfc 	bl	801ae58 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a660:	4804      	ldr	r0, [pc, #16]	@ (800a674 <OnTxPeriodicityChanged+0x44>)
 800a662:	f010 fb1b 	bl	801ac9c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a666:	bf00      	nop
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	20000070 	.word	0x20000070
 800a674:	20000618 	.word	0x20000618

0800a678 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	4603      	mov	r3, r0
 800a680:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a682:	4a04      	ldr	r2, [pc, #16]	@ (800a694 <OnTxFrameCtrlChanged+0x1c>)
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bc80      	pop	{r7}
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	20000058 	.word	0x20000058

0800a698 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	4603      	mov	r3, r0
 800a6a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a6a2:	4a04      	ldr	r2, [pc, #16]	@ (800a6b4 <OnPingSlotPeriodicityChanged+0x1c>)
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bc80      	pop	{r7}
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	20000058 	.word	0x20000058

0800a6b8 <OnSystemReset>:

static void OnSystemReset(void)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a6bc:	f002 fcf9 	bl	800d0b2 <LmHandlerHalt>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d106      	bne.n	800a6d4 <OnSystemReset+0x1c>
 800a6c6:	f001 ffcd 	bl	800c664 <LmHandlerJoinStatus>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d101      	bne.n	800a6d4 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a6d0:	f7ff fee0 	bl	800a494 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a6d4:	bf00      	nop
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <StopJoin>:

static void StopJoin(void)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a6dc:	4817      	ldr	r0, [pc, #92]	@ (800a73c <StopJoin+0x64>)
 800a6de:	f010 fb4b 	bl	801ad78 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a6e2:	f002 fcd9 	bl	800d098 <LmHandlerStop>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d006      	beq.n	800a6fa <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800a6ec:	4b14      	ldr	r3, [pc, #80]	@ (800a740 <StopJoin+0x68>)
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	2002      	movs	r0, #2
 800a6f4:	f010 fd4a 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
 800a6f8:	e01a      	b.n	800a730 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800a6fa:	4b12      	ldr	r3, [pc, #72]	@ (800a744 <StopJoin+0x6c>)
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	2100      	movs	r1, #0
 800a700:	2002      	movs	r0, #2
 800a702:	f010 fd43 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800a706:	4b10      	ldr	r3, [pc, #64]	@ (800a748 <StopJoin+0x70>)
 800a708:	2201      	movs	r2, #1
 800a70a:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800a70c:	4b0f      	ldr	r3, [pc, #60]	@ (800a74c <StopJoin+0x74>)
 800a70e:	2200      	movs	r2, #0
 800a710:	2100      	movs	r1, #0
 800a712:	2002      	movs	r0, #2
 800a714:	f010 fd3a 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800a718:	480d      	ldr	r0, [pc, #52]	@ (800a750 <StopJoin+0x78>)
 800a71a:	f001 fe39 	bl	800c390 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800a71e:	4b0a      	ldr	r3, [pc, #40]	@ (800a748 <StopJoin+0x70>)
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	2101      	movs	r1, #1
 800a724:	4618      	mov	r0, r3
 800a726:	f001 fef9 	bl	800c51c <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800a72a:	4804      	ldr	r0, [pc, #16]	@ (800a73c <StopJoin+0x64>)
 800a72c:	f010 fab6 	bl	801ac9c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800a730:	4808      	ldr	r0, [pc, #32]	@ (800a754 <StopJoin+0x7c>)
 800a732:	f010 fab3 	bl	801ac9c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800a736:	bf00      	nop
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20000618 	.word	0x20000618
 800a740:	0801e148 	.word	0x0801e148
 800a744:	0801e168 	.word	0x0801e168
 800a748:	20000009 	.word	0x20000009
 800a74c:	0801e17c 	.word	0x0801e17c
 800a750:	20000058 	.word	0x20000058
 800a754:	20000630 	.word	0x20000630

0800a758 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800a760:	4b05      	ldr	r3, [pc, #20]	@ (800a778 <OnStopJoinTimerEvent+0x20>)
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b02      	cmp	r3, #2
 800a766:	d103      	bne.n	800a770 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800a768:	2100      	movs	r1, #0
 800a76a:	2008      	movs	r0, #8
 800a76c:	f010 f9e0 	bl	801ab30 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800a770:	bf00      	nop
 800a772:	3708      	adds	r7, #8
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	20000009 	.word	0x20000009

0800a77c <StoreContext>:

static void StoreContext(void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a782:	23ff      	movs	r3, #255	@ 0xff
 800a784:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800a786:	f002 fcc9 	bl	800d11c <LmHandlerNvmDataStore>
 800a78a:	4603      	mov	r3, r0
 800a78c:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800a78e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a792:	f113 0f08 	cmn.w	r3, #8
 800a796:	d106      	bne.n	800a7a6 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800a798:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c4 <StoreContext+0x48>)
 800a79a:	2200      	movs	r2, #0
 800a79c:	2100      	movs	r1, #0
 800a79e:	2002      	movs	r0, #2
 800a7a0:	f010 fcf4 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800a7a4:	e00a      	b.n	800a7bc <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800a7a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ae:	d105      	bne.n	800a7bc <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800a7b0:	4b05      	ldr	r3, [pc, #20]	@ (800a7c8 <StoreContext+0x4c>)
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	2002      	movs	r0, #2
 800a7b8:	f010 fce8 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
}
 800a7bc:	bf00      	nop
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	0801e19c 	.word	0x0801e19c
 800a7c8:	0801e1b4 	.word	0x0801e1b4

0800a7cc <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d106      	bne.n	800a7ea <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800a7dc:	4b08      	ldr	r3, [pc, #32]	@ (800a800 <OnNvmDataChange+0x34>)
 800a7de:	2200      	movs	r2, #0
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	2002      	movs	r0, #2
 800a7e4:	f010 fcd2 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800a7e8:	e005      	b.n	800a7f6 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800a7ea:	4b06      	ldr	r3, [pc, #24]	@ (800a804 <OnNvmDataChange+0x38>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	2002      	movs	r0, #2
 800a7f2:	f010 fccb 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
}
 800a7f6:	bf00      	nop
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	0801e1cc 	.word	0x0801e1cc
 800a804:	0801e1e0 	.word	0x0801e1e0

0800a808 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800a812:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a816:	4807      	ldr	r0, [pc, #28]	@ (800a834 <OnStoreContextRequest+0x2c>)
 800a818:	f7f6 fe68 	bl	80014ec <FLASH_IF_Erase>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d104      	bne.n	800a82c <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	6879      	ldr	r1, [r7, #4]
 800a826:	4803      	ldr	r0, [pc, #12]	@ (800a834 <OnStoreContextRequest+0x2c>)
 800a828:	f7f6 fe10 	bl	800144c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800a82c:	bf00      	nop
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	0803f000 	.word	0x0803f000

0800a838 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	4903      	ldr	r1, [pc, #12]	@ (800a854 <OnRestoreContextRequest+0x1c>)
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7f6 fe28 	bl	800149c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800a84c:	bf00      	nop
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	0803f000 	.word	0x0803f000

0800a858 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800a85c:	4b15      	ldr	r3, [pc, #84]	@ (800a8b4 <LoraInfo_Init+0x5c>)
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a862:	4b14      	ldr	r3, [pc, #80]	@ (800a8b4 <LoraInfo_Init+0x5c>)
 800a864:	2200      	movs	r2, #0
 800a866:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a868:	4b12      	ldr	r3, [pc, #72]	@ (800a8b4 <LoraInfo_Init+0x5c>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a86e:	4b11      	ldr	r3, [pc, #68]	@ (800a8b4 <LoraInfo_Init+0x5c>)
 800a870:	2200      	movs	r2, #0
 800a872:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 800a874:	4b0f      	ldr	r3, [pc, #60]	@ (800a8b4 <LoraInfo_Init+0x5c>)
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	f043 0301 	orr.w	r3, r3, #1
 800a87c:	4a0d      	ldr	r2, [pc, #52]	@ (800a8b4 <LoraInfo_Init+0x5c>)
 800a87e:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a880:	4b0c      	ldr	r3, [pc, #48]	@ (800a8b4 <LoraInfo_Init+0x5c>)
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10d      	bne.n	800a8a4 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a888:	4b0b      	ldr	r3, [pc, #44]	@ (800a8b8 <LoraInfo_Init+0x60>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	2100      	movs	r1, #0
 800a88e:	2000      	movs	r0, #0
 800a890:	f010 fc7c 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a894:	bf00      	nop
 800a896:	f010 fc67 	bl	801b168 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d1fa      	bne.n	800a896 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a8a0:	bf00      	nop
 800a8a2:	e7fd      	b.n	800a8a0 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a8a4:	4b03      	ldr	r3, [pc, #12]	@ (800a8b4 <LoraInfo_Init+0x5c>)
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 800a8aa:	4b02      	ldr	r3, [pc, #8]	@ (800a8b4 <LoraInfo_Init+0x5c>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a8b0:	bf00      	nop
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	20000648 	.word	0x20000648
 800a8b8:	0801e1f4 	.word	0x0801e1f4

0800a8bc <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a8c0:	4b02      	ldr	r3, [pc, #8]	@ (800a8cc <LoraInfo_GetPtr+0x10>)
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bc80      	pop	{r7}
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	20000648 	.word	0x20000648

0800a8d0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800a8da:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bc80      	pop	{r7}
 800a8e4:	4770      	bx	lr

0800a8e6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b085      	sub	sp, #20
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bc80      	pop	{r7}
 800a8fe:	4770      	bx	lr

0800a900 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800a906:	2300      	movs	r3, #0
 800a908:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800a90a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	bc80      	pop	{r7}
 800a914:	4770      	bx	lr

0800a916 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a916:	b480      	push	{r7}
 800a918:	b083      	sub	sp, #12
 800a91a:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800a91c:	2301      	movs	r3, #1
 800a91e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800a920:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800a922:	4618      	mov	r0, r3
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	bc80      	pop	{r7}
 800a92a:	4770      	bx	lr

0800a92c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800a932:	2301      	movs	r3, #1
 800a934:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800a936:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800a938:	4618      	mov	r0, r3
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bc80      	pop	{r7}
 800a940:	4770      	bx	lr

0800a942 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a942:	b480      	push	{r7}
 800a944:	b085      	sub	sp, #20
 800a946:	af00      	add	r7, sp, #0
 800a948:	4603      	mov	r3, r0
 800a94a:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800a94c:	2300      	movs	r3, #0
 800a94e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800a950:	79fb      	ldrb	r3, [r7, #7]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d102      	bne.n	800a95c <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800a956:	230f      	movs	r3, #15
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	e001      	b.n	800a960 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800a95c:	2316      	movs	r3, #22
 800a95e:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800a960:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	bc80      	pop	{r7}
 800a96a:	4770      	bx	lr

0800a96c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	33f1      	adds	r3, #241	@ 0xf1
 800a978:	2210      	movs	r2, #16
 800a97a:	2100      	movs	r1, #0
 800a97c:	4618      	mov	r0, r3
 800a97e:	f00c f883 	bl	8016a88 <memset1>
    ctx->M_n = 0;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	22f0      	movs	r2, #240	@ 0xf0
 800a98e:	2100      	movs	r1, #0
 800a990:	4618      	mov	r0, r3
 800a992:	f00c f879 	bl	8016a88 <memset1>
}
 800a996:	bf00      	nop
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b082      	sub	sp, #8
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	2110      	movs	r1, #16
 800a9ae:	6838      	ldr	r0, [r7, #0]
 800a9b0:	f000 fe5c 	bl	800b66c <lorawan_aes_set_key>
}
 800a9b4:	bf00      	nop
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b08c      	sub	sp, #48	@ 0x30
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f000 80a1 	beq.w	800ab16 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a9da:	f1c3 0310 	rsb	r3, r3, #16
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	bf28      	it	cs
 800a9e4:	4613      	movcs	r3, r2
 800a9e6:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a9f4:	4413      	add	r3, r2
 800a9f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9f8:	b292      	uxth	r2, r2
 800a9fa:	68b9      	ldr	r1, [r7, #8]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f00c f808 	bl	8016a12 <memcpy1>
        ctx->M_n += mlen;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800aa08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0a:	441a      	add	r2, r3
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aa18:	2b0f      	cmp	r3, #15
 800aa1a:	f240 808d 	bls.w	800ab38 <AES_CMAC_Update+0x17c>
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa22:	429a      	cmp	r2, r3
 800aa24:	f000 8088 	beq.w	800ab38 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800aa28:	2300      	movs	r3, #0
 800aa2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa2c:	e015      	b.n	800aa5a <AES_CMAC_Update+0x9e>
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa32:	4413      	add	r3, r2
 800aa34:	33f1      	adds	r3, #241	@ 0xf1
 800aa36:	781a      	ldrb	r2, [r3, #0]
 800aa38:	68f9      	ldr	r1, [r7, #12]
 800aa3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3c:	440b      	add	r3, r1
 800aa3e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	4053      	eors	r3, r2
 800aa46:	b2d9      	uxtb	r1, r3
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4c:	4413      	add	r3, r2
 800aa4e:	33f1      	adds	r3, #241	@ 0xf1
 800aa50:	460a      	mov	r2, r1
 800aa52:	701a      	strb	r2, [r3, #0]
 800aa54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa56:	3301      	adds	r3, #1
 800aa58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5c:	2b0f      	cmp	r3, #15
 800aa5e:	dde6      	ble.n	800aa2e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800aa66:	f107 0314 	add.w	r3, r7, #20
 800aa6a:	2210      	movs	r2, #16
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f00b ffd0 	bl	8016a12 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	f107 0114 	add.w	r1, r7, #20
 800aa78:	f107 0314 	add.w	r3, r7, #20
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f000 fed3 	bl	800b828 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	33f1      	adds	r3, #241	@ 0xf1
 800aa86:	f107 0114 	add.w	r1, r7, #20
 800aa8a:	2210      	movs	r2, #16
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f00b ffc0 	bl	8016a12 <memcpy1>

        data += mlen;
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa96:	4413      	add	r3, r2
 800aa98:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800aaa2:	e038      	b.n	800ab16 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aaa8:	e013      	b.n	800aad2 <AES_CMAC_Update+0x116>
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaae:	4413      	add	r3, r2
 800aab0:	33f1      	adds	r3, #241	@ 0xf1
 800aab2:	781a      	ldrb	r2, [r3, #0]
 800aab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab6:	68b9      	ldr	r1, [r7, #8]
 800aab8:	440b      	add	r3, r1
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	4053      	eors	r3, r2
 800aabe:	b2d9      	uxtb	r1, r3
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac4:	4413      	add	r3, r2
 800aac6:	33f1      	adds	r3, #241	@ 0xf1
 800aac8:	460a      	mov	r2, r1
 800aaca:	701a      	strb	r2, [r3, #0]
 800aacc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aace:	3301      	adds	r3, #1
 800aad0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad4:	2b0f      	cmp	r3, #15
 800aad6:	dde8      	ble.n	800aaaa <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800aade:	f107 0314 	add.w	r3, r7, #20
 800aae2:	2210      	movs	r2, #16
 800aae4:	4618      	mov	r0, r3
 800aae6:	f00b ff94 	bl	8016a12 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	f107 0114 	add.w	r1, r7, #20
 800aaf0:	f107 0314 	add.w	r3, r7, #20
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f000 fe97 	bl	800b828 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	33f1      	adds	r3, #241	@ 0xf1
 800aafe:	f107 0114 	add.w	r1, r7, #20
 800ab02:	2210      	movs	r2, #16
 800ab04:	4618      	mov	r0, r3
 800ab06:	f00b ff84 	bl	8016a12 <memcpy1>

        data += 16;
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	3310      	adds	r3, #16
 800ab0e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	3b10      	subs	r3, #16
 800ab14:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b10      	cmp	r3, #16
 800ab1a:	d8c3      	bhi.n	800aaa4 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	b292      	uxth	r2, r2
 800ab26:	68b9      	ldr	r1, [r7, #8]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f00b ff72 	bl	8016a12 <memcpy1>
    ctx->M_n = len;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800ab36:	e000      	b.n	800ab3a <AES_CMAC_Update+0x17e>
            return;
 800ab38:	bf00      	nop
}
 800ab3a:	3730      	adds	r7, #48	@ 0x30
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b092      	sub	sp, #72	@ 0x48
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ab4a:	f107 031c 	add.w	r3, r7, #28
 800ab4e:	2210      	movs	r2, #16
 800ab50:	2100      	movs	r1, #0
 800ab52:	4618      	mov	r0, r3
 800ab54:	f00b ff98 	bl	8016a88 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ab58:	683a      	ldr	r2, [r7, #0]
 800ab5a:	f107 011c 	add.w	r1, r7, #28
 800ab5e:	f107 031c 	add.w	r3, r7, #28
 800ab62:	4618      	mov	r0, r3
 800ab64:	f000 fe60 	bl	800b828 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ab68:	7f3b      	ldrb	r3, [r7, #28]
 800ab6a:	b25b      	sxtb	r3, r3
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	da30      	bge.n	800abd2 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800ab70:	2300      	movs	r3, #0
 800ab72:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab74:	e01b      	b.n	800abae <AES_CMAC_Final+0x6e>
 800ab76:	f107 021c 	add.w	r2, r7, #28
 800ab7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab7c:	4413      	add	r3, r2
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	005b      	lsls	r3, r3, #1
 800ab82:	b25a      	sxtb	r2, r3
 800ab84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab86:	3301      	adds	r3, #1
 800ab88:	3348      	adds	r3, #72	@ 0x48
 800ab8a:	443b      	add	r3, r7
 800ab8c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ab90:	09db      	lsrs	r3, r3, #7
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	b25b      	sxtb	r3, r3
 800ab96:	4313      	orrs	r3, r2
 800ab98:	b25b      	sxtb	r3, r3
 800ab9a:	b2d9      	uxtb	r1, r3
 800ab9c:	f107 021c 	add.w	r2, r7, #28
 800aba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aba2:	4413      	add	r3, r2
 800aba4:	460a      	mov	r2, r1
 800aba6:	701a      	strb	r2, [r3, #0]
 800aba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abaa:	3301      	adds	r3, #1
 800abac:	647b      	str	r3, [r7, #68]	@ 0x44
 800abae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abb0:	2b0e      	cmp	r3, #14
 800abb2:	dde0      	ble.n	800ab76 <AES_CMAC_Final+0x36>
 800abb4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800abc0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800abc4:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800abc8:	43db      	mvns	r3, r3
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abd0:	e027      	b.n	800ac22 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800abd2:	2300      	movs	r3, #0
 800abd4:	643b      	str	r3, [r7, #64]	@ 0x40
 800abd6:	e01b      	b.n	800ac10 <AES_CMAC_Final+0xd0>
 800abd8:	f107 021c 	add.w	r2, r7, #28
 800abdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abde:	4413      	add	r3, r2
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	005b      	lsls	r3, r3, #1
 800abe4:	b25a      	sxtb	r2, r3
 800abe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abe8:	3301      	adds	r3, #1
 800abea:	3348      	adds	r3, #72	@ 0x48
 800abec:	443b      	add	r3, r7
 800abee:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800abf2:	09db      	lsrs	r3, r3, #7
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	b25b      	sxtb	r3, r3
 800abf8:	4313      	orrs	r3, r2
 800abfa:	b25b      	sxtb	r3, r3
 800abfc:	b2d9      	uxtb	r1, r3
 800abfe:	f107 021c 	add.w	r2, r7, #28
 800ac02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac04:	4413      	add	r3, r2
 800ac06:	460a      	mov	r2, r1
 800ac08:	701a      	strb	r2, [r3, #0]
 800ac0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac12:	2b0e      	cmp	r3, #14
 800ac14:	dde0      	ble.n	800abd8 <AES_CMAC_Final+0x98>
 800ac16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac1a:	005b      	lsls	r3, r3, #1
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ac28:	2b10      	cmp	r3, #16
 800ac2a:	d11d      	bne.n	800ac68 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac30:	e016      	b.n	800ac60 <AES_CMAC_Final+0x120>
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac36:	4413      	add	r3, r2
 800ac38:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ac3c:	781a      	ldrb	r2, [r3, #0]
 800ac3e:	f107 011c 	add.w	r1, r7, #28
 800ac42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac44:	440b      	add	r3, r1
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	4053      	eors	r3, r2
 800ac4a:	b2d9      	uxtb	r1, r3
 800ac4c:	683a      	ldr	r2, [r7, #0]
 800ac4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac50:	4413      	add	r3, r2
 800ac52:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ac56:	460a      	mov	r2, r1
 800ac58:	701a      	strb	r2, [r3, #0]
 800ac5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac62:	2b0f      	cmp	r3, #15
 800ac64:	dde5      	ble.n	800ac32 <AES_CMAC_Final+0xf2>
 800ac66:	e096      	b.n	800ad96 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800ac68:	7f3b      	ldrb	r3, [r7, #28]
 800ac6a:	b25b      	sxtb	r3, r3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	da30      	bge.n	800acd2 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800ac70:	2300      	movs	r3, #0
 800ac72:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ac74:	e01b      	b.n	800acae <AES_CMAC_Final+0x16e>
 800ac76:	f107 021c 	add.w	r2, r7, #28
 800ac7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7c:	4413      	add	r3, r2
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	005b      	lsls	r3, r3, #1
 800ac82:	b25a      	sxtb	r2, r3
 800ac84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac86:	3301      	adds	r3, #1
 800ac88:	3348      	adds	r3, #72	@ 0x48
 800ac8a:	443b      	add	r3, r7
 800ac8c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ac90:	09db      	lsrs	r3, r3, #7
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	b25b      	sxtb	r3, r3
 800ac96:	4313      	orrs	r3, r2
 800ac98:	b25b      	sxtb	r3, r3
 800ac9a:	b2d9      	uxtb	r1, r3
 800ac9c:	f107 021c 	add.w	r2, r7, #28
 800aca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca2:	4413      	add	r3, r2
 800aca4:	460a      	mov	r2, r1
 800aca6:	701a      	strb	r2, [r3, #0]
 800aca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acaa:	3301      	adds	r3, #1
 800acac:	63bb      	str	r3, [r7, #56]	@ 0x38
 800acae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb0:	2b0e      	cmp	r3, #14
 800acb2:	dde0      	ble.n	800ac76 <AES_CMAC_Final+0x136>
 800acb4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800acc0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800acc4:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800acc8:	43db      	mvns	r3, r3
 800acca:	b2db      	uxtb	r3, r3
 800accc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800acd0:	e027      	b.n	800ad22 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800acd2:	2300      	movs	r3, #0
 800acd4:	637b      	str	r3, [r7, #52]	@ 0x34
 800acd6:	e01b      	b.n	800ad10 <AES_CMAC_Final+0x1d0>
 800acd8:	f107 021c 	add.w	r2, r7, #28
 800acdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acde:	4413      	add	r3, r2
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	005b      	lsls	r3, r3, #1
 800ace4:	b25a      	sxtb	r2, r3
 800ace6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ace8:	3301      	adds	r3, #1
 800acea:	3348      	adds	r3, #72	@ 0x48
 800acec:	443b      	add	r3, r7
 800acee:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800acf2:	09db      	lsrs	r3, r3, #7
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	b25b      	sxtb	r3, r3
 800acf8:	4313      	orrs	r3, r2
 800acfa:	b25b      	sxtb	r3, r3
 800acfc:	b2d9      	uxtb	r1, r3
 800acfe:	f107 021c 	add.w	r2, r7, #28
 800ad02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad04:	4413      	add	r3, r2
 800ad06:	460a      	mov	r2, r1
 800ad08:	701a      	strb	r2, [r3, #0]
 800ad0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad12:	2b0e      	cmp	r3, #14
 800ad14:	dde0      	ble.n	800acd8 <AES_CMAC_Final+0x198>
 800ad16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad1a:	005b      	lsls	r3, r3, #1
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	2280      	movs	r2, #128	@ 0x80
 800ad2e:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800ad32:	e007      	b.n	800ad44 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ad3a:	683a      	ldr	r2, [r7, #0]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ad58:	2b0f      	cmp	r3, #15
 800ad5a:	d9eb      	bls.n	800ad34 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad60:	e016      	b.n	800ad90 <AES_CMAC_Final+0x250>
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad66:	4413      	add	r3, r2
 800ad68:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ad6c:	781a      	ldrb	r2, [r3, #0]
 800ad6e:	f107 011c 	add.w	r1, r7, #28
 800ad72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad74:	440b      	add	r3, r1
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	4053      	eors	r3, r2
 800ad7a:	b2d9      	uxtb	r1, r3
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad80:	4413      	add	r3, r2
 800ad82:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ad86:	460a      	mov	r2, r1
 800ad88:	701a      	strb	r2, [r3, #0]
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad92:	2b0f      	cmp	r3, #15
 800ad94:	dde5      	ble.n	800ad62 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800ad96:	2300      	movs	r3, #0
 800ad98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad9a:	e015      	b.n	800adc8 <AES_CMAC_Final+0x288>
 800ad9c:	683a      	ldr	r2, [r7, #0]
 800ad9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada0:	4413      	add	r3, r2
 800ada2:	33f1      	adds	r3, #241	@ 0xf1
 800ada4:	781a      	ldrb	r2, [r3, #0]
 800ada6:	6839      	ldr	r1, [r7, #0]
 800ada8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adaa:	440b      	add	r3, r1
 800adac:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	4053      	eors	r3, r2
 800adb4:	b2d9      	uxtb	r1, r3
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adba:	4413      	add	r3, r2
 800adbc:	33f1      	adds	r3, #241	@ 0xf1
 800adbe:	460a      	mov	r2, r1
 800adc0:	701a      	strb	r2, [r3, #0]
 800adc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adc4:	3301      	adds	r3, #1
 800adc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800adc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adca:	2b0f      	cmp	r3, #15
 800adcc:	dde6      	ble.n	800ad9c <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800add4:	f107 030c 	add.w	r3, r7, #12
 800add8:	2210      	movs	r2, #16
 800adda:	4618      	mov	r0, r3
 800addc:	f00b fe19 	bl	8016a12 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	f107 030c 	add.w	r3, r7, #12
 800ade6:	6879      	ldr	r1, [r7, #4]
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 fd1d 	bl	800b828 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800adee:	f107 031c 	add.w	r3, r7, #28
 800adf2:	2210      	movs	r2, #16
 800adf4:	2100      	movs	r1, #0
 800adf6:	4618      	mov	r0, r3
 800adf8:	f00b fe46 	bl	8016a88 <memset1>
}
 800adfc:	bf00      	nop
 800adfe:	3748      	adds	r7, #72	@ 0x48
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	781a      	ldrb	r2, [r3, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	7852      	ldrb	r2, [r2, #1]
 800ae1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	3302      	adds	r3, #2
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	7892      	ldrb	r2, [r2, #2]
 800ae28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3303      	adds	r3, #3
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	78d2      	ldrb	r2, [r2, #3]
 800ae32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	3304      	adds	r3, #4
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	7912      	ldrb	r2, [r2, #4]
 800ae3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	3305      	adds	r3, #5
 800ae42:	683a      	ldr	r2, [r7, #0]
 800ae44:	7952      	ldrb	r2, [r2, #5]
 800ae46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	3306      	adds	r3, #6
 800ae4c:	683a      	ldr	r2, [r7, #0]
 800ae4e:	7992      	ldrb	r2, [r2, #6]
 800ae50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	3307      	adds	r3, #7
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	79d2      	ldrb	r2, [r2, #7]
 800ae5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3308      	adds	r3, #8
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	7a12      	ldrb	r2, [r2, #8]
 800ae64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	3309      	adds	r3, #9
 800ae6a:	683a      	ldr	r2, [r7, #0]
 800ae6c:	7a52      	ldrb	r2, [r2, #9]
 800ae6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	330a      	adds	r3, #10
 800ae74:	683a      	ldr	r2, [r7, #0]
 800ae76:	7a92      	ldrb	r2, [r2, #10]
 800ae78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	330b      	adds	r3, #11
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	7ad2      	ldrb	r2, [r2, #11]
 800ae82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	330c      	adds	r3, #12
 800ae88:	683a      	ldr	r2, [r7, #0]
 800ae8a:	7b12      	ldrb	r2, [r2, #12]
 800ae8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	330d      	adds	r3, #13
 800ae92:	683a      	ldr	r2, [r7, #0]
 800ae94:	7b52      	ldrb	r2, [r2, #13]
 800ae96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	330e      	adds	r3, #14
 800ae9c:	683a      	ldr	r2, [r7, #0]
 800ae9e:	7b92      	ldrb	r2, [r2, #14]
 800aea0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	330f      	adds	r3, #15
 800aea6:	683a      	ldr	r2, [r7, #0]
 800aea8:	7bd2      	ldrb	r2, [r2, #15]
 800aeaa:	701a      	strb	r2, [r3, #0]
#endif
}
 800aeac:	bf00      	nop
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bc80      	pop	{r7}
 800aeb4:	4770      	bx	lr

0800aeb6 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800aeb6:	b480      	push	{r7}
 800aeb8:	b085      	sub	sp, #20
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	60f8      	str	r0, [r7, #12]
 800aebe:	60b9      	str	r1, [r7, #8]
 800aec0:	4613      	mov	r3, r2
 800aec2:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800aec4:	e007      	b.n	800aed6 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	1c53      	adds	r3, r2, #1
 800aeca:	60bb      	str	r3, [r7, #8]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	1c59      	adds	r1, r3, #1
 800aed0:	60f9      	str	r1, [r7, #12]
 800aed2:	7812      	ldrb	r2, [r2, #0]
 800aed4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800aed6:	79fb      	ldrb	r3, [r7, #7]
 800aed8:	1e5a      	subs	r2, r3, #1
 800aeda:	71fa      	strb	r2, [r7, #7]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1f2      	bne.n	800aec6 <copy_block_nn+0x10>
}
 800aee0:	bf00      	nop
 800aee2:	bf00      	nop
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bc80      	pop	{r7}
 800aeea:	4770      	bx	lr

0800aeec <xor_block>:

static void xor_block( void *d, const void *s )
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	781a      	ldrb	r2, [r3, #0]
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	4053      	eors	r3, r2
 800af00:	b2da      	uxtb	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	3301      	adds	r3, #1
 800af0a:	7819      	ldrb	r1, [r3, #0]
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	3301      	adds	r3, #1
 800af10:	781a      	ldrb	r2, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3301      	adds	r3, #1
 800af16:	404a      	eors	r2, r1
 800af18:	b2d2      	uxtb	r2, r2
 800af1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	3302      	adds	r3, #2
 800af20:	7819      	ldrb	r1, [r3, #0]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	3302      	adds	r3, #2
 800af26:	781a      	ldrb	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	3302      	adds	r3, #2
 800af2c:	404a      	eors	r2, r1
 800af2e:	b2d2      	uxtb	r2, r2
 800af30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	3303      	adds	r3, #3
 800af36:	7819      	ldrb	r1, [r3, #0]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	3303      	adds	r3, #3
 800af3c:	781a      	ldrb	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	3303      	adds	r3, #3
 800af42:	404a      	eors	r2, r1
 800af44:	b2d2      	uxtb	r2, r2
 800af46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	3304      	adds	r3, #4
 800af4c:	7819      	ldrb	r1, [r3, #0]
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	3304      	adds	r3, #4
 800af52:	781a      	ldrb	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	3304      	adds	r3, #4
 800af58:	404a      	eors	r2, r1
 800af5a:	b2d2      	uxtb	r2, r2
 800af5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	3305      	adds	r3, #5
 800af62:	7819      	ldrb	r1, [r3, #0]
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	3305      	adds	r3, #5
 800af68:	781a      	ldrb	r2, [r3, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	3305      	adds	r3, #5
 800af6e:	404a      	eors	r2, r1
 800af70:	b2d2      	uxtb	r2, r2
 800af72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3306      	adds	r3, #6
 800af78:	7819      	ldrb	r1, [r3, #0]
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	3306      	adds	r3, #6
 800af7e:	781a      	ldrb	r2, [r3, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	3306      	adds	r3, #6
 800af84:	404a      	eors	r2, r1
 800af86:	b2d2      	uxtb	r2, r2
 800af88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3307      	adds	r3, #7
 800af8e:	7819      	ldrb	r1, [r3, #0]
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	3307      	adds	r3, #7
 800af94:	781a      	ldrb	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	3307      	adds	r3, #7
 800af9a:	404a      	eors	r2, r1
 800af9c:	b2d2      	uxtb	r2, r2
 800af9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	3308      	adds	r3, #8
 800afa4:	7819      	ldrb	r1, [r3, #0]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	3308      	adds	r3, #8
 800afaa:	781a      	ldrb	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	3308      	adds	r3, #8
 800afb0:	404a      	eors	r2, r1
 800afb2:	b2d2      	uxtb	r2, r2
 800afb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	3309      	adds	r3, #9
 800afba:	7819      	ldrb	r1, [r3, #0]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	3309      	adds	r3, #9
 800afc0:	781a      	ldrb	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	3309      	adds	r3, #9
 800afc6:	404a      	eors	r2, r1
 800afc8:	b2d2      	uxtb	r2, r2
 800afca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	330a      	adds	r3, #10
 800afd0:	7819      	ldrb	r1, [r3, #0]
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	330a      	adds	r3, #10
 800afd6:	781a      	ldrb	r2, [r3, #0]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	330a      	adds	r3, #10
 800afdc:	404a      	eors	r2, r1
 800afde:	b2d2      	uxtb	r2, r2
 800afe0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	330b      	adds	r3, #11
 800afe6:	7819      	ldrb	r1, [r3, #0]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	330b      	adds	r3, #11
 800afec:	781a      	ldrb	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	330b      	adds	r3, #11
 800aff2:	404a      	eors	r2, r1
 800aff4:	b2d2      	uxtb	r2, r2
 800aff6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	330c      	adds	r3, #12
 800affc:	7819      	ldrb	r1, [r3, #0]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	330c      	adds	r3, #12
 800b002:	781a      	ldrb	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	330c      	adds	r3, #12
 800b008:	404a      	eors	r2, r1
 800b00a:	b2d2      	uxtb	r2, r2
 800b00c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	330d      	adds	r3, #13
 800b012:	7819      	ldrb	r1, [r3, #0]
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	330d      	adds	r3, #13
 800b018:	781a      	ldrb	r2, [r3, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	330d      	adds	r3, #13
 800b01e:	404a      	eors	r2, r1
 800b020:	b2d2      	uxtb	r2, r2
 800b022:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	330e      	adds	r3, #14
 800b028:	7819      	ldrb	r1, [r3, #0]
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	330e      	adds	r3, #14
 800b02e:	781a      	ldrb	r2, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	330e      	adds	r3, #14
 800b034:	404a      	eors	r2, r1
 800b036:	b2d2      	uxtb	r2, r2
 800b038:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	330f      	adds	r3, #15
 800b03e:	7819      	ldrb	r1, [r3, #0]
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	330f      	adds	r3, #15
 800b044:	781a      	ldrb	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	330f      	adds	r3, #15
 800b04a:	404a      	eors	r2, r1
 800b04c:	b2d2      	uxtb	r2, r2
 800b04e:	701a      	strb	r2, [r3, #0]
#endif
}
 800b050:	bf00      	nop
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	bc80      	pop	{r7}
 800b058:	4770      	bx	lr

0800b05a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b05a:	b480      	push	{r7}
 800b05c:	b085      	sub	sp, #20
 800b05e:	af00      	add	r7, sp, #0
 800b060:	60f8      	str	r0, [r7, #12]
 800b062:	60b9      	str	r1, [r7, #8]
 800b064:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	781a      	ldrb	r2, [r3, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	4053      	eors	r3, r2
 800b070:	b2da      	uxtb	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	3301      	adds	r3, #1
 800b07a:	7819      	ldrb	r1, [r3, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	3301      	adds	r3, #1
 800b080:	781a      	ldrb	r2, [r3, #0]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	3301      	adds	r3, #1
 800b086:	404a      	eors	r2, r1
 800b088:	b2d2      	uxtb	r2, r2
 800b08a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	3302      	adds	r3, #2
 800b090:	7819      	ldrb	r1, [r3, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	3302      	adds	r3, #2
 800b096:	781a      	ldrb	r2, [r3, #0]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3302      	adds	r3, #2
 800b09c:	404a      	eors	r2, r1
 800b09e:	b2d2      	uxtb	r2, r2
 800b0a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	3303      	adds	r3, #3
 800b0a6:	7819      	ldrb	r1, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	3303      	adds	r3, #3
 800b0ac:	781a      	ldrb	r2, [r3, #0]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	3303      	adds	r3, #3
 800b0b2:	404a      	eors	r2, r1
 800b0b4:	b2d2      	uxtb	r2, r2
 800b0b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	3304      	adds	r3, #4
 800b0bc:	7819      	ldrb	r1, [r3, #0]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	3304      	adds	r3, #4
 800b0c2:	781a      	ldrb	r2, [r3, #0]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	3304      	adds	r3, #4
 800b0c8:	404a      	eors	r2, r1
 800b0ca:	b2d2      	uxtb	r2, r2
 800b0cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	3305      	adds	r3, #5
 800b0d2:	7819      	ldrb	r1, [r3, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	3305      	adds	r3, #5
 800b0d8:	781a      	ldrb	r2, [r3, #0]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	3305      	adds	r3, #5
 800b0de:	404a      	eors	r2, r1
 800b0e0:	b2d2      	uxtb	r2, r2
 800b0e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	3306      	adds	r3, #6
 800b0e8:	7819      	ldrb	r1, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	3306      	adds	r3, #6
 800b0ee:	781a      	ldrb	r2, [r3, #0]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	3306      	adds	r3, #6
 800b0f4:	404a      	eors	r2, r1
 800b0f6:	b2d2      	uxtb	r2, r2
 800b0f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	3307      	adds	r3, #7
 800b0fe:	7819      	ldrb	r1, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	3307      	adds	r3, #7
 800b104:	781a      	ldrb	r2, [r3, #0]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	3307      	adds	r3, #7
 800b10a:	404a      	eors	r2, r1
 800b10c:	b2d2      	uxtb	r2, r2
 800b10e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	3308      	adds	r3, #8
 800b114:	7819      	ldrb	r1, [r3, #0]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	3308      	adds	r3, #8
 800b11a:	781a      	ldrb	r2, [r3, #0]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	3308      	adds	r3, #8
 800b120:	404a      	eors	r2, r1
 800b122:	b2d2      	uxtb	r2, r2
 800b124:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	3309      	adds	r3, #9
 800b12a:	7819      	ldrb	r1, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3309      	adds	r3, #9
 800b130:	781a      	ldrb	r2, [r3, #0]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	3309      	adds	r3, #9
 800b136:	404a      	eors	r2, r1
 800b138:	b2d2      	uxtb	r2, r2
 800b13a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	330a      	adds	r3, #10
 800b140:	7819      	ldrb	r1, [r3, #0]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	330a      	adds	r3, #10
 800b146:	781a      	ldrb	r2, [r3, #0]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	330a      	adds	r3, #10
 800b14c:	404a      	eors	r2, r1
 800b14e:	b2d2      	uxtb	r2, r2
 800b150:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	330b      	adds	r3, #11
 800b156:	7819      	ldrb	r1, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	330b      	adds	r3, #11
 800b15c:	781a      	ldrb	r2, [r3, #0]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	330b      	adds	r3, #11
 800b162:	404a      	eors	r2, r1
 800b164:	b2d2      	uxtb	r2, r2
 800b166:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	330c      	adds	r3, #12
 800b16c:	7819      	ldrb	r1, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	330c      	adds	r3, #12
 800b172:	781a      	ldrb	r2, [r3, #0]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	330c      	adds	r3, #12
 800b178:	404a      	eors	r2, r1
 800b17a:	b2d2      	uxtb	r2, r2
 800b17c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	330d      	adds	r3, #13
 800b182:	7819      	ldrb	r1, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	330d      	adds	r3, #13
 800b188:	781a      	ldrb	r2, [r3, #0]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	330d      	adds	r3, #13
 800b18e:	404a      	eors	r2, r1
 800b190:	b2d2      	uxtb	r2, r2
 800b192:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	330e      	adds	r3, #14
 800b198:	7819      	ldrb	r1, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	330e      	adds	r3, #14
 800b19e:	781a      	ldrb	r2, [r3, #0]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	330e      	adds	r3, #14
 800b1a4:	404a      	eors	r2, r1
 800b1a6:	b2d2      	uxtb	r2, r2
 800b1a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	330f      	adds	r3, #15
 800b1ae:	7819      	ldrb	r1, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	330f      	adds	r3, #15
 800b1b4:	781a      	ldrb	r2, [r3, #0]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	330f      	adds	r3, #15
 800b1ba:	404a      	eors	r2, r1
 800b1bc:	b2d2      	uxtb	r2, r2
 800b1be:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b1c0:	bf00      	nop
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bc80      	pop	{r7}
 800b1c8:	4770      	bx	lr

0800b1ca <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b082      	sub	sp, #8
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
 800b1d2:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f7ff fe88 	bl	800aeec <xor_block>
}
 800b1dc:	bf00      	nop
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	4b48      	ldr	r3, [pc, #288]	@ (800b314 <shift_sub_rows+0x130>)
 800b1f4:	5c9a      	ldrb	r2, [r3, r2]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	701a      	strb	r2, [r3, #0]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	3304      	adds	r3, #4
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	4619      	mov	r1, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3304      	adds	r3, #4
 800b206:	4a43      	ldr	r2, [pc, #268]	@ (800b314 <shift_sub_rows+0x130>)
 800b208:	5c52      	ldrb	r2, [r2, r1]
 800b20a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	3308      	adds	r3, #8
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	4619      	mov	r1, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	3308      	adds	r3, #8
 800b218:	4a3e      	ldr	r2, [pc, #248]	@ (800b314 <shift_sub_rows+0x130>)
 800b21a:	5c52      	ldrb	r2, [r2, r1]
 800b21c:	701a      	strb	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	330c      	adds	r3, #12
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	4619      	mov	r1, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	330c      	adds	r3, #12
 800b22a:	4a3a      	ldr	r2, [pc, #232]	@ (800b314 <shift_sub_rows+0x130>)
 800b22c:	5c52      	ldrb	r2, [r2, r1]
 800b22e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	785b      	ldrb	r3, [r3, #1]
 800b234:	73fb      	strb	r3, [r7, #15]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	3305      	adds	r3, #5
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	4619      	mov	r1, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	3301      	adds	r3, #1
 800b242:	4a34      	ldr	r2, [pc, #208]	@ (800b314 <shift_sub_rows+0x130>)
 800b244:	5c52      	ldrb	r2, [r2, r1]
 800b246:	701a      	strb	r2, [r3, #0]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3309      	adds	r3, #9
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	4619      	mov	r1, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	3305      	adds	r3, #5
 800b254:	4a2f      	ldr	r2, [pc, #188]	@ (800b314 <shift_sub_rows+0x130>)
 800b256:	5c52      	ldrb	r2, [r2, r1]
 800b258:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	330d      	adds	r3, #13
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	4619      	mov	r1, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	3309      	adds	r3, #9
 800b266:	4a2b      	ldr	r2, [pc, #172]	@ (800b314 <shift_sub_rows+0x130>)
 800b268:	5c52      	ldrb	r2, [r2, r1]
 800b26a:	701a      	strb	r2, [r3, #0]
 800b26c:	7bfa      	ldrb	r2, [r7, #15]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	330d      	adds	r3, #13
 800b272:	4928      	ldr	r1, [pc, #160]	@ (800b314 <shift_sub_rows+0x130>)
 800b274:	5c8a      	ldrb	r2, [r1, r2]
 800b276:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	789b      	ldrb	r3, [r3, #2]
 800b27c:	73fb      	strb	r3, [r7, #15]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	330a      	adds	r3, #10
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	4619      	mov	r1, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	3302      	adds	r3, #2
 800b28a:	4a22      	ldr	r2, [pc, #136]	@ (800b314 <shift_sub_rows+0x130>)
 800b28c:	5c52      	ldrb	r2, [r2, r1]
 800b28e:	701a      	strb	r2, [r3, #0]
 800b290:	7bfa      	ldrb	r2, [r7, #15]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	330a      	adds	r3, #10
 800b296:	491f      	ldr	r1, [pc, #124]	@ (800b314 <shift_sub_rows+0x130>)
 800b298:	5c8a      	ldrb	r2, [r1, r2]
 800b29a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	799b      	ldrb	r3, [r3, #6]
 800b2a0:	73fb      	strb	r3, [r7, #15]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	330e      	adds	r3, #14
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3306      	adds	r3, #6
 800b2ae:	4a19      	ldr	r2, [pc, #100]	@ (800b314 <shift_sub_rows+0x130>)
 800b2b0:	5c52      	ldrb	r2, [r2, r1]
 800b2b2:	701a      	strb	r2, [r3, #0]
 800b2b4:	7bfa      	ldrb	r2, [r7, #15]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	330e      	adds	r3, #14
 800b2ba:	4916      	ldr	r1, [pc, #88]	@ (800b314 <shift_sub_rows+0x130>)
 800b2bc:	5c8a      	ldrb	r2, [r1, r2]
 800b2be:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	7bdb      	ldrb	r3, [r3, #15]
 800b2c4:	73fb      	strb	r3, [r7, #15]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	330b      	adds	r3, #11
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	330f      	adds	r3, #15
 800b2d2:	4a10      	ldr	r2, [pc, #64]	@ (800b314 <shift_sub_rows+0x130>)
 800b2d4:	5c52      	ldrb	r2, [r2, r1]
 800b2d6:	701a      	strb	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	3307      	adds	r3, #7
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	330b      	adds	r3, #11
 800b2e4:	4a0b      	ldr	r2, [pc, #44]	@ (800b314 <shift_sub_rows+0x130>)
 800b2e6:	5c52      	ldrb	r2, [r2, r1]
 800b2e8:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	3303      	adds	r3, #3
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	3307      	adds	r3, #7
 800b2f6:	4a07      	ldr	r2, [pc, #28]	@ (800b314 <shift_sub_rows+0x130>)
 800b2f8:	5c52      	ldrb	r2, [r2, r1]
 800b2fa:	701a      	strb	r2, [r3, #0]
 800b2fc:	7bfa      	ldrb	r2, [r7, #15]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	3303      	adds	r3, #3
 800b302:	4904      	ldr	r1, [pc, #16]	@ (800b314 <shift_sub_rows+0x130>)
 800b304:	5c8a      	ldrb	r2, [r1, r2]
 800b306:	701a      	strb	r2, [r3, #0]
}
 800b308:	bf00      	nop
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bc80      	pop	{r7}
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	0801e734 	.word	0x0801e734

0800b318 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b318:	b580      	push	{r7, lr}
 800b31a:	b086      	sub	sp, #24
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b320:	f107 0308 	add.w	r3, r7, #8
 800b324:	6879      	ldr	r1, [r7, #4]
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff fd6c 	bl	800ae04 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b32c:	7a3b      	ldrb	r3, [r7, #8]
 800b32e:	461a      	mov	r2, r3
 800b330:	4b9a      	ldr	r3, [pc, #616]	@ (800b59c <mix_sub_columns+0x284>)
 800b332:	5c9a      	ldrb	r2, [r3, r2]
 800b334:	7b7b      	ldrb	r3, [r7, #13]
 800b336:	4619      	mov	r1, r3
 800b338:	4b99      	ldr	r3, [pc, #612]	@ (800b5a0 <mix_sub_columns+0x288>)
 800b33a:	5c5b      	ldrb	r3, [r3, r1]
 800b33c:	4053      	eors	r3, r2
 800b33e:	b2da      	uxtb	r2, r3
 800b340:	7cbb      	ldrb	r3, [r7, #18]
 800b342:	4619      	mov	r1, r3
 800b344:	4b97      	ldr	r3, [pc, #604]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b346:	5c5b      	ldrb	r3, [r3, r1]
 800b348:	4053      	eors	r3, r2
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
 800b34e:	4619      	mov	r1, r3
 800b350:	4b94      	ldr	r3, [pc, #592]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b352:	5c5b      	ldrb	r3, [r3, r1]
 800b354:	4053      	eors	r3, r2
 800b356:	b2da      	uxtb	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b35c:	7a3b      	ldrb	r3, [r7, #8]
 800b35e:	461a      	mov	r2, r3
 800b360:	4b90      	ldr	r3, [pc, #576]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b362:	5c9a      	ldrb	r2, [r3, r2]
 800b364:	7b7b      	ldrb	r3, [r7, #13]
 800b366:	4619      	mov	r1, r3
 800b368:	4b8c      	ldr	r3, [pc, #560]	@ (800b59c <mix_sub_columns+0x284>)
 800b36a:	5c5b      	ldrb	r3, [r3, r1]
 800b36c:	4053      	eors	r3, r2
 800b36e:	b2da      	uxtb	r2, r3
 800b370:	7cbb      	ldrb	r3, [r7, #18]
 800b372:	4619      	mov	r1, r3
 800b374:	4b8a      	ldr	r3, [pc, #552]	@ (800b5a0 <mix_sub_columns+0x288>)
 800b376:	5c5b      	ldrb	r3, [r3, r1]
 800b378:	4053      	eors	r3, r2
 800b37a:	b2d9      	uxtb	r1, r3
 800b37c:	7dfb      	ldrb	r3, [r7, #23]
 800b37e:	461a      	mov	r2, r3
 800b380:	4b88      	ldr	r3, [pc, #544]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b382:	5c9a      	ldrb	r2, [r3, r2]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	3301      	adds	r3, #1
 800b388:	404a      	eors	r2, r1
 800b38a:	b2d2      	uxtb	r2, r2
 800b38c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b38e:	7a3b      	ldrb	r3, [r7, #8]
 800b390:	461a      	mov	r2, r3
 800b392:	4b84      	ldr	r3, [pc, #528]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b394:	5c9a      	ldrb	r2, [r3, r2]
 800b396:	7b7b      	ldrb	r3, [r7, #13]
 800b398:	4619      	mov	r1, r3
 800b39a:	4b82      	ldr	r3, [pc, #520]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b39c:	5c5b      	ldrb	r3, [r3, r1]
 800b39e:	4053      	eors	r3, r2
 800b3a0:	b2da      	uxtb	r2, r3
 800b3a2:	7cbb      	ldrb	r3, [r7, #18]
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4b7d      	ldr	r3, [pc, #500]	@ (800b59c <mix_sub_columns+0x284>)
 800b3a8:	5c5b      	ldrb	r3, [r3, r1]
 800b3aa:	4053      	eors	r3, r2
 800b3ac:	b2d9      	uxtb	r1, r3
 800b3ae:	7dfb      	ldrb	r3, [r7, #23]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	4b7b      	ldr	r3, [pc, #492]	@ (800b5a0 <mix_sub_columns+0x288>)
 800b3b4:	5c9a      	ldrb	r2, [r3, r2]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	3302      	adds	r3, #2
 800b3ba:	404a      	eors	r2, r1
 800b3bc:	b2d2      	uxtb	r2, r2
 800b3be:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b3c0:	7a3b      	ldrb	r3, [r7, #8]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	4b76      	ldr	r3, [pc, #472]	@ (800b5a0 <mix_sub_columns+0x288>)
 800b3c6:	5c9a      	ldrb	r2, [r3, r2]
 800b3c8:	7b7b      	ldrb	r3, [r7, #13]
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	4b75      	ldr	r3, [pc, #468]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b3ce:	5c5b      	ldrb	r3, [r3, r1]
 800b3d0:	4053      	eors	r3, r2
 800b3d2:	b2da      	uxtb	r2, r3
 800b3d4:	7cbb      	ldrb	r3, [r7, #18]
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	4b72      	ldr	r3, [pc, #456]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b3da:	5c5b      	ldrb	r3, [r3, r1]
 800b3dc:	4053      	eors	r3, r2
 800b3de:	b2d9      	uxtb	r1, r3
 800b3e0:	7dfb      	ldrb	r3, [r7, #23]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	4b6d      	ldr	r3, [pc, #436]	@ (800b59c <mix_sub_columns+0x284>)
 800b3e6:	5c9a      	ldrb	r2, [r3, r2]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	3303      	adds	r3, #3
 800b3ec:	404a      	eors	r2, r1
 800b3ee:	b2d2      	uxtb	r2, r2
 800b3f0:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b3f2:	7b3b      	ldrb	r3, [r7, #12]
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	4b69      	ldr	r3, [pc, #420]	@ (800b59c <mix_sub_columns+0x284>)
 800b3f8:	5c9a      	ldrb	r2, [r3, r2]
 800b3fa:	7c7b      	ldrb	r3, [r7, #17]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4b68      	ldr	r3, [pc, #416]	@ (800b5a0 <mix_sub_columns+0x288>)
 800b400:	5c5b      	ldrb	r3, [r3, r1]
 800b402:	4053      	eors	r3, r2
 800b404:	b2da      	uxtb	r2, r3
 800b406:	7dbb      	ldrb	r3, [r7, #22]
 800b408:	4619      	mov	r1, r3
 800b40a:	4b66      	ldr	r3, [pc, #408]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b40c:	5c5b      	ldrb	r3, [r3, r1]
 800b40e:	4053      	eors	r3, r2
 800b410:	b2d9      	uxtb	r1, r3
 800b412:	7afb      	ldrb	r3, [r7, #11]
 800b414:	461a      	mov	r2, r3
 800b416:	4b63      	ldr	r3, [pc, #396]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b418:	5c9a      	ldrb	r2, [r3, r2]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	3304      	adds	r3, #4
 800b41e:	404a      	eors	r2, r1
 800b420:	b2d2      	uxtb	r2, r2
 800b422:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b424:	7b3b      	ldrb	r3, [r7, #12]
 800b426:	461a      	mov	r2, r3
 800b428:	4b5e      	ldr	r3, [pc, #376]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b42a:	5c9a      	ldrb	r2, [r3, r2]
 800b42c:	7c7b      	ldrb	r3, [r7, #17]
 800b42e:	4619      	mov	r1, r3
 800b430:	4b5a      	ldr	r3, [pc, #360]	@ (800b59c <mix_sub_columns+0x284>)
 800b432:	5c5b      	ldrb	r3, [r3, r1]
 800b434:	4053      	eors	r3, r2
 800b436:	b2da      	uxtb	r2, r3
 800b438:	7dbb      	ldrb	r3, [r7, #22]
 800b43a:	4619      	mov	r1, r3
 800b43c:	4b58      	ldr	r3, [pc, #352]	@ (800b5a0 <mix_sub_columns+0x288>)
 800b43e:	5c5b      	ldrb	r3, [r3, r1]
 800b440:	4053      	eors	r3, r2
 800b442:	b2d9      	uxtb	r1, r3
 800b444:	7afb      	ldrb	r3, [r7, #11]
 800b446:	461a      	mov	r2, r3
 800b448:	4b56      	ldr	r3, [pc, #344]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b44a:	5c9a      	ldrb	r2, [r3, r2]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	3305      	adds	r3, #5
 800b450:	404a      	eors	r2, r1
 800b452:	b2d2      	uxtb	r2, r2
 800b454:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b456:	7b3b      	ldrb	r3, [r7, #12]
 800b458:	461a      	mov	r2, r3
 800b45a:	4b52      	ldr	r3, [pc, #328]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b45c:	5c9a      	ldrb	r2, [r3, r2]
 800b45e:	7c7b      	ldrb	r3, [r7, #17]
 800b460:	4619      	mov	r1, r3
 800b462:	4b50      	ldr	r3, [pc, #320]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b464:	5c5b      	ldrb	r3, [r3, r1]
 800b466:	4053      	eors	r3, r2
 800b468:	b2da      	uxtb	r2, r3
 800b46a:	7dbb      	ldrb	r3, [r7, #22]
 800b46c:	4619      	mov	r1, r3
 800b46e:	4b4b      	ldr	r3, [pc, #300]	@ (800b59c <mix_sub_columns+0x284>)
 800b470:	5c5b      	ldrb	r3, [r3, r1]
 800b472:	4053      	eors	r3, r2
 800b474:	b2d9      	uxtb	r1, r3
 800b476:	7afb      	ldrb	r3, [r7, #11]
 800b478:	461a      	mov	r2, r3
 800b47a:	4b49      	ldr	r3, [pc, #292]	@ (800b5a0 <mix_sub_columns+0x288>)
 800b47c:	5c9a      	ldrb	r2, [r3, r2]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	3306      	adds	r3, #6
 800b482:	404a      	eors	r2, r1
 800b484:	b2d2      	uxtb	r2, r2
 800b486:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b488:	7b3b      	ldrb	r3, [r7, #12]
 800b48a:	461a      	mov	r2, r3
 800b48c:	4b44      	ldr	r3, [pc, #272]	@ (800b5a0 <mix_sub_columns+0x288>)
 800b48e:	5c9a      	ldrb	r2, [r3, r2]
 800b490:	7c7b      	ldrb	r3, [r7, #17]
 800b492:	4619      	mov	r1, r3
 800b494:	4b43      	ldr	r3, [pc, #268]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b496:	5c5b      	ldrb	r3, [r3, r1]
 800b498:	4053      	eors	r3, r2
 800b49a:	b2da      	uxtb	r2, r3
 800b49c:	7dbb      	ldrb	r3, [r7, #22]
 800b49e:	4619      	mov	r1, r3
 800b4a0:	4b40      	ldr	r3, [pc, #256]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b4a2:	5c5b      	ldrb	r3, [r3, r1]
 800b4a4:	4053      	eors	r3, r2
 800b4a6:	b2d9      	uxtb	r1, r3
 800b4a8:	7afb      	ldrb	r3, [r7, #11]
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	4b3b      	ldr	r3, [pc, #236]	@ (800b59c <mix_sub_columns+0x284>)
 800b4ae:	5c9a      	ldrb	r2, [r3, r2]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	3307      	adds	r3, #7
 800b4b4:	404a      	eors	r2, r1
 800b4b6:	b2d2      	uxtb	r2, r2
 800b4b8:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b4ba:	7c3b      	ldrb	r3, [r7, #16]
 800b4bc:	461a      	mov	r2, r3
 800b4be:	4b37      	ldr	r3, [pc, #220]	@ (800b59c <mix_sub_columns+0x284>)
 800b4c0:	5c9a      	ldrb	r2, [r3, r2]
 800b4c2:	7d7b      	ldrb	r3, [r7, #21]
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	4b36      	ldr	r3, [pc, #216]	@ (800b5a0 <mix_sub_columns+0x288>)
 800b4c8:	5c5b      	ldrb	r3, [r3, r1]
 800b4ca:	4053      	eors	r3, r2
 800b4cc:	b2da      	uxtb	r2, r3
 800b4ce:	7abb      	ldrb	r3, [r7, #10]
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	4b34      	ldr	r3, [pc, #208]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b4d4:	5c5b      	ldrb	r3, [r3, r1]
 800b4d6:	4053      	eors	r3, r2
 800b4d8:	b2d9      	uxtb	r1, r3
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	4b31      	ldr	r3, [pc, #196]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b4e0:	5c9a      	ldrb	r2, [r3, r2]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	3308      	adds	r3, #8
 800b4e6:	404a      	eors	r2, r1
 800b4e8:	b2d2      	uxtb	r2, r2
 800b4ea:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b4ec:	7c3b      	ldrb	r3, [r7, #16]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	4b2c      	ldr	r3, [pc, #176]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b4f2:	5c9a      	ldrb	r2, [r3, r2]
 800b4f4:	7d7b      	ldrb	r3, [r7, #21]
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	4b28      	ldr	r3, [pc, #160]	@ (800b59c <mix_sub_columns+0x284>)
 800b4fa:	5c5b      	ldrb	r3, [r3, r1]
 800b4fc:	4053      	eors	r3, r2
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	7abb      	ldrb	r3, [r7, #10]
 800b502:	4619      	mov	r1, r3
 800b504:	4b26      	ldr	r3, [pc, #152]	@ (800b5a0 <mix_sub_columns+0x288>)
 800b506:	5c5b      	ldrb	r3, [r3, r1]
 800b508:	4053      	eors	r3, r2
 800b50a:	b2d9      	uxtb	r1, r3
 800b50c:	7bfb      	ldrb	r3, [r7, #15]
 800b50e:	461a      	mov	r2, r3
 800b510:	4b24      	ldr	r3, [pc, #144]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b512:	5c9a      	ldrb	r2, [r3, r2]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	3309      	adds	r3, #9
 800b518:	404a      	eors	r2, r1
 800b51a:	b2d2      	uxtb	r2, r2
 800b51c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b51e:	7c3b      	ldrb	r3, [r7, #16]
 800b520:	461a      	mov	r2, r3
 800b522:	4b20      	ldr	r3, [pc, #128]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b524:	5c9a      	ldrb	r2, [r3, r2]
 800b526:	7d7b      	ldrb	r3, [r7, #21]
 800b528:	4619      	mov	r1, r3
 800b52a:	4b1e      	ldr	r3, [pc, #120]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b52c:	5c5b      	ldrb	r3, [r3, r1]
 800b52e:	4053      	eors	r3, r2
 800b530:	b2da      	uxtb	r2, r3
 800b532:	7abb      	ldrb	r3, [r7, #10]
 800b534:	4619      	mov	r1, r3
 800b536:	4b19      	ldr	r3, [pc, #100]	@ (800b59c <mix_sub_columns+0x284>)
 800b538:	5c5b      	ldrb	r3, [r3, r1]
 800b53a:	4053      	eors	r3, r2
 800b53c:	b2d9      	uxtb	r1, r3
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
 800b540:	461a      	mov	r2, r3
 800b542:	4b17      	ldr	r3, [pc, #92]	@ (800b5a0 <mix_sub_columns+0x288>)
 800b544:	5c9a      	ldrb	r2, [r3, r2]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	330a      	adds	r3, #10
 800b54a:	404a      	eors	r2, r1
 800b54c:	b2d2      	uxtb	r2, r2
 800b54e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b550:	7c3b      	ldrb	r3, [r7, #16]
 800b552:	461a      	mov	r2, r3
 800b554:	4b12      	ldr	r3, [pc, #72]	@ (800b5a0 <mix_sub_columns+0x288>)
 800b556:	5c9a      	ldrb	r2, [r3, r2]
 800b558:	7d7b      	ldrb	r3, [r7, #21]
 800b55a:	4619      	mov	r1, r3
 800b55c:	4b11      	ldr	r3, [pc, #68]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b55e:	5c5b      	ldrb	r3, [r3, r1]
 800b560:	4053      	eors	r3, r2
 800b562:	b2da      	uxtb	r2, r3
 800b564:	7abb      	ldrb	r3, [r7, #10]
 800b566:	4619      	mov	r1, r3
 800b568:	4b0e      	ldr	r3, [pc, #56]	@ (800b5a4 <mix_sub_columns+0x28c>)
 800b56a:	5c5b      	ldrb	r3, [r3, r1]
 800b56c:	4053      	eors	r3, r2
 800b56e:	b2d9      	uxtb	r1, r3
 800b570:	7bfb      	ldrb	r3, [r7, #15]
 800b572:	461a      	mov	r2, r3
 800b574:	4b09      	ldr	r3, [pc, #36]	@ (800b59c <mix_sub_columns+0x284>)
 800b576:	5c9a      	ldrb	r2, [r3, r2]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	330b      	adds	r3, #11
 800b57c:	404a      	eors	r2, r1
 800b57e:	b2d2      	uxtb	r2, r2
 800b580:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b582:	7d3b      	ldrb	r3, [r7, #20]
 800b584:	461a      	mov	r2, r3
 800b586:	4b05      	ldr	r3, [pc, #20]	@ (800b59c <mix_sub_columns+0x284>)
 800b588:	5c9a      	ldrb	r2, [r3, r2]
 800b58a:	7a7b      	ldrb	r3, [r7, #9]
 800b58c:	4619      	mov	r1, r3
 800b58e:	4b04      	ldr	r3, [pc, #16]	@ (800b5a0 <mix_sub_columns+0x288>)
 800b590:	5c5b      	ldrb	r3, [r3, r1]
 800b592:	4053      	eors	r3, r2
 800b594:	b2da      	uxtb	r2, r3
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	4619      	mov	r1, r3
 800b59a:	e005      	b.n	800b5a8 <mix_sub_columns+0x290>
 800b59c:	0801e834 	.word	0x0801e834
 800b5a0:	0801e934 	.word	0x0801e934
 800b5a4:	0801e734 	.word	0x0801e734
 800b5a8:	4b2d      	ldr	r3, [pc, #180]	@ (800b660 <mix_sub_columns+0x348>)
 800b5aa:	5c5b      	ldrb	r3, [r3, r1]
 800b5ac:	4053      	eors	r3, r2
 800b5ae:	b2d9      	uxtb	r1, r3
 800b5b0:	7cfb      	ldrb	r3, [r7, #19]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	4b2a      	ldr	r3, [pc, #168]	@ (800b660 <mix_sub_columns+0x348>)
 800b5b6:	5c9a      	ldrb	r2, [r3, r2]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	330c      	adds	r3, #12
 800b5bc:	404a      	eors	r2, r1
 800b5be:	b2d2      	uxtb	r2, r2
 800b5c0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b5c2:	7d3b      	ldrb	r3, [r7, #20]
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	4b26      	ldr	r3, [pc, #152]	@ (800b660 <mix_sub_columns+0x348>)
 800b5c8:	5c9a      	ldrb	r2, [r3, r2]
 800b5ca:	7a7b      	ldrb	r3, [r7, #9]
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4b25      	ldr	r3, [pc, #148]	@ (800b664 <mix_sub_columns+0x34c>)
 800b5d0:	5c5b      	ldrb	r3, [r3, r1]
 800b5d2:	4053      	eors	r3, r2
 800b5d4:	b2da      	uxtb	r2, r3
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	4b23      	ldr	r3, [pc, #140]	@ (800b668 <mix_sub_columns+0x350>)
 800b5dc:	5c5b      	ldrb	r3, [r3, r1]
 800b5de:	4053      	eors	r3, r2
 800b5e0:	b2d9      	uxtb	r1, r3
 800b5e2:	7cfb      	ldrb	r3, [r7, #19]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	4b1e      	ldr	r3, [pc, #120]	@ (800b660 <mix_sub_columns+0x348>)
 800b5e8:	5c9a      	ldrb	r2, [r3, r2]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	330d      	adds	r3, #13
 800b5ee:	404a      	eors	r2, r1
 800b5f0:	b2d2      	uxtb	r2, r2
 800b5f2:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b5f4:	7d3b      	ldrb	r3, [r7, #20]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	4b19      	ldr	r3, [pc, #100]	@ (800b660 <mix_sub_columns+0x348>)
 800b5fa:	5c9a      	ldrb	r2, [r3, r2]
 800b5fc:	7a7b      	ldrb	r3, [r7, #9]
 800b5fe:	4619      	mov	r1, r3
 800b600:	4b17      	ldr	r3, [pc, #92]	@ (800b660 <mix_sub_columns+0x348>)
 800b602:	5c5b      	ldrb	r3, [r3, r1]
 800b604:	4053      	eors	r3, r2
 800b606:	b2da      	uxtb	r2, r3
 800b608:	7bbb      	ldrb	r3, [r7, #14]
 800b60a:	4619      	mov	r1, r3
 800b60c:	4b15      	ldr	r3, [pc, #84]	@ (800b664 <mix_sub_columns+0x34c>)
 800b60e:	5c5b      	ldrb	r3, [r3, r1]
 800b610:	4053      	eors	r3, r2
 800b612:	b2d9      	uxtb	r1, r3
 800b614:	7cfb      	ldrb	r3, [r7, #19]
 800b616:	461a      	mov	r2, r3
 800b618:	4b13      	ldr	r3, [pc, #76]	@ (800b668 <mix_sub_columns+0x350>)
 800b61a:	5c9a      	ldrb	r2, [r3, r2]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	330e      	adds	r3, #14
 800b620:	404a      	eors	r2, r1
 800b622:	b2d2      	uxtb	r2, r2
 800b624:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b626:	7d3b      	ldrb	r3, [r7, #20]
 800b628:	461a      	mov	r2, r3
 800b62a:	4b0f      	ldr	r3, [pc, #60]	@ (800b668 <mix_sub_columns+0x350>)
 800b62c:	5c9a      	ldrb	r2, [r3, r2]
 800b62e:	7a7b      	ldrb	r3, [r7, #9]
 800b630:	4619      	mov	r1, r3
 800b632:	4b0b      	ldr	r3, [pc, #44]	@ (800b660 <mix_sub_columns+0x348>)
 800b634:	5c5b      	ldrb	r3, [r3, r1]
 800b636:	4053      	eors	r3, r2
 800b638:	b2da      	uxtb	r2, r3
 800b63a:	7bbb      	ldrb	r3, [r7, #14]
 800b63c:	4619      	mov	r1, r3
 800b63e:	4b08      	ldr	r3, [pc, #32]	@ (800b660 <mix_sub_columns+0x348>)
 800b640:	5c5b      	ldrb	r3, [r3, r1]
 800b642:	4053      	eors	r3, r2
 800b644:	b2d9      	uxtb	r1, r3
 800b646:	7cfb      	ldrb	r3, [r7, #19]
 800b648:	461a      	mov	r2, r3
 800b64a:	4b06      	ldr	r3, [pc, #24]	@ (800b664 <mix_sub_columns+0x34c>)
 800b64c:	5c9a      	ldrb	r2, [r3, r2]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	330f      	adds	r3, #15
 800b652:	404a      	eors	r2, r1
 800b654:	b2d2      	uxtb	r2, r2
 800b656:	701a      	strb	r2, [r3, #0]
  }
 800b658:	bf00      	nop
 800b65a:	3718      	adds	r7, #24
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	0801e734 	.word	0x0801e734
 800b664:	0801e834 	.word	0x0801e834
 800b668:	0801e934 	.word	0x0801e934

0800b66c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b086      	sub	sp, #24
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	460b      	mov	r3, r1
 800b676:	607a      	str	r2, [r7, #4]
 800b678:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b67a:	7afb      	ldrb	r3, [r7, #11]
 800b67c:	3b10      	subs	r3, #16
 800b67e:	2b10      	cmp	r3, #16
 800b680:	bf8c      	ite	hi
 800b682:	2201      	movhi	r2, #1
 800b684:	2200      	movls	r2, #0
 800b686:	b2d2      	uxtb	r2, r2
 800b688:	2a00      	cmp	r2, #0
 800b68a:	d10b      	bne.n	800b6a4 <lorawan_aes_set_key+0x38>
 800b68c:	4a64      	ldr	r2, [pc, #400]	@ (800b820 <lorawan_aes_set_key+0x1b4>)
 800b68e:	fa22 f303 	lsr.w	r3, r2, r3
 800b692:	f003 0301 	and.w	r3, r3, #1
 800b696:	2b00      	cmp	r3, #0
 800b698:	bf14      	ite	ne
 800b69a:	2301      	movne	r3, #1
 800b69c:	2300      	moveq	r3, #0
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d105      	bne.n	800b6b0 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800b6ac:	23ff      	movs	r3, #255	@ 0xff
 800b6ae:	e0b2      	b.n	800b816 <lorawan_aes_set_key+0x1aa>
        break;
 800b6b0:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	7afa      	ldrb	r2, [r7, #11]
 800b6b6:	68f9      	ldr	r1, [r7, #12]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7ff fbfc 	bl	800aeb6 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b6be:	7afb      	ldrb	r3, [r7, #11]
 800b6c0:	331c      	adds	r3, #28
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b6c8:	7c7b      	ldrb	r3, [r7, #17]
 800b6ca:	091b      	lsrs	r3, r3, #4
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b6d8:	7afb      	ldrb	r3, [r7, #11]
 800b6da:	75fb      	strb	r3, [r7, #23]
 800b6dc:	2301      	movs	r3, #1
 800b6de:	75bb      	strb	r3, [r7, #22]
 800b6e0:	e093      	b.n	800b80a <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b6e2:	7dfb      	ldrb	r3, [r7, #23]
 800b6e4:	3b04      	subs	r3, #4
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	5cd3      	ldrb	r3, [r2, r3]
 800b6ea:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b6ec:	7dfb      	ldrb	r3, [r7, #23]
 800b6ee:	3b03      	subs	r3, #3
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	5cd3      	ldrb	r3, [r2, r3]
 800b6f4:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	3b02      	subs	r3, #2
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	5cd3      	ldrb	r3, [r2, r3]
 800b6fe:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b700:	7dfb      	ldrb	r3, [r7, #23]
 800b702:	3b01      	subs	r3, #1
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	5cd3      	ldrb	r3, [r2, r3]
 800b708:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b70a:	7dfb      	ldrb	r3, [r7, #23]
 800b70c:	7afa      	ldrb	r2, [r7, #11]
 800b70e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b712:	fb01 f202 	mul.w	r2, r1, r2
 800b716:	1a9b      	subs	r3, r3, r2
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d127      	bne.n	800b76e <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800b71e:	7d7b      	ldrb	r3, [r7, #21]
 800b720:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b722:	7d3b      	ldrb	r3, [r7, #20]
 800b724:	4a3f      	ldr	r2, [pc, #252]	@ (800b824 <lorawan_aes_set_key+0x1b8>)
 800b726:	5cd2      	ldrb	r2, [r2, r3]
 800b728:	7dbb      	ldrb	r3, [r7, #22]
 800b72a:	4053      	eors	r3, r2
 800b72c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b72e:	7cfb      	ldrb	r3, [r7, #19]
 800b730:	4a3c      	ldr	r2, [pc, #240]	@ (800b824 <lorawan_aes_set_key+0x1b8>)
 800b732:	5cd3      	ldrb	r3, [r2, r3]
 800b734:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b736:	7cbb      	ldrb	r3, [r7, #18]
 800b738:	4a3a      	ldr	r2, [pc, #232]	@ (800b824 <lorawan_aes_set_key+0x1b8>)
 800b73a:	5cd3      	ldrb	r3, [r2, r3]
 800b73c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b73e:	7c3b      	ldrb	r3, [r7, #16]
 800b740:	4a38      	ldr	r2, [pc, #224]	@ (800b824 <lorawan_aes_set_key+0x1b8>)
 800b742:	5cd3      	ldrb	r3, [r2, r3]
 800b744:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b746:	7dbb      	ldrb	r3, [r7, #22]
 800b748:	005b      	lsls	r3, r3, #1
 800b74a:	b25a      	sxtb	r2, r3
 800b74c:	7dbb      	ldrb	r3, [r7, #22]
 800b74e:	09db      	lsrs	r3, r3, #7
 800b750:	b2db      	uxtb	r3, r3
 800b752:	4619      	mov	r1, r3
 800b754:	0049      	lsls	r1, r1, #1
 800b756:	440b      	add	r3, r1
 800b758:	4619      	mov	r1, r3
 800b75a:	00c8      	lsls	r0, r1, #3
 800b75c:	4619      	mov	r1, r3
 800b75e:	4603      	mov	r3, r0
 800b760:	440b      	add	r3, r1
 800b762:	b2db      	uxtb	r3, r3
 800b764:	b25b      	sxtb	r3, r3
 800b766:	4053      	eors	r3, r2
 800b768:	b25b      	sxtb	r3, r3
 800b76a:	75bb      	strb	r3, [r7, #22]
 800b76c:	e01c      	b.n	800b7a8 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b76e:	7afb      	ldrb	r3, [r7, #11]
 800b770:	2b18      	cmp	r3, #24
 800b772:	d919      	bls.n	800b7a8 <lorawan_aes_set_key+0x13c>
 800b774:	7dfb      	ldrb	r3, [r7, #23]
 800b776:	7afa      	ldrb	r2, [r7, #11]
 800b778:	fbb3 f1f2 	udiv	r1, r3, r2
 800b77c:	fb01 f202 	mul.w	r2, r1, r2
 800b780:	1a9b      	subs	r3, r3, r2
 800b782:	b2db      	uxtb	r3, r3
 800b784:	2b10      	cmp	r3, #16
 800b786:	d10f      	bne.n	800b7a8 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800b788:	7d7b      	ldrb	r3, [r7, #21]
 800b78a:	4a26      	ldr	r2, [pc, #152]	@ (800b824 <lorawan_aes_set_key+0x1b8>)
 800b78c:	5cd3      	ldrb	r3, [r2, r3]
 800b78e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b790:	7d3b      	ldrb	r3, [r7, #20]
 800b792:	4a24      	ldr	r2, [pc, #144]	@ (800b824 <lorawan_aes_set_key+0x1b8>)
 800b794:	5cd3      	ldrb	r3, [r2, r3]
 800b796:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b798:	7cfb      	ldrb	r3, [r7, #19]
 800b79a:	4a22      	ldr	r2, [pc, #136]	@ (800b824 <lorawan_aes_set_key+0x1b8>)
 800b79c:	5cd3      	ldrb	r3, [r2, r3]
 800b79e:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b7a0:	7cbb      	ldrb	r3, [r7, #18]
 800b7a2:	4a20      	ldr	r2, [pc, #128]	@ (800b824 <lorawan_aes_set_key+0x1b8>)
 800b7a4:	5cd3      	ldrb	r3, [r2, r3]
 800b7a6:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b7a8:	7dfa      	ldrb	r2, [r7, #23]
 800b7aa:	7afb      	ldrb	r3, [r7, #11]
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b7b0:	7c3b      	ldrb	r3, [r7, #16]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	5cd1      	ldrb	r1, [r2, r3]
 800b7b6:	7dfb      	ldrb	r3, [r7, #23]
 800b7b8:	7d7a      	ldrb	r2, [r7, #21]
 800b7ba:	404a      	eors	r2, r1
 800b7bc:	b2d1      	uxtb	r1, r2
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b7c2:	7c3b      	ldrb	r3, [r7, #16]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	5cd1      	ldrb	r1, [r2, r3]
 800b7ca:	7dfb      	ldrb	r3, [r7, #23]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	7d3a      	ldrb	r2, [r7, #20]
 800b7d0:	404a      	eors	r2, r1
 800b7d2:	b2d1      	uxtb	r1, r2
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b7d8:	7c3b      	ldrb	r3, [r7, #16]
 800b7da:	3302      	adds	r3, #2
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	5cd1      	ldrb	r1, [r2, r3]
 800b7e0:	7dfb      	ldrb	r3, [r7, #23]
 800b7e2:	3302      	adds	r3, #2
 800b7e4:	7cfa      	ldrb	r2, [r7, #19]
 800b7e6:	404a      	eors	r2, r1
 800b7e8:	b2d1      	uxtb	r1, r2
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b7ee:	7c3b      	ldrb	r3, [r7, #16]
 800b7f0:	3303      	adds	r3, #3
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	5cd1      	ldrb	r1, [r2, r3]
 800b7f6:	7dfb      	ldrb	r3, [r7, #23]
 800b7f8:	3303      	adds	r3, #3
 800b7fa:	7cba      	ldrb	r2, [r7, #18]
 800b7fc:	404a      	eors	r2, r1
 800b7fe:	b2d1      	uxtb	r1, r2
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b804:	7dfb      	ldrb	r3, [r7, #23]
 800b806:	3304      	adds	r3, #4
 800b808:	75fb      	strb	r3, [r7, #23]
 800b80a:	7dfa      	ldrb	r2, [r7, #23]
 800b80c:	7c7b      	ldrb	r3, [r7, #17]
 800b80e:	429a      	cmp	r2, r3
 800b810:	f4ff af67 	bcc.w	800b6e2 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3718      	adds	r7, #24
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	00010101 	.word	0x00010101
 800b824:	0801e734 	.word	0x0801e734

0800b828 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b08a      	sub	sp, #40	@ 0x28
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d038      	beq.n	800b8b0 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	f107 0314 	add.w	r3, r7, #20
 800b844:	68f9      	ldr	r1, [r7, #12]
 800b846:	4618      	mov	r0, r3
 800b848:	f7ff fc07 	bl	800b05a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b84c:	2301      	movs	r3, #1
 800b84e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b852:	e014      	b.n	800b87e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b854:	f107 0314 	add.w	r3, r7, #20
 800b858:	4618      	mov	r0, r3
 800b85a:	f7ff fd5d 	bl	800b318 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b864:	0112      	lsls	r2, r2, #4
 800b866:	441a      	add	r2, r3
 800b868:	f107 0314 	add.w	r3, r7, #20
 800b86c:	4611      	mov	r1, r2
 800b86e:	4618      	mov	r0, r3
 800b870:	f7ff fcab 	bl	800b1ca <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b874:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b878:	3301      	adds	r3, #1
 800b87a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b884:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b888:	429a      	cmp	r2, r3
 800b88a:	d3e3      	bcc.n	800b854 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b88c:	f107 0314 	add.w	r3, r7, #20
 800b890:	4618      	mov	r0, r3
 800b892:	f7ff fca7 	bl	800b1e4 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b89c:	0112      	lsls	r2, r2, #4
 800b89e:	441a      	add	r2, r3
 800b8a0:	f107 0314 	add.w	r3, r7, #20
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	68b8      	ldr	r0, [r7, #8]
 800b8a8:	f7ff fbd7 	bl	800b05a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	e000      	b.n	800b8b2 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b8b0:	23ff      	movs	r3, #255	@ 0xff
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3728      	adds	r7, #40	@ 0x28
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
	...

0800b8bc <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800b8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8be:	b0a1      	sub	sp, #132	@ 0x84
 800b8c0:	af12      	add	r7, sp, #72	@ 0x48
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800b8c8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800b8cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b8d0:	4611      	mov	r1, r2
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f000 fa12 	bl	800bcfc <SecureElementGetKeyByID>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d174      	bne.n	800b9c8 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b8de:	2300      	movs	r3, #0
 800b8e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b8e4:	e06c      	b.n	800b9c0 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800b8e6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800b8ea:	4939      	ldr	r1, [pc, #228]	@ (800b9d0 <PrintKey+0x114>)
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	005b      	lsls	r3, r3, #1
 800b8f0:	4413      	add	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	440b      	add	r3, r1
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d15a      	bne.n	800b9b6 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800b900:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800b904:	4932      	ldr	r1, [pc, #200]	@ (800b9d0 <PrintKey+0x114>)
 800b906:	4613      	mov	r3, r2
 800b908:	005b      	lsls	r3, r3, #1
 800b90a:	4413      	add	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	440b      	add	r3, r1
 800b910:	3308      	adds	r3, #8
 800b912:	6819      	ldr	r1, [r3, #0]
 800b914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b916:	785b      	ldrb	r3, [r3, #1]
 800b918:	461d      	mov	r5, r3
 800b91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91c:	789b      	ldrb	r3, [r3, #2]
 800b91e:	461e      	mov	r6, r3
 800b920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b922:	78db      	ldrb	r3, [r3, #3]
 800b924:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b928:	791b      	ldrb	r3, [r3, #4]
 800b92a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b92e:	795b      	ldrb	r3, [r3, #5]
 800b930:	623b      	str	r3, [r7, #32]
 800b932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b934:	799b      	ldrb	r3, [r3, #6]
 800b936:	61fb      	str	r3, [r7, #28]
 800b938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b93a:	79db      	ldrb	r3, [r3, #7]
 800b93c:	61bb      	str	r3, [r7, #24]
 800b93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b940:	7a1b      	ldrb	r3, [r3, #8]
 800b942:	617b      	str	r3, [r7, #20]
 800b944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b946:	7a5b      	ldrb	r3, [r3, #9]
 800b948:	613b      	str	r3, [r7, #16]
 800b94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b94c:	7a9b      	ldrb	r3, [r3, #10]
 800b94e:	60fb      	str	r3, [r7, #12]
 800b950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b952:	7adb      	ldrb	r3, [r3, #11]
 800b954:	60bb      	str	r3, [r7, #8]
 800b956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b958:	7b1b      	ldrb	r3, [r3, #12]
 800b95a:	607b      	str	r3, [r7, #4]
 800b95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b95e:	7b5b      	ldrb	r3, [r3, #13]
 800b960:	461c      	mov	r4, r3
 800b962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b964:	7b9b      	ldrb	r3, [r3, #14]
 800b966:	4618      	mov	r0, r3
 800b968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b96a:	7bdb      	ldrb	r3, [r3, #15]
 800b96c:	461a      	mov	r2, r3
 800b96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b970:	7c1b      	ldrb	r3, [r3, #16]
 800b972:	9310      	str	r3, [sp, #64]	@ 0x40
 800b974:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b976:	900e      	str	r0, [sp, #56]	@ 0x38
 800b978:	940d      	str	r4, [sp, #52]	@ 0x34
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	920c      	str	r2, [sp, #48]	@ 0x30
 800b97e:	68ba      	ldr	r2, [r7, #8]
 800b980:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	920a      	str	r2, [sp, #40]	@ 0x28
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	9209      	str	r2, [sp, #36]	@ 0x24
 800b98a:	697a      	ldr	r2, [r7, #20]
 800b98c:	9208      	str	r2, [sp, #32]
 800b98e:	69ba      	ldr	r2, [r7, #24]
 800b990:	9207      	str	r2, [sp, #28]
 800b992:	69fa      	ldr	r2, [r7, #28]
 800b994:	9206      	str	r2, [sp, #24]
 800b996:	6a3a      	ldr	r2, [r7, #32]
 800b998:	9205      	str	r2, [sp, #20]
 800b99a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b99c:	9204      	str	r2, [sp, #16]
 800b99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a0:	9303      	str	r3, [sp, #12]
 800b9a2:	9602      	str	r6, [sp, #8]
 800b9a4:	9501      	str	r5, [sp, #4]
 800b9a6:	9100      	str	r1, [sp, #0]
 800b9a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d4 <PrintKey+0x118>)
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	2002      	movs	r0, #2
 800b9b0:	f00f fbec 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
 800b9b4:	e008      	b.n	800b9c8 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b9b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b9c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b9c4:	2b0a      	cmp	r3, #10
 800b9c6:	d98e      	bls.n	800b8e6 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800b9c8:	373c      	adds	r7, #60	@ 0x3c
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	0801ea34 	.word	0x0801ea34
 800b9d4:	0801e2d8 	.word	0x0801e2d8

0800b9d8 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800b9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9da:	b091      	sub	sp, #68	@ 0x44
 800b9dc:	af08      	add	r7, sp, #32
 800b9de:	4603      	mov	r3, r0
 800b9e0:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800b9e6:	f107 0310 	add.w	r3, r7, #16
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f000 fbf0 	bl	800c1d0 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800b9f0:	7c3b      	ldrb	r3, [r7, #16]
 800b9f2:	7c7a      	ldrb	r2, [r7, #17]
 800b9f4:	7cb9      	ldrb	r1, [r7, #18]
 800b9f6:	7cf8      	ldrb	r0, [r7, #19]
 800b9f8:	7d3c      	ldrb	r4, [r7, #20]
 800b9fa:	7d7d      	ldrb	r5, [r7, #21]
 800b9fc:	7dbe      	ldrb	r6, [r7, #22]
 800b9fe:	f897 c017 	ldrb.w	ip, [r7, #23]
 800ba02:	f8cd c01c 	str.w	ip, [sp, #28]
 800ba06:	9606      	str	r6, [sp, #24]
 800ba08:	9505      	str	r5, [sp, #20]
 800ba0a:	9404      	str	r4, [sp, #16]
 800ba0c:	9003      	str	r0, [sp, #12]
 800ba0e:	9102      	str	r1, [sp, #8]
 800ba10:	9201      	str	r2, [sp, #4]
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	4b24      	ldr	r3, [pc, #144]	@ (800baa8 <PrintIds+0xd0>)
 800ba16:	2200      	movs	r2, #0
 800ba18:	2100      	movs	r1, #0
 800ba1a:	2002      	movs	r0, #2
 800ba1c:	f00f fbb6 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800ba20:	f107 0318 	add.w	r3, r7, #24
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 fc03 	bl	800c230 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800ba2a:	7e3b      	ldrb	r3, [r7, #24]
 800ba2c:	7e7a      	ldrb	r2, [r7, #25]
 800ba2e:	7eb9      	ldrb	r1, [r7, #26]
 800ba30:	7ef8      	ldrb	r0, [r7, #27]
 800ba32:	7f3c      	ldrb	r4, [r7, #28]
 800ba34:	7f7d      	ldrb	r5, [r7, #29]
 800ba36:	7fbe      	ldrb	r6, [r7, #30]
 800ba38:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800ba3c:	f8cd c01c 	str.w	ip, [sp, #28]
 800ba40:	9606      	str	r6, [sp, #24]
 800ba42:	9505      	str	r5, [sp, #20]
 800ba44:	9404      	str	r4, [sp, #16]
 800ba46:	9003      	str	r0, [sp, #12]
 800ba48:	9102      	str	r1, [sp, #8]
 800ba4a:	9201      	str	r2, [sp, #4]
 800ba4c:	9300      	str	r3, [sp, #0]
 800ba4e:	4b17      	ldr	r3, [pc, #92]	@ (800baac <PrintIds+0xd4>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	2100      	movs	r1, #0
 800ba54:	2002      	movs	r0, #2
 800ba56:	f00f fb99 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800ba5a:	f107 020c 	add.w	r2, r7, #12
 800ba5e:	79fb      	ldrb	r3, [r7, #7]
 800ba60:	4611      	mov	r1, r2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f000 fc16 	bl	800c294 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800ba68:	f107 030c 	add.w	r3, r7, #12
 800ba6c:	3303      	adds	r3, #3
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	461a      	mov	r2, r3
 800ba72:	f107 030c 	add.w	r3, r7, #12
 800ba76:	3302      	adds	r3, #2
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	f107 030c 	add.w	r3, r7, #12
 800ba80:	3301      	adds	r3, #1
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	4618      	mov	r0, r3
 800ba86:	f107 030c 	add.w	r3, r7, #12
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	9303      	str	r3, [sp, #12]
 800ba8e:	9002      	str	r0, [sp, #8]
 800ba90:	9101      	str	r1, [sp, #4]
 800ba92:	9200      	str	r2, [sp, #0]
 800ba94:	4b06      	ldr	r3, [pc, #24]	@ (800bab0 <PrintIds+0xd8>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	2100      	movs	r1, #0
 800ba9a:	2002      	movs	r0, #2
 800ba9c:	f00f fb76 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800baa0:	bf00      	nop
 800baa2:	3724      	adds	r7, #36	@ 0x24
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baa8:	0801e334 	.word	0x0801e334
 800baac:	0801e374 	.word	0x0801e374
 800bab0:	0801e3b4 	.word	0x0801e3b4

0800bab4 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	4603      	mov	r3, r0
 800babc:	6039      	str	r1, [r7, #0]
 800babe:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bac0:	2300      	movs	r3, #0
 800bac2:	73fb      	strb	r3, [r7, #15]
 800bac4:	e01a      	b.n	800bafc <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bac6:	4b12      	ldr	r3, [pc, #72]	@ (800bb10 <GetKeyByID+0x5c>)
 800bac8:	6819      	ldr	r1, [r3, #0]
 800baca:	7bfa      	ldrb	r2, [r7, #15]
 800bacc:	4613      	mov	r3, r2
 800bace:	011b      	lsls	r3, r3, #4
 800bad0:	4413      	add	r3, r2
 800bad2:	440b      	add	r3, r1
 800bad4:	3318      	adds	r3, #24
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	79fa      	ldrb	r2, [r7, #7]
 800bada:	429a      	cmp	r2, r3
 800badc:	d10b      	bne.n	800baf6 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bade:	4b0c      	ldr	r3, [pc, #48]	@ (800bb10 <GetKeyByID+0x5c>)
 800bae0:	6819      	ldr	r1, [r3, #0]
 800bae2:	7bfa      	ldrb	r2, [r7, #15]
 800bae4:	4613      	mov	r3, r2
 800bae6:	011b      	lsls	r3, r3, #4
 800bae8:	4413      	add	r3, r2
 800baea:	3318      	adds	r3, #24
 800baec:	18ca      	adds	r2, r1, r3
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800baf2:	2300      	movs	r3, #0
 800baf4:	e006      	b.n	800bb04 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800baf6:	7bfb      	ldrb	r3, [r7, #15]
 800baf8:	3301      	adds	r3, #1
 800bafa:	73fb      	strb	r3, [r7, #15]
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
 800bafe:	2b0a      	cmp	r3, #10
 800bb00:	d9e1      	bls.n	800bac6 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bb02:	2303      	movs	r3, #3
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bc80      	pop	{r7}
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	20000658 	.word	0x20000658

0800bb14 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800bb14:	b590      	push	{r4, r7, lr}
 800bb16:	b0d1      	sub	sp, #324	@ 0x144
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800bb1e:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800bb22:	6020      	str	r0, [r4, #0]
 800bb24:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800bb28:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800bb2c:	6001      	str	r1, [r0, #0]
 800bb2e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800bb32:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800bb36:	600a      	str	r2, [r1, #0]
 800bb38:	461a      	mov	r2, r3
 800bb3a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bb3e:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800bb42:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800bb44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bb48:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d003      	beq.n	800bb5a <ComputeCmac+0x46>
 800bb52:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d101      	bne.n	800bb5e <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	e05d      	b.n	800bc1a <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800bb5e:	f107 0314 	add.w	r3, r7, #20
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fe ff02 	bl	800a96c <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800bb68:	f107 0210 	add.w	r2, r7, #16
 800bb6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bb70:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	4611      	mov	r1, r2
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7ff ff9b 	bl	800bab4 <GetKeyByID>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bb84:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d144      	bne.n	800bc16 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800bb8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bb90:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	1c5a      	adds	r2, r3, #1
 800bb98:	f107 0314 	add.w	r3, r7, #20
 800bb9c:	4611      	mov	r1, r2
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fe fefd 	bl	800a99e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800bba4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bba8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d009      	beq.n	800bbc6 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800bbb2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bbb6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800bbba:	f107 0014 	add.w	r0, r7, #20
 800bbbe:	2210      	movs	r2, #16
 800bbc0:	6819      	ldr	r1, [r3, #0]
 800bbc2:	f7fe fefb 	bl	800a9bc <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800bbc6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bbca:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800bbce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bbd2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800bbd6:	f107 0014 	add.w	r0, r7, #20
 800bbda:	6812      	ldr	r2, [r2, #0]
 800bbdc:	6819      	ldr	r1, [r3, #0]
 800bbde:	f7fe feed 	bl	800a9bc <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800bbe2:	f107 0214 	add.w	r2, r7, #20
 800bbe6:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800bbea:	4611      	mov	r1, r2
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7fe ffa7 	bl	800ab40 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800bbf2:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800bbfc:	021b      	lsls	r3, r3, #8
 800bbfe:	431a      	orrs	r2, r3
 800bc00:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800bc04:	041b      	lsls	r3, r3, #16
 800bc06:	431a      	orrs	r2, r3
 800bc08:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800bc0c:	061b      	lsls	r3, r3, #24
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800bc14:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800bc16:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd90      	pop	{r4, r7, pc}

0800bc24 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d101      	bne.n	800bc36 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bc32:	2302      	movs	r3, #2
 800bc34:	e00a      	b.n	800bc4c <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800bc36:	4a07      	ldr	r2, [pc, #28]	@ (800bc54 <SecureElementInit+0x30>)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800bc3c:	4b05      	ldr	r3, [pc, #20]	@ (800bc54 <SecureElementInit+0x30>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	22d8      	movs	r2, #216	@ 0xd8
 800bc42:	4905      	ldr	r1, [pc, #20]	@ (800bc58 <SecureElementInit+0x34>)
 800bc44:	4618      	mov	r0, r3
 800bc46:	f00a fee4 	bl	8016a12 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3708      	adds	r7, #8
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	20000658 	.word	0x20000658
 800bc58:	0801efd0 	.word	0x0801efd0

0800bc5c <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b086      	sub	sp, #24
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800bc66:	2300      	movs	r3, #0
 800bc68:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800bc6a:	f107 030c 	add.w	r3, r7, #12
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f000 faae 	bl	800c1d0 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800bc74:	f107 0308 	add.w	r3, r7, #8
 800bc78:	4619      	mov	r1, r3
 800bc7a:	2001      	movs	r0, #1
 800bc7c:	f000 fb0a 	bl	800c294 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d024      	beq.n	800bcd0 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800bc86:	2300      	movs	r3, #0
 800bc88:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	75bb      	strb	r3, [r7, #22]
 800bc8e:	e00c      	b.n	800bcaa <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800bc90:	7dbb      	ldrb	r3, [r7, #22]
 800bc92:	3318      	adds	r3, #24
 800bc94:	443b      	add	r3, r7
 800bc96:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d002      	beq.n	800bca4 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	75fb      	strb	r3, [r7, #23]
                break;
 800bca2:	e005      	b.n	800bcb0 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800bca4:	7dbb      	ldrb	r3, [r7, #22]
 800bca6:	3301      	adds	r3, #1
 800bca8:	75bb      	strb	r3, [r7, #22]
 800bcaa:	7dbb      	ldrb	r3, [r7, #22]
 800bcac:	2b07      	cmp	r3, #7
 800bcae:	d9ef      	bls.n	800bc90 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800bcb0:	7dfb      	ldrb	r3, [r7, #23]
 800bcb2:	f083 0301 	eor.w	r3, r3, #1
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d009      	beq.n	800bcd0 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800bcbc:	f107 020c 	add.w	r2, r7, #12
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4610      	mov	r0, r2
 800bcc4:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800bcc6:	f107 030c 	add.w	r3, r7, #12
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 fa68 	bl	800c1a0 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00c      	beq.n	800bcf0 <SecureElementInitMcuID+0x94>
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d109      	bne.n	800bcf0 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800bcdc:	f107 0208 	add.w	r2, r7, #8
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	4610      	mov	r0, r2
 800bce4:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	4619      	mov	r1, r3
 800bcea:	2001      	movs	r0, #1
 800bcec:	f000 fab8 	bl	800c260 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3718      	adds	r7, #24
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
	...

0800bcfc <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	4603      	mov	r3, r0
 800bd04:	6039      	str	r1, [r7, #0]
 800bd06:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bd08:	2300      	movs	r3, #0
 800bd0a:	73fb      	strb	r3, [r7, #15]
 800bd0c:	e01a      	b.n	800bd44 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bd0e:	4b12      	ldr	r3, [pc, #72]	@ (800bd58 <SecureElementGetKeyByID+0x5c>)
 800bd10:	6819      	ldr	r1, [r3, #0]
 800bd12:	7bfa      	ldrb	r2, [r7, #15]
 800bd14:	4613      	mov	r3, r2
 800bd16:	011b      	lsls	r3, r3, #4
 800bd18:	4413      	add	r3, r2
 800bd1a:	440b      	add	r3, r1
 800bd1c:	3318      	adds	r3, #24
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	79fa      	ldrb	r2, [r7, #7]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d10b      	bne.n	800bd3e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800bd26:	4b0c      	ldr	r3, [pc, #48]	@ (800bd58 <SecureElementGetKeyByID+0x5c>)
 800bd28:	6819      	ldr	r1, [r3, #0]
 800bd2a:	7bfa      	ldrb	r2, [r7, #15]
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	011b      	lsls	r3, r3, #4
 800bd30:	4413      	add	r3, r2
 800bd32:	3318      	adds	r3, #24
 800bd34:	18ca      	adds	r2, r1, r3
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	e006      	b.n	800bd4c <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bd3e:	7bfb      	ldrb	r3, [r7, #15]
 800bd40:	3301      	adds	r3, #1
 800bd42:	73fb      	strb	r3, [r7, #15]
 800bd44:	7bfb      	ldrb	r3, [r7, #15]
 800bd46:	2b0a      	cmp	r3, #10
 800bd48:	d9e1      	bls.n	800bd0e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bd4a:	2303      	movs	r3, #3
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3714      	adds	r7, #20
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bc80      	pop	{r7}
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	20000658 	.word	0x20000658

0800bd5c <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800bd60:	2000      	movs	r0, #0
 800bd62:	f7ff fdab 	bl	800b8bc <PrintKey>
    PrintKey( NWK_KEY );
 800bd66:	2001      	movs	r0, #1
 800bd68:	f7ff fda8 	bl	800b8bc <PrintKey>
    PrintKey( APP_S_KEY );
 800bd6c:	2009      	movs	r0, #9
 800bd6e:	f7ff fda5 	bl	800b8bc <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800bd72:	2008      	movs	r0, #8
 800bd74:	f7ff fda2 	bl	800b8bc <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800bd78:	2000      	movs	r0, #0
 800bd7a:	f7ff fe2d 	bl	800b9d8 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800bd8e:	200b      	movs	r0, #11
 800bd90:	f7ff fd94 	bl	800b8bc <PrintKey>
    PrintKey( MC_KE_KEY );
 800bd94:	200c      	movs	r0, #12
 800bd96:	f7ff fd91 	bl	800b8bc <PrintKey>
    PrintKey( APP_S_KEY );
 800bd9a:	2009      	movs	r0, #9
 800bd9c:	f7ff fd8e 	bl	800b8bc <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800bda0:	2008      	movs	r0, #8
 800bda2:	f7ff fd8b 	bl	800b8bc <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800bda6:	200a      	movs	r0, #10
 800bda8:	f7ff fd88 	bl	800b8bc <PrintKey>
    PrintIds( mode );
 800bdac:	79fb      	ldrb	r3, [r7, #7]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7ff fe12 	bl	800b9d8 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800bdb4:	2300      	movs	r3, #0
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3708      	adds	r7, #8
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
	...

0800bdc0 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b088      	sub	sp, #32
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	6039      	str	r1, [r7, #0]
 800bdca:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d101      	bne.n	800bdd6 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bdd2:	2302      	movs	r3, #2
 800bdd4:	e04c      	b.n	800be70 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	77fb      	strb	r3, [r7, #31]
 800bdda:	e045      	b.n	800be68 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bddc:	4b26      	ldr	r3, [pc, #152]	@ (800be78 <SecureElementSetKey+0xb8>)
 800bdde:	6819      	ldr	r1, [r3, #0]
 800bde0:	7ffa      	ldrb	r2, [r7, #31]
 800bde2:	4613      	mov	r3, r2
 800bde4:	011b      	lsls	r3, r3, #4
 800bde6:	4413      	add	r3, r2
 800bde8:	440b      	add	r3, r1
 800bdea:	3318      	adds	r3, #24
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	79fa      	ldrb	r2, [r7, #7]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d136      	bne.n	800be62 <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800bdf4:	79fb      	ldrb	r3, [r7, #7]
 800bdf6:	2b0d      	cmp	r3, #13
 800bdf8:	d123      	bne.n	800be42 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800bdfa:	2306      	movs	r3, #6
 800bdfc:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800bdfe:	2300      	movs	r3, #0
 800be00:	60fb      	str	r3, [r7, #12]
 800be02:	f107 0310 	add.w	r3, r7, #16
 800be06:	2200      	movs	r2, #0
 800be08:	601a      	str	r2, [r3, #0]
 800be0a:	605a      	str	r2, [r3, #4]
 800be0c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800be0e:	f107 030c 	add.w	r3, r7, #12
 800be12:	220c      	movs	r2, #12
 800be14:	2110      	movs	r1, #16
 800be16:	6838      	ldr	r0, [r7, #0]
 800be18:	f000 f876 	bl	800bf08 <SecureElementAesEncrypt>
 800be1c:	4603      	mov	r3, r0
 800be1e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800be20:	4b15      	ldr	r3, [pc, #84]	@ (800be78 <SecureElementSetKey+0xb8>)
 800be22:	6819      	ldr	r1, [r3, #0]
 800be24:	7ffa      	ldrb	r2, [r7, #31]
 800be26:	4613      	mov	r3, r2
 800be28:	011b      	lsls	r3, r3, #4
 800be2a:	4413      	add	r3, r2
 800be2c:	3318      	adds	r3, #24
 800be2e:	440b      	add	r3, r1
 800be30:	3301      	adds	r3, #1
 800be32:	f107 010c 	add.w	r1, r7, #12
 800be36:	2210      	movs	r2, #16
 800be38:	4618      	mov	r0, r3
 800be3a:	f00a fdea 	bl	8016a12 <memcpy1>
                return retval;
 800be3e:	7fbb      	ldrb	r3, [r7, #30]
 800be40:	e016      	b.n	800be70 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800be42:	4b0d      	ldr	r3, [pc, #52]	@ (800be78 <SecureElementSetKey+0xb8>)
 800be44:	6819      	ldr	r1, [r3, #0]
 800be46:	7ffa      	ldrb	r2, [r7, #31]
 800be48:	4613      	mov	r3, r2
 800be4a:	011b      	lsls	r3, r3, #4
 800be4c:	4413      	add	r3, r2
 800be4e:	3318      	adds	r3, #24
 800be50:	440b      	add	r3, r1
 800be52:	3301      	adds	r3, #1
 800be54:	2210      	movs	r2, #16
 800be56:	6839      	ldr	r1, [r7, #0]
 800be58:	4618      	mov	r0, r3
 800be5a:	f00a fdda 	bl	8016a12 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800be5e:	2300      	movs	r3, #0
 800be60:	e006      	b.n	800be70 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800be62:	7ffb      	ldrb	r3, [r7, #31]
 800be64:	3301      	adds	r3, #1
 800be66:	77fb      	strb	r3, [r7, #31]
 800be68:	7ffb      	ldrb	r3, [r7, #31]
 800be6a:	2b0a      	cmp	r3, #10
 800be6c:	d9b6      	bls.n	800bddc <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be6e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800be70:	4618      	mov	r0, r3
 800be72:	3720      	adds	r7, #32
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	20000658 	.word	0x20000658

0800be7c <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af02      	add	r7, sp, #8
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
 800be88:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800be8a:	78fb      	ldrb	r3, [r7, #3]
 800be8c:	2b0b      	cmp	r3, #11
 800be8e:	d901      	bls.n	800be94 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800be90:	2303      	movs	r3, #3
 800be92:	e009      	b.n	800bea8 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800be94:	78fa      	ldrb	r2, [r7, #3]
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	4613      	mov	r3, r2
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	68b9      	ldr	r1, [r7, #8]
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f7ff fe37 	bl	800bb14 <ComputeCmac>
 800bea6:	4603      	mov	r3, r0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b088      	sub	sp, #32
 800beb4:	af02      	add	r7, sp, #8
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d101      	bne.n	800bec8 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bec4:	2302      	movs	r3, #2
 800bec6:	e01b      	b.n	800bf00 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800bec8:	2306      	movs	r3, #6
 800beca:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800becc:	2300      	movs	r3, #0
 800bece:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800bed0:	78fa      	ldrb	r2, [r7, #3]
 800bed2:	f107 0310 	add.w	r3, r7, #16
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	4613      	mov	r3, r2
 800beda:	68ba      	ldr	r2, [r7, #8]
 800bedc:	68f9      	ldr	r1, [r7, #12]
 800bede:	2000      	movs	r0, #0
 800bee0:	f7ff fe18 	bl	800bb14 <ComputeCmac>
 800bee4:	4603      	mov	r3, r0
 800bee6:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bee8:	7dfb      	ldrb	r3, [r7, #23]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d001      	beq.n	800bef2 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800beee:	7dfb      	ldrb	r3, [r7, #23]
 800bef0:	e006      	b.n	800bf00 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d001      	beq.n	800befe <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800befa:	2301      	movs	r3, #1
 800befc:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800befe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3718      	adds	r7, #24
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b0c2      	sub	sp, #264	@ 0x108
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bf14:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800bf18:	6001      	str	r1, [r0, #0]
 800bf1a:	4611      	mov	r1, r2
 800bf1c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800bf20:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800bf24:	6013      	str	r3, [r2, #0]
 800bf26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf2a:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800bf2e:	460a      	mov	r2, r1
 800bf30:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d006      	beq.n	800bf46 <SecureElementAesEncrypt+0x3e>
 800bf38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf46:	2302      	movs	r3, #2
 800bf48:	e059      	b.n	800bffe <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800bf4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf4e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f003 030f 	and.w	r3, r3, #15
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bf5c:	2305      	movs	r3, #5
 800bf5e:	e04e      	b.n	800bffe <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bf60:	f107 0314 	add.w	r3, r7, #20
 800bf64:	22f0      	movs	r2, #240	@ 0xf0
 800bf66:	2100      	movs	r1, #0
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f00a fd8d 	bl	8016a88 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800bf6e:	f107 0210 	add.w	r2, r7, #16
 800bf72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf76:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7ff fd98 	bl	800bab4 <GetKeyByID>
 800bf84:	4603      	mov	r3, r0
 800bf86:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bf8a:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d133      	bne.n	800bffa <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	3301      	adds	r3, #1
 800bf96:	f107 0214 	add.w	r2, r7, #20
 800bf9a:	2110      	movs	r1, #16
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7ff fb65 	bl	800b66c <lorawan_aes_set_key>

        uint8_t block = 0;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800bfa8:	e020      	b.n	800bfec <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800bfaa:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bfae:	68fa      	ldr	r2, [r7, #12]
 800bfb0:	18d0      	adds	r0, r2, r3
 800bfb2:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bfb6:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800bfba:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800bfbe:	6812      	ldr	r2, [r2, #0]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	f107 0214 	add.w	r2, r7, #20
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	f7ff fc2e 	bl	800b828 <lorawan_aes_encrypt>
            block = block + 16;
 800bfcc:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bfd0:	3310      	adds	r3, #16
 800bfd2:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800bfd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfda:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800bfde:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800bfe2:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800bfe6:	6812      	ldr	r2, [r2, #0]
 800bfe8:	3a10      	subs	r2, #16
 800bfea:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800bfec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bff0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d1d7      	bne.n	800bfaa <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800bffa:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800bffe:	4618      	mov	r0, r3
 800c000:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b088      	sub	sp, #32
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	460b      	mov	r3, r1
 800c012:	70fb      	strb	r3, [r7, #3]
 800c014:	4613      	mov	r3, r2
 800c016:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d101      	bne.n	800c022 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c01e:	2302      	movs	r3, #2
 800c020:	e02e      	b.n	800c080 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c022:	2306      	movs	r3, #6
 800c024:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800c026:	78bb      	ldrb	r3, [r7, #2]
 800c028:	2b0c      	cmp	r3, #12
 800c02a:	d104      	bne.n	800c036 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c02c:	78fb      	ldrb	r3, [r7, #3]
 800c02e:	2b0b      	cmp	r3, #11
 800c030:	d001      	beq.n	800c036 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c032:	2303      	movs	r3, #3
 800c034:	e024      	b.n	800c080 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800c036:	2300      	movs	r3, #0
 800c038:	60fb      	str	r3, [r7, #12]
 800c03a:	f107 0310 	add.w	r3, r7, #16
 800c03e:	2200      	movs	r2, #0
 800c040:	601a      	str	r2, [r3, #0]
 800c042:	605a      	str	r2, [r3, #4]
 800c044:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800c046:	f107 030c 	add.w	r3, r7, #12
 800c04a:	78fa      	ldrb	r2, [r7, #3]
 800c04c:	2110      	movs	r1, #16
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f7ff ff5a 	bl	800bf08 <SecureElementAesEncrypt>
 800c054:	4603      	mov	r3, r0
 800c056:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c058:	7ffb      	ldrb	r3, [r7, #31]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d001      	beq.n	800c062 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c05e:	7ffb      	ldrb	r3, [r7, #31]
 800c060:	e00e      	b.n	800c080 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800c062:	f107 020c 	add.w	r2, r7, #12
 800c066:	78bb      	ldrb	r3, [r7, #2]
 800c068:	4611      	mov	r1, r2
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7ff fea8 	bl	800bdc0 <SecureElementSetKey>
 800c070:	4603      	mov	r3, r0
 800c072:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c074:	7ffb      	ldrb	r3, [r7, #31]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c07a:	7ffb      	ldrb	r3, [r7, #31]
 800c07c:	e000      	b.n	800c080 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c07e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c080:	4618      	mov	r0, r3
 800c082:	3720      	adds	r7, #32
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b086      	sub	sp, #24
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	60b9      	str	r1, [r7, #8]
 800c090:	607b      	str	r3, [r7, #4]
 800c092:	4603      	mov	r3, r0
 800c094:	73fb      	strb	r3, [r7, #15]
 800c096:	4613      	mov	r3, r2
 800c098:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d005      	beq.n	800c0ac <SecureElementProcessJoinAccept+0x24>
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d002      	beq.n	800c0ac <SecureElementProcessJoinAccept+0x24>
 800c0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d101      	bne.n	800c0b0 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c0ac:	2302      	movs	r3, #2
 800c0ae:	e05c      	b.n	800c16a <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c0b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0b4:	2b21      	cmp	r3, #33	@ 0x21
 800c0b6:	d901      	bls.n	800c0bc <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c0b8:	2305      	movs	r3, #5
 800c0ba:	e056      	b.n	800c16a <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c0c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	6879      	ldr	r1, [r7, #4]
 800c0ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c0cc:	f00a fca1 	bl	8016a12 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	1c58      	adds	r0, r3, #1
 800c0d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0d8:	3b01      	subs	r3, #1
 800c0da:	4619      	mov	r1, r3
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0de:	3301      	adds	r3, #1
 800c0e0:	7dfa      	ldrb	r2, [r7, #23]
 800c0e2:	f7ff ff11 	bl	800bf08 <SecureElementAesEncrypt>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d001      	beq.n	800c0f0 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c0ec:	2307      	movs	r3, #7
 800c0ee:	e03c      	b.n	800c16a <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f2:	330b      	adds	r3, #11
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	09db      	lsrs	r3, r3, #7
 800c0f8:	b2da      	uxtb	r2, r3
 800c0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0fc:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800c0fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c102:	3b04      	subs	r3, #4
 800c104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c106:	4413      	add	r3, r2
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	4619      	mov	r1, r3
 800c10c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c110:	3b03      	subs	r3, #3
 800c112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c114:	4413      	add	r3, r2
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	021b      	lsls	r3, r3, #8
 800c11a:	ea41 0203 	orr.w	r2, r1, r3
 800c11e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c122:	3b02      	subs	r3, #2
 800c124:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c126:	440b      	add	r3, r1
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	041b      	lsls	r3, r3, #16
 800c12c:	431a      	orrs	r2, r3
 800c12e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c132:	3b01      	subs	r3, #1
 800c134:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c136:	440b      	add	r3, r1
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	061b      	lsls	r3, r3, #24
 800c13c:	4313      	orrs	r3, r2
 800c13e:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800c140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10d      	bne.n	800c164 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c148:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c14c:	3b04      	subs	r3, #4
 800c14e:	4619      	mov	r1, r3
 800c150:	2301      	movs	r3, #1
 800c152:	693a      	ldr	r2, [r7, #16]
 800c154:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c156:	f7ff feab 	bl	800beb0 <SecureElementVerifyAesCmac>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d003      	beq.n	800c168 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c160:	2301      	movs	r3, #1
 800c162:	e002      	b.n	800c16a <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c164:	2304      	movs	r3, #4
 800c166:	e000      	b.n	800c16a <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3718      	adds	r7, #24
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
	...

0800c174 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d101      	bne.n	800c186 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c182:	2302      	movs	r3, #2
 800c184:	e006      	b.n	800c194 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800c186:	4b05      	ldr	r3, [pc, #20]	@ (800c19c <SecureElementRandomNumber+0x28>)
 800c188:	695b      	ldr	r3, [r3, #20]
 800c18a:	4798      	blx	r3
 800c18c:	4602      	mov	r2, r0
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3708      	adds	r7, #8
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	0801eb10 	.word	0x0801eb10

0800c1a0 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	e007      	b.n	800c1c2 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800c1b2:	4b06      	ldr	r3, [pc, #24]	@ (800c1cc <SecureElementSetDevEui+0x2c>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	2208      	movs	r2, #8
 800c1b8:	6879      	ldr	r1, [r7, #4]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f00a fc29 	bl	8016a12 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c1c0:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3708      	adds	r7, #8
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	20000658 	.word	0x20000658

0800c1d0 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d101      	bne.n	800c1e2 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1de:	2302      	movs	r3, #2
 800c1e0:	e007      	b.n	800c1f2 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800c1e2:	4b06      	ldr	r3, [pc, #24]	@ (800c1fc <SecureElementGetDevEui+0x2c>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	2208      	movs	r2, #8
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f00a fc11 	bl	8016a12 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c1f0:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3708      	adds	r7, #8
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20000658 	.word	0x20000658

0800c200 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c20e:	2302      	movs	r3, #2
 800c210:	e008      	b.n	800c224 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800c212:	4b06      	ldr	r3, [pc, #24]	@ (800c22c <SecureElementSetJoinEui+0x2c>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	3308      	adds	r3, #8
 800c218:	2208      	movs	r2, #8
 800c21a:	6879      	ldr	r1, [r7, #4]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f00a fbf8 	bl	8016a12 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c222:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c224:	4618      	mov	r0, r3
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	20000658 	.word	0x20000658

0800c230 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d101      	bne.n	800c242 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c23e:	2302      	movs	r3, #2
 800c240:	e008      	b.n	800c254 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800c242:	4b06      	ldr	r3, [pc, #24]	@ (800c25c <SecureElementGetJoinEui+0x2c>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	3308      	adds	r3, #8
 800c248:	2208      	movs	r2, #8
 800c24a:	4619      	mov	r1, r3
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f00a fbe0 	bl	8016a12 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c252:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800c254:	4618      	mov	r0, r3
 800c256:	3708      	adds	r7, #8
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	20000658 	.word	0x20000658

0800c260 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
 800c266:	4603      	mov	r3, r0
 800c268:	6039      	str	r1, [r7, #0]
 800c26a:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800c26c:	79fb      	ldrb	r3, [r7, #7]
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d104      	bne.n	800c27c <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800c272:	4b07      	ldr	r3, [pc, #28]	@ (800c290 <SecureElementSetDevAddr+0x30>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	683a      	ldr	r2, [r7, #0]
 800c278:	611a      	str	r2, [r3, #16]
 800c27a:	e003      	b.n	800c284 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800c27c:	4b04      	ldr	r3, [pc, #16]	@ (800c290 <SecureElementSetDevAddr+0x30>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	683a      	ldr	r2, [r7, #0]
 800c282:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800c284:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c286:	4618      	mov	r0, r3
 800c288:	370c      	adds	r7, #12
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bc80      	pop	{r7}
 800c28e:	4770      	bx	lr
 800c290:	20000658 	.word	0x20000658

0800c294 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	4603      	mov	r3, r0
 800c29c:	6039      	str	r1, [r7, #0]
 800c29e:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d101      	bne.n	800c2aa <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c2a6:	2302      	movs	r3, #2
 800c2a8:	e00e      	b.n	800c2c8 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800c2aa:	79fb      	ldrb	r3, [r7, #7]
 800c2ac:	2b02      	cmp	r3, #2
 800c2ae:	d105      	bne.n	800c2bc <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800c2b0:	4b08      	ldr	r3, [pc, #32]	@ (800c2d4 <SecureElementGetDevAddr+0x40>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	691a      	ldr	r2, [r3, #16]
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	601a      	str	r2, [r3, #0]
 800c2ba:	e004      	b.n	800c2c6 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800c2bc:	4b05      	ldr	r3, [pc, #20]	@ (800c2d4 <SecureElementGetDevAddr+0x40>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	695a      	ldr	r2, [r3, #20]
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800c2c6:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	370c      	adds	r7, #12
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bc80      	pop	{r7}
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	20000658 	.word	0x20000658

0800c2d8 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800c2e2:	4a22      	ldr	r2, [pc, #136]	@ (800c36c <LmHandlerInit+0x94>)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c2e8:	4b21      	ldr	r3, [pc, #132]	@ (800c370 <LmHandlerInit+0x98>)
 800c2ea:	4a22      	ldr	r2, [pc, #136]	@ (800c374 <LmHandlerInit+0x9c>)
 800c2ec:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c2ee:	4b20      	ldr	r3, [pc, #128]	@ (800c370 <LmHandlerInit+0x98>)
 800c2f0:	4a21      	ldr	r2, [pc, #132]	@ (800c378 <LmHandlerInit+0xa0>)
 800c2f2:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c2f4:	4b1e      	ldr	r3, [pc, #120]	@ (800c370 <LmHandlerInit+0x98>)
 800c2f6:	4a21      	ldr	r2, [pc, #132]	@ (800c37c <LmHandlerInit+0xa4>)
 800c2f8:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c2fa:	4b1d      	ldr	r3, [pc, #116]	@ (800c370 <LmHandlerInit+0x98>)
 800c2fc:	4a20      	ldr	r2, [pc, #128]	@ (800c380 <LmHandlerInit+0xa8>)
 800c2fe:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c300:	4b1a      	ldr	r3, [pc, #104]	@ (800c36c <LmHandlerInit+0x94>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a1f      	ldr	r2, [pc, #124]	@ (800c384 <LmHandlerInit+0xac>)
 800c308:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c30a:	4b18      	ldr	r3, [pc, #96]	@ (800c36c <LmHandlerInit+0x94>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	4a1c      	ldr	r2, [pc, #112]	@ (800c384 <LmHandlerInit+0xac>)
 800c312:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c314:	4b15      	ldr	r3, [pc, #84]	@ (800c36c <LmHandlerInit+0x94>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	4a1a      	ldr	r2, [pc, #104]	@ (800c384 <LmHandlerInit+0xac>)
 800c31c:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800c31e:	4b13      	ldr	r3, [pc, #76]	@ (800c36c <LmHandlerInit+0x94>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	4a17      	ldr	r2, [pc, #92]	@ (800c384 <LmHandlerInit+0xac>)
 800c326:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c328:	4b16      	ldr	r3, [pc, #88]	@ (800c384 <LmHandlerInit+0xac>)
 800c32a:	4a17      	ldr	r2, [pc, #92]	@ (800c388 <LmHandlerInit+0xb0>)
 800c32c:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c32e:	4b0f      	ldr	r3, [pc, #60]	@ (800c36c <LmHandlerInit+0x94>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	699b      	ldr	r3, [r3, #24]
 800c334:	4a13      	ldr	r2, [pc, #76]	@ (800c384 <LmHandlerInit+0xac>)
 800c336:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800c338:	4914      	ldr	r1, [pc, #80]	@ (800c38c <LmHandlerInit+0xb4>)
 800c33a:	2000      	movs	r0, #0
 800c33c:	f000 fd3a 	bl	800cdb4 <LmHandlerPackageRegister>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d002      	beq.n	800c34c <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800c346:	f04f 33ff 	mov.w	r3, #4294967295
 800c34a:	e00a      	b.n	800c362 <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800c34c:	463b      	mov	r3, r7
 800c34e:	4618      	mov	r0, r3
 800c350:	f001 fa02 	bl	800d758 <LmhpPackagesRegistrationInit>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d002      	beq.n	800c360 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800c35a:	f04f 33ff 	mov.w	r3, #4294967295
 800c35e:	e000      	b.n	800c362 <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800c360:	2300      	movs	r3, #0
}
 800c362:	4618      	mov	r0, r3
 800c364:	3708      	adds	r7, #8
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	200006a0 	.word	0x200006a0
 800c370:	200006a4 	.word	0x200006a4
 800c374:	0800ca79 	.word	0x0800ca79
 800c378:	0800caed 	.word	0x0800caed
 800c37c:	0800cbcd 	.word	0x0800cbcd
 800c380:	0800cd21 	.word	0x0800cd21
 800c384:	200006b4 	.word	0x200006b4
 800c388:	0800d12d 	.word	0x0800d12d
 800c38c:	20000074 	.word	0x20000074

0800c390 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b090      	sub	sp, #64	@ 0x40
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800c398:	2218      	movs	r2, #24
 800c39a:	6879      	ldr	r1, [r7, #4]
 800c39c:	4853      	ldr	r0, [pc, #332]	@ (800c4ec <LmHandlerConfigure+0x15c>)
 800c39e:	f00a fb38 	bl	8016a12 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c3a2:	f7fe fa8b 	bl	800a8bc <LoraInfo_GetPtr>
 800c3a6:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800c3a8:	4b50      	ldr	r3, [pc, #320]	@ (800c4ec <LmHandlerConfigure+0x15c>)
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	4093      	lsls	r3, r2
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d107      	bne.n	800c3ce <LmHandlerConfigure+0x3e>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800c3be:	4b4c      	ldr	r3, [pc, #304]	@ (800c4f0 <LmHandlerConfigure+0x160>)
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	f00e fee1 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800c3ca:	bf00      	nop
 800c3cc:	e7fd      	b.n	800c3ca <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800c3ce:	4b47      	ldr	r3, [pc, #284]	@ (800c4ec <LmHandlerConfigure+0x15c>)
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	4947      	ldr	r1, [pc, #284]	@ (800c4f4 <LmHandlerConfigure+0x164>)
 800c3d6:	4848      	ldr	r0, [pc, #288]	@ (800c4f8 <LmHandlerConfigure+0x168>)
 800c3d8:	f004 fba2 	bl	8010b20 <LoRaMacInitialization>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d002      	beq.n	800c3e8 <LmHandlerConfigure+0x58>
    {
        return LORAMAC_HANDLER_ERROR;
 800c3e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e6:	e07c      	b.n	800c4e2 <LmHandlerConfigure+0x152>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800c3e8:	2305      	movs	r3, #5
 800c3ea:	753b      	strb	r3, [r7, #20]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	61bb      	str	r3, [r7, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c3f0:	f107 0314 	add.w	r3, r7, #20
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f005 f901 	bl	80115fc <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800c3fa:	4b3e      	ldr	r3, [pc, #248]	@ (800c4f4 <LmHandlerConfigure+0x164>)
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	4a3d      	ldr	r2, [pc, #244]	@ (800c4f4 <LmHandlerConfigure+0x164>)
 800c400:	68d2      	ldr	r2, [r2, #12]
 800c402:	4611      	mov	r1, r2
 800c404:	4618      	mov	r0, r3
 800c406:	f7ff fc29 	bl	800bc5c <SecureElementInitMcuID>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <LmHandlerConfigure+0x86>
    {
        return LORAMAC_HANDLER_ERROR;
 800c410:	f04f 33ff 	mov.w	r3, #4294967295
 800c414:	e065      	b.n	800c4e2 <LmHandlerConfigure+0x152>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800c416:	2306      	movs	r3, #6
 800c418:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c41a:	f107 0314 	add.w	r3, r7, #20
 800c41e:	4618      	mov	r0, r3
 800c420:	f004 ff16 	bl	8011250 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	4a35      	ldr	r2, [pc, #212]	@ (800c4fc <LmHandlerConfigure+0x16c>)
 800c428:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c42a:	f107 0314 	add.w	r3, r7, #20
 800c42e:	4618      	mov	r0, r3
 800c430:	f005 f8e4 	bl	80115fc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800c434:	2302      	movs	r3, #2
 800c436:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800c438:	4b30      	ldr	r3, [pc, #192]	@ (800c4fc <LmHandlerConfigure+0x16c>)
 800c43a:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c43c:	f107 0314 	add.w	r3, r7, #20
 800c440:	4618      	mov	r0, r3
 800c442:	f004 ff05 	bl	8011250 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800c446:	2303      	movs	r3, #3
 800c448:	753b      	strb	r3, [r7, #20]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800c44a:	4b2d      	ldr	r3, [pc, #180]	@ (800c500 <LmHandlerConfigure+0x170>)
 800c44c:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c44e:	f107 0314 	add.w	r3, r7, #20
 800c452:	4618      	mov	r0, r3
 800c454:	f004 fefc 	bl	8011250 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800c458:	f7ff fc80 	bl	800bd5c <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c45c:	230f      	movs	r3, #15
 800c45e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c460:	2301      	movs	r3, #1
 800c462:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c464:	f107 0314 	add.w	r3, r7, #20
 800c468:	4618      	mov	r0, r3
 800c46a:	f005 f8c7 	bl	80115fc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c46e:	2310      	movs	r3, #16
 800c470:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c472:	2300      	movs	r3, #0
 800c474:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c476:	f107 0314 	add.w	r3, r7, #20
 800c47a:	4618      	mov	r0, r3
 800c47c:	f005 f8be 	bl	80115fc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c480:	2304      	movs	r3, #4
 800c482:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c484:	4b19      	ldr	r3, [pc, #100]	@ (800c4ec <LmHandlerConfigure+0x15c>)
 800c486:	789b      	ldrb	r3, [r3, #2]
 800c488:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c48a:	f107 0314 	add.w	r3, r7, #20
 800c48e:	4618      	mov	r0, r3
 800c490:	f005 f8b4 	bl	80115fc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c494:	2339      	movs	r3, #57	@ 0x39
 800c496:	753b      	strb	r3, [r7, #20]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c498:	4b14      	ldr	r3, [pc, #80]	@ (800c4ec <LmHandlerConfigure+0x15c>)
 800c49a:	695b      	ldr	r3, [r3, #20]
 800c49c:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c49e:	f107 0314 	add.w	r3, r7, #20
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f005 f8aa 	bl	80115fc <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c4a8:	230f      	movs	r3, #15
 800c4aa:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c4ac:	4b0f      	ldr	r3, [pc, #60]	@ (800c4ec <LmHandlerConfigure+0x15c>)
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	f107 020c 	add.w	r2, r7, #12
 800c4b4:	4611      	mov	r1, r2
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f007 ff9f 	bl	80143fa <RegionGetPhyParam>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	bf14      	ite	ne
 800c4c6:	2301      	movne	r3, #1
 800c4c8:	2300      	moveq	r3, #0
 800c4ca:	b2da      	uxtb	r2, r3
 800c4cc:	4b07      	ldr	r3, [pc, #28]	@ (800c4ec <LmHandlerConfigure+0x15c>)
 800c4ce:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800c4d0:	2014      	movs	r0, #20
 800c4d2:	f000 fab9 	bl	800ca48 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c4d6:	4b05      	ldr	r3, [pc, #20]	@ (800c4ec <LmHandlerConfigure+0x15c>)
 800c4d8:	79db      	ldrb	r3, [r3, #7]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f005 fe8c 	bl	80121f8 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c4e0:	2300      	movs	r3, #0
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3740      	adds	r7, #64	@ 0x40
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	20000688 	.word	0x20000688
 800c4f0:	0801e3e0 	.word	0x0801e3e0
 800c4f4:	200006b4 	.word	0x200006b4
 800c4f8:	200006a4 	.word	0x200006a4
 800c4fc:	2000065c 	.word	0x2000065c
 800c500:	20000664 	.word	0x20000664

0800c504 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800c508:	f002 fb06 	bl	800eb18 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800c50c:	f000 fd90 	bl	800d030 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800c510:	f000 fd60 	bl	800cfd4 <LmHandlerPackageIsTxPending>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c518:	bd80      	pop	{r7, pc}
	...

0800c51c <LmHandlerJoin>:
{
    return DutyCycleWaitTime;
}

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b092      	sub	sp, #72	@ 0x48
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	460a      	mov	r2, r1
 800c526:	71fb      	strb	r3, [r7, #7]
 800c528:	4613      	mov	r3, r2
 800c52a:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c52c:	2301      	movs	r3, #1
 800c52e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c532:	4b47      	ldr	r3, [pc, #284]	@ (800c650 <LmHandlerJoin+0x134>)
 800c534:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800c53e:	4b44      	ldr	r3, [pc, #272]	@ (800c650 <LmHandlerJoin+0x134>)
 800c540:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c544:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800c548:	79fb      	ldrb	r3, [r7, #7]
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	d110      	bne.n	800c570 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c54e:	2302      	movs	r3, #2
 800c550:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c554:	4b3f      	ldr	r3, [pc, #252]	@ (800c654 <LmHandlerJoin+0x138>)
 800c556:	2202      	movs	r2, #2
 800c558:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800c55a:	4a3e      	ldr	r2, [pc, #248]	@ (800c654 <LmHandlerJoin+0x138>)
 800c55c:	79bb      	ldrb	r3, [r7, #6]
 800c55e:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800c560:	f004 fd90 	bl	8011084 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800c564:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800c568:	4618      	mov	r0, r3
 800c56a:	f005 fbfd 	bl	8011d68 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800c56e:	e06b      	b.n	800c648 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c570:	2301      	movs	r3, #1
 800c572:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c576:	4b37      	ldr	r3, [pc, #220]	@ (800c654 <LmHandlerJoin+0x138>)
 800c578:	2201      	movs	r2, #1
 800c57a:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c57c:	4b34      	ldr	r3, [pc, #208]	@ (800c650 <LmHandlerJoin+0x134>)
 800c57e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c582:	4b34      	ldr	r3, [pc, #208]	@ (800c654 <LmHandlerJoin+0x138>)
 800c584:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800c586:	4b32      	ldr	r3, [pc, #200]	@ (800c650 <LmHandlerJoin+0x134>)
 800c588:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800c58c:	4b31      	ldr	r3, [pc, #196]	@ (800c654 <LmHandlerJoin+0x138>)
 800c58e:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c590:	4b30      	ldr	r3, [pc, #192]	@ (800c654 <LmHandlerJoin+0x138>)
 800c592:	2200      	movs	r2, #0
 800c594:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c596:	4a2f      	ldr	r2, [pc, #188]	@ (800c654 <LmHandlerJoin+0x138>)
 800c598:	79bb      	ldrb	r3, [r7, #6]
 800c59a:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800c59c:	4b2e      	ldr	r3, [pc, #184]	@ (800c658 <LmHandlerJoin+0x13c>)
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	f083 0301 	eor.w	r3, r3, #1
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d034      	beq.n	800c614 <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c5aa:	231e      	movs	r3, #30
 800c5ac:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c5ae:	4b28      	ldr	r3, [pc, #160]	@ (800c650 <LmHandlerJoin+0x134>)
 800c5b0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c5b4:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c5b6:	f107 030c 	add.w	r3, r7, #12
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f005 f81e 	bl	80115fc <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c5c0:	231f      	movs	r3, #31
 800c5c2:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c5c4:	4b22      	ldr	r3, [pc, #136]	@ (800c650 <LmHandlerJoin+0x134>)
 800c5c6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c5ca:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c5cc:	f107 030c 	add.w	r3, r7, #12
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f005 f813 	bl	80115fc <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800c5d6:	2321      	movs	r3, #33	@ 0x21
 800c5d8:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800c5da:	4b1d      	ldr	r3, [pc, #116]	@ (800c650 <LmHandlerJoin+0x134>)
 800c5dc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c5e0:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c5e2:	f107 030c 	add.w	r3, r7, #12
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f005 f808 	bl	80115fc <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800c5ec:	2320      	movs	r3, #32
 800c5ee:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800c5f0:	4b17      	ldr	r3, [pc, #92]	@ (800c650 <LmHandlerJoin+0x134>)
 800c5f2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c5f6:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c5f8:	f107 030c 	add.w	r3, r7, #12
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f004 fffd 	bl	80115fc <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c602:	2328      	movs	r3, #40	@ 0x28
 800c604:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c606:	4b15      	ldr	r3, [pc, #84]	@ (800c65c <LmHandlerJoin+0x140>)
 800c608:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c60a:	f107 030c 	add.w	r3, r7, #12
 800c60e:	4618      	mov	r0, r3
 800c610:	f004 fff4 	bl	80115fc <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c614:	f004 fd36 	bl	8011084 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c618:	2301      	movs	r3, #1
 800c61a:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c61c:	2301      	movs	r3, #1
 800c61e:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c620:	f107 030c 	add.w	r3, r7, #12
 800c624:	4618      	mov	r0, r3
 800c626:	f004 ffe9 	bl	80115fc <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800c62a:	4b0d      	ldr	r3, [pc, #52]	@ (800c660 <LmHandlerJoin+0x144>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c630:	2b00      	cmp	r3, #0
 800c632:	d004      	beq.n	800c63e <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c634:	4b0a      	ldr	r3, [pc, #40]	@ (800c660 <LmHandlerJoin+0x144>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c63a:	4806      	ldr	r0, [pc, #24]	@ (800c654 <LmHandlerJoin+0x138>)
 800c63c:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800c63e:	4b04      	ldr	r3, [pc, #16]	@ (800c650 <LmHandlerJoin+0x134>)
 800c640:	785b      	ldrb	r3, [r3, #1]
 800c642:	4618      	mov	r0, r3
 800c644:	f000 f930 	bl	800c8a8 <LmHandlerRequestClass>
}
 800c648:	bf00      	nop
 800c64a:	3748      	adds	r7, #72	@ 0x48
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	20000688 	.word	0x20000688
 800c654:	20000080 	.word	0x20000080
 800c658:	200007c2 	.word	0x200007c2
 800c65c:	01000300 	.word	0x01000300
 800c660:	200006a0 	.word	0x200006a0

0800c664 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b08c      	sub	sp, #48	@ 0x30
 800c668:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c66a:	2301      	movs	r3, #1
 800c66c:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c66e:	1d3b      	adds	r3, r7, #4
 800c670:	4618      	mov	r0, r3
 800c672:	f004 fded 	bl	8011250 <LoRaMacMibGetRequestConfirm>
 800c676:	4603      	mov	r3, r0
 800c678:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800c67c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c680:	2b00      	cmp	r3, #0
 800c682:	d106      	bne.n	800c692 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c684:	7a3b      	ldrb	r3, [r7, #8]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d101      	bne.n	800c68e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c68a:	2300      	movs	r3, #0
 800c68c:	e002      	b.n	800c694 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c68e:	2301      	movs	r3, #1
 800c690:	e000      	b.n	800c694 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c692:	2300      	movs	r3, #0
    }
}
 800c694:	4618      	mov	r0, r3
 800c696:	3730      	adds	r7, #48	@ 0x30
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b08a      	sub	sp, #40	@ 0x28
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	70fb      	strb	r3, [r7, #3]
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c6ac:	23ff      	movs	r3, #255	@ 0xff
 800c6ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800c6b2:	f001 ffbd 	bl	800e630 <LoRaMacIsBusy>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d002      	beq.n	800c6c2 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c6bc:	f06f 0301 	mvn.w	r3, #1
 800c6c0:	e0bc      	b.n	800c83c <LmHandlerSend+0x1a0>
    }

    if( LoRaMacIsStopped() == true )
 800c6c2:	f001 ffd1 	bl	800e668 <LoRaMacIsStopped>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d002      	beq.n	800c6d2 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c6cc:	f06f 0302 	mvn.w	r3, #2
 800c6d0:	e0b4      	b.n	800c83c <LmHandlerSend+0x1a0>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c6d2:	f7ff ffc7 	bl	800c664 <LmHandlerJoinStatus>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d00a      	beq.n	800c6f2 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800c6dc:	4b59      	ldr	r3, [pc, #356]	@ (800c844 <LmHandlerSend+0x1a8>)
 800c6de:	79db      	ldrb	r3, [r3, #7]
 800c6e0:	4a58      	ldr	r2, [pc, #352]	@ (800c844 <LmHandlerSend+0x1a8>)
 800c6e2:	7a12      	ldrb	r2, [r2, #8]
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff ff18 	bl	800c51c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c6ec:	f06f 0302 	mvn.w	r3, #2
 800c6f0:	e0a4      	b.n	800c83c <LmHandlerSend+0x1a0>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800c6f2:	4b55      	ldr	r3, [pc, #340]	@ (800c848 <LmHandlerSend+0x1ac>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	4798      	blx	r3
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00d      	beq.n	800c71c <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	781a      	ldrb	r2, [r3, #0]
 800c704:	4b50      	ldr	r3, [pc, #320]	@ (800c848 <LmHandlerSend+0x1ac>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d006      	beq.n	800c71c <LmHandlerSend+0x80>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d002      	beq.n	800c71c <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c716:	f06f 0303 	mvn.w	r3, #3
 800c71a:	e08f      	b.n	800c83c <LmHandlerSend+0x1a0>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800c71c:	4a4b      	ldr	r2, [pc, #300]	@ (800c84c <LmHandlerSend+0x1b0>)
 800c71e:	78fb      	ldrb	r3, [r7, #3]
 800c720:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800c722:	78fb      	ldrb	r3, [r7, #3]
 800c724:	2b00      	cmp	r3, #0
 800c726:	bf14      	ite	ne
 800c728:	2301      	movne	r3, #1
 800c72a:	2300      	moveq	r3, #0
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c730:	4b47      	ldr	r3, [pc, #284]	@ (800c850 <LmHandlerSend+0x1b4>)
 800c732:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c736:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	785b      	ldrb	r3, [r3, #1]
 800c73c:	f107 020c 	add.w	r2, r7, #12
 800c740:	4611      	mov	r1, r2
 800c742:	4618      	mov	r0, r3
 800c744:	f004 fcfe 	bl	8011144 <LoRaMacQueryTxPossible>
 800c748:	4603      	mov	r3, r0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d009      	beq.n	800c762 <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c74e:	2300      	movs	r3, #0
 800c750:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c752:	2300      	movs	r3, #0
 800c754:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c756:	2300      	movs	r3, #0
 800c758:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800c75a:	23f9      	movs	r3, #249	@ 0xf9
 800c75c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c760:	e008      	b.n	800c774 <LmHandlerSend+0xd8>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	785b      	ldrb	r3, [r3, #1]
 800c76c:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800c774:	4b35      	ldr	r3, [pc, #212]	@ (800c84c <LmHandlerSend+0x1b0>)
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	3310      	adds	r3, #16
 800c77a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c77e:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c782:	4b33      	ldr	r3, [pc, #204]	@ (800c850 <LmHandlerSend+0x1b4>)
 800c784:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c788:	4b30      	ldr	r3, [pc, #192]	@ (800c84c <LmHandlerSend+0x1b0>)
 800c78a:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800c78c:	78ba      	ldrb	r2, [r7, #2]
 800c78e:	f107 0310 	add.w	r3, r7, #16
 800c792:	4611      	mov	r1, r2
 800c794:	4618      	mov	r0, r3
 800c796:	f005 fc39 	bl	801200c <LoRaMacMcpsRequest>
 800c79a:	4603      	mov	r3, r0
 800c79c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c7a0:	6a3b      	ldr	r3, [r7, #32]
 800c7a2:	4a2c      	ldr	r2, [pc, #176]	@ (800c854 <LmHandlerSend+0x1b8>)
 800c7a4:	6013      	str	r3, [r2, #0]

    switch( status )
 800c7a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c7aa:	2b11      	cmp	r3, #17
 800c7ac:	d83f      	bhi.n	800c82e <LmHandlerSend+0x192>
 800c7ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c7b4 <LmHandlerSend+0x118>)
 800c7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b4:	0800c7fd 	.word	0x0800c7fd
 800c7b8:	0800c80f 	.word	0x0800c80f
 800c7bc:	0800c82f 	.word	0x0800c82f
 800c7c0:	0800c82f 	.word	0x0800c82f
 800c7c4:	0800c82f 	.word	0x0800c82f
 800c7c8:	0800c82f 	.word	0x0800c82f
 800c7cc:	0800c82f 	.word	0x0800c82f
 800c7d0:	0800c817 	.word	0x0800c817
 800c7d4:	0800c82f 	.word	0x0800c82f
 800c7d8:	0800c82f 	.word	0x0800c82f
 800c7dc:	0800c82f 	.word	0x0800c82f
 800c7e0:	0800c827 	.word	0x0800c827
 800c7e4:	0800c82f 	.word	0x0800c82f
 800c7e8:	0800c82f 	.word	0x0800c82f
 800c7ec:	0800c80f 	.word	0x0800c80f
 800c7f0:	0800c80f 	.word	0x0800c80f
 800c7f4:	0800c80f 	.word	0x0800c80f
 800c7f8:	0800c81f 	.word	0x0800c81f
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800c7fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c800:	f113 0f07 	cmn.w	r3, #7
 800c804:	d017      	beq.n	800c836 <LmHandlerSend+0x19a>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c806:	2300      	movs	r3, #0
 800c808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800c80c:	e013      	b.n	800c836 <LmHandlerSend+0x19a>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c80e:	23fe      	movs	r3, #254	@ 0xfe
 800c810:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c814:	e010      	b.n	800c838 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c816:	23fd      	movs	r3, #253	@ 0xfd
 800c818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c81c:	e00c      	b.n	800c838 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c81e:	23fb      	movs	r3, #251	@ 0xfb
 800c820:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c824:	e008      	b.n	800c838 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c826:	23fa      	movs	r3, #250	@ 0xfa
 800c828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c82c:	e004      	b.n	800c838 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c82e:	23ff      	movs	r3, #255	@ 0xff
 800c830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c834:	e000      	b.n	800c838 <LmHandlerSend+0x19c>
            break;
 800c836:	bf00      	nop
    }

    return lmhStatus;
 800c838:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3728      	adds	r7, #40	@ 0x28
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	20000080 	.word	0x20000080
 800c848:	20000674 	.word	0x20000674
 800c84c:	2000008c 	.word	0x2000008c
 800c850:	20000688 	.word	0x20000688
 800c854:	200006cc 	.word	0x200006cc

0800c858 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b086      	sub	sp, #24
 800c85c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c85e:	230a      	movs	r3, #10
 800c860:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c862:	463b      	mov	r3, r7
 800c864:	4618      	mov	r0, r3
 800c866:	f005 fa7f 	bl	8011d68 <LoRaMacMlmeRequest>
 800c86a:	4603      	mov	r3, r0
 800c86c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	4a06      	ldr	r2, [pc, #24]	@ (800c88c <LmHandlerDeviceTimeReq+0x34>)
 800c872:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800c874:	7dfb      	ldrb	r3, [r7, #23]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d101      	bne.n	800c87e <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c87a:	2300      	movs	r3, #0
 800c87c:	e001      	b.n	800c882 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c87e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c882:	4618      	mov	r0, r3
 800c884:	3718      	adds	r7, #24
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	200006cc 	.word	0x200006cc

0800c890 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	4603      	mov	r3, r0
 800c898:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800c89a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	370c      	adds	r7, #12
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bc80      	pop	{r7}
 800c8a6:	4770      	bx	lr

0800c8a8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b08e      	sub	sp, #56	@ 0x38
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800c8b8:	f001 feba 	bl	800e630 <LoRaMacIsBusy>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d002      	beq.n	800c8c8 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c8c2:	f06f 0301 	mvn.w	r3, #1
 800c8c6:	e071      	b.n	800c9ac <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800c8c8:	f7ff fecc 	bl	800c664 <LmHandlerJoinStatus>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d002      	beq.n	800c8d8 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c8d2:	f06f 0302 	mvn.w	r3, #2
 800c8d6:	e069      	b.n	800c9ac <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c8dc:	f107 030c 	add.w	r3, r7, #12
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f004 fcb5 	bl	8011250 <LoRaMacMibGetRequestConfirm>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d002      	beq.n	800c8f2 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c8f0:	e05c      	b.n	800c9ac <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800c8f2:	7c3b      	ldrb	r3, [r7, #16]
 800c8f4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800c8f8:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800c8fc:	79fb      	ldrb	r3, [r7, #7]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d052      	beq.n	800c9a8 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800c902:	79fb      	ldrb	r3, [r7, #7]
 800c904:	2b02      	cmp	r3, #2
 800c906:	d028      	beq.n	800c95a <LmHandlerRequestClass+0xb2>
 800c908:	2b02      	cmp	r3, #2
 800c90a:	dc48      	bgt.n	800c99e <LmHandlerRequestClass+0xf6>
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d002      	beq.n	800c916 <LmHandlerRequestClass+0x6e>
 800c910:	2b01      	cmp	r3, #1
 800c912:	d01e      	beq.n	800c952 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800c914:	e043      	b.n	800c99e <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800c916:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d041      	beq.n	800c9a2 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800c91e:	79fb      	ldrb	r3, [r7, #7]
 800c920:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c922:	f107 030c 	add.w	r3, r7, #12
 800c926:	4618      	mov	r0, r3
 800c928:	f004 fe68 	bl	80115fc <LoRaMacMibSetRequestConfirm>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d10b      	bne.n	800c94a <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800c932:	4b20      	ldr	r3, [pc, #128]	@ (800c9b4 <LmHandlerRequestClass+0x10c>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d032      	beq.n	800c9a2 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800c93c:	4b1d      	ldr	r3, [pc, #116]	@ (800c9b4 <LmHandlerRequestClass+0x10c>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c942:	79fa      	ldrb	r2, [r7, #7]
 800c944:	4610      	mov	r0, r2
 800c946:	4798      	blx	r3
                break;
 800c948:	e02b      	b.n	800c9a2 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800c94a:	23ff      	movs	r3, #255	@ 0xff
 800c94c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800c950:	e027      	b.n	800c9a2 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c952:	23ff      	movs	r3, #255	@ 0xff
 800c954:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800c958:	e026      	b.n	800c9a8 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800c95a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d003      	beq.n	800c96a <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c962:	23ff      	movs	r3, #255	@ 0xff
 800c964:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800c968:	e01d      	b.n	800c9a6 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800c96a:	79fb      	ldrb	r3, [r7, #7]
 800c96c:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c96e:	f107 030c 	add.w	r3, r7, #12
 800c972:	4618      	mov	r0, r3
 800c974:	f004 fe42 	bl	80115fc <LoRaMacMibSetRequestConfirm>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d10b      	bne.n	800c996 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800c97e:	4b0d      	ldr	r3, [pc, #52]	@ (800c9b4 <LmHandlerRequestClass+0x10c>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00e      	beq.n	800c9a6 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800c988:	4b0a      	ldr	r3, [pc, #40]	@ (800c9b4 <LmHandlerRequestClass+0x10c>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c98e:	79fa      	ldrb	r2, [r7, #7]
 800c990:	4610      	mov	r0, r2
 800c992:	4798      	blx	r3
                break;
 800c994:	e007      	b.n	800c9a6 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800c996:	23ff      	movs	r3, #255	@ 0xff
 800c998:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800c99c:	e003      	b.n	800c9a6 <LmHandlerRequestClass+0xfe>
                break;
 800c99e:	bf00      	nop
 800c9a0:	e002      	b.n	800c9a8 <LmHandlerRequestClass+0x100>
                break;
 800c9a2:	bf00      	nop
 800c9a4:	e000      	b.n	800c9a8 <LmHandlerRequestClass+0x100>
                break;
 800c9a6:	bf00      	nop
        }
    }
    return errorStatus;
 800c9a8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3738      	adds	r7, #56	@ 0x38
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	200006a0 	.word	0x200006a0

0800c9b8 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b08c      	sub	sp, #48	@ 0x30
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d102      	bne.n	800c9cc <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ca:	e010      	b.n	800c9ee <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c9d0:	f107 0308 	add.w	r3, r7, #8
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f004 fc3b 	bl	8011250 <LoRaMacMibGetRequestConfirm>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d002      	beq.n	800c9e6 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9e4:	e003      	b.n	800c9ee <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c9e6:	7b3a      	ldrb	r2, [r7, #12]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3730      	adds	r7, #48	@ 0x30
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
	...

0800c9f8 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b08c      	sub	sp, #48	@ 0x30
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d102      	bne.n	800ca0c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ca06:	f04f 33ff 	mov.w	r3, #4294967295
 800ca0a:	e016      	b.n	800ca3a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800ca0c:	231f      	movs	r3, #31
 800ca0e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800ca10:	f107 0308 	add.w	r3, r7, #8
 800ca14:	4618      	mov	r0, r3
 800ca16:	f004 fc1b 	bl	8011250 <LoRaMacMibGetRequestConfirm>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d002      	beq.n	800ca26 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ca20:	f04f 33ff 	mov.w	r3, #4294967295
 800ca24:	e009      	b.n	800ca3a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800ca26:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f993 2000 	ldrsb.w	r2, [r3]
 800ca34:	4b03      	ldr	r3, [pc, #12]	@ (800ca44 <LmHandlerGetTxDatarate+0x4c>)
 800ca36:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3730      	adds	r7, #48	@ 0x30
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	20000688 	.word	0x20000688

0800ca48 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b08c      	sub	sp, #48	@ 0x30
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800ca50:	2322      	movs	r3, #34	@ 0x22
 800ca52:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ca58:	f107 0308 	add.w	r3, r7, #8
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f004 fdcd 	bl	80115fc <LoRaMacMibSetRequestConfirm>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d002      	beq.n	800ca6e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800ca68:	f04f 33ff 	mov.w	r3, #4294967295
 800ca6c:	e000      	b.n	800ca70 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3730      	adds	r7, #48	@ 0x30
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800ca80:	4b18      	ldr	r3, [pc, #96]	@ (800cae4 <McpsConfirm+0x6c>)
 800ca82:	2201      	movs	r2, #1
 800ca84:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	785a      	ldrb	r2, [r3, #1]
 800ca8a:	4b16      	ldr	r3, [pc, #88]	@ (800cae4 <McpsConfirm+0x6c>)
 800ca8c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	789b      	ldrb	r3, [r3, #2]
 800ca92:	b25a      	sxtb	r2, r3
 800ca94:	4b13      	ldr	r3, [pc, #76]	@ (800cae4 <McpsConfirm+0x6c>)
 800ca96:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	4a11      	ldr	r2, [pc, #68]	@ (800cae4 <McpsConfirm+0x6c>)
 800ca9e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800caa6:	4b0f      	ldr	r3, [pc, #60]	@ (800cae4 <McpsConfirm+0x6c>)
 800caa8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	b2da      	uxtb	r2, r3
 800cab0:	4b0c      	ldr	r3, [pc, #48]	@ (800cae4 <McpsConfirm+0x6c>)
 800cab2:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	791b      	ldrb	r3, [r3, #4]
 800cab8:	461a      	mov	r2, r3
 800caba:	4b0a      	ldr	r3, [pc, #40]	@ (800cae4 <McpsConfirm+0x6c>)
 800cabc:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800cabe:	4b0a      	ldr	r3, [pc, #40]	@ (800cae8 <McpsConfirm+0x70>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d004      	beq.n	800cad2 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800cac8:	4b07      	ldr	r3, [pc, #28]	@ (800cae8 <McpsConfirm+0x70>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cace:	4805      	ldr	r0, [pc, #20]	@ (800cae4 <McpsConfirm+0x6c>)
 800cad0:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800cad2:	6879      	ldr	r1, [r7, #4]
 800cad4:	2000      	movs	r0, #0
 800cad6:	f000 f9eb 	bl	800ceb0 <LmHandlerPackagesNotify>
}
 800cada:	bf00      	nop
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	2000008c 	.word	0x2000008c
 800cae8:	200006a0 	.word	0x200006a0

0800caec <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b088      	sub	sp, #32
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800caf6:	2300      	movs	r3, #0
 800caf8:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800cafa:	4b32      	ldr	r3, [pc, #200]	@ (800cbc4 <McpsIndication+0xd8>)
 800cafc:	2201      	movs	r2, #1
 800cafe:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	785a      	ldrb	r2, [r3, #1]
 800cb04:	4b2f      	ldr	r3, [pc, #188]	@ (800cbc4 <McpsIndication+0xd8>)
 800cb06:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800cb08:	4b2e      	ldr	r3, [pc, #184]	@ (800cbc4 <McpsIndication+0xd8>)
 800cb0a:	785b      	ldrb	r3, [r3, #1]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d155      	bne.n	800cbbc <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	791b      	ldrb	r3, [r3, #4]
 800cb14:	b25a      	sxtb	r2, r3
 800cb16:	4b2b      	ldr	r3, [pc, #172]	@ (800cbc4 <McpsIndication+0xd8>)
 800cb18:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb20:	b25a      	sxtb	r2, r3
 800cb22:	4b28      	ldr	r3, [pc, #160]	@ (800cbc4 <McpsIndication+0xd8>)
 800cb24:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cb2c:	4b25      	ldr	r3, [pc, #148]	@ (800cbc4 <McpsIndication+0xd8>)
 800cb2e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	78da      	ldrb	r2, [r3, #3]
 800cb34:	4b23      	ldr	r3, [pc, #140]	@ (800cbc4 <McpsIndication+0xd8>)
 800cb36:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	691b      	ldr	r3, [r3, #16]
 800cb3c:	4a21      	ldr	r2, [pc, #132]	@ (800cbc4 <McpsIndication+0xd8>)
 800cb3e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	78db      	ldrb	r3, [r3, #3]
 800cb44:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	7b1b      	ldrb	r3, [r3, #12]
 800cb4a:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800cb52:	4b1d      	ldr	r3, [pc, #116]	@ (800cbc8 <McpsIndication+0xdc>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d007      	beq.n	800cb6c <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800cb5c:	4b1a      	ldr	r3, [pc, #104]	@ (800cbc8 <McpsIndication+0xdc>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb62:	f107 0218 	add.w	r2, r7, #24
 800cb66:	4917      	ldr	r1, [pc, #92]	@ (800cbc4 <McpsIndication+0xd8>)
 800cb68:	4610      	mov	r0, r2
 800cb6a:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800cb6c:	4b16      	ldr	r3, [pc, #88]	@ (800cbc8 <McpsIndication+0xdc>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d007      	beq.n	800cb86 <McpsIndication+0x9a>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	7e1b      	ldrb	r3, [r3, #24]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d003      	beq.n	800cb86 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800cb7e:	4b12      	ldr	r3, [pc, #72]	@ (800cbc8 <McpsIndication+0xdc>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb84:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800cb86:	6879      	ldr	r1, [r7, #4]
 800cb88:	2001      	movs	r0, #1
 800cb8a:	f000 f991 	bl	800ceb0 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800cb8e:	f107 0317 	add.w	r3, r7, #23
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7ff ff10 	bl	800c9b8 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	795b      	ldrb	r3, [r3, #5]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d00e      	beq.n	800cbbe <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800cba0:	2300      	movs	r3, #0
 800cba2:	733b      	strb	r3, [r7, #12]
 800cba4:	2300      	movs	r3, #0
 800cba6:	737b      	strb	r3, [r7, #13]
 800cba8:	2300      	movs	r3, #0
 800cbaa:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800cbac:	f107 030c 	add.w	r3, r7, #12
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7ff fd71 	bl	800c69c <LmHandlerSend>
 800cbba:	e000      	b.n	800cbbe <McpsIndication+0xd2>
        return;
 800cbbc:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800cbbe:	3720      	adds	r7, #32
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	200000a8 	.word	0x200000a8
 800cbc8:	200006a0 	.word	0x200006a0

0800cbcc <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b08c      	sub	sp, #48	@ 0x30
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800cbd4:	4b4a      	ldr	r3, [pc, #296]	@ (800cd00 <MlmeConfirm+0x134>)
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	785a      	ldrb	r2, [r3, #1]
 800cbde:	4b48      	ldr	r3, [pc, #288]	@ (800cd00 <MlmeConfirm+0x134>)
 800cbe0:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800cbe2:	4b48      	ldr	r3, [pc, #288]	@ (800cd04 <MlmeConfirm+0x138>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d004      	beq.n	800cbf6 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800cbec:	4b45      	ldr	r3, [pc, #276]	@ (800cd04 <MlmeConfirm+0x138>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbf2:	4843      	ldr	r0, [pc, #268]	@ (800cd00 <MlmeConfirm+0x134>)
 800cbf4:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800cbf6:	6879      	ldr	r1, [r7, #4]
 800cbf8:	2002      	movs	r0, #2
 800cbfa:	f000 f959 	bl	800ceb0 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	3b01      	subs	r3, #1
 800cc04:	2b0c      	cmp	r3, #12
 800cc06:	d874      	bhi.n	800ccf2 <MlmeConfirm+0x126>
 800cc08:	a201      	add	r2, pc, #4	@ (adr r2, 800cc10 <MlmeConfirm+0x44>)
 800cc0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc0e:	bf00      	nop
 800cc10:	0800cc45 	.word	0x0800cc45
 800cc14:	0800ccf3 	.word	0x0800ccf3
 800cc18:	0800ccf3 	.word	0x0800ccf3
 800cc1c:	0800ccf3 	.word	0x0800ccf3
 800cc20:	0800ccc1 	.word	0x0800ccc1
 800cc24:	0800ccf3 	.word	0x0800ccf3
 800cc28:	0800ccf3 	.word	0x0800ccf3
 800cc2c:	0800ccf3 	.word	0x0800ccf3
 800cc30:	0800ccf3 	.word	0x0800ccf3
 800cc34:	0800ccf3 	.word	0x0800ccf3
 800cc38:	0800ccf3 	.word	0x0800ccf3
 800cc3c:	0800ccd9 	.word	0x0800ccd9
 800cc40:	0800ccf3 	.word	0x0800ccf3
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800cc44:	2306      	movs	r3, #6
 800cc46:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800cc48:	f107 0308 	add.w	r3, r7, #8
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f004 faff 	bl	8011250 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800cc52:	4b2d      	ldr	r3, [pc, #180]	@ (800cd08 <MlmeConfirm+0x13c>)
 800cc54:	79db      	ldrb	r3, [r3, #7]
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	4611      	mov	r1, r2
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7ff fb00 	bl	800c260 <SecureElementSetDevAddr>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d102      	bne.n	800cc6c <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	4a28      	ldr	r2, [pc, #160]	@ (800cd0c <MlmeConfirm+0x140>)
 800cc6a:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800cc6c:	4828      	ldr	r0, [pc, #160]	@ (800cd10 <MlmeConfirm+0x144>)
 800cc6e:	f7ff fec3 	bl	800c9f8 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800cc72:	4828      	ldr	r0, [pc, #160]	@ (800cd14 <MlmeConfirm+0x148>)
 800cc74:	f000 fa2a 	bl	800d0cc <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800cc78:	4b21      	ldr	r3, [pc, #132]	@ (800cd00 <MlmeConfirm+0x134>)
 800cc7a:	785b      	ldrb	r3, [r3, #1]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d108      	bne.n	800cc92 <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cc80:	4b21      	ldr	r3, [pc, #132]	@ (800cd08 <MlmeConfirm+0x13c>)
 800cc82:	2200      	movs	r2, #0
 800cc84:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800cc86:	4b24      	ldr	r3, [pc, #144]	@ (800cd18 <MlmeConfirm+0x14c>)
 800cc88:	785b      	ldrb	r3, [r3, #1]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7ff fe0c 	bl	800c8a8 <LmHandlerRequestClass>
 800cc90:	e002      	b.n	800cc98 <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800cc92:	4b1d      	ldr	r3, [pc, #116]	@ (800cd08 <MlmeConfirm+0x13c>)
 800cc94:	22ff      	movs	r2, #255	@ 0xff
 800cc96:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800cc98:	4b1a      	ldr	r3, [pc, #104]	@ (800cd04 <MlmeConfirm+0x138>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d004      	beq.n	800ccac <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800cca2:	4b18      	ldr	r3, [pc, #96]	@ (800cd04 <MlmeConfirm+0x138>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cca8:	4817      	ldr	r0, [pc, #92]	@ (800cd08 <MlmeConfirm+0x13c>)
 800ccaa:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ccac:	4b14      	ldr	r3, [pc, #80]	@ (800cd00 <MlmeConfirm+0x134>)
 800ccae:	785b      	ldrb	r3, [r3, #1]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d120      	bne.n	800ccf6 <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800ccb4:	4b14      	ldr	r3, [pc, #80]	@ (800cd08 <MlmeConfirm+0x13c>)
 800ccb6:	79db      	ldrb	r3, [r3, #7]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7ff f863 	bl	800bd84 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800ccbe:	e01a      	b.n	800ccf6 <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800ccc0:	4b16      	ldr	r3, [pc, #88]	@ (800cd1c <MlmeConfirm+0x150>)
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	7a1a      	ldrb	r2, [r3, #8]
 800ccca:	4b14      	ldr	r3, [pc, #80]	@ (800cd1c <MlmeConfirm+0x150>)
 800cccc:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	7a5a      	ldrb	r2, [r3, #9]
 800ccd2:	4b12      	ldr	r3, [pc, #72]	@ (800cd1c <MlmeConfirm+0x150>)
 800ccd4:	74da      	strb	r2, [r3, #19]
            }
            break;
 800ccd6:	e00f      	b.n	800ccf8 <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	785b      	ldrb	r3, [r3, #1]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d105      	bne.n	800ccec <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800cce0:	4b0d      	ldr	r3, [pc, #52]	@ (800cd18 <MlmeConfirm+0x14c>)
 800cce2:	7c1b      	ldrb	r3, [r3, #16]
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7ff fdd3 	bl	800c890 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800ccea:	e005      	b.n	800ccf8 <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 800ccec:	f7ff fdb4 	bl	800c858 <LmHandlerDeviceTimeReq>
            break;
 800ccf0:	e002      	b.n	800ccf8 <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800ccf2:	bf00      	nop
 800ccf4:	e000      	b.n	800ccf8 <MlmeConfirm+0x12c>
            break;
 800ccf6:	bf00      	nop
    }
}
 800ccf8:	bf00      	nop
 800ccfa:	3730      	adds	r7, #48	@ 0x30
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	2000008c 	.word	0x2000008c
 800cd04:	200006a0 	.word	0x200006a0
 800cd08:	20000080 	.word	0x20000080
 800cd0c:	2000065c 	.word	0x2000065c
 800cd10:	20000084 	.word	0x20000084
 800cd14:	20000085 	.word	0x20000085
 800cd18:	20000688 	.word	0x20000688
 800cd1c:	200000a8 	.word	0x200000a8

0800cd20 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800cd2a:	4b20      	ldr	r3, [pc, #128]	@ (800cdac <MlmeIndication+0x8c>)
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	785a      	ldrb	r2, [r3, #1]
 800cd34:	4b1d      	ldr	r3, [pc, #116]	@ (800cdac <MlmeIndication+0x8c>)
 800cd36:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	789b      	ldrb	r3, [r3, #2]
 800cd3c:	b25a      	sxtb	r2, r3
 800cd3e:	4b1b      	ldr	r3, [pc, #108]	@ (800cdac <MlmeIndication+0x8c>)
 800cd40:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd48:	b25a      	sxtb	r2, r3
 800cd4a:	4b18      	ldr	r3, [pc, #96]	@ (800cdac <MlmeIndication+0x8c>)
 800cd4c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800cd54:	4b15      	ldr	r3, [pc, #84]	@ (800cdac <MlmeIndication+0x8c>)
 800cd56:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	78da      	ldrb	r2, [r3, #3]
 800cd5c:	4b13      	ldr	r3, [pc, #76]	@ (800cdac <MlmeIndication+0x8c>)
 800cd5e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	4a11      	ldr	r2, [pc, #68]	@ (800cdac <MlmeIndication+0x8c>)
 800cd66:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800cd68:	4b11      	ldr	r3, [pc, #68]	@ (800cdb0 <MlmeIndication+0x90>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d00d      	beq.n	800cd8e <MlmeIndication+0x6e>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	2b0b      	cmp	r3, #11
 800cd78:	d009      	beq.n	800cd8e <MlmeIndication+0x6e>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	2b0f      	cmp	r3, #15
 800cd80:	d005      	beq.n	800cd8e <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800cd82:	4b0b      	ldr	r3, [pc, #44]	@ (800cdb0 <MlmeIndication+0x90>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd88:	4908      	ldr	r1, [pc, #32]	@ (800cdac <MlmeIndication+0x8c>)
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800cd8e:	6879      	ldr	r1, [r7, #4]
 800cd90:	2003      	movs	r0, #3
 800cd92:	f000 f88d 	bl	800ceb0 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	2b0b      	cmp	r3, #11
 800cd9c:	d001      	beq.n	800cda2 <MlmeIndication+0x82>
 800cd9e:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800cda0:	e000      	b.n	800cda4 <MlmeIndication+0x84>
            break;
 800cda2:	bf00      	nop
    }
}
 800cda4:	bf00      	nop
 800cda6:	3708      	adds	r7, #8
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	200000a8 	.word	0x200000a8
 800cdb0:	200006a0 	.word	0x200006a0

0800cdb4 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	4603      	mov	r3, r0
 800cdbc:	6039      	str	r1, [r7, #0]
 800cdbe:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cdc4:	79fb      	ldrb	r3, [r7, #7]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d104      	bne.n	800cdd4 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800cdca:	f000 f9b9 	bl	800d140 <LmhpCompliancePackageFactory>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	60fb      	str	r3, [r7, #12]
                break;
 800cdd2:	e00d      	b.n	800cdf0 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800cdd4:	f107 020c 	add.w	r2, r7, #12
 800cdd8:	79fb      	ldrb	r3, [r7, #7]
 800cdda:	4611      	mov	r1, r2
 800cddc:	4618      	mov	r0, r3
 800cdde:	f000 fcc5 	bl	800d76c <LmhpPackagesRegister>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d002      	beq.n	800cdee <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800cde8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdec:	e031      	b.n	800ce52 <LmHandlerPackageRegister+0x9e>
                }
                break;
 800cdee:	bf00      	nop
            }
    }
    if( package != NULL )
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d02b      	beq.n	800ce4e <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 800cdf6:	79fb      	ldrb	r3, [r7, #7]
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	4918      	ldr	r1, [pc, #96]	@ (800ce5c <LmHandlerPackageRegister+0xa8>)
 800cdfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800ce00:	79fb      	ldrb	r3, [r7, #7]
 800ce02:	4a16      	ldr	r2, [pc, #88]	@ (800ce5c <LmHandlerPackageRegister+0xa8>)
 800ce04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce08:	4a15      	ldr	r2, [pc, #84]	@ (800ce60 <LmHandlerPackageRegister+0xac>)
 800ce0a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800ce0c:	79fb      	ldrb	r3, [r7, #7]
 800ce0e:	4a13      	ldr	r2, [pc, #76]	@ (800ce5c <LmHandlerPackageRegister+0xa8>)
 800ce10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce14:	4a13      	ldr	r2, [pc, #76]	@ (800ce64 <LmHandlerPackageRegister+0xb0>)
 800ce16:	631a      	str	r2, [r3, #48]	@ 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800ce18:	79fb      	ldrb	r3, [r7, #7]
 800ce1a:	4a10      	ldr	r2, [pc, #64]	@ (800ce5c <LmHandlerPackageRegister+0xa8>)
 800ce1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce20:	4a11      	ldr	r2, [pc, #68]	@ (800ce68 <LmHandlerPackageRegister+0xb4>)
 800ce22:	635a      	str	r2, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800ce24:	4b11      	ldr	r3, [pc, #68]	@ (800ce6c <LmHandlerPackageRegister+0xb8>)
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	79fb      	ldrb	r3, [r7, #7]
 800ce2a:	490c      	ldr	r1, [pc, #48]	@ (800ce5c <LmHandlerPackageRegister+0xa8>)
 800ce2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ce30:	6992      	ldr	r2, [r2, #24]
 800ce32:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800ce34:	79fb      	ldrb	r3, [r7, #7]
 800ce36:	4a09      	ldr	r2, [pc, #36]	@ (800ce5c <LmHandlerPackageRegister+0xa8>)
 800ce38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	4a0c      	ldr	r2, [pc, #48]	@ (800ce70 <LmHandlerPackageRegister+0xbc>)
 800ce40:	6851      	ldr	r1, [r2, #4]
 800ce42:	4a0b      	ldr	r2, [pc, #44]	@ (800ce70 <LmHandlerPackageRegister+0xbc>)
 800ce44:	7852      	ldrb	r2, [r2, #1]
 800ce46:	6838      	ldr	r0, [r7, #0]
 800ce48:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	e001      	b.n	800ce52 <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ce4e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	20000674 	.word	0x20000674
 800ce60:	0800c51d 	.word	0x0800c51d
 800ce64:	0800c69d 	.word	0x0800c69d
 800ce68:	0800c859 	.word	0x0800c859
 800ce6c:	200006a0 	.word	0x200006a0
 800ce70:	200000bc 	.word	0x200000bc

0800ce74 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800ce7e:	79fb      	ldrb	r3, [r7, #7]
 800ce80:	2b04      	cmp	r3, #4
 800ce82:	d80e      	bhi.n	800cea2 <LmHandlerPackageIsInitialized+0x2e>
 800ce84:	79fb      	ldrb	r3, [r7, #7]
 800ce86:	4a09      	ldr	r2, [pc, #36]	@ (800ceac <LmHandlerPackageIsInitialized+0x38>)
 800ce88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d007      	beq.n	800cea2 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800ce92:	79fb      	ldrb	r3, [r7, #7]
 800ce94:	4a05      	ldr	r2, [pc, #20]	@ (800ceac <LmHandlerPackageIsInitialized+0x38>)
 800ce96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce9a:	689b      	ldr	r3, [r3, #8]
 800ce9c:	4798      	blx	r3
 800ce9e:	4603      	mov	r3, r0
 800cea0:	e000      	b.n	800cea4 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cea2:	2300      	movs	r3, #0
    }
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	20000674 	.word	0x20000674

0800ceb0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	6039      	str	r1, [r7, #0]
 800ceba:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cebc:	2300      	movs	r3, #0
 800cebe:	73fb      	strb	r3, [r7, #15]
 800cec0:	e07c      	b.n	800cfbc <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 800cec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cec6:	4a42      	ldr	r2, [pc, #264]	@ (800cfd0 <LmHandlerPackagesNotify+0x120>)
 800cec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d06f      	beq.n	800cfb0 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 800ced0:	79fb      	ldrb	r3, [r7, #7]
 800ced2:	2b03      	cmp	r3, #3
 800ced4:	d863      	bhi.n	800cf9e <LmHandlerPackagesNotify+0xee>
 800ced6:	a201      	add	r2, pc, #4	@ (adr r2, 800cedc <LmHandlerPackagesNotify+0x2c>)
 800ced8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cedc:	0800ceed 	.word	0x0800ceed
 800cee0:	0800cf0f 	.word	0x0800cf0f
 800cee4:	0800cf5b 	.word	0x0800cf5b
 800cee8:	0800cf7d 	.word	0x0800cf7d
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800ceec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cef0:	4a37      	ldr	r2, [pc, #220]	@ (800cfd0 <LmHandlerPackagesNotify+0x120>)
 800cef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cef6:	69db      	ldr	r3, [r3, #28]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d052      	beq.n	800cfa2 <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800cefc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf00:	4a33      	ldr	r2, [pc, #204]	@ (800cfd0 <LmHandlerPackagesNotify+0x120>)
 800cf02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf06:	69db      	ldr	r3, [r3, #28]
 800cf08:	6838      	ldr	r0, [r7, #0]
 800cf0a:	4798      	blx	r3
                        }
                        break;
 800cf0c:	e049      	b.n	800cfa2 <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cf0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf12:	4a2f      	ldr	r2, [pc, #188]	@ (800cfd0 <LmHandlerPackagesNotify+0x120>)
 800cf14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf18:	6a1b      	ldr	r3, [r3, #32]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d043      	beq.n	800cfa6 <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800cf1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf22:	4a2b      	ldr	r2, [pc, #172]	@ (800cfd0 <LmHandlerPackagesNotify+0x120>)
 800cf24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf28:	781a      	ldrb	r2, [r3, #0]
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d00a      	beq.n	800cf48 <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800cf32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d135      	bne.n	800cfa6 <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800cf3a:	4b25      	ldr	r3, [pc, #148]	@ (800cfd0 <LmHandlerPackagesNotify+0x120>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	68db      	ldr	r3, [r3, #12]
 800cf40:	4798      	blx	r3
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d02e      	beq.n	800cfa6 <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800cf48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf4c:	4a20      	ldr	r2, [pc, #128]	@ (800cfd0 <LmHandlerPackagesNotify+0x120>)
 800cf4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf52:	6a1b      	ldr	r3, [r3, #32]
 800cf54:	6838      	ldr	r0, [r7, #0]
 800cf56:	4798      	blx	r3
                        }
                        break;
 800cf58:	e025      	b.n	800cfa6 <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800cf5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf5e:	4a1c      	ldr	r2, [pc, #112]	@ (800cfd0 <LmHandlerPackagesNotify+0x120>)
 800cf60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d01f      	beq.n	800cfaa <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800cf6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf6e:	4a18      	ldr	r2, [pc, #96]	@ (800cfd0 <LmHandlerPackagesNotify+0x120>)
 800cf70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf76:	6838      	ldr	r0, [r7, #0]
 800cf78:	4798      	blx	r3
                        }
                        break;
 800cf7a:	e016      	b.n	800cfaa <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800cf7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf80:	4a13      	ldr	r2, [pc, #76]	@ (800cfd0 <LmHandlerPackagesNotify+0x120>)
 800cf82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d010      	beq.n	800cfae <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800cf8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf90:	4a0f      	ldr	r2, [pc, #60]	@ (800cfd0 <LmHandlerPackagesNotify+0x120>)
 800cf92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf98:	6838      	ldr	r0, [r7, #0]
 800cf9a:	4798      	blx	r3
                        }
                        break;
 800cf9c:	e007      	b.n	800cfae <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 800cf9e:	bf00      	nop
 800cfa0:	e006      	b.n	800cfb0 <LmHandlerPackagesNotify+0x100>
                        break;
 800cfa2:	bf00      	nop
 800cfa4:	e004      	b.n	800cfb0 <LmHandlerPackagesNotify+0x100>
                        break;
 800cfa6:	bf00      	nop
 800cfa8:	e002      	b.n	800cfb0 <LmHandlerPackagesNotify+0x100>
                        break;
 800cfaa:	bf00      	nop
 800cfac:	e000      	b.n	800cfb0 <LmHandlerPackagesNotify+0x100>
                        break;
 800cfae:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cfb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	73fb      	strb	r3, [r7, #15]
 800cfbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfc0:	2b04      	cmp	r3, #4
 800cfc2:	f77f af7e 	ble.w	800cec2 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800cfc6:	bf00      	nop
 800cfc8:	bf00      	nop
 800cfca:	3710      	adds	r7, #16
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	20000674 	.word	0x20000674

0800cfd4 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cfda:	2300      	movs	r3, #0
 800cfdc:	71fb      	strb	r3, [r7, #7]
 800cfde:	e01c      	b.n	800d01a <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 800cfe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfe4:	4a11      	ldr	r2, [pc, #68]	@ (800d02c <LmHandlerPackageIsTxPending+0x58>)
 800cfe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d00f      	beq.n	800d00e <LmHandlerPackageIsTxPending+0x3a>
 800cfee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d00b      	beq.n	800d00e <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800cff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cffa:	4a0c      	ldr	r2, [pc, #48]	@ (800d02c <LmHandlerPackageIsTxPending+0x58>)
 800cffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d000:	691b      	ldr	r3, [r3, #16]
 800d002:	4798      	blx	r3
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d001      	beq.n	800d00e <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 800d00a:	2301      	movs	r3, #1
 800d00c:	e00a      	b.n	800d024 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d00e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d012:	b2db      	uxtb	r3, r3
 800d014:	3301      	adds	r3, #1
 800d016:	b2db      	uxtb	r3, r3
 800d018:	71fb      	strb	r3, [r7, #7]
 800d01a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d01e:	2b04      	cmp	r3, #4
 800d020:	ddde      	ble.n	800cfe0 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800d022:	2300      	movs	r3, #0
}
 800d024:	4618      	mov	r0, r3
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	20000674 	.word	0x20000674

0800d030 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d036:	2300      	movs	r3, #0
 800d038:	71fb      	strb	r3, [r7, #7]
 800d03a:	e022      	b.n	800d082 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d03c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d040:	4a14      	ldr	r2, [pc, #80]	@ (800d094 <LmHandlerPackagesProcess+0x64>)
 800d042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d015      	beq.n	800d076 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d04a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d04e:	4a11      	ldr	r2, [pc, #68]	@ (800d094 <LmHandlerPackagesProcess+0x64>)
 800d050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d054:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00d      	beq.n	800d076 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d05a:	79fb      	ldrb	r3, [r7, #7]
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7ff ff09 	bl	800ce74 <LmHandlerPackageIsInitialized>
 800d062:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d064:	2b00      	cmp	r3, #0
 800d066:	d006      	beq.n	800d076 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d06c:	4a09      	ldr	r2, [pc, #36]	@ (800d094 <LmHandlerPackagesProcess+0x64>)
 800d06e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d072:	695b      	ldr	r3, [r3, #20]
 800d074:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	3301      	adds	r3, #1
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	71fb      	strb	r3, [r7, #7]
 800d082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d086:	2b04      	cmp	r3, #4
 800d088:	ddd8      	ble.n	800d03c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d08a:	bf00      	nop
 800d08c:	bf00      	nop
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	20000674 	.word	0x20000674

0800d098 <LmHandlerStop>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800d09c:	f005 f8d2 	bl	8012244 <LoRaMacDeInitialization>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d101      	bne.n	800d0aa <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	e001      	b.n	800d0ae <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d0aa:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800d0b2:	b580      	push	{r7, lr}
 800d0b4:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800d0b6:	f004 f81b 	bl	80110f0 <LoRaMacHalt>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d101      	bne.n	800d0c4 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	e001      	b.n	800d0c8 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d0c4:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b08c      	sub	sp, #48	@ 0x30
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d102      	bne.n	800d0e0 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d0da:	f04f 33ff 	mov.w	r3, #4294967295
 800d0de:	e016      	b.n	800d10e <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800d0e0:	2320      	movs	r3, #32
 800d0e2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d0e4:	f107 0308 	add.w	r3, r7, #8
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f004 f8b1 	bl	8011250 <LoRaMacMibGetRequestConfirm>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d002      	beq.n	800d0fa <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0f8:	e009      	b.n	800d10e <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800d0fa:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f993 2000 	ldrsb.w	r2, [r3]
 800d108:	4b03      	ldr	r3, [pc, #12]	@ (800d118 <LmHandlerGetTxPower+0x4c>)
 800d10a:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800d10c:	2300      	movs	r3, #0
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3730      	adds	r7, #48	@ 0x30
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	20000688 	.word	0x20000688

0800d11c <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d11c:	b480      	push	{r7}
 800d11e:	af00      	add	r7, sp, #0
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
 800d120:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d124:	4618      	mov	r0, r3
 800d126:	46bd      	mov	sp, r7
 800d128:	bc80      	pop	{r7}
 800d12a:	4770      	bx	lr

0800d12c <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d12c:	b480      	push	{r7}
 800d12e:	b083      	sub	sp, #12
 800d130:	af00      	add	r7, sp, #0
 800d132:	4603      	mov	r3, r0
 800d134:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d136:	bf00      	nop
 800d138:	370c      	adds	r7, #12
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bc80      	pop	{r7}
 800d13e:	4770      	bx	lr

0800d140 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d140:	b480      	push	{r7}
 800d142:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800d144:	4b02      	ldr	r3, [pc, #8]	@ (800d150 <LmhpCompliancePackageFactory+0x10>)
}
 800d146:	4618      	mov	r0, r3
 800d148:	46bd      	mov	sp, r7
 800d14a:	bc80      	pop	{r7}
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop
 800d150:	200000c4 	.word	0x200000c4

0800d154 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	4613      	mov	r3, r2
 800d160:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00f      	beq.n	800d188 <LmhpComplianceInit+0x34>
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00c      	beq.n	800d188 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 800d16e:	4a0c      	ldr	r2, [pc, #48]	@ (800d1a0 <LmhpComplianceInit+0x4c>)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800d174:	4a0b      	ldr	r2, [pc, #44]	@ (800d1a4 <LmhpComplianceInit+0x50>)
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d17a:	4a0a      	ldr	r2, [pc, #40]	@ (800d1a4 <LmhpComplianceInit+0x50>)
 800d17c:	79fb      	ldrb	r3, [r7, #7]
 800d17e:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800d180:	4b08      	ldr	r3, [pc, #32]	@ (800d1a4 <LmhpComplianceInit+0x50>)
 800d182:	2201      	movs	r2, #1
 800d184:	701a      	strb	r2, [r3, #0]
 800d186:	e006      	b.n	800d196 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800d188:	4b05      	ldr	r3, [pc, #20]	@ (800d1a0 <LmhpComplianceInit+0x4c>)
 800d18a:	2200      	movs	r2, #0
 800d18c:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d18e:	4b05      	ldr	r3, [pc, #20]	@ (800d1a4 <LmhpComplianceInit+0x50>)
 800d190:	2200      	movs	r2, #0
 800d192:	701a      	strb	r2, [r3, #0]
    }
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop
 800d198:	3714      	adds	r7, #20
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bc80      	pop	{r7}
 800d19e:	4770      	bx	lr
 800d1a0:	200007f0 	.word	0x200007f0
 800d1a4:	200007dc 	.word	0x200007dc

0800d1a8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d1ac:	4b02      	ldr	r3, [pc, #8]	@ (800d1b8 <LmhpComplianceIsInitialized+0x10>)
 800d1ae:	781b      	ldrb	r3, [r3, #0]
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bc80      	pop	{r7}
 800d1b6:	4770      	bx	lr
 800d1b8:	200007dc 	.word	0x200007dc

0800d1bc <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800d1bc:	b480      	push	{r7}
 800d1be:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d1c0:	4b07      	ldr	r3, [pc, #28]	@ (800d1e0 <LmhpComplianceIsRunning+0x24>)
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	f083 0301 	eor.w	r3, r3, #1
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d001      	beq.n	800d1d2 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	e001      	b.n	800d1d6 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800d1d2:	4b03      	ldr	r3, [pc, #12]	@ (800d1e0 <LmhpComplianceIsRunning+0x24>)
 800d1d4:	785b      	ldrb	r3, [r3, #1]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bc80      	pop	{r7}
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	200007dc 	.word	0x200007dc

0800d1e4 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d1ec:	4b0f      	ldr	r3, [pc, #60]	@ (800d22c <LmhpComplianceOnMcpsConfirm+0x48>)
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	f083 0301 	eor.w	r3, r3, #1
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d112      	bne.n	800d220 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800d1fa:	4b0c      	ldr	r3, [pc, #48]	@ (800d22c <LmhpComplianceOnMcpsConfirm+0x48>)
 800d1fc:	785b      	ldrb	r3, [r3, #1]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00f      	beq.n	800d222 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 800d206:	2b01      	cmp	r3, #1
 800d208:	d10b      	bne.n	800d222 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d007      	beq.n	800d222 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d212:	4b06      	ldr	r3, [pc, #24]	@ (800d22c <LmhpComplianceOnMcpsConfirm+0x48>)
 800d214:	899b      	ldrh	r3, [r3, #12]
 800d216:	3301      	adds	r3, #1
 800d218:	b29a      	uxth	r2, r3
 800d21a:	4b04      	ldr	r3, [pc, #16]	@ (800d22c <LmhpComplianceOnMcpsConfirm+0x48>)
 800d21c:	819a      	strh	r2, [r3, #12]
 800d21e:	e000      	b.n	800d222 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800d220:	bf00      	nop
    }
}
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	bc80      	pop	{r7}
 800d228:	4770      	bx	lr
 800d22a:	bf00      	nop
 800d22c:	200007dc 	.word	0x200007dc

0800d230 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d238:	4b12      	ldr	r3, [pc, #72]	@ (800d284 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	f083 0301 	eor.w	r3, r3, #1
 800d240:	b2db      	uxtb	r3, r3
 800d242:	2b00      	cmp	r3, #0
 800d244:	d116      	bne.n	800d274 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d246:	4b0f      	ldr	r3, [pc, #60]	@ (800d284 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d248:	785b      	ldrb	r3, [r3, #1]
 800d24a:	f083 0301 	eor.w	r3, r3, #1
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	2b00      	cmp	r3, #0
 800d252:	d111      	bne.n	800d278 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	2b05      	cmp	r3, #5
 800d25a:	d10e      	bne.n	800d27a <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800d25c:	4b09      	ldr	r3, [pc, #36]	@ (800d284 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d25e:	2201      	movs	r2, #1
 800d260:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	7a1a      	ldrb	r2, [r3, #8]
 800d266:	4b07      	ldr	r3, [pc, #28]	@ (800d284 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d268:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	7a5a      	ldrb	r2, [r3, #9]
 800d26e:	4b05      	ldr	r3, [pc, #20]	@ (800d284 <LmhpComplianceOnMlmeConfirm+0x54>)
 800d270:	741a      	strb	r2, [r3, #16]
 800d272:	e002      	b.n	800d27a <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d274:	bf00      	nop
 800d276:	e000      	b.n	800d27a <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800d278:	bf00      	nop
    }
}
 800d27a:	370c      	adds	r7, #12
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bc80      	pop	{r7}
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	200007dc 	.word	0x200007dc

0800d288 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800d28e:	4b36      	ldr	r3, [pc, #216]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	f083 0301 	eor.w	r3, r3, #1
 800d296:	b2db      	uxtb	r3, r3
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d29c:	f04f 33ff 	mov.w	r3, #4294967295
 800d2a0:	e05e      	b.n	800d360 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 800d2a2:	4b31      	ldr	r3, [pc, #196]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d2a4:	785b      	ldrb	r3, [r3, #1]
 800d2a6:	f083 0301 	eor.w	r3, r3, #1
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d001      	beq.n	800d2b4 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	e055      	b.n	800d360 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 800d2b4:	4b2c      	ldr	r3, [pc, #176]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d2b6:	7b9b      	ldrb	r3, [r3, #14]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d019      	beq.n	800d2f0 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800d2bc:	4b2a      	ldr	r3, [pc, #168]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800d2c2:	4b29      	ldr	r3, [pc, #164]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d2c4:	2203      	movs	r2, #3
 800d2c6:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800d2c8:	4b27      	ldr	r3, [pc, #156]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	2205      	movs	r2, #5
 800d2ce:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800d2d0:	4b25      	ldr	r3, [pc, #148]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	4a24      	ldr	r2, [pc, #144]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d2d8:	7bd2      	ldrb	r2, [r2, #15]
 800d2da:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800d2dc:	4b22      	ldr	r3, [pc, #136]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	3302      	adds	r3, #2
 800d2e2:	4a21      	ldr	r2, [pc, #132]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d2e4:	7c12      	ldrb	r2, [r2, #16]
 800d2e6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800d2e8:	4b1f      	ldr	r3, [pc, #124]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	709a      	strb	r2, [r3, #2]
 800d2ee:	e01c      	b.n	800d32a <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800d2f0:	4b1d      	ldr	r3, [pc, #116]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d2f2:	789b      	ldrb	r3, [r3, #2]
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d005      	beq.n	800d304 <LmhpComplianceTxProcess+0x7c>
 800d2f8:	2b04      	cmp	r3, #4
 800d2fa:	d116      	bne.n	800d32a <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 800d2fc:	4b1a      	ldr	r3, [pc, #104]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d2fe:	2201      	movs	r2, #1
 800d300:	709a      	strb	r2, [r3, #2]
                break;
 800d302:	e012      	b.n	800d32a <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 800d304:	4b18      	ldr	r3, [pc, #96]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d306:	2202      	movs	r2, #2
 800d308:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800d30a:	4b17      	ldr	r3, [pc, #92]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d30c:	899b      	ldrh	r3, [r3, #12]
 800d30e:	0a1b      	lsrs	r3, r3, #8
 800d310:	b29a      	uxth	r2, r3
 800d312:	4b15      	ldr	r3, [pc, #84]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d314:	689b      	ldr	r3, [r3, #8]
 800d316:	b2d2      	uxtb	r2, r2
 800d318:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800d31a:	4b13      	ldr	r3, [pc, #76]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d31c:	899a      	ldrh	r2, [r3, #12]
 800d31e:	4b12      	ldr	r3, [pc, #72]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	3301      	adds	r3, #1
 800d324:	b2d2      	uxtb	r2, r2
 800d326:	701a      	strb	r2, [r3, #0]
                break;
 800d328:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800d32a:	23e0      	movs	r3, #224	@ 0xe0
 800d32c:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800d32e:	4b0e      	ldr	r3, [pc, #56]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d330:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800d332:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800d334:	4b0c      	ldr	r3, [pc, #48]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d336:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800d338:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 800d33a:	480c      	ldr	r0, [pc, #48]	@ (800d36c <LmhpComplianceTxProcess+0xe4>)
 800d33c:	f00d fcae 	bl	801ac9c <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 800d340:	4b0b      	ldr	r3, [pc, #44]	@ (800d370 <LmhpComplianceTxProcess+0xe8>)
 800d342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d344:	2b00      	cmp	r3, #0
 800d346:	d102      	bne.n	800d34e <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 800d348:	f04f 33ff 	mov.w	r3, #4294967295
 800d34c:	e008      	b.n	800d360 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800d34e:	4b08      	ldr	r3, [pc, #32]	@ (800d370 <LmhpComplianceTxProcess+0xe8>)
 800d350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d352:	4a05      	ldr	r2, [pc, #20]	@ (800d368 <LmhpComplianceTxProcess+0xe0>)
 800d354:	78d2      	ldrb	r2, [r2, #3]
 800d356:	4611      	mov	r1, r2
 800d358:	4638      	mov	r0, r7
 800d35a:	2201      	movs	r2, #1
 800d35c:	4798      	blx	r3
 800d35e:	4603      	mov	r3, r0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3708      	adds	r7, #8
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	200007dc 	.word	0x200007dc
 800d36c:	200007c4 	.word	0x200007c4
 800d370:	200000c4 	.word	0x200000c4

0800d374 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b0a4      	sub	sp, #144	@ 0x90
 800d378:	af02      	add	r7, sp, #8
 800d37a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d37c:	4ba5      	ldr	r3, [pc, #660]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	f083 0301 	eor.w	r3, r3, #1
 800d384:	b2db      	uxtb	r3, r3
 800d386:	2b00      	cmp	r3, #0
 800d388:	f040 81c6 	bne.w	800d718 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	7b5b      	ldrb	r3, [r3, #13]
 800d390:	f083 0301 	eor.w	r3, r3, #1
 800d394:	b2db      	uxtb	r3, r3
 800d396:	2b00      	cmp	r3, #0
 800d398:	f040 81c0 	bne.w	800d71c <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800d39c:	4b9d      	ldr	r3, [pc, #628]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d39e:	785b      	ldrb	r3, [r3, #1]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d00c      	beq.n	800d3be <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	7b9b      	ldrb	r3, [r3, #14]
 800d3a8:	f083 0301 	eor.w	r3, r3, #1
 800d3ac:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d005      	beq.n	800d3be <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800d3b2:	4b98      	ldr	r3, [pc, #608]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d3b4:	899b      	ldrh	r3, [r3, #12]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	4b96      	ldr	r3, [pc, #600]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d3bc:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	78db      	ldrb	r3, [r3, #3]
 800d3c2:	2be0      	cmp	r3, #224	@ 0xe0
 800d3c4:	f040 81ac 	bne.w	800d720 <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800d3c8:	4b92      	ldr	r3, [pc, #584]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d3ca:	785b      	ldrb	r3, [r3, #1]
 800d3cc:	f083 0301 	eor.w	r3, r3, #1
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d060      	beq.n	800d498 <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	7b1b      	ldrb	r3, [r3, #12]
 800d3da:	2b04      	cmp	r3, #4
 800d3dc:	f040 81a7 	bne.w	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	689b      	ldr	r3, [r3, #8]
 800d3e4:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	f040 81a1 	bne.w	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	689b      	ldr	r3, [r3, #8]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	f040 819a 	bne.w	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	689b      	ldr	r3, [r3, #8]
 800d3fe:	3302      	adds	r3, #2
 800d400:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d402:	2b01      	cmp	r3, #1
 800d404:	f040 8193 	bne.w	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	3303      	adds	r3, #3
 800d40e:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d410:	2b01      	cmp	r3, #1
 800d412:	f040 818c 	bne.w	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 800d416:	4b7f      	ldr	r3, [pc, #508]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d418:	2200      	movs	r2, #0
 800d41a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800d41c:	4b7d      	ldr	r3, [pc, #500]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d41e:	22e0      	movs	r2, #224	@ 0xe0
 800d420:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800d422:	4b7c      	ldr	r3, [pc, #496]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d424:	2202      	movs	r2, #2
 800d426:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800d428:	4b7a      	ldr	r3, [pc, #488]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d42a:	2200      	movs	r2, #0
 800d42c:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800d42e:	4b79      	ldr	r3, [pc, #484]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d430:	2200      	movs	r2, #0
 800d432:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800d434:	4b77      	ldr	r3, [pc, #476]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d436:	2200      	movs	r2, #0
 800d438:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800d43a:	4b76      	ldr	r3, [pc, #472]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d43c:	2200      	movs	r2, #0
 800d43e:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800d440:	4b74      	ldr	r3, [pc, #464]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d442:	2201      	movs	r2, #1
 800d444:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800d446:	4b73      	ldr	r3, [pc, #460]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d448:	2201      	movs	r2, #1
 800d44a:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 800d44c:	2304      	movs	r3, #4
 800d44e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 800d450:	2301      	movs	r3, #1
 800d452:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d454:	f107 030c 	add.w	r3, r7, #12
 800d458:	4618      	mov	r0, r3
 800d45a:	f004 f8cf 	bl	80115fc <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 800d45e:	2000      	movs	r0, #0
 800d460:	f004 feca 	bl	80121f8 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d464:	4b6c      	ldr	r3, [pc, #432]	@ (800d618 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d003      	beq.n	800d476 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d46e:	4b6a      	ldr	r3, [pc, #424]	@ (800d618 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d476:	2300      	movs	r3, #0
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	4b68      	ldr	r3, [pc, #416]	@ (800d61c <LmhpComplianceOnMcpsIndication+0x2a8>)
 800d47c:	2200      	movs	r2, #0
 800d47e:	f04f 31ff 	mov.w	r1, #4294967295
 800d482:	4867      	ldr	r0, [pc, #412]	@ (800d620 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800d484:	f00d fbd4 	bl	801ac30 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d488:	f241 3188 	movw	r1, #5000	@ 0x1388
 800d48c:	4864      	ldr	r0, [pc, #400]	@ (800d620 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800d48e:	f00d fce3 	bl	801ae58 <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 800d492:	f7ff fef9 	bl	800d288 <LmhpComplianceTxProcess>
 800d496:	e14a      	b.n	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	689b      	ldr	r3, [r3, #8]
 800d49c:	781a      	ldrb	r2, [r3, #0]
 800d49e:	4b5d      	ldr	r3, [pc, #372]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d4a0:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d4a2:	4b5c      	ldr	r3, [pc, #368]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d4a4:	789b      	ldrb	r3, [r3, #2]
 800d4a6:	2b0a      	cmp	r3, #10
 800d4a8:	f200 813c 	bhi.w	800d724 <LmhpComplianceOnMcpsIndication+0x3b0>
 800d4ac:	a201      	add	r2, pc, #4	@ (adr r2, 800d4b4 <LmhpComplianceOnMcpsIndication+0x140>)
 800d4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b2:	bf00      	nop
 800d4b4:	0800d4e1 	.word	0x0800d4e1
 800d4b8:	0800d52b 	.word	0x0800d52b
 800d4bc:	0800d533 	.word	0x0800d533
 800d4c0:	0800d541 	.word	0x0800d541
 800d4c4:	0800d54f 	.word	0x0800d54f
 800d4c8:	0800d5a7 	.word	0x0800d5a7
 800d4cc:	0800d5b9 	.word	0x0800d5b9
 800d4d0:	0800d629 	.word	0x0800d629
 800d4d4:	0800d6d1 	.word	0x0800d6d1
 800d4d8:	0800d6e3 	.word	0x0800d6e3
 800d4dc:	0800d6fd 	.word	0x0800d6fd
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800d4e0:	484f      	ldr	r0, [pc, #316]	@ (800d620 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800d4e2:	f00d fc49 	bl	801ad78 <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800d4e6:	4b4b      	ldr	r3, [pc, #300]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800d4ec:	4b49      	ldr	r3, [pc, #292]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800d4f2:	2304      	movs	r3, #4
 800d4f4:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d4f6:	4b48      	ldr	r3, [pc, #288]	@ (800d618 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800d4fe:	f107 030c 	add.w	r3, r7, #12
 800d502:	4618      	mov	r0, r3
 800d504:	f004 f87a 	bl	80115fc <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d508:	4b43      	ldr	r3, [pc, #268]	@ (800d618 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	785b      	ldrb	r3, [r3, #1]
 800d50e:	4618      	mov	r0, r3
 800d510:	f004 fe72 	bl	80121f8 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800d514:	4b40      	ldr	r3, [pc, #256]	@ (800d618 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	689b      	ldr	r3, [r3, #8]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f000 8104 	beq.w	800d728 <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800d520:	4b3d      	ldr	r3, [pc, #244]	@ (800d618 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	4798      	blx	r3
                    }
                }
                break;
 800d528:	e0fe      	b.n	800d728 <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 800d52a:	4b3a      	ldr	r3, [pc, #232]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d52c:	2202      	movs	r2, #2
 800d52e:	719a      	strb	r2, [r3, #6]
                break;
 800d530:	e0fd      	b.n	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 800d532:	4b38      	ldr	r3, [pc, #224]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d534:	2201      	movs	r2, #1
 800d536:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800d538:	4b36      	ldr	r3, [pc, #216]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d53a:	2201      	movs	r2, #1
 800d53c:	709a      	strb	r2, [r3, #2]
                break;
 800d53e:	e0f6      	b.n	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 800d540:	4b34      	ldr	r3, [pc, #208]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d542:	2200      	movs	r2, #0
 800d544:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800d546:	4b33      	ldr	r3, [pc, #204]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d548:	2201      	movs	r2, #1
 800d54a:	709a      	strb	r2, [r3, #2]
                break;
 800d54c:	e0ef      	b.n	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	7b1a      	ldrb	r2, [r3, #12]
 800d552:	4b30      	ldr	r3, [pc, #192]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d554:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 800d556:	4b2f      	ldr	r3, [pc, #188]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	2204      	movs	r2, #4
 800d55c:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d55e:	2301      	movs	r3, #1
 800d560:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800d564:	e012      	b.n	800d58c <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	689a      	ldr	r2, [r3, #8]
 800d56a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d56e:	4413      	add	r3, r2
 800d570:	781a      	ldrb	r2, [r3, #0]
 800d572:	4b28      	ldr	r3, [pc, #160]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d574:	6899      	ldr	r1, [r3, #8]
 800d576:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d57a:	440b      	add	r3, r1
 800d57c:	3201      	adds	r2, #1
 800d57e:	b2d2      	uxtb	r2, r2
 800d580:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d582:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d586:	3301      	adds	r3, #1
 800d588:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800d58c:	4b21      	ldr	r3, [pc, #132]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d58e:	795a      	ldrb	r2, [r3, #5]
 800d590:	4b20      	ldr	r3, [pc, #128]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d592:	799b      	ldrb	r3, [r3, #6]
 800d594:	4293      	cmp	r3, r2
 800d596:	bf28      	it	cs
 800d598:	4613      	movcs	r3, r2
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d3e0      	bcc.n	800d566 <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 800d5a4:	e0c3      	b.n	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 800d5a6:	2305      	movs	r3, #5
 800d5a8:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 800d5ac:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f004 fbd9 	bl	8011d68 <LoRaMacMlmeRequest>
                }
                break;
 800d5b6:	e0ba      	b.n	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800d5b8:	4819      	ldr	r0, [pc, #100]	@ (800d620 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800d5ba:	f00d fbdd 	bl	801ad78 <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800d5be:	4b15      	ldr	r3, [pc, #84]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800d5c4:	4b13      	ldr	r3, [pc, #76]	@ (800d614 <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800d5ca:	2304      	movs	r3, #4
 800d5cc:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d5ce:	4b12      	ldr	r3, [pc, #72]	@ (800d618 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800d5d6:	f107 030c 	add.w	r3, r7, #12
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f004 f80e 	bl	80115fc <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d5e0:	4b0d      	ldr	r3, [pc, #52]	@ (800d618 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	785b      	ldrb	r3, [r3, #1]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f004 fe06 	bl	80121f8 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800d5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d618 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d003      	beq.n	800d5fe <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800d5f6:	4b08      	ldr	r3, [pc, #32]	@ (800d618 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 800d5fe:	4b09      	ldr	r3, [pc, #36]	@ (800d624 <LmhpComplianceOnMcpsIndication+0x2b0>)
 800d600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d602:	2b00      	cmp	r3, #0
 800d604:	f000 8092 	beq.w	800d72c <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d608:	4b06      	ldr	r3, [pc, #24]	@ (800d624 <LmhpComplianceOnMcpsIndication+0x2b0>)
 800d60a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d60c:	2101      	movs	r1, #1
 800d60e:	2002      	movs	r0, #2
 800d610:	4798      	blx	r3
                    }
                }
                break;
 800d612:	e08b      	b.n	800d72c <LmhpComplianceOnMcpsIndication+0x3b8>
 800d614:	200007dc 	.word	0x200007dc
 800d618:	200007f0 	.word	0x200007f0
 800d61c:	0800d745 	.word	0x0800d745
 800d620:	200007c4 	.word	0x200007c4
 800d624:	200000c4 	.word	0x200000c4
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	7b1b      	ldrb	r3, [r3, #12]
 800d62c:	2b03      	cmp	r3, #3
 800d62e:	d113      	bne.n	800d658 <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 800d630:	2306      	movs	r3, #6
 800d632:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	3301      	adds	r3, #1
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	021b      	lsls	r3, r3, #8
 800d640:	b21a      	sxth	r2, r3
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	3302      	adds	r3, #2
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	b21b      	sxth	r3, r3
 800d64c:	4313      	orrs	r3, r2
 800d64e:	b21b      	sxth	r3, r3
 800d650:	b29b      	uxth	r3, r3
 800d652:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800d656:	e032      	b.n	800d6be <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	7b1b      	ldrb	r3, [r3, #12]
 800d65c:	2b07      	cmp	r3, #7
 800d65e:	d12e      	bne.n	800d6be <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 800d660:	2307      	movs	r3, #7
 800d662:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	3301      	adds	r3, #1
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	021b      	lsls	r3, r3, #8
 800d670:	b21a      	sxth	r2, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	689b      	ldr	r3, [r3, #8]
 800d676:	3302      	adds	r3, #2
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	b21b      	sxth	r3, r3
 800d67c:	4313      	orrs	r3, r2
 800d67e:	b21b      	sxth	r3, r3
 800d680:	b29b      	uxth	r3, r3
 800d682:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	689b      	ldr	r3, [r3, #8]
 800d68a:	3303      	adds	r3, #3
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	041a      	lsls	r2, r3, #16
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	3304      	adds	r3, #4
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	021b      	lsls	r3, r3, #8
 800d69a:	4313      	orrs	r3, r2
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	6892      	ldr	r2, [r2, #8]
 800d6a0:	3205      	adds	r2, #5
 800d6a2:	7812      	ldrb	r2, [r2, #0]
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	2364      	movs	r3, #100	@ 0x64
 800d6aa:	fb02 f303 	mul.w	r3, r2, r3
 800d6ae:	667b      	str	r3, [r7, #100]	@ 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	689b      	ldr	r3, [r3, #8]
 800d6b4:	3306      	adds	r3, #6
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	b25b      	sxtb	r3, r3
 800d6ba:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 800d6be:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f004 fb50 	bl	8011d68 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 800d6c8:	4b1a      	ldr	r3, [pc, #104]	@ (800d734 <LmhpComplianceOnMcpsIndication+0x3c0>)
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	709a      	strb	r2, [r3, #2]
                }
                break;
 800d6ce:	e02e      	b.n	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 800d6d0:	230a      	movs	r3, #10
 800d6d2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800d6d6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f004 fb44 	bl	8011d68 <LoRaMacMlmeRequest>
                }
                break;
 800d6e0:	e025      	b.n	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	689b      	ldr	r3, [r3, #8]
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800d6f0:	f107 030c 	add.w	r3, r7, #12
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f003 ff81 	bl	80115fc <LoRaMacMibSetRequestConfirm>
                }
                break;
 800d6fa:	e018      	b.n	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800d6fc:	230d      	movs	r3, #13
 800d6fe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	785b      	ldrb	r3, [r3, #1]
 800d708:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 800d70c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d710:	4618      	mov	r0, r3
 800d712:	f004 fb29 	bl	8011d68 <LoRaMacMlmeRequest>
                }
                break;
 800d716:	e00a      	b.n	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800d718:	bf00      	nop
 800d71a:	e008      	b.n	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800d71c:	bf00      	nop
 800d71e:	e006      	b.n	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800d720:	bf00      	nop
 800d722:	e004      	b.n	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 800d724:	bf00      	nop
 800d726:	e002      	b.n	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800d728:	bf00      	nop
 800d72a:	e000      	b.n	800d72e <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800d72c:	bf00      	nop
        }
    }
}
 800d72e:	3788      	adds	r7, #136	@ 0x88
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	200007dc 	.word	0x200007dc

0800d738 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d738:	b480      	push	{r7}
 800d73a:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800d73c:	bf00      	nop
 800d73e:	46bd      	mov	sp, r7
 800d740:	bc80      	pop	{r7}
 800d742:	4770      	bx	lr

0800d744 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800d74c:	f7ff fd9c 	bl	800d288 <LmhpComplianceTxProcess>
}
 800d750:	bf00      	nop
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800d760:	2300      	movs	r3, #0
}
 800d762:	4618      	mov	r0, r3
 800d764:	370c      	adds	r7, #12
 800d766:	46bd      	mov	sp, r7
 800d768:	bc80      	pop	{r7}
 800d76a:	4770      	bx	lr

0800d76c <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	4603      	mov	r3, r0
 800d774:	6039      	str	r1, [r7, #0]
 800d776:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800d778:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	bc80      	pop	{r7}
 800d784:	4770      	bx	lr
	...

0800d788 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800d788:	b590      	push	{r4, r7, lr}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d78e:	f00d fc0d 	bl	801afac <UTIL_TIMER_GetCurrentTime>
 800d792:	4603      	mov	r3, r0
 800d794:	4a0f      	ldr	r2, [pc, #60]	@ (800d7d4 <OnRadioTxDone+0x4c>)
 800d796:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d798:	4c0f      	ldr	r4, [pc, #60]	@ (800d7d8 <OnRadioTxDone+0x50>)
 800d79a:	463b      	mov	r3, r7
 800d79c:	4618      	mov	r0, r3
 800d79e:	f00c fd85 	bl	801a2ac <SysTimeGet>
 800d7a2:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800d7a6:	463a      	mov	r2, r7
 800d7a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d7ac:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d7b0:	4a0a      	ldr	r2, [pc, #40]	@ (800d7dc <OnRadioTxDone+0x54>)
 800d7b2:	7813      	ldrb	r3, [r2, #0]
 800d7b4:	f043 0310 	orr.w	r3, r3, #16
 800d7b8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800d7ba:	f003 f8ef 	bl	801099c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d7be:	4b08      	ldr	r3, [pc, #32]	@ (800d7e0 <OnRadioTxDone+0x58>)
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	2002      	movs	r0, #2
 800d7c6:	f00d fce1 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
}
 800d7ca:	bf00      	nop
 800d7cc:	370c      	adds	r7, #12
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd90      	pop	{r4, r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	20001470 	.word	0x20001470
 800d7d8:	200007f4 	.word	0x200007f4
 800d7dc:	2000146c 	.word	0x2000146c
 800d7e0:	0801e42c 	.word	0x0801e42c

0800d7e4 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	4608      	mov	r0, r1
 800d7ee:	4611      	mov	r1, r2
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	817b      	strh	r3, [r7, #10]
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	813b      	strh	r3, [r7, #8]
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d7fe:	f00d fbd5 	bl	801afac <UTIL_TIMER_GetCurrentTime>
 800d802:	4603      	mov	r3, r0
 800d804:	4a0f      	ldr	r2, [pc, #60]	@ (800d844 <OnRadioRxDone+0x60>)
 800d806:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d808:	4a0e      	ldr	r2, [pc, #56]	@ (800d844 <OnRadioRxDone+0x60>)
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d80e:	4a0d      	ldr	r2, [pc, #52]	@ (800d844 <OnRadioRxDone+0x60>)
 800d810:	897b      	ldrh	r3, [r7, #10]
 800d812:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d814:	4a0b      	ldr	r2, [pc, #44]	@ (800d844 <OnRadioRxDone+0x60>)
 800d816:	893b      	ldrh	r3, [r7, #8]
 800d818:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d81a:	4a0a      	ldr	r2, [pc, #40]	@ (800d844 <OnRadioRxDone+0x60>)
 800d81c:	79fb      	ldrb	r3, [r7, #7]
 800d81e:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d820:	4a09      	ldr	r2, [pc, #36]	@ (800d848 <OnRadioRxDone+0x64>)
 800d822:	7813      	ldrb	r3, [r2, #0]
 800d824:	f043 0308 	orr.w	r3, r3, #8
 800d828:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800d82a:	f003 f8b7 	bl	801099c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d82e:	4b07      	ldr	r3, [pc, #28]	@ (800d84c <OnRadioRxDone+0x68>)
 800d830:	2201      	movs	r2, #1
 800d832:	2100      	movs	r1, #0
 800d834:	2002      	movs	r0, #2
 800d836:	f00d fca9 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
}
 800d83a:	bf00      	nop
 800d83c:	3710      	adds	r7, #16
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	20001474 	.word	0x20001474
 800d848:	2000146c 	.word	0x2000146c
 800d84c:	0801e43c 	.word	0x0801e43c

0800d850 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d854:	4a07      	ldr	r2, [pc, #28]	@ (800d874 <OnRadioTxTimeout+0x24>)
 800d856:	7813      	ldrb	r3, [r2, #0]
 800d858:	f043 0304 	orr.w	r3, r3, #4
 800d85c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800d85e:	f003 f89d 	bl	801099c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d862:	4b05      	ldr	r3, [pc, #20]	@ (800d878 <OnRadioTxTimeout+0x28>)
 800d864:	2201      	movs	r2, #1
 800d866:	2100      	movs	r1, #0
 800d868:	2002      	movs	r0, #2
 800d86a:	f00d fc8f 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
}
 800d86e:	bf00      	nop
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	2000146c 	.word	0x2000146c
 800d878:	0801e44c 	.word	0x0801e44c

0800d87c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d880:	4a04      	ldr	r2, [pc, #16]	@ (800d894 <OnRadioRxError+0x18>)
 800d882:	7813      	ldrb	r3, [r2, #0]
 800d884:	f043 0302 	orr.w	r3, r3, #2
 800d888:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800d88a:	f003 f887 	bl	801099c <OnMacProcessNotify>
}
 800d88e:	bf00      	nop
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	2000146c 	.word	0x2000146c

0800d898 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d89c:	4a07      	ldr	r2, [pc, #28]	@ (800d8bc <OnRadioRxTimeout+0x24>)
 800d89e:	7813      	ldrb	r3, [r2, #0]
 800d8a0:	f043 0301 	orr.w	r3, r3, #1
 800d8a4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800d8a6:	f003 f879 	bl	801099c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d8aa:	4b05      	ldr	r3, [pc, #20]	@ (800d8c0 <OnRadioRxTimeout+0x28>)
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	2100      	movs	r1, #0
 800d8b0:	2002      	movs	r0, #2
 800d8b2:	f00d fc6b 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
}
 800d8b6:	bf00      	nop
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	2000146c 	.word	0x2000146c
 800d8c0:	0801e45c 	.word	0x0801e45c

0800d8c4 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d8c8:	4b08      	ldr	r3, [pc, #32]	@ (800d8ec <UpdateRxSlotIdleState+0x28>)
 800d8ca:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d8ce:	2b02      	cmp	r3, #2
 800d8d0:	d004      	beq.n	800d8dc <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d8d2:	4b07      	ldr	r3, [pc, #28]	@ (800d8f0 <UpdateRxSlotIdleState+0x2c>)
 800d8d4:	2206      	movs	r2, #6
 800d8d6:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d8da:	e003      	b.n	800d8e4 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d8dc:	4b04      	ldr	r3, [pc, #16]	@ (800d8f0 <UpdateRxSlotIdleState+0x2c>)
 800d8de:	2202      	movs	r2, #2
 800d8e0:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
}
 800d8e4:	bf00      	nop
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bc80      	pop	{r7}
 800d8ea:	4770      	bx	lr
 800d8ec:	20000cfc 	.word	0x20000cfc
 800d8f0:	200007f4 	.word	0x200007f4

0800d8f4 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b092      	sub	sp, #72	@ 0x48
 800d8f8:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d8fa:	4b50      	ldr	r3, [pc, #320]	@ (800da3c <ProcessRadioTxDone+0x148>)
 800d8fc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d900:	2b02      	cmp	r3, #2
 800d902:	d002      	beq.n	800d90a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d904:	4b4e      	ldr	r3, [pc, #312]	@ (800da40 <ProcessRadioTxDone+0x14c>)
 800d906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d908:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d90a:	f3ef 8310 	mrs	r3, PRIMASK
 800d90e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800d910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800d912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800d914:	b672      	cpsid	i
}
 800d916:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800d918:	f00d fb48 	bl	801afac <UTIL_TIMER_GetCurrentTime>
 800d91c:	4602      	mov	r2, r0
 800d91e:	4b49      	ldr	r3, [pc, #292]	@ (800da44 <ProcessRadioTxDone+0x150>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	1ad3      	subs	r3, r2, r3
 800d924:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800d926:	4b48      	ldr	r3, [pc, #288]	@ (800da48 <ProcessRadioTxDone+0x154>)
 800d928:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800d92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d92e:	1ad3      	subs	r3, r2, r3
 800d930:	4619      	mov	r1, r3
 800d932:	4846      	ldr	r0, [pc, #280]	@ (800da4c <ProcessRadioTxDone+0x158>)
 800d934:	f00d fa90 	bl	801ae58 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d938:	4844      	ldr	r0, [pc, #272]	@ (800da4c <ProcessRadioTxDone+0x158>)
 800d93a:	f00d f9af 	bl	801ac9c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800d93e:	4b42      	ldr	r3, [pc, #264]	@ (800da48 <ProcessRadioTxDone+0x154>)
 800d940:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800d944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d946:	1ad3      	subs	r3, r2, r3
 800d948:	4619      	mov	r1, r3
 800d94a:	4841      	ldr	r0, [pc, #260]	@ (800da50 <ProcessRadioTxDone+0x15c>)
 800d94c:	f00d fa84 	bl	801ae58 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d950:	483f      	ldr	r0, [pc, #252]	@ (800da50 <ProcessRadioTxDone+0x15c>)
 800d952:	f00d f9a3 	bl	801ac9c <UTIL_TIMER_Start>
 800d956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d958:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d95a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d95c:	f383 8810 	msr	PRIMASK, r3
}
 800d960:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800d962:	4b36      	ldr	r3, [pc, #216]	@ (800da3c <ProcessRadioTxDone+0x148>)
 800d964:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d968:	2b02      	cmp	r3, #2
 800d96a:	d004      	beq.n	800d976 <ProcessRadioTxDone+0x82>
 800d96c:	4b36      	ldr	r3, [pc, #216]	@ (800da48 <ProcessRadioTxDone+0x154>)
 800d96e:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800d972:	2b00      	cmp	r3, #0
 800d974:	d019      	beq.n	800d9aa <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800d976:	2316      	movs	r3, #22
 800d978:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d97c:	4b2f      	ldr	r3, [pc, #188]	@ (800da3c <ProcessRadioTxDone+0x148>)
 800d97e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d982:	f107 0220 	add.w	r2, r7, #32
 800d986:	4611      	mov	r1, r2
 800d988:	4618      	mov	r0, r3
 800d98a:	f006 fd36 	bl	80143fa <RegionGetPhyParam>
 800d98e:	4603      	mov	r3, r0
 800d990:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800d992:	4b2d      	ldr	r3, [pc, #180]	@ (800da48 <ProcessRadioTxDone+0x154>)
 800d994:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	4413      	add	r3, r2
 800d99c:	4619      	mov	r1, r3
 800d99e:	482d      	ldr	r0, [pc, #180]	@ (800da54 <ProcessRadioTxDone+0x160>)
 800d9a0:	f00d fa5a 	bl	801ae58 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800d9a4:	482b      	ldr	r0, [pc, #172]	@ (800da54 <ProcessRadioTxDone+0x160>)
 800d9a6:	f00d f979 	bl	801ac9c <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800d9aa:	4b26      	ldr	r3, [pc, #152]	@ (800da44 <ProcessRadioTxDone+0x150>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a23      	ldr	r2, [pc, #140]	@ (800da3c <ProcessRadioTxDone+0x148>)
 800d9b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800d9b2:	4b25      	ldr	r3, [pc, #148]	@ (800da48 <ProcessRadioTxDone+0x154>)
 800d9b4:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 800d9b8:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800d9ba:	4b22      	ldr	r3, [pc, #136]	@ (800da44 <ProcessRadioTxDone+0x150>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d9c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f00c fca9 	bl	801a31c <SysTimeGetMcuTime>
 800d9ca:	4638      	mov	r0, r7
 800d9cc:	4b1b      	ldr	r3, [pc, #108]	@ (800da3c <ProcessRadioTxDone+0x148>)
 800d9ce:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 800d9d2:	9200      	str	r2, [sp, #0]
 800d9d4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d9d8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800d9dc:	ca06      	ldmia	r2, {r1, r2}
 800d9de:	f00c fbfe 	bl	801a1de <SysTimeSub>
 800d9e2:	f107 0314 	add.w	r3, r7, #20
 800d9e6:	463a      	mov	r2, r7
 800d9e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d9ec:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800d9f0:	4b15      	ldr	r3, [pc, #84]	@ (800da48 <ProcessRadioTxDone+0x154>)
 800d9f2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800d9f6:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d9fc:	4b0f      	ldr	r3, [pc, #60]	@ (800da3c <ProcessRadioTxDone+0x148>)
 800d9fe:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800da02:	2b00      	cmp	r3, #0
 800da04:	d101      	bne.n	800da0a <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800da06:	2300      	movs	r3, #0
 800da08:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800da0a:	4b0c      	ldr	r3, [pc, #48]	@ (800da3c <ProcessRadioTxDone+0x148>)
 800da0c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800da10:	f107 0208 	add.w	r2, r7, #8
 800da14:	4611      	mov	r1, r2
 800da16:	4618      	mov	r0, r3
 800da18:	f006 fd07 	bl	801442a <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800da1c:	4b0a      	ldr	r3, [pc, #40]	@ (800da48 <ProcessRadioTxDone+0x154>)
 800da1e:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800da22:	f083 0301 	eor.w	r3, r3, #1
 800da26:	b2db      	uxtb	r3, r3
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d003      	beq.n	800da34 <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800da2c:	4b06      	ldr	r3, [pc, #24]	@ (800da48 <ProcessRadioTxDone+0x154>)
 800da2e:	2200      	movs	r2, #0
 800da30:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    }
#endif /* LORAMAC_VERSION */
}
 800da34:	bf00      	nop
 800da36:	3740      	adds	r7, #64	@ 0x40
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	20000cfc 	.word	0x20000cfc
 800da40:	0801eb10 	.word	0x0801eb10
 800da44:	20001470 	.word	0x20001470
 800da48:	200007f4 	.word	0x200007f4
 800da4c:	20000b74 	.word	0x20000b74
 800da50:	20000b8c 	.word	0x20000b8c
 800da54:	20000be8 	.word	0x20000be8

0800da58 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800da5c:	4b10      	ldr	r3, [pc, #64]	@ (800daa0 <PrepareRxDoneAbort+0x48>)
 800da5e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800da62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da66:	4a0e      	ldr	r2, [pc, #56]	@ (800daa0 <PrepareRxDoneAbort+0x48>)
 800da68:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800da6c:	4b0c      	ldr	r3, [pc, #48]	@ (800daa0 <PrepareRxDoneAbort+0x48>)
 800da6e:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800da72:	2b00      	cmp	r3, #0
 800da74:	d002      	beq.n	800da7c <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800da76:	2000      	movs	r0, #0
 800da78:	f001 f950 	bl	800ed1c <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800da7c:	4a08      	ldr	r2, [pc, #32]	@ (800daa0 <PrepareRxDoneAbort+0x48>)
 800da7e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800da82:	f043 0302 	orr.w	r3, r3, #2
 800da86:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800da8a:	4a05      	ldr	r2, [pc, #20]	@ (800daa0 <PrepareRxDoneAbort+0x48>)
 800da8c:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800da90:	f043 0310 	orr.w	r3, r3, #16
 800da94:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

    UpdateRxSlotIdleState( );
 800da98:	f7ff ff14 	bl	800d8c4 <UpdateRxSlotIdleState>
}
 800da9c:	bf00      	nop
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	200007f4 	.word	0x200007f4

0800daa4 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800daa4:	b5b0      	push	{r4, r5, r7, lr}
 800daa6:	b0aa      	sub	sp, #168	@ 0xa8
 800daa8:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800daaa:	2313      	movs	r3, #19
 800daac:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800dab0:	4b78      	ldr	r3, [pc, #480]	@ (800dc94 <ProcessRadioRxDone+0x1f0>)
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 800dab8:	4b76      	ldr	r3, [pc, #472]	@ (800dc94 <ProcessRadioRxDone+0x1f0>)
 800daba:	891b      	ldrh	r3, [r3, #8]
 800dabc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800dac0:	4b74      	ldr	r3, [pc, #464]	@ (800dc94 <ProcessRadioRxDone+0x1f0>)
 800dac2:	895b      	ldrh	r3, [r3, #10]
 800dac4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 800dac8:	4b72      	ldr	r3, [pc, #456]	@ (800dc94 <ProcessRadioRxDone+0x1f0>)
 800daca:	7b1b      	ldrb	r3, [r3, #12]
 800dacc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 800dad0:	2300      	movs	r3, #0
 800dad2:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 800dad6:	2300      	movs	r3, #0
 800dad8:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800dada:	4b6f      	ldr	r3, [pc, #444]	@ (800dc98 <ProcessRadioRxDone+0x1f4>)
 800dadc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dae0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 800dae4:	2300      	movs	r3, #0
 800dae6:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800daea:	2301      	movs	r3, #1
 800daec:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800daf0:	2301      	movs	r3, #1
 800daf2:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800daf6:	4b69      	ldr	r3, [pc, #420]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800daf8:	2200      	movs	r2, #0
 800dafa:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    MacCtx.RxStatus.Rssi = rssi;
 800dafe:	4a67      	ldr	r2, [pc, #412]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db00:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800db04:	f8a2 347c 	strh.w	r3, [r2, #1148]	@ 0x47c
    MacCtx.RxStatus.Snr = snr;
 800db08:	4a64      	ldr	r2, [pc, #400]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db0a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800db0e:	f882 347e 	strb.w	r3, [r2, #1150]	@ 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800db12:	4b62      	ldr	r3, [pc, #392]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db14:	f893 2480 	ldrb.w	r2, [r3, #1152]	@ 0x480
 800db18:	4b60      	ldr	r3, [pc, #384]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db1a:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
    MacCtx.McpsIndication.Port = 0;
 800db1e:	4b5f      	ldr	r3, [pc, #380]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db20:	2200      	movs	r2, #0
 800db22:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 800db26:	4b5d      	ldr	r3, [pc, #372]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db28:	2200      	movs	r2, #0
 800db2a:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800db2e:	4b5b      	ldr	r3, [pc, #364]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db30:	2200      	movs	r2, #0
 800db32:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 800db36:	4b59      	ldr	r3, [pc, #356]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db38:	2200      	movs	r2, #0
 800db3a:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 800db3e:	4b57      	ldr	r3, [pc, #348]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db40:	2200      	movs	r2, #0
 800db42:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.RxData = false;
 800db46:	4b55      	ldr	r3, [pc, #340]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db48:	2200      	movs	r2, #0
 800db4a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.AckReceived = false;
 800db4e:	4b53      	ldr	r3, [pc, #332]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db50:	2200      	movs	r2, #0
 800db52:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800db56:	4b51      	ldr	r3, [pc, #324]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db58:	2200      	movs	r2, #0
 800db5a:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800db5e:	4b4f      	ldr	r3, [pc, #316]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db60:	2200      	movs	r2, #0
 800db62:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 800db66:	4b4d      	ldr	r3, [pc, #308]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db68:	2200      	movs	r2, #0
 800db6a:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800db6e:	4b4b      	ldr	r3, [pc, #300]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db70:	2200      	movs	r2, #0
 800db72:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800db76:	4b4a      	ldr	r3, [pc, #296]	@ (800dca0 <ProcessRadioRxDone+0x1fc>)
 800db78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db7a:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800db7c:	4849      	ldr	r0, [pc, #292]	@ (800dca4 <ProcessRadioRxDone+0x200>)
 800db7e:	f00d f8fb 	bl	801ad78 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800db82:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800db86:	4619      	mov	r1, r3
 800db88:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800db8c:	f004 fc9b 	bl	80124c6 <LoRaMacClassBRxBeacon>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d00b      	beq.n	800dbae <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800db96:	4a41      	ldr	r2, [pc, #260]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800db98:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800db9c:	f8a2 3472 	strh.w	r3, [r2, #1138]	@ 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800dba0:	4a3e      	ldr	r2, [pc, #248]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800dba2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800dba6:	f882 3474 	strb.w	r3, [r2, #1140]	@ 0x474
        return;
 800dbaa:	f000 bc1f 	b.w	800e3ec <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dbae:	4b3a      	ldr	r3, [pc, #232]	@ (800dc98 <ProcessRadioRxDone+0x1f4>)
 800dbb0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d11e      	bne.n	800dbf6 <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800dbb8:	f004 fc98 	bl	80124ec <LoRaMacClassBIsPingExpected>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d00a      	beq.n	800dbd8 <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dbc2:	2000      	movs	r0, #0
 800dbc4:	f004 fc49 	bl	801245a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800dbc8:	2000      	movs	r0, #0
 800dbca:	f004 fc6a 	bl	80124a2 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800dbce:	4b33      	ldr	r3, [pc, #204]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800dbd0:	2204      	movs	r2, #4
 800dbd2:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
 800dbd6:	e00e      	b.n	800dbf6 <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dbd8:	f004 fc8f 	bl	80124fa <LoRaMacClassBIsMulticastExpected>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d009      	beq.n	800dbf6 <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dbe2:	2000      	movs	r0, #0
 800dbe4:	f004 fc43 	bl	801246e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800dbe8:	2000      	movs	r0, #0
 800dbea:	f004 fc63 	bl	80124b4 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800dbee:	4b2b      	ldr	r3, [pc, #172]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800dbf0:	2205      	movs	r2, #5
 800dbf2:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800dbf6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d106      	bne.n	800dc0c <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dbfe:	4b27      	ldr	r3, [pc, #156]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800dc00:	2201      	movs	r2, #1
 800dc02:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
        PrepareRxDoneAbort( );
 800dc06:	f7ff ff27 	bl	800da58 <PrepareRxDoneAbort>
        return;
 800dc0a:	e3ef      	b.n	800e3ec <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800dc0c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800dc10:	1c5a      	adds	r2, r3, #1
 800dc12:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 800dc16:	461a      	mov	r2, r3
 800dc18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc1c:	4413      	add	r3, r2
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800dc24:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800dc28:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	3b01      	subs	r3, #1
 800dc30:	2b06      	cmp	r3, #6
 800dc32:	f200 83b4 	bhi.w	800e39e <ProcessRadioRxDone+0x8fa>
 800dc36:	a201      	add	r2, pc, #4	@ (adr r2, 800dc3c <ProcessRadioRxDone+0x198>)
 800dc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc3c:	0800dc59 	.word	0x0800dc59
 800dc40:	0800e39f 	.word	0x0800e39f
 800dc44:	0800de39 	.word	0x0800de39
 800dc48:	0800e39f 	.word	0x0800e39f
 800dc4c:	0800de31 	.word	0x0800de31
 800dc50:	0800e39f 	.word	0x0800e39f
 800dc54:	0800e343 	.word	0x0800e343
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800dc58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dc5c:	2b10      	cmp	r3, #16
 800dc5e:	d806      	bhi.n	800dc6e <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dc60:	4b0e      	ldr	r3, [pc, #56]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800dc62:	2201      	movs	r2, #1
 800dc64:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800dc68:	f7ff fef6 	bl	800da58 <PrepareRxDoneAbort>
                return;
 800dc6c:	e3be      	b.n	800e3ec <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 800dc6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc72:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800dc74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dc7c:	4b06      	ldr	r3, [pc, #24]	@ (800dc98 <ProcessRadioRxDone+0x1f4>)
 800dc7e:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d010      	beq.n	800dca8 <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dc86:	4b05      	ldr	r3, [pc, #20]	@ (800dc9c <ProcessRadioRxDone+0x1f8>)
 800dc88:	2201      	movs	r2, #1
 800dc8a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800dc8e:	f7ff fee3 	bl	800da58 <PrepareRxDoneAbort>
                return;
 800dc92:	e3ab      	b.n	800e3ec <ProcessRadioRxDone+0x948>
 800dc94:	20001474 	.word	0x20001474
 800dc98:	20000cfc 	.word	0x20000cfc
 800dc9c:	200007f4 	.word	0x200007f4
 800dca0:	0801eb10 	.word	0x0801eb10
 800dca4:	20000b8c 	.word	0x20000b8c
            }

            SecureElementGetJoinEui( joinEui );
 800dca8:	1d3b      	adds	r3, r7, #4
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7fe fac0 	bl	800c230 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800dcb0:	f107 0214 	add.w	r2, r7, #20
 800dcb4:	1d3b      	adds	r3, r7, #4
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	20ff      	movs	r0, #255	@ 0xff
 800dcba:	f005 fe25 	bl	8013908 <LoRaMacCryptoHandleJoinAccept>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                        break;
                    }
                }
#else
            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dcca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dcce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	b25b      	sxtb	r3, r3
 800dcd6:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dcd8:	4bbb      	ldr	r3, [pc, #748]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dcda:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800dcde:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800dce0:	4bb9      	ldr	r3, [pc, #740]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dce2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800dce6:	4639      	mov	r1, r7
 800dce8:	2207      	movs	r2, #7
 800dcea:	4618      	mov	r0, r3
 800dcec:	f006 fbc0 	bl	8014470 <RegionVerify>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800dcf6:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f040 808c 	bne.w	800de18 <ProcessRadioRxDone+0x374>
 800dd00:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	f000 8087 	beq.w	800de18 <ProcessRadioRxDone+0x374>
            {
#endif

                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800dd0a:	7f7b      	ldrb	r3, [r7, #29]
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	4bae      	ldr	r3, [pc, #696]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dd10:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800dd14:	4bac      	ldr	r3, [pc, #688]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dd16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800dd1a:	7fbb      	ldrb	r3, [r7, #30]
 800dd1c:	021b      	lsls	r3, r3, #8
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	4aa9      	ldr	r2, [pc, #676]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dd22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800dd26:	4ba8      	ldr	r3, [pc, #672]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dd28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800dd2c:	7ffb      	ldrb	r3, [r7, #31]
 800dd2e:	041b      	lsls	r3, r3, #16
 800dd30:	4313      	orrs	r3, r2
 800dd32:	4aa5      	ldr	r2, [pc, #660]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dd34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800dd38:	6a3b      	ldr	r3, [r7, #32]
 800dd3a:	4aa3      	ldr	r2, [pc, #652]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dd3c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800dd40:	4ba1      	ldr	r3, [pc, #644]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dd42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dd46:	4619      	mov	r1, r3
 800dd48:	2002      	movs	r0, #2
 800dd4a:	f7fe fa89 	bl	800c260 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800dd4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dd52:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	461a      	mov	r2, r3
 800dd5a:	4b9b      	ldr	r3, [pc, #620]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dd5c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                // Verify if we shall assign the new datarate
                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
                {
#endif

                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dd60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dd64:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	4b96      	ldr	r3, [pc, #600]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dd6e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dd72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dd76:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	4b92      	ldr	r3, [pc, #584]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dd80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
				}
#endif

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800dd84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dd88:	461a      	mov	r2, r3
 800dd8a:	4b8f      	ldr	r3, [pc, #572]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dd8c:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800dd8e:	4b8e      	ldr	r3, [pc, #568]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dd90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d102      	bne.n	800dd9c <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800dd96:	4b8c      	ldr	r3, [pc, #560]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dd98:	2201      	movs	r2, #1
 800dd9a:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800dd9c:	4b8a      	ldr	r3, [pc, #552]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dd9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dda0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dda4:	fb02 f303 	mul.w	r3, r2, r3
 800dda8:	4a87      	ldr	r2, [pc, #540]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800ddaa:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800ddac:	4b86      	ldr	r3, [pc, #536]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800ddae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddb0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800ddb4:	4a84      	ldr	r2, [pc, #528]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800ddb6:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800ddb8:	4b83      	ldr	r3, [pc, #524]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800ddba:	2201      	movs	r2, #1
 800ddbc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800ddc0:	4b81      	ldr	r3, [pc, #516]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800ddc8:	f107 0314 	add.w	r3, r7, #20
 800ddcc:	3312      	adds	r3, #18
 800ddce:	67bb      	str	r3, [r7, #120]	@ 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800ddd0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	3b11      	subs	r3, #17
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800ddde:	4b7a      	ldr	r3, [pc, #488]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dde0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800dde4:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800dde8:	4611      	mov	r1, r2
 800ddea:	4618      	mov	r0, r3
 800ddec:	f006 fb57 	bl	801449e <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ddf0:	4b75      	ldr	r3, [pc, #468]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800ddf2:	2202      	movs	r2, #2
 800ddf4:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800ddf8:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f005 f85d 	bl	8012ebc <LoRaMacConfirmQueueIsCmdActive>
 800de02:	4603      	mov	r3, r0
 800de04:	2b00      	cmp	r3, #0
 800de06:	f000 82d2 	beq.w	800e3ae <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800de0a:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800de0e:	4619      	mov	r1, r3
 800de10:	2000      	movs	r0, #0
 800de12:	f004 ffc7 	bl	8012da4 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800de16:	e2ca      	b.n	800e3ae <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800de18:	2001      	movs	r0, #1
 800de1a:	f005 f84f 	bl	8012ebc <LoRaMacConfirmQueueIsCmdActive>
 800de1e:	4603      	mov	r3, r0
 800de20:	2b00      	cmp	r3, #0
 800de22:	f000 82c3 	beq.w	800e3ac <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800de26:	2101      	movs	r1, #1
 800de28:	2007      	movs	r0, #7
 800de2a:	f004 ffbb 	bl	8012da4 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800de2e:	e2bd      	b.n	800e3ac <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800de30:	4b66      	ldr	r3, [pc, #408]	@ (800dfcc <ProcessRadioRxDone+0x528>)
 800de32:	2201      	movs	r2, #1
 800de34:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800de38:	4b63      	ldr	r3, [pc, #396]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800de3a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800de3e:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800de42:	4b62      	ldr	r3, [pc, #392]	@ (800dfcc <ProcessRadioRxDone+0x528>)
 800de44:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 800de48:	b25b      	sxtb	r3, r3
 800de4a:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800de4e:	230d      	movs	r3, #13
 800de50:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800de54:	4b5c      	ldr	r3, [pc, #368]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800de56:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d002      	beq.n	800de64 <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800de5e:	230e      	movs	r3, #14
 800de60:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800de64:	4b58      	ldr	r3, [pc, #352]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800de66:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800de6a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800de6e:	4611      	mov	r1, r2
 800de70:	4618      	mov	r0, r3
 800de72:	f006 fac2 	bl	80143fa <RegionGetPhyParam>
 800de76:	4603      	mov	r3, r0
 800de78:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800de7a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800de7e:	3b0d      	subs	r3, #13
 800de80:	b29b      	uxth	r3, r3
 800de82:	b21b      	sxth	r3, r3
 800de84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de88:	b21a      	sxth	r2, r3
 800de8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de8c:	b21b      	sxth	r3, r3
 800de8e:	429a      	cmp	r2, r3
 800de90:	dc03      	bgt.n	800de9a <ProcessRadioRxDone+0x3f6>
 800de92:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800de96:	2b0b      	cmp	r3, #11
 800de98:	d806      	bhi.n	800dea8 <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800de9a:	4b4c      	ldr	r3, [pc, #304]	@ (800dfcc <ProcessRadioRxDone+0x528>)
 800de9c:	2201      	movs	r2, #1
 800de9e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800dea2:	f7ff fdd9 	bl	800da58 <PrepareRxDoneAbort>
                return;
 800dea6:	e2a1      	b.n	800e3ec <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 800dea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800deac:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 800deae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800deb8:	4b45      	ldr	r3, [pc, #276]	@ (800dfd0 <ProcessRadioRxDone+0x52c>)
 800deba:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800debc:	23ff      	movs	r3, #255	@ 0xff
 800debe:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800dec2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800dec6:	4618      	mov	r0, r3
 800dec8:	f006 f81e 	bl	8013f08 <LoRaMacParserData>
 800decc:	4603      	mov	r3, r0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d006      	beq.n	800dee0 <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ded2:	4b3e      	ldr	r3, [pc, #248]	@ (800dfcc <ProcessRadioRxDone+0x528>)
 800ded4:	2201      	movs	r2, #1
 800ded6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800deda:	f7ff fdbd 	bl	800da58 <PrepareRxDoneAbort>
                return;
 800dede:	e285      	b.n	800e3ec <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800dee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dee2:	4a3a      	ldr	r2, [pc, #232]	@ (800dfcc <ProcessRadioRxDone+0x528>)
 800dee4:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800dee8:	f107 020e 	add.w	r2, r7, #14
 800deec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800def0:	4611      	mov	r1, r2
 800def2:	4618      	mov	r0, r3
 800def4:	f002 fc79 	bl	80107ea <DetermineFrameType>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d006      	beq.n	800df0c <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800defe:	4b33      	ldr	r3, [pc, #204]	@ (800dfcc <ProcessRadioRxDone+0x528>)
 800df00:	2201      	movs	r2, #1
 800df02:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800df06:	f7ff fda7 	bl	800da58 <PrepareRxDoneAbort>
                return;
 800df0a:	e26f      	b.n	800e3ec <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 800df0c:	2300      	movs	r3, #0
 800df0e:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 800df12:	2300      	movs	r3, #0
 800df14:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800df16:	2300      	movs	r3, #0
 800df18:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800df1c:	e04f      	b.n	800dfbe <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800df1e:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800df22:	4929      	ldr	r1, [pc, #164]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800df24:	4613      	mov	r3, r2
 800df26:	005b      	lsls	r3, r3, #1
 800df28:	4413      	add	r3, r2
 800df2a:	011b      	lsls	r3, r3, #4
 800df2c:	440b      	add	r3, r1
 800df2e:	33ec      	adds	r3, #236	@ 0xec
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df34:	429a      	cmp	r2, r3
 800df36:	d13d      	bne.n	800dfb4 <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800df38:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800df3c:	4922      	ldr	r1, [pc, #136]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800df3e:	4613      	mov	r3, r2
 800df40:	005b      	lsls	r3, r3, #1
 800df42:	4413      	add	r3, r2
 800df44:	011b      	lsls	r3, r3, #4
 800df46:	440b      	add	r3, r1
 800df48:	33e9      	adds	r3, #233	@ 0xe9
 800df4a:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d031      	beq.n	800dfb4 <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 800df50:	2301      	movs	r3, #1
 800df52:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800df56:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800df5a:	491b      	ldr	r1, [pc, #108]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800df5c:	4613      	mov	r3, r2
 800df5e:	005b      	lsls	r3, r3, #1
 800df60:	4413      	add	r3, r2
 800df62:	011b      	lsls	r3, r3, #4
 800df64:	440b      	add	r3, r1
 800df66:	33ea      	adds	r3, #234	@ 0xea
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800df6e:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800df72:	4915      	ldr	r1, [pc, #84]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800df74:	4613      	mov	r3, r2
 800df76:	005b      	lsls	r3, r3, #1
 800df78:	4413      	add	r3, r2
 800df7a:	011b      	lsls	r3, r3, #4
 800df7c:	440b      	add	r3, r1
 800df7e:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800df88:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800df8c:	490e      	ldr	r1, [pc, #56]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800df8e:	4613      	mov	r3, r2
 800df90:	005b      	lsls	r3, r3, #1
 800df92:	4413      	add	r3, r2
 800df94:	011b      	lsls	r3, r3, #4
 800df96:	440b      	add	r3, r1
 800df98:	33ec      	adds	r3, #236	@ 0xec
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800dfa0:	4b09      	ldr	r3, [pc, #36]	@ (800dfc8 <ProcessRadioRxDone+0x524>)
 800dfa2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800dfa6:	2b02      	cmp	r3, #2
 800dfa8:	d114      	bne.n	800dfd4 <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800dfaa:	4b08      	ldr	r3, [pc, #32]	@ (800dfcc <ProcessRadioRxDone+0x528>)
 800dfac:	2203      	movs	r2, #3
 800dfae:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
                    }
                    break;
 800dfb2:	e00f      	b.n	800dfd4 <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dfb4:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800dfb8:	3301      	adds	r3, #1
 800dfba:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800dfbe:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d0ab      	beq.n	800df1e <ProcessRadioRxDone+0x47a>
 800dfc6:	e006      	b.n	800dfd6 <ProcessRadioRxDone+0x532>
 800dfc8:	20000cfc 	.word	0x20000cfc
 800dfcc:	200007f4 	.word	0x200007f4
 800dfd0:	20000a2c 	.word	0x20000a2c
                    break;
 800dfd4:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dfd6:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d117      	bne.n	800e00e <ProcessRadioRxDone+0x56a>
 800dfde:	7bbb      	ldrb	r3, [r7, #14]
 800dfe0:	2b03      	cmp	r3, #3
 800dfe2:	d10d      	bne.n	800e000 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dfe4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800dfe8:	f003 0320 	and.w	r3, r3, #32
 800dfec:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d106      	bne.n	800e000 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800dff2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800dff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dffa:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d006      	beq.n	800e00e <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e000:	4bb3      	ldr	r3, [pc, #716]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e002:	2201      	movs	r2, #1
 800e004:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800e008:	f7ff fd26 	bl	800da58 <PrepareRxDoneAbort>
                return;
 800e00c:	e1ee      	b.n	800e3ec <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800e00e:	2315      	movs	r3, #21
 800e010:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e014:	4baf      	ldr	r3, [pc, #700]	@ (800e2d4 <ProcessRadioRxDone+0x830>)
 800e016:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e01a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800e01e:	4611      	mov	r1, r2
 800e020:	4618      	mov	r0, r3
 800e022:	f006 f9ea 	bl	80143fa <RegionGetPhyParam>
 800e026:	4603      	mov	r3, r0
 800e028:	66fb      	str	r3, [r7, #108]	@ 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800e02a:	7bb9      	ldrb	r1, [r7, #14]
 800e02c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e02e:	b29b      	uxth	r3, r3
 800e030:	4da8      	ldr	r5, [pc, #672]	@ (800e2d4 <ProcessRadioRxDone+0x830>)
 800e032:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800e036:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800e03a:	f107 0210 	add.w	r2, r7, #16
 800e03e:	9202      	str	r2, [sp, #8]
 800e040:	f107 020f 	add.w	r2, r7, #15
 800e044:	9201      	str	r2, [sp, #4]
 800e046:	9300      	str	r3, [sp, #0]
 800e048:	f8d5 3128 	ldr.w	r3, [r5, #296]	@ 0x128
 800e04c:	4622      	mov	r2, r4
 800e04e:	f000 fe8d 	bl	800ed6c <GetFCntDown>
 800e052:	4603      	mov	r3, r0
 800e054:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e058:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d035      	beq.n	800e0cc <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e060:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e064:	2b07      	cmp	r3, #7
 800e066:	d119      	bne.n	800e09c <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e068:	4b99      	ldr	r3, [pc, #612]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e06a:	2208      	movs	r2, #8
 800e06c:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800e070:	4b98      	ldr	r3, [pc, #608]	@ (800e2d4 <ProcessRadioRxDone+0x830>)
 800e072:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800e076:	2b00      	cmp	r3, #0
 800e078:	d11d      	bne.n	800e0b6 <ProcessRadioRxDone+0x612>
 800e07a:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800e07e:	f023 031f 	bic.w	r3, r3, #31
 800e082:	b2db      	uxtb	r3, r3
 800e084:	2ba0      	cmp	r3, #160	@ 0xa0
 800e086:	d116      	bne.n	800e0b6 <ProcessRadioRxDone+0x612>
 800e088:	4b92      	ldr	r3, [pc, #584]	@ (800e2d4 <ProcessRadioRxDone+0x830>)
 800e08a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e08c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e08e:	429a      	cmp	r2, r3
 800e090:	d111      	bne.n	800e0b6 <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800e092:	4b90      	ldr	r3, [pc, #576]	@ (800e2d4 <ProcessRadioRxDone+0x830>)
 800e094:	2201      	movs	r2, #1
 800e096:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800e09a:	e00c      	b.n	800e0b6 <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800e09c:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e0a0:	2b08      	cmp	r3, #8
 800e0a2:	d104      	bne.n	800e0ae <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800e0a4:	4b8a      	ldr	r3, [pc, #552]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e0a6:	220a      	movs	r2, #10
 800e0a8:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800e0ac:	e003      	b.n	800e0b6 <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e0ae:	4b88      	ldr	r3, [pc, #544]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	4a85      	ldr	r2, [pc, #532]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e0ba:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	4a83      	ldr	r2, [pc, #524]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e0c2:	f8c2 3460 	str.w	r3, [r2, #1120]	@ 0x460
                PrepareRxDoneAbort( );
 800e0c6:	f7ff fcc7 	bl	800da58 <PrepareRxDoneAbort>
                return;
 800e0ca:	e18f      	b.n	800e3ec <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e0cc:	7bfa      	ldrb	r2, [r7, #15]
 800e0ce:	6939      	ldr	r1, [r7, #16]
 800e0d0:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800e0d4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	460b      	mov	r3, r1
 800e0dc:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800e0e0:	f005 fd74 	bl	8013bcc <LoRaMacCryptoUnsecureMessage>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e0ea:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d00f      	beq.n	800e112 <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e0f2:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e0f6:	2b02      	cmp	r3, #2
 800e0f8:	d104      	bne.n	800e104 <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e0fa:	4b75      	ldr	r3, [pc, #468]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e0fc:	220b      	movs	r2, #11
 800e0fe:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800e102:	e003      	b.n	800e10c <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e104:	4b72      	ldr	r3, [pc, #456]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e106:	220c      	movs	r2, #12
 800e108:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                }
                PrepareRxDoneAbort( );
 800e10c:	f7ff fca4 	bl	800da58 <PrepareRxDoneAbort>
                return;
 800e110:	e16c      	b.n	800e3ec <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e112:	4b6f      	ldr	r3, [pc, #444]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e114:	2200      	movs	r2, #0
 800e116:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 800e11a:	4a6d      	ldr	r2, [pc, #436]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e11c:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800e120:	f882 341a 	strb.w	r3, [r2, #1050]	@ 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 800e124:	4b6a      	ldr	r3, [pc, #424]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e126:	2200      	movs	r2, #0
 800e128:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 800e12c:	4b68      	ldr	r3, [pc, #416]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e12e:	2200      	movs	r2, #0
 800e130:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	4a66      	ldr	r2, [pc, #408]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e138:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	4a64      	ldr	r2, [pc, #400]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e140:	f8c2 3460 	str.w	r3, [r2, #1120]	@ 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e144:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e148:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	2b00      	cmp	r3, #0
 800e150:	bf14      	ite	ne
 800e152:	2301      	movne	r3, #1
 800e154:	2300      	moveq	r3, #0
 800e156:	b2da      	uxtb	r2, r3
 800e158:	4b5d      	ldr	r3, [pc, #372]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e15a:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e15e:	4b5c      	ldr	r3, [pc, #368]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e160:	2200      	movs	r2, #0
 800e162:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e166:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e16a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	2b00      	cmp	r3, #0
 800e172:	bf14      	ite	ne
 800e174:	2301      	movne	r3, #1
 800e176:	2300      	moveq	r3, #0
 800e178:	b2da      	uxtb	r2, r3
 800e17a:	4b55      	ldr	r3, [pc, #340]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e17c:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e180:	4b53      	ldr	r3, [pc, #332]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e182:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800e186:	2b00      	cmp	r3, #0
 800e188:	d004      	beq.n	800e194 <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e18a:	4b51      	ldr	r3, [pc, #324]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e18c:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e190:	2b01      	cmp	r3, #1
 800e192:	d102      	bne.n	800e19a <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e194:	4b4f      	ldr	r3, [pc, #316]	@ (800e2d4 <ProcessRadioRxDone+0x830>)
 800e196:	2200      	movs	r2, #0
 800e198:	629a      	str	r2, [r3, #40]	@ 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e19a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d104      	bne.n	800e1ac <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e1a2:	4b4b      	ldr	r3, [pc, #300]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e1a4:	2202      	movs	r2, #2
 800e1a6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800e1aa:	e01f      	b.n	800e1ec <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e1ac:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800e1b0:	f023 031f 	bic.w	r3, r3, #31
 800e1b4:	b2db      	uxtb	r3, r3
 800e1b6:	2ba0      	cmp	r3, #160	@ 0xa0
 800e1b8:	d110      	bne.n	800e1dc <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e1ba:	4b46      	ldr	r3, [pc, #280]	@ (800e2d4 <ProcessRadioRxDone+0x830>)
 800e1bc:	2201      	movs	r2, #1
 800e1be:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e1c2:	4b44      	ldr	r3, [pc, #272]	@ (800e2d4 <ProcessRadioRxDone+0x830>)
 800e1c4:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d102      	bne.n	800e1d2 <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e1cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e1ce:	4a41      	ldr	r2, [pc, #260]	@ (800e2d4 <ProcessRadioRxDone+0x830>)
 800e1d0:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e1d2:	4b3f      	ldr	r3, [pc, #252]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800e1da:	e007      	b.n	800e1ec <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e1dc:	4b3d      	ldr	r3, [pc, #244]	@ (800e2d4 <ProcessRadioRxDone+0x830>)
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e1e4:	4b3a      	ldr	r3, [pc, #232]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
                }
            }

            // Set the pending status
			// Fix for Class C Certification test. Re-enabled part of if condition previously removed.
            if (( (Nvm.MacGroup1.SrvAckRequested == true) ||
 800e1ec:	4b39      	ldr	r3, [pc, #228]	@ (800e2d4 <ProcessRadioRxDone+0x830>)
 800e1ee:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d106      	bne.n	800e204 <ProcessRadioRxDone+0x760>
                  (macMsgData.FHDR.FCtrl.Bits.FPending > 0) ) &&
 800e1f6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e1fa:	f003 0310 	and.w	r3, r3, #16
 800e1fe:	b2db      	uxtb	r3, r3
            if (( (Nvm.MacGroup1.SrvAckRequested == true) ||
 800e200:	2b00      	cmp	r3, #0
 800e202:	d008      	beq.n	800e216 <ProcessRadioRxDone+0x772>
                (Nvm.MacGroup2.DeviceClass == CLASS_A))
 800e204:	4b33      	ldr	r3, [pc, #204]	@ (800e2d4 <ProcessRadioRxDone+0x830>)
 800e206:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
                  (macMsgData.FHDR.FCtrl.Bits.FPending > 0) ) &&
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d103      	bne.n	800e216 <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800e20e:	4b30      	ldr	r3, [pc, #192]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e210:	2201      	movs	r2, #1
 800e212:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e216:	4b2e      	ldr	r3, [pc, #184]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e218:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800e21c:	4a2c      	ldr	r2, [pc, #176]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e21e:	f892 2434 	ldrb.w	r2, [r2, #1076]	@ 0x434
 800e222:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 800e226:	4618      	mov	r0, r3
 800e228:	f001 ff02 	bl	8010030 <RemoveMacCommands>

            switch( fType )
 800e22c:	7bbb      	ldrb	r3, [r7, #14]
 800e22e:	2b03      	cmp	r3, #3
 800e230:	d878      	bhi.n	800e324 <ProcessRadioRxDone+0x880>
 800e232:	a201      	add	r2, pc, #4	@ (adr r2, 800e238 <ProcessRadioRxDone+0x794>)
 800e234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e238:	0800e249 	.word	0x0800e249
 800e23c:	0800e299 	.word	0x0800e299
 800e240:	0800e2d9 	.word	0x0800e2d9
 800e244:	0800e2ff 	.word	0x0800e2ff
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e248:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e24c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e250:	b2db      	uxtb	r3, r3
 800e252:	461c      	mov	r4, r3
 800e254:	4b1e      	ldr	r3, [pc, #120]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e256:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800e25a:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800e25e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800e262:	f102 0010 	add.w	r0, r2, #16
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	460b      	mov	r3, r1
 800e26a:	4622      	mov	r2, r4
 800e26c:	2100      	movs	r1, #0
 800e26e:	f000 fef7 	bl	800f060 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e272:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e276:	4b16      	ldr	r3, [pc, #88]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e278:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e27c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e27e:	4a14      	ldr	r2, [pc, #80]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e280:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e284:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800e288:	4b11      	ldr	r3, [pc, #68]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e28a:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800e28e:	4b10      	ldr	r3, [pc, #64]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e290:	2201      	movs	r2, #1
 800e292:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    break;
 800e296:	e04c      	b.n	800e332 <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e298:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800e29c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e2a0:	b2db      	uxtb	r3, r3
 800e2a2:	461c      	mov	r4, r3
 800e2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e2a6:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800e2aa:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800e2ae:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800e2b2:	f102 0010 	add.w	r0, r2, #16
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	4622      	mov	r2, r4
 800e2bc:	2100      	movs	r1, #0
 800e2be:	f000 fecf 	bl	800f060 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2c2:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e2c6:	4b02      	ldr	r3, [pc, #8]	@ (800e2d0 <ProcessRadioRxDone+0x82c>)
 800e2c8:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    break;
 800e2cc:	e031      	b.n	800e332 <ProcessRadioRxDone+0x88e>
 800e2ce:	bf00      	nop
 800e2d0:	200007f4 	.word	0x200007f4
 800e2d4:	20000cfc 	.word	0x20000cfc
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e2d8:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800e2da:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800e2de:	4b45      	ldr	r3, [pc, #276]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e2e0:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800e2e4:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	460b      	mov	r3, r1
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	f000 feb7 	bl	800f060 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2f2:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e2f6:	4b3f      	ldr	r3, [pc, #252]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e2f8:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    break;
 800e2fc:	e019      	b.n	800e332 <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e2fe:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e302:	4b3c      	ldr	r3, [pc, #240]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e304:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e308:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e30a:	4a3a      	ldr	r2, [pc, #232]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e30c:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e310:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800e314:	4b37      	ldr	r3, [pc, #220]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e316:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800e31a:	4b36      	ldr	r3, [pc, #216]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e31c:	2201      	movs	r2, #1
 800e31e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    break;
 800e322:	e006      	b.n	800e332 <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e324:	4b33      	ldr	r3, [pc, #204]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e326:	2201      	movs	r2, #1
 800e328:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    PrepareRxDoneAbort( );
 800e32c:	f7ff fb94 	bl	800da58 <PrepareRxDoneAbort>
                    break;
 800e330:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e332:	4a30      	ldr	r2, [pc, #192]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e334:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e338:	f043 0302 	orr.w	r3, r3, #2
 800e33c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

            break;
 800e340:	e035      	b.n	800e3ae <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e342:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800e346:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800e34a:	18d1      	adds	r1, r2, r3
 800e34c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800e350:	b29b      	uxth	r3, r3
 800e352:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e356:	1ad3      	subs	r3, r2, r3
 800e358:	b29b      	uxth	r3, r3
 800e35a:	461a      	mov	r2, r3
 800e35c:	4826      	ldr	r0, [pc, #152]	@ (800e3f8 <ProcessRadioRxDone+0x954>)
 800e35e:	f008 fb58 	bl	8016a12 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e362:	4b24      	ldr	r3, [pc, #144]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e364:	2203      	movs	r2, #3
 800e366:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e36a:	4b22      	ldr	r3, [pc, #136]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e36c:	2200      	movs	r2, #0
 800e36e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e372:	4b20      	ldr	r3, [pc, #128]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e374:	4a20      	ldr	r2, [pc, #128]	@ (800e3f8 <ProcessRadioRxDone+0x954>)
 800e376:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e37a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e37e:	b2da      	uxtb	r2, r3
 800e380:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800e384:	1ad3      	subs	r3, r2, r3
 800e386:	b2da      	uxtb	r2, r3
 800e388:	4b1a      	ldr	r3, [pc, #104]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e38a:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e38e:	4a19      	ldr	r2, [pc, #100]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e390:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e394:	f043 0302 	orr.w	r3, r3, #2
 800e398:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            break;
 800e39c:	e007      	b.n	800e3ae <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e39e:	4b15      	ldr	r3, [pc, #84]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e3a0:	2201      	movs	r2, #1
 800e3a2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            PrepareRxDoneAbort( );
 800e3a6:	f7ff fb57 	bl	800da58 <PrepareRxDoneAbort>
            break;
 800e3aa:	e000      	b.n	800e3ae <ProcessRadioRxDone+0x90a>
            break;
 800e3ac:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800e3ae:	4b11      	ldr	r3, [pc, #68]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e3b0:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d008      	beq.n	800e3ca <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e3b8:	4b0e      	ldr	r3, [pc, #56]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e3ba:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d00b      	beq.n	800e3da <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e3c2:	2000      	movs	r0, #0
 800e3c4:	f000 fcaa 	bl	800ed1c <OnAckTimeoutTimerEvent>
 800e3c8:	e007      	b.n	800e3da <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e3ca:	4b0c      	ldr	r3, [pc, #48]	@ (800e3fc <ProcessRadioRxDone+0x958>)
 800e3cc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e3d0:	2b02      	cmp	r3, #2
 800e3d2:	d102      	bne.n	800e3da <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	f000 fca1 	bl	800ed1c <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e3da:	4a06      	ldr	r2, [pc, #24]	@ (800e3f4 <ProcessRadioRxDone+0x950>)
 800e3dc:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e3e0:	f043 0310 	orr.w	r3, r3, #16
 800e3e4:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800e3e8:	f7ff fa6c 	bl	800d8c4 <UpdateRxSlotIdleState>
}
 800e3ec:	3798      	adds	r7, #152	@ 0x98
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bdb0      	pop	{r4, r5, r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	200007f4 	.word	0x200007f4
 800e3f8:	20000a2c 	.word	0x20000a2c
 800e3fc:	20000cfc 	.word	0x20000cfc

0800e400 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e400:	b580      	push	{r7, lr}
 800e402:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e404:	4b11      	ldr	r3, [pc, #68]	@ (800e44c <ProcessRadioTxTimeout+0x4c>)
 800e406:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	d002      	beq.n	800e414 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e40e:	4b10      	ldr	r3, [pc, #64]	@ (800e450 <ProcessRadioTxTimeout+0x50>)
 800e410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e412:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e414:	f7ff fa56 	bl	800d8c4 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e418:	4b0e      	ldr	r3, [pc, #56]	@ (800e454 <ProcessRadioTxTimeout+0x54>)
 800e41a:	2202      	movs	r2, #2
 800e41c:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e420:	2002      	movs	r0, #2
 800e422:	f004 fd17 	bl	8012e54 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e426:	4b0b      	ldr	r3, [pc, #44]	@ (800e454 <ProcessRadioTxTimeout+0x54>)
 800e428:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d003      	beq.n	800e438 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 800e430:	4b08      	ldr	r3, [pc, #32]	@ (800e454 <ProcessRadioTxTimeout+0x54>)
 800e432:	2201      	movs	r2, #1
 800e434:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e438:	4a06      	ldr	r2, [pc, #24]	@ (800e454 <ProcessRadioTxTimeout+0x54>)
 800e43a:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e43e:	f043 0310 	orr.w	r3, r3, #16
 800e442:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
}
 800e446:	bf00      	nop
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	20000cfc 	.word	0x20000cfc
 800e450:	0801eb10 	.word	0x0801eb10
 800e454:	200007f4 	.word	0x200007f4

0800e458 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	4603      	mov	r3, r0
 800e460:	460a      	mov	r2, r1
 800e462:	71fb      	strb	r3, [r7, #7]
 800e464:	4613      	mov	r3, r2
 800e466:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e468:	2300      	movs	r3, #0
 800e46a:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e46c:	4b40      	ldr	r3, [pc, #256]	@ (800e570 <HandleRadioRxErrorTimeout+0x118>)
 800e46e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e472:	2b02      	cmp	r3, #2
 800e474:	d002      	beq.n	800e47c <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e476:	4b3f      	ldr	r3, [pc, #252]	@ (800e574 <HandleRadioRxErrorTimeout+0x11c>)
 800e478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e47a:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e47c:	f004 f82f 	bl	80124de <LoRaMacClassBIsBeaconExpected>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d007      	beq.n	800e496 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e486:	2002      	movs	r0, #2
 800e488:	f003 ffdd 	bl	8012446 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e48c:	2000      	movs	r0, #0
 800e48e:	f003 ffff 	bl	8012490 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e492:	2301      	movs	r3, #1
 800e494:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e496:	4b36      	ldr	r3, [pc, #216]	@ (800e570 <HandleRadioRxErrorTimeout+0x118>)
 800e498:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d119      	bne.n	800e4d4 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e4a0:	f004 f824 	bl	80124ec <LoRaMacClassBIsPingExpected>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d007      	beq.n	800e4ba <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e4aa:	2000      	movs	r0, #0
 800e4ac:	f003 ffd5 	bl	801245a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e4b0:	2000      	movs	r0, #0
 800e4b2:	f003 fff6 	bl	80124a2 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e4ba:	f004 f81e 	bl	80124fa <LoRaMacClassBIsMulticastExpected>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d007      	beq.n	800e4d4 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	f003 ffd2 	bl	801246e <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e4ca:	2000      	movs	r0, #0
 800e4cc:	f003 fff2 	bl	80124b4 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e4d4:	7bfb      	ldrb	r3, [r7, #15]
 800e4d6:	f083 0301 	eor.w	r3, r3, #1
 800e4da:	b2db      	uxtb	r3, r3
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d040      	beq.n	800e562 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e4e0:	4b25      	ldr	r3, [pc, #148]	@ (800e578 <HandleRadioRxErrorTimeout+0x120>)
 800e4e2:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d122      	bne.n	800e530 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e4ea:	4b23      	ldr	r3, [pc, #140]	@ (800e578 <HandleRadioRxErrorTimeout+0x120>)
 800e4ec:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d003      	beq.n	800e4fc <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e4f4:	4a20      	ldr	r2, [pc, #128]	@ (800e578 <HandleRadioRxErrorTimeout+0x120>)
 800e4f6:	79fb      	ldrb	r3, [r7, #7]
 800e4f8:	f882 3435 	strb.w	r3, [r2, #1077]	@ 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e4fc:	79fb      	ldrb	r3, [r7, #7]
 800e4fe:	4618      	mov	r0, r3
 800e500:	f004 fca8 	bl	8012e54 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e504:	4b1a      	ldr	r3, [pc, #104]	@ (800e570 <HandleRadioRxErrorTimeout+0x118>)
 800e506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e508:	4618      	mov	r0, r3
 800e50a:	f00c fd61 	bl	801afd0 <UTIL_TIMER_GetElapsedTime>
 800e50e:	4602      	mov	r2, r0
 800e510:	4b19      	ldr	r3, [pc, #100]	@ (800e578 <HandleRadioRxErrorTimeout+0x120>)
 800e512:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800e516:	429a      	cmp	r2, r3
 800e518:	d323      	bcc.n	800e562 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e51a:	4818      	ldr	r0, [pc, #96]	@ (800e57c <HandleRadioRxErrorTimeout+0x124>)
 800e51c:	f00c fc2c 	bl	801ad78 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e520:	4a15      	ldr	r2, [pc, #84]	@ (800e578 <HandleRadioRxErrorTimeout+0x120>)
 800e522:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e526:	f043 0310 	orr.w	r3, r3, #16
 800e52a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 800e52e:	e018      	b.n	800e562 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e530:	4b11      	ldr	r3, [pc, #68]	@ (800e578 <HandleRadioRxErrorTimeout+0x120>)
 800e532:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800e536:	2b00      	cmp	r3, #0
 800e538:	d003      	beq.n	800e542 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e53a:	4a0f      	ldr	r2, [pc, #60]	@ (800e578 <HandleRadioRxErrorTimeout+0x120>)
 800e53c:	79bb      	ldrb	r3, [r7, #6]
 800e53e:	f882 3435 	strb.w	r3, [r2, #1077]	@ 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e542:	79bb      	ldrb	r3, [r7, #6]
 800e544:	4618      	mov	r0, r3
 800e546:	f004 fc85 	bl	8012e54 <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e54a:	4b09      	ldr	r3, [pc, #36]	@ (800e570 <HandleRadioRxErrorTimeout+0x118>)
 800e54c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e550:	2b02      	cmp	r3, #2
 800e552:	d006      	beq.n	800e562 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e554:	4a08      	ldr	r2, [pc, #32]	@ (800e578 <HandleRadioRxErrorTimeout+0x120>)
 800e556:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e55a:	f043 0310 	orr.w	r3, r3, #16
 800e55e:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800e562:	f7ff f9af 	bl	800d8c4 <UpdateRxSlotIdleState>
}
 800e566:	bf00      	nop
 800e568:	3710      	adds	r7, #16
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	20000cfc 	.word	0x20000cfc
 800e574:	0801eb10 	.word	0x0801eb10
 800e578:	200007f4 	.word	0x200007f4
 800e57c:	20000b8c 	.word	0x20000b8c

0800e580 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e580:	b580      	push	{r7, lr}
 800e582:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e584:	2106      	movs	r1, #6
 800e586:	2005      	movs	r0, #5
 800e588:	f7ff ff66 	bl	800e458 <HandleRadioRxErrorTimeout>
}
 800e58c:	bf00      	nop
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e594:	2104      	movs	r1, #4
 800e596:	2003      	movs	r0, #3
 800e598:	f7ff ff5e 	bl	800e458 <HandleRadioRxErrorTimeout>
}
 800e59c:	bf00      	nop
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b084      	sub	sp, #16
 800e5a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5a6:	f3ef 8310 	mrs	r3, PRIMASK
 800e5aa:	607b      	str	r3, [r7, #4]
  return(result);
 800e5ac:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e5ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e5b0:	b672      	cpsid	i
}
 800e5b2:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e5b4:	4b1d      	ldr	r3, [pc, #116]	@ (800e62c <LoRaMacHandleIrqEvents+0x8c>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e5ba:	4b1c      	ldr	r3, [pc, #112]	@ (800e62c <LoRaMacHandleIrqEvents+0x8c>)
 800e5bc:	2200      	movs	r2, #0
 800e5be:	601a      	str	r2, [r3, #0]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	f383 8810 	msr	PRIMASK, r3
}
 800e5ca:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d027      	beq.n	800e622 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e5d2:	783b      	ldrb	r3, [r7, #0]
 800e5d4:	f003 0310 	and.w	r3, r3, #16
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d001      	beq.n	800e5e2 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e5de:	f7ff f989 	bl	800d8f4 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e5e2:	783b      	ldrb	r3, [r7, #0]
 800e5e4:	f003 0308 	and.w	r3, r3, #8
 800e5e8:	b2db      	uxtb	r3, r3
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d001      	beq.n	800e5f2 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e5ee:	f7ff fa59 	bl	800daa4 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e5f2:	783b      	ldrb	r3, [r7, #0]
 800e5f4:	f003 0304 	and.w	r3, r3, #4
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d001      	beq.n	800e602 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e5fe:	f7ff feff 	bl	800e400 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e602:	783b      	ldrb	r3, [r7, #0]
 800e604:	f003 0302 	and.w	r3, r3, #2
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d001      	beq.n	800e612 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e60e:	f7ff ffb7 	bl	800e580 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e612:	783b      	ldrb	r3, [r7, #0]
 800e614:	f003 0301 	and.w	r3, r3, #1
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d001      	beq.n	800e622 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e61e:	f7ff ffb7 	bl	800e590 <ProcessRadioRxTimeout>
        }
    }
}
 800e622:	bf00      	nop
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	2000146c 	.word	0x2000146c

0800e630 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e630:	b480      	push	{r7}
 800e632:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800e634:	4b0b      	ldr	r3, [pc, #44]	@ (800e664 <LoRaMacIsBusy+0x34>)
 800e636:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d101      	bne.n	800e642 <LoRaMacIsBusy+0x12>
    {
        return false;
 800e63e:	2300      	movs	r3, #0
 800e640:	e00c      	b.n	800e65c <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e642:	4b08      	ldr	r3, [pc, #32]	@ (800e664 <LoRaMacIsBusy+0x34>)
 800e644:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d106      	bne.n	800e65a <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e64c:	4b05      	ldr	r3, [pc, #20]	@ (800e664 <LoRaMacIsBusy+0x34>)
 800e64e:	f893 3482 	ldrb.w	r3, [r3, #1154]	@ 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e652:	2b01      	cmp	r3, #1
 800e654:	d101      	bne.n	800e65a <LoRaMacIsBusy+0x2a>
    {
        return false;
 800e656:	2300      	movs	r3, #0
 800e658:	e000      	b.n	800e65c <LoRaMacIsBusy+0x2c>
    }
    return true;
 800e65a:	2301      	movs	r3, #1
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	46bd      	mov	sp, r7
 800e660:	bc80      	pop	{r7}
 800e662:	4770      	bx	lr
 800e664:	200007f4 	.word	0x200007f4

0800e668 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800e668:	b480      	push	{r7}
 800e66a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800e66c:	4b05      	ldr	r3, [pc, #20]	@ (800e684 <LoRaMacIsStopped+0x1c>)
 800e66e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e672:	2b01      	cmp	r3, #1
 800e674:	d101      	bne.n	800e67a <LoRaMacIsStopped+0x12>
    {
        return true;
 800e676:	2301      	movs	r3, #1
 800e678:	e000      	b.n	800e67c <LoRaMacIsStopped+0x14>
    }
    return false;
 800e67a:	2300      	movs	r3, #0
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	46bd      	mov	sp, r7
 800e680:	bc80      	pop	{r7}
 800e682:	4770      	bx	lr
 800e684:	200007f4 	.word	0x200007f4

0800e688 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	4603      	mov	r3, r0
 800e690:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e692:	4a04      	ldr	r2, [pc, #16]	@ (800e6a4 <LoRaMacEnableRequests+0x1c>)
 800e694:	79fb      	ldrb	r3, [r7, #7]
 800e696:	f882 3482 	strb.w	r3, [r2, #1154]	@ 0x482
}
 800e69a:	bf00      	nop
 800e69c:	370c      	adds	r7, #12
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bc80      	pop	{r7}
 800e6a2:	4770      	bx	lr
 800e6a4:	200007f4 	.word	0x200007f4

0800e6a8 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e6ae:	4b2c      	ldr	r3, [pc, #176]	@ (800e760 <LoRaMacHandleRequestEvents+0xb8>)
 800e6b0:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e6b4:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e6b6:	4b2a      	ldr	r3, [pc, #168]	@ (800e760 <LoRaMacHandleRequestEvents+0xb8>)
 800e6b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d14a      	bne.n	800e756 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e6c0:	4b27      	ldr	r3, [pc, #156]	@ (800e760 <LoRaMacHandleRequestEvents+0xb8>)
 800e6c2:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e6c6:	f003 0301 	and.w	r3, r3, #1
 800e6ca:	b2db      	uxtb	r3, r3
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d006      	beq.n	800e6de <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e6d0:	4a23      	ldr	r2, [pc, #140]	@ (800e760 <LoRaMacHandleRequestEvents+0xb8>)
 800e6d2:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e6d6:	f36f 0300 	bfc	r3, #0, #1
 800e6da:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e6de:	4b20      	ldr	r3, [pc, #128]	@ (800e760 <LoRaMacHandleRequestEvents+0xb8>)
 800e6e0:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e6e4:	f003 0304 	and.w	r3, r3, #4
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d006      	beq.n	800e6fc <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e6ee:	4a1c      	ldr	r2, [pc, #112]	@ (800e760 <LoRaMacHandleRequestEvents+0xb8>)
 800e6f0:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e6f4:	f36f 0382 	bfc	r3, #2, #1
 800e6f8:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e6fc:	2001      	movs	r0, #1
 800e6fe:	f7ff ffc3 	bl	800e688 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e702:	793b      	ldrb	r3, [r7, #4]
 800e704:	f003 0301 	and.w	r3, r3, #1
 800e708:	b2db      	uxtb	r3, r3
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d005      	beq.n	800e71a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e70e:	4b14      	ldr	r3, [pc, #80]	@ (800e760 <LoRaMacHandleRequestEvents+0xb8>)
 800e710:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	4813      	ldr	r0, [pc, #76]	@ (800e764 <LoRaMacHandleRequestEvents+0xbc>)
 800e718:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e71a:	793b      	ldrb	r3, [r7, #4]
 800e71c:	f003 0304 	and.w	r3, r3, #4
 800e720:	b2db      	uxtb	r3, r3
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00e      	beq.n	800e744 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e726:	4810      	ldr	r0, [pc, #64]	@ (800e768 <LoRaMacHandleRequestEvents+0xc0>)
 800e728:	f004 fbe2 	bl	8012ef0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e72c:	f004 fc32 	bl	8012f94 <LoRaMacConfirmQueueGetCnt>
 800e730:	4603      	mov	r3, r0
 800e732:	2b00      	cmp	r3, #0
 800e734:	d006      	beq.n	800e744 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e736:	4a0a      	ldr	r2, [pc, #40]	@ (800e760 <LoRaMacHandleRequestEvents+0xb8>)
 800e738:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e73c:	f043 0304 	orr.w	r3, r3, #4
 800e740:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e744:	f003 fef7 	bl	8012536 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e748:	4a05      	ldr	r2, [pc, #20]	@ (800e760 <LoRaMacHandleRequestEvents+0xb8>)
 800e74a:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e74e:	f36f 1304 	bfc	r3, #4, #1
 800e752:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 800e756:	bf00      	nop
 800e758:	3708      	adds	r7, #8
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	200007f4 	.word	0x200007f4
 800e764:	20000c28 	.word	0x20000c28
 800e768:	20000c3c 	.word	0x20000c3c

0800e76c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e770:	4b16      	ldr	r3, [pc, #88]	@ (800e7cc <LoRaMacHandleIndicationEvents+0x60>)
 800e772:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e776:	f003 0308 	and.w	r3, r3, #8
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d00d      	beq.n	800e79c <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e780:	4a12      	ldr	r2, [pc, #72]	@ (800e7cc <LoRaMacHandleIndicationEvents+0x60>)
 800e782:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e786:	f36f 03c3 	bfc	r3, #3, #1
 800e78a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e78e:	4b0f      	ldr	r3, [pc, #60]	@ (800e7cc <LoRaMacHandleIndicationEvents+0x60>)
 800e790:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e794:	68db      	ldr	r3, [r3, #12]
 800e796:	490e      	ldr	r1, [pc, #56]	@ (800e7d0 <LoRaMacHandleIndicationEvents+0x64>)
 800e798:	480e      	ldr	r0, [pc, #56]	@ (800e7d4 <LoRaMacHandleIndicationEvents+0x68>)
 800e79a:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e79c:	4b0b      	ldr	r3, [pc, #44]	@ (800e7cc <LoRaMacHandleIndicationEvents+0x60>)
 800e79e:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e7a2:	f003 0302 	and.w	r3, r3, #2
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d00d      	beq.n	800e7c8 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e7ac:	4a07      	ldr	r2, [pc, #28]	@ (800e7cc <LoRaMacHandleIndicationEvents+0x60>)
 800e7ae:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e7b2:	f36f 0341 	bfc	r3, #1, #1
 800e7b6:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e7ba:	4b04      	ldr	r3, [pc, #16]	@ (800e7cc <LoRaMacHandleIndicationEvents+0x60>)
 800e7bc:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	4903      	ldr	r1, [pc, #12]	@ (800e7d0 <LoRaMacHandleIndicationEvents+0x64>)
 800e7c4:	4804      	ldr	r0, [pc, #16]	@ (800e7d8 <LoRaMacHandleIndicationEvents+0x6c>)
 800e7c6:	4798      	blx	r3
    }
}
 800e7c8:	bf00      	nop
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	200007f4 	.word	0x200007f4
 800e7d0:	20000c70 	.word	0x20000c70
 800e7d4:	20000c50 	.word	0x20000c50
 800e7d8:	20000c0c 	.word	0x20000c0c

0800e7dc <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e7e2:	4b32      	ldr	r3, [pc, #200]	@ (800e8ac <LoRaMacHandleMcpsRequest+0xd0>)
 800e7e4:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e7e8:	f003 0301 	and.w	r3, r3, #1
 800e7ec:	b2db      	uxtb	r3, r3
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d058      	beq.n	800e8a4 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e7fa:	4b2c      	ldr	r3, [pc, #176]	@ (800e8ac <LoRaMacHandleMcpsRequest+0xd0>)
 800e7fc:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800e800:	2b00      	cmp	r3, #0
 800e802:	d004      	beq.n	800e80e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e804:	4b29      	ldr	r3, [pc, #164]	@ (800e8ac <LoRaMacHandleMcpsRequest+0xd0>)
 800e806:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e80a:	2b03      	cmp	r3, #3
 800e80c:	d104      	bne.n	800e818 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e80e:	f002 f83b 	bl	8010888 <CheckRetransUnconfirmedUplink>
 800e812:	4603      	mov	r3, r0
 800e814:	71fb      	strb	r3, [r7, #7]
 800e816:	e020      	b.n	800e85a <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e818:	4b24      	ldr	r3, [pc, #144]	@ (800e8ac <LoRaMacHandleMcpsRequest+0xd0>)
 800e81a:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d11b      	bne.n	800e85a <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 800e822:	4b22      	ldr	r3, [pc, #136]	@ (800e8ac <LoRaMacHandleMcpsRequest+0xd0>)
 800e824:	f893 340f 	ldrb.w	r3, [r3, #1039]	@ 0x40f
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d014      	beq.n	800e856 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e82c:	f002 f858 	bl	80108e0 <CheckRetransConfirmedUplink>
 800e830:	4603      	mov	r3, r0
 800e832:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e834:	4b1e      	ldr	r3, [pc, #120]	@ (800e8b0 <LoRaMacHandleMcpsRequest+0xd4>)
 800e836:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d10d      	bne.n	800e85a <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800e83e:	79fb      	ldrb	r3, [r7, #7]
 800e840:	f083 0301 	eor.w	r3, r3, #1
 800e844:	b2db      	uxtb	r3, r3
 800e846:	2b00      	cmp	r3, #0
 800e848:	d002      	beq.n	800e850 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800e84a:	f002 f8db 	bl	8010a04 <AckTimeoutRetriesProcess>
 800e84e:	e004      	b.n	800e85a <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800e850:	f002 f916 	bl	8010a80 <AckTimeoutRetriesFinalize>
 800e854:	e001      	b.n	800e85a <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800e856:	2301      	movs	r3, #1
 800e858:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800e85a:	79fb      	ldrb	r3, [r7, #7]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00d      	beq.n	800e87c <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e860:	4814      	ldr	r0, [pc, #80]	@ (800e8b4 <LoRaMacHandleMcpsRequest+0xd8>)
 800e862:	f00c fa89 	bl	801ad78 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e866:	4b11      	ldr	r3, [pc, #68]	@ (800e8ac <LoRaMacHandleMcpsRequest+0xd0>)
 800e868:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e86c:	f023 0320 	bic.w	r3, r3, #32
 800e870:	4a0e      	ldr	r2, [pc, #56]	@ (800e8ac <LoRaMacHandleMcpsRequest+0xd0>)
 800e872:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800e876:	f002 f855 	bl	8010924 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e87a:	e013      	b.n	800e8a4 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800e87c:	79bb      	ldrb	r3, [r7, #6]
 800e87e:	f083 0301 	eor.w	r3, r3, #1
 800e882:	b2db      	uxtb	r3, r3
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00d      	beq.n	800e8a4 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e888:	4a08      	ldr	r2, [pc, #32]	@ (800e8ac <LoRaMacHandleMcpsRequest+0xd0>)
 800e88a:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e88e:	f36f 1304 	bfc	r3, #4, #1
 800e892:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            MacCtx.AckTimeoutRetry = false;
 800e896:	4b05      	ldr	r3, [pc, #20]	@ (800e8ac <LoRaMacHandleMcpsRequest+0xd0>)
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
            OnTxDelayedTimerEvent( NULL );
 800e89e:	2000      	movs	r0, #0
 800e8a0:	f000 f992 	bl	800ebc8 <OnTxDelayedTimerEvent>
}
 800e8a4:	bf00      	nop
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	200007f4 	.word	0x200007f4
 800e8b0:	20000cfc 	.word	0x20000cfc
 800e8b4:	20000b5c 	.word	0x20000b5c

0800e8b8 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e8bc:	4b1b      	ldr	r3, [pc, #108]	@ (800e92c <LoRaMacHandleMlmeRequest+0x74>)
 800e8be:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e8c2:	f003 0304 	and.w	r3, r3, #4
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d02c      	beq.n	800e926 <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e8cc:	2001      	movs	r0, #1
 800e8ce:	f004 faf5 	bl	8012ebc <LoRaMacConfirmQueueIsCmdActive>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d012      	beq.n	800e8fe <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e8d8:	2001      	movs	r0, #1
 800e8da:	f004 fa91 	bl	8012e00 <LoRaMacConfirmQueueGetStatus>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d103      	bne.n	800e8ec <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e8e4:	4b11      	ldr	r3, [pc, #68]	@ (800e92c <LoRaMacHandleMlmeRequest+0x74>)
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e8ec:	4b0f      	ldr	r3, [pc, #60]	@ (800e92c <LoRaMacHandleMlmeRequest+0x74>)
 800e8ee:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e8f2:	f023 0302 	bic.w	r3, r3, #2
 800e8f6:	4a0d      	ldr	r2, [pc, #52]	@ (800e92c <LoRaMacHandleMlmeRequest+0x74>)
 800e8f8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800e8fc:	e013      	b.n	800e926 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e8fe:	2006      	movs	r0, #6
 800e900:	f004 fadc 	bl	8012ebc <LoRaMacConfirmQueueIsCmdActive>
 800e904:	4603      	mov	r3, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	d105      	bne.n	800e916 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800e90a:	2007      	movs	r0, #7
 800e90c:	f004 fad6 	bl	8012ebc <LoRaMacConfirmQueueIsCmdActive>
 800e910:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e912:	2b00      	cmp	r3, #0
 800e914:	d007      	beq.n	800e926 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e916:	4b05      	ldr	r3, [pc, #20]	@ (800e92c <LoRaMacHandleMlmeRequest+0x74>)
 800e918:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e91c:	f023 0302 	bic.w	r3, r3, #2
 800e920:	4a02      	ldr	r2, [pc, #8]	@ (800e92c <LoRaMacHandleMlmeRequest+0x74>)
 800e922:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800e926:	bf00      	nop
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	200007f4 	.word	0x200007f4

0800e930 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e934:	200c      	movs	r0, #12
 800e936:	f004 fac1 	bl	8012ebc <LoRaMacConfirmQueueIsCmdActive>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d019      	beq.n	800e974 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e940:	4b0e      	ldr	r3, [pc, #56]	@ (800e97c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e942:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e946:	f003 0301 	and.w	r3, r3, #1
 800e94a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d111      	bne.n	800e974 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e950:	4b0a      	ldr	r3, [pc, #40]	@ (800e97c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e952:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e956:	f003 0304 	and.w	r3, r3, #4
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d009      	beq.n	800e974 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e960:	4b06      	ldr	r3, [pc, #24]	@ (800e97c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e962:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e966:	f023 0302 	bic.w	r3, r3, #2
 800e96a:	4a04      	ldr	r2, [pc, #16]	@ (800e97c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e96c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800e970:	2301      	movs	r3, #1
 800e972:	e000      	b.n	800e976 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e974:	2300      	movs	r3, #0
}
 800e976:	4618      	mov	r0, r3
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	200007f4 	.word	0x200007f4

0800e980 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800e980:	b480      	push	{r7}
 800e982:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e984:	4b0d      	ldr	r3, [pc, #52]	@ (800e9bc <LoRaMacCheckForRxAbort+0x3c>)
 800e986:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e98a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00f      	beq.n	800e9b2 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e992:	4b0a      	ldr	r3, [pc, #40]	@ (800e9bc <LoRaMacCheckForRxAbort+0x3c>)
 800e994:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e998:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e99c:	4a07      	ldr	r2, [pc, #28]	@ (800e9bc <LoRaMacCheckForRxAbort+0x3c>)
 800e99e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e9a2:	4b06      	ldr	r3, [pc, #24]	@ (800e9bc <LoRaMacCheckForRxAbort+0x3c>)
 800e9a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e9a8:	f023 0302 	bic.w	r3, r3, #2
 800e9ac:	4a03      	ldr	r2, [pc, #12]	@ (800e9bc <LoRaMacCheckForRxAbort+0x3c>)
 800e9ae:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800e9b2:	bf00      	nop
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bc80      	pop	{r7}
 800e9b8:	4770      	bx	lr
 800e9ba:	bf00      	nop
 800e9bc:	200007f4 	.word	0x200007f4

0800e9c0 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e9d0:	4b50      	ldr	r3, [pc, #320]	@ (800eb14 <LoRaMacHandleNvm+0x154>)
 800e9d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	f040 8098 	bne.w	800eb0c <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2124      	movs	r1, #36	@ 0x24
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f008 f86b 	bl	8016abc <Crc32>
 800e9e6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9ec:	68ba      	ldr	r2, [r7, #8]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d006      	beq.n	800ea00 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	68ba      	ldr	r2, [r7, #8]
 800e9f6:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e9f8:	89fb      	ldrh	r3, [r7, #14]
 800e9fa:	f043 0301 	orr.w	r3, r3, #1
 800e9fe:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	3328      	adds	r3, #40	@ 0x28
 800ea04:	211c      	movs	r1, #28
 800ea06:	4618      	mov	r0, r3
 800ea08:	f008 f858 	bl	8016abc <Crc32>
 800ea0c:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea12:	68ba      	ldr	r2, [r7, #8]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d006      	beq.n	800ea26 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	68ba      	ldr	r2, [r7, #8]
 800ea1c:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800ea1e:	89fb      	ldrh	r3, [r7, #14]
 800ea20:	f043 0302 	orr.w	r3, r3, #2
 800ea24:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	3348      	adds	r3, #72	@ 0x48
 800ea2a:	21fc      	movs	r1, #252	@ 0xfc
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f008 f845 	bl	8016abc <Crc32>
 800ea32:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800ea3a:	68ba      	ldr	r2, [r7, #8]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d007      	beq.n	800ea50 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	68ba      	ldr	r2, [r7, #8]
 800ea44:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ea48:	89fb      	ldrh	r3, [r7, #14]
 800ea4a:	f043 0304 	orr.w	r3, r3, #4
 800ea4e:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800ea56:	21d4      	movs	r1, #212	@ 0xd4
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f008 f82f 	bl	8016abc <Crc32>
 800ea5e:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800ea66:	68ba      	ldr	r2, [r7, #8]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d007      	beq.n	800ea7c <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	68ba      	ldr	r2, [r7, #8]
 800ea70:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ea74:	89fb      	ldrh	r3, [r7, #14]
 800ea76:	f043 0308 	orr.w	r3, r3, #8
 800ea7a:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800ea82:	2190      	movs	r1, #144	@ 0x90
 800ea84:	4618      	mov	r0, r3
 800ea86:	f008 f819 	bl	8016abc <Crc32>
 800ea8a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800ea92:	68ba      	ldr	r2, [r7, #8]
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d007      	beq.n	800eaa8 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	68ba      	ldr	r2, [r7, #8]
 800ea9c:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800eaa0:	89fb      	ldrh	r3, [r7, #14]
 800eaa2:	f043 0310 	orr.w	r3, r3, #16
 800eaa6:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 800eaae:	f44f 6194 	mov.w	r1, #1184	@ 0x4a0
 800eab2:	4618      	mov	r0, r3
 800eab4:	f008 f802 	bl	8016abc <Crc32>
 800eab8:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8d3 3754 	ldr.w	r3, [r3, #1876]	@ 0x754
 800eac0:	68ba      	ldr	r2, [r7, #8]
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d007      	beq.n	800ead6 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	68ba      	ldr	r2, [r7, #8]
 800eaca:	f8c3 2754 	str.w	r2, [r3, #1876]	@ 0x754
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800eace:	89fb      	ldrh	r3, [r7, #14]
 800ead0:	f043 0320 	orr.w	r3, r3, #32
 800ead4:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f503 63eb 	add.w	r3, r3, #1880	@ 0x758
 800eadc:	2114      	movs	r1, #20
 800eade:	4618      	mov	r0, r3
 800eae0:	f007 ffec 	bl	8016abc <Crc32>
 800eae4:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8d3 376c 	ldr.w	r3, [r3, #1900]	@ 0x76c
 800eaec:	68ba      	ldr	r2, [r7, #8]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d007      	beq.n	800eb02 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	68ba      	ldr	r2, [r7, #8]
 800eaf6:	f8c3 276c 	str.w	r2, [r3, #1900]	@ 0x76c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800eafa:	89fb      	ldrh	r3, [r7, #14]
 800eafc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb00:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800eb02:	89fb      	ldrh	r3, [r7, #14]
 800eb04:	4618      	mov	r0, r3
 800eb06:	f001 ff5f 	bl	80109c8 <CallNvmDataChangeCallback>
 800eb0a:	e000      	b.n	800eb0e <LoRaMacHandleNvm+0x14e>
        return;
 800eb0c:	bf00      	nop
}
 800eb0e:	3710      	adds	r7, #16
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	200007f4 	.word	0x200007f4

0800eb18 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800eb22:	f7ff fd3d 	bl	800e5a0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800eb26:	f003 fd6a 	bl	80125fe <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800eb2a:	4b25      	ldr	r3, [pc, #148]	@ (800ebc0 <LoRaMacProcess+0xa8>)
 800eb2c:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800eb30:	f003 0310 	and.w	r3, r3, #16
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d023      	beq.n	800eb82 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800eb3a:	2000      	movs	r0, #0
 800eb3c:	f7ff fda4 	bl	800e688 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800eb40:	f7ff ff1e 	bl	800e980 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800eb44:	f001 ffd0 	bl	8010ae8 <IsRequestPending>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d006      	beq.n	800eb5c <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800eb4e:	f7ff feef 	bl	800e930 <LoRaMacCheckForBeaconAcquisition>
 800eb52:	4603      	mov	r3, r0
 800eb54:	461a      	mov	r2, r3
 800eb56:	79fb      	ldrb	r3, [r7, #7]
 800eb58:	4313      	orrs	r3, r2
 800eb5a:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800eb5c:	79fb      	ldrb	r3, [r7, #7]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d103      	bne.n	800eb6a <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800eb62:	f7ff fea9 	bl	800e8b8 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800eb66:	f7ff fe39 	bl	800e7dc <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800eb6a:	f7ff fd9d 	bl	800e6a8 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800eb6e:	2001      	movs	r0, #1
 800eb70:	f7ff fd8a 	bl	800e688 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800eb74:	4a12      	ldr	r2, [pc, #72]	@ (800ebc0 <LoRaMacProcess+0xa8>)
 800eb76:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800eb7a:	f043 0320 	orr.w	r3, r3, #32
 800eb7e:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
    LoRaMacHandleIndicationEvents( );
 800eb82:	f7ff fdf3 	bl	800e76c <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800eb86:	4b0e      	ldr	r3, [pc, #56]	@ (800ebc0 <LoRaMacProcess+0xa8>)
 800eb88:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800eb8c:	2b02      	cmp	r3, #2
 800eb8e:	d101      	bne.n	800eb94 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800eb90:	f001 fbc8 	bl	8010324 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800eb94:	4b0a      	ldr	r3, [pc, #40]	@ (800ebc0 <LoRaMacProcess+0xa8>)
 800eb96:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800eb9a:	f003 0320 	and.w	r3, r3, #32
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d009      	beq.n	800ebb8 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800eba4:	4a06      	ldr	r2, [pc, #24]	@ (800ebc0 <LoRaMacProcess+0xa8>)
 800eba6:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ebaa:	f36f 1345 	bfc	r3, #5, #1
 800ebae:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        LoRaMacHandleNvm( &Nvm );
 800ebb2:	4804      	ldr	r0, [pc, #16]	@ (800ebc4 <LoRaMacProcess+0xac>)
 800ebb4:	f7ff ff04 	bl	800e9c0 <LoRaMacHandleNvm>
    }
}
 800ebb8:	bf00      	nop
 800ebba:	3708      	adds	r7, #8
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}
 800ebc0:	200007f4 	.word	0x200007f4
 800ebc4:	20000cfc 	.word	0x20000cfc

0800ebc8 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ebd0:	4817      	ldr	r0, [pc, #92]	@ (800ec30 <OnTxDelayedTimerEvent+0x68>)
 800ebd2:	f00c f8d1 	bl	801ad78 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ebd6:	4b17      	ldr	r3, [pc, #92]	@ (800ec34 <OnTxDelayedTimerEvent+0x6c>)
 800ebd8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ebdc:	f023 0320 	bic.w	r3, r3, #32
 800ebe0:	4a14      	ldr	r2, [pc, #80]	@ (800ec34 <OnTxDelayedTimerEvent+0x6c>)
 800ebe2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ebe6:	2001      	movs	r0, #1
 800ebe8:	f001 f8f4 	bl	800fdd4 <ScheduleTx>
 800ebec:	4603      	mov	r3, r0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d018      	beq.n	800ec24 <OnTxDelayedTimerEvent+0x5c>
 800ebf2:	2b0b      	cmp	r3, #11
 800ebf4:	d016      	beq.n	800ec24 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ebf6:	4b10      	ldr	r3, [pc, #64]	@ (800ec38 <OnTxDelayedTimerEvent+0x70>)
 800ebf8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800ebfc:	b2da      	uxtb	r2, r3
 800ebfe:	4b0d      	ldr	r3, [pc, #52]	@ (800ec34 <OnTxDelayedTimerEvent+0x6c>)
 800ec00:	f883 2436 	strb.w	r2, [r3, #1078]	@ 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800ec04:	4b0b      	ldr	r3, [pc, #44]	@ (800ec34 <OnTxDelayedTimerEvent+0x6c>)
 800ec06:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 800ec0a:	4b0a      	ldr	r3, [pc, #40]	@ (800ec34 <OnTxDelayedTimerEvent+0x6c>)
 800ec0c:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ec10:	4b08      	ldr	r3, [pc, #32]	@ (800ec34 <OnTxDelayedTimerEvent+0x6c>)
 800ec12:	2209      	movs	r2, #9
 800ec14:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ec18:	2009      	movs	r0, #9
 800ec1a:	f004 f91b 	bl	8012e54 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ec1e:	f001 fe81 	bl	8010924 <StopRetransmission>
            break;
 800ec22:	e000      	b.n	800ec26 <OnTxDelayedTimerEvent+0x5e>
            break;
 800ec24:	bf00      	nop
        }
    }
}
 800ec26:	bf00      	nop
 800ec28:	3708      	adds	r7, #8
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	20000b5c 	.word	0x20000b5c
 800ec34:	200007f4 	.word	0x200007f4
 800ec38:	20000cfc 	.word	0x20000cfc

0800ec3c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800ec44:	4b14      	ldr	r3, [pc, #80]	@ (800ec98 <OnRxWindow1TimerEvent+0x5c>)
 800ec46:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800ec4a:	4b13      	ldr	r3, [pc, #76]	@ (800ec98 <OnRxWindow1TimerEvent+0x5c>)
 800ec4c:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800ec50:	4b12      	ldr	r3, [pc, #72]	@ (800ec9c <OnRxWindow1TimerEvent+0x60>)
 800ec52:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800ec56:	b25a      	sxtb	r2, r3
 800ec58:	4b0f      	ldr	r3, [pc, #60]	@ (800ec98 <OnRxWindow1TimerEvent+0x5c>)
 800ec5a:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ec5e:	4b0f      	ldr	r3, [pc, #60]	@ (800ec9c <OnRxWindow1TimerEvent+0x60>)
 800ec60:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800ec64:	4b0c      	ldr	r3, [pc, #48]	@ (800ec98 <OnRxWindow1TimerEvent+0x5c>)
 800ec66:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800ec6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ec9c <OnRxWindow1TimerEvent+0x60>)
 800ec6c:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800ec70:	4b09      	ldr	r3, [pc, #36]	@ (800ec98 <OnRxWindow1TimerEvent+0x5c>)
 800ec72:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ec76:	4b08      	ldr	r3, [pc, #32]	@ (800ec98 <OnRxWindow1TimerEvent+0x5c>)
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ec7e:	4b06      	ldr	r3, [pc, #24]	@ (800ec98 <OnRxWindow1TimerEvent+0x5c>)
 800ec80:	2200      	movs	r2, #0
 800ec82:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ec86:	4906      	ldr	r1, [pc, #24]	@ (800eca0 <OnRxWindow1TimerEvent+0x64>)
 800ec88:	4806      	ldr	r0, [pc, #24]	@ (800eca4 <OnRxWindow1TimerEvent+0x68>)
 800ec8a:	f001 fb17 	bl	80102bc <RxWindowSetup>
}
 800ec8e:	bf00      	nop
 800ec90:	3708      	adds	r7, #8
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	200007f4 	.word	0x200007f4
 800ec9c:	20000cfc 	.word	0x20000cfc
 800eca0:	20000bac 	.word	0x20000bac
 800eca4:	20000b74 	.word	0x20000b74

0800eca8 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ecb0:	4b16      	ldr	r3, [pc, #88]	@ (800ed0c <OnRxWindow2TimerEvent+0x64>)
 800ecb2:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d023      	beq.n	800ed02 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ecba:	4b14      	ldr	r3, [pc, #80]	@ (800ed0c <OnRxWindow2TimerEvent+0x64>)
 800ecbc:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800ecc0:	4b12      	ldr	r3, [pc, #72]	@ (800ed0c <OnRxWindow2TimerEvent+0x64>)
 800ecc2:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ecc6:	4b12      	ldr	r3, [pc, #72]	@ (800ed10 <OnRxWindow2TimerEvent+0x68>)
 800ecc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecca:	4a10      	ldr	r2, [pc, #64]	@ (800ed0c <OnRxWindow2TimerEvent+0x64>)
 800eccc:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ecd0:	4b0f      	ldr	r3, [pc, #60]	@ (800ed10 <OnRxWindow2TimerEvent+0x68>)
 800ecd2:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800ecd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ed0c <OnRxWindow2TimerEvent+0x64>)
 800ecd8:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800ecdc:	4b0c      	ldr	r3, [pc, #48]	@ (800ed10 <OnRxWindow2TimerEvent+0x68>)
 800ecde:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800ece2:	4b0a      	ldr	r3, [pc, #40]	@ (800ed0c <OnRxWindow2TimerEvent+0x64>)
 800ece4:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ece8:	4b08      	ldr	r3, [pc, #32]	@ (800ed0c <OnRxWindow2TimerEvent+0x64>)
 800ecea:	2200      	movs	r2, #0
 800ecec:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ecf0:	4b06      	ldr	r3, [pc, #24]	@ (800ed0c <OnRxWindow2TimerEvent+0x64>)
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800ecf8:	4906      	ldr	r1, [pc, #24]	@ (800ed14 <OnRxWindow2TimerEvent+0x6c>)
 800ecfa:	4807      	ldr	r0, [pc, #28]	@ (800ed18 <OnRxWindow2TimerEvent+0x70>)
 800ecfc:	f001 fade 	bl	80102bc <RxWindowSetup>
 800ed00:	e000      	b.n	800ed04 <OnRxWindow2TimerEvent+0x5c>
        return;
 800ed02:	bf00      	nop
}
 800ed04:	3708      	adds	r7, #8
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	200007f4 	.word	0x200007f4
 800ed10:	20000cfc 	.word	0x20000cfc
 800ed14:	20000bc0 	.word	0x20000bc0
 800ed18:	20000b8c 	.word	0x20000b8c

0800ed1c <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800ed24:	480e      	ldr	r0, [pc, #56]	@ (800ed60 <OnAckTimeoutTimerEvent+0x44>)
 800ed26:	f00c f827 	bl	801ad78 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800ed2a:	4b0e      	ldr	r3, [pc, #56]	@ (800ed64 <OnAckTimeoutTimerEvent+0x48>)
 800ed2c:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d003      	beq.n	800ed3c <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800ed34:	4b0b      	ldr	r3, [pc, #44]	@ (800ed64 <OnAckTimeoutTimerEvent+0x48>)
 800ed36:	2201      	movs	r2, #1
 800ed38:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ed3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ed68 <OnAckTimeoutTimerEvent+0x4c>)
 800ed3e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ed42:	2b02      	cmp	r3, #2
 800ed44:	d106      	bne.n	800ed54 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ed46:	4a07      	ldr	r2, [pc, #28]	@ (800ed64 <OnAckTimeoutTimerEvent+0x48>)
 800ed48:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800ed4c:	f043 0310 	orr.w	r3, r3, #16
 800ed50:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
    OnMacProcessNotify( );
 800ed54:	f001 fe22 	bl	801099c <OnMacProcessNotify>
}
 800ed58:	bf00      	nop
 800ed5a:	3708      	adds	r7, #8
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	20000be8 	.word	0x20000be8
 800ed64:	200007f4 	.word	0x200007f4
 800ed68:	20000cfc 	.word	0x20000cfc

0800ed6c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b084      	sub	sp, #16
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60ba      	str	r2, [r7, #8]
 800ed74:	607b      	str	r3, [r7, #4]
 800ed76:	4603      	mov	r3, r0
 800ed78:	73fb      	strb	r3, [r7, #15]
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d005      	beq.n	800ed90 <GetFCntDown+0x24>
 800ed84:	69fb      	ldr	r3, [r7, #28]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d002      	beq.n	800ed90 <GetFCntDown+0x24>
 800ed8a:	6a3b      	ldr	r3, [r7, #32]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d101      	bne.n	800ed94 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ed90:	230a      	movs	r3, #10
 800ed92:	e029      	b.n	800ede8 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800ed94:	7bfb      	ldrb	r3, [r7, #15]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d016      	beq.n	800edc8 <GetFCntDown+0x5c>
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	d118      	bne.n	800edd0 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800ed9e:	79bb      	ldrb	r3, [r7, #6]
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d10d      	bne.n	800edc0 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800eda4:	7bbb      	ldrb	r3, [r7, #14]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d002      	beq.n	800edb0 <GetFCntDown+0x44>
 800edaa:	7bbb      	ldrb	r3, [r7, #14]
 800edac:	2b03      	cmp	r3, #3
 800edae:	d103      	bne.n	800edb8 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800edb0:	69fb      	ldr	r3, [r7, #28]
 800edb2:	2202      	movs	r2, #2
 800edb4:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800edb6:	e00d      	b.n	800edd4 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800edb8:	69fb      	ldr	r3, [r7, #28]
 800edba:	2201      	movs	r2, #1
 800edbc:	701a      	strb	r2, [r3, #0]
            break;
 800edbe:	e009      	b.n	800edd4 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800edc0:	69fb      	ldr	r3, [r7, #28]
 800edc2:	2203      	movs	r2, #3
 800edc4:	701a      	strb	r2, [r3, #0]
            break;
 800edc6:	e005      	b.n	800edd4 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	2204      	movs	r2, #4
 800edcc:	701a      	strb	r2, [r3, #0]
            break;
 800edce:	e001      	b.n	800edd4 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800edd0:	2305      	movs	r3, #5
 800edd2:	e009      	b.n	800ede8 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	7818      	ldrb	r0, [r3, #0]
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	89db      	ldrh	r3, [r3, #14]
 800eddc:	461a      	mov	r2, r3
 800edde:	8b39      	ldrh	r1, [r7, #24]
 800ede0:	6a3b      	ldr	r3, [r7, #32]
 800ede2:	f004 fc75 	bl	80136d0 <LoRaMacCryptoGetFCntDown>
 800ede6:	4603      	mov	r3, r0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3710      	adds	r7, #16
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800edf0:	b5b0      	push	{r4, r5, r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	4603      	mov	r3, r0
 800edf8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800edfa:	2303      	movs	r3, #3
 800edfc:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800edfe:	4b6d      	ldr	r3, [pc, #436]	@ (800efb4 <SwitchClass+0x1c4>)
 800ee00:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ee04:	2b02      	cmp	r3, #2
 800ee06:	f000 80b9 	beq.w	800ef7c <SwitchClass+0x18c>
 800ee0a:	2b02      	cmp	r3, #2
 800ee0c:	f300 80cc 	bgt.w	800efa8 <SwitchClass+0x1b8>
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d003      	beq.n	800ee1c <SwitchClass+0x2c>
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	f000 80a3 	beq.w	800ef60 <SwitchClass+0x170>
 800ee1a:	e0c5      	b.n	800efa8 <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800ee1c:	79fb      	ldrb	r3, [r7, #7]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d109      	bne.n	800ee36 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ee22:	4b64      	ldr	r3, [pc, #400]	@ (800efb4 <SwitchClass+0x1c4>)
 800ee24:	4a63      	ldr	r2, [pc, #396]	@ (800efb4 <SwitchClass+0x1c4>)
 800ee26:	3374      	adds	r3, #116	@ 0x74
 800ee28:	326c      	adds	r2, #108	@ 0x6c
 800ee2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee2e:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800ee32:	2300      	movs	r3, #0
 800ee34:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800ee36:	79fb      	ldrb	r3, [r7, #7]
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	d10c      	bne.n	800ee56 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ee3c:	79fb      	ldrb	r3, [r7, #7]
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f003 fb7f 	bl	8012542 <LoRaMacClassBSwitchClass>
 800ee44:	4603      	mov	r3, r0
 800ee46:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800ee48:	7bfb      	ldrb	r3, [r7, #15]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d103      	bne.n	800ee56 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ee4e:	4a59      	ldr	r2, [pc, #356]	@ (800efb4 <SwitchClass+0x1c4>)
 800ee50:	79fb      	ldrb	r3, [r7, #7]
 800ee52:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800ee56:	79fb      	ldrb	r3, [r7, #7]
 800ee58:	2b02      	cmp	r3, #2
 800ee5a:	f040 80a0 	bne.w	800ef9e <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ee5e:	4a55      	ldr	r2, [pc, #340]	@ (800efb4 <SwitchClass+0x1c4>)
 800ee60:	79fb      	ldrb	r3, [r7, #7]
 800ee62:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ee66:	4a54      	ldr	r2, [pc, #336]	@ (800efb8 <SwitchClass+0x1c8>)
 800ee68:	4b53      	ldr	r3, [pc, #332]	@ (800efb8 <SwitchClass+0x1c8>)
 800ee6a:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 800ee6e:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 800ee72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee76:	682b      	ldr	r3, [r5, #0]
 800ee78:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ee7a:	4b4f      	ldr	r3, [pc, #316]	@ (800efb8 <SwitchClass+0x1c8>)
 800ee7c:	2202      	movs	r2, #2
 800ee7e:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ee82:	2300      	movs	r3, #0
 800ee84:	73bb      	strb	r3, [r7, #14]
 800ee86:	e05b      	b.n	800ef40 <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800ee88:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800ee8c:	4949      	ldr	r1, [pc, #292]	@ (800efb4 <SwitchClass+0x1c4>)
 800ee8e:	4613      	mov	r3, r2
 800ee90:	005b      	lsls	r3, r3, #1
 800ee92:	4413      	add	r3, r2
 800ee94:	011b      	lsls	r3, r3, #4
 800ee96:	440b      	add	r3, r1
 800ee98:	33e9      	adds	r3, #233	@ 0xe9
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d049      	beq.n	800ef34 <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800eea0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800eea4:	4943      	ldr	r1, [pc, #268]	@ (800efb4 <SwitchClass+0x1c4>)
 800eea6:	4613      	mov	r3, r2
 800eea8:	005b      	lsls	r3, r3, #1
 800eeaa:	4413      	add	r3, r2
 800eeac:	011b      	lsls	r3, r3, #4
 800eeae:	440b      	add	r3, r1
 800eeb0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800eeb4:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800eeb6:	2b02      	cmp	r3, #2
 800eeb8:	d13c      	bne.n	800ef34 <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800eeba:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800eebe:	493d      	ldr	r1, [pc, #244]	@ (800efb4 <SwitchClass+0x1c4>)
 800eec0:	4613      	mov	r3, r2
 800eec2:	005b      	lsls	r3, r3, #1
 800eec4:	4413      	add	r3, r2
 800eec6:	011b      	lsls	r3, r3, #4
 800eec8:	440b      	add	r3, r1
 800eeca:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	4a38      	ldr	r2, [pc, #224]	@ (800efb4 <SwitchClass+0x1c4>)
 800eed2:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800eed4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800eed8:	4936      	ldr	r1, [pc, #216]	@ (800efb4 <SwitchClass+0x1c4>)
 800eeda:	4613      	mov	r3, r2
 800eedc:	005b      	lsls	r3, r3, #1
 800eede:	4413      	add	r3, r2
 800eee0:	011b      	lsls	r3, r3, #4
 800eee2:	440b      	add	r3, r1
 800eee4:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800eee8:	f993 3000 	ldrsb.w	r3, [r3]
 800eeec:	b2da      	uxtb	r2, r3
 800eeee:	4b31      	ldr	r3, [pc, #196]	@ (800efb4 <SwitchClass+0x1c4>)
 800eef0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800eef4:	4b30      	ldr	r3, [pc, #192]	@ (800efb8 <SwitchClass+0x1c8>)
 800eef6:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800eefa:	4b2f      	ldr	r3, [pc, #188]	@ (800efb8 <SwitchClass+0x1c8>)
 800eefc:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ef00:	4b2c      	ldr	r3, [pc, #176]	@ (800efb4 <SwitchClass+0x1c4>)
 800ef02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef04:	4a2c      	ldr	r2, [pc, #176]	@ (800efb8 <SwitchClass+0x1c8>)
 800ef06:	f8c2 33e4 	str.w	r3, [r2, #996]	@ 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ef0a:	4b2a      	ldr	r3, [pc, #168]	@ (800efb4 <SwitchClass+0x1c4>)
 800ef0c:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800ef10:	4b29      	ldr	r3, [pc, #164]	@ (800efb8 <SwitchClass+0x1c8>)
 800ef12:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800ef16:	4b27      	ldr	r3, [pc, #156]	@ (800efb4 <SwitchClass+0x1c4>)
 800ef18:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800ef1c:	4b26      	ldr	r3, [pc, #152]	@ (800efb8 <SwitchClass+0x1c8>)
 800ef1e:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ef22:	4b25      	ldr	r3, [pc, #148]	@ (800efb8 <SwitchClass+0x1c8>)
 800ef24:	2203      	movs	r2, #3
 800ef26:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800ef2a:	4b23      	ldr	r3, [pc, #140]	@ (800efb8 <SwitchClass+0x1c8>)
 800ef2c:	2201      	movs	r2, #1
 800ef2e:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
                        break;
 800ef32:	e009      	b.n	800ef48 <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ef34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	73bb      	strb	r3, [r7, #14]
 800ef40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	dd9f      	ble.n	800ee88 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800ef48:	4b1b      	ldr	r3, [pc, #108]	@ (800efb8 <SwitchClass+0x1c8>)
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800ef50:	4b1a      	ldr	r3, [pc, #104]	@ (800efbc <SwitchClass+0x1cc>)
 800ef52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef54:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800ef56:	f001 f9e5 	bl	8010324 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800ef5e:	e01e      	b.n	800ef9e <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800ef60:	79fb      	ldrb	r3, [r7, #7]
 800ef62:	4618      	mov	r0, r3
 800ef64:	f003 faed 	bl	8012542 <LoRaMacClassBSwitchClass>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800ef6c:	7bfb      	ldrb	r3, [r7, #15]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d117      	bne.n	800efa2 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ef72:	4a10      	ldr	r2, [pc, #64]	@ (800efb4 <SwitchClass+0x1c4>)
 800ef74:	79fb      	ldrb	r3, [r7, #7]
 800ef76:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 800ef7a:	e012      	b.n	800efa2 <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800ef7c:	79fb      	ldrb	r3, [r7, #7]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d111      	bne.n	800efa6 <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800ef82:	4b0d      	ldr	r3, [pc, #52]	@ (800efb8 <SwitchClass+0x1c8>)
 800ef84:	2206      	movs	r2, #6
 800ef86:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ef8a:	4a0a      	ldr	r2, [pc, #40]	@ (800efb4 <SwitchClass+0x1c4>)
 800ef8c:	79fb      	ldrb	r3, [r7, #7]
 800ef8e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ef92:	4b0a      	ldr	r3, [pc, #40]	@ (800efbc <SwitchClass+0x1cc>)
 800ef94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef96:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800ef9c:	e003      	b.n	800efa6 <SwitchClass+0x1b6>
            break;
 800ef9e:	bf00      	nop
 800efa0:	e002      	b.n	800efa8 <SwitchClass+0x1b8>
            break;
 800efa2:	bf00      	nop
 800efa4:	e000      	b.n	800efa8 <SwitchClass+0x1b8>
            break;
 800efa6:	bf00      	nop
        }
    }

    return status;
 800efa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3710      	adds	r7, #16
 800efae:	46bd      	mov	sp, r7
 800efb0:	bdb0      	pop	{r4, r5, r7, pc}
 800efb2:	bf00      	nop
 800efb4:	20000cfc 	.word	0x20000cfc
 800efb8:	200007f4 	.word	0x200007f4
 800efbc:	0801eb10 	.word	0x0801eb10

0800efc0 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b086      	sub	sp, #24
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	4603      	mov	r3, r0
 800efc8:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800efca:	4b10      	ldr	r3, [pc, #64]	@ (800f00c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800efcc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800efd0:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800efd2:	79fb      	ldrb	r3, [r7, #7]
 800efd4:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800efd6:	230d      	movs	r3, #13
 800efd8:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800efda:	4b0c      	ldr	r3, [pc, #48]	@ (800f00c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800efdc:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d001      	beq.n	800efe8 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800efe4:	230e      	movs	r3, #14
 800efe6:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800efe8:	4b08      	ldr	r3, [pc, #32]	@ (800f00c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800efea:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800efee:	f107 0210 	add.w	r2, r7, #16
 800eff2:	4611      	mov	r1, r2
 800eff4:	4618      	mov	r0, r3
 800eff6:	f005 fa00 	bl	80143fa <RegionGetPhyParam>
 800effa:	4603      	mov	r3, r0
 800effc:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	b2db      	uxtb	r3, r3
}
 800f002:	4618      	mov	r0, r3
 800f004:	3718      	adds	r7, #24
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	20000cfc 	.word	0x20000cfc

0800f010 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	4603      	mov	r3, r0
 800f018:	71fb      	strb	r3, [r7, #7]
 800f01a:	460b      	mov	r3, r1
 800f01c:	71bb      	strb	r3, [r7, #6]
 800f01e:	4613      	mov	r3, r2
 800f020:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800f022:	2300      	movs	r3, #0
 800f024:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f026:	2300      	movs	r3, #0
 800f028:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f02a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f02e:	4618      	mov	r0, r3
 800f030:	f7ff ffc6 	bl	800efc0 <GetMaxAppPayloadWithoutFOptsLength>
 800f034:	4603      	mov	r3, r0
 800f036:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f038:	79fb      	ldrb	r3, [r7, #7]
 800f03a:	b29a      	uxth	r2, r3
 800f03c:	797b      	ldrb	r3, [r7, #5]
 800f03e:	b29b      	uxth	r3, r3
 800f040:	4413      	add	r3, r2
 800f042:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f044:	89ba      	ldrh	r2, [r7, #12]
 800f046:	89fb      	ldrh	r3, [r7, #14]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d804      	bhi.n	800f056 <ValidatePayloadLength+0x46>
 800f04c:	89bb      	ldrh	r3, [r7, #12]
 800f04e:	2bff      	cmp	r3, #255	@ 0xff
 800f050:	d801      	bhi.n	800f056 <ValidatePayloadLength+0x46>
    {
        return true;
 800f052:	2301      	movs	r3, #1
 800f054:	e000      	b.n	800f058 <ValidatePayloadLength+0x48>
    }
    return false;
 800f056:	2300      	movs	r3, #0
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3710      	adds	r7, #16
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f060:	b590      	push	{r4, r7, lr}
 800f062:	b0a5      	sub	sp, #148	@ 0x94
 800f064:	af02      	add	r7, sp, #8
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	4608      	mov	r0, r1
 800f06a:	4611      	mov	r1, r2
 800f06c:	461a      	mov	r2, r3
 800f06e:	4603      	mov	r3, r0
 800f070:	70fb      	strb	r3, [r7, #3]
 800f072:	460b      	mov	r3, r1
 800f074:	70bb      	strb	r3, [r7, #2]
 800f076:	4613      	mov	r3, r2
 800f078:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f07a:	2300      	movs	r3, #0
 800f07c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800f080:	2300      	movs	r3, #0
 800f082:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f086:	2300      	movs	r3, #0
 800f088:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f08c:	f000 bc7d 	b.w	800f98a <ProcessMacCommands+0x92a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f090:	78fb      	ldrb	r3, [r7, #3]
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	4413      	add	r3, r2
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	4618      	mov	r0, r3
 800f09a:	f003 fd37 	bl	8012b0c <LoRaMacCommandsGetCmdSize>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	78fb      	ldrb	r3, [r7, #3]
 800f0a4:	441a      	add	r2, r3
 800f0a6:	78bb      	ldrb	r3, [r7, #2]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	f300 8474 	bgt.w	800f996 <ProcessMacCommands+0x936>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f0ae:	78fb      	ldrb	r3, [r7, #3]
 800f0b0:	1c5a      	adds	r2, r3, #1
 800f0b2:	70fa      	strb	r2, [r7, #3]
 800f0b4:	461a      	mov	r2, r3
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	3b02      	subs	r3, #2
 800f0be:	2b11      	cmp	r3, #17
 800f0c0:	f200 846b 	bhi.w	800f99a <ProcessMacCommands+0x93a>
 800f0c4:	a201      	add	r2, pc, #4	@ (adr r2, 800f0cc <ProcessMacCommands+0x6c>)
 800f0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ca:	bf00      	nop
 800f0cc:	0800f115 	.word	0x0800f115
 800f0d0:	0800f157 	.word	0x0800f157
 800f0d4:	0800f273 	.word	0x0800f273
 800f0d8:	0800f2b1 	.word	0x0800f2b1
 800f0dc:	0800f39b 	.word	0x0800f39b
 800f0e0:	0800f3f9 	.word	0x0800f3f9
 800f0e4:	0800f4b5 	.word	0x0800f4b5
 800f0e8:	0800f50b 	.word	0x0800f50b
 800f0ec:	0800f5f1 	.word	0x0800f5f1
 800f0f0:	0800f99b 	.word	0x0800f99b
 800f0f4:	0800f99b 	.word	0x0800f99b
 800f0f8:	0800f695 	.word	0x0800f695
 800f0fc:	0800f99b 	.word	0x0800f99b
 800f100:	0800f99b 	.word	0x0800f99b
 800f104:	0800f7ab 	.word	0x0800f7ab
 800f108:	0800f7df 	.word	0x0800f7df
 800f10c:	0800f86f 	.word	0x0800f86f
 800f110:	0800f8e7 	.word	0x0800f8e7
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f114:	2005      	movs	r0, #5
 800f116:	f003 fed1 	bl	8012ebc <LoRaMacConfirmQueueIsCmdActive>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f000 8425 	beq.w	800f96c <ProcessMacCommands+0x90c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f122:	2105      	movs	r1, #5
 800f124:	2000      	movs	r0, #0
 800f126:	f003 fe3d 	bl	8012da4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f12a:	78fb      	ldrb	r3, [r7, #3]
 800f12c:	1c5a      	adds	r2, r3, #1
 800f12e:	70fa      	strb	r2, [r7, #3]
 800f130:	461a      	mov	r2, r3
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4413      	add	r3, r2
 800f136:	781a      	ldrb	r2, [r3, #0]
 800f138:	4bac      	ldr	r3, [pc, #688]	@ (800f3ec <ProcessMacCommands+0x38c>)
 800f13a:	f883 2450 	strb.w	r2, [r3, #1104]	@ 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f13e:	78fb      	ldrb	r3, [r7, #3]
 800f140:	1c5a      	adds	r2, r3, #1
 800f142:	70fa      	strb	r2, [r7, #3]
 800f144:	461a      	mov	r2, r3
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	4413      	add	r3, r2
 800f14a:	781a      	ldrb	r2, [r3, #0]
 800f14c:	4ba7      	ldr	r3, [pc, #668]	@ (800f3ec <ProcessMacCommands+0x38c>)
 800f14e:	f883 2451 	strb.w	r2, [r3, #1105]	@ 0x451
                }
                break;
 800f152:	f000 bc0b 	b.w	800f96c <ProcessMacCommands+0x90c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f156:	2300      	movs	r3, #0
 800f158:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f15c:	2300      	movs	r3, #0
 800f15e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800f162:	2300      	movs	r3, #0
 800f164:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f168:	2300      	movs	r3, #0
 800f16a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 800f16e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f172:	f083 0301 	eor.w	r3, r3, #1
 800f176:	b2db      	uxtb	r3, r3
 800f178:	2b00      	cmp	r3, #0
 800f17a:	f000 83f9 	beq.w	800f970 <ProcessMacCommands+0x910>
                {
                    adrBlockFound = true;
 800f17e:	2301      	movs	r3, #1
 800f180:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800f184:	78fb      	ldrb	r3, [r7, #3]
 800f186:	3b01      	subs	r3, #1
 800f188:	687a      	ldr	r2, [r7, #4]
 800f18a:	4413      	add	r3, r2
 800f18c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f18e:	78ba      	ldrb	r2, [r7, #2]
 800f190:	78fb      	ldrb	r3, [r7, #3]
 800f192:	1ad3      	subs	r3, r2, r3
 800f194:	b2db      	uxtb	r3, r3
 800f196:	3301      	adds	r3, #1
 800f198:	b2db      	uxtb	r3, r3
 800f19a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f19e:	4b94      	ldr	r3, [pc, #592]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f1a0:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f1a4:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f1a8:	4b91      	ldr	r3, [pc, #580]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f1aa:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f1ae:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f1b2:	4b8f      	ldr	r3, [pc, #572]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f1b4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f1b8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f1bc:	4b8c      	ldr	r3, [pc, #560]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f1be:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f1c2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f1c6:	4b8a      	ldr	r3, [pc, #552]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f1c8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f1cc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f1d0:	4b87      	ldr	r3, [pc, #540]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f1d2:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800f1d6:	65bb      	str	r3, [r7, #88]	@ 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f1d8:	4b85      	ldr	r3, [pc, #532]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f1da:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f1de:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800f1e2:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800f1e6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f1ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800f1ee:	9301      	str	r3, [sp, #4]
 800f1f0:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800f1f4:	9300      	str	r3, [sp, #0]
 800f1f6:	4623      	mov	r3, r4
 800f1f8:	f005 f9bc 	bl	8014574 <RegionLinkAdrReq>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800f202:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f206:	f003 0307 	and.w	r3, r3, #7
 800f20a:	2b07      	cmp	r3, #7
 800f20c:	d10e      	bne.n	800f22c <ProcessMacCommands+0x1cc>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f20e:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800f212:	4b77      	ldr	r3, [pc, #476]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f214:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f218:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800f21c:	4b74      	ldr	r3, [pc, #464]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f21e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f222:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800f226:	4b72      	ldr	r3, [pc, #456]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f228:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f22c:	2300      	movs	r3, #0
 800f22e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f232:	e00b      	b.n	800f24c <ProcessMacCommands+0x1ec>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f234:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800f238:	2201      	movs	r2, #1
 800f23a:	4619      	mov	r1, r3
 800f23c:	2003      	movs	r0, #3
 800f23e:	f003 fb05 	bl	801284c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f242:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800f246:	3301      	adds	r3, #1
 800f248:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f24c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800f250:	4a68      	ldr	r2, [pc, #416]	@ (800f3f4 <ProcessMacCommands+0x394>)
 800f252:	fba2 2303 	umull	r2, r3, r2, r3
 800f256:	089b      	lsrs	r3, r3, #2
 800f258:	b2db      	uxtb	r3, r3
 800f25a:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800f25e:	429a      	cmp	r2, r3
 800f260:	d3e8      	bcc.n	800f234 <ProcessMacCommands+0x1d4>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800f262:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f266:	78fb      	ldrb	r3, [r7, #3]
 800f268:	4413      	add	r3, r2
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	3b01      	subs	r3, #1
 800f26e:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800f270:	e37e      	b.n	800f970 <ProcessMacCommands+0x910>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f272:	78fb      	ldrb	r3, [r7, #3]
 800f274:	1c5a      	adds	r2, r3, #1
 800f276:	70fa      	strb	r2, [r7, #3]
 800f278:	461a      	mov	r2, r3
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	4413      	add	r3, r2
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	f003 030f 	and.w	r3, r3, #15
 800f284:	b2da      	uxtb	r2, r3
 800f286:	4b5a      	ldr	r3, [pc, #360]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f288:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f28c:	4b58      	ldr	r3, [pc, #352]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f28e:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800f292:	461a      	mov	r2, r3
 800f294:	2301      	movs	r3, #1
 800f296:	4093      	lsls	r3, r2
 800f298:	b29a      	uxth	r2, r3
 800f29a:	4b55      	ldr	r3, [pc, #340]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f29c:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f2a0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	2004      	movs	r0, #4
 800f2aa:	f003 facf 	bl	801284c <LoRaMacCommandsAddCmd>
                break;
 800f2ae:	e36c      	b.n	800f98a <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f2b0:	2307      	movs	r3, #7
 800f2b2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f2b6:	78fb      	ldrb	r3, [r7, #3]
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	091b      	lsrs	r3, r3, #4
 800f2c0:	b2db      	uxtb	r3, r3
 800f2c2:	b25b      	sxtb	r3, r3
 800f2c4:	f003 0307 	and.w	r3, r3, #7
 800f2c8:	b25b      	sxtb	r3, r3
 800f2ca:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f2ce:	78fb      	ldrb	r3, [r7, #3]
 800f2d0:	687a      	ldr	r2, [r7, #4]
 800f2d2:	4413      	add	r3, r2
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	b25b      	sxtb	r3, r3
 800f2d8:	f003 030f 	and.w	r3, r3, #15
 800f2dc:	b25b      	sxtb	r3, r3
 800f2de:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800f2e2:	78fb      	ldrb	r3, [r7, #3]
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	70fb      	strb	r3, [r7, #3]
                    // Keep the current datarate
                    rxParamSetupReq.Datarate = Nvm.MacGroup2.MacParams.Rx2Channel.Datarate;
                }
#endif

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f2e8:	78fb      	ldrb	r3, [r7, #3]
 800f2ea:	1c5a      	adds	r2, r3, #1
 800f2ec:	70fa      	strb	r2, [r7, #3]
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	4413      	add	r3, r2
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f2f8:	78fb      	ldrb	r3, [r7, #3]
 800f2fa:	1c5a      	adds	r2, r3, #1
 800f2fc:	70fa      	strb	r2, [r7, #3]
 800f2fe:	461a      	mov	r2, r3
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	4413      	add	r3, r2
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	021a      	lsls	r2, r3, #8
 800f308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f30a:	4313      	orrs	r3, r2
 800f30c:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f30e:	78fb      	ldrb	r3, [r7, #3]
 800f310:	1c5a      	adds	r2, r3, #1
 800f312:	70fa      	strb	r2, [r7, #3]
 800f314:	461a      	mov	r2, r3
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4413      	add	r3, r2
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	041a      	lsls	r2, r3, #16
 800f31e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f320:	4313      	orrs	r3, r2
 800f322:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800f324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f326:	2264      	movs	r2, #100	@ 0x64
 800f328:	fb02 f303 	mul.w	r3, r2, r3
 800f32c:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f32e:	4b30      	ldr	r3, [pc, #192]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f330:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f334:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800f338:	4611      	mov	r1, r2
 800f33a:	4618      	mov	r0, r3
 800f33c:	f005 f934 	bl	80145a8 <RegionRxParamSetupReq>
 800f340:	4603      	mov	r3, r0
 800f342:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f346:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f34a:	f003 0307 	and.w	r3, r3, #7
 800f34e:	2b07      	cmp	r3, #7
 800f350:	d117      	bne.n	800f382 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f352:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800f356:	b2da      	uxtb	r2, r3
 800f358:	4b25      	ldr	r3, [pc, #148]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f35a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f35e:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800f362:	b2da      	uxtb	r2, r3
 800f364:	4b22      	ldr	r3, [pc, #136]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f366:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f36a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f36c:	4a20      	ldr	r2, [pc, #128]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f36e:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f372:	4a1f      	ldr	r2, [pc, #124]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f374:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f376:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800f37a:	b2da      	uxtb	r2, r3
 800f37c:	4b1c      	ldr	r3, [pc, #112]	@ (800f3f0 <ProcessMacCommands+0x390>)
 800f37e:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 800f382:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f386:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f38a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f38e:	2201      	movs	r2, #1
 800f390:	4619      	mov	r1, r3
 800f392:	2005      	movs	r0, #5
 800f394:	f003 fa5a 	bl	801284c <LoRaMacCommandsAddCmd>
                break;
 800f398:	e2f7      	b.n	800f98a <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f39a:	23ff      	movs	r3, #255	@ 0xff
 800f39c:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f3a0:	4b12      	ldr	r3, [pc, #72]	@ (800f3ec <ProcessMacCommands+0x38c>)
 800f3a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d00d      	beq.n	800f3c6 <ProcessMacCommands+0x366>
 800f3aa:	4b10      	ldr	r3, [pc, #64]	@ (800f3ec <ProcessMacCommands+0x38c>)
 800f3ac:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d007      	beq.n	800f3c6 <ProcessMacCommands+0x366>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f3ec <ProcessMacCommands+0x38c>)
 800f3b8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	4798      	blx	r3
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f3c6:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800f3ca:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f3ce:	787b      	ldrb	r3, [r7, #1]
 800f3d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f3d4:	b2db      	uxtb	r3, r3
 800f3d6:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f3da:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f3de:	2202      	movs	r2, #2
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	2006      	movs	r0, #6
 800f3e4:	f003 fa32 	bl	801284c <LoRaMacCommandsAddCmd>
                break;
 800f3e8:	e2cf      	b.n	800f98a <ProcessMacCommands+0x92a>
 800f3ea:	bf00      	nop
 800f3ec:	200007f4 	.word	0x200007f4
 800f3f0:	20000cfc 	.word	0x20000cfc
 800f3f4:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f3f8:	2303      	movs	r3, #3
 800f3fa:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f3fe:	78fb      	ldrb	r3, [r7, #3]
 800f400:	1c5a      	adds	r2, r3, #1
 800f402:	70fa      	strb	r2, [r7, #3]
 800f404:	461a      	mov	r2, r3
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4413      	add	r3, r2
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	b25b      	sxtb	r3, r3
 800f40e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800f412:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f416:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f418:	78fb      	ldrb	r3, [r7, #3]
 800f41a:	1c5a      	adds	r2, r3, #1
 800f41c:	70fa      	strb	r2, [r7, #3]
 800f41e:	461a      	mov	r2, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	4413      	add	r3, r2
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f428:	78fb      	ldrb	r3, [r7, #3]
 800f42a:	1c5a      	adds	r2, r3, #1
 800f42c:	70fa      	strb	r2, [r7, #3]
 800f42e:	461a      	mov	r2, r3
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	4413      	add	r3, r2
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	021a      	lsls	r2, r3, #8
 800f438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f43a:	4313      	orrs	r3, r2
 800f43c:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f43e:	78fb      	ldrb	r3, [r7, #3]
 800f440:	1c5a      	adds	r2, r3, #1
 800f442:	70fa      	strb	r2, [r7, #3]
 800f444:	461a      	mov	r2, r3
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4413      	add	r3, r2
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	041a      	lsls	r2, r3, #16
 800f44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f450:	4313      	orrs	r3, r2
 800f452:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800f454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f456:	2264      	movs	r2, #100	@ 0x64
 800f458:	fb02 f303 	mul.w	r3, r2, r3
 800f45c:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800f45e:	2300      	movs	r3, #0
 800f460:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f462:	78fb      	ldrb	r3, [r7, #3]
 800f464:	1c5a      	adds	r2, r3, #1
 800f466:	70fa      	strb	r2, [r7, #3]
 800f468:	461a      	mov	r2, r3
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	4413      	add	r3, r2
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	b25b      	sxtb	r3, r3
 800f472:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f476:	4b85      	ldr	r3, [pc, #532]	@ (800f68c <ProcessMacCommands+0x62c>)
 800f478:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f47c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800f480:	4611      	mov	r1, r2
 800f482:	4618      	mov	r0, r3
 800f484:	f005 f8a3 	bl	80145ce <RegionNewChannelReq>
 800f488:	4603      	mov	r3, r0
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800f490:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f494:	b25b      	sxtb	r3, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	f2c0 826c 	blt.w	800f974 <ProcessMacCommands+0x914>
                {
                    macCmdPayload[0] = status;
 800f49c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f4a0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f4a4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f4a8:	2201      	movs	r2, #1
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	2007      	movs	r0, #7
 800f4ae:	f003 f9cd 	bl	801284c <LoRaMacCommandsAddCmd>
                }
                break;
 800f4b2:	e25f      	b.n	800f974 <ProcessMacCommands+0x914>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f4b4:	78fb      	ldrb	r3, [r7, #3]
 800f4b6:	1c5a      	adds	r2, r3, #1
 800f4b8:	70fa      	strb	r2, [r7, #3]
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	4413      	add	r3, r2
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	f003 030f 	and.w	r3, r3, #15
 800f4c6:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800f4ca:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d104      	bne.n	800f4dc <ProcessMacCommands+0x47c>
                {
                    delay++;
 800f4d2:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f4dc:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f4e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f4e4:	fb02 f303 	mul.w	r3, r2, r3
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	4b68      	ldr	r3, [pc, #416]	@ (800f68c <ProcessMacCommands+0x62c>)
 800f4ec:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f4ee:	4b67      	ldr	r3, [pc, #412]	@ (800f68c <ProcessMacCommands+0x62c>)
 800f4f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f4f2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800f4f6:	4a65      	ldr	r2, [pc, #404]	@ (800f68c <ProcessMacCommands+0x62c>)
 800f4f8:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f4fa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f4fe:	2200      	movs	r2, #0
 800f500:	4619      	mov	r1, r3
 800f502:	2008      	movs	r0, #8
 800f504:	f003 f9a2 	bl	801284c <LoRaMacCommandsAddCmd>
                break;
 800f508:	e23f      	b.n	800f98a <ProcessMacCommands+0x92a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f50a:	78fb      	ldrb	r3, [r7, #3]
 800f50c:	1c5a      	adds	r2, r3, #1
 800f50e:	70fa      	strb	r2, [r7, #3]
 800f510:	461a      	mov	r2, r3
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	4413      	add	r3, r2
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f51c:	2300      	movs	r3, #0
 800f51e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f522:	2300      	movs	r3, #0
 800f524:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f528:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f52c:	f003 0320 	and.w	r3, r3, #32
 800f530:	2b00      	cmp	r3, #0
 800f532:	d002      	beq.n	800f53a <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f534:	2301      	movs	r3, #1
 800f536:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f53a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f53e:	f003 0310 	and.w	r3, r3, #16
 800f542:	2b00      	cmp	r3, #0
 800f544:	d002      	beq.n	800f54c <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f546:	2301      	movs	r3, #1
 800f548:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f54c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f550:	f003 030f 	and.w	r3, r3, #15
 800f554:	b2db      	uxtb	r3, r3
 800f556:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f55a:	4b4c      	ldr	r3, [pc, #304]	@ (800f68c <ProcessMacCommands+0x62c>)
 800f55c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f560:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f564:	4611      	mov	r1, r2
 800f566:	4618      	mov	r0, r3
 800f568:	f005 f844 	bl	80145f4 <RegionTxParamSetupReq>
 800f56c:	4603      	mov	r3, r0
 800f56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f572:	f000 8201 	beq.w	800f978 <ProcessMacCommands+0x918>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f576:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800f57a:	4b44      	ldr	r3, [pc, #272]	@ (800f68c <ProcessMacCommands+0x62c>)
 800f57c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f580:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800f584:	4b41      	ldr	r3, [pc, #260]	@ (800f68c <ProcessMacCommands+0x62c>)
 800f586:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f58a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800f58e:	461a      	mov	r2, r3
 800f590:	4b3f      	ldr	r3, [pc, #252]	@ (800f690 <ProcessMacCommands+0x630>)
 800f592:	5c9b      	ldrb	r3, [r3, r2]
 800f594:	4618      	mov	r0, r3
 800f596:	f7f1 fb95 	bl	8000cc4 <__aeabi_ui2f>
 800f59a:	4603      	mov	r3, r0
 800f59c:	4a3b      	ldr	r2, [pc, #236]	@ (800f68c <ProcessMacCommands+0x62c>)
 800f59e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f5a2:	2302      	movs	r3, #2
 800f5a4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f5a8:	4b38      	ldr	r3, [pc, #224]	@ (800f68c <ProcessMacCommands+0x62c>)
 800f5aa:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f5ae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f5b2:	4b36      	ldr	r3, [pc, #216]	@ (800f68c <ProcessMacCommands+0x62c>)
 800f5b4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f5b8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f5bc:	4611      	mov	r1, r2
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f004 ff1b 	bl	80143fa <RegionGetPhyParam>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5ca:	b25a      	sxtb	r2, r3
 800f5cc:	4b2f      	ldr	r3, [pc, #188]	@ (800f68c <ProcessMacCommands+0x62c>)
 800f5ce:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	bfb8      	it	lt
 800f5d6:	4613      	movlt	r3, r2
 800f5d8:	b25a      	sxtb	r2, r3
 800f5da:	4b2c      	ldr	r3, [pc, #176]	@ (800f68c <ProcessMacCommands+0x62c>)
 800f5dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f5e0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	2009      	movs	r0, #9
 800f5ea:	f003 f92f 	bl	801284c <LoRaMacCommandsAddCmd>
                }
                break;
 800f5ee:	e1c3      	b.n	800f978 <ProcessMacCommands+0x918>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f5f0:	2303      	movs	r3, #3
 800f5f2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f5f6:	78fb      	ldrb	r3, [r7, #3]
 800f5f8:	1c5a      	adds	r2, r3, #1
 800f5fa:	70fa      	strb	r2, [r7, #3]
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4413      	add	r3, r2
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f608:	78fb      	ldrb	r3, [r7, #3]
 800f60a:	1c5a      	adds	r2, r3, #1
 800f60c:	70fa      	strb	r2, [r7, #3]
 800f60e:	461a      	mov	r2, r3
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	4413      	add	r3, r2
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f618:	78fb      	ldrb	r3, [r7, #3]
 800f61a:	1c5a      	adds	r2, r3, #1
 800f61c:	70fa      	strb	r2, [r7, #3]
 800f61e:	461a      	mov	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	4413      	add	r3, r2
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	021a      	lsls	r2, r3, #8
 800f628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f62a:	4313      	orrs	r3, r2
 800f62c:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f62e:	78fb      	ldrb	r3, [r7, #3]
 800f630:	1c5a      	adds	r2, r3, #1
 800f632:	70fa      	strb	r2, [r7, #3]
 800f634:	461a      	mov	r2, r3
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	4413      	add	r3, r2
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	041a      	lsls	r2, r3, #16
 800f63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f640:	4313      	orrs	r3, r2
 800f642:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f646:	2264      	movs	r2, #100	@ 0x64
 800f648:	fb02 f303 	mul.w	r3, r2, r3
 800f64c:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f64e:	4b0f      	ldr	r3, [pc, #60]	@ (800f68c <ProcessMacCommands+0x62c>)
 800f650:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f654:	f107 0220 	add.w	r2, r7, #32
 800f658:	4611      	mov	r1, r2
 800f65a:	4618      	mov	r0, r3
 800f65c:	f004 ffdd 	bl	801461a <RegionDlChannelReq>
 800f660:	4603      	mov	r3, r0
 800f662:	b2db      	uxtb	r3, r3
 800f664:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800f668:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f66c:	b25b      	sxtb	r3, r3
 800f66e:	2b00      	cmp	r3, #0
 800f670:	f2c0 8184 	blt.w	800f97c <ProcessMacCommands+0x91c>
                {
                    macCmdPayload[0] = status;
 800f674:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f678:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f67c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f680:	2201      	movs	r2, #1
 800f682:	4619      	mov	r1, r3
 800f684:	200a      	movs	r0, #10
 800f686:	f003 f8e1 	bl	801284c <LoRaMacCommandsAddCmd>
                }
                break;
 800f68a:	e177      	b.n	800f97c <ProcessMacCommands+0x91c>
 800f68c:	20000cfc 	.word	0x20000cfc
 800f690:	0801eab8 	.word	0x0801eab8
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f694:	200a      	movs	r0, #10
 800f696:	f003 fc11 	bl	8012ebc <LoRaMacConfirmQueueIsCmdActive>
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	f000 816f 	beq.w	800f980 <ProcessMacCommands+0x920>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f6a2:	210a      	movs	r1, #10
 800f6a4:	2000      	movs	r0, #0
 800f6a6:	f003 fb7d 	bl	8012da4 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800f6aa:	f107 0318 	add.w	r3, r7, #24
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	601a      	str	r2, [r3, #0]
 800f6b2:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f6b4:	f107 0310 	add.w	r3, r7, #16
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	601a      	str	r2, [r3, #0]
 800f6bc:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f6be:	f107 0308 	add.w	r3, r7, #8
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	601a      	str	r2, [r3, #0]
 800f6c6:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f6c8:	78fb      	ldrb	r3, [r7, #3]
 800f6ca:	1c5a      	adds	r2, r3, #1
 800f6cc:	70fa      	strb	r2, [r7, #3]
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	4413      	add	r3, r2
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f6d8:	78fb      	ldrb	r3, [r7, #3]
 800f6da:	1c5a      	adds	r2, r3, #1
 800f6dc:	70fa      	strb	r2, [r7, #3]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	4413      	add	r3, r2
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	021a      	lsls	r2, r3, #8
 800f6e8:	69bb      	ldr	r3, [r7, #24]
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f6ee:	78fb      	ldrb	r3, [r7, #3]
 800f6f0:	1c5a      	adds	r2, r3, #1
 800f6f2:	70fa      	strb	r2, [r7, #3]
 800f6f4:	461a      	mov	r2, r3
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4413      	add	r3, r2
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	041a      	lsls	r2, r3, #16
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	4313      	orrs	r3, r2
 800f702:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f704:	78fb      	ldrb	r3, [r7, #3]
 800f706:	1c5a      	adds	r2, r3, #1
 800f708:	70fa      	strb	r2, [r7, #3]
 800f70a:	461a      	mov	r2, r3
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4413      	add	r3, r2
 800f710:	781b      	ldrb	r3, [r3, #0]
 800f712:	061a      	lsls	r2, r3, #24
 800f714:	69bb      	ldr	r3, [r7, #24]
 800f716:	4313      	orrs	r3, r2
 800f718:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f71a:	78fb      	ldrb	r3, [r7, #3]
 800f71c:	1c5a      	adds	r2, r3, #1
 800f71e:	70fa      	strb	r2, [r7, #3]
 800f720:	461a      	mov	r2, r3
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	4413      	add	r3, r2
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	b21b      	sxth	r3, r3
 800f72a:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f72c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f730:	461a      	mov	r2, r3
 800f732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f736:	fb02 f303 	mul.w	r3, r2, r3
 800f73a:	121b      	asrs	r3, r3, #8
 800f73c:	b21b      	sxth	r3, r3
 800f73e:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f740:	f107 0310 	add.w	r3, r7, #16
 800f744:	f107 0218 	add.w	r2, r7, #24
 800f748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f74c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f750:	693a      	ldr	r2, [r7, #16]
 800f752:	4b94      	ldr	r3, [pc, #592]	@ (800f9a4 <ProcessMacCommands+0x944>)
 800f754:	4413      	add	r3, r2
 800f756:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f758:	f107 0308 	add.w	r3, r7, #8
 800f75c:	4618      	mov	r0, r3
 800f75e:	f00a fda5 	bl	801a2ac <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f762:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800f766:	4b90      	ldr	r3, [pc, #576]	@ (800f9a8 <ProcessMacCommands+0x948>)
 800f768:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800f76c:	9200      	str	r2, [sp, #0]
 800f76e:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800f772:	f107 0210 	add.w	r2, r7, #16
 800f776:	ca06      	ldmia	r2, {r1, r2}
 800f778:	f00a fd31 	bl	801a1de <SysTimeSub>
 800f77c:	f107 0010 	add.w	r0, r7, #16
 800f780:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f782:	9300      	str	r3, [sp, #0]
 800f784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f786:	f107 0208 	add.w	r2, r7, #8
 800f78a:	ca06      	ldmia	r2, {r1, r2}
 800f78c:	f00a fcee 	bl	801a16c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f790:	f107 0310 	add.w	r3, r7, #16
 800f794:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f798:	f00a fd5a 	bl	801a250 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f79c:	f002 ff0f 	bl	80125be <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f7a0:	4b81      	ldr	r3, [pc, #516]	@ (800f9a8 <ProcessMacCommands+0x948>)
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800f7a8:	e0ea      	b.n	800f980 <ProcessMacCommands+0x920>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f7aa:	200d      	movs	r0, #13
 800f7ac:	f003 fb86 	bl	8012ebc <LoRaMacConfirmQueueIsCmdActive>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	f000 80e6 	beq.w	800f984 <ProcessMacCommands+0x924>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f7b8:	210d      	movs	r1, #13
 800f7ba:	2000      	movs	r0, #0
 800f7bc:	f003 faf2 	bl	8012da4 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f7c0:	4b79      	ldr	r3, [pc, #484]	@ (800f9a8 <ProcessMacCommands+0x948>)
 800f7c2:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800f7c6:	2b04      	cmp	r3, #4
 800f7c8:	f000 80dc 	beq.w	800f984 <ProcessMacCommands+0x924>
 800f7cc:	4b76      	ldr	r3, [pc, #472]	@ (800f9a8 <ProcessMacCommands+0x948>)
 800f7ce:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800f7d2:	2b05      	cmp	r3, #5
 800f7d4:	f000 80d6 	beq.w	800f984 <ProcessMacCommands+0x924>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f7d8:	f002 fed2 	bl	8012580 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f7dc:	e0d2      	b.n	800f984 <ProcessMacCommands+0x924>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f7de:	2303      	movs	r3, #3
 800f7e0:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f7e8:	78fb      	ldrb	r3, [r7, #3]
 800f7ea:	1c5a      	adds	r2, r3, #1
 800f7ec:	70fa      	strb	r2, [r7, #3]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f7f8:	78fb      	ldrb	r3, [r7, #3]
 800f7fa:	1c5a      	adds	r2, r3, #1
 800f7fc:	70fa      	strb	r2, [r7, #3]
 800f7fe:	461a      	mov	r2, r3
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	4413      	add	r3, r2
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	021b      	lsls	r3, r3, #8
 800f808:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f80a:	4313      	orrs	r3, r2
 800f80c:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f80e:	78fb      	ldrb	r3, [r7, #3]
 800f810:	1c5a      	adds	r2, r3, #1
 800f812:	70fa      	strb	r2, [r7, #3]
 800f814:	461a      	mov	r2, r3
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4413      	add	r3, r2
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	041b      	lsls	r3, r3, #16
 800f81e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f820:	4313      	orrs	r3, r2
 800f822:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800f824:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f826:	2264      	movs	r2, #100	@ 0x64
 800f828:	fb02 f303 	mul.w	r3, r2, r3
 800f82c:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f82e:	78fb      	ldrb	r3, [r7, #3]
 800f830:	1c5a      	adds	r2, r3, #1
 800f832:	70fa      	strb	r2, [r7, #3]
 800f834:	461a      	mov	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4413      	add	r3, r2
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	f003 030f 	and.w	r3, r3, #15
 800f840:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f844:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f848:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f84a:	4618      	mov	r0, r3
 800f84c:	f002 fe9e 	bl	801258c <LoRaMacClassBPingSlotChannelReq>
 800f850:	4603      	mov	r3, r0
 800f852:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800f856:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800f85a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f85e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f862:	2201      	movs	r2, #1
 800f864:	4619      	mov	r1, r3
 800f866:	2011      	movs	r0, #17
 800f868:	f002 fff0 	bl	801284c <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 800f86c:	e08d      	b.n	800f98a <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f86e:	200e      	movs	r0, #14
 800f870:	f003 fb24 	bl	8012ebc <LoRaMacConfirmQueueIsCmdActive>
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	f000 8086 	beq.w	800f988 <ProcessMacCommands+0x928>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f87c:	210e      	movs	r1, #14
 800f87e:	2000      	movs	r0, #0
 800f880:	f003 fa90 	bl	8012da4 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f884:	2300      	movs	r3, #0
 800f886:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f88a:	2300      	movs	r3, #0
 800f88c:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f890:	78fb      	ldrb	r3, [r7, #3]
 800f892:	1c5a      	adds	r2, r3, #1
 800f894:	70fa      	strb	r2, [r7, #3]
 800f896:	461a      	mov	r2, r3
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	4413      	add	r3, r2
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f8a2:	78fb      	ldrb	r3, [r7, #3]
 800f8a4:	1c5a      	adds	r2, r3, #1
 800f8a6:	70fa      	strb	r2, [r7, #3]
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	021b      	lsls	r3, r3, #8
 800f8b2:	b21a      	sxth	r2, r3
 800f8b4:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800f8b8:	4313      	orrs	r3, r2
 800f8ba:	b21b      	sxth	r3, r3
 800f8bc:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f8c0:	78fb      	ldrb	r3, [r7, #3]
 800f8c2:	1c5a      	adds	r2, r3, #1
 800f8c4:	70fa      	strb	r2, [r7, #3]
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	4413      	add	r3, r2
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f8d2:	4b36      	ldr	r3, [pc, #216]	@ (800f9ac <ProcessMacCommands+0x94c>)
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800f8da:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f002 fe60 	bl	80125a4 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f8e4:	e050      	b.n	800f988 <ProcessMacCommands+0x928>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f8ec:	78fb      	ldrb	r3, [r7, #3]
 800f8ee:	1c5a      	adds	r2, r3, #1
 800f8f0:	70fa      	strb	r2, [r7, #3]
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f8fe:	78fb      	ldrb	r3, [r7, #3]
 800f900:	1c5a      	adds	r2, r3, #1
 800f902:	70fa      	strb	r2, [r7, #3]
 800f904:	461a      	mov	r2, r3
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4413      	add	r3, r2
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	021b      	lsls	r3, r3, #8
 800f90e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f912:	4313      	orrs	r3, r2
 800f914:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f918:	78fb      	ldrb	r3, [r7, #3]
 800f91a:	1c5a      	adds	r2, r3, #1
 800f91c:	70fa      	strb	r2, [r7, #3]
 800f91e:	461a      	mov	r2, r3
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	4413      	add	r3, r2
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	041b      	lsls	r3, r3, #16
 800f928:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f92c:	4313      	orrs	r3, r2
 800f92e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 800f932:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f936:	2264      	movs	r2, #100	@ 0x64
 800f938:	fb02 f303 	mul.w	r3, r2, r3
 800f93c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f940:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800f944:	f002 fe41 	bl	80125ca <LoRaMacClassBBeaconFreqReq>
 800f948:	4603      	mov	r3, r0
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d003      	beq.n	800f956 <ProcessMacCommands+0x8f6>
                    {
                        macCmdPayload[0] = 1;
 800f94e:	2301      	movs	r3, #1
 800f950:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800f954:	e002      	b.n	800f95c <ProcessMacCommands+0x8fc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f956:	2300      	movs	r3, #0
 800f958:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f95c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f960:	2201      	movs	r2, #1
 800f962:	4619      	mov	r1, r3
 800f964:	2013      	movs	r0, #19
 800f966:	f002 ff71 	bl	801284c <LoRaMacCommandsAddCmd>
                }
                break;
 800f96a:	e00e      	b.n	800f98a <ProcessMacCommands+0x92a>
                break;
 800f96c:	bf00      	nop
 800f96e:	e00c      	b.n	800f98a <ProcessMacCommands+0x92a>
                break;
 800f970:	bf00      	nop
 800f972:	e00a      	b.n	800f98a <ProcessMacCommands+0x92a>
                break;
 800f974:	bf00      	nop
 800f976:	e008      	b.n	800f98a <ProcessMacCommands+0x92a>
                break;
 800f978:	bf00      	nop
 800f97a:	e006      	b.n	800f98a <ProcessMacCommands+0x92a>
                break;
 800f97c:	bf00      	nop
 800f97e:	e004      	b.n	800f98a <ProcessMacCommands+0x92a>
                break;
 800f980:	bf00      	nop
 800f982:	e002      	b.n	800f98a <ProcessMacCommands+0x92a>
                break;
 800f984:	bf00      	nop
 800f986:	e000      	b.n	800f98a <ProcessMacCommands+0x92a>
                break;
 800f988:	bf00      	nop
    while( macIndex < commandsSize )
 800f98a:	78fa      	ldrb	r2, [r7, #3]
 800f98c:	78bb      	ldrb	r3, [r7, #2]
 800f98e:	429a      	cmp	r2, r3
 800f990:	f4ff ab7e 	bcc.w	800f090 <ProcessMacCommands+0x30>
 800f994:	e002      	b.n	800f99c <ProcessMacCommands+0x93c>
            return;
 800f996:	bf00      	nop
 800f998:	e000      	b.n	800f99c <ProcessMacCommands+0x93c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f99a:	bf00      	nop
        }
    }
}
 800f99c:	378c      	adds	r7, #140	@ 0x8c
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd90      	pop	{r4, r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	12d53d80 	.word	0x12d53d80
 800f9a8:	200007f4 	.word	0x200007f4
 800f9ac:	20001474 	.word	0x20001474

0800f9b0 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b08e      	sub	sp, #56	@ 0x38
 800f9b4:	af02      	add	r7, sp, #8
 800f9b6:	60f8      	str	r0, [r7, #12]
 800f9b8:	607a      	str	r2, [r7, #4]
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	460b      	mov	r3, r1
 800f9be:	72fb      	strb	r3, [r7, #11]
 800f9c0:	4613      	mov	r3, r2
 800f9c2:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f9c4:	2303      	movs	r3, #3
 800f9c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f9ca:	4b65      	ldr	r3, [pc, #404]	@ (800fb60 <Send+0x1b0>)
 800f9cc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f9d0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f9d4:	4b62      	ldr	r3, [pc, #392]	@ (800fb60 <Send+0x1b0>)
 800f9d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f9da:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f9de:	4b60      	ldr	r3, [pc, #384]	@ (800fb60 <Send+0x1b0>)
 800f9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f9e4:	4b5e      	ldr	r3, [pc, #376]	@ (800fb60 <Send+0x1b0>)
 800f9e6:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d101      	bne.n	800f9f2 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f9ee:	2307      	movs	r3, #7
 800f9f0:	e0b1      	b.n	800fb56 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f9f2:	4b5b      	ldr	r3, [pc, #364]	@ (800fb60 <Send+0x1b0>)
 800f9f4:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d102      	bne.n	800fa02 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f9fc:	4b58      	ldr	r3, [pc, #352]	@ (800fb60 <Send+0x1b0>)
 800f9fe:	2200      	movs	r2, #0
 800fa00:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 800fa02:	2300      	movs	r3, #0
 800fa04:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800fa08:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fa0c:	f36f 0303 	bfc	r3, #0, #4
 800fa10:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800fa14:	4b52      	ldr	r3, [pc, #328]	@ (800fb60 <Send+0x1b0>)
 800fa16:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800fa1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fa1e:	f362 13c7 	bfi	r3, r2, #7, #1
 800fa22:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fa26:	4b4e      	ldr	r3, [pc, #312]	@ (800fb60 <Send+0x1b0>)
 800fa28:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	d106      	bne.n	800fa3e <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800fa30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fa34:	f043 0310 	orr.w	r3, r3, #16
 800fa38:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800fa3c:	e005      	b.n	800fa4a <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800fa3e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fa42:	f36f 1304 	bfc	r3, #4, #1
 800fa46:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800fa4a:	4b45      	ldr	r3, [pc, #276]	@ (800fb60 <Send+0x1b0>)
 800fa4c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d005      	beq.n	800fa60 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800fa54:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fa58:	f043 0320 	orr.w	r3, r3, #32
 800fa5c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 800fa60:	2301      	movs	r3, #1
 800fa62:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800fa64:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fa68:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	bf14      	ite	ne
 800fa72:	2301      	movne	r3, #1
 800fa74:	2300      	moveq	r3, #0
 800fa76:	b2db      	uxtb	r3, r3
 800fa78:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fa7a:	4b39      	ldr	r3, [pc, #228]	@ (800fb60 <Send+0x1b0>)
 800fa7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa7e:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800fa80:	4b37      	ldr	r3, [pc, #220]	@ (800fb60 <Send+0x1b0>)
 800fa82:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800fa86:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800fa88:	4b35      	ldr	r3, [pc, #212]	@ (800fb60 <Send+0x1b0>)
 800fa8a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800fa8e:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fa90:	4b33      	ldr	r3, [pc, #204]	@ (800fb60 <Send+0x1b0>)
 800fa92:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fa96:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fa9a:	4b31      	ldr	r3, [pc, #196]	@ (800fb60 <Send+0x1b0>)
 800fa9c:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800faa0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800faa4:	4b2e      	ldr	r3, [pc, #184]	@ (800fb60 <Send+0x1b0>)
 800faa6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800faaa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800faae:	4b2c      	ldr	r3, [pc, #176]	@ (800fb60 <Send+0x1b0>)
 800fab0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fab4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800fab8:	4b29      	ldr	r3, [pc, #164]	@ (800fb60 <Send+0x1b0>)
 800faba:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800fabe:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800fac0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fac4:	f107 0014 	add.w	r0, r7, #20
 800fac8:	4a26      	ldr	r2, [pc, #152]	@ (800fb64 <Send+0x1b4>)
 800faca:	4927      	ldr	r1, [pc, #156]	@ (800fb68 <Send+0x1b8>)
 800facc:	f002 fc98 	bl	8012400 <LoRaMacAdrCalcNext>
 800fad0:	4603      	mov	r3, r0
 800fad2:	461a      	mov	r2, r3
 800fad4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fad8:	f362 1386 	bfi	r3, r2, #6, #1
 800fadc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800fae0:	7afa      	ldrb	r2, [r7, #11]
 800fae2:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800fae6:	893b      	ldrh	r3, [r7, #8]
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	68f8      	ldr	r0, [r7, #12]
 800faee:	f000 fc5d 	bl	80103ac <PrepareFrame>
 800faf2:	4603      	mov	r3, r0
 800faf4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800faf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d003      	beq.n	800fb08 <Send+0x158>
 800fb00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fb04:	2b0a      	cmp	r3, #10
 800fb06:	d107      	bne.n	800fb18 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 800fb08:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f000 f961 	bl	800fdd4 <ScheduleTx>
 800fb12:	4603      	mov	r3, r0
 800fb14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800fb18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d00a      	beq.n	800fb36 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800fb20:	4a0f      	ldr	r2, [pc, #60]	@ (800fb60 <Send+0x1b0>)
 800fb22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fb26:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800fb2a:	4a0d      	ldr	r2, [pc, #52]	@ (800fb60 <Send+0x1b0>)
 800fb2c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800fb30:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 800fb34:	e00d      	b.n	800fb52 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800fb36:	4b0a      	ldr	r3, [pc, #40]	@ (800fb60 <Send+0x1b0>)
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800fb3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb40:	4a07      	ldr	r2, [pc, #28]	@ (800fb60 <Send+0x1b0>)
 800fb42:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800fb44:	f002 ff28 	bl	8012998 <LoRaMacCommandsRemoveNoneStickyCmds>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d001      	beq.n	800fb52 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fb4e:	2313      	movs	r3, #19
 800fb50:	e001      	b.n	800fb56 <Send+0x1a6>
        }
    }
    return status;
 800fb52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3730      	adds	r7, #48	@ 0x30
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	20000cfc 	.word	0x20000cfc
 800fb64:	20000d34 	.word	0x20000d34
 800fb68:	20000d35 	.word	0x20000d35

0800fb6c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	4603      	mov	r3, r0
 800fb74:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800fb76:	2300      	movs	r3, #0
 800fb78:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800fb7e:	2301      	movs	r3, #1
 800fb80:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800fb82:	79fb      	ldrb	r3, [r7, #7]
 800fb84:	2bff      	cmp	r3, #255	@ 0xff
 800fb86:	d11f      	bne.n	800fbc8 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800fb88:	2000      	movs	r0, #0
 800fb8a:	f7ff f931 	bl	800edf0 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fb8e:	4b15      	ldr	r3, [pc, #84]	@ (800fbe4 <SendReJoinReq+0x78>)
 800fb90:	2200      	movs	r2, #0
 800fb92:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fb96:	4b13      	ldr	r3, [pc, #76]	@ (800fbe4 <SendReJoinReq+0x78>)
 800fb98:	4a13      	ldr	r2, [pc, #76]	@ (800fbe8 <SendReJoinReq+0x7c>)
 800fb9a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800fb9e:	4b11      	ldr	r3, [pc, #68]	@ (800fbe4 <SendReJoinReq+0x78>)
 800fba0:	22ff      	movs	r2, #255	@ 0xff
 800fba2:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800fba6:	7b3b      	ldrb	r3, [r7, #12]
 800fba8:	f36f 1347 	bfc	r3, #5, #3
 800fbac:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800fbae:	7b3a      	ldrb	r2, [r7, #12]
 800fbb0:	4b0c      	ldr	r3, [pc, #48]	@ (800fbe4 <SendReJoinReq+0x78>)
 800fbb2:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800fbb6:	480d      	ldr	r0, [pc, #52]	@ (800fbec <SendReJoinReq+0x80>)
 800fbb8:	f7fc fb3a 	bl	800c230 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800fbbc:	480c      	ldr	r0, [pc, #48]	@ (800fbf0 <SendReJoinReq+0x84>)
 800fbbe:	f7fc fb07 	bl	800c1d0 <SecureElementGetDevEui>

            allowDelayedTx = false;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	73fb      	strb	r3, [r7, #15]

            break;
 800fbc6:	e002      	b.n	800fbce <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fbc8:	2302      	movs	r3, #2
 800fbca:	73bb      	strb	r3, [r7, #14]
            break;
 800fbcc:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800fbce:	7bfb      	ldrb	r3, [r7, #15]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f000 f8ff 	bl	800fdd4 <ScheduleTx>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	73bb      	strb	r3, [r7, #14]
    return status;
 800fbda:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3710      	adds	r7, #16
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	200007f4 	.word	0x200007f4
 800fbe8:	200007f6 	.word	0x200007f6
 800fbec:	20000902 	.word	0x20000902
 800fbf0:	2000090a 	.word	0x2000090a

0800fbf4 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fbf8:	f002 fc71 	bl	80124de <LoRaMacClassBIsBeaconExpected>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d001      	beq.n	800fc06 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800fc02:	230e      	movs	r3, #14
 800fc04:	e013      	b.n	800fc2e <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fc06:	4b0b      	ldr	r3, [pc, #44]	@ (800fc34 <CheckForClassBCollision+0x40>)
 800fc08:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d10d      	bne.n	800fc2c <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fc10:	f002 fc6c 	bl	80124ec <LoRaMacClassBIsPingExpected>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d001      	beq.n	800fc1e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fc1a:	230f      	movs	r3, #15
 800fc1c:	e007      	b.n	800fc2e <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fc1e:	f002 fc6c 	bl	80124fa <LoRaMacClassBIsMulticastExpected>
 800fc22:	4603      	mov	r3, r0
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d001      	beq.n	800fc2c <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fc28:	230f      	movs	r3, #15
 800fc2a:	e000      	b.n	800fc2e <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800fc2c:	2300      	movs	r3, #0
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	20000cfc 	.word	0x20000cfc

0800fc38 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800fc38:	b590      	push	{r4, r7, lr}
 800fc3a:	b083      	sub	sp, #12
 800fc3c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc3e:	4b2d      	ldr	r3, [pc, #180]	@ (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc40:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fc44:	4b2b      	ldr	r3, [pc, #172]	@ (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc46:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800fc4a:	4b2a      	ldr	r3, [pc, #168]	@ (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc4c:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 800fc50:	4b28      	ldr	r3, [pc, #160]	@ (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc52:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800fc56:	4b27      	ldr	r3, [pc, #156]	@ (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc58:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fc5c:	b25b      	sxtb	r3, r3
 800fc5e:	f004 fd33 	bl	80146c8 <RegionApplyDrOffset>
 800fc62:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc64:	b259      	sxtb	r1, r3
 800fc66:	4b23      	ldr	r3, [pc, #140]	@ (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc68:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800fc6c:	4b21      	ldr	r3, [pc, #132]	@ (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc70:	4821      	ldr	r0, [pc, #132]	@ (800fcf8 <ComputeRxWindowParameters+0xc0>)
 800fc72:	9000      	str	r0, [sp, #0]
 800fc74:	4620      	mov	r0, r4
 800fc76:	f004 fc37 	bl	80144e8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc7a:	4b1e      	ldr	r3, [pc, #120]	@ (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc7c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800fc80:	4b1c      	ldr	r3, [pc, #112]	@ (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc82:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fc86:	b259      	sxtb	r1, r3
 800fc88:	4b1a      	ldr	r3, [pc, #104]	@ (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc8a:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800fc8e:	4b19      	ldr	r3, [pc, #100]	@ (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc92:	4c1a      	ldr	r4, [pc, #104]	@ (800fcfc <ComputeRxWindowParameters+0xc4>)
 800fc94:	9400      	str	r4, [sp, #0]
 800fc96:	f004 fc27 	bl	80144e8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fc9a:	4b16      	ldr	r3, [pc, #88]	@ (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fc9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc9e:	4a18      	ldr	r2, [pc, #96]	@ (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fca0:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800fca4:	4413      	add	r3, r2
 800fca6:	4a16      	ldr	r2, [pc, #88]	@ (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fca8:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fcac:	4b11      	ldr	r3, [pc, #68]	@ (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fcae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fcb0:	4a13      	ldr	r2, [pc, #76]	@ (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fcb2:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 800fcb6:	4413      	add	r3, r2
 800fcb8:	4a11      	ldr	r2, [pc, #68]	@ (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fcba:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800fcbe:	4b10      	ldr	r3, [pc, #64]	@ (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fcc0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800fcc4:	2b04      	cmp	r3, #4
 800fcc6:	d011      	beq.n	800fcec <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fcc8:	4b0a      	ldr	r3, [pc, #40]	@ (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fcca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fccc:	4a0c      	ldr	r2, [pc, #48]	@ (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fcce:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800fcd2:	4413      	add	r3, r2
 800fcd4:	4a0a      	ldr	r2, [pc, #40]	@ (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fcd6:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fcda:	4b06      	ldr	r3, [pc, #24]	@ (800fcf4 <ComputeRxWindowParameters+0xbc>)
 800fcdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fcde:	4a08      	ldr	r2, [pc, #32]	@ (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fce0:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 800fce4:	4413      	add	r3, r2
 800fce6:	4a06      	ldr	r2, [pc, #24]	@ (800fd00 <ComputeRxWindowParameters+0xc8>)
 800fce8:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 800fcec:	bf00      	nop
 800fcee:	3704      	adds	r7, #4
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd90      	pop	{r4, r7, pc}
 800fcf4:	20000cfc 	.word	0x20000cfc
 800fcf8:	20000bac 	.word	0x20000bac
 800fcfc:	20000bc0 	.word	0x20000bc0
 800fd00:	200007f4 	.word	0x200007f4

0800fd04 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800fd0e:	4b13      	ldr	r3, [pc, #76]	@ (800fd5c <VerifyTxFrame+0x58>)
 800fd10:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d01b      	beq.n	800fd50 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fd18:	1d3b      	adds	r3, r7, #4
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f002 fe8c 	bl	8012a38 <LoRaMacCommandsGetSizeSerializedCmds>
 800fd20:	4603      	mov	r3, r0
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d001      	beq.n	800fd2a <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fd26:	2313      	movs	r3, #19
 800fd28:	e013      	b.n	800fd52 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800fd2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd60 <VerifyTxFrame+0x5c>)
 800fd2c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fd30:	4a0a      	ldr	r2, [pc, #40]	@ (800fd5c <VerifyTxFrame+0x58>)
 800fd32:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	b2d2      	uxtb	r2, r2
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7ff f968 	bl	800f010 <ValidatePayloadLength>
 800fd40:	4603      	mov	r3, r0
 800fd42:	f083 0301 	eor.w	r3, r3, #1
 800fd46:	b2db      	uxtb	r3, r3
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d001      	beq.n	800fd50 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800fd4c:	2308      	movs	r3, #8
 800fd4e:	e000      	b.n	800fd52 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800fd50:	2300      	movs	r3, #0
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3708      	adds	r7, #8
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	20000cfc 	.word	0x20000cfc
 800fd60:	200007f4 	.word	0x200007f4

0800fd64 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800fd6a:	4b18      	ldr	r3, [pc, #96]	@ (800fdcc <SerializeTxFrame+0x68>)
 800fd6c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d002      	beq.n	800fd7a <SerializeTxFrame+0x16>
 800fd74:	2b04      	cmp	r3, #4
 800fd76:	d011      	beq.n	800fd9c <SerializeTxFrame+0x38>
 800fd78:	e021      	b.n	800fdbe <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fd7a:	4815      	ldr	r0, [pc, #84]	@ (800fdd0 <SerializeTxFrame+0x6c>)
 800fd7c:	f004 f9b6 	bl	80140ec <LoRaMacSerializerJoinRequest>
 800fd80:	4603      	mov	r3, r0
 800fd82:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fd84:	79fb      	ldrb	r3, [r7, #7]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d001      	beq.n	800fd8e <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fd8a:	2311      	movs	r3, #17
 800fd8c:	e01a      	b.n	800fdc4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fd8e:	4b0f      	ldr	r3, [pc, #60]	@ (800fdcc <SerializeTxFrame+0x68>)
 800fd90:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800fd94:	461a      	mov	r2, r3
 800fd96:	4b0d      	ldr	r3, [pc, #52]	@ (800fdcc <SerializeTxFrame+0x68>)
 800fd98:	801a      	strh	r2, [r3, #0]
            break;
 800fd9a:	e012      	b.n	800fdc2 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800fd9c:	480c      	ldr	r0, [pc, #48]	@ (800fdd0 <SerializeTxFrame+0x6c>)
 800fd9e:	f004 fa27 	bl	80141f0 <LoRaMacSerializerData>
 800fda2:	4603      	mov	r3, r0
 800fda4:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800fda6:	79fb      	ldrb	r3, [r7, #7]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d001      	beq.n	800fdb0 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fdac:	2311      	movs	r3, #17
 800fdae:	e009      	b.n	800fdc4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fdb0:	4b06      	ldr	r3, [pc, #24]	@ (800fdcc <SerializeTxFrame+0x68>)
 800fdb2:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	4b04      	ldr	r3, [pc, #16]	@ (800fdcc <SerializeTxFrame+0x68>)
 800fdba:	801a      	strh	r2, [r3, #0]
            break;
 800fdbc:	e001      	b.n	800fdc2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fdbe:	2303      	movs	r3, #3
 800fdc0:	e000      	b.n	800fdc4 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800fdc2:	2300      	movs	r3, #0
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3708      	adds	r7, #8
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	200007f4 	.word	0x200007f4
 800fdd0:	200008fc 	.word	0x200008fc

0800fdd4 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b090      	sub	sp, #64	@ 0x40
 800fdd8:	af02      	add	r7, sp, #8
 800fdda:	4603      	mov	r3, r0
 800fddc:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fdde:	2303      	movs	r3, #3
 800fde0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800fde4:	f7ff ff06 	bl	800fbf4 <CheckForClassBCollision>
 800fde8:	4603      	mov	r3, r0
 800fdea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800fdee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d002      	beq.n	800fdfc <ScheduleTx+0x28>
    {
        return status;
 800fdf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fdfa:	e092      	b.n	800ff22 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 800fdfc:	f000 f8fe 	bl	800fffc <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800fe00:	f7ff ffb0 	bl	800fd64 <SerializeTxFrame>
 800fe04:	4603      	mov	r3, r0
 800fe06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800fe0a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d002      	beq.n	800fe18 <ScheduleTx+0x44>
    {
        return status;
 800fe12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fe16:	e084      	b.n	800ff22 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800fe18:	4b44      	ldr	r3, [pc, #272]	@ (800ff2c <ScheduleTx+0x158>)
 800fe1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe1c:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fe1e:	4b43      	ldr	r3, [pc, #268]	@ (800ff2c <ScheduleTx+0x158>)
 800fe20:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fe24:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800fe26:	4b41      	ldr	r3, [pc, #260]	@ (800ff2c <ScheduleTx+0x158>)
 800fe28:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800fe2c:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fe2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fe32:	4618      	mov	r0, r3
 800fe34:	f00a fa72 	bl	801a31c <SysTimeGetMcuTime>
 800fe38:	4638      	mov	r0, r7
 800fe3a:	4b3c      	ldr	r3, [pc, #240]	@ (800ff2c <ScheduleTx+0x158>)
 800fe3c:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 800fe40:	9200      	str	r2, [sp, #0]
 800fe42:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800fe46:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800fe4a:	ca06      	ldmia	r2, {r1, r2}
 800fe4c:	f00a f9c7 	bl	801a1de <SysTimeSub>
 800fe50:	f107 0320 	add.w	r3, r7, #32
 800fe54:	463a      	mov	r2, r7
 800fe56:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fe5a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800fe5e:	4b33      	ldr	r3, [pc, #204]	@ (800ff2c <ScheduleTx+0x158>)
 800fe60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe62:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800fe64:	2300      	movs	r3, #0
 800fe66:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800fe6e:	4b30      	ldr	r3, [pc, #192]	@ (800ff30 <ScheduleTx+0x15c>)
 800fe70:	881b      	ldrh	r3, [r3, #0]
 800fe72:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fe74:	4b2d      	ldr	r3, [pc, #180]	@ (800ff2c <ScheduleTx+0x158>)
 800fe76:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d104      	bne.n	800fe88 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800fe7e:	2301      	movs	r3, #1
 800fe80:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 800fe84:	2300      	movs	r3, #0
 800fe86:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800fe88:	4b28      	ldr	r3, [pc, #160]	@ (800ff2c <ScheduleTx+0x158>)
 800fe8a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800fe8e:	f107 0114 	add.w	r1, r7, #20
 800fe92:	4b28      	ldr	r3, [pc, #160]	@ (800ff34 <ScheduleTx+0x160>)
 800fe94:	9300      	str	r3, [sp, #0]
 800fe96:	4b28      	ldr	r3, [pc, #160]	@ (800ff38 <ScheduleTx+0x164>)
 800fe98:	4a28      	ldr	r2, [pc, #160]	@ (800ff3c <ScheduleTx+0x168>)
 800fe9a:	f004 fbeb 	bl	8014674 <RegionNextChannel>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 800fea4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d025      	beq.n	800fef8 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800feac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800feb0:	2b0b      	cmp	r3, #11
 800feb2:	d11e      	bne.n	800fef2 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 800feb4:	4b1e      	ldr	r3, [pc, #120]	@ (800ff30 <ScheduleTx+0x15c>)
 800feb6:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 800feba:	2b00      	cmp	r3, #0
 800febc:	d01c      	beq.n	800fef8 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 800febe:	7bfb      	ldrb	r3, [r7, #15]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d013      	beq.n	800feec <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800fec4:	4b1a      	ldr	r3, [pc, #104]	@ (800ff30 <ScheduleTx+0x15c>)
 800fec6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800feca:	f043 0320 	orr.w	r3, r3, #32
 800fece:	4a18      	ldr	r2, [pc, #96]	@ (800ff30 <ScheduleTx+0x15c>)
 800fed0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800fed4:	4b16      	ldr	r3, [pc, #88]	@ (800ff30 <ScheduleTx+0x15c>)
 800fed6:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 800feda:	4619      	mov	r1, r3
 800fedc:	4818      	ldr	r0, [pc, #96]	@ (800ff40 <ScheduleTx+0x16c>)
 800fede:	f00a ffbb 	bl	801ae58 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800fee2:	4817      	ldr	r0, [pc, #92]	@ (800ff40 <ScheduleTx+0x16c>)
 800fee4:	f00a feda 	bl	801ac9c <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800fee8:	2300      	movs	r3, #0
 800feea:	e01a      	b.n	800ff22 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 800feec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fef0:	e017      	b.n	800ff22 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800fef2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fef6:	e014      	b.n	800ff22 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800fef8:	f7ff fe9e 	bl	800fc38 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800fefc:	f7ff ff02 	bl	800fd04 <VerifyTxFrame>
 800ff00:	4603      	mov	r3, r0
 800ff02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800ff06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d002      	beq.n	800ff14 <ScheduleTx+0x140>
    {
        return status;
 800ff0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ff12:	e006      	b.n	800ff22 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800ff14:	4b06      	ldr	r3, [pc, #24]	@ (800ff30 <ScheduleTx+0x15c>)
 800ff16:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f000 fb60 	bl	80105e0 <SendFrameOnChannel>
 800ff20:	4603      	mov	r3, r0
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3738      	adds	r7, #56	@ 0x38
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	20000cfc 	.word	0x20000cfc
 800ff30:	200007f4 	.word	0x200007f4
 800ff34:	20000d2c 	.word	0x20000d2c
 800ff38:	20000c78 	.word	0x20000c78
 800ff3c:	20000c05 	.word	0x20000c05
 800ff40:	20000b5c 	.word	0x20000b5c

0800ff44 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b084      	sub	sp, #16
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	460a      	mov	r2, r1
 800ff4e:	71fb      	strb	r3, [r7, #7]
 800ff50:	4613      	mov	r3, r2
 800ff52:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800ff54:	2313      	movs	r3, #19
 800ff56:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800ff5c:	4b25      	ldr	r3, [pc, #148]	@ (800fff4 <SecureFrame+0xb0>)
 800ff5e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d002      	beq.n	800ff6c <SecureFrame+0x28>
 800ff66:	2b04      	cmp	r3, #4
 800ff68:	d011      	beq.n	800ff8e <SecureFrame+0x4a>
 800ff6a:	e03b      	b.n	800ffe4 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ff6c:	4822      	ldr	r0, [pc, #136]	@ (800fff8 <SecureFrame+0xb4>)
 800ff6e:	f003 fc87 	bl	8013880 <LoRaMacCryptoPrepareJoinRequest>
 800ff72:	4603      	mov	r3, r0
 800ff74:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ff76:	7bfb      	ldrb	r3, [r7, #15]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d001      	beq.n	800ff80 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ff7c:	2311      	movs	r3, #17
 800ff7e:	e034      	b.n	800ffea <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ff80:	4b1c      	ldr	r3, [pc, #112]	@ (800fff4 <SecureFrame+0xb0>)
 800ff82:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800ff86:	461a      	mov	r2, r3
 800ff88:	4b1a      	ldr	r3, [pc, #104]	@ (800fff4 <SecureFrame+0xb0>)
 800ff8a:	801a      	strh	r2, [r3, #0]
            break;
 800ff8c:	e02c      	b.n	800ffe8 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ff8e:	f107 0308 	add.w	r3, r7, #8
 800ff92:	4618      	mov	r0, r3
 800ff94:	f003 fb84 	bl	80136a0 <LoRaMacCryptoGetFCntUp>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d001      	beq.n	800ffa2 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ff9e:	2312      	movs	r3, #18
 800ffa0:	e023      	b.n	800ffea <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800ffa2:	4b14      	ldr	r3, [pc, #80]	@ (800fff4 <SecureFrame+0xb0>)
 800ffa4:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d104      	bne.n	800ffb6 <SecureFrame+0x72>
 800ffac:	4b11      	ldr	r3, [pc, #68]	@ (800fff4 <SecureFrame+0xb0>)
 800ffae:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 800ffb2:	2b01      	cmp	r3, #1
 800ffb4:	d902      	bls.n	800ffbc <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	3b01      	subs	r3, #1
 800ffba:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800ffbc:	68b8      	ldr	r0, [r7, #8]
 800ffbe:	79ba      	ldrb	r2, [r7, #6]
 800ffc0:	79f9      	ldrb	r1, [r7, #7]
 800ffc2:	4b0d      	ldr	r3, [pc, #52]	@ (800fff8 <SecureFrame+0xb4>)
 800ffc4:	f003 fd8a 	bl	8013adc <LoRaMacCryptoSecureMessage>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ffcc:	7bfb      	ldrb	r3, [r7, #15]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d001      	beq.n	800ffd6 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ffd2:	2311      	movs	r3, #17
 800ffd4:	e009      	b.n	800ffea <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ffd6:	4b07      	ldr	r3, [pc, #28]	@ (800fff4 <SecureFrame+0xb0>)
 800ffd8:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800ffdc:	461a      	mov	r2, r3
 800ffde:	4b05      	ldr	r3, [pc, #20]	@ (800fff4 <SecureFrame+0xb0>)
 800ffe0:	801a      	strh	r2, [r3, #0]
            break;
 800ffe2:	e001      	b.n	800ffe8 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ffe4:	2303      	movs	r3, #3
 800ffe6:	e000      	b.n	800ffea <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800ffe8:	2300      	movs	r3, #0
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3710      	adds	r7, #16
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}
 800fff2:	bf00      	nop
 800fff4:	200007f4 	.word	0x200007f4
 800fff8:	200008fc 	.word	0x200008fc

0800fffc <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800fffc:	b480      	push	{r7}
 800fffe:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010000:	4b09      	ldr	r3, [pc, #36]	@ (8010028 <CalculateBackOff+0x2c>)
 8010002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010004:	2b00      	cmp	r3, #0
 8010006:	d10a      	bne.n	801001e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010008:	4b07      	ldr	r3, [pc, #28]	@ (8010028 <CalculateBackOff+0x2c>)
 801000a:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 801000e:	3b01      	subs	r3, #1
 8010010:	4a06      	ldr	r2, [pc, #24]	@ (801002c <CalculateBackOff+0x30>)
 8010012:	f8d2 2414 	ldr.w	r2, [r2, #1044]	@ 0x414
 8010016:	fb02 f303 	mul.w	r3, r2, r3
 801001a:	4a03      	ldr	r2, [pc, #12]	@ (8010028 <CalculateBackOff+0x2c>)
 801001c:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 801001e:	bf00      	nop
 8010020:	46bd      	mov	sp, r7
 8010022:	bc80      	pop	{r7}
 8010024:	4770      	bx	lr
 8010026:	bf00      	nop
 8010028:	20000cfc 	.word	0x20000cfc
 801002c:	200007f4 	.word	0x200007f4

08010030 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	4603      	mov	r3, r0
 8010038:	7139      	strb	r1, [r7, #4]
 801003a:	71fb      	strb	r3, [r7, #7]
 801003c:	4613      	mov	r3, r2
 801003e:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010040:	79fb      	ldrb	r3, [r7, #7]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d002      	beq.n	801004c <RemoveMacCommands+0x1c>
 8010046:	79fb      	ldrb	r3, [r7, #7]
 8010048:	2b01      	cmp	r3, #1
 801004a:	d10d      	bne.n	8010068 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 801004c:	79bb      	ldrb	r3, [r7, #6]
 801004e:	2b01      	cmp	r3, #1
 8010050:	d108      	bne.n	8010064 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010052:	793b      	ldrb	r3, [r7, #4]
 8010054:	f003 0320 	and.w	r3, r3, #32
 8010058:	b2db      	uxtb	r3, r3
 801005a:	2b00      	cmp	r3, #0
 801005c:	d004      	beq.n	8010068 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801005e:	f002 fcbf 	bl	80129e0 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010062:	e001      	b.n	8010068 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010064:	f002 fcbc 	bl	80129e0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010068:	bf00      	nop
 801006a:	3708      	adds	r7, #8
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}

08010070 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8010070:	b5b0      	push	{r4, r5, r7, lr}
 8010072:	b090      	sub	sp, #64	@ 0x40
 8010074:	af00      	add	r7, sp, #0
 8010076:	4603      	mov	r3, r0
 8010078:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 801007a:	79fb      	ldrb	r3, [r7, #7]
 801007c:	f083 0301 	eor.w	r3, r3, #1
 8010080:	b2db      	uxtb	r3, r3
 8010082:	2b00      	cmp	r3, #0
 8010084:	d003      	beq.n	801008e <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010086:	4b80      	ldr	r3, [pc, #512]	@ (8010288 <ResetMacParameters+0x218>)
 8010088:	2200      	movs	r2, #0
 801008a:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 801008e:	4b7e      	ldr	r3, [pc, #504]	@ (8010288 <ResetMacParameters+0x218>)
 8010090:	2200      	movs	r2, #0
 8010092:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010094:	4b7d      	ldr	r3, [pc, #500]	@ (801028c <ResetMacParameters+0x21c>)
 8010096:	2200      	movs	r2, #0
 8010098:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 801009c:	4b7b      	ldr	r3, [pc, #492]	@ (801028c <ResetMacParameters+0x21c>)
 801009e:	2201      	movs	r2, #1
 80100a0:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 80100a4:	4b79      	ldr	r3, [pc, #484]	@ (801028c <ResetMacParameters+0x21c>)
 80100a6:	2201      	movs	r2, #1
 80100a8:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetry = false;
 80100ac:	4b77      	ldr	r3, [pc, #476]	@ (801028c <ResetMacParameters+0x21c>)
 80100ae:	2200      	movs	r2, #0
 80100b0:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80100b4:	4b74      	ldr	r3, [pc, #464]	@ (8010288 <ResetMacParameters+0x218>)
 80100b6:	2200      	movs	r2, #0
 80100b8:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80100bc:	4b72      	ldr	r3, [pc, #456]	@ (8010288 <ResetMacParameters+0x218>)
 80100be:	2201      	movs	r2, #1
 80100c0:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80100c4:	4b70      	ldr	r3, [pc, #448]	@ (8010288 <ResetMacParameters+0x218>)
 80100c6:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 80100ca:	4b6f      	ldr	r3, [pc, #444]	@ (8010288 <ResetMacParameters+0x218>)
 80100cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80100d0:	4b6d      	ldr	r3, [pc, #436]	@ (8010288 <ResetMacParameters+0x218>)
 80100d2:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 80100d6:	4b6c      	ldr	r3, [pc, #432]	@ (8010288 <ResetMacParameters+0x218>)
 80100d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80100dc:	4b6a      	ldr	r3, [pc, #424]	@ (8010288 <ResetMacParameters+0x218>)
 80100de:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 80100e2:	4b69      	ldr	r3, [pc, #420]	@ (8010288 <ResetMacParameters+0x218>)
 80100e4:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80100e8:	4b67      	ldr	r3, [pc, #412]	@ (8010288 <ResetMacParameters+0x218>)
 80100ea:	4a67      	ldr	r2, [pc, #412]	@ (8010288 <ResetMacParameters+0x218>)
 80100ec:	336c      	adds	r3, #108	@ 0x6c
 80100ee:	32b4      	adds	r2, #180	@ 0xb4
 80100f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100f4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80100f8:	4b63      	ldr	r3, [pc, #396]	@ (8010288 <ResetMacParameters+0x218>)
 80100fa:	4a63      	ldr	r2, [pc, #396]	@ (8010288 <ResetMacParameters+0x218>)
 80100fc:	3374      	adds	r3, #116	@ 0x74
 80100fe:	32bc      	adds	r2, #188	@ 0xbc
 8010100:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010104:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010108:	4b5f      	ldr	r3, [pc, #380]	@ (8010288 <ResetMacParameters+0x218>)
 801010a:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 801010e:	4b5e      	ldr	r3, [pc, #376]	@ (8010288 <ResetMacParameters+0x218>)
 8010110:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010114:	4b5c      	ldr	r3, [pc, #368]	@ (8010288 <ResetMacParameters+0x218>)
 8010116:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 801011a:	4b5b      	ldr	r3, [pc, #364]	@ (8010288 <ResetMacParameters+0x218>)
 801011c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010120:	4b59      	ldr	r3, [pc, #356]	@ (8010288 <ResetMacParameters+0x218>)
 8010122:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8010126:	4a58      	ldr	r2, [pc, #352]	@ (8010288 <ResetMacParameters+0x218>)
 8010128:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801012c:	4b56      	ldr	r3, [pc, #344]	@ (8010288 <ResetMacParameters+0x218>)
 801012e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8010132:	4a55      	ldr	r2, [pc, #340]	@ (8010288 <ResetMacParameters+0x218>)
 8010134:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8010138:	4b53      	ldr	r3, [pc, #332]	@ (8010288 <ResetMacParameters+0x218>)
 801013a:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 801013e:	4b52      	ldr	r3, [pc, #328]	@ (8010288 <ResetMacParameters+0x218>)
 8010140:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8010144:	4b50      	ldr	r3, [pc, #320]	@ (8010288 <ResetMacParameters+0x218>)
 8010146:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 801014a:	4b4f      	ldr	r3, [pc, #316]	@ (8010288 <ResetMacParameters+0x218>)
 801014c:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 8010150:	4b4e      	ldr	r3, [pc, #312]	@ (801028c <ResetMacParameters+0x21c>)
 8010152:	2200      	movs	r2, #0
 8010154:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 8010158:	4b4b      	ldr	r3, [pc, #300]	@ (8010288 <ResetMacParameters+0x218>)
 801015a:	2200      	movs	r2, #0
 801015c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8010160:	4b49      	ldr	r3, [pc, #292]	@ (8010288 <ResetMacParameters+0x218>)
 8010162:	2200      	movs	r2, #0
 8010164:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8010168:	4b47      	ldr	r3, [pc, #284]	@ (8010288 <ResetMacParameters+0x218>)
 801016a:	2200      	movs	r2, #0
 801016c:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 8010170:	4b45      	ldr	r3, [pc, #276]	@ (8010288 <ResetMacParameters+0x218>)
 8010172:	2200      	movs	r2, #0
 8010174:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8010178:	4b43      	ldr	r3, [pc, #268]	@ (8010288 <ResetMacParameters+0x218>)
 801017a:	2200      	movs	r2, #0
 801017c:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8010180:	4b41      	ldr	r3, [pc, #260]	@ (8010288 <ResetMacParameters+0x218>)
 8010182:	2200      	movs	r2, #0
 8010184:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8010188:	4b3f      	ldr	r3, [pc, #252]	@ (8010288 <ResetMacParameters+0x218>)
 801018a:	2200      	movs	r2, #0
 801018c:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8010190:	4b3d      	ldr	r3, [pc, #244]	@ (8010288 <ResetMacParameters+0x218>)
 8010192:	2200      	movs	r2, #0
 8010194:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8010198:	4b3b      	ldr	r3, [pc, #236]	@ (8010288 <ResetMacParameters+0x218>)
 801019a:	2200      	movs	r2, #0
 801019c:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80101a0:	2301      	movs	r3, #1
 80101a2:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80101a4:	4b3a      	ldr	r3, [pc, #232]	@ (8010290 <ResetMacParameters+0x220>)
 80101a6:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80101a8:	4b3a      	ldr	r3, [pc, #232]	@ (8010294 <ResetMacParameters+0x224>)
 80101aa:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80101ac:	4b36      	ldr	r3, [pc, #216]	@ (8010288 <ResetMacParameters+0x218>)
 80101ae:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80101b2:	f107 020c 	add.w	r2, r7, #12
 80101b6:	4611      	mov	r1, r2
 80101b8:	4618      	mov	r0, r3
 80101ba:	f004 f947 	bl	801444c <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80101be:	4b33      	ldr	r3, [pc, #204]	@ (801028c <ResetMacParameters+0x21c>)
 80101c0:	2200      	movs	r2, #0
 80101c2:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80101c6:	4b31      	ldr	r3, [pc, #196]	@ (801028c <ResetMacParameters+0x21c>)
 80101c8:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 80101cc:	4b2f      	ldr	r3, [pc, #188]	@ (801028c <ResetMacParameters+0x21c>)
 80101ce:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80101d2:	4b2d      	ldr	r3, [pc, #180]	@ (8010288 <ResetMacParameters+0x218>)
 80101d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101d6:	4a2d      	ldr	r2, [pc, #180]	@ (801028c <ResetMacParameters+0x21c>)
 80101d8:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80101dc:	4b2a      	ldr	r3, [pc, #168]	@ (8010288 <ResetMacParameters+0x218>)
 80101de:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80101e2:	4b2a      	ldr	r3, [pc, #168]	@ (801028c <ResetMacParameters+0x21c>)
 80101e4:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80101e8:	4b27      	ldr	r3, [pc, #156]	@ (8010288 <ResetMacParameters+0x218>)
 80101ea:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80101ee:	4b27      	ldr	r3, [pc, #156]	@ (801028c <ResetMacParameters+0x21c>)
 80101f0:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80101f4:	4b25      	ldr	r3, [pc, #148]	@ (801028c <ResetMacParameters+0x21c>)
 80101f6:	2200      	movs	r2, #0
 80101f8:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80101fc:	4b23      	ldr	r3, [pc, #140]	@ (801028c <ResetMacParameters+0x21c>)
 80101fe:	2201      	movs	r2, #1
 8010200:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010204:	4a21      	ldr	r2, [pc, #132]	@ (801028c <ResetMacParameters+0x21c>)
 8010206:	4b21      	ldr	r3, [pc, #132]	@ (801028c <ResetMacParameters+0x21c>)
 8010208:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 801020c:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 8010210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010214:	682b      	ldr	r3, [r5, #0]
 8010216:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010218:	4b1c      	ldr	r3, [pc, #112]	@ (801028c <ResetMacParameters+0x21c>)
 801021a:	2201      	movs	r2, #1
 801021c:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010220:	4b1a      	ldr	r3, [pc, #104]	@ (801028c <ResetMacParameters+0x21c>)
 8010222:	2202      	movs	r2, #2
 8010224:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8010228:	2300      	movs	r3, #0
 801022a:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 801022c:	2300      	movs	r3, #0
 801022e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8010230:	4b16      	ldr	r3, [pc, #88]	@ (801028c <ResetMacParameters+0x21c>)
 8010232:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010236:	2b00      	cmp	r3, #0
 8010238:	d009      	beq.n	801024e <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801023a:	4b14      	ldr	r3, [pc, #80]	@ (801028c <ResetMacParameters+0x21c>)
 801023c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010244:	4b11      	ldr	r3, [pc, #68]	@ (801028c <ResetMacParameters+0x21c>)
 8010246:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801024a:	695b      	ldr	r3, [r3, #20]
 801024c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801024e:	4b12      	ldr	r3, [pc, #72]	@ (8010298 <ResetMacParameters+0x228>)
 8010250:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010252:	4b12      	ldr	r3, [pc, #72]	@ (801029c <ResetMacParameters+0x22c>)
 8010254:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010256:	4b12      	ldr	r3, [pc, #72]	@ (80102a0 <ResetMacParameters+0x230>)
 8010258:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801025a:	4b12      	ldr	r3, [pc, #72]	@ (80102a4 <ResetMacParameters+0x234>)
 801025c:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 801025e:	4b12      	ldr	r3, [pc, #72]	@ (80102a8 <ResetMacParameters+0x238>)
 8010260:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8010262:	4b12      	ldr	r3, [pc, #72]	@ (80102ac <ResetMacParameters+0x23c>)
 8010264:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8010266:	4b12      	ldr	r3, [pc, #72]	@ (80102b0 <ResetMacParameters+0x240>)
 8010268:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 801026a:	4b12      	ldr	r3, [pc, #72]	@ (80102b4 <ResetMacParameters+0x244>)
 801026c:	637b      	str	r3, [r7, #52]	@ 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 801026e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8010272:	f107 0318 	add.w	r3, r7, #24
 8010276:	4a10      	ldr	r2, [pc, #64]	@ (80102b8 <ResetMacParameters+0x248>)
 8010278:	4618      	mov	r0, r3
 801027a:	f002 f8d9 	bl	8012430 <LoRaMacClassBInit>
}
 801027e:	bf00      	nop
 8010280:	3740      	adds	r7, #64	@ 0x40
 8010282:	46bd      	mov	sp, r7
 8010284:	bdb0      	pop	{r4, r5, r7, pc}
 8010286:	bf00      	nop
 8010288:	20000cfc 	.word	0x20000cfc
 801028c:	200007f4 	.word	0x200007f4
 8010290:	20000f1c 	.word	0x20000f1c
 8010294:	20000fb0 	.word	0x20000fb0
 8010298:	20000c50 	.word	0x20000c50
 801029c:	20000c0c 	.word	0x20000c0c
 80102a0:	20000c3c 	.word	0x20000c3c
 80102a4:	20000c75 	.word	0x20000c75
 80102a8:	20000de0 	.word	0x20000de0
 80102ac:	20000d44 	.word	0x20000d44
 80102b0:	20000d48 	.word	0x20000d48
 80102b4:	20000de4 	.word	0x20000de4
 80102b8:	20001454 	.word	0x20001454

080102bc <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b082      	sub	sp, #8
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f00a fd56 	bl	801ad78 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80102cc:	4b11      	ldr	r3, [pc, #68]	@ (8010314 <RxWindowSetup+0x58>)
 80102ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102d0:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80102d2:	4b11      	ldr	r3, [pc, #68]	@ (8010318 <RxWindowSetup+0x5c>)
 80102d4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80102d8:	4a10      	ldr	r2, [pc, #64]	@ (801031c <RxWindowSetup+0x60>)
 80102da:	6839      	ldr	r1, [r7, #0]
 80102dc:	4618      	mov	r0, r3
 80102de:	f004 f91d 	bl	801451c <RegionRxConfig>
 80102e2:	4603      	mov	r3, r0
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d010      	beq.n	801030a <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80102e8:	4b0d      	ldr	r3, [pc, #52]	@ (8010320 <RxWindowSetup+0x64>)
 80102ea:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80102ee:	4b0c      	ldr	r3, [pc, #48]	@ (8010320 <RxWindowSetup+0x64>)
 80102f0:	f883 245e 	strb.w	r2, [r3, #1118]	@ 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80102f4:	4b07      	ldr	r3, [pc, #28]	@ (8010314 <RxWindowSetup+0x58>)
 80102f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102f8:	4a07      	ldr	r2, [pc, #28]	@ (8010318 <RxWindowSetup+0x5c>)
 80102fa:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80102fc:	4610      	mov	r0, r2
 80102fe:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	7cda      	ldrb	r2, [r3, #19]
 8010304:	4b06      	ldr	r3, [pc, #24]	@ (8010320 <RxWindowSetup+0x64>)
 8010306:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 801030a:	bf00      	nop
 801030c:	3708      	adds	r7, #8
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}
 8010312:	bf00      	nop
 8010314:	0801eb10 	.word	0x0801eb10
 8010318:	20000cfc 	.word	0x20000cfc
 801031c:	20000c10 	.word	0x20000c10
 8010320:	200007f4 	.word	0x200007f4

08010324 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010324:	b590      	push	{r4, r7, lr}
 8010326:	b083      	sub	sp, #12
 8010328:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801032a:	4b1b      	ldr	r3, [pc, #108]	@ (8010398 <OpenContinuousRxCWindow+0x74>)
 801032c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010330:	4b19      	ldr	r3, [pc, #100]	@ (8010398 <OpenContinuousRxCWindow+0x74>)
 8010332:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010336:	b259      	sxtb	r1, r3
 8010338:	4b17      	ldr	r3, [pc, #92]	@ (8010398 <OpenContinuousRxCWindow+0x74>)
 801033a:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 801033e:	4b16      	ldr	r3, [pc, #88]	@ (8010398 <OpenContinuousRxCWindow+0x74>)
 8010340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010342:	4c16      	ldr	r4, [pc, #88]	@ (801039c <OpenContinuousRxCWindow+0x78>)
 8010344:	9400      	str	r4, [sp, #0]
 8010346:	f004 f8cf 	bl	80144e8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801034a:	4b15      	ldr	r3, [pc, #84]	@ (80103a0 <OpenContinuousRxCWindow+0x7c>)
 801034c:	2202      	movs	r2, #2
 801034e:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010352:	4b13      	ldr	r3, [pc, #76]	@ (80103a0 <OpenContinuousRxCWindow+0x7c>)
 8010354:	2201      	movs	r2, #1
 8010356:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801035a:	4b0f      	ldr	r3, [pc, #60]	@ (8010398 <OpenContinuousRxCWindow+0x74>)
 801035c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010360:	4a10      	ldr	r2, [pc, #64]	@ (80103a4 <OpenContinuousRxCWindow+0x80>)
 8010362:	490e      	ldr	r1, [pc, #56]	@ (801039c <OpenContinuousRxCWindow+0x78>)
 8010364:	4618      	mov	r0, r3
 8010366:	f004 f8d9 	bl	801451c <RegionRxConfig>
 801036a:	4603      	mov	r3, r0
 801036c:	2b00      	cmp	r3, #0
 801036e:	d00f      	beq.n	8010390 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010370:	4b0b      	ldr	r3, [pc, #44]	@ (80103a0 <OpenContinuousRxCWindow+0x7c>)
 8010372:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010376:	4b0a      	ldr	r3, [pc, #40]	@ (80103a0 <OpenContinuousRxCWindow+0x7c>)
 8010378:	f883 245e 	strb.w	r2, [r3, #1118]	@ 0x45e
        Radio.Rx( 0 ); // Continuous mode
 801037c:	4b0a      	ldr	r3, [pc, #40]	@ (80103a8 <OpenContinuousRxCWindow+0x84>)
 801037e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010380:	2000      	movs	r0, #0
 8010382:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010384:	4b06      	ldr	r3, [pc, #24]	@ (80103a0 <OpenContinuousRxCWindow+0x7c>)
 8010386:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
 801038a:	4b05      	ldr	r3, [pc, #20]	@ (80103a0 <OpenContinuousRxCWindow+0x7c>)
 801038c:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 8010390:	bf00      	nop
 8010392:	3704      	adds	r7, #4
 8010394:	46bd      	mov	sp, r7
 8010396:	bd90      	pop	{r4, r7, pc}
 8010398:	20000cfc 	.word	0x20000cfc
 801039c:	20000bd4 	.word	0x20000bd4
 80103a0:	200007f4 	.word	0x200007f4
 80103a4:	20000c10 	.word	0x20000c10
 80103a8:	0801eb10 	.word	0x0801eb10

080103ac <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b088      	sub	sp, #32
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	60f8      	str	r0, [r7, #12]
 80103b4:	60b9      	str	r1, [r7, #8]
 80103b6:	603b      	str	r3, [r7, #0]
 80103b8:	4613      	mov	r3, r2
 80103ba:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80103bc:	4b81      	ldr	r3, [pc, #516]	@ (80105c4 <PrepareFrame+0x218>)
 80103be:	2200      	movs	r2, #0
 80103c0:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80103c2:	4b80      	ldr	r3, [pc, #512]	@ (80105c4 <PrepareFrame+0x218>)
 80103c4:	2200      	movs	r2, #0
 80103c6:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    uint32_t fCntUp = 0;
 80103ca:	2300      	movs	r3, #0
 80103cc:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80103ce:	2300      	movs	r3, #0
 80103d0:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80103d2:	2300      	movs	r3, #0
 80103d4:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d101      	bne.n	80103e0 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80103dc:	2300      	movs	r3, #0
 80103de:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80103e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80103e2:	461a      	mov	r2, r3
 80103e4:	6839      	ldr	r1, [r7, #0]
 80103e6:	4878      	ldr	r0, [pc, #480]	@ (80105c8 <PrepareFrame+0x21c>)
 80103e8:	f006 fb13 	bl	8016a12 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80103ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80103ee:	b2da      	uxtb	r2, r3
 80103f0:	4b74      	ldr	r3, [pc, #464]	@ (80105c4 <PrepareFrame+0x218>)
 80103f2:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	781a      	ldrb	r2, [r3, #0]
 80103fa:	4b72      	ldr	r3, [pc, #456]	@ (80105c4 <PrepareFrame+0x218>)
 80103fc:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010406:	b2db      	uxtb	r3, r3
 8010408:	2b07      	cmp	r3, #7
 801040a:	f000 80b9 	beq.w	8010580 <PrepareFrame+0x1d4>
 801040e:	2b07      	cmp	r3, #7
 8010410:	f300 80ce 	bgt.w	80105b0 <PrepareFrame+0x204>
 8010414:	2b02      	cmp	r3, #2
 8010416:	d006      	beq.n	8010426 <PrepareFrame+0x7a>
 8010418:	2b04      	cmp	r3, #4
 801041a:	f040 80c9 	bne.w	80105b0 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801041e:	4b69      	ldr	r3, [pc, #420]	@ (80105c4 <PrepareFrame+0x218>)
 8010420:	2201      	movs	r2, #1
 8010422:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010426:	4b67      	ldr	r3, [pc, #412]	@ (80105c4 <PrepareFrame+0x218>)
 8010428:	2204      	movs	r2, #4
 801042a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801042e:	4b65      	ldr	r3, [pc, #404]	@ (80105c4 <PrepareFrame+0x218>)
 8010430:	4a66      	ldr	r2, [pc, #408]	@ (80105cc <PrepareFrame+0x220>)
 8010432:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010436:	4b63      	ldr	r3, [pc, #396]	@ (80105c4 <PrepareFrame+0x218>)
 8010438:	22ff      	movs	r2, #255	@ 0xff
 801043a:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	781a      	ldrb	r2, [r3, #0]
 8010442:	4b60      	ldr	r3, [pc, #384]	@ (80105c4 <PrepareFrame+0x218>)
 8010444:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010448:	4a5e      	ldr	r2, [pc, #376]	@ (80105c4 <PrepareFrame+0x218>)
 801044a:	79fb      	ldrb	r3, [r7, #7]
 801044c:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010450:	4b5f      	ldr	r3, [pc, #380]	@ (80105d0 <PrepareFrame+0x224>)
 8010452:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010456:	4a5b      	ldr	r2, [pc, #364]	@ (80105c4 <PrepareFrame+0x218>)
 8010458:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	781a      	ldrb	r2, [r3, #0]
 8010460:	4b58      	ldr	r3, [pc, #352]	@ (80105c4 <PrepareFrame+0x218>)
 8010462:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010466:	4b57      	ldr	r3, [pc, #348]	@ (80105c4 <PrepareFrame+0x218>)
 8010468:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 801046c:	4b55      	ldr	r3, [pc, #340]	@ (80105c4 <PrepareFrame+0x218>)
 801046e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8010472:	4b54      	ldr	r3, [pc, #336]	@ (80105c4 <PrepareFrame+0x218>)
 8010474:	4a54      	ldr	r2, [pc, #336]	@ (80105c8 <PrepareFrame+0x21c>)
 8010476:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801047a:	f107 0318 	add.w	r3, r7, #24
 801047e:	4618      	mov	r0, r3
 8010480:	f003 f90e 	bl	80136a0 <LoRaMacCryptoGetFCntUp>
 8010484:	4603      	mov	r3, r0
 8010486:	2b00      	cmp	r3, #0
 8010488:	d001      	beq.n	801048e <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801048a:	2312      	movs	r3, #18
 801048c:	e096      	b.n	80105bc <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801048e:	69bb      	ldr	r3, [r7, #24]
 8010490:	b29a      	uxth	r2, r3
 8010492:	4b4c      	ldr	r3, [pc, #304]	@ (80105c4 <PrepareFrame+0x218>)
 8010494:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 8010498:	4b4a      	ldr	r3, [pc, #296]	@ (80105c4 <PrepareFrame+0x218>)
 801049a:	2200      	movs	r2, #0
 801049c:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80104a0:	4b48      	ldr	r3, [pc, #288]	@ (80105c4 <PrepareFrame+0x218>)
 80104a2:	2200      	movs	r2, #0
 80104a4:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80104a8:	69bb      	ldr	r3, [r7, #24]
 80104aa:	4a46      	ldr	r2, [pc, #280]	@ (80105c4 <PrepareFrame+0x218>)
 80104ac:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80104b0:	f107 0314 	add.w	r3, r7, #20
 80104b4:	4618      	mov	r0, r3
 80104b6:	f002 fabf 	bl	8012a38 <LoRaMacCommandsGetSizeSerializedCmds>
 80104ba:	4603      	mov	r3, r0
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d001      	beq.n	80104c4 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80104c0:	2313      	movs	r3, #19
 80104c2:	e07b      	b.n	80105bc <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d074      	beq.n	80105b4 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80104ca:	4b41      	ldr	r3, [pc, #260]	@ (80105d0 <PrepareFrame+0x224>)
 80104cc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7fe fd75 	bl	800efc0 <GetMaxAppPayloadWithoutFOptsLength>
 80104d6:	4603      	mov	r3, r0
 80104d8:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80104da:	4b3a      	ldr	r3, [pc, #232]	@ (80105c4 <PrepareFrame+0x218>)
 80104dc:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d01d      	beq.n	8010520 <PrepareFrame+0x174>
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	2b0f      	cmp	r3, #15
 80104e8:	d81a      	bhi.n	8010520 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80104ea:	f107 0314 	add.w	r3, r7, #20
 80104ee:	4a39      	ldr	r2, [pc, #228]	@ (80105d4 <PrepareFrame+0x228>)
 80104f0:	4619      	mov	r1, r3
 80104f2:	200f      	movs	r0, #15
 80104f4:	f002 fab6 	bl	8012a64 <LoRaMacCommandsSerializeCmds>
 80104f8:	4603      	mov	r3, r0
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d001      	beq.n	8010502 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80104fe:	2313      	movs	r3, #19
 8010500:	e05c      	b.n	80105bc <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	f003 030f 	and.w	r3, r3, #15
 8010508:	b2d9      	uxtb	r1, r3
 801050a:	68ba      	ldr	r2, [r7, #8]
 801050c:	7813      	ldrb	r3, [r2, #0]
 801050e:	f361 0303 	bfi	r3, r1, #0, #4
 8010512:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	781a      	ldrb	r2, [r3, #0]
 8010518:	4b2a      	ldr	r3, [pc, #168]	@ (80105c4 <PrepareFrame+0x218>)
 801051a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801051e:	e049      	b.n	80105b4 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010520:	4b28      	ldr	r3, [pc, #160]	@ (80105c4 <PrepareFrame+0x218>)
 8010522:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010526:	2b00      	cmp	r3, #0
 8010528:	d010      	beq.n	801054c <PrepareFrame+0x1a0>
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	2b0f      	cmp	r3, #15
 801052e:	d90d      	bls.n	801054c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010530:	7ffb      	ldrb	r3, [r7, #31]
 8010532:	f107 0114 	add.w	r1, r7, #20
 8010536:	4a28      	ldr	r2, [pc, #160]	@ (80105d8 <PrepareFrame+0x22c>)
 8010538:	4618      	mov	r0, r3
 801053a:	f002 fa93 	bl	8012a64 <LoRaMacCommandsSerializeCmds>
 801053e:	4603      	mov	r3, r0
 8010540:	2b00      	cmp	r3, #0
 8010542:	d001      	beq.n	8010548 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010544:	2313      	movs	r3, #19
 8010546:	e039      	b.n	80105bc <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010548:	230a      	movs	r3, #10
 801054a:	e037      	b.n	80105bc <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801054c:	7ffb      	ldrb	r3, [r7, #31]
 801054e:	f107 0114 	add.w	r1, r7, #20
 8010552:	4a21      	ldr	r2, [pc, #132]	@ (80105d8 <PrepareFrame+0x22c>)
 8010554:	4618      	mov	r0, r3
 8010556:	f002 fa85 	bl	8012a64 <LoRaMacCommandsSerializeCmds>
 801055a:	4603      	mov	r3, r0
 801055c:	2b00      	cmp	r3, #0
 801055e:	d001      	beq.n	8010564 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010560:	2313      	movs	r3, #19
 8010562:	e02b      	b.n	80105bc <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010564:	4b17      	ldr	r3, [pc, #92]	@ (80105c4 <PrepareFrame+0x218>)
 8010566:	2200      	movs	r2, #0
 8010568:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 801056c:	4b15      	ldr	r3, [pc, #84]	@ (80105c4 <PrepareFrame+0x218>)
 801056e:	4a1a      	ldr	r2, [pc, #104]	@ (80105d8 <PrepareFrame+0x22c>)
 8010570:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	b2da      	uxtb	r2, r3
 8010578:	4b12      	ldr	r3, [pc, #72]	@ (80105c4 <PrepareFrame+0x218>)
 801057a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 801057e:	e019      	b.n	80105b4 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d018      	beq.n	80105b8 <PrepareFrame+0x20c>
 8010586:	4b0f      	ldr	r3, [pc, #60]	@ (80105c4 <PrepareFrame+0x218>)
 8010588:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801058c:	2b00      	cmp	r3, #0
 801058e:	d013      	beq.n	80105b8 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010590:	4812      	ldr	r0, [pc, #72]	@ (80105dc <PrepareFrame+0x230>)
 8010592:	4b0c      	ldr	r3, [pc, #48]	@ (80105c4 <PrepareFrame+0x218>)
 8010594:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010598:	461a      	mov	r2, r3
 801059a:	6839      	ldr	r1, [r7, #0]
 801059c:	f006 fa39 	bl	8016a12 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80105a0:	4b08      	ldr	r3, [pc, #32]	@ (80105c4 <PrepareFrame+0x218>)
 80105a2:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80105a6:	3301      	adds	r3, #1
 80105a8:	b29a      	uxth	r2, r3
 80105aa:	4b06      	ldr	r3, [pc, #24]	@ (80105c4 <PrepareFrame+0x218>)
 80105ac:	801a      	strh	r2, [r3, #0]
            }
            break;
 80105ae:	e003      	b.n	80105b8 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80105b0:	2302      	movs	r3, #2
 80105b2:	e003      	b.n	80105bc <PrepareFrame+0x210>
            break;
 80105b4:	bf00      	nop
 80105b6:	e000      	b.n	80105ba <PrepareFrame+0x20e>
            break;
 80105b8:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80105ba:	2300      	movs	r3, #0
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3720      	adds	r7, #32
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	200007f4 	.word	0x200007f4
 80105c8:	2000092c 	.word	0x2000092c
 80105cc:	200007f6 	.word	0x200007f6
 80105d0:	20000cfc 	.word	0x20000cfc
 80105d4:	2000090c 	.word	0x2000090c
 80105d8:	20000c7c 	.word	0x20000c7c
 80105dc:	200007f7 	.word	0x200007f7

080105e0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b08a      	sub	sp, #40	@ 0x28
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	4603      	mov	r3, r0
 80105e8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80105ea:	2303      	movs	r3, #3
 80105ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80105f0:	2300      	movs	r3, #0
 80105f2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80105f4:	79fb      	ldrb	r3, [r7, #7]
 80105f6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80105f8:	4b48      	ldr	r3, [pc, #288]	@ (801071c <SendFrameOnChannel+0x13c>)
 80105fa:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80105fe:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010600:	4b46      	ldr	r3, [pc, #280]	@ (801071c <SendFrameOnChannel+0x13c>)
 8010602:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010606:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010608:	4b44      	ldr	r3, [pc, #272]	@ (801071c <SendFrameOnChannel+0x13c>)
 801060a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801060e:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010610:	4b42      	ldr	r3, [pc, #264]	@ (801071c <SendFrameOnChannel+0x13c>)
 8010612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010616:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010618:	4b41      	ldr	r3, [pc, #260]	@ (8010720 <SendFrameOnChannel+0x140>)
 801061a:	881b      	ldrh	r3, [r3, #0]
 801061c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801061e:	4b3f      	ldr	r3, [pc, #252]	@ (801071c <SendFrameOnChannel+0x13c>)
 8010620:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8010624:	f107 020f 	add.w	r2, r7, #15
 8010628:	f107 0110 	add.w	r1, r7, #16
 801062c:	4b3d      	ldr	r3, [pc, #244]	@ (8010724 <SendFrameOnChannel+0x144>)
 801062e:	f003 ff8a 	bl	8014546 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010632:	4b3b      	ldr	r3, [pc, #236]	@ (8010720 <SendFrameOnChannel+0x140>)
 8010634:	2201      	movs	r2, #1
 8010636:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801063a:	4b38      	ldr	r3, [pc, #224]	@ (801071c <SendFrameOnChannel+0x13c>)
 801063c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010640:	b2da      	uxtb	r2, r3
 8010642:	4b37      	ldr	r3, [pc, #220]	@ (8010720 <SendFrameOnChannel+0x140>)
 8010644:	f883 2436 	strb.w	r2, [r3, #1078]	@ 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8010648:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801064c:	4b34      	ldr	r3, [pc, #208]	@ (8010720 <SendFrameOnChannel+0x140>)
 801064e:	f883 2437 	strb.w	r2, [r3, #1079]	@ 0x437
    MacCtx.McpsConfirm.Channel = channel;
 8010652:	79fb      	ldrb	r3, [r7, #7]
 8010654:	4a32      	ldr	r2, [pc, #200]	@ (8010720 <SendFrameOnChannel+0x140>)
 8010656:	f8c2 3444 	str.w	r3, [r2, #1092]	@ 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801065a:	4b31      	ldr	r3, [pc, #196]	@ (8010720 <SendFrameOnChannel+0x140>)
 801065c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8010660:	4a2f      	ldr	r2, [pc, #188]	@ (8010720 <SendFrameOnChannel+0x140>)
 8010662:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010666:	4b2e      	ldr	r3, [pc, #184]	@ (8010720 <SendFrameOnChannel+0x140>)
 8010668:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 801066c:	4a2c      	ldr	r2, [pc, #176]	@ (8010720 <SendFrameOnChannel+0x140>)
 801066e:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8010672:	f001 ff49 	bl	8012508 <LoRaMacClassBIsBeaconModeActive>
 8010676:	4603      	mov	r3, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	d00b      	beq.n	8010694 <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801067c:	4b28      	ldr	r3, [pc, #160]	@ (8010720 <SendFrameOnChannel+0x140>)
 801067e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8010682:	4618      	mov	r0, r3
 8010684:	f001 ffab 	bl	80125de <LoRaMacClassBIsUplinkCollision>
 8010688:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801068a:	6a3b      	ldr	r3, [r7, #32]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d001      	beq.n	8010694 <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010690:	2310      	movs	r3, #16
 8010692:	e03e      	b.n	8010712 <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010694:	4b21      	ldr	r3, [pc, #132]	@ (801071c <SendFrameOnChannel+0x13c>)
 8010696:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801069a:	2b01      	cmp	r3, #1
 801069c:	d101      	bne.n	80106a2 <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801069e:	f001 ffa8 	bl	80125f2 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80106a2:	f001 ff42 	bl	801252a <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80106a6:	4b1d      	ldr	r3, [pc, #116]	@ (801071c <SendFrameOnChannel+0x13c>)
 80106a8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80106ac:	b2db      	uxtb	r3, r3
 80106ae:	4a1c      	ldr	r2, [pc, #112]	@ (8010720 <SendFrameOnChannel+0x140>)
 80106b0:	f892 2411 	ldrb.w	r2, [r2, #1041]	@ 0x411
 80106b4:	4611      	mov	r1, r2
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7ff fc44 	bl	800ff44 <SecureFrame>
 80106bc:	4603      	mov	r3, r0
 80106be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 80106c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d002      	beq.n	80106d0 <SendFrameOnChannel+0xf0>
    {
        return status;
 80106ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80106ce:	e020      	b.n	8010712 <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80106d0:	4b13      	ldr	r3, [pc, #76]	@ (8010720 <SendFrameOnChannel+0x140>)
 80106d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80106d6:	f043 0302 	orr.w	r3, r3, #2
 80106da:	4a11      	ldr	r2, [pc, #68]	@ (8010720 <SendFrameOnChannel+0x140>)
 80106dc:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 80106e0:	4b0f      	ldr	r3, [pc, #60]	@ (8010720 <SendFrameOnChannel+0x140>)
 80106e2:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 80106e6:	f083 0301 	eor.w	r3, r3, #1
 80106ea:	b2db      	uxtb	r3, r3
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d007      	beq.n	8010700 <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 80106f0:	4b0b      	ldr	r3, [pc, #44]	@ (8010720 <SendFrameOnChannel+0x140>)
 80106f2:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 80106f6:	3301      	adds	r3, #1
 80106f8:	b2da      	uxtb	r2, r3
 80106fa:	4b09      	ldr	r3, [pc, #36]	@ (8010720 <SendFrameOnChannel+0x140>)
 80106fc:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010700:	4b09      	ldr	r3, [pc, #36]	@ (8010728 <SendFrameOnChannel+0x148>)
 8010702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010704:	4a06      	ldr	r2, [pc, #24]	@ (8010720 <SendFrameOnChannel+0x140>)
 8010706:	8812      	ldrh	r2, [r2, #0]
 8010708:	b2d2      	uxtb	r2, r2
 801070a:	4611      	mov	r1, r2
 801070c:	4807      	ldr	r0, [pc, #28]	@ (801072c <SendFrameOnChannel+0x14c>)
 801070e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010710:	2300      	movs	r3, #0
}
 8010712:	4618      	mov	r0, r3
 8010714:	3728      	adds	r7, #40	@ 0x28
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop
 801071c:	20000cfc 	.word	0x20000cfc
 8010720:	200007f4 	.word	0x200007f4
 8010724:	20000c08 	.word	0x20000c08
 8010728:	0801eb10 	.word	0x0801eb10
 801072c:	200007f6 	.word	0x200007f6

08010730 <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b086      	sub	sp, #24
 8010734:	af00      	add	r7, sp, #0
 8010736:	4603      	mov	r3, r0
 8010738:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 801073a:	4b16      	ldr	r3, [pc, #88]	@ (8010794 <SetTxContinuousWave+0x64>)
 801073c:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 8010740:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010742:	4b15      	ldr	r3, [pc, #84]	@ (8010798 <SetTxContinuousWave+0x68>)
 8010744:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010748:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801074a:	4b13      	ldr	r3, [pc, #76]	@ (8010798 <SetTxContinuousWave+0x68>)
 801074c:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010750:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010752:	4b11      	ldr	r3, [pc, #68]	@ (8010798 <SetTxContinuousWave+0x68>)
 8010754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010758:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801075a:	4b0f      	ldr	r3, [pc, #60]	@ (8010798 <SetTxContinuousWave+0x68>)
 801075c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010760:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8010762:	88fb      	ldrh	r3, [r7, #6]
 8010764:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8010766:	4b0c      	ldr	r3, [pc, #48]	@ (8010798 <SetTxContinuousWave+0x68>)
 8010768:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801076c:	f107 0208 	add.w	r2, r7, #8
 8010770:	4611      	mov	r1, r2
 8010772:	4618      	mov	r0, r3
 8010774:	f003 ff96 	bl	80146a4 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010778:	4b06      	ldr	r3, [pc, #24]	@ (8010794 <SetTxContinuousWave+0x64>)
 801077a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801077e:	f043 0302 	orr.w	r3, r3, #2
 8010782:	4a04      	ldr	r2, [pc, #16]	@ (8010794 <SetTxContinuousWave+0x64>)
 8010784:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8010788:	2300      	movs	r3, #0
}
 801078a:	4618      	mov	r0, r3
 801078c:	3718      	adds	r7, #24
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	200007f4 	.word	0x200007f4
 8010798:	20000cfc 	.word	0x20000cfc

0801079c <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b082      	sub	sp, #8
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	4603      	mov	r3, r0
 80107a4:	6039      	str	r1, [r7, #0]
 80107a6:	80fb      	strh	r3, [r7, #6]
 80107a8:	4613      	mov	r3, r2
 80107aa:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80107ac:	4b09      	ldr	r3, [pc, #36]	@ (80107d4 <SetTxContinuousWave1+0x38>)
 80107ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107b0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80107b4:	88fa      	ldrh	r2, [r7, #6]
 80107b6:	6838      	ldr	r0, [r7, #0]
 80107b8:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80107ba:	4b07      	ldr	r3, [pc, #28]	@ (80107d8 <SetTxContinuousWave1+0x3c>)
 80107bc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80107c0:	f043 0302 	orr.w	r3, r3, #2
 80107c4:	4a04      	ldr	r2, [pc, #16]	@ (80107d8 <SetTxContinuousWave1+0x3c>)
 80107c6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 80107ca:	2300      	movs	r3, #0
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3708      	adds	r7, #8
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}
 80107d4:	0801eb10 	.word	0x0801eb10
 80107d8:	200007f4 	.word	0x200007f4

080107dc <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80107dc:	b480      	push	{r7}
 80107de:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 80107e0:	2300      	movs	r3, #0
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bc80      	pop	{r7}
 80107e8:	4770      	bx	lr

080107ea <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80107ea:	b480      	push	{r7}
 80107ec:	b083      	sub	sp, #12
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
 80107f2:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d002      	beq.n	8010800 <DetermineFrameType+0x16>
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d101      	bne.n	8010804 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010800:	2303      	movs	r3, #3
 8010802:	e03b      	b.n	801087c <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	7b1b      	ldrb	r3, [r3, #12]
 8010808:	f003 030f 	and.w	r3, r3, #15
 801080c:	b2db      	uxtb	r3, r3
 801080e:	2b00      	cmp	r3, #0
 8010810:	d008      	beq.n	8010824 <DetermineFrameType+0x3a>
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d003      	beq.n	8010824 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	2200      	movs	r2, #0
 8010820:	701a      	strb	r2, [r3, #0]
 8010822:	e02a      	b.n	801087a <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801082a:	2b00      	cmp	r3, #0
 801082c:	d103      	bne.n	8010836 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	2201      	movs	r2, #1
 8010832:	701a      	strb	r2, [r3, #0]
 8010834:	e021      	b.n	801087a <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	7b1b      	ldrb	r3, [r3, #12]
 801083a:	f003 030f 	and.w	r3, r3, #15
 801083e:	b2db      	uxtb	r3, r3
 8010840:	2b00      	cmp	r3, #0
 8010842:	d108      	bne.n	8010856 <DetermineFrameType+0x6c>
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f893 3020 	ldrb.w	r3, [r3, #32]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d103      	bne.n	8010856 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	2202      	movs	r2, #2
 8010852:	701a      	strb	r2, [r3, #0]
 8010854:	e011      	b.n	801087a <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	7b1b      	ldrb	r3, [r3, #12]
 801085a:	f003 030f 	and.w	r3, r3, #15
 801085e:	b2db      	uxtb	r3, r3
 8010860:	2b00      	cmp	r3, #0
 8010862:	d108      	bne.n	8010876 <DetermineFrameType+0x8c>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f893 3020 	ldrb.w	r3, [r3, #32]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d003      	beq.n	8010876 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	2203      	movs	r2, #3
 8010872:	701a      	strb	r2, [r3, #0]
 8010874:	e001      	b.n	801087a <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8010876:	2318      	movs	r3, #24
 8010878:	e000      	b.n	801087c <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 801087a:	2300      	movs	r3, #0
}
 801087c:	4618      	mov	r0, r3
 801087e:	370c      	adds	r7, #12
 8010880:	46bd      	mov	sp, r7
 8010882:	bc80      	pop	{r7}
 8010884:	4770      	bx	lr
	...

08010888 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8010888:	b480      	push	{r7}
 801088a:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 801088c:	4b12      	ldr	r3, [pc, #72]	@ (80108d8 <CheckRetransUnconfirmedUplink+0x50>)
 801088e:	f893 240c 	ldrb.w	r2, [r3, #1036]	@ 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8010892:	4b12      	ldr	r3, [pc, #72]	@ (80108dc <CheckRetransUnconfirmedUplink+0x54>)
 8010894:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 8010898:	429a      	cmp	r2, r3
 801089a:	d301      	bcc.n	80108a0 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 801089c:	2301      	movs	r3, #1
 801089e:	e016      	b.n	80108ce <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80108a0:	4b0d      	ldr	r3, [pc, #52]	@ (80108d8 <CheckRetransUnconfirmedUplink+0x50>)
 80108a2:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80108a6:	f003 0302 	and.w	r3, r3, #2
 80108aa:	b2db      	uxtb	r3, r3
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d00d      	beq.n	80108cc <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80108b0:	4b0a      	ldr	r3, [pc, #40]	@ (80108dc <CheckRetransUnconfirmedUplink+0x54>)
 80108b2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d101      	bne.n	80108be <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 80108ba:	2301      	movs	r3, #1
 80108bc:	e007      	b.n	80108ce <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 80108be:	4b06      	ldr	r3, [pc, #24]	@ (80108d8 <CheckRetransUnconfirmedUplink+0x50>)
 80108c0:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d101      	bne.n	80108cc <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 80108c8:	2301      	movs	r3, #1
 80108ca:	e000      	b.n	80108ce <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 80108cc:	2300      	movs	r3, #0
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bc80      	pop	{r7}
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	200007f4 	.word	0x200007f4
 80108dc:	20000cfc 	.word	0x20000cfc

080108e0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80108e0:	b480      	push	{r7}
 80108e2:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80108e4:	4b0e      	ldr	r3, [pc, #56]	@ (8010920 <CheckRetransConfirmedUplink+0x40>)
 80108e6:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
        MacCtx.AckTimeoutRetries )
 80108ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010920 <CheckRetransConfirmedUplink+0x40>)
 80108ec:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d301      	bcc.n	80108f8 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 80108f4:	2301      	movs	r3, #1
 80108f6:	e00f      	b.n	8010918 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80108f8:	4b09      	ldr	r3, [pc, #36]	@ (8010920 <CheckRetransConfirmedUplink+0x40>)
 80108fa:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80108fe:	f003 0302 	and.w	r3, r3, #2
 8010902:	b2db      	uxtb	r3, r3
 8010904:	2b00      	cmp	r3, #0
 8010906:	d006      	beq.n	8010916 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010908:	4b05      	ldr	r3, [pc, #20]	@ (8010920 <CheckRetransConfirmedUplink+0x40>)
 801090a:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 801090e:	2b00      	cmp	r3, #0
 8010910:	d001      	beq.n	8010916 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8010912:	2301      	movs	r3, #1
 8010914:	e000      	b.n	8010918 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8010916:	2300      	movs	r3, #0
}
 8010918:	4618      	mov	r0, r3
 801091a:	46bd      	mov	sp, r7
 801091c:	bc80      	pop	{r7}
 801091e:	4770      	bx	lr
 8010920:	200007f4 	.word	0x200007f4

08010924 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8010924:	b480      	push	{r7}
 8010926:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010928:	4b1a      	ldr	r3, [pc, #104]	@ (8010994 <StopRetransmission+0x70>)
 801092a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 801092e:	f003 0302 	and.w	r3, r3, #2
 8010932:	b2db      	uxtb	r3, r3
 8010934:	2b00      	cmp	r3, #0
 8010936:	d009      	beq.n	801094c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010938:	4b16      	ldr	r3, [pc, #88]	@ (8010994 <StopRetransmission+0x70>)
 801093a:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801093e:	2b00      	cmp	r3, #0
 8010940:	d00e      	beq.n	8010960 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8010942:	4b14      	ldr	r3, [pc, #80]	@ (8010994 <StopRetransmission+0x70>)
 8010944:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010948:	2b01      	cmp	r3, #1
 801094a:	d009      	beq.n	8010960 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801094c:	4b12      	ldr	r3, [pc, #72]	@ (8010998 <StopRetransmission+0x74>)
 801094e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8010952:	2b00      	cmp	r3, #0
 8010954:	d004      	beq.n	8010960 <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8010956:	4b10      	ldr	r3, [pc, #64]	@ (8010998 <StopRetransmission+0x74>)
 8010958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801095a:	3301      	adds	r3, #1
 801095c:	4a0e      	ldr	r2, [pc, #56]	@ (8010998 <StopRetransmission+0x74>)
 801095e:	6293      	str	r3, [r2, #40]	@ 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010960:	4b0c      	ldr	r3, [pc, #48]	@ (8010994 <StopRetransmission+0x70>)
 8010962:	2200      	movs	r2, #0
 8010964:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.NodeAckRequested = false;
 8010968:	4b0a      	ldr	r3, [pc, #40]	@ (8010994 <StopRetransmission+0x70>)
 801096a:	2200      	movs	r2, #0
 801096c:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8010970:	4b08      	ldr	r3, [pc, #32]	@ (8010994 <StopRetransmission+0x70>)
 8010972:	2200      	movs	r2, #0
 8010974:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010978:	4b06      	ldr	r3, [pc, #24]	@ (8010994 <StopRetransmission+0x70>)
 801097a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801097e:	f023 0302 	bic.w	r3, r3, #2
 8010982:	4a04      	ldr	r2, [pc, #16]	@ (8010994 <StopRetransmission+0x70>)
 8010984:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8010988:	2301      	movs	r3, #1
}
 801098a:	4618      	mov	r0, r3
 801098c:	46bd      	mov	sp, r7
 801098e:	bc80      	pop	{r7}
 8010990:	4770      	bx	lr
 8010992:	bf00      	nop
 8010994:	200007f4 	.word	0x200007f4
 8010998:	20000cfc 	.word	0x20000cfc

0801099c <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 801099c:	b580      	push	{r7, lr}
 801099e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80109a0:	4b08      	ldr	r3, [pc, #32]	@ (80109c4 <OnMacProcessNotify+0x28>)
 80109a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d00a      	beq.n	80109c0 <OnMacProcessNotify+0x24>
 80109aa:	4b06      	ldr	r3, [pc, #24]	@ (80109c4 <OnMacProcessNotify+0x28>)
 80109ac:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80109b0:	695b      	ldr	r3, [r3, #20]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d004      	beq.n	80109c0 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80109b6:	4b03      	ldr	r3, [pc, #12]	@ (80109c4 <OnMacProcessNotify+0x28>)
 80109b8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80109bc:	695b      	ldr	r3, [r3, #20]
 80109be:	4798      	blx	r3
    }
}
 80109c0:	bf00      	nop
 80109c2:	bd80      	pop	{r7, pc}
 80109c4:	200007f4 	.word	0x200007f4

080109c8 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	4603      	mov	r3, r0
 80109d0:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80109d2:	4b0b      	ldr	r3, [pc, #44]	@ (8010a00 <CallNvmDataChangeCallback+0x38>)
 80109d4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d00c      	beq.n	80109f6 <CallNvmDataChangeCallback+0x2e>
 80109dc:	4b08      	ldr	r3, [pc, #32]	@ (8010a00 <CallNvmDataChangeCallback+0x38>)
 80109de:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80109e2:	691b      	ldr	r3, [r3, #16]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d006      	beq.n	80109f6 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80109e8:	4b05      	ldr	r3, [pc, #20]	@ (8010a00 <CallNvmDataChangeCallback+0x38>)
 80109ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80109ee:	691b      	ldr	r3, [r3, #16]
 80109f0:	88fa      	ldrh	r2, [r7, #6]
 80109f2:	4610      	mov	r0, r2
 80109f4:	4798      	blx	r3
    }
}
 80109f6:	bf00      	nop
 80109f8:	3708      	adds	r7, #8
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	200007f4 	.word	0x200007f4

08010a04 <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8010a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8010a78 <AckTimeoutRetriesProcess+0x74>)
 8010a0c:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 8010a10:	4b19      	ldr	r3, [pc, #100]	@ (8010a78 <AckTimeoutRetriesProcess+0x74>)
 8010a12:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d229      	bcs.n	8010a6e <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8010a1a:	4b17      	ldr	r3, [pc, #92]	@ (8010a78 <AckTimeoutRetriesProcess+0x74>)
 8010a1c:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 8010a20:	3301      	adds	r3, #1
 8010a22:	b2da      	uxtb	r2, r3
 8010a24:	4b14      	ldr	r3, [pc, #80]	@ (8010a78 <AckTimeoutRetriesProcess+0x74>)
 8010a26:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8010a2a:	4b13      	ldr	r3, [pc, #76]	@ (8010a78 <AckTimeoutRetriesProcess+0x74>)
 8010a2c:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 8010a30:	f003 0301 	and.w	r3, r3, #1
 8010a34:	b2db      	uxtb	r3, r3
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d019      	beq.n	8010a6e <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010a3a:	2322      	movs	r3, #34	@ 0x22
 8010a3c:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8010a7c <AckTimeoutRetriesProcess+0x78>)
 8010a40:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010a44:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010a46:	4b0d      	ldr	r3, [pc, #52]	@ (8010a7c <AckTimeoutRetriesProcess+0x78>)
 8010a48:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010a4c:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8010a7c <AckTimeoutRetriesProcess+0x78>)
 8010a50:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010a54:	f107 0208 	add.w	r2, r7, #8
 8010a58:	4611      	mov	r1, r2
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f003 fccd 	bl	80143fa <RegionGetPhyParam>
 8010a60:	4603      	mov	r3, r0
 8010a62:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	b25a      	sxtb	r2, r3
 8010a68:	4b04      	ldr	r3, [pc, #16]	@ (8010a7c <AckTimeoutRetriesProcess+0x78>)
 8010a6a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
    }
}
 8010a6e:	bf00      	nop
 8010a70:	3710      	adds	r7, #16
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	200007f4 	.word	0x200007f4
 8010a7c:	20000cfc 	.word	0x20000cfc

08010a80 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b084      	sub	sp, #16
 8010a84:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8010a86:	4b14      	ldr	r3, [pc, #80]	@ (8010ad8 <AckTimeoutRetriesFinalize+0x58>)
 8010a88:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 8010a8c:	f083 0301 	eor.w	r3, r3, #1
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d015      	beq.n	8010ac2 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8010a96:	2302      	movs	r3, #2
 8010a98:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8010a9a:	4b10      	ldr	r3, [pc, #64]	@ (8010adc <AckTimeoutRetriesFinalize+0x5c>)
 8010a9c:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8010a9e:	4b10      	ldr	r3, [pc, #64]	@ (8010ae0 <AckTimeoutRetriesFinalize+0x60>)
 8010aa0:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010aa2:	4b10      	ldr	r3, [pc, #64]	@ (8010ae4 <AckTimeoutRetriesFinalize+0x64>)
 8010aa4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010aa8:	1d3a      	adds	r2, r7, #4
 8010aaa:	4611      	mov	r1, r2
 8010aac:	4618      	mov	r0, r3
 8010aae:	f003 fccd 	bl	801444c <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8010ab2:	4b09      	ldr	r3, [pc, #36]	@ (8010ad8 <AckTimeoutRetriesFinalize+0x58>)
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 8010aba:	4b07      	ldr	r3, [pc, #28]	@ (8010ad8 <AckTimeoutRetriesFinalize+0x58>)
 8010abc:	2200      	movs	r2, #0
 8010abe:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010ac2:	4b05      	ldr	r3, [pc, #20]	@ (8010ad8 <AckTimeoutRetriesFinalize+0x58>)
 8010ac4:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 8010ac8:	4b03      	ldr	r3, [pc, #12]	@ (8010ad8 <AckTimeoutRetriesFinalize+0x58>)
 8010aca:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
}
 8010ace:	bf00      	nop
 8010ad0:	3710      	adds	r7, #16
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	200007f4 	.word	0x200007f4
 8010adc:	20000f1c 	.word	0x20000f1c
 8010ae0:	20000fb0 	.word	0x20000fb0
 8010ae4:	20000cfc 	.word	0x20000cfc

08010ae8 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8010ae8:	b480      	push	{r7}
 8010aea:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010aec:	4b0b      	ldr	r3, [pc, #44]	@ (8010b1c <IsRequestPending+0x34>)
 8010aee:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8010af2:	f003 0304 	and.w	r3, r3, #4
 8010af6:	b2db      	uxtb	r3, r3
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d107      	bne.n	8010b0c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010afc:	4b07      	ldr	r3, [pc, #28]	@ (8010b1c <IsRequestPending+0x34>)
 8010afe:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8010b02:	f003 0301 	and.w	r3, r3, #1
 8010b06:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d001      	beq.n	8010b10 <IsRequestPending+0x28>
    {
        return 1;
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	e000      	b.n	8010b12 <IsRequestPending+0x2a>
    }
    return 0;
 8010b10:	2300      	movs	r3, #0
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bc80      	pop	{r7}
 8010b18:	4770      	bx	lr
 8010b1a:	bf00      	nop
 8010b1c:	200007f4 	.word	0x200007f4

08010b20 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010b20:	b590      	push	{r4, r7, lr}
 8010b22:	b08f      	sub	sp, #60	@ 0x3c
 8010b24:	af02      	add	r7, sp, #8
 8010b26:	6178      	str	r0, [r7, #20]
 8010b28:	6139      	str	r1, [r7, #16]
 8010b2a:	4613      	mov	r3, r2
 8010b2c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d002      	beq.n	8010b3a <LoRaMacInitialization+0x1a>
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d101      	bne.n	8010b3e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010b3a:	2303      	movs	r3, #3
 8010b3c:	e273      	b.n	8011026 <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d00b      	beq.n	8010b5e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d007      	beq.n	8010b5e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d003      	beq.n	8010b5e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d101      	bne.n	8010b62 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010b5e:	2303      	movs	r3, #3
 8010b60:	e261      	b.n	8011026 <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010b62:	7bfb      	ldrb	r3, [r7, #15]
 8010b64:	4618      	mov	r0, r3
 8010b66:	f003 fc38 	bl	80143da <RegionIsActive>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	f083 0301 	eor.w	r3, r3, #1
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d001      	beq.n	8010b7a <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010b76:	2309      	movs	r3, #9
 8010b78:	e255      	b.n	8011026 <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010b7a:	6978      	ldr	r0, [r7, #20]
 8010b7c:	f002 f894 	bl	8012ca8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010b80:	f44f 62ee 	mov.w	r2, #1904	@ 0x770
 8010b84:	2100      	movs	r1, #0
 8010b86:	48c7      	ldr	r0, [pc, #796]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010b88:	f005 ff7e 	bl	8016a88 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010b8c:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
 8010b90:	2100      	movs	r1, #0
 8010b92:	48c5      	ldr	r0, [pc, #788]	@ (8010ea8 <LoRaMacInitialization+0x388>)
 8010b94:	f005 ff78 	bl	8016a88 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010b98:	4bc3      	ldr	r3, [pc, #780]	@ (8010ea8 <LoRaMacInitialization+0x388>)
 8010b9a:	2201      	movs	r2, #1
 8010b9c:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetries = 1;
 8010ba0:	4bc1      	ldr	r3, [pc, #772]	@ (8010ea8 <LoRaMacInitialization+0x388>)
 8010ba2:	2201      	movs	r2, #1
 8010ba4:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8010ba8:	4abe      	ldr	r2, [pc, #760]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010baa:	7bfb      	ldrb	r3, [r7, #15]
 8010bac:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010bb0:	4bbc      	ldr	r3, [pc, #752]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8010bb8:	4bba      	ldr	r3, [pc, #744]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010bba:	2200      	movs	r2, #0
 8010bbc:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010bc0:	4bb8      	ldr	r3, [pc, #736]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010bc2:	4aba      	ldr	r2, [pc, #744]	@ (8010eac <LoRaMacInitialization+0x38c>)
 8010bc4:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010bc8:	230f      	movs	r3, #15
 8010bca:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010bce:	4bb5      	ldr	r3, [pc, #724]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010bd0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010bd4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010bd8:	4611      	mov	r1, r2
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f003 fc0d 	bl	80143fa <RegionGetPhyParam>
 8010be0:	4603      	mov	r3, r0
 8010be2:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	bf14      	ite	ne
 8010bea:	2301      	movne	r3, #1
 8010bec:	2300      	moveq	r3, #0
 8010bee:	b2da      	uxtb	r2, r3
 8010bf0:	4bac      	ldr	r3, [pc, #688]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010bf2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010bf6:	230a      	movs	r3, #10
 8010bf8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010bfc:	4ba9      	ldr	r3, [pc, #676]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010bfe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010c02:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010c06:	4611      	mov	r1, r2
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f003 fbf6 	bl	80143fa <RegionGetPhyParam>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c14:	b25a      	sxtb	r2, r3
 8010c16:	4ba3      	ldr	r3, [pc, #652]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010c18:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010c1c:	2306      	movs	r3, #6
 8010c1e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c22:	4ba0      	ldr	r3, [pc, #640]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010c24:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010c28:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010c2c:	4611      	mov	r1, r2
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f003 fbe3 	bl	80143fa <RegionGetPhyParam>
 8010c34:	4603      	mov	r3, r0
 8010c36:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c3a:	b25a      	sxtb	r2, r3
 8010c3c:	4b99      	ldr	r3, [pc, #612]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010c3e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010c42:	2310      	movs	r3, #16
 8010c44:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c48:	4b96      	ldr	r3, [pc, #600]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010c4a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010c4e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010c52:	4611      	mov	r1, r2
 8010c54:	4618      	mov	r0, r3
 8010c56:	f003 fbd0 	bl	80143fa <RegionGetPhyParam>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c60:	4a90      	ldr	r2, [pc, #576]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010c62:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010c66:	2311      	movs	r3, #17
 8010c68:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c6c:	4b8d      	ldr	r3, [pc, #564]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010c6e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010c72:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010c76:	4611      	mov	r1, r2
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f003 fbbe 	bl	80143fa <RegionGetPhyParam>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c84:	4a87      	ldr	r2, [pc, #540]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010c86:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010c8a:	2312      	movs	r3, #18
 8010c8c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010c90:	4b84      	ldr	r3, [pc, #528]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010c92:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010c96:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010c9a:	4611      	mov	r1, r2
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f003 fbac 	bl	80143fa <RegionGetPhyParam>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ca8:	4a7e      	ldr	r2, [pc, #504]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010caa:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010cae:	2313      	movs	r3, #19
 8010cb0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cb4:	4b7b      	ldr	r3, [pc, #492]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010cb6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010cba:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010cbe:	4611      	mov	r1, r2
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f003 fb9a 	bl	80143fa <RegionGetPhyParam>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ccc:	4a75      	ldr	r2, [pc, #468]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010cce:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010cd2:	2314      	movs	r3, #20
 8010cd4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cd8:	4b72      	ldr	r3, [pc, #456]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010cda:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010cde:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010ce2:	4611      	mov	r1, r2
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f003 fb88 	bl	80143fa <RegionGetPhyParam>
 8010cea:	4603      	mov	r3, r0
 8010cec:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cf0:	4a6c      	ldr	r2, [pc, #432]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010cf2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010cf6:	2317      	movs	r3, #23
 8010cf8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010cfc:	4b69      	ldr	r3, [pc, #420]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010cfe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010d02:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010d06:	4611      	mov	r1, r2
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f003 fb76 	bl	80143fa <RegionGetPhyParam>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d14:	b2da      	uxtb	r2, r3
 8010d16:	4b63      	ldr	r3, [pc, #396]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010d18:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010d1c:	2318      	movs	r3, #24
 8010d1e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d22:	4b60      	ldr	r3, [pc, #384]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010d24:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010d28:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010d2c:	4611      	mov	r1, r2
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f003 fb63 	bl	80143fa <RegionGetPhyParam>
 8010d34:	4603      	mov	r3, r0
 8010d36:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d3a:	4a5a      	ldr	r2, [pc, #360]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010d3c:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d42:	4a58      	ldr	r2, [pc, #352]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010d44:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010d48:	2319      	movs	r3, #25
 8010d4a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d4e:	4b55      	ldr	r3, [pc, #340]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010d50:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010d54:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010d58:	4611      	mov	r1, r2
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f003 fb4d 	bl	80143fa <RegionGetPhyParam>
 8010d60:	4603      	mov	r3, r0
 8010d62:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d66:	b2da      	uxtb	r2, r3
 8010d68:	4b4e      	ldr	r3, [pc, #312]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010d6a:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d70:	b2da      	uxtb	r2, r3
 8010d72:	4b4c      	ldr	r3, [pc, #304]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010d74:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010d78:	231e      	movs	r3, #30
 8010d7a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d7e:	4b49      	ldr	r3, [pc, #292]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010d80:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010d84:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010d88:	4611      	mov	r1, r2
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f003 fb35 	bl	80143fa <RegionGetPhyParam>
 8010d90:	4603      	mov	r3, r0
 8010d92:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d96:	b2da      	uxtb	r2, r3
 8010d98:	4b42      	ldr	r3, [pc, #264]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010d9a:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010d9e:	231f      	movs	r3, #31
 8010da0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010da4:	4b3f      	ldr	r3, [pc, #252]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010da6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010daa:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010dae:	4611      	mov	r1, r2
 8010db0:	4618      	mov	r0, r3
 8010db2:	f003 fb22 	bl	80143fa <RegionGetPhyParam>
 8010db6:	4603      	mov	r3, r0
 8010db8:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dbc:	b2da      	uxtb	r2, r3
 8010dbe:	4b39      	ldr	r3, [pc, #228]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010dc0:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010dc4:	2320      	movs	r3, #32
 8010dc6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dca:	4b36      	ldr	r3, [pc, #216]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010dcc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010dd0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010dd4:	4611      	mov	r1, r2
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f003 fb0f 	bl	80143fa <RegionGetPhyParam>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010de2:	4a30      	ldr	r2, [pc, #192]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010de4:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010de8:	2321      	movs	r3, #33	@ 0x21
 8010dea:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dee:	4b2d      	ldr	r3, [pc, #180]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010df0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010df4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010df8:	4611      	mov	r1, r2
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f003 fafd 	bl	80143fa <RegionGetPhyParam>
 8010e00:	4603      	mov	r3, r0
 8010e02:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e06:	4a27      	ldr	r2, [pc, #156]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e08:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010e0c:	230b      	movs	r3, #11
 8010e0e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e12:	4b24      	ldr	r3, [pc, #144]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e14:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010e18:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010e1c:	4611      	mov	r1, r2
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f003 faeb 	bl	80143fa <RegionGetPhyParam>
 8010e24:	4603      	mov	r3, r0
 8010e26:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8010e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e2a:	b29a      	uxth	r2, r3
 8010e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e2e:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010e32:	230c      	movs	r3, #12
 8010e34:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e38:	4b1a      	ldr	r3, [pc, #104]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e3a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010e3e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010e42:	4611      	mov	r1, r2
 8010e44:	4618      	mov	r0, r3
 8010e46:	f003 fad8 	bl	80143fa <RegionGetPhyParam>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8010e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e50:	b29a      	uxth	r2, r3
 8010e52:	4b14      	ldr	r3, [pc, #80]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e54:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010e58:	4b12      	ldr	r3, [pc, #72]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e5a:	2201      	movs	r2, #1
 8010e5c:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010e60:	4b10      	ldr	r3, [pc, #64]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e62:	220a      	movs	r2, #10
 8010e64:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010e68:	4b0e      	ldr	r3, [pc, #56]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e6a:	2206      	movs	r2, #6
 8010e6c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010e70:	4b0c      	ldr	r3, [pc, #48]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010e76:	4a0b      	ldr	r2, [pc, #44]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e7c:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8010e80:	4b08      	ldr	r3, [pc, #32]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010e86:	4b07      	ldr	r3, [pc, #28]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010e8c:	4a05      	ldr	r2, [pc, #20]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e8e:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010e90:	4b04      	ldr	r3, [pc, #16]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010e96:	4a03      	ldr	r2, [pc, #12]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e98:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010e9a:	4b02      	ldr	r3, [pc, #8]	@ (8010ea4 <LoRaMacInitialization+0x384>)
 8010e9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010ea0:	e006      	b.n	8010eb0 <LoRaMacInitialization+0x390>
 8010ea2:	bf00      	nop
 8010ea4:	20000cfc 	.word	0x20000cfc
 8010ea8:	200007f4 	.word	0x200007f4
 8010eac:	01000300 	.word	0x01000300
 8010eb0:	4a5f      	ldr	r2, [pc, #380]	@ (8011030 <LoRaMacInitialization+0x510>)
 8010eb2:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010eb4:	4b5e      	ldr	r3, [pc, #376]	@ (8011030 <LoRaMacInitialization+0x510>)
 8010eb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010eba:	4a5d      	ldr	r2, [pc, #372]	@ (8011030 <LoRaMacInitialization+0x510>)
 8010ebc:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010ebe:	4b5c      	ldr	r3, [pc, #368]	@ (8011030 <LoRaMacInitialization+0x510>)
 8010ec0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8010ec4:	4a5a      	ldr	r2, [pc, #360]	@ (8011030 <LoRaMacInitialization+0x510>)
 8010ec6:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010ec8:	4b59      	ldr	r3, [pc, #356]	@ (8011030 <LoRaMacInitialization+0x510>)
 8010eca:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 8010ece:	4b58      	ldr	r3, [pc, #352]	@ (8011030 <LoRaMacInitialization+0x510>)
 8010ed0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010eda:	4b56      	ldr	r3, [pc, #344]	@ (8011034 <LoRaMacInitialization+0x514>)
 8010edc:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010ede:	4b56      	ldr	r3, [pc, #344]	@ (8011038 <LoRaMacInitialization+0x518>)
 8010ee0:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010ee2:	4b53      	ldr	r3, [pc, #332]	@ (8011030 <LoRaMacInitialization+0x510>)
 8010ee4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010ee8:	f107 0218 	add.w	r2, r7, #24
 8010eec:	4611      	mov	r1, r2
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f003 faac 	bl	801444c <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8010ef4:	4a51      	ldr	r2, [pc, #324]	@ (801103c <LoRaMacInitialization+0x51c>)
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 8010efc:	2000      	movs	r0, #0
 8010efe:	f7ff f8b7 	bl	8010070 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010f02:	4b4b      	ldr	r3, [pc, #300]	@ (8011030 <LoRaMacInitialization+0x510>)
 8010f04:	2201      	movs	r2, #1
 8010f06:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 8010f0a:	4a4c      	ldr	r2, [pc, #304]	@ (801103c <LoRaMacInitialization+0x51c>)
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 8010f12:	4b4a      	ldr	r3, [pc, #296]	@ (801103c <LoRaMacInitialization+0x51c>)
 8010f14:	2200      	movs	r2, #0
 8010f16:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8010f1a:	4b48      	ldr	r3, [pc, #288]	@ (801103c <LoRaMacInitialization+0x51c>)
 8010f1c:	2201      	movs	r2, #1
 8010f1e:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010f22:	4b43      	ldr	r3, [pc, #268]	@ (8011030 <LoRaMacInitialization+0x510>)
 8010f24:	2200      	movs	r2, #0
 8010f26:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010f28:	4b41      	ldr	r3, [pc, #260]	@ (8011030 <LoRaMacInitialization+0x510>)
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010f2e:	2300      	movs	r3, #0
 8010f30:	9300      	str	r3, [sp, #0]
 8010f32:	4b43      	ldr	r3, [pc, #268]	@ (8011040 <LoRaMacInitialization+0x520>)
 8010f34:	2200      	movs	r2, #0
 8010f36:	f04f 31ff 	mov.w	r1, #4294967295
 8010f3a:	4842      	ldr	r0, [pc, #264]	@ (8011044 <LoRaMacInitialization+0x524>)
 8010f3c:	f009 fe78 	bl	801ac30 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010f40:	2300      	movs	r3, #0
 8010f42:	9300      	str	r3, [sp, #0]
 8010f44:	4b40      	ldr	r3, [pc, #256]	@ (8011048 <LoRaMacInitialization+0x528>)
 8010f46:	2200      	movs	r2, #0
 8010f48:	f04f 31ff 	mov.w	r1, #4294967295
 8010f4c:	483f      	ldr	r0, [pc, #252]	@ (801104c <LoRaMacInitialization+0x52c>)
 8010f4e:	f009 fe6f 	bl	801ac30 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010f52:	2300      	movs	r3, #0
 8010f54:	9300      	str	r3, [sp, #0]
 8010f56:	4b3e      	ldr	r3, [pc, #248]	@ (8011050 <LoRaMacInitialization+0x530>)
 8010f58:	2200      	movs	r2, #0
 8010f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8010f5e:	483d      	ldr	r0, [pc, #244]	@ (8011054 <LoRaMacInitialization+0x534>)
 8010f60:	f009 fe66 	bl	801ac30 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010f64:	2300      	movs	r3, #0
 8010f66:	9300      	str	r3, [sp, #0]
 8010f68:	4b3b      	ldr	r3, [pc, #236]	@ (8011058 <LoRaMacInitialization+0x538>)
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8010f70:	483a      	ldr	r0, [pc, #232]	@ (801105c <LoRaMacInitialization+0x53c>)
 8010f72:	f009 fe5d 	bl	801ac30 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010f76:	4c2e      	ldr	r4, [pc, #184]	@ (8011030 <LoRaMacInitialization+0x510>)
 8010f78:	463b      	mov	r3, r7
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f009 f9ce 	bl	801a31c <SysTimeGetMcuTime>
 8010f80:	f504 7390 	add.w	r3, r4, #288	@ 0x120
 8010f84:	463a      	mov	r2, r7
 8010f86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f8a:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010f8e:	4b2b      	ldr	r3, [pc, #172]	@ (801103c <LoRaMacInitialization+0x51c>)
 8010f90:	4a33      	ldr	r2, [pc, #204]	@ (8011060 <LoRaMacInitialization+0x540>)
 8010f92:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010f96:	4b29      	ldr	r3, [pc, #164]	@ (801103c <LoRaMacInitialization+0x51c>)
 8010f98:	4a32      	ldr	r2, [pc, #200]	@ (8011064 <LoRaMacInitialization+0x544>)
 8010f9a:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010f9e:	4b27      	ldr	r3, [pc, #156]	@ (801103c <LoRaMacInitialization+0x51c>)
 8010fa0:	4a31      	ldr	r2, [pc, #196]	@ (8011068 <LoRaMacInitialization+0x548>)
 8010fa2:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010fa6:	4b25      	ldr	r3, [pc, #148]	@ (801103c <LoRaMacInitialization+0x51c>)
 8010fa8:	4a30      	ldr	r2, [pc, #192]	@ (801106c <LoRaMacInitialization+0x54c>)
 8010faa:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010fae:	4b23      	ldr	r3, [pc, #140]	@ (801103c <LoRaMacInitialization+0x51c>)
 8010fb0:	4a2f      	ldr	r2, [pc, #188]	@ (8011070 <LoRaMacInitialization+0x550>)
 8010fb2:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8010fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8011074 <LoRaMacInitialization+0x554>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	482f      	ldr	r0, [pc, #188]	@ (8011078 <LoRaMacInitialization+0x558>)
 8010fbc:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8010fbe:	482f      	ldr	r0, [pc, #188]	@ (801107c <LoRaMacInitialization+0x55c>)
 8010fc0:	f7fa fe30 	bl	800bc24 <SecureElementInit>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d001      	beq.n	8010fce <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010fca:	2311      	movs	r3, #17
 8010fcc:	e02b      	b.n	8011026 <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8010fce:	4818      	ldr	r0, [pc, #96]	@ (8011030 <LoRaMacInitialization+0x510>)
 8010fd0:	f002 fb2a 	bl	8013628 <LoRaMacCryptoInit>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d001      	beq.n	8010fde <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010fda:	2311      	movs	r3, #17
 8010fdc:	e023      	b.n	8011026 <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8010fde:	f001 fc25 	bl	801282c <LoRaMacCommandsInit>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d001      	beq.n	8010fec <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010fe8:	2313      	movs	r3, #19
 8010fea:	e01c      	b.n	8011026 <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8010fec:	4824      	ldr	r0, [pc, #144]	@ (8011080 <LoRaMacInitialization+0x560>)
 8010fee:	f002 fbe5 	bl	80137bc <LoRaMacCryptoSetMulticastReference>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d001      	beq.n	8010ffc <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010ff8:	2311      	movs	r3, #17
 8010ffa:	e014      	b.n	8011026 <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8010ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8011074 <LoRaMacInitialization+0x554>)
 8010ffe:	695b      	ldr	r3, [r3, #20]
 8011000:	4798      	blx	r3
 8011002:	4603      	mov	r3, r0
 8011004:	4618      	mov	r0, r3
 8011006:	f005 fcdf 	bl	80169c8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801100a:	4b1a      	ldr	r3, [pc, #104]	@ (8011074 <LoRaMacInitialization+0x554>)
 801100c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801100e:	4a08      	ldr	r2, [pc, #32]	@ (8011030 <LoRaMacInitialization+0x510>)
 8011010:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8011014:	4610      	mov	r0, r2
 8011016:	4798      	blx	r3
    Radio.Sleep( );
 8011018:	4b16      	ldr	r3, [pc, #88]	@ (8011074 <LoRaMacInitialization+0x554>)
 801101a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801101c:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801101e:	2001      	movs	r0, #1
 8011020:	f7fd fb32 	bl	800e688 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8011024:	2300      	movs	r3, #0
}
 8011026:	4618      	mov	r0, r3
 8011028:	3734      	adds	r7, #52	@ 0x34
 801102a:	46bd      	mov	sp, r7
 801102c:	bd90      	pop	{r4, r7, pc}
 801102e:	bf00      	nop
 8011030:	20000cfc 	.word	0x20000cfc
 8011034:	20000f1c 	.word	0x20000f1c
 8011038:	20000fb0 	.word	0x20000fb0
 801103c:	200007f4 	.word	0x200007f4
 8011040:	0800ebc9 	.word	0x0800ebc9
 8011044:	20000b5c 	.word	0x20000b5c
 8011048:	0800ec3d 	.word	0x0800ec3d
 801104c:	20000b74 	.word	0x20000b74
 8011050:	0800eca9 	.word	0x0800eca9
 8011054:	20000b8c 	.word	0x20000b8c
 8011058:	0800ed1d 	.word	0x0800ed1d
 801105c:	20000be8 	.word	0x20000be8
 8011060:	0800d789 	.word	0x0800d789
 8011064:	0800d7e5 	.word	0x0800d7e5
 8011068:	0800d87d 	.word	0x0800d87d
 801106c:	0800d851 	.word	0x0800d851
 8011070:	0800d899 	.word	0x0800d899
 8011074:	0801eb10 	.word	0x0801eb10
 8011078:	20000b40 	.word	0x20000b40
 801107c:	20000e44 	.word	0x20000e44
 8011080:	20000de4 	.word	0x20000de4

08011084 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011084:	b580      	push	{r7, lr}
 8011086:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011088:	4b04      	ldr	r3, [pc, #16]	@ (801109c <LoRaMacStart+0x18>)
 801108a:	2200      	movs	r2, #0
 801108c:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 8011090:	f7fc fc18 	bl	800d8c4 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8011094:	2300      	movs	r3, #0
}
 8011096:	4618      	mov	r0, r3
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	200007f4 	.word	0x200007f4

080110a0 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80110a4:	f7fd fac4 	bl	800e630 <LoRaMacIsBusy>
 80110a8:	4603      	mov	r3, r0
 80110aa:	f083 0301 	eor.w	r3, r3, #1
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d00d      	beq.n	80110d0 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80110b4:	4b0b      	ldr	r3, [pc, #44]	@ (80110e4 <LoRaMacStop+0x44>)
 80110b6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80110ba:	2b02      	cmp	r3, #2
 80110bc:	d102      	bne.n	80110c4 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 80110be:	4b0a      	ldr	r3, [pc, #40]	@ (80110e8 <LoRaMacStop+0x48>)
 80110c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110c2:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 80110c4:	4b09      	ldr	r3, [pc, #36]	@ (80110ec <LoRaMacStop+0x4c>)
 80110c6:	2201      	movs	r2, #1
 80110c8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 80110cc:	2300      	movs	r3, #0
 80110ce:	e007      	b.n	80110e0 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80110d0:	4b06      	ldr	r3, [pc, #24]	@ (80110ec <LoRaMacStop+0x4c>)
 80110d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80110d6:	2b01      	cmp	r3, #1
 80110d8:	d101      	bne.n	80110de <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 80110da:	2300      	movs	r3, #0
 80110dc:	e000      	b.n	80110e0 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 80110de:	2301      	movs	r3, #1
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	bd80      	pop	{r7, pc}
 80110e4:	20000cfc 	.word	0x20000cfc
 80110e8:	0801eb10 	.word	0x0801eb10
 80110ec:	200007f4 	.word	0x200007f4

080110f0 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80110f4:	480d      	ldr	r0, [pc, #52]	@ (801112c <LoRaMacHalt+0x3c>)
 80110f6:	f009 fe3f 	bl	801ad78 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80110fa:	480d      	ldr	r0, [pc, #52]	@ (8011130 <LoRaMacHalt+0x40>)
 80110fc:	f009 fe3c 	bl	801ad78 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011100:	480c      	ldr	r0, [pc, #48]	@ (8011134 <LoRaMacHalt+0x44>)
 8011102:	f009 fe39 	bl	801ad78 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8011106:	480c      	ldr	r0, [pc, #48]	@ (8011138 <LoRaMacHalt+0x48>)
 8011108:	f009 fe36 	bl	801ad78 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 801110c:	f001 fa0d 	bl	801252a <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8011110:	4b0a      	ldr	r3, [pc, #40]	@ (801113c <LoRaMacHalt+0x4c>)
 8011112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011114:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8011116:	4b0a      	ldr	r3, [pc, #40]	@ (8011140 <LoRaMacHalt+0x50>)
 8011118:	2200      	movs	r2, #0
 801111a:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 801111e:	4b08      	ldr	r3, [pc, #32]	@ (8011140 <LoRaMacHalt+0x50>)
 8011120:	2201      	movs	r2, #1
 8011122:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8011126:	2300      	movs	r3, #0
}
 8011128:	4618      	mov	r0, r3
 801112a:	bd80      	pop	{r7, pc}
 801112c:	20000b5c 	.word	0x20000b5c
 8011130:	20000b74 	.word	0x20000b74
 8011134:	20000b8c 	.word	0x20000b8c
 8011138:	20000be8 	.word	0x20000be8
 801113c:	0801eb10 	.word	0x0801eb10
 8011140:	200007f4 	.word	0x200007f4

08011144 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b08a      	sub	sp, #40	@ 0x28
 8011148:	af00      	add	r7, sp, #0
 801114a:	4603      	mov	r3, r0
 801114c:	6039      	str	r1, [r7, #0]
 801114e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011150:	4b3e      	ldr	r3, [pc, #248]	@ (801124c <LoRaMacQueryTxPossible+0x108>)
 8011152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011154:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011156:	4b3d      	ldr	r3, [pc, #244]	@ (801124c <LoRaMacQueryTxPossible+0x108>)
 8011158:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 801115c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801115e:	4b3b      	ldr	r3, [pc, #236]	@ (801124c <LoRaMacQueryTxPossible+0x108>)
 8011160:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 8011164:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8011166:	2300      	movs	r3, #0
 8011168:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d101      	bne.n	8011174 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011170:	2303      	movs	r3, #3
 8011172:	e066      	b.n	8011242 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8011174:	4b35      	ldr	r3, [pc, #212]	@ (801124c <LoRaMacQueryTxPossible+0x108>)
 8011176:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801117a:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 801117c:	2300      	movs	r3, #0
 801117e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011180:	4b32      	ldr	r3, [pc, #200]	@ (801124c <LoRaMacQueryTxPossible+0x108>)
 8011182:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8011186:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011188:	4b30      	ldr	r3, [pc, #192]	@ (801124c <LoRaMacQueryTxPossible+0x108>)
 801118a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801118c:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801118e:	4b2f      	ldr	r3, [pc, #188]	@ (801124c <LoRaMacQueryTxPossible+0x108>)
 8011190:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8011194:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011196:	4b2d      	ldr	r3, [pc, #180]	@ (801124c <LoRaMacQueryTxPossible+0x108>)
 8011198:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 801119c:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801119e:	4b2b      	ldr	r3, [pc, #172]	@ (801124c <LoRaMacQueryTxPossible+0x108>)
 80111a0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80111a4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80111a8:	4b28      	ldr	r3, [pc, #160]	@ (801124c <LoRaMacQueryTxPossible+0x108>)
 80111aa:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80111ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80111b2:	4b26      	ldr	r3, [pc, #152]	@ (801124c <LoRaMacQueryTxPossible+0x108>)
 80111b4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80111b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80111bc:	4b23      	ldr	r3, [pc, #140]	@ (801124c <LoRaMacQueryTxPossible+0x108>)
 80111be:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80111c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80111c6:	f107 0310 	add.w	r3, r7, #16
 80111ca:	f107 020e 	add.w	r2, r7, #14
 80111ce:	f107 010f 	add.w	r1, r7, #15
 80111d2:	f107 0014 	add.w	r0, r7, #20
 80111d6:	f001 f913 	bl	8012400 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80111da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fd feee 	bl	800efc0 <GetMaxAppPayloadWithoutFOptsLength>
 80111e4:	4603      	mov	r3, r0
 80111e6:	461a      	mov	r2, r3
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80111ec:	f107 0308 	add.w	r3, r7, #8
 80111f0:	4618      	mov	r0, r3
 80111f2:	f001 fc21 	bl	8012a38 <LoRaMacCommandsGetSizeSerializedCmds>
 80111f6:	4603      	mov	r3, r0
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d001      	beq.n	8011200 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80111fc:	2313      	movs	r3, #19
 80111fe:	e020      	b.n	8011242 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	2b0f      	cmp	r3, #15
 8011204:	d819      	bhi.n	801123a <LoRaMacQueryTxPossible+0xf6>
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	785b      	ldrb	r3, [r3, #1]
 801120a:	461a      	mov	r2, r3
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	429a      	cmp	r2, r3
 8011210:	d313      	bcc.n	801123a <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	785a      	ldrb	r2, [r3, #1]
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	b2db      	uxtb	r3, r3
 801121a:	1ad3      	subs	r3, r2, r3
 801121c:	b2da      	uxtb	r2, r3
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	785b      	ldrb	r3, [r3, #1]
 8011226:	4619      	mov	r1, r3
 8011228:	79fa      	ldrb	r2, [r7, #7]
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	4413      	add	r3, r2
 801122e:	4299      	cmp	r1, r3
 8011230:	d301      	bcc.n	8011236 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8011232:	2300      	movs	r3, #0
 8011234:	e005      	b.n	8011242 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8011236:	2308      	movs	r3, #8
 8011238:	e003      	b.n	8011242 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	2200      	movs	r2, #0
 801123e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011240:	2308      	movs	r3, #8
    }
}
 8011242:	4618      	mov	r0, r3
 8011244:	3728      	adds	r7, #40	@ 0x28
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
 801124a:	bf00      	nop
 801124c:	20000cfc 	.word	0x20000cfc

08011250 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011250:	b590      	push	{r4, r7, lr}
 8011252:	b087      	sub	sp, #28
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011258:	2300      	movs	r3, #0
 801125a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d101      	bne.n	8011266 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011262:	2303      	movs	r3, #3
 8011264:	e1c4      	b.n	80115f0 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	781b      	ldrb	r3, [r3, #0]
 801126a:	2b3f      	cmp	r3, #63	@ 0x3f
 801126c:	f200 81b9 	bhi.w	80115e2 <LoRaMacMibGetRequestConfirm+0x392>
 8011270:	a201      	add	r2, pc, #4	@ (adr r2, 8011278 <LoRaMacMibGetRequestConfirm+0x28>)
 8011272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011276:	bf00      	nop
 8011278:	08011379 	.word	0x08011379
 801127c:	08011385 	.word	0x08011385
 8011280:	08011391 	.word	0x08011391
 8011284:	0801139d 	.word	0x0801139d
 8011288:	080113a9 	.word	0x080113a9
 801128c:	080113b5 	.word	0x080113b5
 8011290:	080113c1 	.word	0x080113c1
 8011294:	080115e3 	.word	0x080115e3
 8011298:	080115e3 	.word	0x080115e3
 801129c:	080115e3 	.word	0x080115e3
 80112a0:	080115e3 	.word	0x080115e3
 80112a4:	080115e3 	.word	0x080115e3
 80112a8:	080115e3 	.word	0x080115e3
 80112ac:	080115e3 	.word	0x080115e3
 80112b0:	080115e3 	.word	0x080115e3
 80112b4:	080113d5 	.word	0x080113d5
 80112b8:	080113e1 	.word	0x080113e1
 80112bc:	080113ed 	.word	0x080113ed
 80112c0:	0801140f 	.word	0x0801140f
 80112c4:	08011421 	.word	0x08011421
 80112c8:	08011433 	.word	0x08011433
 80112cc:	08011445 	.word	0x08011445
 80112d0:	08011479 	.word	0x08011479
 80112d4:	08011457 	.word	0x08011457
 80112d8:	0801149b 	.word	0x0801149b
 80112dc:	080114a7 	.word	0x080114a7
 80112e0:	080114b1 	.word	0x080114b1
 80112e4:	080114bb 	.word	0x080114bb
 80112e8:	080114c5 	.word	0x080114c5
 80112ec:	080114cf 	.word	0x080114cf
 80112f0:	080114d9 	.word	0x080114d9
 80112f4:	080114e5 	.word	0x080114e5
 80112f8:	080114fd 	.word	0x080114fd
 80112fc:	080114f1 	.word	0x080114f1
 8011300:	08011509 	.word	0x08011509
 8011304:	08011513 	.word	0x08011513
 8011308:	0801151f 	.word	0x0801151f
 801130c:	0801153b 	.word	0x0801153b
 8011310:	0801152b 	.word	0x0801152b
 8011314:	08011533 	.word	0x08011533
 8011318:	080115e3 	.word	0x080115e3
 801131c:	08011547 	.word	0x08011547
 8011320:	080115e3 	.word	0x080115e3
 8011324:	080115e3 	.word	0x080115e3
 8011328:	080115e3 	.word	0x080115e3
 801132c:	080115e3 	.word	0x080115e3
 8011330:	080115e3 	.word	0x080115e3
 8011334:	080115e3 	.word	0x080115e3
 8011338:	080115e3 	.word	0x080115e3
 801133c:	080115e3 	.word	0x080115e3
 8011340:	080115e3 	.word	0x080115e3
 8011344:	080115e3 	.word	0x080115e3
 8011348:	080115e3 	.word	0x080115e3
 801134c:	080115e3 	.word	0x080115e3
 8011350:	080115e3 	.word	0x080115e3
 8011354:	080115e3 	.word	0x080115e3
 8011358:	080115e3 	.word	0x080115e3
 801135c:	0801155b 	.word	0x0801155b
 8011360:	08011567 	.word	0x08011567
 8011364:	08011573 	.word	0x08011573
 8011368:	0801157f 	.word	0x0801157f
 801136c:	0801158b 	.word	0x0801158b
 8011370:	08011597 	.word	0x08011597
 8011374:	080115bd 	.word	0x080115bd
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011378:	4b9f      	ldr	r3, [pc, #636]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801137a:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	711a      	strb	r2, [r3, #4]
            break;
 8011382:	e134      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011384:	4b9c      	ldr	r3, [pc, #624]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011386:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	711a      	strb	r2, [r3, #4]
            break;
 801138e:	e12e      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	685b      	ldr	r3, [r3, #4]
 8011394:	4618      	mov	r0, r3
 8011396:	f7fa ff1b 	bl	800c1d0 <SecureElementGetDevEui>
            break;
 801139a:	e128      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	685b      	ldr	r3, [r3, #4]
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7fa ff45 	bl	800c230 <SecureElementGetJoinEui>
            break;
 80113a6:	e122      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80113a8:	4b93      	ldr	r3, [pc, #588]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80113aa:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	711a      	strb	r2, [r3, #4]
            break;
 80113b2:	e11c      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80113b4:	4b90      	ldr	r3, [pc, #576]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80113b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	605a      	str	r2, [r3, #4]
            break;
 80113be:	e116      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 80113c0:	4b8d      	ldr	r3, [pc, #564]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80113c2:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	3304      	adds	r3, #4
 80113ca:	4619      	mov	r1, r3
 80113cc:	4610      	mov	r0, r2
 80113ce:	f7fa ff61 	bl	800c294 <SecureElementGetDevAddr>
            break;
 80113d2:	e10c      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80113d4:	4b88      	ldr	r3, [pc, #544]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80113d6:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	711a      	strb	r2, [r3, #4]
            break;
 80113de:	e106      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80113e0:	4b85      	ldr	r3, [pc, #532]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80113e2:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	711a      	strb	r2, [r3, #4]
            break;
 80113ea:	e100      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80113ec:	231d      	movs	r3, #29
 80113ee:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80113f0:	4b81      	ldr	r3, [pc, #516]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80113f2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80113f6:	f107 0210 	add.w	r2, r7, #16
 80113fa:	4611      	mov	r1, r2
 80113fc:	4618      	mov	r0, r3
 80113fe:	f002 fffc 	bl	80143fa <RegionGetPhyParam>
 8011402:	4603      	mov	r3, r0
 8011404:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8011406:	68fa      	ldr	r2, [r7, #12]
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	605a      	str	r2, [r3, #4]
            break;
 801140c:	e0ef      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	4a79      	ldr	r2, [pc, #484]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011412:	3304      	adds	r3, #4
 8011414:	326c      	adds	r2, #108	@ 0x6c
 8011416:	e892 0003 	ldmia.w	r2, {r0, r1}
 801141a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801141e:	e0e6      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	4a75      	ldr	r2, [pc, #468]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011424:	3304      	adds	r3, #4
 8011426:	32b4      	adds	r2, #180	@ 0xb4
 8011428:	e892 0003 	ldmia.w	r2, {r0, r1}
 801142c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011430:	e0dd      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	4a70      	ldr	r2, [pc, #448]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011436:	3304      	adds	r3, #4
 8011438:	3274      	adds	r2, #116	@ 0x74
 801143a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801143e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011442:	e0d4      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	4a6c      	ldr	r2, [pc, #432]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011448:	3304      	adds	r3, #4
 801144a:	32bc      	adds	r2, #188	@ 0xbc
 801144c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011450:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011454:	e0cb      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011456:	231b      	movs	r3, #27
 8011458:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801145a:	4b67      	ldr	r3, [pc, #412]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801145c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011460:	f107 0210 	add.w	r2, r7, #16
 8011464:	4611      	mov	r1, r2
 8011466:	4618      	mov	r0, r3
 8011468:	f002 ffc7 	bl	80143fa <RegionGetPhyParam>
 801146c:	4603      	mov	r3, r0
 801146e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011470:	68fa      	ldr	r2, [r7, #12]
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	605a      	str	r2, [r3, #4]
            break;
 8011476:	e0ba      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011478:	231a      	movs	r3, #26
 801147a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801147c:	4b5e      	ldr	r3, [pc, #376]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801147e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011482:	f107 0210 	add.w	r2, r7, #16
 8011486:	4611      	mov	r1, r2
 8011488:	4618      	mov	r0, r3
 801148a:	f002 ffb6 	bl	80143fa <RegionGetPhyParam>
 801148e:	4603      	mov	r3, r0
 8011490:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011492:	68fa      	ldr	r2, [r7, #12]
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	605a      	str	r2, [r3, #4]
            break;
 8011498:	e0a9      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801149a:	4b57      	ldr	r3, [pc, #348]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801149c:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	711a      	strb	r2, [r3, #4]
            break;
 80114a4:	e0a3      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80114a6:	4b54      	ldr	r3, [pc, #336]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80114a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	605a      	str	r2, [r3, #4]
            break;
 80114ae:	e09e      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80114b0:	4b51      	ldr	r3, [pc, #324]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80114b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	605a      	str	r2, [r3, #4]
            break;
 80114b8:	e099      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80114ba:	4b4f      	ldr	r3, [pc, #316]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80114bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	605a      	str	r2, [r3, #4]
            break;
 80114c2:	e094      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80114c4:	4b4c      	ldr	r3, [pc, #304]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80114c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	605a      	str	r2, [r3, #4]
            break;
 80114cc:	e08f      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80114ce:	4b4a      	ldr	r3, [pc, #296]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80114d0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	605a      	str	r2, [r3, #4]
            break;
 80114d6:	e08a      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80114d8:	4b47      	ldr	r3, [pc, #284]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80114da:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	711a      	strb	r2, [r3, #4]
            break;
 80114e2:	e084      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80114e4:	4b44      	ldr	r3, [pc, #272]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80114e6:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	711a      	strb	r2, [r3, #4]
            break;
 80114ee:	e07e      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80114f0:	4b41      	ldr	r3, [pc, #260]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80114f2:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	711a      	strb	r2, [r3, #4]
            break;
 80114fa:	e078      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80114fc:	4b3e      	ldr	r3, [pc, #248]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80114fe:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	711a      	strb	r2, [r3, #4]
            break;
 8011506:	e072      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011508:	4b3b      	ldr	r3, [pc, #236]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801150a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	605a      	str	r2, [r3, #4]
            break;
 8011510:	e06d      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011512:	4b39      	ldr	r3, [pc, #228]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011514:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	711a      	strb	r2, [r3, #4]
            break;
 801151c:	e067      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801151e:	4b36      	ldr	r3, [pc, #216]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011520:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	605a      	str	r2, [r3, #4]
            break;
 8011528:	e061      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4a32      	ldr	r2, [pc, #200]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801152e:	605a      	str	r2, [r3, #4]
            break;
 8011530:	e05d      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	2200      	movs	r2, #0
 8011536:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8011538:	e059      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801153a:	4b2f      	ldr	r3, [pc, #188]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801153c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	605a      	str	r2, [r3, #4]
            break;
 8011544:	e053      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	4a2b      	ldr	r2, [pc, #172]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801154a:	f8d2 2128 	ldr.w	r2, [r2, #296]	@ 0x128
 801154e:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011550:	687c      	ldr	r4, [r7, #4]
 8011552:	f003 f8db 	bl	801470c <RegionGetVersion>
 8011556:	60a0      	str	r0, [r4, #8]
            break;
 8011558:	e049      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801155a:	4b27      	ldr	r3, [pc, #156]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801155c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	605a      	str	r2, [r3, #4]
            break;
 8011564:	e043      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8011566:	4b24      	ldr	r3, [pc, #144]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011568:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	809a      	strh	r2, [r3, #4]
            break;
 8011570:	e03d      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8011572:	4b21      	ldr	r3, [pc, #132]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011574:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	809a      	strh	r2, [r3, #4]
            break;
 801157c:	e037      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801157e:	4b1e      	ldr	r3, [pc, #120]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011580:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	809a      	strh	r2, [r3, #4]
            break;
 8011588:	e031      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 801158a:	4b1b      	ldr	r3, [pc, #108]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801158c:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	809a      	strh	r2, [r3, #4]
            break;
 8011594:	e02b      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RSSI_FREE_THRESHOLD:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 8011596:	4b18      	ldr	r3, [pc, #96]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011598:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801159c:	2b00      	cmp	r3, #0
 801159e:	d007      	beq.n	80115b0 <LoRaMacMibGetRequestConfirm+0x360>
 80115a0:	4b15      	ldr	r3, [pc, #84]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80115a2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80115a6:	2b06      	cmp	r3, #6
 80115a8:	d002      	beq.n	80115b0 <LoRaMacMibGetRequestConfirm+0x360>
            {
                status = LORAMAC_STATUS_ERROR;
 80115aa:	2318      	movs	r3, #24
 80115ac:	75fb      	strb	r3, [r7, #23]
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 80115ae:	e01e      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
 80115b0:	4b11      	ldr	r3, [pc, #68]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80115b2:	f9b3 274c 	ldrsh.w	r2, [r3, #1868]	@ 0x74c
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	809a      	strh	r2, [r3, #4]
            break;
 80115ba:	e018      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CARRIER_SENSE_TIME:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 80115bc:	4b0e      	ldr	r3, [pc, #56]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80115be:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d007      	beq.n	80115d6 <LoRaMacMibGetRequestConfirm+0x386>
 80115c6:	4b0c      	ldr	r3, [pc, #48]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80115c8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80115cc:	2b06      	cmp	r3, #6
 80115ce:	d002      	beq.n	80115d6 <LoRaMacMibGetRequestConfirm+0x386>
            {
                status = LORAMAC_STATUS_ERROR;
 80115d0:	2318      	movs	r3, #24
 80115d2:	75fb      	strb	r3, [r7, #23]
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 80115d4:	e00b      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
 80115d6:	4b08      	ldr	r3, [pc, #32]	@ (80115f8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80115d8:	f8d3 2750 	ldr.w	r2, [r3, #1872]	@ 0x750
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	605a      	str	r2, [r3, #4]
            break;
 80115e0:	e005      	b.n	80115ee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f000 ffb8 	bl	8012558 <LoRaMacClassBMibGetRequestConfirm>
 80115e8:	4603      	mov	r3, r0
 80115ea:	75fb      	strb	r3, [r7, #23]
            break;
 80115ec:	bf00      	nop
        }
    }
    return status;
 80115ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	371c      	adds	r7, #28
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd90      	pop	{r4, r7, pc}
 80115f8:	20000cfc 	.word	0x20000cfc

080115fc <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b086      	sub	sp, #24
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011604:	2300      	movs	r3, #0
 8011606:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d101      	bne.n	8011612 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801160e:	2303      	movs	r3, #3
 8011610:	e3a3      	b.n	8011d5a <LoRaMacMibSetRequestConfirm+0x75e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8011612:	4bbb      	ldr	r3, [pc, #748]	@ (8011900 <LoRaMacMibSetRequestConfirm+0x304>)
 8011614:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011618:	f003 0302 	and.w	r3, r3, #2
 801161c:	2b00      	cmp	r3, #0
 801161e:	d001      	beq.n	8011624 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011620:	2301      	movs	r3, #1
 8011622:	e39a      	b.n	8011d5a <LoRaMacMibSetRequestConfirm+0x75e>
    }

    switch( mibSet->Type )
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	781b      	ldrb	r3, [r3, #0]
 8011628:	2b3f      	cmp	r3, #63	@ 0x3f
 801162a:	f200 8374 	bhi.w	8011d16 <LoRaMacMibSetRequestConfirm+0x71a>
 801162e:	a201      	add	r2, pc, #4	@ (adr r2, 8011634 <LoRaMacMibSetRequestConfirm+0x38>)
 8011630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011634:	08011735 	.word	0x08011735
 8011638:	08011745 	.word	0x08011745
 801163c:	0801175f 	.word	0x0801175f
 8011640:	08011777 	.word	0x08011777
 8011644:	0801178f 	.word	0x0801178f
 8011648:	0801179b 	.word	0x0801179b
 801164c:	080117a7 	.word	0x080117a7
 8011650:	080117d1 	.word	0x080117d1
 8011654:	080117f7 	.word	0x080117f7
 8011658:	0801181d 	.word	0x0801181d
 801165c:	08011843 	.word	0x08011843
 8011660:	08011869 	.word	0x08011869
 8011664:	0801188f 	.word	0x0801188f
 8011668:	080118b5 	.word	0x080118b5
 801166c:	080118db 	.word	0x080118db
 8011670:	08011909 	.word	0x08011909
 8011674:	08011929 	.word	0x08011929
 8011678:	08011d17 	.word	0x08011d17
 801167c:	08011935 	.word	0x08011935
 8011680:	080119a5 	.word	0x080119a5
 8011684:	080119e5 	.word	0x080119e5
 8011688:	08011a47 	.word	0x08011a47
 801168c:	08011ab7 	.word	0x08011ab7
 8011690:	08011a87 	.word	0x08011a87
 8011694:	08011ae7 	.word	0x08011ae7
 8011698:	08011b09 	.word	0x08011b09
 801169c:	08011b13 	.word	0x08011b13
 80116a0:	08011b1d 	.word	0x08011b1d
 80116a4:	08011b27 	.word	0x08011b27
 80116a8:	08011b31 	.word	0x08011b31
 80116ac:	08011b3b 	.word	0x08011b3b
 80116b0:	08011b6d 	.word	0x08011b6d
 80116b4:	08011be1 	.word	0x08011be1
 80116b8:	08011ba7 	.word	0x08011ba7
 80116bc:	08011c13 	.word	0x08011c13
 80116c0:	08011c29 	.word	0x08011c29
 80116c4:	08011c41 	.word	0x08011c41
 80116c8:	08011c4d 	.word	0x08011c4d
 80116cc:	08011c59 	.word	0x08011c59
 80116d0:	08011d17 	.word	0x08011d17
 80116d4:	08011c63 	.word	0x08011c63
 80116d8:	08011d17 	.word	0x08011d17
 80116dc:	08011d17 	.word	0x08011d17
 80116e0:	08011d17 	.word	0x08011d17
 80116e4:	08011d17 	.word	0x08011d17
 80116e8:	08011d17 	.word	0x08011d17
 80116ec:	08011d17 	.word	0x08011d17
 80116f0:	08011d17 	.word	0x08011d17
 80116f4:	08011d17 	.word	0x08011d17
 80116f8:	08011d17 	.word	0x08011d17
 80116fc:	08011d17 	.word	0x08011d17
 8011700:	08011d17 	.word	0x08011d17
 8011704:	08011d17 	.word	0x08011d17
 8011708:	08011d17 	.word	0x08011d17
 801170c:	08011d17 	.word	0x08011d17
 8011710:	08011d17 	.word	0x08011d17
 8011714:	08011d17 	.word	0x08011d17
 8011718:	08011c8d 	.word	0x08011c8d
 801171c:	08011c99 	.word	0x08011c99
 8011720:	08011ca5 	.word	0x08011ca5
 8011724:	08011cb1 	.word	0x08011cb1
 8011728:	08011cbd 	.word	0x08011cbd
 801172c:	08011cc9 	.word	0x08011cc9
 8011730:	08011cf1 	.word	0x08011cf1
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	791b      	ldrb	r3, [r3, #4]
 8011738:	4618      	mov	r0, r3
 801173a:	f7fd fb59 	bl	800edf0 <SwitchClass>
 801173e:	4603      	mov	r3, r0
 8011740:	75fb      	strb	r3, [r7, #23]
            break;
 8011742:	e309      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	791b      	ldrb	r3, [r3, #4]
 8011748:	2b02      	cmp	r3, #2
 801174a:	d005      	beq.n	8011758 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	791a      	ldrb	r2, [r3, #4]
 8011750:	4b6c      	ldr	r3, [pc, #432]	@ (8011904 <LoRaMacMibSetRequestConfirm+0x308>)
 8011752:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011756:	e2ff      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011758:	2303      	movs	r3, #3
 801175a:	75fb      	strb	r3, [r7, #23]
            break;
 801175c:	e2fc      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	4618      	mov	r0, r3
 8011764:	f7fa fd1c 	bl	800c1a0 <SecureElementSetDevEui>
 8011768:	4603      	mov	r3, r0
 801176a:	2b00      	cmp	r3, #0
 801176c:	f000 82d9 	beq.w	8011d22 <LoRaMacMibSetRequestConfirm+0x726>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011770:	2303      	movs	r3, #3
 8011772:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011774:	e2d5      	b.n	8011d22 <LoRaMacMibSetRequestConfirm+0x726>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	4618      	mov	r0, r3
 801177c:	f7fa fd40 	bl	800c200 <SecureElementSetJoinEui>
 8011780:	4603      	mov	r3, r0
 8011782:	2b00      	cmp	r3, #0
 8011784:	f000 82cf 	beq.w	8011d26 <LoRaMacMibSetRequestConfirm+0x72a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011788:	2303      	movs	r3, #3
 801178a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801178c:	e2cb      	b.n	8011d26 <LoRaMacMibSetRequestConfirm+0x72a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	791a      	ldrb	r2, [r3, #4]
 8011792:	4b5c      	ldr	r3, [pc, #368]	@ (8011904 <LoRaMacMibSetRequestConfirm+0x308>)
 8011794:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 8011798:	e2de      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	4a59      	ldr	r2, [pc, #356]	@ (8011904 <LoRaMacMibSetRequestConfirm+0x308>)
 80117a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 80117a4:	e2d8      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 80117a6:	4b57      	ldr	r3, [pc, #348]	@ (8011904 <LoRaMacMibSetRequestConfirm+0x308>)
 80117a8:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	4619      	mov	r1, r3
 80117b2:	4610      	mov	r0, r2
 80117b4:	f7fa fd54 	bl	800c260 <SecureElementSetDevAddr>
 80117b8:	4603      	mov	r3, r0
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d002      	beq.n	80117c4 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117be:	2303      	movs	r3, #3
 80117c0:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 80117c2:	e2c9      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	685b      	ldr	r3, [r3, #4]
 80117c8:	4a4e      	ldr	r2, [pc, #312]	@ (8011904 <LoRaMacMibSetRequestConfirm+0x308>)
 80117ca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 80117ce:	e2c3      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d00b      	beq.n	80117f0 <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	685b      	ldr	r3, [r3, #4]
 80117dc:	4619      	mov	r1, r3
 80117de:	2000      	movs	r0, #0
 80117e0:	f002 f816 	bl	8013810 <LoRaMacCryptoSetKey>
 80117e4:	4603      	mov	r3, r0
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	f000 829f 	beq.w	8011d2a <LoRaMacMibSetRequestConfirm+0x72e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80117ec:	2311      	movs	r3, #17
 80117ee:	e2b4      	b.n	8011d5a <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117f0:	2303      	movs	r3, #3
 80117f2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80117f4:	e299      	b.n	8011d2a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	685b      	ldr	r3, [r3, #4]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d00b      	beq.n	8011816 <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	4619      	mov	r1, r3
 8011804:	2001      	movs	r0, #1
 8011806:	f002 f803 	bl	8013810 <LoRaMacCryptoSetKey>
 801180a:	4603      	mov	r3, r0
 801180c:	2b00      	cmp	r3, #0
 801180e:	f000 828e 	beq.w	8011d2e <LoRaMacMibSetRequestConfirm+0x732>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011812:	2311      	movs	r3, #17
 8011814:	e2a1      	b.n	8011d5a <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011816:	2303      	movs	r3, #3
 8011818:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801181a:	e288      	b.n	8011d2e <LoRaMacMibSetRequestConfirm+0x732>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	685b      	ldr	r3, [r3, #4]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d00b      	beq.n	801183c <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	685b      	ldr	r3, [r3, #4]
 8011828:	4619      	mov	r1, r3
 801182a:	2008      	movs	r0, #8
 801182c:	f001 fff0 	bl	8013810 <LoRaMacCryptoSetKey>
 8011830:	4603      	mov	r3, r0
 8011832:	2b00      	cmp	r3, #0
 8011834:	f000 827d 	beq.w	8011d32 <LoRaMacMibSetRequestConfirm+0x736>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011838:	2311      	movs	r3, #17
 801183a:	e28e      	b.n	8011d5a <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801183c:	2303      	movs	r3, #3
 801183e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011840:	e277      	b.n	8011d32 <LoRaMacMibSetRequestConfirm+0x736>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	685b      	ldr	r3, [r3, #4]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d00b      	beq.n	8011862 <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	685b      	ldr	r3, [r3, #4]
 801184e:	4619      	mov	r1, r3
 8011850:	2009      	movs	r0, #9
 8011852:	f001 ffdd 	bl	8013810 <LoRaMacCryptoSetKey>
 8011856:	4603      	mov	r3, r0
 8011858:	2b00      	cmp	r3, #0
 801185a:	f000 826c 	beq.w	8011d36 <LoRaMacMibSetRequestConfirm+0x73a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801185e:	2311      	movs	r3, #17
 8011860:	e27b      	b.n	8011d5a <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011862:	2303      	movs	r3, #3
 8011864:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011866:	e266      	b.n	8011d36 <LoRaMacMibSetRequestConfirm+0x73a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	685b      	ldr	r3, [r3, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d00b      	beq.n	8011888 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	4619      	mov	r1, r3
 8011876:	200c      	movs	r0, #12
 8011878:	f001 ffca 	bl	8013810 <LoRaMacCryptoSetKey>
 801187c:	4603      	mov	r3, r0
 801187e:	2b00      	cmp	r3, #0
 8011880:	f000 825b 	beq.w	8011d3a <LoRaMacMibSetRequestConfirm+0x73e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011884:	2311      	movs	r3, #17
 8011886:	e268      	b.n	8011d5a <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011888:	2303      	movs	r3, #3
 801188a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801188c:	e255      	b.n	8011d3a <LoRaMacMibSetRequestConfirm+0x73e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	685b      	ldr	r3, [r3, #4]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d00b      	beq.n	80118ae <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	4619      	mov	r1, r3
 801189c:	200d      	movs	r0, #13
 801189e:	f001 ffb7 	bl	8013810 <LoRaMacCryptoSetKey>
 80118a2:	4603      	mov	r3, r0
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	f000 824a 	beq.w	8011d3e <LoRaMacMibSetRequestConfirm+0x742>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80118aa:	2311      	movs	r3, #17
 80118ac:	e255      	b.n	8011d5a <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118ae:	2303      	movs	r3, #3
 80118b0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80118b2:	e244      	b.n	8011d3e <LoRaMacMibSetRequestConfirm+0x742>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	685b      	ldr	r3, [r3, #4]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d00b      	beq.n	80118d4 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	685b      	ldr	r3, [r3, #4]
 80118c0:	4619      	mov	r1, r3
 80118c2:	200e      	movs	r0, #14
 80118c4:	f001 ffa4 	bl	8013810 <LoRaMacCryptoSetKey>
 80118c8:	4603      	mov	r3, r0
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	f000 8239 	beq.w	8011d42 <LoRaMacMibSetRequestConfirm+0x746>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80118d0:	2311      	movs	r3, #17
 80118d2:	e242      	b.n	8011d5a <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118d4:	2303      	movs	r3, #3
 80118d6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80118d8:	e233      	b.n	8011d42 <LoRaMacMibSetRequestConfirm+0x746>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d00b      	beq.n	80118fa <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	4619      	mov	r1, r3
 80118e8:	200f      	movs	r0, #15
 80118ea:	f001 ff91 	bl	8013810 <LoRaMacCryptoSetKey>
 80118ee:	4603      	mov	r3, r0
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f000 8228 	beq.w	8011d46 <LoRaMacMibSetRequestConfirm+0x74a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80118f6:	2311      	movs	r3, #17
 80118f8:	e22f      	b.n	8011d5a <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118fa:	2303      	movs	r3, #3
 80118fc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80118fe:	e222      	b.n	8011d46 <LoRaMacMibSetRequestConfirm+0x74a>
 8011900:	200007f4 	.word	0x200007f4
 8011904:	20000cfc 	.word	0x20000cfc
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	791a      	ldrb	r2, [r3, #4]
 801190c:	4bb2      	ldr	r3, [pc, #712]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801190e:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011912:	4bb2      	ldr	r3, [pc, #712]	@ (8011bdc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011916:	4ab0      	ldr	r2, [pc, #704]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011918:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 801191c:	4610      	mov	r0, r2
 801191e:	4798      	blx	r3
            Radio.Sleep( );
 8011920:	4bae      	ldr	r3, [pc, #696]	@ (8011bdc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011924:	4798      	blx	r3
            break;
 8011926:	e217      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	791a      	ldrb	r2, [r3, #4]
 801192c:	4baa      	ldr	r3, [pc, #680]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801192e:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 8011932:	e211      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	7a1b      	ldrb	r3, [r3, #8]
 8011938:	b25b      	sxtb	r3, r3
 801193a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801193c:	4ba6      	ldr	r3, [pc, #664]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801193e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8011942:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8011944:	4ba4      	ldr	r3, [pc, #656]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011946:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801194a:	f107 0108 	add.w	r1, r7, #8
 801194e:	2207      	movs	r2, #7
 8011950:	4618      	mov	r0, r3
 8011952:	f002 fd8d 	bl	8014470 <RegionVerify>
 8011956:	4603      	mov	r3, r0
 8011958:	f083 0301 	eor.w	r3, r3, #1
 801195c:	b2db      	uxtb	r3, r3
 801195e:	2b00      	cmp	r3, #0
 8011960:	d002      	beq.n	8011968 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011962:	2303      	movs	r3, #3
 8011964:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8011966:	e1f7      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	685b      	ldr	r3, [r3, #4]
 801196c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 801196e:	4b9a      	ldr	r3, [pc, #616]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011970:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011974:	f107 0108 	add.w	r1, r7, #8
 8011978:	2200      	movs	r2, #0
 801197a:	4618      	mov	r0, r3
 801197c:	f002 fd78 	bl	8014470 <RegionVerify>
 8011980:	4603      	mov	r3, r0
 8011982:	f083 0301 	eor.w	r3, r3, #1
 8011986:	b2db      	uxtb	r3, r3
 8011988:	2b00      	cmp	r3, #0
 801198a:	d002      	beq.n	8011992 <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 801198c:	2303      	movs	r3, #3
 801198e:	75fb      	strb	r3, [r7, #23]
            break;
 8011990:	e1e2      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011992:	4b91      	ldr	r3, [pc, #580]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011994:	687a      	ldr	r2, [r7, #4]
 8011996:	336c      	adds	r3, #108	@ 0x6c
 8011998:	3204      	adds	r2, #4
 801199a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801199e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80119a2:	e1d9      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	7a1b      	ldrb	r3, [r3, #8]
 80119a8:	b25b      	sxtb	r3, r3
 80119aa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80119ac:	4b8a      	ldr	r3, [pc, #552]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80119ae:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80119b2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80119b4:	4b88      	ldr	r3, [pc, #544]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80119b6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80119ba:	f107 0108 	add.w	r1, r7, #8
 80119be:	2207      	movs	r2, #7
 80119c0:	4618      	mov	r0, r3
 80119c2:	f002 fd55 	bl	8014470 <RegionVerify>
 80119c6:	4603      	mov	r3, r0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d008      	beq.n	80119de <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80119cc:	4b82      	ldr	r3, [pc, #520]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80119ce:	687a      	ldr	r2, [r7, #4]
 80119d0:	33b4      	adds	r3, #180	@ 0xb4
 80119d2:	3204      	adds	r2, #4
 80119d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80119d8:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80119dc:	e1bc      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119de:	2303      	movs	r3, #3
 80119e0:	75fb      	strb	r3, [r7, #23]
            break;
 80119e2:	e1b9      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	7a1b      	ldrb	r3, [r3, #8]
 80119e8:	b25b      	sxtb	r3, r3
 80119ea:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80119ec:	4b7a      	ldr	r3, [pc, #488]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80119ee:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80119f2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80119f4:	4b78      	ldr	r3, [pc, #480]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80119f6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80119fa:	f107 0108 	add.w	r1, r7, #8
 80119fe:	2207      	movs	r2, #7
 8011a00:	4618      	mov	r0, r3
 8011a02:	f002 fd35 	bl	8014470 <RegionVerify>
 8011a06:	4603      	mov	r3, r0
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d019      	beq.n	8011a40 <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8011a0c:	4b72      	ldr	r3, [pc, #456]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011a0e:	687a      	ldr	r2, [r7, #4]
 8011a10:	3374      	adds	r3, #116	@ 0x74
 8011a12:	3204      	adds	r2, #4
 8011a14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a18:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8011a1c:	4b6e      	ldr	r3, [pc, #440]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011a1e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011a22:	2b02      	cmp	r3, #2
 8011a24:	f040 8191 	bne.w	8011d4a <LoRaMacMibSetRequestConfirm+0x74e>
 8011a28:	4b6b      	ldr	r3, [pc, #428]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011a2a:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	f000 818b 	beq.w	8011d4a <LoRaMacMibSetRequestConfirm+0x74e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8011a34:	4b69      	ldr	r3, [pc, #420]	@ (8011bdc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a38:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8011a3a:	f7fe fc73 	bl	8010324 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a3e:	e184      	b.n	8011d4a <LoRaMacMibSetRequestConfirm+0x74e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a40:	2303      	movs	r3, #3
 8011a42:	75fb      	strb	r3, [r7, #23]
            break;
 8011a44:	e181      	b.n	8011d4a <LoRaMacMibSetRequestConfirm+0x74e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	7a1b      	ldrb	r3, [r3, #8]
 8011a4a:	b25b      	sxtb	r3, r3
 8011a4c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011a4e:	4b62      	ldr	r3, [pc, #392]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011a50:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8011a54:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011a56:	4b60      	ldr	r3, [pc, #384]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011a58:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011a5c:	f107 0108 	add.w	r1, r7, #8
 8011a60:	2207      	movs	r2, #7
 8011a62:	4618      	mov	r0, r3
 8011a64:	f002 fd04 	bl	8014470 <RegionVerify>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d008      	beq.n	8011a80 <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011a6e:	4b5a      	ldr	r3, [pc, #360]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011a70:	687a      	ldr	r2, [r7, #4]
 8011a72:	33bc      	adds	r3, #188	@ 0xbc
 8011a74:	3204      	adds	r2, #4
 8011a76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a7a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011a7e:	e16b      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a80:	2303      	movs	r3, #3
 8011a82:	75fb      	strb	r3, [r7, #23]
            break;
 8011a84:	e168      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	685b      	ldr	r3, [r3, #4]
 8011a8a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011a90:	4b51      	ldr	r3, [pc, #324]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011a92:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011a96:	f107 020c 	add.w	r2, r7, #12
 8011a9a:	4611      	mov	r1, r2
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f002 fd10 	bl	80144c2 <RegionChanMaskSet>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	f083 0301 	eor.w	r3, r3, #1
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	f000 814f 	beq.w	8011d4e <LoRaMacMibSetRequestConfirm+0x752>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ab0:	2303      	movs	r3, #3
 8011ab2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ab4:	e14b      	b.n	8011d4e <LoRaMacMibSetRequestConfirm+0x752>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8011abc:	2300      	movs	r3, #0
 8011abe:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011ac0:	4b45      	ldr	r3, [pc, #276]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011ac2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011ac6:	f107 020c 	add.w	r2, r7, #12
 8011aca:	4611      	mov	r1, r2
 8011acc:	4618      	mov	r0, r3
 8011ace:	f002 fcf8 	bl	80144c2 <RegionChanMaskSet>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	f083 0301 	eor.w	r3, r3, #1
 8011ad8:	b2db      	uxtb	r3, r3
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	f000 8139 	beq.w	8011d52 <LoRaMacMibSetRequestConfirm+0x756>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ae0:	2303      	movs	r3, #3
 8011ae2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ae4:	e135      	b.n	8011d52 <LoRaMacMibSetRequestConfirm+0x756>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	791b      	ldrb	r3, [r3, #4]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d009      	beq.n	8011b02 <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011af2:	2b0f      	cmp	r3, #15
 8011af4:	d805      	bhi.n	8011b02 <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	791a      	ldrb	r2, [r3, #4]
 8011afa:	4b37      	ldr	r3, [pc, #220]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011afc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011b00:	e12a      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b02:	2303      	movs	r3, #3
 8011b04:	75fb      	strb	r3, [r7, #23]
            break;
 8011b06:	e127      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	685b      	ldr	r3, [r3, #4]
 8011b0c:	4a32      	ldr	r2, [pc, #200]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011b0e:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8011b10:	e122      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	4a30      	ldr	r2, [pc, #192]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011b18:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8011b1a:	e11d      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	4a2d      	ldr	r2, [pc, #180]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011b22:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8011b24:	e118      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	4a2b      	ldr	r2, [pc, #172]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011b2c:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 8011b2e:	e113      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	685b      	ldr	r3, [r3, #4]
 8011b34:	4a28      	ldr	r2, [pc, #160]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011b36:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 8011b38:	e10e      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011b40:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8011b42:	4b25      	ldr	r3, [pc, #148]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011b44:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011b48:	f107 0108 	add.w	r1, r7, #8
 8011b4c:	2206      	movs	r2, #6
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f002 fc8e 	bl	8014470 <RegionVerify>
 8011b54:	4603      	mov	r3, r0
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d005      	beq.n	8011b66 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8011b5a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011b60:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011b64:	e0f8      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b66:	2303      	movs	r3, #3
 8011b68:	75fb      	strb	r3, [r7, #23]
            break;
 8011b6a:	e0f5      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011b72:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011b74:	4b18      	ldr	r3, [pc, #96]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011b76:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011b7a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011b7c:	4b16      	ldr	r3, [pc, #88]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011b7e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011b82:	f107 0108 	add.w	r1, r7, #8
 8011b86:	2205      	movs	r2, #5
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f002 fc71 	bl	8014470 <RegionVerify>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d005      	beq.n	8011ba0 <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011b94:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011b98:	4b0f      	ldr	r3, [pc, #60]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011b9a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011b9e:	e0db      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ba0:	2303      	movs	r3, #3
 8011ba2:	75fb      	strb	r3, [r7, #23]
            break;
 8011ba4:	e0d8      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011bac:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011bae:	4b0a      	ldr	r3, [pc, #40]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011bb0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011bb4:	f107 0108 	add.w	r1, r7, #8
 8011bb8:	220a      	movs	r2, #10
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f002 fc58 	bl	8014470 <RegionVerify>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d005      	beq.n	8011bd2 <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011bc6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011bca:	4b03      	ldr	r3, [pc, #12]	@ (8011bd8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011bcc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011bd0:	e0c2      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011bd2:	2303      	movs	r3, #3
 8011bd4:	75fb      	strb	r3, [r7, #23]
            break;
 8011bd6:	e0bf      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
 8011bd8:	20000cfc 	.word	0x20000cfc
 8011bdc:	0801eb10 	.word	0x0801eb10
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011be6:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011be8:	4b5e      	ldr	r3, [pc, #376]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011bea:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011bee:	f107 0108 	add.w	r1, r7, #8
 8011bf2:	2209      	movs	r2, #9
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f002 fc3b 	bl	8014470 <RegionVerify>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d005      	beq.n	8011c0c <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011c00:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011c04:	4b57      	ldr	r3, [pc, #348]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011c06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011c0a:	e0a5      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c0c:	2303      	movs	r3, #3
 8011c0e:	75fb      	strb	r3, [r7, #23]
            break;
 8011c10:	e0a2      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
#else
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	685b      	ldr	r3, [r3, #4]
 8011c16:	4a53      	ldr	r2, [pc, #332]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011c18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8011c1c:	4b51      	ldr	r3, [pc, #324]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011c22:	4a50      	ldr	r2, [pc, #320]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
#endif
            break;
 8011c26:	e097      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	791a      	ldrb	r2, [r3, #4]
 8011c2c:	4b4d      	ldr	r3, [pc, #308]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011c2e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 8011c32:	4b4c      	ldr	r3, [pc, #304]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011c34:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8011c38:	4b4a      	ldr	r3, [pc, #296]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 8011c3e:	e08b      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	685b      	ldr	r3, [r3, #4]
 8011c44:	4a47      	ldr	r2, [pc, #284]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011c46:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8011c4a:	e085      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	685b      	ldr	r3, [r3, #4]
 8011c50:	4a44      	ldr	r2, [pc, #272]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011c52:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 8011c56:	e07f      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8011c58:	f7fe fdc0 	bl	80107dc <RestoreNvmData>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	75fb      	strb	r3, [r7, #23]
            break;
 8011c60:	e07a      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	799b      	ldrb	r3, [r3, #6]
 8011c66:	2b01      	cmp	r3, #1
 8011c68:	d80d      	bhi.n	8011c86 <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011c6a:	4a3e      	ldr	r2, [pc, #248]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	685b      	ldr	r3, [r3, #4]
 8011c70:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6858      	ldr	r0, [r3, #4]
 8011c78:	f001 fd02 	bl	8013680 <LoRaMacCryptoSetLrWanVersion>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d069      	beq.n	8011d56 <LoRaMacMibSetRequestConfirm+0x75a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011c82:	2311      	movs	r3, #17
 8011c84:	e069      	b.n	8011d5a <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c86:	2303      	movs	r3, #3
 8011c88:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011c8a:	e064      	b.n	8011d56 <LoRaMacMibSetRequestConfirm+0x75a>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	4a34      	ldr	r2, [pc, #208]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011c92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 8011c96:	e05f      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	889a      	ldrh	r2, [r3, #4]
 8011c9c:	4b31      	ldr	r3, [pc, #196]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011c9e:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 8011ca2:	e059      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	889a      	ldrh	r2, [r3, #4]
 8011ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011caa:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 8011cae:	e053      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	889a      	ldrh	r2, [r3, #4]
 8011cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011cb6:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 8011cba:	e04d      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	889a      	ldrh	r2, [r3, #4]
 8011cc0:	4b28      	ldr	r3, [pc, #160]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011cc2:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 8011cc6:	e047      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RSSI_FREE_THRESHOLD:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 8011cc8:	4b26      	ldr	r3, [pc, #152]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011cca:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d007      	beq.n	8011ce2 <LoRaMacMibSetRequestConfirm+0x6e6>
 8011cd2:	4b24      	ldr	r3, [pc, #144]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011cd4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011cd8:	2b06      	cmp	r3, #6
 8011cda:	d002      	beq.n	8011ce2 <LoRaMacMibSetRequestConfirm+0x6e6>
            {
                status = LORAMAC_STATUS_ERROR;
 8011cdc:	2318      	movs	r3, #24
 8011cde:	75fb      	strb	r3, [r7, #23]
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 8011ce0:	e03a      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8011ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011cea:	f8a3 274c 	strh.w	r2, [r3, #1868]	@ 0x74c
            break;
 8011cee:	e033      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CARRIER_SENSE_TIME:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 8011cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011cf2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d007      	beq.n	8011d0a <LoRaMacMibSetRequestConfirm+0x70e>
 8011cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011cfc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011d00:	2b06      	cmp	r3, #6
 8011d02:	d002      	beq.n	8011d0a <LoRaMacMibSetRequestConfirm+0x70e>
            {
                status = LORAMAC_STATUS_ERROR;
 8011d04:	2318      	movs	r3, #24
 8011d06:	75fb      	strb	r3, [r7, #23]
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 8011d08:	e026      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	685b      	ldr	r3, [r3, #4]
 8011d0e:	4a15      	ldr	r2, [pc, #84]	@ (8011d64 <LoRaMacMibSetRequestConfirm+0x768>)
 8011d10:	f8c2 3750 	str.w	r3, [r2, #1872]	@ 0x750
            break;
 8011d14:	e020      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f000 fc28 	bl	801256c <LoRaMacMibClassBSetRequestConfirm>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	75fb      	strb	r3, [r7, #23]
            break;
 8011d20:	e01a      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011d22:	bf00      	nop
 8011d24:	e018      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011d26:	bf00      	nop
 8011d28:	e016      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011d2a:	bf00      	nop
 8011d2c:	e014      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011d2e:	bf00      	nop
 8011d30:	e012      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011d32:	bf00      	nop
 8011d34:	e010      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011d36:	bf00      	nop
 8011d38:	e00e      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011d3a:	bf00      	nop
 8011d3c:	e00c      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011d3e:	bf00      	nop
 8011d40:	e00a      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011d42:	bf00      	nop
 8011d44:	e008      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011d46:	bf00      	nop
 8011d48:	e006      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011d4a:	bf00      	nop
 8011d4c:	e004      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011d4e:	bf00      	nop
 8011d50:	e002      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011d52:	bf00      	nop
 8011d54:	e000      	b.n	8011d58 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011d56:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8011d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3718      	adds	r7, #24
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}
 8011d62:	bf00      	nop
 8011d64:	20000cfc 	.word	0x20000cfc

08011d68 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b086      	sub	sp, #24
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011d70:	2302      	movs	r3, #2
 8011d72:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    bool isAbpJoinPending = false;
#endif /* LORAMAC_VERSION */
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011d74:	2300      	movs	r3, #0
 8011d76:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d101      	bne.n	8011d82 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011d7e:	2303      	movs	r3, #3
 8011d80:	e13a      	b.n	8011ff8 <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8011d82:	f7fc fc55 	bl	800e630 <LoRaMacIsBusy>
 8011d86:	4603      	mov	r3, r0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d001      	beq.n	8011d90 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	e133      	b.n	8011ff8 <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011d90:	f001 f90c 	bl	8012fac <LoRaMacConfirmQueueIsFull>
 8011d94:	4603      	mov	r3, r0
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d001      	beq.n	8011d9e <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	e12c      	b.n	8011ff8 <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011d9e:	f001 f8f9 	bl	8012f94 <LoRaMacConfirmQueueGetCnt>
 8011da2:	4603      	mov	r3, r0
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d104      	bne.n	8011db2 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011da8:	2214      	movs	r2, #20
 8011daa:	2100      	movs	r1, #0
 8011dac:	4894      	ldr	r0, [pc, #592]	@ (8012000 <LoRaMacMlmeRequest+0x298>)
 8011dae:	f004 fe6b 	bl	8016a88 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011db2:	4b94      	ldr	r3, [pc, #592]	@ (8012004 <LoRaMacMlmeRequest+0x29c>)
 8011db4:	2201      	movs	r2, #1
 8011db6:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011dba:	4a92      	ldr	r2, [pc, #584]	@ (8012004 <LoRaMacMlmeRequest+0x29c>)
 8011dbc:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8011dc0:	f043 0304 	orr.w	r3, r3, #4
 8011dc4:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    queueElement.Request = mlmeRequest->Type;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011dce:	2301      	movs	r3, #1
 8011dd0:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	781b      	ldrb	r3, [r3, #0]
 8011dda:	3b01      	subs	r3, #1
 8011ddc:	2b0d      	cmp	r3, #13
 8011dde:	f200 80e1 	bhi.w	8011fa4 <LoRaMacMlmeRequest+0x23c>
 8011de2:	a201      	add	r2, pc, #4	@ (adr r2, 8011de8 <LoRaMacMlmeRequest+0x80>)
 8011de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011de8:	08011e21 	.word	0x08011e21
 8011dec:	08011fa5 	.word	0x08011fa5
 8011df0:	08011fa5 	.word	0x08011fa5
 8011df4:	08011fa5 	.word	0x08011fa5
 8011df8:	08011e99 	.word	0x08011e99
 8011dfc:	08011eb7 	.word	0x08011eb7
 8011e00:	08011ec7 	.word	0x08011ec7
 8011e04:	08011fa5 	.word	0x08011fa5
 8011e08:	08011fa5 	.word	0x08011fa5
 8011e0c:	08011ee3 	.word	0x08011ee3
 8011e10:	08011fa5 	.word	0x08011fa5
 8011e14:	08011f79 	.word	0x08011f79
 8011e18:	08011f19 	.word	0x08011f19
 8011e1c:	08011f5b 	.word	0x08011f5b
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011e20:	4b78      	ldr	r3, [pc, #480]	@ (8012004 <LoRaMacMlmeRequest+0x29c>)
 8011e22:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011e26:	f003 0320 	and.w	r3, r3, #32
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d001      	beq.n	8011e32 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8011e2e:	2301      	movs	r3, #1
 8011e30:	e0e2      	b.n	8011ff8 <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 8011e32:	2000      	movs	r0, #0
 8011e34:	f7fe f91c 	bl	8010070 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011e38:	4b73      	ldr	r3, [pc, #460]	@ (8012008 <LoRaMacMlmeRequest+0x2a0>)
 8011e3a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	795b      	ldrb	r3, [r3, #5]
 8011e42:	b25b      	sxtb	r3, r3
 8011e44:	2200      	movs	r2, #0
 8011e46:	4619      	mov	r1, r3
 8011e48:	f002 fbfa 	bl	8014640 <RegionAlternateDr>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	461a      	mov	r2, r3
 8011e50:	4b6d      	ldr	r3, [pc, #436]	@ (8012008 <LoRaMacMlmeRequest+0x2a0>)
 8011e52:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8011e5c:	4b6a      	ldr	r3, [pc, #424]	@ (8012008 <LoRaMacMlmeRequest+0x2a0>)
 8011e5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011e62:	2307      	movs	r3, #7
 8011e64:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8011e66:	20ff      	movs	r0, #255	@ 0xff
 8011e68:	f7fd fe80 	bl	800fb6c <SendReJoinReq>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8011e70:	7dfb      	ldrb	r3, [r7, #23]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	f000 8098 	beq.w	8011fa8 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011e78:	4b63      	ldr	r3, [pc, #396]	@ (8012008 <LoRaMacMlmeRequest+0x2a0>)
 8011e7a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	795b      	ldrb	r3, [r3, #5]
 8011e82:	b25b      	sxtb	r3, r3
 8011e84:	2201      	movs	r2, #1
 8011e86:	4619      	mov	r1, r3
 8011e88:	f002 fbda 	bl	8014640 <RegionAlternateDr>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	461a      	mov	r2, r3
 8011e90:	4b5d      	ldr	r3, [pc, #372]	@ (8012008 <LoRaMacMlmeRequest+0x2a0>)
 8011e92:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                isAbpJoinPending = true;
#endif
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8011e96:	e087      	b.n	8011fa8 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011e9c:	f107 030c 	add.w	r3, r7, #12
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	2002      	movs	r0, #2
 8011ea6:	f000 fcd1 	bl	801284c <LoRaMacCommandsAddCmd>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d07d      	beq.n	8011fac <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011eb0:	2313      	movs	r3, #19
 8011eb2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011eb4:	e07a      	b.n	8011fac <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	889b      	ldrh	r3, [r3, #4]
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7fe fc38 	bl	8010730 <SetTxContinuousWave>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	75fb      	strb	r3, [r7, #23]
            break;
 8011ec4:	e079      	b.n	8011fba <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	8898      	ldrh	r0, [r3, #4]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6899      	ldr	r1, [r3, #8]
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011ed4:	b2db      	uxtb	r3, r3
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	f7fe fc60 	bl	801079c <SetTxContinuousWave1>
 8011edc:	4603      	mov	r3, r0
 8011ede:	75fb      	strb	r3, [r7, #23]
            break;
 8011ee0:	e06b      	b.n	8011fba <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8011ee6:	f107 0308 	add.w	r3, r7, #8
 8011eea:	4619      	mov	r1, r3
 8011eec:	200d      	movs	r0, #13
 8011eee:	f000 fd2d 	bl	801294c <LoRaMacCommandsGetCmd>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d102      	bne.n	8011efe <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8011efc:	e058      	b.n	8011fb0 <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011efe:	f107 030c 	add.w	r3, r7, #12
 8011f02:	2200      	movs	r2, #0
 8011f04:	4619      	mov	r1, r3
 8011f06:	200d      	movs	r0, #13
 8011f08:	f000 fca0 	bl	801284c <LoRaMacCommandsAddCmd>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d04e      	beq.n	8011fb0 <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011f12:	2313      	movs	r3, #19
 8011f14:	75fb      	strb	r3, [r7, #23]
            break;
 8011f16:	e04b      	b.n	8011fb0 <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011f18:	4b3b      	ldr	r3, [pc, #236]	@ (8012008 <LoRaMacMlmeRequest+0x2a0>)
 8011f1a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d148      	bne.n	8011fb4 <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	791b      	ldrb	r3, [r3, #4]
 8011f26:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	791b      	ldrb	r3, [r3, #4]
 8011f2c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011f30:	b2db      	uxtb	r3, r3
 8011f32:	4618      	mov	r0, r3
 8011f34:	f000 faef 	bl	8012516 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011f38:	7dbb      	ldrb	r3, [r7, #22]
 8011f3a:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8011f40:	f107 030c 	add.w	r3, r7, #12
 8011f44:	2201      	movs	r2, #1
 8011f46:	4619      	mov	r1, r3
 8011f48:	2010      	movs	r0, #16
 8011f4a:	f000 fc7f 	bl	801284c <LoRaMacCommandsAddCmd>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d02f      	beq.n	8011fb4 <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011f54:	2313      	movs	r3, #19
 8011f56:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011f58:	e02c      	b.n	8011fb4 <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011f5e:	f107 030c 	add.w	r3, r7, #12
 8011f62:	2200      	movs	r2, #0
 8011f64:	4619      	mov	r1, r3
 8011f66:	2012      	movs	r0, #18
 8011f68:	f000 fc70 	bl	801284c <LoRaMacCommandsAddCmd>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d022      	beq.n	8011fb8 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011f72:	2313      	movs	r3, #19
 8011f74:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011f76:	e01f      	b.n	8011fb8 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011f7c:	f000 fa81 	bl	8012482 <LoRaMacClassBIsAcquisitionInProgress>
 8011f80:	4603      	mov	r3, r0
 8011f82:	f083 0301 	eor.w	r3, r3, #1
 8011f86:	b2db      	uxtb	r3, r3
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d008      	beq.n	8011f9e <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011f8c:	2000      	movs	r0, #0
 8011f8e:	f000 fa5a 	bl	8012446 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011f92:	2000      	movs	r0, #0
 8011f94:	f000 fa7c 	bl	8012490 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8011f9c:	e00d      	b.n	8011fba <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	75fb      	strb	r3, [r7, #23]
            break;
 8011fa2:	e00a      	b.n	8011fba <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 8011fa4:	bf00      	nop
 8011fa6:	e008      	b.n	8011fba <LoRaMacMlmeRequest+0x252>
            break;
 8011fa8:	bf00      	nop
 8011faa:	e006      	b.n	8011fba <LoRaMacMlmeRequest+0x252>
            break;
 8011fac:	bf00      	nop
 8011fae:	e004      	b.n	8011fba <LoRaMacMlmeRequest+0x252>
            break;
 8011fb0:	bf00      	nop
 8011fb2:	e002      	b.n	8011fba <LoRaMacMlmeRequest+0x252>
            break;
 8011fb4:	bf00      	nop
 8011fb6:	e000      	b.n	8011fba <LoRaMacMlmeRequest+0x252>
            break;
 8011fb8:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011fba:	4b12      	ldr	r3, [pc, #72]	@ (8012004 <LoRaMacMlmeRequest+0x29c>)
 8011fbc:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011fc4:	7dfb      	ldrb	r3, [r7, #23]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d010      	beq.n	8011fec <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011fca:	f000 ffe3 	bl	8012f94 <LoRaMacConfirmQueueGetCnt>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d110      	bne.n	8011ff6 <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 8011fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8012004 <LoRaMacMlmeRequest+0x29c>)
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011fdc:	4a09      	ldr	r2, [pc, #36]	@ (8012004 <LoRaMacMlmeRequest+0x29c>)
 8011fde:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8011fe2:	f36f 0382 	bfc	r3, #2, #1
 8011fe6:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 8011fea:	e004      	b.n	8011ff6 <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8011fec:	f107 0310 	add.w	r3, r7, #16
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f000 fe7b 	bl	8012cec <LoRaMacConfirmQueueAdd>
        {
            AbpJoinPendingStart( );
        }
#endif /* LORAMAC_VERSION */
    }
    return status;
 8011ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3718      	adds	r7, #24
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}
 8012000:	20000c3c 	.word	0x20000c3c
 8012004:	200007f4 	.word	0x200007f4
 8012008:	20000cfc 	.word	0x20000cfc

0801200c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b08c      	sub	sp, #48	@ 0x30
 8012010:	af02      	add	r7, sp, #8
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	460b      	mov	r3, r1
 8012016:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012018:	2302      	movs	r3, #2
 801201a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801201e:	2300      	movs	r3, #0
 8012020:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    void* fBuffer = NULL;
 8012024:	2300      	movs	r3, #0
 8012026:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012028:	2300      	movs	r3, #0
 801202a:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 801202c:	2300      	movs	r3, #0
 801202e:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d101      	bne.n	801203a <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012036:	2303      	movs	r3, #3
 8012038:	e0d4      	b.n	80121e4 <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 801203a:	f7fc faf9 	bl	800e630 <LoRaMacIsBusy>
 801203e:	4603      	mov	r3, r0
 8012040:	2b00      	cmp	r3, #0
 8012042:	d001      	beq.n	8012048 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8012044:	2301      	movs	r3, #1
 8012046:	e0cd      	b.n	80121e4 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8012048:	2300      	movs	r3, #0
 801204a:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 801204c:	2214      	movs	r2, #20
 801204e:	2100      	movs	r1, #0
 8012050:	4866      	ldr	r0, [pc, #408]	@ (80121ec <LoRaMacMcpsRequest+0x1e0>)
 8012052:	f004 fd19 	bl	8016a88 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012056:	4b66      	ldr	r3, [pc, #408]	@ (80121f0 <LoRaMacMcpsRequest+0x1e4>)
 8012058:	2201      	movs	r2, #1
 801205a:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 801205e:	4b64      	ldr	r3, [pc, #400]	@ (80121f0 <LoRaMacMcpsRequest+0x1e4>)
 8012060:	2201      	movs	r2, #1
 8012062:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e

    switch( mcpsRequest->Type )
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	2b03      	cmp	r3, #3
 801206c:	d03d      	beq.n	80120ea <LoRaMacMcpsRequest+0xde>
 801206e:	2b03      	cmp	r3, #3
 8012070:	dc4f      	bgt.n	8012112 <LoRaMacMcpsRequest+0x106>
 8012072:	2b00      	cmp	r3, #0
 8012074:	d002      	beq.n	801207c <LoRaMacMcpsRequest+0x70>
 8012076:	2b01      	cmp	r3, #1
 8012078:	d019      	beq.n	80120ae <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801207a:	e04a      	b.n	8012112 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 801207c:	2301      	movs	r3, #1
 801207e:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8012080:	4b5b      	ldr	r3, [pc, #364]	@ (80121f0 <LoRaMacMcpsRequest+0x1e4>)
 8012082:	2201      	movs	r2, #1
 8012084:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8012088:	7b3b      	ldrb	r3, [r7, #12]
 801208a:	2202      	movs	r2, #2
 801208c:	f362 1347 	bfi	r3, r2, #5, #3
 8012090:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	791b      	ldrb	r3, [r3, #4]
 8012096:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	689b      	ldr	r3, [r3, #8]
 801209e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	899b      	ldrh	r3, [r3, #12]
 80120a4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	7b9b      	ldrb	r3, [r3, #14]
 80120aa:	777b      	strb	r3, [r7, #29]
            break;
 80120ac:	e032      	b.n	8012114 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80120ae:	2301      	movs	r3, #1
 80120b0:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	7bdb      	ldrb	r3, [r3, #15]
 80120b6:	2b08      	cmp	r3, #8
 80120b8:	bf28      	it	cs
 80120ba:	2308      	movcs	r3, #8
 80120bc:	b2da      	uxtb	r2, r3
 80120be:	4b4c      	ldr	r3, [pc, #304]	@ (80121f0 <LoRaMacMcpsRequest+0x1e4>)
 80120c0:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80120c4:	7b3b      	ldrb	r3, [r7, #12]
 80120c6:	2204      	movs	r2, #4
 80120c8:	f362 1347 	bfi	r3, r2, #5, #3
 80120cc:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	791b      	ldrb	r3, [r3, #4]
 80120d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	689b      	ldr	r3, [r3, #8]
 80120da:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	899b      	ldrh	r3, [r3, #12]
 80120e0:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	7b9b      	ldrb	r3, [r3, #14]
 80120e6:	777b      	strb	r3, [r7, #29]
            break;
 80120e8:	e014      	b.n	8012114 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80120ea:	2301      	movs	r3, #1
 80120ec:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80120ee:	4b40      	ldr	r3, [pc, #256]	@ (80121f0 <LoRaMacMcpsRequest+0x1e4>)
 80120f0:	2201      	movs	r2, #1
 80120f2:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80120f6:	7b3b      	ldrb	r3, [r7, #12]
 80120f8:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80120fc:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	891b      	ldrh	r3, [r3, #8]
 8012108:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	7a9b      	ldrb	r3, [r3, #10]
 801210e:	777b      	strb	r3, [r7, #29]
            break;
 8012110:	e000      	b.n	8012114 <LoRaMacMcpsRequest+0x108>
            break;
 8012112:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012114:	2302      	movs	r3, #2
 8012116:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012118:	4b36      	ldr	r3, [pc, #216]	@ (80121f4 <LoRaMacMcpsRequest+0x1e8>)
 801211a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801211e:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012120:	4b34      	ldr	r3, [pc, #208]	@ (80121f4 <LoRaMacMcpsRequest+0x1e8>)
 8012122:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012126:	f107 0214 	add.w	r2, r7, #20
 801212a:	4611      	mov	r1, r2
 801212c:	4618      	mov	r0, r3
 801212e:	f002 f964 	bl	80143fa <RegionGetPhyParam>
 8012132:	4603      	mov	r3, r0
 8012134:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8012136:	693b      	ldr	r3, [r7, #16]
 8012138:	b25b      	sxtb	r3, r3
 801213a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 801213e:	4293      	cmp	r3, r2
 8012140:	bfb8      	it	lt
 8012142:	4613      	movlt	r3, r2
 8012144:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8012146:	7f3b      	ldrb	r3, [r7, #28]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d044      	beq.n	80121d6 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 801214c:	4b29      	ldr	r3, [pc, #164]	@ (80121f4 <LoRaMacMcpsRequest+0x1e8>)
 801214e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8012152:	f083 0301 	eor.w	r3, r3, #1
 8012156:	b2db      	uxtb	r3, r3
 8012158:	2b00      	cmp	r3, #0
 801215a:	d019      	beq.n	8012190 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 801215c:	7f7b      	ldrb	r3, [r7, #29]
 801215e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012160:	4b24      	ldr	r3, [pc, #144]	@ (80121f4 <LoRaMacMcpsRequest+0x1e8>)
 8012162:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8012166:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012168:	4b22      	ldr	r3, [pc, #136]	@ (80121f4 <LoRaMacMcpsRequest+0x1e8>)
 801216a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801216e:	f107 0108 	add.w	r1, r7, #8
 8012172:	2205      	movs	r2, #5
 8012174:	4618      	mov	r0, r3
 8012176:	f002 f97b 	bl	8014470 <RegionVerify>
 801217a:	4603      	mov	r3, r0
 801217c:	2b00      	cmp	r3, #0
 801217e:	d005      	beq.n	801218c <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012180:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012184:	4b1b      	ldr	r3, [pc, #108]	@ (80121f4 <LoRaMacMcpsRequest+0x1e8>)
 8012186:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 801218a:	e001      	b.n	8012190 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 801218c:	2303      	movs	r3, #3
 801218e:	e029      	b.n	80121e4 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8012190:	8bfa      	ldrh	r2, [r7, #30]
 8012192:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8012196:	f107 000c 	add.w	r0, r7, #12
 801219a:	78fb      	ldrb	r3, [r7, #3]
 801219c:	9300      	str	r3, [sp, #0]
 801219e:	4613      	mov	r3, r2
 80121a0:	6a3a      	ldr	r2, [r7, #32]
 80121a2:	f7fd fc05 	bl	800f9b0 <Send>
 80121a6:	4603      	mov	r3, r0
 80121a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if( status == LORAMAC_STATUS_OK )
 80121ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d10c      	bne.n	80121ce <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	781a      	ldrb	r2, [r3, #0]
 80121b8:	4b0d      	ldr	r3, [pc, #52]	@ (80121f0 <LoRaMacMcpsRequest+0x1e4>)
 80121ba:	f883 2434 	strb.w	r2, [r3, #1076]	@ 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80121be:	4a0c      	ldr	r2, [pc, #48]	@ (80121f0 <LoRaMacMcpsRequest+0x1e4>)
 80121c0:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 80121c4:	f043 0301 	orr.w	r3, r3, #1
 80121c8:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 80121cc:	e003      	b.n	80121d6 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80121ce:	4b08      	ldr	r3, [pc, #32]	@ (80121f0 <LoRaMacMcpsRequest+0x1e4>)
 80121d0:	2200      	movs	r2, #0
 80121d2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80121d6:	4b06      	ldr	r3, [pc, #24]	@ (80121f0 <LoRaMacMcpsRequest+0x1e4>)
 80121d8:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	611a      	str	r2, [r3, #16]

    return status;
 80121e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3728      	adds	r7, #40	@ 0x28
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	20000c28 	.word	0x20000c28
 80121f0:	200007f4 	.word	0x200007f4
 80121f4:	20000cfc 	.word	0x20000cfc

080121f8 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b084      	sub	sp, #16
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	4603      	mov	r3, r0
 8012200:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012202:	79fb      	ldrb	r3, [r7, #7]
 8012204:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8012206:	4b0d      	ldr	r3, [pc, #52]	@ (801223c <LoRaMacTestSetDutyCycleOn+0x44>)
 8012208:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801220c:	f107 010c 	add.w	r1, r7, #12
 8012210:	220f      	movs	r2, #15
 8012212:	4618      	mov	r0, r3
 8012214:	f002 f92c 	bl	8014470 <RegionVerify>
 8012218:	4603      	mov	r3, r0
 801221a:	2b00      	cmp	r3, #0
 801221c:	d00a      	beq.n	8012234 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801221e:	4a07      	ldr	r2, [pc, #28]	@ (801223c <LoRaMacTestSetDutyCycleOn+0x44>)
 8012220:	79fb      	ldrb	r3, [r7, #7]
 8012222:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8012226:	4a06      	ldr	r2, [pc, #24]	@ (8012240 <LoRaMacTestSetDutyCycleOn+0x48>)
 8012228:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 801222c:	f043 0320 	orr.w	r3, r3, #32
 8012230:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 8012234:	bf00      	nop
 8012236:	3710      	adds	r7, #16
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}
 801223c:	20000cfc 	.word	0x20000cfc
 8012240:	200007f4 	.word	0x200007f4

08012244 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8012244:	b580      	push	{r7, lr}
 8012246:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8012248:	f7fe ff2a 	bl	80110a0 <LoRaMacStop>
 801224c:	4603      	mov	r3, r0
 801224e:	2b00      	cmp	r3, #0
 8012250:	d115      	bne.n	801227e <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8012252:	480c      	ldr	r0, [pc, #48]	@ (8012284 <LoRaMacDeInitialization+0x40>)
 8012254:	f008 fd90 	bl	801ad78 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8012258:	480b      	ldr	r0, [pc, #44]	@ (8012288 <LoRaMacDeInitialization+0x44>)
 801225a:	f008 fd8d 	bl	801ad78 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801225e:	480b      	ldr	r0, [pc, #44]	@ (801228c <LoRaMacDeInitialization+0x48>)
 8012260:	f008 fd8a 	bl	801ad78 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8012264:	480a      	ldr	r0, [pc, #40]	@ (8012290 <LoRaMacDeInitialization+0x4c>)
 8012266:	f008 fd87 	bl	801ad78 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 801226a:	f000 f95e 	bl	801252a <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 801226e:	2000      	movs	r0, #0
 8012270:	f7fd fefe 	bl	8010070 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8012274:	4b07      	ldr	r3, [pc, #28]	@ (8012294 <LoRaMacDeInitialization+0x50>)
 8012276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012278:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 801227a:	2300      	movs	r3, #0
 801227c:	e000      	b.n	8012280 <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 801227e:	2301      	movs	r3, #1
    }
}
 8012280:	4618      	mov	r0, r3
 8012282:	bd80      	pop	{r7, pc}
 8012284:	20000b5c 	.word	0x20000b5c
 8012288:	20000b74 	.word	0x20000b74
 801228c:	20000b8c 	.word	0x20000b8c
 8012290:	20000be8 	.word	0x20000be8
 8012294:	0801eb10 	.word	0x0801eb10

08012298 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b08c      	sub	sp, #48	@ 0x30
 801229c:	af00      	add	r7, sp, #0
 801229e:	60f8      	str	r0, [r7, #12]
 80122a0:	60b9      	str	r1, [r7, #8]
 80122a2:	607a      	str	r2, [r7, #4]
 80122a4:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80122a6:	2300      	movs	r3, #0
 80122a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	7c1b      	ldrb	r3, [r3, #16]
 80122b0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	7c5b      	ldrb	r3, [r3, #17]
 80122b8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	689a      	ldr	r2, [r3, #8]
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	795b      	ldrb	r3, [r3, #5]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	f000 808b 	beq.w	80123e4 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80122ce:	2302      	movs	r3, #2
 80122d0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	7c9b      	ldrb	r3, [r3, #18]
 80122d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	7cdb      	ldrb	r3, [r3, #19]
 80122e0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80122e4:	4611      	mov	r1, r2
 80122e6:	4618      	mov	r0, r3
 80122e8:	f002 f887 	bl	80143fa <RegionGetPhyParam>
 80122ec:	4603      	mov	r3, r0
 80122ee:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80122f0:	6a3b      	ldr	r3, [r7, #32]
 80122f2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        datarate = MAX( datarate, minTxDatarate );
 80122f6:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 80122fa:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 80122fe:	4293      	cmp	r3, r2
 8012300:	bfb8      	it	lt
 8012302:	4613      	movlt	r3, r2
 8012304:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        if( datarate == minTxDatarate )
 8012308:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 801230c:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8012310:	429a      	cmp	r2, r3
 8012312:	d106      	bne.n	8012322 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	2200      	movs	r2, #0
 8012318:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 801231a:	2300      	movs	r3, #0
 801231c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8012320:	e060      	b.n	80123e4 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	689b      	ldr	r3, [r3, #8]
 8012326:	68fa      	ldr	r2, [r7, #12]
 8012328:	8992      	ldrh	r2, [r2, #12]
 801232a:	4293      	cmp	r3, r2
 801232c:	d303      	bcc.n	8012336 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 801232e:	2301      	movs	r3, #1
 8012330:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8012334:	e002      	b.n	801233c <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8012336:	2300      	movs	r3, #0
 8012338:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	689b      	ldr	r3, [r3, #8]
 8012340:	68fa      	ldr	r2, [r7, #12]
 8012342:	8992      	ldrh	r2, [r2, #12]
 8012344:	4611      	mov	r1, r2
 8012346:	68fa      	ldr	r2, [r7, #12]
 8012348:	89d2      	ldrh	r2, [r2, #14]
 801234a:	440a      	add	r2, r1
 801234c:	4293      	cmp	r3, r2
 801234e:	d349      	bcc.n	80123e4 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8012350:	2308      	movs	r3, #8
 8012352:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	7cdb      	ldrb	r3, [r3, #19]
 801235a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801235e:	4611      	mov	r1, r2
 8012360:	4618      	mov	r0, r3
 8012362:	f002 f84a 	bl	80143fa <RegionGetPhyParam>
 8012366:	4603      	mov	r3, r0
 8012368:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 801236a:	6a3b      	ldr	r3, [r7, #32]
 801236c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	689b      	ldr	r3, [r3, #8]
 8012374:	68fa      	ldr	r2, [r7, #12]
 8012376:	89d2      	ldrh	r2, [r2, #14]
 8012378:	fbb3 f1f2 	udiv	r1, r3, r2
 801237c:	fb01 f202 	mul.w	r2, r1, r2
 8012380:	1a9b      	subs	r3, r3, r2
 8012382:	2b01      	cmp	r3, #1
 8012384:	d12e      	bne.n	80123e4 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012386:	2322      	movs	r3, #34	@ 0x22
 8012388:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                    getPhy.Datarate = datarate;
 801238c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012390:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	7c9b      	ldrb	r3, [r3, #18]
 8012398:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	7cdb      	ldrb	r3, [r3, #19]
 80123a0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80123a4:	4611      	mov	r1, r2
 80123a6:	4618      	mov	r0, r3
 80123a8:	f002 f827 	bl	80143fa <RegionGetPhyParam>
 80123ac:	4603      	mov	r3, r0
 80123ae:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 80123b0:	6a3b      	ldr	r3, [r7, #32]
 80123b2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

                    if( datarate == minTxDatarate )
 80123b6:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 80123ba:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 80123be:	429a      	cmp	r2, r3
 80123c0:	d110      	bne.n	80123e4 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80123c2:	2300      	movs	r3, #0
 80123c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        if( adrNext->UpdateChanMask == true )
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	791b      	ldrb	r3, [r3, #4]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d009      	beq.n	80123e4 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80123d0:	2302      	movs	r3, #2
 80123d2:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	7cdb      	ldrb	r3, [r3, #19]
 80123d8:	f107 0214 	add.w	r2, r7, #20
 80123dc:	4611      	mov	r1, r2
 80123de:	4618      	mov	r0, r3
 80123e0:	f002 f834 	bl	801444c <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80123ea:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80123f2:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80123f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3730      	adds	r7, #48	@ 0x30
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b084      	sub	sp, #16
 8012404:	af00      	add	r7, sp, #0
 8012406:	60f8      	str	r0, [r7, #12]
 8012408:	60b9      	str	r1, [r7, #8]
 801240a:	607a      	str	r2, [r7, #4]
 801240c:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	789b      	ldrb	r3, [r3, #2]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d107      	bne.n	8012426 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	68b9      	ldr	r1, [r7, #8]
 801241c:	68f8      	ldr	r0, [r7, #12]
 801241e:	f7ff ff3b 	bl	8012298 <CalcNextV10X>
 8012422:	4603      	mov	r3, r0
 8012424:	e000      	b.n	8012428 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8012426:	2300      	movs	r3, #0
}
 8012428:	4618      	mov	r0, r3
 801242a:	3710      	adds	r7, #16
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}

08012430 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8012430:	b480      	push	{r7}
 8012432:	b085      	sub	sp, #20
 8012434:	af00      	add	r7, sp, #0
 8012436:	60f8      	str	r0, [r7, #12]
 8012438:	60b9      	str	r1, [r7, #8]
 801243a:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801243c:	bf00      	nop
 801243e:	3714      	adds	r7, #20
 8012440:	46bd      	mov	sp, r7
 8012442:	bc80      	pop	{r7}
 8012444:	4770      	bx	lr

08012446 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8012446:	b480      	push	{r7}
 8012448:	b083      	sub	sp, #12
 801244a:	af00      	add	r7, sp, #0
 801244c:	4603      	mov	r3, r0
 801244e:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012450:	bf00      	nop
 8012452:	370c      	adds	r7, #12
 8012454:	46bd      	mov	sp, r7
 8012456:	bc80      	pop	{r7}
 8012458:	4770      	bx	lr

0801245a <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801245a:	b480      	push	{r7}
 801245c:	b083      	sub	sp, #12
 801245e:	af00      	add	r7, sp, #0
 8012460:	4603      	mov	r3, r0
 8012462:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012464:	bf00      	nop
 8012466:	370c      	adds	r7, #12
 8012468:	46bd      	mov	sp, r7
 801246a:	bc80      	pop	{r7}
 801246c:	4770      	bx	lr

0801246e <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801246e:	b480      	push	{r7}
 8012470:	b083      	sub	sp, #12
 8012472:	af00      	add	r7, sp, #0
 8012474:	4603      	mov	r3, r0
 8012476:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012478:	bf00      	nop
 801247a:	370c      	adds	r7, #12
 801247c:	46bd      	mov	sp, r7
 801247e:	bc80      	pop	{r7}
 8012480:	4770      	bx	lr

08012482 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012482:	b480      	push	{r7}
 8012484:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8012486:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012488:	4618      	mov	r0, r3
 801248a:	46bd      	mov	sp, r7
 801248c:	bc80      	pop	{r7}
 801248e:	4770      	bx	lr

08012490 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012490:	b480      	push	{r7}
 8012492:	b083      	sub	sp, #12
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012498:	bf00      	nop
 801249a:	370c      	adds	r7, #12
 801249c:	46bd      	mov	sp, r7
 801249e:	bc80      	pop	{r7}
 80124a0:	4770      	bx	lr

080124a2 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80124a2:	b480      	push	{r7}
 80124a4:	b083      	sub	sp, #12
 80124a6:	af00      	add	r7, sp, #0
 80124a8:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80124aa:	bf00      	nop
 80124ac:	370c      	adds	r7, #12
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bc80      	pop	{r7}
 80124b2:	4770      	bx	lr

080124b4 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80124b4:	b480      	push	{r7}
 80124b6:	b083      	sub	sp, #12
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80124bc:	bf00      	nop
 80124be:	370c      	adds	r7, #12
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bc80      	pop	{r7}
 80124c4:	4770      	bx	lr

080124c6 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80124c6:	b480      	push	{r7}
 80124c8:	b083      	sub	sp, #12
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
 80124ce:	460b      	mov	r3, r1
 80124d0:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80124d2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	370c      	adds	r7, #12
 80124d8:	46bd      	mov	sp, r7
 80124da:	bc80      	pop	{r7}
 80124dc:	4770      	bx	lr

080124de <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80124de:	b480      	push	{r7}
 80124e0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80124e2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80124e4:	4618      	mov	r0, r3
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bc80      	pop	{r7}
 80124ea:	4770      	bx	lr

080124ec <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80124ec:	b480      	push	{r7}
 80124ee:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80124f0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bc80      	pop	{r7}
 80124f8:	4770      	bx	lr

080124fa <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80124fa:	b480      	push	{r7}
 80124fc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80124fe:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012500:	4618      	mov	r0, r3
 8012502:	46bd      	mov	sp, r7
 8012504:	bc80      	pop	{r7}
 8012506:	4770      	bx	lr

08012508 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8012508:	b480      	push	{r7}
 801250a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801250c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801250e:	4618      	mov	r0, r3
 8012510:	46bd      	mov	sp, r7
 8012512:	bc80      	pop	{r7}
 8012514:	4770      	bx	lr

08012516 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8012516:	b480      	push	{r7}
 8012518:	b083      	sub	sp, #12
 801251a:	af00      	add	r7, sp, #0
 801251c:	4603      	mov	r3, r0
 801251e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012520:	bf00      	nop
 8012522:	370c      	adds	r7, #12
 8012524:	46bd      	mov	sp, r7
 8012526:	bc80      	pop	{r7}
 8012528:	4770      	bx	lr

0801252a <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801252a:	b480      	push	{r7}
 801252c:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801252e:	bf00      	nop
 8012530:	46bd      	mov	sp, r7
 8012532:	bc80      	pop	{r7}
 8012534:	4770      	bx	lr

08012536 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8012536:	b480      	push	{r7}
 8012538:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801253a:	bf00      	nop
 801253c:	46bd      	mov	sp, r7
 801253e:	bc80      	pop	{r7}
 8012540:	4770      	bx	lr

08012542 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012542:	b480      	push	{r7}
 8012544:	b083      	sub	sp, #12
 8012546:	af00      	add	r7, sp, #0
 8012548:	4603      	mov	r3, r0
 801254a:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801254c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801254e:	4618      	mov	r0, r3
 8012550:	370c      	adds	r7, #12
 8012552:	46bd      	mov	sp, r7
 8012554:	bc80      	pop	{r7}
 8012556:	4770      	bx	lr

08012558 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012558:	b480      	push	{r7}
 801255a:	b083      	sub	sp, #12
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012560:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012562:	4618      	mov	r0, r3
 8012564:	370c      	adds	r7, #12
 8012566:	46bd      	mov	sp, r7
 8012568:	bc80      	pop	{r7}
 801256a:	4770      	bx	lr

0801256c <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801256c:	b480      	push	{r7}
 801256e:	b083      	sub	sp, #12
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012574:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012576:	4618      	mov	r0, r3
 8012578:	370c      	adds	r7, #12
 801257a:	46bd      	mov	sp, r7
 801257c:	bc80      	pop	{r7}
 801257e:	4770      	bx	lr

08012580 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012580:	b480      	push	{r7}
 8012582:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012584:	bf00      	nop
 8012586:	46bd      	mov	sp, r7
 8012588:	bc80      	pop	{r7}
 801258a:	4770      	bx	lr

0801258c <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801258c:	b480      	push	{r7}
 801258e:	b083      	sub	sp, #12
 8012590:	af00      	add	r7, sp, #0
 8012592:	4603      	mov	r3, r0
 8012594:	6039      	str	r1, [r7, #0]
 8012596:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012598:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801259a:	4618      	mov	r0, r3
 801259c:	370c      	adds	r7, #12
 801259e:	46bd      	mov	sp, r7
 80125a0:	bc80      	pop	{r7}
 80125a2:	4770      	bx	lr

080125a4 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80125a4:	b480      	push	{r7}
 80125a6:	b083      	sub	sp, #12
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	4603      	mov	r3, r0
 80125ac:	603a      	str	r2, [r7, #0]
 80125ae:	80fb      	strh	r3, [r7, #6]
 80125b0:	460b      	mov	r3, r1
 80125b2:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80125b4:	bf00      	nop
 80125b6:	370c      	adds	r7, #12
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bc80      	pop	{r7}
 80125bc:	4770      	bx	lr

080125be <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80125be:	b480      	push	{r7}
 80125c0:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80125c2:	bf00      	nop
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bc80      	pop	{r7}
 80125c8:	4770      	bx	lr

080125ca <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80125ca:	b480      	push	{r7}
 80125cc:	b083      	sub	sp, #12
 80125ce:	af00      	add	r7, sp, #0
 80125d0:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80125d2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	370c      	adds	r7, #12
 80125d8:	46bd      	mov	sp, r7
 80125da:	bc80      	pop	{r7}
 80125dc:	4770      	bx	lr

080125de <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80125de:	b480      	push	{r7}
 80125e0:	b083      	sub	sp, #12
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80125e6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	370c      	adds	r7, #12
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bc80      	pop	{r7}
 80125f0:	4770      	bx	lr

080125f2 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80125f2:	b480      	push	{r7}
 80125f4:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80125f6:	bf00      	nop
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bc80      	pop	{r7}
 80125fc:	4770      	bx	lr

080125fe <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80125fe:	b480      	push	{r7}
 8012600:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012602:	bf00      	nop
 8012604:	46bd      	mov	sp, r7
 8012606:	bc80      	pop	{r7}
 8012608:	4770      	bx	lr

0801260a <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801260a:	b480      	push	{r7}
 801260c:	b085      	sub	sp, #20
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012616:	2300      	movs	r3, #0
 8012618:	81fb      	strh	r3, [r7, #14]
 801261a:	e00a      	b.n	8012632 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 801261c:	89fb      	ldrh	r3, [r7, #14]
 801261e:	68ba      	ldr	r2, [r7, #8]
 8012620:	4413      	add	r3, r2
 8012622:	781b      	ldrb	r3, [r3, #0]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d001      	beq.n	801262c <IsSlotFree+0x22>
        {
            return false;
 8012628:	2300      	movs	r3, #0
 801262a:	e006      	b.n	801263a <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801262c:	89fb      	ldrh	r3, [r7, #14]
 801262e:	3301      	adds	r3, #1
 8012630:	81fb      	strh	r3, [r7, #14]
 8012632:	89fb      	ldrh	r3, [r7, #14]
 8012634:	2b0f      	cmp	r3, #15
 8012636:	d9f1      	bls.n	801261c <IsSlotFree+0x12>
        }
    }
    return true;
 8012638:	2301      	movs	r3, #1
}
 801263a:	4618      	mov	r0, r3
 801263c:	3714      	adds	r7, #20
 801263e:	46bd      	mov	sp, r7
 8012640:	bc80      	pop	{r7}
 8012642:	4770      	bx	lr

08012644 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b082      	sub	sp, #8
 8012648:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801264a:	2300      	movs	r3, #0
 801264c:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801264e:	e007      	b.n	8012660 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012650:	79fb      	ldrb	r3, [r7, #7]
 8012652:	3301      	adds	r3, #1
 8012654:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8012656:	79fb      	ldrb	r3, [r7, #7]
 8012658:	2b0f      	cmp	r3, #15
 801265a:	d101      	bne.n	8012660 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 801265c:	2300      	movs	r3, #0
 801265e:	e012      	b.n	8012686 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012660:	79fb      	ldrb	r3, [r7, #7]
 8012662:	011b      	lsls	r3, r3, #4
 8012664:	3308      	adds	r3, #8
 8012666:	4a0a      	ldr	r2, [pc, #40]	@ (8012690 <MallocNewMacCommandSlot+0x4c>)
 8012668:	4413      	add	r3, r2
 801266a:	4618      	mov	r0, r3
 801266c:	f7ff ffcd 	bl	801260a <IsSlotFree>
 8012670:	4603      	mov	r3, r0
 8012672:	f083 0301 	eor.w	r3, r3, #1
 8012676:	b2db      	uxtb	r3, r3
 8012678:	2b00      	cmp	r3, #0
 801267a:	d1e9      	bne.n	8012650 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 801267c:	79fb      	ldrb	r3, [r7, #7]
 801267e:	011b      	lsls	r3, r3, #4
 8012680:	3308      	adds	r3, #8
 8012682:	4a03      	ldr	r2, [pc, #12]	@ (8012690 <MallocNewMacCommandSlot+0x4c>)
 8012684:	4413      	add	r3, r2
}
 8012686:	4618      	mov	r0, r3
 8012688:	3708      	adds	r7, #8
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
 801268e:	bf00      	nop
 8012690:	20001484 	.word	0x20001484

08012694 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b082      	sub	sp, #8
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d101      	bne.n	80126a6 <FreeMacCommandSlot+0x12>
    {
        return false;
 80126a2:	2300      	movs	r3, #0
 80126a4:	e005      	b.n	80126b2 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80126a6:	2210      	movs	r2, #16
 80126a8:	2100      	movs	r1, #0
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	f004 f9ec 	bl	8016a88 <memset1>

    return true;
 80126b0:	2301      	movs	r3, #1
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3708      	adds	r7, #8
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}

080126ba <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80126ba:	b480      	push	{r7}
 80126bc:	b083      	sub	sp, #12
 80126be:	af00      	add	r7, sp, #0
 80126c0:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d101      	bne.n	80126cc <LinkedListInit+0x12>
    {
        return false;
 80126c8:	2300      	movs	r3, #0
 80126ca:	e006      	b.n	80126da <LinkedListInit+0x20>
    }

    list->First = NULL;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2200      	movs	r2, #0
 80126d0:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	2200      	movs	r2, #0
 80126d6:	605a      	str	r2, [r3, #4]

    return true;
 80126d8:	2301      	movs	r3, #1
}
 80126da:	4618      	mov	r0, r3
 80126dc:	370c      	adds	r7, #12
 80126de:	46bd      	mov	sp, r7
 80126e0:	bc80      	pop	{r7}
 80126e2:	4770      	bx	lr

080126e4 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80126e4:	b480      	push	{r7}
 80126e6:	b083      	sub	sp, #12
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d002      	beq.n	80126fa <LinkedListAdd+0x16>
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d101      	bne.n	80126fe <LinkedListAdd+0x1a>
    {
        return false;
 80126fa:	2300      	movs	r3, #0
 80126fc:	e015      	b.n	801272a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d102      	bne.n	801270c <LinkedListAdd+0x28>
    {
        list->First = element;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	683a      	ldr	r2, [r7, #0]
 801270a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d003      	beq.n	801271c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	685b      	ldr	r3, [r3, #4]
 8012718:	683a      	ldr	r2, [r7, #0]
 801271a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	2200      	movs	r2, #0
 8012720:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	683a      	ldr	r2, [r7, #0]
 8012726:	605a      	str	r2, [r3, #4]

    return true;
 8012728:	2301      	movs	r3, #1
}
 801272a:	4618      	mov	r0, r3
 801272c:	370c      	adds	r7, #12
 801272e:	46bd      	mov	sp, r7
 8012730:	bc80      	pop	{r7}
 8012732:	4770      	bx	lr

08012734 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012734:	b480      	push	{r7}
 8012736:	b085      	sub	sp, #20
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d002      	beq.n	801274a <LinkedListGetPrevious+0x16>
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d101      	bne.n	801274e <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801274a:	2300      	movs	r3, #0
 801274c:	e016      	b.n	801277c <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012754:	683a      	ldr	r2, [r7, #0]
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	429a      	cmp	r2, r3
 801275a:	d00c      	beq.n	8012776 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801275c:	e002      	b.n	8012764 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d007      	beq.n	801277a <LinkedListGetPrevious+0x46>
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	683a      	ldr	r2, [r7, #0]
 8012770:	429a      	cmp	r2, r3
 8012772:	d1f4      	bne.n	801275e <LinkedListGetPrevious+0x2a>
 8012774:	e001      	b.n	801277a <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8012776:	2300      	movs	r3, #0
 8012778:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801277a:	68fb      	ldr	r3, [r7, #12]
}
 801277c:	4618      	mov	r0, r3
 801277e:	3714      	adds	r7, #20
 8012780:	46bd      	mov	sp, r7
 8012782:	bc80      	pop	{r7}
 8012784:	4770      	bx	lr

08012786 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8012786:	b580      	push	{r7, lr}
 8012788:	b084      	sub	sp, #16
 801278a:	af00      	add	r7, sp, #0
 801278c:	6078      	str	r0, [r7, #4]
 801278e:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d002      	beq.n	801279c <LinkedListRemove+0x16>
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d101      	bne.n	80127a0 <LinkedListRemove+0x1a>
    {
        return false;
 801279c:	2300      	movs	r3, #0
 801279e:	e020      	b.n	80127e2 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80127a0:	6839      	ldr	r1, [r7, #0]
 80127a2:	6878      	ldr	r0, [r7, #4]
 80127a4:	f7ff ffc6 	bl	8012734 <LinkedListGetPrevious>
 80127a8:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	683a      	ldr	r2, [r7, #0]
 80127b0:	429a      	cmp	r2, r3
 80127b2:	d103      	bne.n	80127bc <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	681a      	ldr	r2, [r3, #0]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	683a      	ldr	r2, [r7, #0]
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d102      	bne.n	80127cc <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	68fa      	ldr	r2, [r7, #12]
 80127ca:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d003      	beq.n	80127da <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	681a      	ldr	r2, [r3, #0]
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	2200      	movs	r2, #0
 80127de:	601a      	str	r2, [r3, #0]

    return true;
 80127e0:	2301      	movs	r3, #1
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3710      	adds	r7, #16
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}

080127ea <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80127ea:	b480      	push	{r7}
 80127ec:	b083      	sub	sp, #12
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	4603      	mov	r3, r0
 80127f2:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80127f4:	79fb      	ldrb	r3, [r7, #7]
 80127f6:	2b05      	cmp	r3, #5
 80127f8:	d004      	beq.n	8012804 <IsSticky+0x1a>
 80127fa:	2b05      	cmp	r3, #5
 80127fc:	db04      	blt.n	8012808 <IsSticky+0x1e>
 80127fe:	3b08      	subs	r3, #8
 8012800:	2b02      	cmp	r3, #2
 8012802:	d801      	bhi.n	8012808 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8012804:	2301      	movs	r3, #1
 8012806:	e000      	b.n	801280a <IsSticky+0x20>
        default:
            return false;
 8012808:	2300      	movs	r3, #0
    }
}
 801280a:	4618      	mov	r0, r3
 801280c:	370c      	adds	r7, #12
 801280e:	46bd      	mov	sp, r7
 8012810:	bc80      	pop	{r7}
 8012812:	4770      	bx	lr

08012814 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8012814:	b480      	push	{r7}
 8012816:	b083      	sub	sp, #12
 8012818:	af00      	add	r7, sp, #0
 801281a:	4603      	mov	r3, r0
 801281c:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 801281e:	2300      	movs	r3, #0
    }
}
 8012820:	4618      	mov	r0, r3
 8012822:	370c      	adds	r7, #12
 8012824:	46bd      	mov	sp, r7
 8012826:	bc80      	pop	{r7}
 8012828:	4770      	bx	lr
	...

0801282c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 801282c:	b580      	push	{r7, lr}
 801282e:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8012830:	22fc      	movs	r2, #252	@ 0xfc
 8012832:	2100      	movs	r1, #0
 8012834:	4804      	ldr	r0, [pc, #16]	@ (8012848 <LoRaMacCommandsInit+0x1c>)
 8012836:	f004 f927 	bl	8016a88 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801283a:	4803      	ldr	r0, [pc, #12]	@ (8012848 <LoRaMacCommandsInit+0x1c>)
 801283c:	f7ff ff3d 	bl	80126ba <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012840:	2300      	movs	r3, #0
}
 8012842:	4618      	mov	r0, r3
 8012844:	bd80      	pop	{r7, pc}
 8012846:	bf00      	nop
 8012848:	20001484 	.word	0x20001484

0801284c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b086      	sub	sp, #24
 8012850:	af00      	add	r7, sp, #0
 8012852:	4603      	mov	r3, r0
 8012854:	60b9      	str	r1, [r7, #8]
 8012856:	607a      	str	r2, [r7, #4]
 8012858:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d101      	bne.n	8012864 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012860:	2301      	movs	r3, #1
 8012862:	e03b      	b.n	80128dc <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8012864:	f7ff feee 	bl	8012644 <MallocNewMacCommandSlot>
 8012868:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d101      	bne.n	8012874 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8012870:	2302      	movs	r3, #2
 8012872:	e033      	b.n	80128dc <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8012874:	6979      	ldr	r1, [r7, #20]
 8012876:	481b      	ldr	r0, [pc, #108]	@ (80128e4 <LoRaMacCommandsAddCmd+0x98>)
 8012878:	f7ff ff34 	bl	80126e4 <LinkedListAdd>
 801287c:	4603      	mov	r3, r0
 801287e:	f083 0301 	eor.w	r3, r3, #1
 8012882:	b2db      	uxtb	r3, r3
 8012884:	2b00      	cmp	r3, #0
 8012886:	d001      	beq.n	801288c <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012888:	2305      	movs	r3, #5
 801288a:	e027      	b.n	80128dc <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	7bfa      	ldrb	r2, [r7, #15]
 8012890:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	687a      	ldr	r2, [r7, #4]
 8012896:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	3305      	adds	r3, #5
 801289c:	687a      	ldr	r2, [r7, #4]
 801289e:	b292      	uxth	r2, r2
 80128a0:	68b9      	ldr	r1, [r7, #8]
 80128a2:	4618      	mov	r0, r3
 80128a4:	f004 f8b5 	bl	8016a12 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80128a8:	7bfb      	ldrb	r3, [r7, #15]
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7ff ff9d 	bl	80127ea <IsSticky>
 80128b0:	4603      	mov	r3, r0
 80128b2:	461a      	mov	r2, r3
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 80128b8:	7bfb      	ldrb	r3, [r7, #15]
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7ff ffaa 	bl	8012814 <IsConfirmationRequired>
 80128c0:	4603      	mov	r3, r0
 80128c2:	461a      	mov	r2, r3
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80128c8:	4b06      	ldr	r3, [pc, #24]	@ (80128e4 <LoRaMacCommandsAddCmd+0x98>)
 80128ca:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	4413      	add	r3, r2
 80128d2:	3301      	adds	r3, #1
 80128d4:	4a03      	ldr	r2, [pc, #12]	@ (80128e4 <LoRaMacCommandsAddCmd+0x98>)
 80128d6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 80128da:	2300      	movs	r3, #0
}
 80128dc:	4618      	mov	r0, r3
 80128de:	3718      	adds	r7, #24
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}
 80128e4:	20001484 	.word	0x20001484

080128e8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b082      	sub	sp, #8
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d101      	bne.n	80128fa <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80128f6:	2301      	movs	r3, #1
 80128f8:	e021      	b.n	801293e <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80128fa:	6879      	ldr	r1, [r7, #4]
 80128fc:	4812      	ldr	r0, [pc, #72]	@ (8012948 <LoRaMacCommandsRemoveCmd+0x60>)
 80128fe:	f7ff ff42 	bl	8012786 <LinkedListRemove>
 8012902:	4603      	mov	r3, r0
 8012904:	f083 0301 	eor.w	r3, r3, #1
 8012908:	b2db      	uxtb	r3, r3
 801290a:	2b00      	cmp	r3, #0
 801290c:	d001      	beq.n	8012912 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801290e:	2303      	movs	r3, #3
 8012910:	e015      	b.n	801293e <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8012912:	4b0d      	ldr	r3, [pc, #52]	@ (8012948 <LoRaMacCommandsRemoveCmd+0x60>)
 8012914:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	689b      	ldr	r3, [r3, #8]
 801291c:	1ad3      	subs	r3, r2, r3
 801291e:	3b01      	subs	r3, #1
 8012920:	4a09      	ldr	r2, [pc, #36]	@ (8012948 <LoRaMacCommandsRemoveCmd+0x60>)
 8012922:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f7ff feb4 	bl	8012694 <FreeMacCommandSlot>
 801292c:	4603      	mov	r3, r0
 801292e:	f083 0301 	eor.w	r3, r3, #1
 8012932:	b2db      	uxtb	r3, r3
 8012934:	2b00      	cmp	r3, #0
 8012936:	d001      	beq.n	801293c <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012938:	2305      	movs	r3, #5
 801293a:	e000      	b.n	801293e <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801293c:	2300      	movs	r3, #0
}
 801293e:	4618      	mov	r0, r3
 8012940:	3708      	adds	r7, #8
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
 8012946:	bf00      	nop
 8012948:	20001484 	.word	0x20001484

0801294c <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 801294c:	b480      	push	{r7}
 801294e:	b085      	sub	sp, #20
 8012950:	af00      	add	r7, sp, #0
 8012952:	4603      	mov	r3, r0
 8012954:	6039      	str	r1, [r7, #0]
 8012956:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012958:	4b0e      	ldr	r3, [pc, #56]	@ (8012994 <LoRaMacCommandsGetCmd+0x48>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801295e:	e002      	b.n	8012966 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d004      	beq.n	8012976 <LoRaMacCommandsGetCmd+0x2a>
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	791b      	ldrb	r3, [r3, #4]
 8012970:	79fa      	ldrb	r2, [r7, #7]
 8012972:	429a      	cmp	r2, r3
 8012974:	d1f4      	bne.n	8012960 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	68fa      	ldr	r2, [r7, #12]
 801297a:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d101      	bne.n	8012986 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012982:	2303      	movs	r3, #3
 8012984:	e000      	b.n	8012988 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8012986:	2300      	movs	r3, #0
}
 8012988:	4618      	mov	r0, r3
 801298a:	3714      	adds	r7, #20
 801298c:	46bd      	mov	sp, r7
 801298e:	bc80      	pop	{r7}
 8012990:	4770      	bx	lr
 8012992:	bf00      	nop
 8012994:	20001484 	.word	0x20001484

08012998 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801299e:	4b0f      	ldr	r3, [pc, #60]	@ (80129dc <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80129a4:	e012      	b.n	80129cc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	7b1b      	ldrb	r3, [r3, #12]
 80129aa:	f083 0301 	eor.w	r3, r3, #1
 80129ae:	b2db      	uxtb	r3, r3
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d008      	beq.n	80129c6 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f7ff ff94 	bl	80128e8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	607b      	str	r3, [r7, #4]
 80129c4:	e002      	b.n	80129cc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d1e9      	bne.n	80129a6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80129d2:	2300      	movs	r3, #0
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	3708      	adds	r7, #8
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}
 80129dc:	20001484 	.word	0x20001484

080129e0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80129e6:	4b13      	ldr	r3, [pc, #76]	@ (8012a34 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80129ec:	e01a      	b.n	8012a24 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	791b      	ldrb	r3, [r3, #4]
 80129f8:	4618      	mov	r0, r3
 80129fa:	f7ff fef6 	bl	80127ea <IsSticky>
 80129fe:	4603      	mov	r3, r0
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d00d      	beq.n	8012a20 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	791b      	ldrb	r3, [r3, #4]
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f7ff ff03 	bl	8012814 <IsConfirmationRequired>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	f083 0301 	eor.w	r3, r3, #1
 8012a14:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d002      	beq.n	8012a20 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8012a1a:	6878      	ldr	r0, [r7, #4]
 8012a1c:	f7ff ff64 	bl	80128e8 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d1e1      	bne.n	80129ee <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012a2a:	2300      	movs	r3, #0
}
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3708      	adds	r7, #8
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}
 8012a34:	20001484 	.word	0x20001484

08012a38 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8012a38:	b480      	push	{r7}
 8012a3a:	b083      	sub	sp, #12
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d101      	bne.n	8012a4a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012a46:	2301      	movs	r3, #1
 8012a48:	e005      	b.n	8012a56 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8012a4a:	4b05      	ldr	r3, [pc, #20]	@ (8012a60 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012a4c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012a54:	2300      	movs	r3, #0
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	370c      	adds	r7, #12
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bc80      	pop	{r7}
 8012a5e:	4770      	bx	lr
 8012a60:	20001484 	.word	0x20001484

08012a64 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b088      	sub	sp, #32
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	60f8      	str	r0, [r7, #12]
 8012a6c:	60b9      	str	r1, [r7, #8]
 8012a6e:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012a70:	4b25      	ldr	r3, [pc, #148]	@ (8012b08 <LoRaMacCommandsSerializeCmds+0xa4>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8012a76:	2300      	movs	r3, #0
 8012a78:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d002      	beq.n	8012a86 <LoRaMacCommandsSerializeCmds+0x22>
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d126      	bne.n	8012ad4 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012a86:	2301      	movs	r3, #1
 8012a88:	e039      	b.n	8012afe <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8012a8a:	7efb      	ldrb	r3, [r7, #27]
 8012a8c:	68fa      	ldr	r2, [r7, #12]
 8012a8e:	1ad2      	subs	r2, r2, r3
 8012a90:	69fb      	ldr	r3, [r7, #28]
 8012a92:	689b      	ldr	r3, [r3, #8]
 8012a94:	3301      	adds	r3, #1
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d320      	bcc.n	8012adc <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8012a9a:	7efb      	ldrb	r3, [r7, #27]
 8012a9c:	1c5a      	adds	r2, r3, #1
 8012a9e:	76fa      	strb	r2, [r7, #27]
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	4413      	add	r3, r2
 8012aa6:	69fa      	ldr	r2, [r7, #28]
 8012aa8:	7912      	ldrb	r2, [r2, #4]
 8012aaa:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8012aac:	7efb      	ldrb	r3, [r7, #27]
 8012aae:	687a      	ldr	r2, [r7, #4]
 8012ab0:	18d0      	adds	r0, r2, r3
 8012ab2:	69fb      	ldr	r3, [r7, #28]
 8012ab4:	1d59      	adds	r1, r3, #5
 8012ab6:	69fb      	ldr	r3, [r7, #28]
 8012ab8:	689b      	ldr	r3, [r3, #8]
 8012aba:	b29b      	uxth	r3, r3
 8012abc:	461a      	mov	r2, r3
 8012abe:	f003 ffa8 	bl	8016a12 <memcpy1>
            itr += curElement->PayloadSize;
 8012ac2:	69fb      	ldr	r3, [r7, #28]
 8012ac4:	689b      	ldr	r3, [r3, #8]
 8012ac6:	b2da      	uxtb	r2, r3
 8012ac8:	7efb      	ldrb	r3, [r7, #27]
 8012aca:	4413      	add	r3, r2
 8012acc:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8012ace:	69fb      	ldr	r3, [r7, #28]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012ad4:	69fb      	ldr	r3, [r7, #28]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d1d7      	bne.n	8012a8a <LoRaMacCommandsSerializeCmds+0x26>
 8012ada:	e009      	b.n	8012af0 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8012adc:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8012ade:	e007      	b.n	8012af0 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8012ae0:	69fb      	ldr	r3, [r7, #28]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8012ae6:	69f8      	ldr	r0, [r7, #28]
 8012ae8:	f7ff fefe 	bl	80128e8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012af0:	69fb      	ldr	r3, [r7, #28]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d1f4      	bne.n	8012ae0 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8012af6:	68b8      	ldr	r0, [r7, #8]
 8012af8:	f7ff ff9e 	bl	8012a38 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012afc:	2300      	movs	r3, #0
}
 8012afe:	4618      	mov	r0, r3
 8012b00:	3720      	adds	r7, #32
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}
 8012b06:	bf00      	nop
 8012b08:	20001484 	.word	0x20001484

08012b0c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012b0c:	b480      	push	{r7}
 8012b0e:	b085      	sub	sp, #20
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	4603      	mov	r3, r0
 8012b14:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8012b16:	2300      	movs	r3, #0
 8012b18:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012b1a:	79fb      	ldrb	r3, [r7, #7]
 8012b1c:	3b02      	subs	r3, #2
 8012b1e:	2b11      	cmp	r3, #17
 8012b20:	d850      	bhi.n	8012bc4 <LoRaMacCommandsGetCmdSize+0xb8>
 8012b22:	a201      	add	r2, pc, #4	@ (adr r2, 8012b28 <LoRaMacCommandsGetCmdSize+0x1c>)
 8012b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b28:	08012b71 	.word	0x08012b71
 8012b2c:	08012b77 	.word	0x08012b77
 8012b30:	08012b7d 	.word	0x08012b7d
 8012b34:	08012b83 	.word	0x08012b83
 8012b38:	08012b89 	.word	0x08012b89
 8012b3c:	08012b8f 	.word	0x08012b8f
 8012b40:	08012b95 	.word	0x08012b95
 8012b44:	08012b9b 	.word	0x08012b9b
 8012b48:	08012ba1 	.word	0x08012ba1
 8012b4c:	08012bc5 	.word	0x08012bc5
 8012b50:	08012bc5 	.word	0x08012bc5
 8012b54:	08012ba7 	.word	0x08012ba7
 8012b58:	08012bc5 	.word	0x08012bc5
 8012b5c:	08012bc5 	.word	0x08012bc5
 8012b60:	08012bad 	.word	0x08012bad
 8012b64:	08012bb3 	.word	0x08012bb3
 8012b68:	08012bb9 	.word	0x08012bb9
 8012b6c:	08012bbf 	.word	0x08012bbf
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8012b70:	2303      	movs	r3, #3
 8012b72:	73fb      	strb	r3, [r7, #15]
            break;
 8012b74:	e027      	b.n	8012bc6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8012b76:	2305      	movs	r3, #5
 8012b78:	73fb      	strb	r3, [r7, #15]
            break;
 8012b7a:	e024      	b.n	8012bc6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8012b7c:	2302      	movs	r3, #2
 8012b7e:	73fb      	strb	r3, [r7, #15]
            break;
 8012b80:	e021      	b.n	8012bc6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8012b82:	2305      	movs	r3, #5
 8012b84:	73fb      	strb	r3, [r7, #15]
            break;
 8012b86:	e01e      	b.n	8012bc6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8012b88:	2301      	movs	r3, #1
 8012b8a:	73fb      	strb	r3, [r7, #15]
            break;
 8012b8c:	e01b      	b.n	8012bc6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8012b8e:	2306      	movs	r3, #6
 8012b90:	73fb      	strb	r3, [r7, #15]
            break;
 8012b92:	e018      	b.n	8012bc6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8012b94:	2302      	movs	r3, #2
 8012b96:	73fb      	strb	r3, [r7, #15]
            break;
 8012b98:	e015      	b.n	8012bc6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8012b9a:	2302      	movs	r3, #2
 8012b9c:	73fb      	strb	r3, [r7, #15]
            break;
 8012b9e:	e012      	b.n	8012bc6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8012ba0:	2305      	movs	r3, #5
 8012ba2:	73fb      	strb	r3, [r7, #15]
            break;
 8012ba4:	e00f      	b.n	8012bc6 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8012ba6:	2306      	movs	r3, #6
 8012ba8:	73fb      	strb	r3, [r7, #15]
            break;
 8012baa:	e00c      	b.n	8012bc6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012bac:	2301      	movs	r3, #1
 8012bae:	73fb      	strb	r3, [r7, #15]
            break;
 8012bb0:	e009      	b.n	8012bc6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8012bb2:	2305      	movs	r3, #5
 8012bb4:	73fb      	strb	r3, [r7, #15]
            break;
 8012bb6:	e006      	b.n	8012bc6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012bb8:	2304      	movs	r3, #4
 8012bba:	73fb      	strb	r3, [r7, #15]
            break;
 8012bbc:	e003      	b.n	8012bc6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8012bbe:	2304      	movs	r3, #4
 8012bc0:	73fb      	strb	r3, [r7, #15]
            break;
 8012bc2:	e000      	b.n	8012bc6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012bc4:	bf00      	nop
        }
    }
    return cidSize;
 8012bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3714      	adds	r7, #20
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bc80      	pop	{r7}
 8012bd0:	4770      	bx	lr
 8012bd2:	bf00      	nop

08012bd4 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012bd4:	b480      	push	{r7}
 8012bd6:	b083      	sub	sp, #12
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	4a07      	ldr	r2, [pc, #28]	@ (8012bfc <IncreaseBufferPointer+0x28>)
 8012be0:	4293      	cmp	r3, r2
 8012be2:	d102      	bne.n	8012bea <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012be4:	4b06      	ldr	r3, [pc, #24]	@ (8012c00 <IncreaseBufferPointer+0x2c>)
 8012be6:	607b      	str	r3, [r7, #4]
 8012be8:	e002      	b.n	8012bf0 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	3304      	adds	r3, #4
 8012bee:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012bf0:	687b      	ldr	r3, [r7, #4]
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	370c      	adds	r7, #12
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bc80      	pop	{r7}
 8012bfa:	4770      	bx	lr
 8012bfc:	2000159c 	.word	0x2000159c
 8012c00:	2000158c 	.word	0x2000158c

08012c04 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012c04:	b480      	push	{r7}
 8012c06:	b083      	sub	sp, #12
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8012c0e:	79fb      	ldrb	r3, [r7, #7]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d101      	bne.n	8012c18 <IsListEmpty+0x14>
    {
        return true;
 8012c14:	2301      	movs	r3, #1
 8012c16:	e000      	b.n	8012c1a <IsListEmpty+0x16>
    }
    return false;
 8012c18:	2300      	movs	r3, #0
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	370c      	adds	r7, #12
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bc80      	pop	{r7}
 8012c22:	4770      	bx	lr

08012c24 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012c24:	b480      	push	{r7}
 8012c26:	b083      	sub	sp, #12
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012c2e:	79fb      	ldrb	r3, [r7, #7]
 8012c30:	2b04      	cmp	r3, #4
 8012c32:	d901      	bls.n	8012c38 <IsListFull+0x14>
    {
        return true;
 8012c34:	2301      	movs	r3, #1
 8012c36:	e000      	b.n	8012c3a <IsListFull+0x16>
    }
    return false;
 8012c38:	2300      	movs	r3, #0
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	370c      	adds	r7, #12
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bc80      	pop	{r7}
 8012c42:	4770      	bx	lr

08012c44 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b086      	sub	sp, #24
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	60b9      	str	r1, [r7, #8]
 8012c4e:	607a      	str	r2, [r7, #4]
 8012c50:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012c56:	4b13      	ldr	r3, [pc, #76]	@ (8012ca4 <GetElement+0x60>)
 8012c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f7ff ffd1 	bl	8012c04 <IsListEmpty>
 8012c62:	4603      	mov	r3, r0
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d001      	beq.n	8012c6c <GetElement+0x28>
    {
        return NULL;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	e017      	b.n	8012c9c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	74fb      	strb	r3, [r7, #19]
 8012c70:	e00d      	b.n	8012c8e <GetElement+0x4a>
    {
        if( element->Request == request )
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	781b      	ldrb	r3, [r3, #0]
 8012c76:	7bfa      	ldrb	r2, [r7, #15]
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	d101      	bne.n	8012c80 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012c7c:	697b      	ldr	r3, [r7, #20]
 8012c7e:	e00d      	b.n	8012c9c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8012c80:	6978      	ldr	r0, [r7, #20]
 8012c82:	f7ff ffa7 	bl	8012bd4 <IncreaseBufferPointer>
 8012c86:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012c88:	7cfb      	ldrb	r3, [r7, #19]
 8012c8a:	3301      	adds	r3, #1
 8012c8c:	74fb      	strb	r3, [r7, #19]
 8012c8e:	4b05      	ldr	r3, [pc, #20]	@ (8012ca4 <GetElement+0x60>)
 8012c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012c94:	7cfa      	ldrb	r2, [r7, #19]
 8012c96:	429a      	cmp	r2, r3
 8012c98:	d3eb      	bcc.n	8012c72 <GetElement+0x2e>
    }

    return NULL;
 8012c9a:	2300      	movs	r3, #0
}
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	3718      	adds	r7, #24
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}
 8012ca4:	20001580 	.word	0x20001580

08012ca8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8012ce4 <LoRaMacConfirmQueueInit+0x3c>)
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8012ce4 <LoRaMacConfirmQueueInit+0x3c>)
 8012cb8:	2200      	movs	r2, #0
 8012cba:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012cbe:	4b09      	ldr	r3, [pc, #36]	@ (8012ce4 <LoRaMacConfirmQueueInit+0x3c>)
 8012cc0:	4a09      	ldr	r2, [pc, #36]	@ (8012ce8 <LoRaMacConfirmQueueInit+0x40>)
 8012cc2:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012cc4:	4b07      	ldr	r3, [pc, #28]	@ (8012ce4 <LoRaMacConfirmQueueInit+0x3c>)
 8012cc6:	4a08      	ldr	r2, [pc, #32]	@ (8012ce8 <LoRaMacConfirmQueueInit+0x40>)
 8012cc8:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8012cca:	2214      	movs	r2, #20
 8012ccc:	21ff      	movs	r1, #255	@ 0xff
 8012cce:	4806      	ldr	r0, [pc, #24]	@ (8012ce8 <LoRaMacConfirmQueueInit+0x40>)
 8012cd0:	f003 feda 	bl	8016a88 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012cd4:	4b03      	ldr	r3, [pc, #12]	@ (8012ce4 <LoRaMacConfirmQueueInit+0x3c>)
 8012cd6:	2201      	movs	r2, #1
 8012cd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8012cdc:	bf00      	nop
 8012cde:	3708      	adds	r7, #8
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd80      	pop	{r7, pc}
 8012ce4:	20001580 	.word	0x20001580
 8012ce8:	2000158c 	.word	0x2000158c

08012cec <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b082      	sub	sp, #8
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012cf4:	4b19      	ldr	r3, [pc, #100]	@ (8012d5c <LoRaMacConfirmQueueAdd+0x70>)
 8012cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7ff ff92 	bl	8012c24 <IsListFull>
 8012d00:	4603      	mov	r3, r0
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d001      	beq.n	8012d0a <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012d06:	2300      	movs	r3, #0
 8012d08:	e023      	b.n	8012d52 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012d0a:	4b14      	ldr	r3, [pc, #80]	@ (8012d5c <LoRaMacConfirmQueueAdd+0x70>)
 8012d0c:	689b      	ldr	r3, [r3, #8]
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	7812      	ldrb	r2, [r2, #0]
 8012d12:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012d14:	4b11      	ldr	r3, [pc, #68]	@ (8012d5c <LoRaMacConfirmQueueAdd+0x70>)
 8012d16:	689b      	ldr	r3, [r3, #8]
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	7852      	ldrb	r2, [r2, #1]
 8012d1c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8012d5c <LoRaMacConfirmQueueAdd+0x70>)
 8012d20:	689b      	ldr	r3, [r3, #8]
 8012d22:	687a      	ldr	r2, [r7, #4]
 8012d24:	78d2      	ldrb	r2, [r2, #3]
 8012d26:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8012d28:	4b0c      	ldr	r3, [pc, #48]	@ (8012d5c <LoRaMacConfirmQueueAdd+0x70>)
 8012d2a:	689b      	ldr	r3, [r3, #8]
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012d30:	4b0a      	ldr	r3, [pc, #40]	@ (8012d5c <LoRaMacConfirmQueueAdd+0x70>)
 8012d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d36:	3301      	adds	r3, #1
 8012d38:	b2da      	uxtb	r2, r3
 8012d3a:	4b08      	ldr	r3, [pc, #32]	@ (8012d5c <LoRaMacConfirmQueueAdd+0x70>)
 8012d3c:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012d40:	4b06      	ldr	r3, [pc, #24]	@ (8012d5c <LoRaMacConfirmQueueAdd+0x70>)
 8012d42:	689b      	ldr	r3, [r3, #8]
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7ff ff45 	bl	8012bd4 <IncreaseBufferPointer>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	4a03      	ldr	r2, [pc, #12]	@ (8012d5c <LoRaMacConfirmQueueAdd+0x70>)
 8012d4e:	6093      	str	r3, [r2, #8]

    return true;
 8012d50:	2301      	movs	r3, #1
}
 8012d52:	4618      	mov	r0, r3
 8012d54:	3708      	adds	r7, #8
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}
 8012d5a:	bf00      	nop
 8012d5c:	20001580 	.word	0x20001580

08012d60 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012d64:	4b0e      	ldr	r3, [pc, #56]	@ (8012da0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7ff ff4a 	bl	8012c04 <IsListEmpty>
 8012d70:	4603      	mov	r3, r0
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d001      	beq.n	8012d7a <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012d76:	2300      	movs	r3, #0
 8012d78:	e010      	b.n	8012d9c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012d7a:	4b09      	ldr	r3, [pc, #36]	@ (8012da0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012d80:	3b01      	subs	r3, #1
 8012d82:	b2da      	uxtb	r2, r3
 8012d84:	4b06      	ldr	r3, [pc, #24]	@ (8012da0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012d86:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012d8a:	4b05      	ldr	r3, [pc, #20]	@ (8012da0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012d8c:	685b      	ldr	r3, [r3, #4]
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f7ff ff20 	bl	8012bd4 <IncreaseBufferPointer>
 8012d94:	4603      	mov	r3, r0
 8012d96:	4a02      	ldr	r2, [pc, #8]	@ (8012da0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012d98:	6053      	str	r3, [r2, #4]

    return true;
 8012d9a:	2301      	movs	r3, #1
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	20001580 	.word	0x20001580

08012da4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b084      	sub	sp, #16
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	4603      	mov	r3, r0
 8012dac:	460a      	mov	r2, r1
 8012dae:	71fb      	strb	r3, [r7, #7]
 8012db0:	4613      	mov	r3, r2
 8012db2:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012db4:	2300      	movs	r3, #0
 8012db6:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012db8:	4b10      	ldr	r3, [pc, #64]	@ (8012dfc <LoRaMacConfirmQueueSetStatus+0x58>)
 8012dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7ff ff20 	bl	8012c04 <IsListEmpty>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	f083 0301 	eor.w	r3, r3, #1
 8012dca:	b2db      	uxtb	r3, r3
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d011      	beq.n	8012df4 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8012dfc <LoRaMacConfirmQueueSetStatus+0x58>)
 8012dd2:	6859      	ldr	r1, [r3, #4]
 8012dd4:	4b09      	ldr	r3, [pc, #36]	@ (8012dfc <LoRaMacConfirmQueueSetStatus+0x58>)
 8012dd6:	689a      	ldr	r2, [r3, #8]
 8012dd8:	79bb      	ldrb	r3, [r7, #6]
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f7ff ff32 	bl	8012c44 <GetElement>
 8012de0:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d005      	beq.n	8012df4 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	79fa      	ldrb	r2, [r7, #7]
 8012dec:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	2201      	movs	r2, #1
 8012df2:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012df4:	bf00      	nop
 8012df6:	3710      	adds	r7, #16
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}
 8012dfc:	20001580 	.word	0x20001580

08012e00 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b084      	sub	sp, #16
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	4603      	mov	r3, r0
 8012e08:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012e0e:	4b10      	ldr	r3, [pc, #64]	@ (8012e50 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7ff fef5 	bl	8012c04 <IsListEmpty>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	f083 0301 	eor.w	r3, r3, #1
 8012e20:	b2db      	uxtb	r3, r3
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d00e      	beq.n	8012e44 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012e26:	4b0a      	ldr	r3, [pc, #40]	@ (8012e50 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012e28:	6859      	ldr	r1, [r3, #4]
 8012e2a:	4b09      	ldr	r3, [pc, #36]	@ (8012e50 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012e2c:	689a      	ldr	r2, [r3, #8]
 8012e2e:	79fb      	ldrb	r3, [r7, #7]
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7ff ff07 	bl	8012c44 <GetElement>
 8012e36:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d002      	beq.n	8012e44 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	785b      	ldrb	r3, [r3, #1]
 8012e42:	e000      	b.n	8012e46 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012e44:	2301      	movs	r3, #1
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	3710      	adds	r7, #16
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}
 8012e4e:	bf00      	nop
 8012e50:	20001580 	.word	0x20001580

08012e54 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b084      	sub	sp, #16
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8012e5e:	4b16      	ldr	r3, [pc, #88]	@ (8012eb8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012e60:	685b      	ldr	r3, [r3, #4]
 8012e62:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012e64:	4a14      	ldr	r2, [pc, #80]	@ (8012eb8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012e66:	79fb      	ldrb	r3, [r7, #7]
 8012e68:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012e6c:	4b12      	ldr	r3, [pc, #72]	@ (8012eb8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e72:	4618      	mov	r0, r3
 8012e74:	f7ff fec6 	bl	8012c04 <IsListEmpty>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	f083 0301 	eor.w	r3, r3, #1
 8012e7e:	b2db      	uxtb	r3, r3
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d015      	beq.n	8012eb0 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	79fa      	ldrb	r2, [r7, #7]
 8012e88:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	78db      	ldrb	r3, [r3, #3]
 8012e8e:	f083 0301 	eor.w	r3, r3, #1
 8012e92:	b2db      	uxtb	r3, r3
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d002      	beq.n	8012e9e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	2201      	movs	r2, #1
 8012e9c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8012e9e:	68f8      	ldr	r0, [r7, #12]
 8012ea0:	f7ff fe98 	bl	8012bd4 <IncreaseBufferPointer>
 8012ea4:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8012ea6:	4b04      	ldr	r3, [pc, #16]	@ (8012eb8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012ea8:	689b      	ldr	r3, [r3, #8]
 8012eaa:	68fa      	ldr	r2, [r7, #12]
 8012eac:	429a      	cmp	r2, r3
 8012eae:	d1e9      	bne.n	8012e84 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8012eb0:	bf00      	nop
 8012eb2:	3710      	adds	r7, #16
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}
 8012eb8:	20001580 	.word	0x20001580

08012ebc <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b082      	sub	sp, #8
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8012ec6:	4b09      	ldr	r3, [pc, #36]	@ (8012eec <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012ec8:	6859      	ldr	r1, [r3, #4]
 8012eca:	4b08      	ldr	r3, [pc, #32]	@ (8012eec <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012ecc:	689a      	ldr	r2, [r3, #8]
 8012ece:	79fb      	ldrb	r3, [r7, #7]
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f7ff feb7 	bl	8012c44 <GetElement>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d001      	beq.n	8012ee0 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8012edc:	2301      	movs	r3, #1
 8012ede:	e000      	b.n	8012ee2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8012ee0:	2300      	movs	r3, #0
}
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	3708      	adds	r7, #8
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bd80      	pop	{r7, pc}
 8012eea:	bf00      	nop
 8012eec:	20001580 	.word	0x20001580

08012ef0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b084      	sub	sp, #16
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012ef8:	4b25      	ldr	r3, [pc, #148]	@ (8012f90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012efa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012efe:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8012f00:	2300      	movs	r3, #0
 8012f02:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8012f04:	f107 0308 	add.w	r3, r7, #8
 8012f08:	2204      	movs	r2, #4
 8012f0a:	2100      	movs	r1, #0
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f003 fdbb 	bl	8016a88 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8012f12:	2300      	movs	r3, #0
 8012f14:	73fb      	strb	r3, [r7, #15]
 8012f16:	e032      	b.n	8012f7e <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8012f18:	4b1d      	ldr	r3, [pc, #116]	@ (8012f90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	781a      	ldrb	r2, [r3, #0]
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012f22:	4b1b      	ldr	r3, [pc, #108]	@ (8012f90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012f24:	685b      	ldr	r3, [r3, #4]
 8012f26:	785a      	ldrb	r2, [r3, #1]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8012f2c:	4b18      	ldr	r3, [pc, #96]	@ (8012f90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012f2e:	685b      	ldr	r3, [r3, #4]
 8012f30:	789b      	ldrb	r3, [r3, #2]
 8012f32:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8012f34:	7b7b      	ldrb	r3, [r7, #13]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d005      	beq.n	8012f46 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8012f3a:	4b15      	ldr	r3, [pc, #84]	@ (8012f90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	689b      	ldr	r3, [r3, #8]
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	4798      	blx	r3
 8012f44:	e00b      	b.n	8012f5e <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8012f46:	4b12      	ldr	r3, [pc, #72]	@ (8012f90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012f48:	685b      	ldr	r3, [r3, #4]
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012f4e:	4b10      	ldr	r3, [pc, #64]	@ (8012f90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012f50:	685b      	ldr	r3, [r3, #4]
 8012f52:	785b      	ldrb	r3, [r3, #1]
 8012f54:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8012f56:	4b0e      	ldr	r3, [pc, #56]	@ (8012f90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012f58:	685b      	ldr	r3, [r3, #4]
 8012f5a:	78db      	ldrb	r3, [r3, #3]
 8012f5c:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012f5e:	f7ff feff 	bl	8012d60 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012f62:	7b7b      	ldrb	r3, [r7, #13]
 8012f64:	f083 0301 	eor.w	r3, r3, #1
 8012f68:	b2db      	uxtb	r3, r3
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d004      	beq.n	8012f78 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012f6e:	f107 0308 	add.w	r3, r7, #8
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7ff feba 	bl	8012cec <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8012f78:	7bfb      	ldrb	r3, [r7, #15]
 8012f7a:	3301      	adds	r3, #1
 8012f7c:	73fb      	strb	r3, [r7, #15]
 8012f7e:	7bfa      	ldrb	r2, [r7, #15]
 8012f80:	7bbb      	ldrb	r3, [r7, #14]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d3c8      	bcc.n	8012f18 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8012f86:	bf00      	nop
 8012f88:	bf00      	nop
 8012f8a:	3710      	adds	r7, #16
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}
 8012f90:	20001580 	.word	0x20001580

08012f94 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8012f94:	b480      	push	{r7}
 8012f96:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012f98:	4b03      	ldr	r3, [pc, #12]	@ (8012fa8 <LoRaMacConfirmQueueGetCnt+0x14>)
 8012f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bc80      	pop	{r7}
 8012fa4:	4770      	bx	lr
 8012fa6:	bf00      	nop
 8012fa8:	20001580 	.word	0x20001580

08012fac <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012fb0:	4b06      	ldr	r3, [pc, #24]	@ (8012fcc <LoRaMacConfirmQueueIsFull+0x20>)
 8012fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7ff fe34 	bl	8012c24 <IsListFull>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d001      	beq.n	8012fc6 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	e000      	b.n	8012fc8 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8012fc6:	2300      	movs	r3, #0
    }
}
 8012fc8:	4618      	mov	r0, r3
 8012fca:	bd80      	pop	{r7, pc}
 8012fcc:	20001580 	.word	0x20001580

08012fd0 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b08e      	sub	sp, #56	@ 0x38
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	60f8      	str	r0, [r7, #12]
 8012fd8:	607b      	str	r3, [r7, #4]
 8012fda:	460b      	mov	r3, r1
 8012fdc:	817b      	strh	r3, [r7, #10]
 8012fde:	4613      	mov	r3, r2
 8012fe0:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d101      	bne.n	8012fec <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012fe8:	230a      	movs	r3, #10
 8012fea:	e086      	b.n	80130fa <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8012fec:	2300      	movs	r3, #0
 8012fee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8012ff2:	2301      	movs	r3, #1
 8012ff4:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	623b      	str	r3, [r7, #32]
 8012ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012ffe:	2200      	movs	r2, #0
 8013000:	601a      	str	r2, [r3, #0]
 8013002:	605a      	str	r2, [r3, #4]
 8013004:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8013006:	2300      	movs	r3, #0
 8013008:	613b      	str	r3, [r7, #16]
 801300a:	f107 0314 	add.w	r3, r7, #20
 801300e:	2200      	movs	r2, #0
 8013010:	601a      	str	r2, [r3, #0]
 8013012:	605a      	str	r2, [r3, #4]
 8013014:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8013016:	2301      	movs	r3, #1
 8013018:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 801301a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801301e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	b2db      	uxtb	r3, r3
 8013024:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	0a1b      	lsrs	r3, r3, #8
 801302a:	b2db      	uxtb	r3, r3
 801302c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	0c1b      	lsrs	r3, r3, #16
 8013032:	b2db      	uxtb	r3, r3
 8013034:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	0e1b      	lsrs	r3, r3, #24
 801303a:	b2db      	uxtb	r3, r3
 801303c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801303e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013040:	b2db      	uxtb	r3, r3
 8013042:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013046:	0a1b      	lsrs	r3, r3, #8
 8013048:	b2db      	uxtb	r3, r3
 801304a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 801304c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801304e:	0c1b      	lsrs	r3, r3, #16
 8013050:	b2db      	uxtb	r3, r3
 8013052:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013056:	0e1b      	lsrs	r3, r3, #24
 8013058:	b2db      	uxtb	r3, r3
 801305a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 801305c:	e048      	b.n	80130f0 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801305e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013060:	b2db      	uxtb	r3, r3
 8013062:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013064:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013066:	3301      	adds	r3, #1
 8013068:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801306a:	f107 0320 	add.w	r3, r7, #32
 801306e:	7a7a      	ldrb	r2, [r7, #9]
 8013070:	f107 0010 	add.w	r0, r7, #16
 8013074:	2110      	movs	r1, #16
 8013076:	f7f8 ff47 	bl	800bf08 <SecureElementAesEncrypt>
 801307a:	4603      	mov	r3, r0
 801307c:	2b00      	cmp	r3, #0
 801307e:	d001      	beq.n	8013084 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013080:	230f      	movs	r3, #15
 8013082:	e03a      	b.n	80130fa <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013084:	2300      	movs	r3, #0
 8013086:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801308a:	e01e      	b.n	80130ca <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801308c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8013090:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013094:	4413      	add	r3, r2
 8013096:	461a      	mov	r2, r3
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	4413      	add	r3, r2
 801309c:	7819      	ldrb	r1, [r3, #0]
 801309e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80130a2:	3338      	adds	r3, #56	@ 0x38
 80130a4:	443b      	add	r3, r7
 80130a6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80130aa:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80130ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80130b2:	4403      	add	r3, r0
 80130b4:	4618      	mov	r0, r3
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	4403      	add	r3, r0
 80130ba:	404a      	eors	r2, r1
 80130bc:	b2d2      	uxtb	r2, r2
 80130be:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80130c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80130c4:	3301      	adds	r3, #1
 80130c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80130ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80130ce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80130d2:	2a10      	cmp	r2, #16
 80130d4:	bfa8      	it	ge
 80130d6:	2210      	movge	r2, #16
 80130d8:	b212      	sxth	r2, r2
 80130da:	4293      	cmp	r3, r2
 80130dc:	dbd6      	blt.n	801308c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80130de:	897b      	ldrh	r3, [r7, #10]
 80130e0:	3b10      	subs	r3, #16
 80130e2:	b29b      	uxth	r3, r3
 80130e4:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80130e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80130ea:	3310      	adds	r3, #16
 80130ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 80130f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	dcb2      	bgt.n	801305e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80130f8:	2300      	movs	r3, #0
}
 80130fa:	4618      	mov	r0, r3
 80130fc:	3738      	adds	r7, #56	@ 0x38
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}

08013102 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8013102:	b490      	push	{r4, r7}
 8013104:	b082      	sub	sp, #8
 8013106:	af00      	add	r7, sp, #0
 8013108:	4604      	mov	r4, r0
 801310a:	4608      	mov	r0, r1
 801310c:	4611      	mov	r1, r2
 801310e:	461a      	mov	r2, r3
 8013110:	4623      	mov	r3, r4
 8013112:	80fb      	strh	r3, [r7, #6]
 8013114:	4603      	mov	r3, r0
 8013116:	717b      	strb	r3, [r7, #5]
 8013118:	460b      	mov	r3, r1
 801311a:	713b      	strb	r3, [r7, #4]
 801311c:	4613      	mov	r3, r2
 801311e:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8013120:	69bb      	ldr	r3, [r7, #24]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d101      	bne.n	801312a <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013126:	230a      	movs	r3, #10
 8013128:	e04e      	b.n	80131c8 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801312a:	69bb      	ldr	r3, [r7, #24]
 801312c:	2249      	movs	r2, #73	@ 0x49
 801312e:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8013130:	69bb      	ldr	r3, [r7, #24]
 8013132:	3301      	adds	r3, #1
 8013134:	2200      	movs	r2, #0
 8013136:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8013138:	69bb      	ldr	r3, [r7, #24]
 801313a:	3302      	adds	r3, #2
 801313c:	2200      	movs	r2, #0
 801313e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8013140:	69bb      	ldr	r3, [r7, #24]
 8013142:	3303      	adds	r3, #3
 8013144:	2200      	movs	r2, #0
 8013146:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8013148:	69bb      	ldr	r3, [r7, #24]
 801314a:	3304      	adds	r3, #4
 801314c:	2200      	movs	r2, #0
 801314e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8013150:	69bb      	ldr	r3, [r7, #24]
 8013152:	3305      	adds	r3, #5
 8013154:	78fa      	ldrb	r2, [r7, #3]
 8013156:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8013158:	69bb      	ldr	r3, [r7, #24]
 801315a:	3306      	adds	r3, #6
 801315c:	693a      	ldr	r2, [r7, #16]
 801315e:	b2d2      	uxtb	r2, r2
 8013160:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	0a1a      	lsrs	r2, r3, #8
 8013166:	69bb      	ldr	r3, [r7, #24]
 8013168:	3307      	adds	r3, #7
 801316a:	b2d2      	uxtb	r2, r2
 801316c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	0c1a      	lsrs	r2, r3, #16
 8013172:	69bb      	ldr	r3, [r7, #24]
 8013174:	3308      	adds	r3, #8
 8013176:	b2d2      	uxtb	r2, r2
 8013178:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801317a:	693b      	ldr	r3, [r7, #16]
 801317c:	0e1a      	lsrs	r2, r3, #24
 801317e:	69bb      	ldr	r3, [r7, #24]
 8013180:	3309      	adds	r3, #9
 8013182:	b2d2      	uxtb	r2, r2
 8013184:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8013186:	69bb      	ldr	r3, [r7, #24]
 8013188:	330a      	adds	r3, #10
 801318a:	697a      	ldr	r2, [r7, #20]
 801318c:	b2d2      	uxtb	r2, r2
 801318e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	0a1a      	lsrs	r2, r3, #8
 8013194:	69bb      	ldr	r3, [r7, #24]
 8013196:	330b      	adds	r3, #11
 8013198:	b2d2      	uxtb	r2, r2
 801319a:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	0c1a      	lsrs	r2, r3, #16
 80131a0:	69bb      	ldr	r3, [r7, #24]
 80131a2:	330c      	adds	r3, #12
 80131a4:	b2d2      	uxtb	r2, r2
 80131a6:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	0e1a      	lsrs	r2, r3, #24
 80131ac:	69bb      	ldr	r3, [r7, #24]
 80131ae:	330d      	adds	r3, #13
 80131b0:	b2d2      	uxtb	r2, r2
 80131b2:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80131b4:	69bb      	ldr	r3, [r7, #24]
 80131b6:	330e      	adds	r3, #14
 80131b8:	2200      	movs	r2, #0
 80131ba:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80131bc:	69bb      	ldr	r3, [r7, #24]
 80131be:	330f      	adds	r3, #15
 80131c0:	88fa      	ldrh	r2, [r7, #6]
 80131c2:	b2d2      	uxtb	r2, r2
 80131c4:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80131c6:	2300      	movs	r3, #0
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3708      	adds	r7, #8
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bc90      	pop	{r4, r7}
 80131d0:	4770      	bx	lr

080131d2 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80131d2:	b590      	push	{r4, r7, lr}
 80131d4:	b08b      	sub	sp, #44	@ 0x2c
 80131d6:	af04      	add	r7, sp, #16
 80131d8:	6078      	str	r0, [r7, #4]
 80131da:	4608      	mov	r0, r1
 80131dc:	4611      	mov	r1, r2
 80131de:	461a      	mov	r2, r3
 80131e0:	4603      	mov	r3, r0
 80131e2:	807b      	strh	r3, [r7, #2]
 80131e4:	460b      	mov	r3, r1
 80131e6:	707b      	strb	r3, [r7, #1]
 80131e8:	4613      	mov	r3, r2
 80131ea:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d002      	beq.n	80131f8 <ComputeCmacB0+0x26>
 80131f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d101      	bne.n	80131fc <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80131f8:	230a      	movs	r3, #10
 80131fa:	e024      	b.n	8013246 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80131fc:	887b      	ldrh	r3, [r7, #2]
 80131fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013202:	d901      	bls.n	8013208 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013204:	230e      	movs	r3, #14
 8013206:	e01e      	b.n	8013246 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013208:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 801320c:	783a      	ldrb	r2, [r7, #0]
 801320e:	7879      	ldrb	r1, [r7, #1]
 8013210:	8878      	ldrh	r0, [r7, #2]
 8013212:	f107 0308 	add.w	r3, r7, #8
 8013216:	9302      	str	r3, [sp, #8]
 8013218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801321a:	9301      	str	r3, [sp, #4]
 801321c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801321e:	9300      	str	r3, [sp, #0]
 8013220:	4623      	mov	r3, r4
 8013222:	f7ff ff6e 	bl	8013102 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8013226:	887a      	ldrh	r2, [r7, #2]
 8013228:	7879      	ldrb	r1, [r7, #1]
 801322a:	f107 0008 	add.w	r0, r7, #8
 801322e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013230:	9300      	str	r3, [sp, #0]
 8013232:	460b      	mov	r3, r1
 8013234:	6879      	ldr	r1, [r7, #4]
 8013236:	f7f8 fe21 	bl	800be7c <SecureElementComputeAesCmac>
 801323a:	4603      	mov	r3, r0
 801323c:	2b00      	cmp	r3, #0
 801323e:	d001      	beq.n	8013244 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013240:	230f      	movs	r3, #15
 8013242:	e000      	b.n	8013246 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013244:	2300      	movs	r3, #0
}
 8013246:	4618      	mov	r0, r3
 8013248:	371c      	adds	r7, #28
 801324a:	46bd      	mov	sp, r7
 801324c:	bd90      	pop	{r4, r7, pc}

0801324e <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801324e:	b590      	push	{r4, r7, lr}
 8013250:	b0cd      	sub	sp, #308	@ 0x134
 8013252:	af04      	add	r7, sp, #16
 8013254:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8013258:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 801325c:	6020      	str	r0, [r4, #0]
 801325e:	460c      	mov	r4, r1
 8013260:	4610      	mov	r0, r2
 8013262:	4619      	mov	r1, r3
 8013264:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013268:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801326c:	4622      	mov	r2, r4
 801326e:	801a      	strh	r2, [r3, #0]
 8013270:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013274:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013278:	4602      	mov	r2, r0
 801327a:	701a      	strb	r2, [r3, #0]
 801327c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013280:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013284:	460a      	mov	r2, r1
 8013286:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013288:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801328c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d101      	bne.n	801329a <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013296:	230a      	movs	r3, #10
 8013298:	e063      	b.n	8013362 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801329a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801329e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80132a2:	881b      	ldrh	r3, [r3, #0]
 80132a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80132a8:	d901      	bls.n	80132ae <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80132aa:	230e      	movs	r3, #14
 80132ac:	e059      	b.n	8013362 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80132ae:	f107 030c 	add.w	r3, r7, #12
 80132b2:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80132b6:	2100      	movs	r1, #0
 80132b8:	4618      	mov	r0, r3
 80132ba:	f003 fbe5 	bl	8016a88 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80132be:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 80132c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80132c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80132ca:	781a      	ldrb	r2, [r3, #0]
 80132cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80132d0:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80132d4:	7819      	ldrb	r1, [r3, #0]
 80132d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80132da:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80132de:	8818      	ldrh	r0, [r3, #0]
 80132e0:	f107 030c 	add.w	r3, r7, #12
 80132e4:	9302      	str	r3, [sp, #8]
 80132e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80132ea:	9301      	str	r3, [sp, #4]
 80132ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80132f0:	9300      	str	r3, [sp, #0]
 80132f2:	4623      	mov	r3, r4
 80132f4:	f7ff ff05 	bl	8013102 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80132f8:	f107 030c 	add.w	r3, r7, #12
 80132fc:	3310      	adds	r3, #16
 80132fe:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8013302:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8013306:	8812      	ldrh	r2, [r2, #0]
 8013308:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801330c:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8013310:	6809      	ldr	r1, [r1, #0]
 8013312:	4618      	mov	r0, r3
 8013314:	f003 fb7d 	bl	8016a12 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013318:	2306      	movs	r3, #6
 801331a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801331e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013322:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013326:	881b      	ldrh	r3, [r3, #0]
 8013328:	3310      	adds	r3, #16
 801332a:	4619      	mov	r1, r3
 801332c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013330:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	f107 000c 	add.w	r0, r7, #12
 801333a:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801333e:	f7f8 fdb7 	bl	800beb0 <SecureElementVerifyAesCmac>
 8013342:	4603      	mov	r3, r0
 8013344:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013348:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 801334c:	2b00      	cmp	r3, #0
 801334e:	d101      	bne.n	8013354 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013350:	2300      	movs	r3, #0
 8013352:	e006      	b.n	8013362 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013354:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013358:	2b01      	cmp	r3, #1
 801335a:	d101      	bne.n	8013360 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 801335c:	2301      	movs	r3, #1
 801335e:	e000      	b.n	8013362 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013360:	230f      	movs	r3, #15
}
 8013362:	4618      	mov	r0, r3
 8013364:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8013368:	46bd      	mov	sp, r7
 801336a:	bd90      	pop	{r4, r7, pc}

0801336c <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 801336c:	b480      	push	{r7}
 801336e:	b085      	sub	sp, #20
 8013370:	af00      	add	r7, sp, #0
 8013372:	4603      	mov	r3, r0
 8013374:	6039      	str	r1, [r7, #0]
 8013376:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013378:	2300      	movs	r3, #0
 801337a:	73fb      	strb	r3, [r7, #15]
 801337c:	e011      	b.n	80133a2 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801337e:	7bfb      	ldrb	r3, [r7, #15]
 8013380:	4a0c      	ldr	r2, [pc, #48]	@ (80133b4 <GetKeyAddrItem+0x48>)
 8013382:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8013386:	79fa      	ldrb	r2, [r7, #7]
 8013388:	429a      	cmp	r2, r3
 801338a:	d107      	bne.n	801339c <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 801338c:	7bfb      	ldrb	r3, [r7, #15]
 801338e:	009b      	lsls	r3, r3, #2
 8013390:	4a08      	ldr	r2, [pc, #32]	@ (80133b4 <GetKeyAddrItem+0x48>)
 8013392:	441a      	add	r2, r3
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8013398:	2300      	movs	r3, #0
 801339a:	e006      	b.n	80133aa <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801339c:	7bfb      	ldrb	r3, [r7, #15]
 801339e:	3301      	adds	r3, #1
 80133a0:	73fb      	strb	r3, [r7, #15]
 80133a2:	7bfb      	ldrb	r3, [r7, #15]
 80133a4:	2b01      	cmp	r3, #1
 80133a6:	d9ea      	bls.n	801337e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80133a8:	230c      	movs	r3, #12
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	3714      	adds	r7, #20
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bc80      	pop	{r7}
 80133b2:	4770      	bx	lr
 80133b4:	20000100 	.word	0x20000100

080133b8 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b088      	sub	sp, #32
 80133bc:	af00      	add	r7, sp, #0
 80133be:	60b9      	str	r1, [r7, #8]
 80133c0:	607a      	str	r2, [r7, #4]
 80133c2:	461a      	mov	r2, r3
 80133c4:	4603      	mov	r3, r0
 80133c6:	73fb      	strb	r3, [r7, #15]
 80133c8:	4613      	mov	r3, r2
 80133ca:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80133cc:	2300      	movs	r3, #0
 80133ce:	613b      	str	r3, [r7, #16]
 80133d0:	f107 0314 	add.w	r3, r7, #20
 80133d4:	2200      	movs	r2, #0
 80133d6:	601a      	str	r2, [r3, #0]
 80133d8:	605a      	str	r2, [r3, #4]
 80133da:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80133dc:	7bfb      	ldrb	r3, [r7, #15]
 80133de:	2b08      	cmp	r3, #8
 80133e0:	d002      	beq.n	80133e8 <DeriveSessionKey10x+0x30>
 80133e2:	2b09      	cmp	r3, #9
 80133e4:	d003      	beq.n	80133ee <DeriveSessionKey10x+0x36>
 80133e6:	e005      	b.n	80133f4 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80133e8:	2301      	movs	r3, #1
 80133ea:	743b      	strb	r3, [r7, #16]
            break;
 80133ec:	e004      	b.n	80133f8 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80133ee:	2302      	movs	r3, #2
 80133f0:	743b      	strb	r3, [r7, #16]
            break;
 80133f2:	e001      	b.n	80133f8 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80133f4:	230b      	movs	r3, #11
 80133f6:	e02a      	b.n	801344e <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	b2db      	uxtb	r3, r3
 80133fc:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80133fe:	68bb      	ldr	r3, [r7, #8]
 8013400:	0a1b      	lsrs	r3, r3, #8
 8013402:	b2db      	uxtb	r3, r3
 8013404:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8013406:	68bb      	ldr	r3, [r7, #8]
 8013408:	0c1b      	lsrs	r3, r3, #16
 801340a:	b2db      	uxtb	r3, r3
 801340c:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	b2db      	uxtb	r3, r3
 8013412:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	0a1b      	lsrs	r3, r3, #8
 8013418:	b2db      	uxtb	r3, r3
 801341a:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	0c1b      	lsrs	r3, r3, #16
 8013420:	b2db      	uxtb	r3, r3
 8013422:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013424:	89bb      	ldrh	r3, [r7, #12]
 8013426:	b2db      	uxtb	r3, r3
 8013428:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801342a:	89bb      	ldrh	r3, [r7, #12]
 801342c:	0a1b      	lsrs	r3, r3, #8
 801342e:	b29b      	uxth	r3, r3
 8013430:	b2db      	uxtb	r3, r3
 8013432:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013434:	7bfa      	ldrb	r2, [r7, #15]
 8013436:	f107 0310 	add.w	r3, r7, #16
 801343a:	2101      	movs	r1, #1
 801343c:	4618      	mov	r0, r3
 801343e:	f7f8 fde3 	bl	800c008 <SecureElementDeriveAndStoreKey>
 8013442:	4603      	mov	r3, r0
 8013444:	2b00      	cmp	r3, #0
 8013446:	d001      	beq.n	801344c <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013448:	230f      	movs	r3, #15
 801344a:	e000      	b.n	801344e <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801344c:	2300      	movs	r3, #0
}
 801344e:	4618      	mov	r0, r3
 8013450:	3720      	adds	r7, #32
 8013452:	46bd      	mov	sp, r7
 8013454:	bd80      	pop	{r7, pc}
	...

08013458 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013458:	b480      	push	{r7}
 801345a:	b083      	sub	sp, #12
 801345c:	af00      	add	r7, sp, #0
 801345e:	4603      	mov	r3, r0
 8013460:	6039      	str	r1, [r7, #0]
 8013462:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d101      	bne.n	801346e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801346a:	230a      	movs	r3, #10
 801346c:	e029      	b.n	80134c2 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 801346e:	79fb      	ldrb	r3, [r7, #7]
 8013470:	3b01      	subs	r3, #1
 8013472:	2b03      	cmp	r3, #3
 8013474:	d822      	bhi.n	80134bc <GetLastFcntDown+0x64>
 8013476:	a201      	add	r2, pc, #4	@ (adr r2, 801347c <GetLastFcntDown+0x24>)
 8013478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801347c:	0801348d 	.word	0x0801348d
 8013480:	08013499 	.word	0x08013499
 8013484:	080134a5 	.word	0x080134a5
 8013488:	080134b1 	.word	0x080134b1
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 801348c:	4b0f      	ldr	r3, [pc, #60]	@ (80134cc <GetLastFcntDown+0x74>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	691a      	ldr	r2, [r3, #16]
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	601a      	str	r2, [r3, #0]
            break;
 8013496:	e013      	b.n	80134c0 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8013498:	4b0c      	ldr	r3, [pc, #48]	@ (80134cc <GetLastFcntDown+0x74>)
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	695a      	ldr	r2, [r3, #20]
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	601a      	str	r2, [r3, #0]
            break;
 80134a2:	e00d      	b.n	80134c0 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80134a4:	4b09      	ldr	r3, [pc, #36]	@ (80134cc <GetLastFcntDown+0x74>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	699a      	ldr	r2, [r3, #24]
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	601a      	str	r2, [r3, #0]
            break;
 80134ae:	e007      	b.n	80134c0 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80134b0:	4b06      	ldr	r3, [pc, #24]	@ (80134cc <GetLastFcntDown+0x74>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	69da      	ldr	r2, [r3, #28]
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	601a      	str	r2, [r3, #0]
            break;
 80134ba:	e001      	b.n	80134c0 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80134bc:	2305      	movs	r3, #5
 80134be:	e000      	b.n	80134c2 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80134c0:	2300      	movs	r3, #0
}
 80134c2:	4618      	mov	r0, r3
 80134c4:	370c      	adds	r7, #12
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bc80      	pop	{r7}
 80134ca:	4770      	bx	lr
 80134cc:	200015a4 	.word	0x200015a4

080134d0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b084      	sub	sp, #16
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	4603      	mov	r3, r0
 80134d8:	6039      	str	r1, [r7, #0]
 80134da:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80134dc:	2300      	movs	r3, #0
 80134de:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80134e0:	f107 020c 	add.w	r2, r7, #12
 80134e4:	79fb      	ldrb	r3, [r7, #7]
 80134e6:	4611      	mov	r1, r2
 80134e8:	4618      	mov	r0, r3
 80134ea:	f7ff ffb5 	bl	8013458 <GetLastFcntDown>
 80134ee:	4603      	mov	r3, r0
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d001      	beq.n	80134f8 <CheckFCntDown+0x28>
    {
        return false;
 80134f4:	2300      	movs	r3, #0
 80134f6:	e00a      	b.n	801350e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	683a      	ldr	r2, [r7, #0]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d803      	bhi.n	8013508 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8013500:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8013502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013506:	d101      	bne.n	801350c <CheckFCntDown+0x3c>
    {
        return true;
 8013508:	2301      	movs	r3, #1
 801350a:	e000      	b.n	801350e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 801350c:	2300      	movs	r3, #0
    }
}
 801350e:	4618      	mov	r0, r3
 8013510:	3710      	adds	r7, #16
 8013512:	46bd      	mov	sp, r7
 8013514:	bd80      	pop	{r7, pc}
	...

08013518 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013518:	b480      	push	{r7}
 801351a:	b083      	sub	sp, #12
 801351c:	af00      	add	r7, sp, #0
 801351e:	4603      	mov	r3, r0
 8013520:	6039      	str	r1, [r7, #0]
 8013522:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8013524:	79fb      	ldrb	r3, [r7, #7]
 8013526:	3b01      	subs	r3, #1
 8013528:	2b03      	cmp	r3, #3
 801352a:	d82b      	bhi.n	8013584 <UpdateFCntDown+0x6c>
 801352c:	a201      	add	r2, pc, #4	@ (adr r2, 8013534 <UpdateFCntDown+0x1c>)
 801352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013532:	bf00      	nop
 8013534:	08013545 	.word	0x08013545
 8013538:	08013557 	.word	0x08013557
 801353c:	08013569 	.word	0x08013569
 8013540:	0801357b 	.word	0x0801357b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013544:	4b12      	ldr	r3, [pc, #72]	@ (8013590 <UpdateFCntDown+0x78>)
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	683a      	ldr	r2, [r7, #0]
 801354a:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 801354c:	4b10      	ldr	r3, [pc, #64]	@ (8013590 <UpdateFCntDown+0x78>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	683a      	ldr	r2, [r7, #0]
 8013552:	621a      	str	r2, [r3, #32]
            break;
 8013554:	e017      	b.n	8013586 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013556:	4b0e      	ldr	r3, [pc, #56]	@ (8013590 <UpdateFCntDown+0x78>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	683a      	ldr	r2, [r7, #0]
 801355c:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 801355e:	4b0c      	ldr	r3, [pc, #48]	@ (8013590 <UpdateFCntDown+0x78>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	683a      	ldr	r2, [r7, #0]
 8013564:	621a      	str	r2, [r3, #32]
            break;
 8013566:	e00e      	b.n	8013586 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013568:	4b09      	ldr	r3, [pc, #36]	@ (8013590 <UpdateFCntDown+0x78>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	683a      	ldr	r2, [r7, #0]
 801356e:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8013570:	4b07      	ldr	r3, [pc, #28]	@ (8013590 <UpdateFCntDown+0x78>)
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	683a      	ldr	r2, [r7, #0]
 8013576:	621a      	str	r2, [r3, #32]
            break;
 8013578:	e005      	b.n	8013586 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801357a:	4b05      	ldr	r3, [pc, #20]	@ (8013590 <UpdateFCntDown+0x78>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	683a      	ldr	r2, [r7, #0]
 8013580:	61da      	str	r2, [r3, #28]
            break;
 8013582:	e000      	b.n	8013586 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013584:	bf00      	nop
    }
}
 8013586:	bf00      	nop
 8013588:	370c      	adds	r7, #12
 801358a:	46bd      	mov	sp, r7
 801358c:	bc80      	pop	{r7}
 801358e:	4770      	bx	lr
 8013590:	200015a4 	.word	0x200015a4

08013594 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013594:	b480      	push	{r7}
 8013596:	b083      	sub	sp, #12
 8013598:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801359a:	4b18      	ldr	r3, [pc, #96]	@ (80135fc <ResetFCnts+0x68>)
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	2200      	movs	r2, #0
 80135a0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80135a2:	4b16      	ldr	r3, [pc, #88]	@ (80135fc <ResetFCnts+0x68>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	f04f 32ff 	mov.w	r2, #4294967295
 80135aa:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80135ac:	4b13      	ldr	r3, [pc, #76]	@ (80135fc <ResetFCnts+0x68>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	f04f 32ff 	mov.w	r2, #4294967295
 80135b4:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80135b6:	4b11      	ldr	r3, [pc, #68]	@ (80135fc <ResetFCnts+0x68>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	f04f 32ff 	mov.w	r2, #4294967295
 80135be:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80135c0:	4b0e      	ldr	r3, [pc, #56]	@ (80135fc <ResetFCnts+0x68>)
 80135c2:	681a      	ldr	r2, [r3, #0]
 80135c4:	4b0d      	ldr	r3, [pc, #52]	@ (80135fc <ResetFCnts+0x68>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	6992      	ldr	r2, [r2, #24]
 80135ca:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80135cc:	2300      	movs	r3, #0
 80135ce:	607b      	str	r3, [r7, #4]
 80135d0:	e00b      	b.n	80135ea <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80135d2:	4b0a      	ldr	r3, [pc, #40]	@ (80135fc <ResetFCnts+0x68>)
 80135d4:	681a      	ldr	r2, [r3, #0]
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	3306      	adds	r3, #6
 80135da:	009b      	lsls	r3, r3, #2
 80135dc:	4413      	add	r3, r2
 80135de:	f04f 32ff 	mov.w	r2, #4294967295
 80135e2:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	3301      	adds	r3, #1
 80135e8:	607b      	str	r3, [r7, #4]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	ddf0      	ble.n	80135d2 <ResetFCnts+0x3e>
    }
}
 80135f0:	bf00      	nop
 80135f2:	bf00      	nop
 80135f4:	370c      	adds	r7, #12
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bc80      	pop	{r7}
 80135fa:	4770      	bx	lr
 80135fc:	200015a4 	.word	0x200015a4

08013600 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8013600:	b480      	push	{r7}
 8013602:	b083      	sub	sp, #12
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8013608:	4b06      	ldr	r3, [pc, #24]	@ (8013624 <IsJoinNonce10xOk+0x24>)
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	689b      	ldr	r3, [r3, #8]
 801360e:	687a      	ldr	r2, [r7, #4]
 8013610:	429a      	cmp	r2, r3
 8013612:	bf8c      	ite	hi
 8013614:	2301      	movhi	r3, #1
 8013616:	2300      	movls	r3, #0
 8013618:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 801361a:	4618      	mov	r0, r3
 801361c:	370c      	adds	r7, #12
 801361e:	46bd      	mov	sp, r7
 8013620:	bc80      	pop	{r7}
 8013622:	4770      	bx	lr
 8013624:	200015a4 	.word	0x200015a4

08013628 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b082      	sub	sp, #8
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d101      	bne.n	801363a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8013636:	2309      	movs	r3, #9
 8013638:	e01c      	b.n	8013674 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801363a:	4a10      	ldr	r2, [pc, #64]	@ (801367c <LoRaMacCryptoInit+0x54>)
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013640:	4b0e      	ldr	r3, [pc, #56]	@ (801367c <LoRaMacCryptoInit+0x54>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	2228      	movs	r2, #40	@ 0x28
 8013646:	2100      	movs	r1, #0
 8013648:	4618      	mov	r0, r3
 801364a:	f003 fa1d 	bl	8016a88 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801364e:	4b0b      	ldr	r3, [pc, #44]	@ (801367c <LoRaMacCryptoInit+0x54>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	2201      	movs	r2, #1
 8013654:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8013656:	4b09      	ldr	r3, [pc, #36]	@ (801367c <LoRaMacCryptoInit+0x54>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	2201      	movs	r2, #1
 801365c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801365e:	4b07      	ldr	r3, [pc, #28]	@ (801367c <LoRaMacCryptoInit+0x54>)
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	2201      	movs	r2, #1
 8013664:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8013666:	4b05      	ldr	r3, [pc, #20]	@ (801367c <LoRaMacCryptoInit+0x54>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	2200      	movs	r2, #0
 801366c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801366e:	f7ff ff91 	bl	8013594 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8013672:	2300      	movs	r3, #0
}
 8013674:	4618      	mov	r0, r3
 8013676:	3708      	adds	r7, #8
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}
 801367c:	200015a4 	.word	0x200015a4

08013680 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013680:	b480      	push	{r7}
 8013682:	b083      	sub	sp, #12
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013688:	4b04      	ldr	r3, [pc, #16]	@ (801369c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	687a      	ldr	r2, [r7, #4]
 801368e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013690:	2300      	movs	r3, #0
}
 8013692:	4618      	mov	r0, r3
 8013694:	370c      	adds	r7, #12
 8013696:	46bd      	mov	sp, r7
 8013698:	bc80      	pop	{r7}
 801369a:	4770      	bx	lr
 801369c:	200015a4 	.word	0x200015a4

080136a0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80136a0:	b480      	push	{r7}
 80136a2:	b083      	sub	sp, #12
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d101      	bne.n	80136b2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80136ae:	230a      	movs	r3, #10
 80136b0:	e006      	b.n	80136c0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80136b2:	4b06      	ldr	r3, [pc, #24]	@ (80136cc <LoRaMacCryptoGetFCntUp+0x2c>)
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	68db      	ldr	r3, [r3, #12]
 80136b8:	1c5a      	adds	r2, r3, #1
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80136be:	2300      	movs	r3, #0
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	370c      	adds	r7, #12
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bc80      	pop	{r7}
 80136c8:	4770      	bx	lr
 80136ca:	bf00      	nop
 80136cc:	200015a4 	.word	0x200015a4

080136d0 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80136d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80136d4:	b08a      	sub	sp, #40	@ 0x28
 80136d6:	af00      	add	r7, sp, #0
 80136d8:	613a      	str	r2, [r7, #16]
 80136da:	60fb      	str	r3, [r7, #12]
 80136dc:	4603      	mov	r3, r0
 80136de:	75fb      	strb	r3, [r7, #23]
 80136e0:	460b      	mov	r3, r1
 80136e2:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 80136e4:	2300      	movs	r3, #0
 80136e6:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 80136e8:	2300      	movs	r3, #0
 80136ea:	627b      	str	r3, [r7, #36]	@ 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80136ec:	2313      	movs	r3, #19
 80136ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if( currentDown == NULL )
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d101      	bne.n	80136fc <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80136f8:	230a      	movs	r3, #10
 80136fa:	e057      	b.n	80137ac <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80136fc:	f107 021c 	add.w	r2, r7, #28
 8013700:	7dfb      	ldrb	r3, [r7, #23]
 8013702:	4611      	mov	r1, r2
 8013704:	4618      	mov	r0, r3
 8013706:	f7ff fea7 	bl	8013458 <GetLastFcntDown>
 801370a:	4603      	mov	r3, r0
 801370c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013710:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013714:	2b00      	cmp	r3, #0
 8013716:	d002      	beq.n	801371e <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8013718:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801371c:	e046      	b.n	80137ac <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 801371e:	69fb      	ldr	r3, [r7, #28]
 8013720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013724:	d103      	bne.n	801372e <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	693a      	ldr	r2, [r7, #16]
 801372a:	601a      	str	r2, [r3, #0]
 801372c:	e01e      	b.n	801376c <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801372e:	69fb      	ldr	r3, [r7, #28]
 8013730:	b29b      	uxth	r3, r3
 8013732:	693a      	ldr	r2, [r7, #16]
 8013734:	1ad3      	subs	r3, r2, r3
 8013736:	627b      	str	r3, [r7, #36]	@ 0x24

        if( fCntDiff > 0 )
 8013738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801373a:	2b00      	cmp	r3, #0
 801373c:	dd05      	ble.n	801374a <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801373e:	69fa      	ldr	r2, [r7, #28]
 8013740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013742:	441a      	add	r2, r3
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	601a      	str	r2, [r3, #0]
 8013748:	e010      	b.n	801376c <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 801374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801374c:	2b00      	cmp	r3, #0
 801374e:	d104      	bne.n	801375a <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013750:	69fa      	ldr	r2, [r7, #28]
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8013756:	2307      	movs	r3, #7
 8013758:	e028      	b.n	80137ac <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801375a:	69fb      	ldr	r3, [r7, #28]
 801375c:	0c1b      	lsrs	r3, r3, #16
 801375e:	041b      	lsls	r3, r3, #16
 8013760:	693a      	ldr	r2, [r7, #16]
 8013762:	4413      	add	r3, r2
 8013764:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801376c:	4b12      	ldr	r3, [pc, #72]	@ (80137b8 <LoRaMacCryptoGetFCntDown+0xe8>)
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	789b      	ldrb	r3, [r3, #2]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d119      	bne.n	80137aa <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	2200      	movs	r2, #0
 801377c:	603b      	str	r3, [r7, #0]
 801377e:	607a      	str	r2, [r7, #4]
 8013780:	69fb      	ldr	r3, [r7, #28]
 8013782:	2200      	movs	r2, #0
 8013784:	469a      	mov	sl, r3
 8013786:	4693      	mov	fp, r2
 8013788:	e9d7 2300 	ldrd	r2, r3, [r7]
 801378c:	4611      	mov	r1, r2
 801378e:	ebb1 040a 	subs.w	r4, r1, sl
 8013792:	eb63 050b 	sbc.w	r5, r3, fp
 8013796:	8abb      	ldrh	r3, [r7, #20]
 8013798:	2200      	movs	r2, #0
 801379a:	4698      	mov	r8, r3
 801379c:	4691      	mov	r9, r2
 801379e:	4544      	cmp	r4, r8
 80137a0:	eb75 0309 	sbcs.w	r3, r5, r9
 80137a4:	db01      	blt.n	80137aa <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80137a6:	2308      	movs	r3, #8
 80137a8:	e000      	b.n	80137ac <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80137aa:	2300      	movs	r3, #0
}
 80137ac:	4618      	mov	r0, r3
 80137ae:	3728      	adds	r7, #40	@ 0x28
 80137b0:	46bd      	mov	sp, r7
 80137b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80137b6:	bf00      	nop
 80137b8:	200015a4 	.word	0x200015a4

080137bc <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80137bc:	b480      	push	{r7}
 80137be:	b085      	sub	sp, #20
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d101      	bne.n	80137ce <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80137ca:	230a      	movs	r3, #10
 80137cc:	e019      	b.n	8013802 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80137ce:	2300      	movs	r3, #0
 80137d0:	60fb      	str	r3, [r7, #12]
 80137d2:	e012      	b.n	80137fa <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80137d4:	4b0d      	ldr	r3, [pc, #52]	@ (801380c <LoRaMacCryptoSetMulticastReference+0x50>)
 80137d6:	6819      	ldr	r1, [r3, #0]
 80137d8:	68fa      	ldr	r2, [r7, #12]
 80137da:	4613      	mov	r3, r2
 80137dc:	005b      	lsls	r3, r3, #1
 80137de:	4413      	add	r3, r2
 80137e0:	011b      	lsls	r3, r3, #4
 80137e2:	461a      	mov	r2, r3
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	4413      	add	r3, r2
 80137e8:	68fa      	ldr	r2, [r7, #12]
 80137ea:	3206      	adds	r2, #6
 80137ec:	0092      	lsls	r2, r2, #2
 80137ee:	440a      	add	r2, r1
 80137f0:	3204      	adds	r2, #4
 80137f2:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	3301      	adds	r3, #1
 80137f8:	60fb      	str	r3, [r7, #12]
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	dde9      	ble.n	80137d4 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013800:	2300      	movs	r3, #0
}
 8013802:	4618      	mov	r0, r3
 8013804:	3714      	adds	r7, #20
 8013806:	46bd      	mov	sp, r7
 8013808:	bc80      	pop	{r7}
 801380a:	4770      	bx	lr
 801380c:	200015a4 	.word	0x200015a4

08013810 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b082      	sub	sp, #8
 8013814:	af00      	add	r7, sp, #0
 8013816:	4603      	mov	r3, r0
 8013818:	6039      	str	r1, [r7, #0]
 801381a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801381c:	79fb      	ldrb	r3, [r7, #7]
 801381e:	6839      	ldr	r1, [r7, #0]
 8013820:	4618      	mov	r0, r3
 8013822:	f7f8 facd 	bl	800bdc0 <SecureElementSetKey>
 8013826:	4603      	mov	r3, r0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d001      	beq.n	8013830 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801382c:	230f      	movs	r3, #15
 801382e:	e021      	b.n	8013874 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8013830:	79fb      	ldrb	r3, [r7, #7]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d11d      	bne.n	8013872 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013836:	4b11      	ldr	r3, [pc, #68]	@ (801387c <LoRaMacCryptoSetKey+0x6c>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	789b      	ldrb	r3, [r3, #2]
 801383c:	210b      	movs	r1, #11
 801383e:	4618      	mov	r0, r3
 8013840:	f000 fa5c 	bl	8013cfc <LoRaMacCryptoDeriveLifeTimeKey>
 8013844:	4603      	mov	r3, r0
 8013846:	2b00      	cmp	r3, #0
 8013848:	d001      	beq.n	801384e <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801384a:	230f      	movs	r3, #15
 801384c:	e012      	b.n	8013874 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801384e:	210c      	movs	r1, #12
 8013850:	2000      	movs	r0, #0
 8013852:	f000 fa53 	bl	8013cfc <LoRaMacCryptoDeriveLifeTimeKey>
 8013856:	4603      	mov	r3, r0
 8013858:	2b00      	cmp	r3, #0
 801385a:	d001      	beq.n	8013860 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801385c:	230f      	movs	r3, #15
 801385e:	e009      	b.n	8013874 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013860:	210a      	movs	r1, #10
 8013862:	2000      	movs	r0, #0
 8013864:	f000 fa4a 	bl	8013cfc <LoRaMacCryptoDeriveLifeTimeKey>
 8013868:	4603      	mov	r3, r0
 801386a:	2b00      	cmp	r3, #0
 801386c:	d001      	beq.n	8013872 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801386e:	230f      	movs	r3, #15
 8013870:	e000      	b.n	8013874 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013872:	2300      	movs	r3, #0
}
 8013874:	4618      	mov	r0, r3
 8013876:	3708      	adds	r7, #8
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}
 801387c:	200015a4 	.word	0x200015a4

08013880 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b086      	sub	sp, #24
 8013884:	af02      	add	r7, sp, #8
 8013886:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d101      	bne.n	8013892 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801388e:	230a      	movs	r3, #10
 8013890:	e033      	b.n	80138fa <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8013892:	2301      	movs	r3, #1
 8013894:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8013896:	2300      	movs	r3, #0
 8013898:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 801389a:	f107 0308 	add.w	r3, r7, #8
 801389e:	4618      	mov	r0, r3
 80138a0:	f7f8 fc68 	bl	800c174 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 80138a4:	68ba      	ldr	r2, [r7, #8]
 80138a6:	4b17      	ldr	r3, [pc, #92]	@ (8013904 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	b292      	uxth	r2, r2
 80138ac:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80138ae:	4b15      	ldr	r3, [pc, #84]	@ (8013904 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	889a      	ldrh	r2, [r3, #4]
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80138b8:	6878      	ldr	r0, [r7, #4]
 80138ba:	f000 fc17 	bl	80140ec <LoRaMacSerializerJoinRequest>
 80138be:	4603      	mov	r3, r0
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d001      	beq.n	80138c8 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80138c4:	2311      	movs	r3, #17
 80138c6:	e018      	b.n	80138fa <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	6819      	ldr	r1, [r3, #0]
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	3318      	adds	r3, #24
 80138d0:	7bfa      	ldrb	r2, [r7, #15]
 80138d2:	9300      	str	r3, [sp, #0]
 80138d4:	4613      	mov	r3, r2
 80138d6:	2213      	movs	r2, #19
 80138d8:	2000      	movs	r0, #0
 80138da:	f7f8 facf 	bl	800be7c <SecureElementComputeAesCmac>
 80138de:	4603      	mov	r3, r0
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d001      	beq.n	80138e8 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80138e4:	230f      	movs	r3, #15
 80138e6:	e008      	b.n	80138fa <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f000 fbff 	bl	80140ec <LoRaMacSerializerJoinRequest>
 80138ee:	4603      	mov	r3, r0
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d001      	beq.n	80138f8 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80138f4:	2311      	movs	r3, #17
 80138f6:	e000      	b.n	80138fa <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80138f8:	2300      	movs	r3, #0
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3710      	adds	r7, #16
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop
 8013904:	200015a4 	.word	0x200015a4

08013908 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8013908:	b590      	push	{r4, r7, lr}
 801390a:	b097      	sub	sp, #92	@ 0x5c
 801390c:	af04      	add	r7, sp, #16
 801390e:	4603      	mov	r3, r0
 8013910:	60b9      	str	r1, [r7, #8]
 8013912:	607a      	str	r2, [r7, #4]
 8013914:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d002      	beq.n	8013922 <LoRaMacCryptoHandleJoinAccept+0x1a>
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d101      	bne.n	8013926 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013922:	230a      	movs	r3, #10
 8013924:	e0d3      	b.n	8013ace <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013926:	2313      	movs	r3, #19
 8013928:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 801392c:	2300      	movs	r3, #0
 801392e:	617b      	str	r3, [r7, #20]
 8013930:	f107 0318 	add.w	r3, r7, #24
 8013934:	221d      	movs	r2, #29
 8013936:	2100      	movs	r1, #0
 8013938:	4618      	mov	r0, r3
 801393a:	f008 fbfc 	bl	801c136 <memset>
    uint8_t versionMinor         = 0;
 801393e:	2300      	movs	r3, #0
 8013940:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8013942:	4b65      	ldr	r3, [pc, #404]	@ (8013ad8 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	889b      	ldrh	r3, [r3, #4]
 8013948:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	681c      	ldr	r4, [r3, #0]
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	791b      	ldrb	r3, [r3, #4]
 8013954:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8013958:	7bf8      	ldrb	r0, [r7, #15]
 801395a:	f107 0213 	add.w	r2, r7, #19
 801395e:	9202      	str	r2, [sp, #8]
 8013960:	f107 0214 	add.w	r2, r7, #20
 8013964:	9201      	str	r2, [sp, #4]
 8013966:	9300      	str	r3, [sp, #0]
 8013968:	4623      	mov	r3, r4
 801396a:	460a      	mov	r2, r1
 801396c:	68b9      	ldr	r1, [r7, #8]
 801396e:	f7f8 fb8b 	bl	800c088 <SecureElementProcessJoinAccept>
 8013972:	4603      	mov	r3, r0
 8013974:	2b00      	cmp	r3, #0
 8013976:	d001      	beq.n	801397c <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013978:	230f      	movs	r3, #15
 801397a:	e0a8      	b.n	8013ace <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	6818      	ldr	r0, [r3, #0]
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	791b      	ldrb	r3, [r3, #4]
 8013984:	461a      	mov	r2, r3
 8013986:	f107 0314 	add.w	r3, r7, #20
 801398a:	4619      	mov	r1, r3
 801398c:	f003 f841 	bl	8016a12 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f000 f9ee 	bl	8013d72 <LoRaMacParserJoinAccept>
 8013996:	4603      	mov	r3, r0
 8013998:	2b00      	cmp	r3, #0
 801399a:	d001      	beq.n	80139a0 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801399c:	2310      	movs	r3, #16
 801399e:	e096      	b.n	8013ace <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 80139a0:	2300      	movs	r3, #0
 80139a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	799b      	ldrb	r3, [r3, #6]
 80139aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	79db      	ldrb	r3, [r3, #7]
 80139b0:	021b      	lsls	r3, r3, #8
 80139b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80139b4:	4313      	orrs	r3, r2
 80139b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	7a1b      	ldrb	r3, [r3, #8]
 80139bc:	041b      	lsls	r3, r3, #16
 80139be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80139c0:	4313      	orrs	r3, r2
 80139c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 80139c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80139c6:	f7ff fe1b 	bl	8013600 <IsJoinNonce10xOk>
 80139ca:	4603      	mov	r3, r0
 80139cc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 80139d0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d010      	beq.n	80139fa <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80139d8:	4b3f      	ldr	r3, [pc, #252]	@ (8013ad8 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80139de:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 80139e0:	7cfb      	ldrb	r3, [r7, #19]
 80139e2:	210b      	movs	r1, #11
 80139e4:	4618      	mov	r0, r3
 80139e6:	f000 f989 	bl	8013cfc <LoRaMacCryptoDeriveLifeTimeKey>
 80139ea:	4603      	mov	r3, r0
 80139ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80139f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d005      	beq.n	8013a04 <LoRaMacCryptoHandleJoinAccept+0xfc>
 80139f8:	e001      	b.n	80139fe <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80139fa:	2303      	movs	r3, #3
 80139fc:	e067      	b.n	8013ace <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 80139fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013a02:	e064      	b.n	8013ace <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8013a04:	210c      	movs	r1, #12
 8013a06:	2000      	movs	r0, #0
 8013a08:	f000 f978 	bl	8013cfc <LoRaMacCryptoDeriveLifeTimeKey>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013a12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d002      	beq.n	8013a20 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8013a1a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013a1e:	e056      	b.n	8013ace <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8013a20:	210a      	movs	r1, #10
 8013a22:	2000      	movs	r0, #0
 8013a24:	f000 f96a 	bl	8013cfc <LoRaMacCryptoDeriveLifeTimeKey>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013a2e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d002      	beq.n	8013a3c <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8013a36:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013a3a:	e048      	b.n	8013ace <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	7a5b      	ldrb	r3, [r3, #9]
 8013a40:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	7a9b      	ldrb	r3, [r3, #10]
 8013a46:	021b      	lsls	r3, r3, #8
 8013a48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a4a:	4313      	orrs	r3, r2
 8013a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	7adb      	ldrb	r3, [r3, #11]
 8013a52:	041b      	lsls	r3, r3, #16
 8013a54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a56:	4313      	orrs	r3, r2
 8013a58:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8013a5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013a5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013a62:	2009      	movs	r0, #9
 8013a64:	f7ff fca8 	bl	80133b8 <DeriveSessionKey10x>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013a6e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d002      	beq.n	8013a7c <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8013a76:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013a7a:	e028      	b.n	8013ace <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8013a7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013a80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013a84:	2008      	movs	r0, #8
 8013a86:	f7ff fc97 	bl	80133b8 <DeriveSessionKey10x>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013a90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d002      	beq.n	8013a9e <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8013a98:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013a9c:	e017      	b.n	8013ace <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8013a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8013ad8 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	7cfa      	ldrb	r2, [r7, #19]
 8013aa4:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8013aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8013ad8 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013aae:	4b0a      	ldr	r3, [pc, #40]	@ (8013ad8 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8013ab6:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013ab8:	4b07      	ldr	r3, [pc, #28]	@ (8013ad8 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	f04f 32ff 	mov.w	r2, #4294967295
 8013ac0:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013ac2:	4b05      	ldr	r3, [pc, #20]	@ (8013ad8 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8013aca:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013acc:	2300      	movs	r3, #0
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	374c      	adds	r7, #76	@ 0x4c
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd90      	pop	{r4, r7, pc}
 8013ad6:	bf00      	nop
 8013ad8:	200015a4 	.word	0x200015a4

08013adc <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013adc:	b590      	push	{r4, r7, lr}
 8013ade:	b08b      	sub	sp, #44	@ 0x2c
 8013ae0:	af04      	add	r7, sp, #16
 8013ae2:	60f8      	str	r0, [r7, #12]
 8013ae4:	607b      	str	r3, [r7, #4]
 8013ae6:	460b      	mov	r3, r1
 8013ae8:	72fb      	strb	r3, [r7, #11]
 8013aea:	4613      	mov	r3, r2
 8013aec:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013aee:	2313      	movs	r3, #19
 8013af0:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013af2:	2309      	movs	r3, #9
 8013af4:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d101      	bne.n	8013b00 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013afc:	230a      	movs	r3, #10
 8013afe:	e05e      	b.n	8013bbe <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013b00:	4b31      	ldr	r3, [pc, #196]	@ (8013bc8 <LoRaMacCryptoSecureMessage+0xec>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	68db      	ldr	r3, [r3, #12]
 8013b06:	68fa      	ldr	r2, [r7, #12]
 8013b08:	429a      	cmp	r2, r3
 8013b0a:	d201      	bcs.n	8013b10 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013b0c:	2306      	movs	r3, #6
 8013b0e:	e056      	b.n	8013bbe <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d101      	bne.n	8013b1e <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8013b1a:	2308      	movs	r3, #8
 8013b1c:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8013b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8013bc8 <LoRaMacCryptoSecureMessage+0xec>)
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	68db      	ldr	r3, [r3, #12]
 8013b24:	68fa      	ldr	r2, [r7, #12]
 8013b26:	429a      	cmp	r2, r3
 8013b28:	d916      	bls.n	8013b58 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013b34:	b219      	sxth	r1, r3
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	689c      	ldr	r4, [r3, #8]
 8013b3a:	7dfa      	ldrb	r2, [r7, #23]
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	9301      	str	r3, [sp, #4]
 8013b40:	2300      	movs	r3, #0
 8013b42:	9300      	str	r3, [sp, #0]
 8013b44:	4623      	mov	r3, r4
 8013b46:	f7ff fa43 	bl	8012fd0 <PayloadEncrypt>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b4e:	7dbb      	ldrb	r3, [r7, #22]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d001      	beq.n	8013b58 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8013b54:	7dbb      	ldrb	r3, [r7, #22]
 8013b56:	e032      	b.n	8013bbe <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f000 fb49 	bl	80141f0 <LoRaMacSerializerData>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d001      	beq.n	8013b68 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013b64:	2311      	movs	r3, #17
 8013b66:	e02a      	b.n	8013bbe <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8013b68:	2308      	movs	r3, #8
 8013b6a:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	6818      	ldr	r0, [r3, #0]
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	791b      	ldrb	r3, [r3, #4]
 8013b74:	3b04      	subs	r3, #4
 8013b76:	b299      	uxth	r1, r3
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	689b      	ldr	r3, [r3, #8]
 8013b7c:	687a      	ldr	r2, [r7, #4]
 8013b7e:	322c      	adds	r2, #44	@ 0x2c
 8013b80:	7dfc      	ldrb	r4, [r7, #23]
 8013b82:	9203      	str	r2, [sp, #12]
 8013b84:	68fa      	ldr	r2, [r7, #12]
 8013b86:	9202      	str	r2, [sp, #8]
 8013b88:	9301      	str	r3, [sp, #4]
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	9300      	str	r3, [sp, #0]
 8013b8e:	2300      	movs	r3, #0
 8013b90:	4622      	mov	r2, r4
 8013b92:	f7ff fb1e 	bl	80131d2 <ComputeCmacB0>
 8013b96:	4603      	mov	r3, r0
 8013b98:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b9a:	7dbb      	ldrb	r3, [r7, #22]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d001      	beq.n	8013ba4 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8013ba0:	7dbb      	ldrb	r3, [r7, #22]
 8013ba2:	e00c      	b.n	8013bbe <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f000 fb23 	bl	80141f0 <LoRaMacSerializerData>
 8013baa:	4603      	mov	r3, r0
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d001      	beq.n	8013bb4 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013bb0:	2311      	movs	r3, #17
 8013bb2:	e004      	b.n	8013bbe <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8013bb4:	4b04      	ldr	r3, [pc, #16]	@ (8013bc8 <LoRaMacCryptoSecureMessage+0xec>)
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	68fa      	ldr	r2, [r7, #12]
 8013bba:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8013bbc:	2300      	movs	r3, #0
}
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	371c      	adds	r7, #28
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd90      	pop	{r4, r7, pc}
 8013bc6:	bf00      	nop
 8013bc8:	200015a4 	.word	0x200015a4

08013bcc <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013bcc:	b590      	push	{r4, r7, lr}
 8013bce:	b08b      	sub	sp, #44	@ 0x2c
 8013bd0:	af04      	add	r7, sp, #16
 8013bd2:	60b9      	str	r1, [r7, #8]
 8013bd4:	607b      	str	r3, [r7, #4]
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	73fb      	strb	r3, [r7, #15]
 8013bda:	4613      	mov	r3, r2
 8013bdc:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8013bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d101      	bne.n	8013be8 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013be4:	230a      	movs	r3, #10
 8013be6:	e083      	b.n	8013cf0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013be8:	7bbb      	ldrb	r3, [r7, #14]
 8013bea:	6879      	ldr	r1, [r7, #4]
 8013bec:	4618      	mov	r0, r3
 8013bee:	f7ff fc6f 	bl	80134d0 <CheckFCntDown>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	f083 0301 	eor.w	r3, r3, #1
 8013bf8:	b2db      	uxtb	r3, r3
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d001      	beq.n	8013c02 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013bfe:	2306      	movs	r3, #6
 8013c00:	e076      	b.n	8013cf0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013c02:	2313      	movs	r3, #19
 8013c04:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013c06:	2309      	movs	r3, #9
 8013c08:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8013c0a:	2308      	movs	r3, #8
 8013c0c:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013c0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013c10:	f000 f97a 	bl	8013f08 <LoRaMacParserData>
 8013c14:	4603      	mov	r3, r0
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d001      	beq.n	8013c1e <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013c1a:	2310      	movs	r3, #16
 8013c1c:	e068      	b.n	8013cf0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8013c1e:	f107 0210 	add.w	r2, r7, #16
 8013c22:	7bfb      	ldrb	r3, [r7, #15]
 8013c24:	4611      	mov	r1, r2
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7ff fba0 	bl	801336c <GetKeyAddrItem>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013c30:	7d7b      	ldrb	r3, [r7, #21]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d001      	beq.n	8013c3a <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8013c36:	7d7b      	ldrb	r3, [r7, #21]
 8013c38:	e05a      	b.n	8013cf0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8013c3a:	693b      	ldr	r3, [r7, #16]
 8013c3c:	785b      	ldrb	r3, [r3, #1]
 8013c3e:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8013c40:	693b      	ldr	r3, [r7, #16]
 8013c42:	789b      	ldrb	r3, [r3, #2]
 8013c44:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8013c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c48:	689b      	ldr	r3, [r3, #8]
 8013c4a:	68ba      	ldr	r2, [r7, #8]
 8013c4c:	429a      	cmp	r2, r3
 8013c4e:	d001      	beq.n	8013c54 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013c50:	2302      	movs	r3, #2
 8013c52:	e04d      	b.n	8013cf0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c56:	7b1b      	ldrb	r3, [r3, #12]
 8013c58:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013c5c:	b2db      	uxtb	r3, r3
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	bf14      	ite	ne
 8013c62:	2301      	movne	r3, #1
 8013c64:	2300      	moveq	r3, #0
 8013c66:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013c68:	4b23      	ldr	r3, [pc, #140]	@ (8013cf8 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	789b      	ldrb	r3, [r3, #2]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d101      	bne.n	8013c76 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8013c72:	2300      	movs	r3, #0
 8013c74:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8013c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c78:	6818      	ldr	r0, [r3, #0]
 8013c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c7c:	791b      	ldrb	r3, [r3, #4]
 8013c7e:	3b04      	subs	r3, #4
 8013c80:	b299      	uxth	r1, r3
 8013c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c86:	7dbc      	ldrb	r4, [r7, #22]
 8013c88:	7d3a      	ldrb	r2, [r7, #20]
 8013c8a:	9303      	str	r3, [sp, #12]
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	9302      	str	r3, [sp, #8]
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	9301      	str	r3, [sp, #4]
 8013c94:	2301      	movs	r3, #1
 8013c96:	9300      	str	r3, [sp, #0]
 8013c98:	4623      	mov	r3, r4
 8013c9a:	f7ff fad8 	bl	801324e <VerifyCmacB0>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013ca2:	7d7b      	ldrb	r3, [r7, #21]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d001      	beq.n	8013cac <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8013ca8:	7d7b      	ldrb	r3, [r7, #21]
 8013caa:	e021      	b.n	8013cf0 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8013cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d101      	bne.n	8013cba <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8013cb6:	2308      	movs	r3, #8
 8013cb8:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8013cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cbc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013cc4:	b219      	sxth	r1, r3
 8013cc6:	7dfa      	ldrb	r2, [r7, #23]
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	9301      	str	r3, [sp, #4]
 8013ccc:	2301      	movs	r3, #1
 8013cce:	9300      	str	r3, [sp, #0]
 8013cd0:	68bb      	ldr	r3, [r7, #8]
 8013cd2:	f7ff f97d 	bl	8012fd0 <PayloadEncrypt>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013cda:	7d7b      	ldrb	r3, [r7, #21]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d001      	beq.n	8013ce4 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8013ce0:	7d7b      	ldrb	r3, [r7, #21]
 8013ce2:	e005      	b.n	8013cf0 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8013ce4:	7bbb      	ldrb	r3, [r7, #14]
 8013ce6:	6879      	ldr	r1, [r7, #4]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7ff fc15 	bl	8013518 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013cee:	2300      	movs	r3, #0
}
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	371c      	adds	r7, #28
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd90      	pop	{r4, r7, pc}
 8013cf8:	200015a4 	.word	0x200015a4

08013cfc <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b088      	sub	sp, #32
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	4603      	mov	r3, r0
 8013d04:	460a      	mov	r2, r1
 8013d06:	71fb      	strb	r3, [r7, #7]
 8013d08:	4613      	mov	r3, r2
 8013d0a:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	60fb      	str	r3, [r7, #12]
 8013d10:	f107 0310 	add.w	r3, r7, #16
 8013d14:	2200      	movs	r2, #0
 8013d16:	601a      	str	r2, [r3, #0]
 8013d18:	605a      	str	r2, [r3, #4]
 8013d1a:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8013d20:	79bb      	ldrb	r3, [r7, #6]
 8013d22:	2b0c      	cmp	r3, #12
 8013d24:	d00b      	beq.n	8013d3e <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8013d26:	2b0c      	cmp	r3, #12
 8013d28:	dc0f      	bgt.n	8013d4a <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8013d2a:	2b0a      	cmp	r3, #10
 8013d2c:	d00a      	beq.n	8013d44 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8013d2e:	2b0b      	cmp	r3, #11
 8013d30:	d10b      	bne.n	8013d4a <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8013d32:	79fb      	ldrb	r3, [r7, #7]
 8013d34:	2b01      	cmp	r3, #1
 8013d36:	d10a      	bne.n	8013d4e <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8013d38:	2320      	movs	r3, #32
 8013d3a:	733b      	strb	r3, [r7, #12]
            }
            break;
 8013d3c:	e007      	b.n	8013d4e <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8013d3e:	230b      	movs	r3, #11
 8013d40:	77fb      	strb	r3, [r7, #31]
            break;
 8013d42:	e005      	b.n	8013d50 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8013d44:	2330      	movs	r3, #48	@ 0x30
 8013d46:	733b      	strb	r3, [r7, #12]
            break;
 8013d48:	e002      	b.n	8013d50 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013d4a:	230b      	movs	r3, #11
 8013d4c:	e00d      	b.n	8013d6a <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8013d4e:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013d50:	79ba      	ldrb	r2, [r7, #6]
 8013d52:	7ff9      	ldrb	r1, [r7, #31]
 8013d54:	f107 030c 	add.w	r3, r7, #12
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7f8 f955 	bl	800c008 <SecureElementDeriveAndStoreKey>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d001      	beq.n	8013d68 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013d64:	230f      	movs	r3, #15
 8013d66:	e000      	b.n	8013d6a <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013d68:	2300      	movs	r3, #0
}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	3720      	adds	r7, #32
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}

08013d72 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013d72:	b580      	push	{r7, lr}
 8013d74:	b084      	sub	sp, #16
 8013d76:	af00      	add	r7, sp, #0
 8013d78:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d003      	beq.n	8013d88 <LoRaMacParserJoinAccept+0x16>
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d101      	bne.n	8013d8c <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013d88:	2302      	movs	r3, #2
 8013d8a:	e0b9      	b.n	8013f00 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	681a      	ldr	r2, [r3, #0]
 8013d94:	89fb      	ldrh	r3, [r7, #14]
 8013d96:	1c59      	adds	r1, r3, #1
 8013d98:	81f9      	strh	r1, [r7, #14]
 8013d9a:	4413      	add	r3, r2
 8013d9c:	781a      	ldrb	r2, [r3, #0]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	1d98      	adds	r0, r3, #6
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681a      	ldr	r2, [r3, #0]
 8013daa:	89fb      	ldrh	r3, [r7, #14]
 8013dac:	4413      	add	r3, r2
 8013dae:	2203      	movs	r2, #3
 8013db0:	4619      	mov	r1, r3
 8013db2:	f002 fe2e 	bl	8016a12 <memcpy1>
    bufItr = bufItr + 3;
 8013db6:	89fb      	ldrh	r3, [r7, #14]
 8013db8:	3303      	adds	r3, #3
 8013dba:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f103 0009 	add.w	r0, r3, #9
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681a      	ldr	r2, [r3, #0]
 8013dc6:	89fb      	ldrh	r3, [r7, #14]
 8013dc8:	4413      	add	r3, r2
 8013dca:	2203      	movs	r2, #3
 8013dcc:	4619      	mov	r1, r3
 8013dce:	f002 fe20 	bl	8016a12 <memcpy1>
    bufItr = bufItr + 3;
 8013dd2:	89fb      	ldrh	r3, [r7, #14]
 8013dd4:	3303      	adds	r3, #3
 8013dd6:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681a      	ldr	r2, [r3, #0]
 8013ddc:	89fb      	ldrh	r3, [r7, #14]
 8013dde:	1c59      	adds	r1, r3, #1
 8013de0:	81f9      	strh	r1, [r7, #14]
 8013de2:	4413      	add	r3, r2
 8013de4:	781b      	ldrb	r3, [r3, #0]
 8013de6:	461a      	mov	r2, r3
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	681a      	ldr	r2, [r3, #0]
 8013df0:	89fb      	ldrh	r3, [r7, #14]
 8013df2:	1c59      	adds	r1, r3, #1
 8013df4:	81f9      	strh	r1, [r7, #14]
 8013df6:	4413      	add	r3, r2
 8013df8:	781b      	ldrb	r3, [r3, #0]
 8013dfa:	021a      	lsls	r2, r3, #8
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	68db      	ldr	r3, [r3, #12]
 8013e00:	431a      	orrs	r2, r3
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	681a      	ldr	r2, [r3, #0]
 8013e0a:	89fb      	ldrh	r3, [r7, #14]
 8013e0c:	1c59      	adds	r1, r3, #1
 8013e0e:	81f9      	strh	r1, [r7, #14]
 8013e10:	4413      	add	r3, r2
 8013e12:	781b      	ldrb	r3, [r3, #0]
 8013e14:	041a      	lsls	r2, r3, #16
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	68db      	ldr	r3, [r3, #12]
 8013e1a:	431a      	orrs	r2, r3
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	681a      	ldr	r2, [r3, #0]
 8013e24:	89fb      	ldrh	r3, [r7, #14]
 8013e26:	1c59      	adds	r1, r3, #1
 8013e28:	81f9      	strh	r1, [r7, #14]
 8013e2a:	4413      	add	r3, r2
 8013e2c:	781b      	ldrb	r3, [r3, #0]
 8013e2e:	061a      	lsls	r2, r3, #24
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	68db      	ldr	r3, [r3, #12]
 8013e34:	431a      	orrs	r2, r3
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	681a      	ldr	r2, [r3, #0]
 8013e3e:	89fb      	ldrh	r3, [r7, #14]
 8013e40:	1c59      	adds	r1, r3, #1
 8013e42:	81f9      	strh	r1, [r7, #14]
 8013e44:	4413      	add	r3, r2
 8013e46:	781a      	ldrb	r2, [r3, #0]
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	681a      	ldr	r2, [r3, #0]
 8013e50:	89fb      	ldrh	r3, [r7, #14]
 8013e52:	1c59      	adds	r1, r3, #1
 8013e54:	81f9      	strh	r1, [r7, #14]
 8013e56:	4413      	add	r3, r2
 8013e58:	781a      	ldrb	r2, [r3, #0]
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	791b      	ldrb	r3, [r3, #4]
 8013e62:	1f1a      	subs	r2, r3, #4
 8013e64:	89fb      	ldrh	r3, [r7, #14]
 8013e66:	1ad3      	subs	r3, r2, r3
 8013e68:	2b10      	cmp	r3, #16
 8013e6a:	d10e      	bne.n	8013e8a <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f103 0012 	add.w	r0, r3, #18
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	681a      	ldr	r2, [r3, #0]
 8013e76:	89fb      	ldrh	r3, [r7, #14]
 8013e78:	4413      	add	r3, r2
 8013e7a:	2210      	movs	r2, #16
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	f002 fdc8 	bl	8016a12 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013e82:	89fb      	ldrh	r3, [r7, #14]
 8013e84:	3310      	adds	r3, #16
 8013e86:	81fb      	strh	r3, [r7, #14]
 8013e88:	e008      	b.n	8013e9c <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	791b      	ldrb	r3, [r3, #4]
 8013e8e:	1f1a      	subs	r2, r3, #4
 8013e90:	89fb      	ldrh	r3, [r7, #14]
 8013e92:	1ad3      	subs	r3, r2, r3
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	dd01      	ble.n	8013e9c <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8013e98:	2301      	movs	r3, #1
 8013e9a:	e031      	b.n	8013f00 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681a      	ldr	r2, [r3, #0]
 8013ea0:	89fb      	ldrh	r3, [r7, #14]
 8013ea2:	1c59      	adds	r1, r3, #1
 8013ea4:	81f9      	strh	r1, [r7, #14]
 8013ea6:	4413      	add	r3, r2
 8013ea8:	781b      	ldrb	r3, [r3, #0]
 8013eaa:	461a      	mov	r2, r3
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	681a      	ldr	r2, [r3, #0]
 8013eb4:	89fb      	ldrh	r3, [r7, #14]
 8013eb6:	1c59      	adds	r1, r3, #1
 8013eb8:	81f9      	strh	r1, [r7, #14]
 8013eba:	4413      	add	r3, r2
 8013ebc:	781b      	ldrb	r3, [r3, #0]
 8013ebe:	021a      	lsls	r2, r3, #8
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ec4:	431a      	orrs	r2, r3
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	681a      	ldr	r2, [r3, #0]
 8013ece:	89fb      	ldrh	r3, [r7, #14]
 8013ed0:	1c59      	adds	r1, r3, #1
 8013ed2:	81f9      	strh	r1, [r7, #14]
 8013ed4:	4413      	add	r3, r2
 8013ed6:	781b      	ldrb	r3, [r3, #0]
 8013ed8:	041a      	lsls	r2, r3, #16
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ede:	431a      	orrs	r2, r3
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	681a      	ldr	r2, [r3, #0]
 8013ee8:	89fb      	ldrh	r3, [r7, #14]
 8013eea:	1c59      	adds	r1, r3, #1
 8013eec:	81f9      	strh	r1, [r7, #14]
 8013eee:	4413      	add	r3, r2
 8013ef0:	781b      	ldrb	r3, [r3, #0]
 8013ef2:	061a      	lsls	r2, r3, #24
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ef8:	431a      	orrs	r2, r3
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013efe:	2300      	movs	r3, #0
}
 8013f00:	4618      	mov	r0, r3
 8013f02:	3710      	adds	r7, #16
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b084      	sub	sp, #16
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d003      	beq.n	8013f1e <LoRaMacParserData+0x16>
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d101      	bne.n	8013f22 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013f1e:	2302      	movs	r3, #2
 8013f20:	e0e0      	b.n	80140e4 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8013f22:	2300      	movs	r3, #0
 8013f24:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	681a      	ldr	r2, [r3, #0]
 8013f2a:	89fb      	ldrh	r3, [r7, #14]
 8013f2c:	1c59      	adds	r1, r3, #1
 8013f2e:	81f9      	strh	r1, [r7, #14]
 8013f30:	4413      	add	r3, r2
 8013f32:	781a      	ldrb	r2, [r3, #0]
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	681a      	ldr	r2, [r3, #0]
 8013f3c:	89fb      	ldrh	r3, [r7, #14]
 8013f3e:	1c59      	adds	r1, r3, #1
 8013f40:	81f9      	strh	r1, [r7, #14]
 8013f42:	4413      	add	r3, r2
 8013f44:	781b      	ldrb	r3, [r3, #0]
 8013f46:	461a      	mov	r2, r3
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	681a      	ldr	r2, [r3, #0]
 8013f50:	89fb      	ldrh	r3, [r7, #14]
 8013f52:	1c59      	adds	r1, r3, #1
 8013f54:	81f9      	strh	r1, [r7, #14]
 8013f56:	4413      	add	r3, r2
 8013f58:	781b      	ldrb	r3, [r3, #0]
 8013f5a:	021a      	lsls	r2, r3, #8
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	689b      	ldr	r3, [r3, #8]
 8013f60:	431a      	orrs	r2, r3
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	681a      	ldr	r2, [r3, #0]
 8013f6a:	89fb      	ldrh	r3, [r7, #14]
 8013f6c:	1c59      	adds	r1, r3, #1
 8013f6e:	81f9      	strh	r1, [r7, #14]
 8013f70:	4413      	add	r3, r2
 8013f72:	781b      	ldrb	r3, [r3, #0]
 8013f74:	041a      	lsls	r2, r3, #16
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	689b      	ldr	r3, [r3, #8]
 8013f7a:	431a      	orrs	r2, r3
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681a      	ldr	r2, [r3, #0]
 8013f84:	89fb      	ldrh	r3, [r7, #14]
 8013f86:	1c59      	adds	r1, r3, #1
 8013f88:	81f9      	strh	r1, [r7, #14]
 8013f8a:	4413      	add	r3, r2
 8013f8c:	781b      	ldrb	r3, [r3, #0]
 8013f8e:	061a      	lsls	r2, r3, #24
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	689b      	ldr	r3, [r3, #8]
 8013f94:	431a      	orrs	r2, r3
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	681a      	ldr	r2, [r3, #0]
 8013f9e:	89fb      	ldrh	r3, [r7, #14]
 8013fa0:	1c59      	adds	r1, r3, #1
 8013fa2:	81f9      	strh	r1, [r7, #14]
 8013fa4:	4413      	add	r3, r2
 8013fa6:	781a      	ldrb	r2, [r3, #0]
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	681a      	ldr	r2, [r3, #0]
 8013fb0:	89fb      	ldrh	r3, [r7, #14]
 8013fb2:	1c59      	adds	r1, r3, #1
 8013fb4:	81f9      	strh	r1, [r7, #14]
 8013fb6:	4413      	add	r3, r2
 8013fb8:	781b      	ldrb	r3, [r3, #0]
 8013fba:	461a      	mov	r2, r3
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	681a      	ldr	r2, [r3, #0]
 8013fc4:	89fb      	ldrh	r3, [r7, #14]
 8013fc6:	1c59      	adds	r1, r3, #1
 8013fc8:	81f9      	strh	r1, [r7, #14]
 8013fca:	4413      	add	r3, r2
 8013fcc:	781b      	ldrb	r3, [r3, #0]
 8013fce:	0219      	lsls	r1, r3, #8
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	89db      	ldrh	r3, [r3, #14]
 8013fd4:	b21a      	sxth	r2, r3
 8013fd6:	b20b      	sxth	r3, r1
 8013fd8:	4313      	orrs	r3, r2
 8013fda:	b21b      	sxth	r3, r3
 8013fdc:	b29a      	uxth	r2, r3
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	f103 0010 	add.w	r0, r3, #16
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	681a      	ldr	r2, [r3, #0]
 8013fec:	89fb      	ldrh	r3, [r7, #14]
 8013fee:	18d1      	adds	r1, r2, r3
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	7b1b      	ldrb	r3, [r3, #12]
 8013ff4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013ff8:	b2db      	uxtb	r3, r3
 8013ffa:	461a      	mov	r2, r3
 8013ffc:	f002 fd09 	bl	8016a12 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	7b1b      	ldrb	r3, [r3, #12]
 8014004:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014008:	b2db      	uxtb	r3, r3
 801400a:	461a      	mov	r2, r3
 801400c:	89fb      	ldrh	r3, [r7, #14]
 801400e:	4413      	add	r3, r2
 8014010:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2200      	movs	r2, #0
 8014016:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2200      	movs	r2, #0
 801401e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	791b      	ldrb	r3, [r3, #4]
 8014026:	461a      	mov	r2, r3
 8014028:	89fb      	ldrh	r3, [r7, #14]
 801402a:	1ad3      	subs	r3, r2, r3
 801402c:	2b04      	cmp	r3, #4
 801402e:	dd27      	ble.n	8014080 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	681a      	ldr	r2, [r3, #0]
 8014034:	89fb      	ldrh	r3, [r7, #14]
 8014036:	1c59      	adds	r1, r3, #1
 8014038:	81f9      	strh	r1, [r7, #14]
 801403a:	4413      	add	r3, r2
 801403c:	781a      	ldrb	r2, [r3, #0]
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	791a      	ldrb	r2, [r3, #4]
 8014048:	89fb      	ldrh	r3, [r7, #14]
 801404a:	b2db      	uxtb	r3, r3
 801404c:	1ad3      	subs	r3, r2, r3
 801404e:	b2db      	uxtb	r3, r3
 8014050:	3b04      	subs	r3, #4
 8014052:	b2da      	uxtb	r2, r3
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	681a      	ldr	r2, [r3, #0]
 8014062:	89fb      	ldrh	r3, [r7, #14]
 8014064:	18d1      	adds	r1, r2, r3
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801406c:	461a      	mov	r2, r3
 801406e:	f002 fcd0 	bl	8016a12 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014078:	461a      	mov	r2, r3
 801407a:	89fb      	ldrh	r3, [r7, #14]
 801407c:	4413      	add	r3, r2
 801407e:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	681a      	ldr	r2, [r3, #0]
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	791b      	ldrb	r3, [r3, #4]
 8014088:	3b04      	subs	r3, #4
 801408a:	4413      	add	r3, r2
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	461a      	mov	r2, r3
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	6819      	ldr	r1, [r3, #0]
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	791b      	ldrb	r3, [r3, #4]
 80140a0:	3b03      	subs	r3, #3
 80140a2:	440b      	add	r3, r1
 80140a4:	781b      	ldrb	r3, [r3, #0]
 80140a6:	021b      	lsls	r3, r3, #8
 80140a8:	431a      	orrs	r2, r3
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	6819      	ldr	r1, [r3, #0]
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	791b      	ldrb	r3, [r3, #4]
 80140ba:	3b02      	subs	r3, #2
 80140bc:	440b      	add	r3, r1
 80140be:	781b      	ldrb	r3, [r3, #0]
 80140c0:	041b      	lsls	r3, r3, #16
 80140c2:	431a      	orrs	r2, r3
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	6819      	ldr	r1, [r3, #0]
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	791b      	ldrb	r3, [r3, #4]
 80140d4:	3b01      	subs	r3, #1
 80140d6:	440b      	add	r3, r1
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	061b      	lsls	r3, r3, #24
 80140dc:	431a      	orrs	r2, r3
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80140e2:	2300      	movs	r3, #0
}
 80140e4:	4618      	mov	r0, r3
 80140e6:	3710      	adds	r7, #16
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}

080140ec <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b084      	sub	sp, #16
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d003      	beq.n	8014102 <LoRaMacSerializerJoinRequest+0x16>
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d101      	bne.n	8014106 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014102:	2301      	movs	r3, #1
 8014104:	e070      	b.n	80141e8 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014106:	2300      	movs	r3, #0
 8014108:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	791b      	ldrb	r3, [r3, #4]
 801410e:	2b16      	cmp	r3, #22
 8014110:	d801      	bhi.n	8014116 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014112:	2302      	movs	r3, #2
 8014114:	e068      	b.n	80141e8 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	681a      	ldr	r2, [r3, #0]
 801411a:	89fb      	ldrh	r3, [r7, #14]
 801411c:	1c59      	adds	r1, r3, #1
 801411e:	81f9      	strh	r1, [r7, #14]
 8014120:	4413      	add	r3, r2
 8014122:	687a      	ldr	r2, [r7, #4]
 8014124:	7952      	ldrb	r2, [r2, #5]
 8014126:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	681a      	ldr	r2, [r3, #0]
 801412c:	89fb      	ldrh	r3, [r7, #14]
 801412e:	18d0      	adds	r0, r2, r3
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	3306      	adds	r3, #6
 8014134:	2208      	movs	r2, #8
 8014136:	4619      	mov	r1, r3
 8014138:	f002 fc86 	bl	8016a48 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801413c:	89fb      	ldrh	r3, [r7, #14]
 801413e:	3308      	adds	r3, #8
 8014140:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	681a      	ldr	r2, [r3, #0]
 8014146:	89fb      	ldrh	r3, [r7, #14]
 8014148:	18d0      	adds	r0, r2, r3
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	330e      	adds	r3, #14
 801414e:	2208      	movs	r2, #8
 8014150:	4619      	mov	r1, r3
 8014152:	f002 fc79 	bl	8016a48 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8014156:	89fb      	ldrh	r3, [r7, #14]
 8014158:	3308      	adds	r3, #8
 801415a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	8ad9      	ldrh	r1, [r3, #22]
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681a      	ldr	r2, [r3, #0]
 8014164:	89fb      	ldrh	r3, [r7, #14]
 8014166:	1c58      	adds	r0, r3, #1
 8014168:	81f8      	strh	r0, [r7, #14]
 801416a:	4413      	add	r3, r2
 801416c:	b2ca      	uxtb	r2, r1
 801416e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	8adb      	ldrh	r3, [r3, #22]
 8014174:	0a1b      	lsrs	r3, r3, #8
 8014176:	b299      	uxth	r1, r3
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	681a      	ldr	r2, [r3, #0]
 801417c:	89fb      	ldrh	r3, [r7, #14]
 801417e:	1c58      	adds	r0, r3, #1
 8014180:	81f8      	strh	r0, [r7, #14]
 8014182:	4413      	add	r3, r2
 8014184:	b2ca      	uxtb	r2, r1
 8014186:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	6999      	ldr	r1, [r3, #24]
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	681a      	ldr	r2, [r3, #0]
 8014190:	89fb      	ldrh	r3, [r7, #14]
 8014192:	1c58      	adds	r0, r3, #1
 8014194:	81f8      	strh	r0, [r7, #14]
 8014196:	4413      	add	r3, r2
 8014198:	b2ca      	uxtb	r2, r1
 801419a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	699b      	ldr	r3, [r3, #24]
 80141a0:	0a19      	lsrs	r1, r3, #8
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681a      	ldr	r2, [r3, #0]
 80141a6:	89fb      	ldrh	r3, [r7, #14]
 80141a8:	1c58      	adds	r0, r3, #1
 80141aa:	81f8      	strh	r0, [r7, #14]
 80141ac:	4413      	add	r3, r2
 80141ae:	b2ca      	uxtb	r2, r1
 80141b0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	699b      	ldr	r3, [r3, #24]
 80141b6:	0c19      	lsrs	r1, r3, #16
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681a      	ldr	r2, [r3, #0]
 80141bc:	89fb      	ldrh	r3, [r7, #14]
 80141be:	1c58      	adds	r0, r3, #1
 80141c0:	81f8      	strh	r0, [r7, #14]
 80141c2:	4413      	add	r3, r2
 80141c4:	b2ca      	uxtb	r2, r1
 80141c6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	699b      	ldr	r3, [r3, #24]
 80141cc:	0e19      	lsrs	r1, r3, #24
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	681a      	ldr	r2, [r3, #0]
 80141d2:	89fb      	ldrh	r3, [r7, #14]
 80141d4:	1c58      	adds	r0, r3, #1
 80141d6:	81f8      	strh	r0, [r7, #14]
 80141d8:	4413      	add	r3, r2
 80141da:	b2ca      	uxtb	r2, r1
 80141dc:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80141de:	89fb      	ldrh	r3, [r7, #14]
 80141e0:	b2da      	uxtb	r2, r3
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80141e6:	2300      	movs	r3, #0
}
 80141e8:	4618      	mov	r0, r3
 80141ea:	3710      	adds	r7, #16
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}

080141f0 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b084      	sub	sp, #16
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d003      	beq.n	8014206 <LoRaMacSerializerData+0x16>
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d101      	bne.n	801420a <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014206:	2301      	movs	r3, #1
 8014208:	e0e3      	b.n	80143d2 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 801420a:	2300      	movs	r3, #0
 801420c:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801420e:	2308      	movs	r3, #8
 8014210:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	7b1b      	ldrb	r3, [r3, #12]
 8014216:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801421a:	b2db      	uxtb	r3, r3
 801421c:	461a      	mov	r2, r3
 801421e:	89bb      	ldrh	r3, [r7, #12]
 8014220:	4413      	add	r3, r2
 8014222:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801422a:	2b00      	cmp	r3, #0
 801422c:	d002      	beq.n	8014234 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801422e:	89bb      	ldrh	r3, [r7, #12]
 8014230:	3301      	adds	r3, #1
 8014232:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801423a:	461a      	mov	r2, r3
 801423c:	89bb      	ldrh	r3, [r7, #12]
 801423e:	4413      	add	r3, r2
 8014240:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8014242:	89bb      	ldrh	r3, [r7, #12]
 8014244:	3304      	adds	r3, #4
 8014246:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	791b      	ldrb	r3, [r3, #4]
 801424c:	461a      	mov	r2, r3
 801424e:	89bb      	ldrh	r3, [r7, #12]
 8014250:	4293      	cmp	r3, r2
 8014252:	d901      	bls.n	8014258 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014254:	2302      	movs	r3, #2
 8014256:	e0bc      	b.n	80143d2 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	681a      	ldr	r2, [r3, #0]
 801425c:	89fb      	ldrh	r3, [r7, #14]
 801425e:	1c59      	adds	r1, r3, #1
 8014260:	81f9      	strh	r1, [r7, #14]
 8014262:	4413      	add	r3, r2
 8014264:	687a      	ldr	r2, [r7, #4]
 8014266:	7952      	ldrb	r2, [r2, #5]
 8014268:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	6899      	ldr	r1, [r3, #8]
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	681a      	ldr	r2, [r3, #0]
 8014272:	89fb      	ldrh	r3, [r7, #14]
 8014274:	1c58      	adds	r0, r3, #1
 8014276:	81f8      	strh	r0, [r7, #14]
 8014278:	4413      	add	r3, r2
 801427a:	b2ca      	uxtb	r2, r1
 801427c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	689b      	ldr	r3, [r3, #8]
 8014282:	0a19      	lsrs	r1, r3, #8
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681a      	ldr	r2, [r3, #0]
 8014288:	89fb      	ldrh	r3, [r7, #14]
 801428a:	1c58      	adds	r0, r3, #1
 801428c:	81f8      	strh	r0, [r7, #14]
 801428e:	4413      	add	r3, r2
 8014290:	b2ca      	uxtb	r2, r1
 8014292:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	689b      	ldr	r3, [r3, #8]
 8014298:	0c19      	lsrs	r1, r3, #16
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	681a      	ldr	r2, [r3, #0]
 801429e:	89fb      	ldrh	r3, [r7, #14]
 80142a0:	1c58      	adds	r0, r3, #1
 80142a2:	81f8      	strh	r0, [r7, #14]
 80142a4:	4413      	add	r3, r2
 80142a6:	b2ca      	uxtb	r2, r1
 80142a8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	689b      	ldr	r3, [r3, #8]
 80142ae:	0e19      	lsrs	r1, r3, #24
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681a      	ldr	r2, [r3, #0]
 80142b4:	89fb      	ldrh	r3, [r7, #14]
 80142b6:	1c58      	adds	r0, r3, #1
 80142b8:	81f8      	strh	r0, [r7, #14]
 80142ba:	4413      	add	r3, r2
 80142bc:	b2ca      	uxtb	r2, r1
 80142be:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681a      	ldr	r2, [r3, #0]
 80142c4:	89fb      	ldrh	r3, [r7, #14]
 80142c6:	1c59      	adds	r1, r3, #1
 80142c8:	81f9      	strh	r1, [r7, #14]
 80142ca:	4413      	add	r3, r2
 80142cc:	687a      	ldr	r2, [r7, #4]
 80142ce:	7b12      	ldrb	r2, [r2, #12]
 80142d0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	89d9      	ldrh	r1, [r3, #14]
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	681a      	ldr	r2, [r3, #0]
 80142da:	89fb      	ldrh	r3, [r7, #14]
 80142dc:	1c58      	adds	r0, r3, #1
 80142de:	81f8      	strh	r0, [r7, #14]
 80142e0:	4413      	add	r3, r2
 80142e2:	b2ca      	uxtb	r2, r1
 80142e4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	89db      	ldrh	r3, [r3, #14]
 80142ea:	0a1b      	lsrs	r3, r3, #8
 80142ec:	b299      	uxth	r1, r3
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	681a      	ldr	r2, [r3, #0]
 80142f2:	89fb      	ldrh	r3, [r7, #14]
 80142f4:	1c58      	adds	r0, r3, #1
 80142f6:	81f8      	strh	r0, [r7, #14]
 80142f8:	4413      	add	r3, r2
 80142fa:	b2ca      	uxtb	r2, r1
 80142fc:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	681a      	ldr	r2, [r3, #0]
 8014302:	89fb      	ldrh	r3, [r7, #14]
 8014304:	18d0      	adds	r0, r2, r3
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	f103 0110 	add.w	r1, r3, #16
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	7b1b      	ldrb	r3, [r3, #12]
 8014310:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014314:	b2db      	uxtb	r3, r3
 8014316:	461a      	mov	r2, r3
 8014318:	f002 fb7b 	bl	8016a12 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	7b1b      	ldrb	r3, [r3, #12]
 8014320:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014324:	b2db      	uxtb	r3, r3
 8014326:	461a      	mov	r2, r3
 8014328:	89fb      	ldrh	r3, [r7, #14]
 801432a:	4413      	add	r3, r2
 801432c:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014334:	2b00      	cmp	r3, #0
 8014336:	d009      	beq.n	801434c <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	681a      	ldr	r2, [r3, #0]
 801433c:	89fb      	ldrh	r3, [r7, #14]
 801433e:	1c59      	adds	r1, r3, #1
 8014340:	81f9      	strh	r1, [r7, #14]
 8014342:	4413      	add	r3, r2
 8014344:	687a      	ldr	r2, [r7, #4]
 8014346:	f892 2020 	ldrb.w	r2, [r2, #32]
 801434a:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	681a      	ldr	r2, [r3, #0]
 8014350:	89fb      	ldrh	r3, [r7, #14]
 8014352:	18d0      	adds	r0, r2, r3
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801435e:	461a      	mov	r2, r3
 8014360:	f002 fb57 	bl	8016a12 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801436a:	461a      	mov	r2, r3
 801436c:	89fb      	ldrh	r3, [r7, #14]
 801436e:	4413      	add	r3, r2
 8014370:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	681a      	ldr	r2, [r3, #0]
 801437a:	89fb      	ldrh	r3, [r7, #14]
 801437c:	1c58      	adds	r0, r3, #1
 801437e:	81f8      	strh	r0, [r7, #14]
 8014380:	4413      	add	r3, r2
 8014382:	b2ca      	uxtb	r2, r1
 8014384:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801438a:	0a19      	lsrs	r1, r3, #8
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	681a      	ldr	r2, [r3, #0]
 8014390:	89fb      	ldrh	r3, [r7, #14]
 8014392:	1c58      	adds	r0, r3, #1
 8014394:	81f8      	strh	r0, [r7, #14]
 8014396:	4413      	add	r3, r2
 8014398:	b2ca      	uxtb	r2, r1
 801439a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143a0:	0c19      	lsrs	r1, r3, #16
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681a      	ldr	r2, [r3, #0]
 80143a6:	89fb      	ldrh	r3, [r7, #14]
 80143a8:	1c58      	adds	r0, r3, #1
 80143aa:	81f8      	strh	r0, [r7, #14]
 80143ac:	4413      	add	r3, r2
 80143ae:	b2ca      	uxtb	r2, r1
 80143b0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143b6:	0e19      	lsrs	r1, r3, #24
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681a      	ldr	r2, [r3, #0]
 80143bc:	89fb      	ldrh	r3, [r7, #14]
 80143be:	1c58      	adds	r0, r3, #1
 80143c0:	81f8      	strh	r0, [r7, #14]
 80143c2:	4413      	add	r3, r2
 80143c4:	b2ca      	uxtb	r2, r1
 80143c6:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80143c8:	89fb      	ldrh	r3, [r7, #14]
 80143ca:	b2da      	uxtb	r2, r3
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80143d0:	2300      	movs	r3, #0
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	3710      	adds	r7, #16
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}

080143da <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80143da:	b480      	push	{r7}
 80143dc:	b083      	sub	sp, #12
 80143de:	af00      	add	r7, sp, #0
 80143e0:	4603      	mov	r3, r0
 80143e2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80143e4:	79fb      	ldrb	r3, [r7, #7]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d101      	bne.n	80143ee <RegionIsActive+0x14>
    {
        AS923_IS_ACTIVE( );
 80143ea:	2301      	movs	r3, #1
 80143ec:	e000      	b.n	80143f0 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80143ee:	2300      	movs	r3, #0
        }
    }
}
 80143f0:	4618      	mov	r0, r3
 80143f2:	370c      	adds	r7, #12
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bc80      	pop	{r7}
 80143f8:	4770      	bx	lr

080143fa <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80143fa:	b580      	push	{r7, lr}
 80143fc:	b084      	sub	sp, #16
 80143fe:	af00      	add	r7, sp, #0
 8014400:	4603      	mov	r3, r0
 8014402:	6039      	str	r1, [r7, #0]
 8014404:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8014406:	2300      	movs	r3, #0
 8014408:	60bb      	str	r3, [r7, #8]
    switch( region )
 801440a:	79fb      	ldrb	r3, [r7, #7]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d105      	bne.n	801441c <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
 8014410:	6838      	ldr	r0, [r7, #0]
 8014412:	f000 f9ff 	bl	8014814 <RegionAS923GetPhyParam>
 8014416:	4603      	mov	r3, r0
 8014418:	60fb      	str	r3, [r7, #12]
 801441a:	e001      	b.n	8014420 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	4618      	mov	r0, r3
 8014424:	3710      	adds	r7, #16
 8014426:	46bd      	mov	sp, r7
 8014428:	bd80      	pop	{r7, pc}

0801442a <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801442a:	b580      	push	{r7, lr}
 801442c:	b082      	sub	sp, #8
 801442e:	af00      	add	r7, sp, #0
 8014430:	4603      	mov	r3, r0
 8014432:	6039      	str	r1, [r7, #0]
 8014434:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014436:	79fb      	ldrb	r3, [r7, #7]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d103      	bne.n	8014444 <RegionSetBandTxDone+0x1a>
    {
        AS923_SET_BAND_TX_DONE( );
 801443c:	6838      	ldr	r0, [r7, #0]
 801443e:	f000 fb65 	bl	8014b0c <RegionAS923SetBandTxDone>
 8014442:	e000      	b.n	8014446 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014444:	bf00      	nop
        }
    }
}
 8014446:	3708      	adds	r7, #8
 8014448:	46bd      	mov	sp, r7
 801444a:	bd80      	pop	{r7, pc}

0801444c <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b082      	sub	sp, #8
 8014450:	af00      	add	r7, sp, #0
 8014452:	4603      	mov	r3, r0
 8014454:	6039      	str	r1, [r7, #0]
 8014456:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014458:	79fb      	ldrb	r3, [r7, #7]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d103      	bne.n	8014466 <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
 801445e:	6838      	ldr	r0, [r7, #0]
 8014460:	f000 fb80 	bl	8014b64 <RegionAS923InitDefaults>
 8014464:	e000      	b.n	8014468 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014466:	bf00      	nop
        }
    }
}
 8014468:	bf00      	nop
 801446a:	3708      	adds	r7, #8
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}

08014470 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b082      	sub	sp, #8
 8014474:	af00      	add	r7, sp, #0
 8014476:	4603      	mov	r3, r0
 8014478:	6039      	str	r1, [r7, #0]
 801447a:	71fb      	strb	r3, [r7, #7]
 801447c:	4613      	mov	r3, r2
 801447e:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014480:	79fb      	ldrb	r3, [r7, #7]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d106      	bne.n	8014494 <RegionVerify+0x24>
    {
        AS923_VERIFY( );
 8014486:	79bb      	ldrb	r3, [r7, #6]
 8014488:	4619      	mov	r1, r3
 801448a:	6838      	ldr	r0, [r7, #0]
 801448c:	f000 fbfe 	bl	8014c8c <RegionAS923Verify>
 8014490:	4603      	mov	r3, r0
 8014492:	e000      	b.n	8014496 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8014494:	2300      	movs	r3, #0
        }
    }
}
 8014496:	4618      	mov	r0, r3
 8014498:	3708      	adds	r7, #8
 801449a:	46bd      	mov	sp, r7
 801449c:	bd80      	pop	{r7, pc}

0801449e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801449e:	b580      	push	{r7, lr}
 80144a0:	b082      	sub	sp, #8
 80144a2:	af00      	add	r7, sp, #0
 80144a4:	4603      	mov	r3, r0
 80144a6:	6039      	str	r1, [r7, #0]
 80144a8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80144aa:	79fb      	ldrb	r3, [r7, #7]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d103      	bne.n	80144b8 <RegionApplyCFList+0x1a>
    {
        AS923_APPLY_CF_LIST( );
 80144b0:	6838      	ldr	r0, [r7, #0]
 80144b2:	f000 fc89 	bl	8014dc8 <RegionAS923ApplyCFList>
 80144b6:	e000      	b.n	80144ba <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80144b8:	bf00      	nop
        }
    }
}
 80144ba:	bf00      	nop
 80144bc:	3708      	adds	r7, #8
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}

080144c2 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80144c2:	b580      	push	{r7, lr}
 80144c4:	b082      	sub	sp, #8
 80144c6:	af00      	add	r7, sp, #0
 80144c8:	4603      	mov	r3, r0
 80144ca:	6039      	str	r1, [r7, #0]
 80144cc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80144ce:	79fb      	ldrb	r3, [r7, #7]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d104      	bne.n	80144de <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
 80144d4:	6838      	ldr	r0, [r7, #0]
 80144d6:	f000 fceb 	bl	8014eb0 <RegionAS923ChanMaskSet>
 80144da:	4603      	mov	r3, r0
 80144dc:	e000      	b.n	80144e0 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80144de:	2300      	movs	r3, #0
        }
    }
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3708      	adds	r7, #8
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}

080144e8 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b082      	sub	sp, #8
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	603b      	str	r3, [r7, #0]
 80144f0:	4603      	mov	r3, r0
 80144f2:	71fb      	strb	r3, [r7, #7]
 80144f4:	460b      	mov	r3, r1
 80144f6:	71bb      	strb	r3, [r7, #6]
 80144f8:	4613      	mov	r3, r2
 80144fa:	717b      	strb	r3, [r7, #5]
    switch( region )
 80144fc:	79fb      	ldrb	r3, [r7, #7]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d107      	bne.n	8014512 <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014502:	7979      	ldrb	r1, [r7, #5]
 8014504:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014508:	693b      	ldr	r3, [r7, #16]
 801450a:	683a      	ldr	r2, [r7, #0]
 801450c:	f000 fcfa 	bl	8014f04 <RegionAS923ComputeRxWindowParameters>
 8014510:	e000      	b.n	8014514 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8014512:	bf00      	nop
        }
    }
}
 8014514:	bf00      	nop
 8014516:	3708      	adds	r7, #8
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}

0801451c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b084      	sub	sp, #16
 8014520:	af00      	add	r7, sp, #0
 8014522:	4603      	mov	r3, r0
 8014524:	60b9      	str	r1, [r7, #8]
 8014526:	607a      	str	r2, [r7, #4]
 8014528:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801452a:	7bfb      	ldrb	r3, [r7, #15]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d105      	bne.n	801453c <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
 8014530:	6879      	ldr	r1, [r7, #4]
 8014532:	68b8      	ldr	r0, [r7, #8]
 8014534:	f000 fd40 	bl	8014fb8 <RegionAS923RxConfig>
 8014538:	4603      	mov	r3, r0
 801453a:	e000      	b.n	801453e <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801453c:	2300      	movs	r3, #0
        }
    }
}
 801453e:	4618      	mov	r0, r3
 8014540:	3710      	adds	r7, #16
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}

08014546 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014546:	b580      	push	{r7, lr}
 8014548:	b084      	sub	sp, #16
 801454a:	af00      	add	r7, sp, #0
 801454c:	60b9      	str	r1, [r7, #8]
 801454e:	607a      	str	r2, [r7, #4]
 8014550:	603b      	str	r3, [r7, #0]
 8014552:	4603      	mov	r3, r0
 8014554:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014556:	7bfb      	ldrb	r3, [r7, #15]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d106      	bne.n	801456a <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
 801455c:	683a      	ldr	r2, [r7, #0]
 801455e:	6879      	ldr	r1, [r7, #4]
 8014560:	68b8      	ldr	r0, [r7, #8]
 8014562:	f000 fdf9 	bl	8015158 <RegionAS923TxConfig>
 8014566:	4603      	mov	r3, r0
 8014568:	e000      	b.n	801456c <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801456a:	2300      	movs	r3, #0
        }
    }
}
 801456c:	4618      	mov	r0, r3
 801456e:	3710      	adds	r7, #16
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}

08014574 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b086      	sub	sp, #24
 8014578:	af02      	add	r7, sp, #8
 801457a:	60b9      	str	r1, [r7, #8]
 801457c:	607a      	str	r2, [r7, #4]
 801457e:	603b      	str	r3, [r7, #0]
 8014580:	4603      	mov	r3, r0
 8014582:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014584:	7bfb      	ldrb	r3, [r7, #15]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d109      	bne.n	801459e <RegionLinkAdrReq+0x2a>
    {
        AS923_LINK_ADR_REQ( );
 801458a:	69fb      	ldr	r3, [r7, #28]
 801458c:	9300      	str	r3, [sp, #0]
 801458e:	69bb      	ldr	r3, [r7, #24]
 8014590:	683a      	ldr	r2, [r7, #0]
 8014592:	6879      	ldr	r1, [r7, #4]
 8014594:	68b8      	ldr	r0, [r7, #8]
 8014596:	f000 feaf 	bl	80152f8 <RegionAS923LinkAdrReq>
 801459a:	4603      	mov	r3, r0
 801459c:	e000      	b.n	80145a0 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801459e:	2300      	movs	r3, #0
        }
    }
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	3710      	adds	r7, #16
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}

080145a8 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b082      	sub	sp, #8
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	4603      	mov	r3, r0
 80145b0:	6039      	str	r1, [r7, #0]
 80145b2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80145b4:	79fb      	ldrb	r3, [r7, #7]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d104      	bne.n	80145c4 <RegionRxParamSetupReq+0x1c>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 80145ba:	6838      	ldr	r0, [r7, #0]
 80145bc:	f000 ffbe 	bl	801553c <RegionAS923RxParamSetupReq>
 80145c0:	4603      	mov	r3, r0
 80145c2:	e000      	b.n	80145c6 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80145c4:	2300      	movs	r3, #0
        }
    }
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	3708      	adds	r7, #8
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd80      	pop	{r7, pc}

080145ce <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80145ce:	b580      	push	{r7, lr}
 80145d0:	b082      	sub	sp, #8
 80145d2:	af00      	add	r7, sp, #0
 80145d4:	4603      	mov	r3, r0
 80145d6:	6039      	str	r1, [r7, #0]
 80145d8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80145da:	79fb      	ldrb	r3, [r7, #7]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d104      	bne.n	80145ea <RegionNewChannelReq+0x1c>
    {
        AS923_NEW_CHANNEL_REQ( );
 80145e0:	6838      	ldr	r0, [r7, #0]
 80145e2:	f000 ffe3 	bl	80155ac <RegionAS923NewChannelReq>
 80145e6:	4603      	mov	r3, r0
 80145e8:	e000      	b.n	80145ec <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80145ea:	2300      	movs	r3, #0
        }
    }
}
 80145ec:	4618      	mov	r0, r3
 80145ee:	3708      	adds	r7, #8
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}

080145f4 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b082      	sub	sp, #8
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	4603      	mov	r3, r0
 80145fc:	6039      	str	r1, [r7, #0]
 80145fe:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014600:	79fb      	ldrb	r3, [r7, #7]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d104      	bne.n	8014610 <RegionTxParamSetupReq+0x1c>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 8014606:	6838      	ldr	r0, [r7, #0]
 8014608:	f001 f82e 	bl	8015668 <RegionAS923TxParamSetupReq>
 801460c:	4603      	mov	r3, r0
 801460e:	e000      	b.n	8014612 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014610:	2300      	movs	r3, #0
        }
    }
}
 8014612:	4618      	mov	r0, r3
 8014614:	3708      	adds	r7, #8
 8014616:	46bd      	mov	sp, r7
 8014618:	bd80      	pop	{r7, pc}

0801461a <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801461a:	b580      	push	{r7, lr}
 801461c:	b082      	sub	sp, #8
 801461e:	af00      	add	r7, sp, #0
 8014620:	4603      	mov	r3, r0
 8014622:	6039      	str	r1, [r7, #0]
 8014624:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014626:	79fb      	ldrb	r3, [r7, #7]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d104      	bne.n	8014636 <RegionDlChannelReq+0x1c>
    {
        AS923_DL_CHANNEL_REQ( );
 801462c:	6838      	ldr	r0, [r7, #0]
 801462e:	f001 f825 	bl	801567c <RegionAS923DlChannelReq>
 8014632:	4603      	mov	r3, r0
 8014634:	e000      	b.n	8014638 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014636:	2300      	movs	r3, #0
        }
    }
}
 8014638:	4618      	mov	r0, r3
 801463a:	3708      	adds	r7, #8
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}

08014640 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b082      	sub	sp, #8
 8014644:	af00      	add	r7, sp, #0
 8014646:	4603      	mov	r3, r0
 8014648:	71fb      	strb	r3, [r7, #7]
 801464a:	460b      	mov	r3, r1
 801464c:	71bb      	strb	r3, [r7, #6]
 801464e:	4613      	mov	r3, r2
 8014650:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014652:	79fb      	ldrb	r3, [r7, #7]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d108      	bne.n	801466a <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
 8014658:	797a      	ldrb	r2, [r7, #5]
 801465a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801465e:	4611      	mov	r1, r2
 8014660:	4618      	mov	r0, r3
 8014662:	f001 f851 	bl	8015708 <RegionAS923AlternateDr>
 8014666:	4603      	mov	r3, r0
 8014668:	e000      	b.n	801466c <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801466a:	2300      	movs	r3, #0
        }
    }
}
 801466c:	4618      	mov	r0, r3
 801466e:	3708      	adds	r7, #8
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}

08014674 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b084      	sub	sp, #16
 8014678:	af00      	add	r7, sp, #0
 801467a:	60b9      	str	r1, [r7, #8]
 801467c:	607a      	str	r2, [r7, #4]
 801467e:	603b      	str	r3, [r7, #0]
 8014680:	4603      	mov	r3, r0
 8014682:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014684:	7bfb      	ldrb	r3, [r7, #15]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d107      	bne.n	801469a <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
 801468a:	69bb      	ldr	r3, [r7, #24]
 801468c:	683a      	ldr	r2, [r7, #0]
 801468e:	6879      	ldr	r1, [r7, #4]
 8014690:	68b8      	ldr	r0, [r7, #8]
 8014692:	f001 f847 	bl	8015724 <RegionAS923NextChannel>
 8014696:	4603      	mov	r3, r0
 8014698:	e000      	b.n	801469c <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801469a:	2309      	movs	r3, #9
        }
    }
}
 801469c:	4618      	mov	r0, r3
 801469e:	3710      	adds	r7, #16
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}

080146a4 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b082      	sub	sp, #8
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	4603      	mov	r3, r0
 80146ac:	6039      	str	r1, [r7, #0]
 80146ae:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80146b0:	79fb      	ldrb	r3, [r7, #7]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d103      	bne.n	80146be <RegionSetContinuousWave+0x1a>
    {
        AS923_SET_CONTINUOUS_WAVE( );
 80146b6:	6838      	ldr	r0, [r7, #0]
 80146b8:	f001 f9a8 	bl	8015a0c <RegionAS923SetContinuousWave>
 80146bc:	e000      	b.n	80146c0 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80146be:	bf00      	nop
        }
    }
}
 80146c0:	bf00      	nop
 80146c2:	3708      	adds	r7, #8
 80146c4:	46bd      	mov	sp, r7
 80146c6:	bd80      	pop	{r7, pc}

080146c8 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80146c8:	b590      	push	{r4, r7, lr}
 80146ca:	b083      	sub	sp, #12
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	4604      	mov	r4, r0
 80146d0:	4608      	mov	r0, r1
 80146d2:	4611      	mov	r1, r2
 80146d4:	461a      	mov	r2, r3
 80146d6:	4623      	mov	r3, r4
 80146d8:	71fb      	strb	r3, [r7, #7]
 80146da:	4603      	mov	r3, r0
 80146dc:	71bb      	strb	r3, [r7, #6]
 80146de:	460b      	mov	r3, r1
 80146e0:	717b      	strb	r3, [r7, #5]
 80146e2:	4613      	mov	r3, r2
 80146e4:	713b      	strb	r3, [r7, #4]
    switch( region )
 80146e6:	79fb      	ldrb	r3, [r7, #7]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d109      	bne.n	8014700 <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
 80146ec:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80146f0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80146f4:	79bb      	ldrb	r3, [r7, #6]
 80146f6:	4618      	mov	r0, r3
 80146f8:	f001 f9d6 	bl	8015aa8 <RegionAS923ApplyDrOffset>
 80146fc:	4603      	mov	r3, r0
 80146fe:	e000      	b.n	8014702 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8014700:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8014702:	4618      	mov	r0, r3
 8014704:	370c      	adds	r7, #12
 8014706:	46bd      	mov	sp, r7
 8014708:	bd90      	pop	{r4, r7, pc}
	...

0801470c <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 801470c:	b480      	push	{r7}
 801470e:	b083      	sub	sp, #12
 8014710:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8014712:	4b04      	ldr	r3, [pc, #16]	@ (8014724 <RegionGetVersion+0x18>)
 8014714:	607b      	str	r3, [r7, #4]

    return version;
 8014716:	687b      	ldr	r3, [r7, #4]
}
 8014718:	4618      	mov	r0, r3
 801471a:	370c      	adds	r7, #12
 801471c:	46bd      	mov	sp, r7
 801471e:	bc80      	pop	{r7}
 8014720:	4770      	bx	lr
 8014722:	bf00      	nop
 8014724:	01010003 	.word	0x01010003

08014728 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b082      	sub	sp, #8
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014730:	4b0d      	ldr	r3, [pc, #52]	@ (8014768 <VerifyRfFreq+0x40>)
 8014732:	6a1b      	ldr	r3, [r3, #32]
 8014734:	6878      	ldr	r0, [r7, #4]
 8014736:	4798      	blx	r3
 8014738:	4603      	mov	r3, r0
 801473a:	f083 0301 	eor.w	r3, r3, #1
 801473e:	b2db      	uxtb	r3, r3
 8014740:	2b00      	cmp	r3, #0
 8014742:	d001      	beq.n	8014748 <VerifyRfFreq+0x20>
    {
        return false;
 8014744:	2300      	movs	r3, #0
 8014746:	e00a      	b.n	801475e <VerifyRfFreq+0x36>
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	4a08      	ldr	r2, [pc, #32]	@ (801476c <VerifyRfFreq+0x44>)
 801474c:	4293      	cmp	r3, r2
 801474e:	d903      	bls.n	8014758 <VerifyRfFreq+0x30>
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	4a07      	ldr	r2, [pc, #28]	@ (8014770 <VerifyRfFreq+0x48>)
 8014754:	4293      	cmp	r3, r2
 8014756:	d901      	bls.n	801475c <VerifyRfFreq+0x34>
    {
        return false;
 8014758:	2300      	movs	r3, #0
 801475a:	e000      	b.n	801475e <VerifyRfFreq+0x36>
    }
    return true;
 801475c:	2301      	movs	r3, #1
}
 801475e:	4618      	mov	r0, r3
 8014760:	3708      	adds	r7, #8
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}
 8014766:	bf00      	nop
 8014768:	0801eb10 	.word	0x0801eb10
 801476c:	3689cabf 	.word	0x3689cabf
 8014770:	37502800 	.word	0x37502800

08014774 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8014774:	b590      	push	{r4, r7, lr}
 8014776:	b08b      	sub	sp, #44	@ 0x2c
 8014778:	af04      	add	r7, sp, #16
 801477a:	4603      	mov	r3, r0
 801477c:	460a      	mov	r2, r1
 801477e:	71fb      	strb	r3, [r7, #7]
 8014780:	4613      	mov	r3, r2
 8014782:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAS923[datarate];
 8014784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014788:	4a1f      	ldr	r2, [pc, #124]	@ (8014808 <GetTimeOnAir+0x94>)
 801478a:	5cd3      	ldrb	r3, [r2, r3]
 801478c:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 801478e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014792:	491e      	ldr	r1, [pc, #120]	@ (801480c <GetTimeOnAir+0x98>)
 8014794:	4618      	mov	r0, r3
 8014796:	f002 f88d 	bl	80168b4 <RegionCommonGetBandwidth>
 801479a:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 801479c:	2300      	movs	r3, #0
 801479e:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80147a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147a4:	2b07      	cmp	r3, #7
 80147a6:	d118      	bne.n	80147da <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80147a8:	4b19      	ldr	r3, [pc, #100]	@ (8014810 <GetTimeOnAir+0x9c>)
 80147aa:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80147ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80147b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80147b4:	fb02 f303 	mul.w	r3, r2, r3
 80147b8:	4619      	mov	r1, r3
 80147ba:	88bb      	ldrh	r3, [r7, #4]
 80147bc:	b2db      	uxtb	r3, r3
 80147be:	2201      	movs	r2, #1
 80147c0:	9203      	str	r2, [sp, #12]
 80147c2:	9302      	str	r3, [sp, #8]
 80147c4:	2300      	movs	r3, #0
 80147c6:	9301      	str	r3, [sp, #4]
 80147c8:	2305      	movs	r3, #5
 80147ca:	9300      	str	r3, [sp, #0]
 80147cc:	2300      	movs	r3, #0
 80147ce:	460a      	mov	r2, r1
 80147d0:	68f9      	ldr	r1, [r7, #12]
 80147d2:	2000      	movs	r0, #0
 80147d4:	47a0      	blx	r4
 80147d6:	6178      	str	r0, [r7, #20]
 80147d8:	e011      	b.n	80147fe <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80147da:	4b0d      	ldr	r3, [pc, #52]	@ (8014810 <GetTimeOnAir+0x9c>)
 80147dc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80147de:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80147e2:	88bb      	ldrh	r3, [r7, #4]
 80147e4:	b2db      	uxtb	r3, r3
 80147e6:	2101      	movs	r1, #1
 80147e8:	9103      	str	r1, [sp, #12]
 80147ea:	9302      	str	r3, [sp, #8]
 80147ec:	2300      	movs	r3, #0
 80147ee:	9301      	str	r3, [sp, #4]
 80147f0:	2308      	movs	r3, #8
 80147f2:	9300      	str	r3, [sp, #0]
 80147f4:	2301      	movs	r3, #1
 80147f6:	68f9      	ldr	r1, [r7, #12]
 80147f8:	2001      	movs	r0, #1
 80147fa:	47a0      	blx	r4
 80147fc:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80147fe:	697b      	ldr	r3, [r7, #20]
}
 8014800:	4618      	mov	r0, r3
 8014802:	371c      	adds	r7, #28
 8014804:	46bd      	mov	sp, r7
 8014806:	bd90      	pop	{r4, r7, pc}
 8014808:	0801eac8 	.word	0x0801eac8
 801480c:	0801ead0 	.word	0x0801ead0
 8014810:	0801eb10 	.word	0x0801eb10

08014814 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b088      	sub	sp, #32
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801481c:	2300      	movs	r3, #0
 801481e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	781b      	ldrb	r3, [r3, #0]
 8014824:	3b01      	subs	r3, #1
 8014826:	2b38      	cmp	r3, #56	@ 0x38
 8014828:	f200 8154 	bhi.w	8014ad4 <RegionAS923GetPhyParam+0x2c0>
 801482c:	a201      	add	r2, pc, #4	@ (adr r2, 8014834 <RegionAS923GetPhyParam+0x20>)
 801482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014832:	bf00      	nop
 8014834:	08014919 	.word	0x08014919
 8014838:	0801492d 	.word	0x0801492d
 801483c:	08014ad5 	.word	0x08014ad5
 8014840:	08014ad5 	.word	0x08014ad5
 8014844:	08014ad5 	.word	0x08014ad5
 8014848:	08014941 	.word	0x08014941
 801484c:	08014ad5 	.word	0x08014ad5
 8014850:	08014987 	.word	0x08014987
 8014854:	08014ad5 	.word	0x08014ad5
 8014858:	0801498d 	.word	0x0801498d
 801485c:	08014993 	.word	0x08014993
 8014860:	08014999 	.word	0x08014999
 8014864:	0801499f 	.word	0x0801499f
 8014868:	080149c7 	.word	0x080149c7
 801486c:	080149ef 	.word	0x080149ef
 8014870:	080149f5 	.word	0x080149f5
 8014874:	080149fd 	.word	0x080149fd
 8014878:	08014a05 	.word	0x08014a05
 801487c:	08014a0d 	.word	0x08014a0d
 8014880:	08014a15 	.word	0x08014a15
 8014884:	08014a1d 	.word	0x08014a1d
 8014888:	08014a25 	.word	0x08014a25
 801488c:	08014a39 	.word	0x08014a39
 8014890:	08014a3f 	.word	0x08014a3f
 8014894:	08014a45 	.word	0x08014a45
 8014898:	08014a4b 	.word	0x08014a4b
 801489c:	08014a57 	.word	0x08014a57
 80148a0:	08014a63 	.word	0x08014a63
 80148a4:	08014a69 	.word	0x08014a69
 80148a8:	08014a71 	.word	0x08014a71
 80148ac:	08014a77 	.word	0x08014a77
 80148b0:	08014a7d 	.word	0x08014a7d
 80148b4:	08014a85 	.word	0x08014a85
 80148b8:	08014947 	.word	0x08014947
 80148bc:	08014ad5 	.word	0x08014ad5
 80148c0:	08014ad5 	.word	0x08014ad5
 80148c4:	08014ad5 	.word	0x08014ad5
 80148c8:	08014ad5 	.word	0x08014ad5
 80148cc:	08014ad5 	.word	0x08014ad5
 80148d0:	08014ad5 	.word	0x08014ad5
 80148d4:	08014ad5 	.word	0x08014ad5
 80148d8:	08014ad5 	.word	0x08014ad5
 80148dc:	08014ad5 	.word	0x08014ad5
 80148e0:	08014ad5 	.word	0x08014ad5
 80148e4:	08014ad5 	.word	0x08014ad5
 80148e8:	08014ad5 	.word	0x08014ad5
 80148ec:	08014ad5 	.word	0x08014ad5
 80148f0:	08014a8b 	.word	0x08014a8b
 80148f4:	08014a91 	.word	0x08014a91
 80148f8:	08014a9f 	.word	0x08014a9f
 80148fc:	08014ad5 	.word	0x08014ad5
 8014900:	08014ad5 	.word	0x08014ad5
 8014904:	08014aa5 	.word	0x08014aa5
 8014908:	08014aab 	.word	0x08014aab
 801490c:	08014ad5 	.word	0x08014ad5
 8014910:	08014ab1 	.word	0x08014ab1
 8014914:	08014ac1 	.word	0x08014ac1
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	78db      	ldrb	r3, [r3, #3]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d102      	bne.n	8014926 <RegionAS923GetPhyParam+0x112>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 8014920:	2300      	movs	r3, #0
 8014922:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8014924:	e0d7      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8014926:	2302      	movs	r3, #2
 8014928:	61bb      	str	r3, [r7, #24]
            break;
 801492a:	e0d4      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	789b      	ldrb	r3, [r3, #2]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d102      	bne.n	801493a <RegionAS923GetPhyParam+0x126>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 8014934:	2300      	movs	r3, #0
 8014936:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8014938:	e0cd      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 801493a:	2302      	movs	r3, #2
 801493c:	61bb      	str	r3, [r7, #24]
            break;
 801493e:	e0ca      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8014940:	2302      	movs	r3, #2
 8014942:	61bb      	str	r3, [r7, #24]
            break;
 8014944:	e0c7      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801494c:	733b      	strb	r3, [r7, #12]
 801494e:	2307      	movs	r3, #7
 8014950:	737b      	strb	r3, [r7, #13]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	789b      	ldrb	r3, [r3, #2]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d101      	bne.n	801495e <RegionAS923GetPhyParam+0x14a>
 801495a:	2300      	movs	r3, #0
 801495c:	e000      	b.n	8014960 <RegionAS923GetPhyParam+0x14c>
 801495e:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014960:	73bb      	strb	r3, [r7, #14]
 8014962:	2310      	movs	r3, #16
 8014964:	73fb      	strb	r3, [r7, #15]
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8014966:	4b5f      	ldr	r3, [pc, #380]	@ (8014ae4 <RegionAS923GetPhyParam+0x2d0>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801496e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8014970:	4b5c      	ldr	r3, [pc, #368]	@ (8014ae4 <RegionAS923GetPhyParam+0x2d0>)
 8014972:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014974:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8014976:	f107 030c 	add.w	r3, r7, #12
 801497a:	4618      	mov	r0, r3
 801497c:	f001 ff47 	bl	801680e <RegionCommonGetNextLowerTxDr>
 8014980:	4603      	mov	r3, r0
 8014982:	61bb      	str	r3, [r7, #24]
            break;
 8014984:	e0a7      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 8014986:	2300      	movs	r3, #0
 8014988:	61bb      	str	r3, [r7, #24]
            break;
 801498a:	e0a4      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 801498c:	2300      	movs	r3, #0
 801498e:	61bb      	str	r3, [r7, #24]
            break;
 8014990:	e0a1      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8014992:	2340      	movs	r3, #64	@ 0x40
 8014994:	61bb      	str	r3, [r7, #24]
            break;
 8014996:	e09e      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8014998:	2320      	movs	r3, #32
 801499a:	61bb      	str	r3, [r7, #24]
            break;
 801499c:	e09b      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	789b      	ldrb	r3, [r3, #2]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d107      	bne.n	80149b6 <RegionAS923GetPhyParam+0x1a2>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80149ac:	461a      	mov	r2, r3
 80149ae:	4b4e      	ldr	r3, [pc, #312]	@ (8014ae8 <RegionAS923GetPhyParam+0x2d4>)
 80149b0:	5c9b      	ldrb	r3, [r3, r2]
 80149b2:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 80149b4:	e08f      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80149bc:	461a      	mov	r2, r3
 80149be:	4b4b      	ldr	r3, [pc, #300]	@ (8014aec <RegionAS923GetPhyParam+0x2d8>)
 80149c0:	5c9b      	ldrb	r3, [r3, r2]
 80149c2:	61bb      	str	r3, [r7, #24]
            break;
 80149c4:	e087      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	789b      	ldrb	r3, [r3, #2]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d107      	bne.n	80149de <RegionAS923GetPhyParam+0x1ca>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80149d4:	461a      	mov	r2, r3
 80149d6:	4b46      	ldr	r3, [pc, #280]	@ (8014af0 <RegionAS923GetPhyParam+0x2dc>)
 80149d8:	5c9b      	ldrb	r3, [r3, r2]
 80149da:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 80149dc:	e07b      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80149e4:	461a      	mov	r2, r3
 80149e6:	4b41      	ldr	r3, [pc, #260]	@ (8014aec <RegionAS923GetPhyParam+0x2d8>)
 80149e8:	5c9b      	ldrb	r3, [r3, r2]
 80149ea:	61bb      	str	r3, [r7, #24]
            break;
 80149ec:	e073      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 80149ee:	2300      	movs	r3, #0
 80149f0:	61bb      	str	r3, [r7, #24]
            break;
 80149f2:	e070      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 80149f4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80149f8:	61bb      	str	r3, [r7, #24]
            break;
 80149fa:	e06c      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80149fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014a00:	61bb      	str	r3, [r7, #24]
            break;
 8014a02:	e068      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8014a04:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8014a08:	61bb      	str	r3, [r7, #24]
            break;
 8014a0a:	e064      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8014a0c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8014a10:	61bb      	str	r3, [r7, #24]
            break;
 8014a12:	e060      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8014a14:	f241 7370 	movw	r3, #6000	@ 0x1770
 8014a18:	61bb      	str	r3, [r7, #24]
            break;
 8014a1a:	e05c      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8014a1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8014a20:	61bb      	str	r3, [r7, #24]
            break;
 8014a22:	e058      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8014a24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014a28:	4832      	ldr	r0, [pc, #200]	@ (8014af4 <RegionAS923GetPhyParam+0x2e0>)
 8014a2a:	f001 ffdb 	bl	80169e4 <randr>
 8014a2e:	4603      	mov	r3, r0
 8014a30:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8014a34:	61bb      	str	r3, [r7, #24]
            break;
 8014a36:	e04e      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8014a38:	2300      	movs	r3, #0
 8014a3a:	61bb      	str	r3, [r7, #24]
            break;
 8014a3c:	e04b      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 8014a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8014af8 <RegionAS923GetPhyParam+0x2e4>)
 8014a40:	61bb      	str	r3, [r7, #24]
            break;
 8014a42:	e048      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 8014a44:	2302      	movs	r3, #2
 8014a46:	61bb      	str	r3, [r7, #24]
            break;
 8014a48:	e045      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8014a4a:	4b26      	ldr	r3, [pc, #152]	@ (8014ae4 <RegionAS923GetPhyParam+0x2d0>)
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8014a52:	61bb      	str	r3, [r7, #24]
            break;
 8014a54:	e03f      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8014a56:	4b23      	ldr	r3, [pc, #140]	@ (8014ae4 <RegionAS923GetPhyParam+0x2d0>)
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8014a5e:	61bb      	str	r3, [r7, #24]
            break;
 8014a60:	e039      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 8014a62:	2310      	movs	r3, #16
 8014a64:	61bb      	str	r3, [r7, #24]
            break;
 8014a66:	e036      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8014a68:	4b1e      	ldr	r3, [pc, #120]	@ (8014ae4 <RegionAS923GetPhyParam+0x2d0>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	61bb      	str	r3, [r7, #24]
            break;
 8014a6e:	e032      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8014a70:	2301      	movs	r3, #1
 8014a72:	61bb      	str	r3, [r7, #24]
            break;
 8014a74:	e02f      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 8014a76:	2301      	movs	r3, #1
 8014a78:	61bb      	str	r3, [r7, #24]
            break;
 8014a7a:	e02c      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 8014a7c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8014a80:	61bb      	str	r3, [r7, #24]
            break;
 8014a82:	e028      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 8014a84:	4b1d      	ldr	r3, [pc, #116]	@ (8014afc <RegionAS923GetPhyParam+0x2e8>)
 8014a86:	61bb      	str	r3, [r7, #24]
            break;
 8014a88:	e025      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 8014a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8014b00 <RegionAS923GetPhyParam+0x2ec>)
 8014a8c:	61bb      	str	r3, [r7, #24]
            break;
 8014a8e:	e022      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 8014a90:	2311      	movs	r3, #17
 8014a92:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 8014a94:	2302      	movs	r3, #2
 8014a96:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 8014a98:	2300      	movs	r3, #0
 8014a9a:	76bb      	strb	r3, [r7, #26]
            break;
 8014a9c:	e01b      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 8014a9e:	2303      	movs	r3, #3
 8014aa0:	61bb      	str	r3, [r7, #24]
            break;
 8014aa2:	e018      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
 8014aa4:	4b16      	ldr	r3, [pc, #88]	@ (8014b00 <RegionAS923GetPhyParam+0x2ec>)
 8014aa6:	61bb      	str	r3, [r7, #24]
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
#endif /* REGION_VERSION */
            break;
 8014aa8:	e015      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 8014aaa:	2303      	movs	r3, #3
 8014aac:	61bb      	str	r3, [r7, #24]
            break;
 8014aae:	e012      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014ab6:	461a      	mov	r2, r3
 8014ab8:	4b12      	ldr	r3, [pc, #72]	@ (8014b04 <RegionAS923GetPhyParam+0x2f0>)
 8014aba:	5c9b      	ldrb	r3, [r3, r2]
 8014abc:	61bb      	str	r3, [r7, #24]
            break;
 8014abe:	e00a      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014ac6:	4910      	ldr	r1, [pc, #64]	@ (8014b08 <RegionAS923GetPhyParam+0x2f4>)
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f001 fef3 	bl	80168b4 <RegionCommonGetBandwidth>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	61bb      	str	r3, [r7, #24]
            break;
 8014ad2:	e000      	b.n	8014ad6 <RegionAS923GetPhyParam+0x2c2>
        }
        default:
        {
            break;
 8014ad4:	bf00      	nop
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 8014ad6:	69bb      	ldr	r3, [r7, #24]
 8014ad8:	61fb      	str	r3, [r7, #28]
 8014ada:	69fb      	ldr	r3, [r7, #28]
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	3720      	adds	r7, #32
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}
 8014ae4:	200015ac 	.word	0x200015ac
 8014ae8:	0801eaf0 	.word	0x0801eaf0
 8014aec:	0801eb00 	.word	0x0801eb00
 8014af0:	0801eaf8 	.word	0x0801eaf8
 8014af4:	fffffc18 	.word	0xfffffc18
 8014af8:	3706ea00 	.word	0x3706ea00
 8014afc:	4009999a 	.word	0x4009999a
 8014b00:	3709f740 	.word	0x3709f740
 8014b04:	0801eac8 	.word	0x0801eac8
 8014b08:	0801ead0 	.word	0x0801ead0

08014b0c <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8014b0c:	b590      	push	{r4, r7, lr}
 8014b0e:	b085      	sub	sp, #20
 8014b10:	af02      	add	r7, sp, #8
 8014b12:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8014b14:	4b11      	ldr	r3, [pc, #68]	@ (8014b5c <RegionAS923SetBandTxDone+0x50>)
 8014b16:	681a      	ldr	r2, [r3, #0]
 8014b18:	4b11      	ldr	r3, [pc, #68]	@ (8014b60 <RegionAS923SetBandTxDone+0x54>)
 8014b1a:	6819      	ldr	r1, [r3, #0]
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	781b      	ldrb	r3, [r3, #0]
 8014b20:	4618      	mov	r0, r3
 8014b22:	4603      	mov	r3, r0
 8014b24:	005b      	lsls	r3, r3, #1
 8014b26:	4403      	add	r3, r0
 8014b28:	009b      	lsls	r3, r3, #2
 8014b2a:	440b      	add	r3, r1
 8014b2c:	3309      	adds	r3, #9
 8014b2e:	781b      	ldrb	r3, [r3, #0]
 8014b30:	4619      	mov	r1, r3
 8014b32:	460b      	mov	r3, r1
 8014b34:	005b      	lsls	r3, r3, #1
 8014b36:	440b      	add	r3, r1
 8014b38:	00db      	lsls	r3, r3, #3
 8014b3a:	18d0      	adds	r0, r2, r3
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	6899      	ldr	r1, [r3, #8]
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	785c      	ldrb	r4, [r3, #1]
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	691a      	ldr	r2, [r3, #16]
 8014b48:	9200      	str	r2, [sp, #0]
 8014b4a:	68db      	ldr	r3, [r3, #12]
 8014b4c:	4622      	mov	r2, r4
 8014b4e:	f001 fa37 	bl	8015fc0 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 8014b52:	bf00      	nop
 8014b54:	370c      	adds	r7, #12
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd90      	pop	{r4, r7, pc}
 8014b5a:	bf00      	nop
 8014b5c:	200015a8 	.word	0x200015a8
 8014b60:	200015ac 	.word	0x200015ac

08014b64 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b08e      	sub	sp, #56	@ 0x38
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 8014b6c:	2364      	movs	r3, #100	@ 0x64
 8014b6e:	843b      	strh	r3, [r7, #32]
 8014b70:	2300      	movs	r3, #0
 8014b72:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014b76:	2300      	movs	r3, #0
 8014b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014b7e:	2300      	movs	r3, #0
 8014b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014b82:	2300      	movs	r3, #0
 8014b84:	633b      	str	r3, [r7, #48]	@ 0x30
 8014b86:	2300      	movs	r3, #0
 8014b88:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    {
        AS923_BAND0
    };

    switch( params->Type )
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	7a1b      	ldrb	r3, [r3, #8]
 8014b90:	2b02      	cmp	r3, #2
 8014b92:	d05f      	beq.n	8014c54 <RegionAS923InitDefaults+0xf0>
 8014b94:	2b02      	cmp	r3, #2
 8014b96:	dc6c      	bgt.n	8014c72 <RegionAS923InitDefaults+0x10e>
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d002      	beq.n	8014ba2 <RegionAS923InitDefaults+0x3e>
 8014b9c:	2b01      	cmp	r3, #1
 8014b9e:	d044      	beq.n	8014c2a <RegionAS923InitDefaults+0xc6>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8014ba0:	e067      	b.n	8014c72 <RegionAS923InitDefaults+0x10e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d064      	beq.n	8014c74 <RegionAS923InitDefaults+0x110>
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	685b      	ldr	r3, [r3, #4]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d060      	beq.n	8014c74 <RegionAS923InitDefaults+0x110>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	4a31      	ldr	r2, [pc, #196]	@ (8014c7c <RegionAS923InitDefaults+0x118>)
 8014bb8:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	4a30      	ldr	r2, [pc, #192]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014bc0:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 8014bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8014c7c <RegionAS923InitDefaults+0x118>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f107 0320 	add.w	r3, r7, #32
 8014bcc:	2218      	movs	r2, #24
 8014bce:	4619      	mov	r1, r3
 8014bd0:	f001 ff1f 	bl	8016a12 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 8014bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8014c84 <RegionAS923InitDefaults+0x120>)
 8014bda:	ca07      	ldmia	r2, {r0, r1, r2}
 8014bdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 8014be0:	4b27      	ldr	r3, [pc, #156]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	4a28      	ldr	r2, [pc, #160]	@ (8014c88 <RegionAS923InitDefaults+0x124>)
 8014be6:	330c      	adds	r3, #12
 8014be8:	ca07      	ldmia	r2, {r0, r1, r2}
 8014bea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 8014bee:	4b24      	ldr	r3, [pc, #144]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014bf0:	681a      	ldr	r2, [r3, #0]
 8014bf2:	4b23      	ldr	r3, [pc, #140]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	6812      	ldr	r2, [r2, #0]
 8014bf8:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 8014bfa:	4b21      	ldr	r3, [pc, #132]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014bfc:	681a      	ldr	r2, [r3, #0]
 8014bfe:	4b20      	ldr	r3, [pc, #128]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	68d2      	ldr	r2, [r2, #12]
 8014c04:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 8014c06:	4b1e      	ldr	r3, [pc, #120]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	2203      	movs	r2, #3
 8014c0c:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014c10:	4b1b      	ldr	r3, [pc, #108]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8014c18:	4b19      	ldr	r3, [pc, #100]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8014c20:	2201      	movs	r2, #1
 8014c22:	4619      	mov	r1, r3
 8014c24:	f001 f9a6 	bl	8015f74 <RegionCommonChanMaskCopy>
 8014c28:	e024      	b.n	8014c74 <RegionAS923InitDefaults+0x110>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8014c2a:	4b15      	ldr	r3, [pc, #84]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	2200      	movs	r2, #0
 8014c30:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8014c32:	4b13      	ldr	r3, [pc, #76]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	2200      	movs	r2, #0
 8014c38:	611a      	str	r2, [r3, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014c3a:	4b11      	ldr	r3, [pc, #68]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8014c42:	4b0f      	ldr	r3, [pc, #60]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8014c4a:	2201      	movs	r2, #1
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	f001 f991 	bl	8015f74 <RegionCommonChanMaskCopy>
            break;
 8014c52:	e00f      	b.n	8014c74 <RegionAS923InitDefaults+0x110>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8014c54:	4b0a      	ldr	r3, [pc, #40]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	@ 0x480
 8014c5c:	4b08      	ldr	r3, [pc, #32]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	@ 0x48c
 8014c64:	4b06      	ldr	r3, [pc, #24]	@ (8014c80 <RegionAS923InitDefaults+0x11c>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	430a      	orrs	r2, r1
 8014c6a:	b292      	uxth	r2, r2
 8014c6c:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
            break;
 8014c70:	e000      	b.n	8014c74 <RegionAS923InitDefaults+0x110>
            break;
 8014c72:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8014c74:	3738      	adds	r7, #56	@ 0x38
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd80      	pop	{r7, pc}
 8014c7a:	bf00      	nop
 8014c7c:	200015a8 	.word	0x200015a8
 8014c80:	200015ac 	.word	0x200015ac
 8014c84:	0801e46c 	.word	0x0801e46c
 8014c88:	0801e478 	.word	0x0801e478

08014c8c <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b082      	sub	sp, #8
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
 8014c94:	460b      	mov	r3, r1
 8014c96:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AS923 )
    switch( phyAttribute )
 8014c98:	78fb      	ldrb	r3, [r7, #3]
 8014c9a:	2b0f      	cmp	r3, #15
 8014c9c:	f200 808f 	bhi.w	8014dbe <RegionAS923Verify+0x132>
 8014ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8014ca8 <RegionAS923Verify+0x1c>)
 8014ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ca6:	bf00      	nop
 8014ca8:	08014ce9 	.word	0x08014ce9
 8014cac:	08014dbf 	.word	0x08014dbf
 8014cb0:	08014dbf 	.word	0x08014dbf
 8014cb4:	08014dbf 	.word	0x08014dbf
 8014cb8:	08014dbf 	.word	0x08014dbf
 8014cbc:	08014cf7 	.word	0x08014cf7
 8014cc0:	08014d3b 	.word	0x08014d3b
 8014cc4:	08014d59 	.word	0x08014d59
 8014cc8:	08014dbf 	.word	0x08014dbf
 8014ccc:	08014d9d 	.word	0x08014d9d
 8014cd0:	08014d9d 	.word	0x08014d9d
 8014cd4:	08014dbf 	.word	0x08014dbf
 8014cd8:	08014dbf 	.word	0x08014dbf
 8014cdc:	08014dbf 	.word	0x08014dbf
 8014ce0:	08014dbf 	.word	0x08014dbf
 8014ce4:	08014dbb 	.word	0x08014dbb
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	4618      	mov	r0, r3
 8014cee:	f7ff fd1b 	bl	8014728 <VerifyRfFreq>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	e064      	b.n	8014dc0 <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	789b      	ldrb	r3, [r3, #2]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d10e      	bne.n	8014d1c <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	f993 3000 	ldrsb.w	r3, [r3]
 8014d04:	2207      	movs	r2, #7
 8014d06:	2100      	movs	r1, #0
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f001 f8b6 	bl	8015e7a <RegionCommonValueInRange>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	bf14      	ite	ne
 8014d14:	2301      	movne	r3, #1
 8014d16:	2300      	moveq	r3, #0
 8014d18:	b2db      	uxtb	r3, r3
 8014d1a:	e051      	b.n	8014dc0 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	f993 3000 	ldrsb.w	r3, [r3]
 8014d22:	2207      	movs	r2, #7
 8014d24:	2102      	movs	r1, #2
 8014d26:	4618      	mov	r0, r3
 8014d28:	f001 f8a7 	bl	8015e7a <RegionCommonValueInRange>
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	bf14      	ite	ne
 8014d32:	2301      	movne	r3, #1
 8014d34:	2300      	moveq	r3, #0
 8014d36:	b2db      	uxtb	r3, r3
 8014d38:	e042      	b.n	8014dc0 <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	f993 3000 	ldrsb.w	r3, [r3]
 8014d40:	2205      	movs	r2, #5
 8014d42:	2100      	movs	r1, #0
 8014d44:	4618      	mov	r0, r3
 8014d46:	f001 f898 	bl	8015e7a <RegionCommonValueInRange>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	bf14      	ite	ne
 8014d50:	2301      	movne	r3, #1
 8014d52:	2300      	moveq	r3, #0
 8014d54:	b2db      	uxtb	r3, r3
 8014d56:	e033      	b.n	8014dc0 <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	785b      	ldrb	r3, [r3, #1]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d10e      	bne.n	8014d7e <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f993 3000 	ldrsb.w	r3, [r3]
 8014d66:	2207      	movs	r2, #7
 8014d68:	2100      	movs	r1, #0
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f001 f885 	bl	8015e7a <RegionCommonValueInRange>
 8014d70:	4603      	mov	r3, r0
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	bf14      	ite	ne
 8014d76:	2301      	movne	r3, #1
 8014d78:	2300      	moveq	r3, #0
 8014d7a:	b2db      	uxtb	r3, r3
 8014d7c:	e020      	b.n	8014dc0 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	f993 3000 	ldrsb.w	r3, [r3]
 8014d84:	2207      	movs	r2, #7
 8014d86:	2102      	movs	r1, #2
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f001 f876 	bl	8015e7a <RegionCommonValueInRange>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	bf14      	ite	ne
 8014d94:	2301      	movne	r3, #1
 8014d96:	2300      	moveq	r3, #0
 8014d98:	b2db      	uxtb	r3, r3
 8014d9a:	e011      	b.n	8014dc0 <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8014da2:	2207      	movs	r2, #7
 8014da4:	2100      	movs	r1, #0
 8014da6:	4618      	mov	r0, r3
 8014da8:	f001 f867 	bl	8015e7a <RegionCommonValueInRange>
 8014dac:	4603      	mov	r3, r0
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	bf14      	ite	ne
 8014db2:	2301      	movne	r3, #1
 8014db4:	2300      	moveq	r3, #0
 8014db6:	b2db      	uxtb	r3, r3
 8014db8:	e002      	b.n	8014dc0 <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 8014dba:	2300      	movs	r3, #0
 8014dbc:	e000      	b.n	8014dc0 <RegionAS923Verify+0x134>
        }
        default:
            return false;
 8014dbe:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	3708      	adds	r7, #8
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}

08014dc8 <RegionAS923ApplyCFList>:

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b08a      	sub	sp, #40	@ 0x28
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8014dd0:	2350      	movs	r3, #80	@ 0x50
 8014dd2:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	791b      	ldrb	r3, [r3, #4]
 8014dda:	2b10      	cmp	r3, #16
 8014ddc:	d162      	bne.n	8014ea4 <RegionAS923ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	330f      	adds	r3, #15
 8014de4:	781b      	ldrb	r3, [r3, #0]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d15e      	bne.n	8014ea8 <RegionAS923ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014dea:	2300      	movs	r3, #0
 8014dec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014df0:	2302      	movs	r3, #2
 8014df2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014df6:	e050      	b.n	8014e9a <RegionAS923ApplyCFList+0xd2>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 8014df8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014dfc:	2b06      	cmp	r3, #6
 8014dfe:	d824      	bhi.n	8014e4a <RegionAS923ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	681a      	ldr	r2, [r3, #0]
 8014e04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014e08:	4413      	add	r3, r2
 8014e0a:	781b      	ldrb	r3, [r3, #0]
 8014e0c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8014e0e:	69ba      	ldr	r2, [r7, #24]
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6819      	ldr	r1, [r3, #0]
 8014e14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014e18:	3301      	adds	r3, #1
 8014e1a:	440b      	add	r3, r1
 8014e1c:	781b      	ldrb	r3, [r3, #0]
 8014e1e:	021b      	lsls	r3, r3, #8
 8014e20:	4313      	orrs	r3, r2
 8014e22:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8014e24:	69ba      	ldr	r2, [r7, #24]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	6819      	ldr	r1, [r3, #0]
 8014e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014e2e:	3302      	adds	r3, #2
 8014e30:	440b      	add	r3, r1
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	041b      	lsls	r3, r3, #16
 8014e36:	4313      	orrs	r3, r2
 8014e38:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8014e3a:	69bb      	ldr	r3, [r7, #24]
 8014e3c:	2264      	movs	r2, #100	@ 0x64
 8014e3e:	fb02 f303 	mul.w	r3, r2, r3
 8014e42:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8014e44:	2300      	movs	r3, #0
 8014e46:	61fb      	str	r3, [r7, #28]
 8014e48:	e006      	b.n	8014e58 <RegionAS923ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8014e54:	2300      	movs	r3, #0
 8014e56:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8014e58:	69bb      	ldr	r3, [r7, #24]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d00b      	beq.n	8014e76 <RegionAS923ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8014e5e:	f107 0318 	add.w	r3, r7, #24
 8014e62:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8014e64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014e68:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 8014e6a:	f107 0310 	add.w	r3, r7, #16
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f000 fd06 	bl	8015880 <RegionAS923ChannelAdd>
 8014e74:	e007      	b.n	8014e86 <RegionAS923ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8014e76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014e7a:	733b      	strb	r3, [r7, #12]

            RegionAS923ChannelsRemove( &channelRemove );
 8014e7c:	f107 030c 	add.w	r3, r7, #12
 8014e80:	4618      	mov	r0, r3
 8014e82:	f000 fd99 	bl	80159b8 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014e86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014e8a:	3303      	adds	r3, #3
 8014e8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014e90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014e94:	3301      	adds	r3, #1
 8014e96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014e9a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014e9e:	2b0f      	cmp	r3, #15
 8014ea0:	d9aa      	bls.n	8014df8 <RegionAS923ApplyCFList+0x30>
 8014ea2:	e002      	b.n	8014eaa <RegionAS923ApplyCFList+0xe2>
        return;
 8014ea4:	bf00      	nop
 8014ea6:	e000      	b.n	8014eaa <RegionAS923ApplyCFList+0xe2>
        return;
 8014ea8:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8014eaa:	3728      	adds	r7, #40	@ 0x28
 8014eac:	46bd      	mov	sp, r7
 8014eae:	bd80      	pop	{r7, pc}

08014eb0 <RegionAS923ChanMaskSet>:

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b082      	sub	sp, #8
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	791b      	ldrb	r3, [r3, #4]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d002      	beq.n	8014ec6 <RegionAS923ChanMaskSet+0x16>
 8014ec0:	2b01      	cmp	r3, #1
 8014ec2:	d00b      	beq.n	8014edc <RegionAS923ChanMaskSet+0x2c>
 8014ec4:	e015      	b.n	8014ef2 <RegionAS923ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8014ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8014f00 <RegionAS923ChanMaskSet+0x50>)
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	2201      	movs	r2, #1
 8014ed4:	4619      	mov	r1, r3
 8014ed6:	f001 f84d 	bl	8015f74 <RegionCommonChanMaskCopy>
            break;
 8014eda:	e00c      	b.n	8014ef6 <RegionAS923ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8014edc:	4b08      	ldr	r3, [pc, #32]	@ (8014f00 <RegionAS923ChanMaskSet+0x50>)
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	2201      	movs	r2, #1
 8014eea:	4619      	mov	r1, r3
 8014eec:	f001 f842 	bl	8015f74 <RegionCommonChanMaskCopy>
            break;
 8014ef0:	e001      	b.n	8014ef6 <RegionAS923ChanMaskSet+0x46>
        }
        default:
            return false;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	e000      	b.n	8014ef8 <RegionAS923ChanMaskSet+0x48>
    }
    return true;
 8014ef6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8014ef8:	4618      	mov	r0, r3
 8014efa:	3708      	adds	r7, #8
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd80      	pop	{r7, pc}
 8014f00:	200015ac 	.word	0x200015ac

08014f04 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b088      	sub	sp, #32
 8014f08:	af02      	add	r7, sp, #8
 8014f0a:	60ba      	str	r2, [r7, #8]
 8014f0c:	607b      	str	r3, [r7, #4]
 8014f0e:	4603      	mov	r3, r0
 8014f10:	73fb      	strb	r3, [r7, #15]
 8014f12:	460b      	mov	r3, r1
 8014f14:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;
 8014f16:	2300      	movs	r3, #0
 8014f18:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 8014f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f1e:	2b07      	cmp	r3, #7
 8014f20:	bfa8      	it	ge
 8014f22:	2307      	movge	r3, #7
 8014f24:	b25a      	sxtb	r2, r3
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014f30:	491e      	ldr	r1, [pc, #120]	@ (8014fac <RegionAS923ComputeRxWindowParameters+0xa8>)
 8014f32:	4618      	mov	r0, r3
 8014f34:	f001 fcbe 	bl	80168b4 <RegionCommonGetBandwidth>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	b2da      	uxtb	r2, r3
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014f46:	2b07      	cmp	r3, #7
 8014f48:	d10a      	bne.n	8014f60 <RegionAS923ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014f50:	461a      	mov	r2, r3
 8014f52:	4b17      	ldr	r3, [pc, #92]	@ (8014fb0 <RegionAS923ComputeRxWindowParameters+0xac>)
 8014f54:	5c9b      	ldrb	r3, [r3, r2]
 8014f56:	4618      	mov	r0, r3
 8014f58:	f001 fa40 	bl	80163dc <RegionCommonComputeSymbolTimeFsk>
 8014f5c:	6178      	str	r0, [r7, #20]
 8014f5e:	e011      	b.n	8014f84 <RegionAS923ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014f66:	461a      	mov	r2, r3
 8014f68:	4b11      	ldr	r3, [pc, #68]	@ (8014fb0 <RegionAS923ComputeRxWindowParameters+0xac>)
 8014f6a:	5c9a      	ldrb	r2, [r3, r2]
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014f72:	4619      	mov	r1, r3
 8014f74:	4b0d      	ldr	r3, [pc, #52]	@ (8014fac <RegionAS923ComputeRxWindowParameters+0xa8>)
 8014f76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014f7a:	4619      	mov	r1, r3
 8014f7c:	4610      	mov	r0, r2
 8014f7e:	f001 fa17 	bl	80163b0 <RegionCommonComputeSymbolTimeLoRa>
 8014f82:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8014f84:	4b0b      	ldr	r3, [pc, #44]	@ (8014fb4 <RegionAS923ComputeRxWindowParameters+0xb0>)
 8014f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014f88:	4798      	blx	r3
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	3308      	adds	r3, #8
 8014f8e:	687a      	ldr	r2, [r7, #4]
 8014f90:	320c      	adds	r2, #12
 8014f92:	7bb9      	ldrb	r1, [r7, #14]
 8014f94:	9201      	str	r2, [sp, #4]
 8014f96:	9300      	str	r3, [sp, #0]
 8014f98:	4603      	mov	r3, r0
 8014f9a:	68ba      	ldr	r2, [r7, #8]
 8014f9c:	6978      	ldr	r0, [r7, #20]
 8014f9e:	f001 fa2d 	bl	80163fc <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 8014fa2:	bf00      	nop
 8014fa4:	3718      	adds	r7, #24
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	0801ead0 	.word	0x0801ead0
 8014fb0:	0801eac8 	.word	0x0801eac8
 8014fb4:	0801eb10 	.word	0x0801eb10

08014fb8 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014fb8:	b5b0      	push	{r4, r5, r7, lr}
 8014fba:	b090      	sub	sp, #64	@ 0x40
 8014fbc:	af0a      	add	r7, sp, #40	@ 0x28
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	6039      	str	r1, [r7, #0]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	785b      	ldrb	r3, [r3, #1]
 8014fc6:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8014fc8:	2300      	movs	r3, #0
 8014fca:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8014fcc:	2300      	movs	r3, #0
 8014fce:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	685b      	ldr	r3, [r3, #4]
 8014fd4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8014fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8015140 <RegionAS923RxConfig+0x188>)
 8014fd8:	685b      	ldr	r3, [r3, #4]
 8014fda:	4798      	blx	r3
 8014fdc:	4603      	mov	r3, r0
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d001      	beq.n	8014fe6 <RegionAS923RxConfig+0x2e>
    {
        return false;
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	e0a8      	b.n	8015138 <RegionAS923RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	7cdb      	ldrb	r3, [r3, #19]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d126      	bne.n	801503c <RegionAS923RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8014fee:	4b55      	ldr	r3, [pc, #340]	@ (8015144 <RegionAS923RxConfig+0x18c>)
 8014ff0:	681a      	ldr	r2, [r3, #0]
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	781b      	ldrb	r3, [r3, #0]
 8014ff6:	4619      	mov	r1, r3
 8014ff8:	460b      	mov	r3, r1
 8014ffa:	005b      	lsls	r3, r3, #1
 8014ffc:	440b      	add	r3, r1
 8014ffe:	009b      	lsls	r3, r3, #2
 8015000:	4413      	add	r3, r2
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8015006:	4b4f      	ldr	r3, [pc, #316]	@ (8015144 <RegionAS923RxConfig+0x18c>)
 8015008:	681a      	ldr	r2, [r3, #0]
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	781b      	ldrb	r3, [r3, #0]
 801500e:	4619      	mov	r1, r3
 8015010:	460b      	mov	r3, r1
 8015012:	005b      	lsls	r3, r3, #1
 8015014:	440b      	add	r3, r1
 8015016:	009b      	lsls	r3, r3, #2
 8015018:	4413      	add	r3, r2
 801501a:	3304      	adds	r3, #4
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d00c      	beq.n	801503c <RegionAS923RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8015022:	4b48      	ldr	r3, [pc, #288]	@ (8015144 <RegionAS923RxConfig+0x18c>)
 8015024:	681a      	ldr	r2, [r3, #0]
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	781b      	ldrb	r3, [r3, #0]
 801502a:	4619      	mov	r1, r3
 801502c:	460b      	mov	r3, r1
 801502e:	005b      	lsls	r3, r3, #1
 8015030:	440b      	add	r3, r1
 8015032:	009b      	lsls	r3, r3, #2
 8015034:	4413      	add	r3, r2
 8015036:	3304      	adds	r3, #4
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 801503c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015040:	4a41      	ldr	r2, [pc, #260]	@ (8015148 <RegionAS923RxConfig+0x190>)
 8015042:	5cd3      	ldrb	r3, [r2, r3]
 8015044:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015046:	4b3e      	ldr	r3, [pc, #248]	@ (8015140 <RegionAS923RxConfig+0x188>)
 8015048:	68db      	ldr	r3, [r3, #12]
 801504a:	6938      	ldr	r0, [r7, #16]
 801504c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801504e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015052:	2b07      	cmp	r3, #7
 8015054:	d128      	bne.n	80150a8 <RegionAS923RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015056:	2300      	movs	r3, #0
 8015058:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801505a:	4b39      	ldr	r3, [pc, #228]	@ (8015140 <RegionAS923RxConfig+0x188>)
 801505c:	699c      	ldr	r4, [r3, #24]
 801505e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015062:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015066:	fb02 f303 	mul.w	r3, r2, r3
 801506a:	4619      	mov	r1, r3
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	689b      	ldr	r3, [r3, #8]
 8015070:	b29b      	uxth	r3, r3
 8015072:	687a      	ldr	r2, [r7, #4]
 8015074:	7c92      	ldrb	r2, [r2, #18]
 8015076:	7df8      	ldrb	r0, [r7, #23]
 8015078:	9209      	str	r2, [sp, #36]	@ 0x24
 801507a:	2200      	movs	r2, #0
 801507c:	9208      	str	r2, [sp, #32]
 801507e:	2200      	movs	r2, #0
 8015080:	9207      	str	r2, [sp, #28]
 8015082:	2200      	movs	r2, #0
 8015084:	9206      	str	r2, [sp, #24]
 8015086:	2201      	movs	r2, #1
 8015088:	9205      	str	r2, [sp, #20]
 801508a:	2200      	movs	r2, #0
 801508c:	9204      	str	r2, [sp, #16]
 801508e:	2200      	movs	r2, #0
 8015090:	9203      	str	r2, [sp, #12]
 8015092:	9302      	str	r3, [sp, #8]
 8015094:	2305      	movs	r3, #5
 8015096:	9301      	str	r3, [sp, #4]
 8015098:	4b2c      	ldr	r3, [pc, #176]	@ (801514c <RegionAS923RxConfig+0x194>)
 801509a:	9300      	str	r3, [sp, #0]
 801509c:	2300      	movs	r3, #0
 801509e:	460a      	mov	r2, r1
 80150a0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80150a4:	47a0      	blx	r4
 80150a6:	e024      	b.n	80150f2 <RegionAS923RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80150a8:	2301      	movs	r3, #1
 80150aa:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80150ac:	4b24      	ldr	r3, [pc, #144]	@ (8015140 <RegionAS923RxConfig+0x188>)
 80150ae:	699c      	ldr	r4, [r3, #24]
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	789b      	ldrb	r3, [r3, #2]
 80150b4:	461d      	mov	r5, r3
 80150b6:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	689b      	ldr	r3, [r3, #8]
 80150be:	b29b      	uxth	r3, r3
 80150c0:	687a      	ldr	r2, [r7, #4]
 80150c2:	7c92      	ldrb	r2, [r2, #18]
 80150c4:	7df8      	ldrb	r0, [r7, #23]
 80150c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80150c8:	2201      	movs	r2, #1
 80150ca:	9208      	str	r2, [sp, #32]
 80150cc:	2200      	movs	r2, #0
 80150ce:	9207      	str	r2, [sp, #28]
 80150d0:	2200      	movs	r2, #0
 80150d2:	9206      	str	r2, [sp, #24]
 80150d4:	2200      	movs	r2, #0
 80150d6:	9205      	str	r2, [sp, #20]
 80150d8:	2200      	movs	r2, #0
 80150da:	9204      	str	r2, [sp, #16]
 80150dc:	2200      	movs	r2, #0
 80150de:	9203      	str	r2, [sp, #12]
 80150e0:	9302      	str	r3, [sp, #8]
 80150e2:	2308      	movs	r3, #8
 80150e4:	9301      	str	r3, [sp, #4]
 80150e6:	2300      	movs	r3, #0
 80150e8:	9300      	str	r3, [sp, #0]
 80150ea:	2301      	movs	r3, #1
 80150ec:	460a      	mov	r2, r1
 80150ee:	4629      	mov	r1, r5
 80150f0:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	7c5b      	ldrb	r3, [r3, #17]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d005      	beq.n	8015106 <RegionAS923RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 80150fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80150fe:	4a14      	ldr	r2, [pc, #80]	@ (8015150 <RegionAS923RxConfig+0x198>)
 8015100:	5cd3      	ldrb	r3, [r2, r3]
 8015102:	75bb      	strb	r3, [r7, #22]
 8015104:	e004      	b.n	8015110 <RegionAS923RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 8015106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801510a:	4a12      	ldr	r2, [pc, #72]	@ (8015154 <RegionAS923RxConfig+0x19c>)
 801510c:	5cd3      	ldrb	r3, [r2, r3]
 801510e:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015110:	4b0b      	ldr	r3, [pc, #44]	@ (8015140 <RegionAS923RxConfig+0x188>)
 8015112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015114:	7dba      	ldrb	r2, [r7, #22]
 8015116:	320d      	adds	r2, #13
 8015118:	b2d1      	uxtb	r1, r2
 801511a:	7dfa      	ldrb	r2, [r7, #23]
 801511c:	4610      	mov	r0, r2
 801511e:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	7cdb      	ldrb	r3, [r3, #19]
 8015124:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015128:	6939      	ldr	r1, [r7, #16]
 801512a:	4618      	mov	r0, r3
 801512c:	f001 fbe0 	bl	80168f0 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8015130:	683b      	ldr	r3, [r7, #0]
 8015132:	7bfa      	ldrb	r2, [r7, #15]
 8015134:	701a      	strb	r2, [r3, #0]
    return true;
 8015136:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8015138:	4618      	mov	r0, r3
 801513a:	3718      	adds	r7, #24
 801513c:	46bd      	mov	sp, r7
 801513e:	bdb0      	pop	{r4, r5, r7, pc}
 8015140:	0801eb10 	.word	0x0801eb10
 8015144:	200015ac 	.word	0x200015ac
 8015148:	0801eac8 	.word	0x0801eac8
 801514c:	00014585 	.word	0x00014585
 8015150:	0801eaf8 	.word	0x0801eaf8
 8015154:	0801eaf0 	.word	0x0801eaf0

08015158 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015158:	b590      	push	{r4, r7, lr}
 801515a:	b093      	sub	sp, #76	@ 0x4c
 801515c:	af0a      	add	r7, sp, #40	@ 0x28
 801515e:	60f8      	str	r0, [r7, #12]
 8015160:	60b9      	str	r1, [r7, #8]
 8015162:	607a      	str	r2, [r7, #4]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801516a:	461a      	mov	r2, r3
 801516c:	4b5d      	ldr	r3, [pc, #372]	@ (80152e4 <RegionAS923TxConfig+0x18c>)
 801516e:	5c9b      	ldrb	r3, [r3, r2]
 8015170:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015178:	4b5b      	ldr	r3, [pc, #364]	@ (80152e8 <RegionAS923TxConfig+0x190>)
 801517a:	681a      	ldr	r2, [r3, #0]
 801517c:	4b5b      	ldr	r3, [pc, #364]	@ (80152ec <RegionAS923TxConfig+0x194>)
 801517e:	6819      	ldr	r1, [r3, #0]
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	781b      	ldrb	r3, [r3, #0]
 8015184:	461c      	mov	r4, r3
 8015186:	4623      	mov	r3, r4
 8015188:	005b      	lsls	r3, r3, #1
 801518a:	4423      	add	r3, r4
 801518c:	009b      	lsls	r3, r3, #2
 801518e:	440b      	add	r3, r1
 8015190:	3309      	adds	r3, #9
 8015192:	781b      	ldrb	r3, [r3, #0]
 8015194:	4619      	mov	r1, r3
 8015196:	460b      	mov	r3, r1
 8015198:	005b      	lsls	r3, r3, #1
 801519a:	440b      	add	r3, r1
 801519c:	00db      	lsls	r3, r3, #3
 801519e:	4413      	add	r3, r2
 80151a0:	3302      	adds	r3, #2
 80151a2:	f993 3000 	ldrsb.w	r3, [r3]
 80151a6:	4619      	mov	r1, r3
 80151a8:	f001 fb6f 	bl	801688a <RegionCommonLimitTxPower>
 80151ac:	4603      	mov	r3, r0
 80151ae:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80151b6:	494e      	ldr	r1, [pc, #312]	@ (80152f0 <RegionAS923TxConfig+0x198>)
 80151b8:	4618      	mov	r0, r3
 80151ba:	f001 fb7b 	bl	80168b4 <RegionCommonGetBandwidth>
 80151be:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80151c0:	2300      	movs	r3, #0
 80151c2:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	6859      	ldr	r1, [r3, #4]
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	689a      	ldr	r2, [r3, #8]
 80151cc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80151d0:	4618      	mov	r0, r3
 80151d2:	f001 f9cb 	bl	801656c <RegionCommonComputeTxPower>
 80151d6:	4603      	mov	r3, r0
 80151d8:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80151da:	4b46      	ldr	r3, [pc, #280]	@ (80152f4 <RegionAS923TxConfig+0x19c>)
 80151dc:	68da      	ldr	r2, [r3, #12]
 80151de:	4b43      	ldr	r3, [pc, #268]	@ (80152ec <RegionAS923TxConfig+0x194>)
 80151e0:	6819      	ldr	r1, [r3, #0]
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	781b      	ldrb	r3, [r3, #0]
 80151e6:	4618      	mov	r0, r3
 80151e8:	4603      	mov	r3, r0
 80151ea:	005b      	lsls	r3, r3, #1
 80151ec:	4403      	add	r3, r0
 80151ee:	009b      	lsls	r3, r3, #2
 80151f0:	440b      	add	r3, r1
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	4618      	mov	r0, r3
 80151f6:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80151fe:	2b07      	cmp	r3, #7
 8015200:	d124      	bne.n	801524c <RegionAS923TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015202:	2300      	movs	r3, #0
 8015204:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015206:	4b3b      	ldr	r3, [pc, #236]	@ (80152f4 <RegionAS923TxConfig+0x19c>)
 8015208:	69dc      	ldr	r4, [r3, #28]
 801520a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801520e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015212:	fb02 f303 	mul.w	r3, r2, r3
 8015216:	461a      	mov	r2, r3
 8015218:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801521c:	7ff8      	ldrb	r0, [r7, #31]
 801521e:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8015222:	9308      	str	r3, [sp, #32]
 8015224:	2300      	movs	r3, #0
 8015226:	9307      	str	r3, [sp, #28]
 8015228:	2300      	movs	r3, #0
 801522a:	9306      	str	r3, [sp, #24]
 801522c:	2300      	movs	r3, #0
 801522e:	9305      	str	r3, [sp, #20]
 8015230:	2301      	movs	r3, #1
 8015232:	9304      	str	r3, [sp, #16]
 8015234:	2300      	movs	r3, #0
 8015236:	9303      	str	r3, [sp, #12]
 8015238:	2305      	movs	r3, #5
 801523a:	9302      	str	r3, [sp, #8]
 801523c:	2300      	movs	r3, #0
 801523e:	9301      	str	r3, [sp, #4]
 8015240:	9200      	str	r2, [sp, #0]
 8015242:	69bb      	ldr	r3, [r7, #24]
 8015244:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8015248:	47a0      	blx	r4
 801524a:	e01d      	b.n	8015288 <RegionAS923TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 801524c:	2301      	movs	r3, #1
 801524e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015250:	4b28      	ldr	r3, [pc, #160]	@ (80152f4 <RegionAS923TxConfig+0x19c>)
 8015252:	69dc      	ldr	r4, [r3, #28]
 8015254:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015258:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801525c:	7ff8      	ldrb	r0, [r7, #31]
 801525e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8015262:	9208      	str	r2, [sp, #32]
 8015264:	2200      	movs	r2, #0
 8015266:	9207      	str	r2, [sp, #28]
 8015268:	2200      	movs	r2, #0
 801526a:	9206      	str	r2, [sp, #24]
 801526c:	2200      	movs	r2, #0
 801526e:	9205      	str	r2, [sp, #20]
 8015270:	2201      	movs	r2, #1
 8015272:	9204      	str	r2, [sp, #16]
 8015274:	2200      	movs	r2, #0
 8015276:	9203      	str	r2, [sp, #12]
 8015278:	2208      	movs	r2, #8
 801527a:	9202      	str	r2, [sp, #8]
 801527c:	2201      	movs	r2, #1
 801527e:	9201      	str	r2, [sp, #4]
 8015280:	9300      	str	r3, [sp, #0]
 8015282:	69bb      	ldr	r3, [r7, #24]
 8015284:	2200      	movs	r2, #0
 8015286:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015288:	4b18      	ldr	r3, [pc, #96]	@ (80152ec <RegionAS923TxConfig+0x194>)
 801528a:	681a      	ldr	r2, [r3, #0]
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	781b      	ldrb	r3, [r3, #0]
 8015290:	4619      	mov	r1, r3
 8015292:	460b      	mov	r3, r1
 8015294:	005b      	lsls	r3, r3, #1
 8015296:	440b      	add	r3, r1
 8015298:	009b      	lsls	r3, r3, #2
 801529a:	4413      	add	r3, r2
 801529c:	681a      	ldr	r2, [r3, #0]
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80152a4:	4619      	mov	r1, r3
 80152a6:	4610      	mov	r0, r2
 80152a8:	f001 fb54 	bl	8016954 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	899b      	ldrh	r3, [r3, #12]
 80152b6:	4619      	mov	r1, r3
 80152b8:	4610      	mov	r0, r2
 80152ba:	f7ff fa5b 	bl	8014774 <GetTimeOnAir>
 80152be:	4602      	mov	r2, r0
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80152c4:	4b0b      	ldr	r3, [pc, #44]	@ (80152f4 <RegionAS923TxConfig+0x19c>)
 80152c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80152c8:	68fa      	ldr	r2, [r7, #12]
 80152ca:	8992      	ldrh	r2, [r2, #12]
 80152cc:	b2d1      	uxtb	r1, r2
 80152ce:	7ffa      	ldrb	r2, [r7, #31]
 80152d0:	4610      	mov	r0, r2
 80152d2:	4798      	blx	r3

    *txPower = txPowerLimited;
 80152d4:	68bb      	ldr	r3, [r7, #8]
 80152d6:	7f7a      	ldrb	r2, [r7, #29]
 80152d8:	701a      	strb	r2, [r3, #0]
    return true;
 80152da:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 80152dc:	4618      	mov	r0, r3
 80152de:	3724      	adds	r7, #36	@ 0x24
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd90      	pop	{r4, r7, pc}
 80152e4:	0801eac8 	.word	0x0801eac8
 80152e8:	200015a8 	.word	0x200015a8
 80152ec:	200015ac 	.word	0x200015ac
 80152f0:	0801ead0 	.word	0x0801ead0
 80152f4:	0801eb10 	.word	0x0801eb10

080152f8 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80152f8:	b590      	push	{r4, r7, lr}
 80152fa:	b093      	sub	sp, #76	@ 0x4c
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	60f8      	str	r0, [r7, #12]
 8015300:	60b9      	str	r1, [r7, #8]
 8015302:	607a      	str	r2, [r7, #4]
 8015304:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015306:	2307      	movs	r3, #7
 8015308:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801530c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015310:	2200      	movs	r2, #0
 8015312:	601a      	str	r2, [r3, #0]
 8015314:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015316:	2300      	movs	r3, #0
 8015318:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 801531c:	2300      	movs	r3, #0
 801531e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8015322:	2300      	movs	r3, #0
 8015324:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015326:	e085      	b.n	8015434 <RegionAS923LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	685a      	ldr	r2, [r3, #4]
 801532c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8015330:	4413      	add	r3, r2
 8015332:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8015336:	4611      	mov	r1, r2
 8015338:	4618      	mov	r0, r3
 801533a:	f000 ff5f 	bl	80161fc <RegionCommonParseLinkAdrReq>
 801533e:	4603      	mov	r3, r0
 8015340:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8015344:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015348:	2b00      	cmp	r3, #0
 801534a:	d07b      	beq.n	8015444 <RegionAS923LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801534c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015350:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015354:	4413      	add	r3, r2
 8015356:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801535a:	2307      	movs	r3, #7
 801535c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015360:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015364:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015366:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801536a:	2b00      	cmp	r3, #0
 801536c:	d109      	bne.n	8015382 <RegionAS923LinkAdrReq+0x8a>
 801536e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015370:	2b00      	cmp	r3, #0
 8015372:	d106      	bne.n	8015382 <RegionAS923LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015374:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015378:	f023 0301 	bic.w	r3, r3, #1
 801537c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015380:	e058      	b.n	8015434 <RegionAS923LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015382:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015386:	2b00      	cmp	r3, #0
 8015388:	d003      	beq.n	8015392 <RegionAS923LinkAdrReq+0x9a>
 801538a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801538e:	2b05      	cmp	r3, #5
 8015390:	d903      	bls.n	801539a <RegionAS923LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015392:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015396:	2b06      	cmp	r3, #6
 8015398:	d906      	bls.n	80153a8 <RegionAS923LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801539a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801539e:	f023 0301 	bic.w	r3, r3, #1
 80153a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80153a6:	e045      	b.n	8015434 <RegionAS923LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 80153a8:	2300      	movs	r3, #0
 80153aa:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80153ae:	e03d      	b.n	801542c <RegionAS923LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80153b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80153b4:	2b06      	cmp	r3, #6
 80153b6:	d118      	bne.n	80153ea <RegionAS923LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80153b8:	4b5f      	ldr	r3, [pc, #380]	@ (8015538 <RegionAS923LinkAdrReq+0x240>)
 80153ba:	6819      	ldr	r1, [r3, #0]
 80153bc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80153c0:	4613      	mov	r3, r2
 80153c2:	005b      	lsls	r3, r3, #1
 80153c4:	4413      	add	r3, r2
 80153c6:	009b      	lsls	r3, r3, #2
 80153c8:	440b      	add	r3, r1
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d028      	beq.n	8015422 <RegionAS923LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80153d0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80153d4:	2201      	movs	r2, #1
 80153d6:	fa02 f303 	lsl.w	r3, r2, r3
 80153da:	b21a      	sxth	r2, r3
 80153dc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80153de:	b21b      	sxth	r3, r3
 80153e0:	4313      	orrs	r3, r2
 80153e2:	b21b      	sxth	r3, r3
 80153e4:	b29b      	uxth	r3, r3
 80153e6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80153e8:	e01b      	b.n	8015422 <RegionAS923LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80153ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80153ec:	461a      	mov	r2, r3
 80153ee:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80153f2:	fa42 f303 	asr.w	r3, r2, r3
 80153f6:	f003 0301 	and.w	r3, r3, #1
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d011      	beq.n	8015422 <RegionAS923LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80153fe:	4b4e      	ldr	r3, [pc, #312]	@ (8015538 <RegionAS923LinkAdrReq+0x240>)
 8015400:	6819      	ldr	r1, [r3, #0]
 8015402:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015406:	4613      	mov	r3, r2
 8015408:	005b      	lsls	r3, r3, #1
 801540a:	4413      	add	r3, r2
 801540c:	009b      	lsls	r3, r3, #2
 801540e:	440b      	add	r3, r1
 8015410:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015412:	2b00      	cmp	r3, #0
 8015414:	d105      	bne.n	8015422 <RegionAS923LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015416:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801541a:	f023 0301 	bic.w	r3, r3, #1
 801541e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8015422:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015426:	3301      	adds	r3, #1
 8015428:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 801542c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015430:	2b0f      	cmp	r3, #15
 8015432:	d9bd      	bls.n	80153b0 <RegionAS923LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	7a1b      	ldrb	r3, [r3, #8]
 8015438:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801543c:	429a      	cmp	r2, r3
 801543e:	f4ff af73 	bcc.w	8015328 <RegionAS923LinkAdrReq+0x30>
 8015442:	e000      	b.n	8015446 <RegionAS923LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015444:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015446:	2302      	movs	r3, #2
 8015448:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	7a5b      	ldrb	r3, [r3, #9]
 8015450:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionAS923GetPhyParam( &getPhy );
 8015454:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015458:	4618      	mov	r0, r3
 801545a:	f7ff f9db 	bl	8014814 <RegionAS923GetPhyParam>
 801545e:	4603      	mov	r3, r0
 8015460:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8015462:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015466:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	7a9b      	ldrb	r3, [r3, #10]
 801546c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801546e:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8015472:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015474:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8015478:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801547a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801547e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015486:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801548e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	7b5b      	ldrb	r3, [r3, #13]
 8015494:	b25b      	sxtb	r3, r3
 8015496:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 8015498:	2310      	movs	r3, #16
 801549a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801549c:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80154a0:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80154a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154a4:	b25b      	sxtb	r3, r3
 80154a6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 80154aa:	2307      	movs	r3, #7
 80154ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80154b0:	4b21      	ldr	r3, [pc, #132]	@ (8015538 <RegionAS923LinkAdrReq+0x240>)
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 80154b6:	2307      	movs	r3, #7
 80154b8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 80154bc:	2300      	movs	r3, #0
 80154be:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80154c8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80154cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80154d0:	1c9a      	adds	r2, r3, #2
 80154d2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80154d6:	1c59      	adds	r1, r3, #1
 80154d8:	f107 0010 	add.w	r0, r7, #16
 80154dc:	4623      	mov	r3, r4
 80154de:	f000 fede 	bl	801629e <RegionCommonLinkAdrReqVerifyParams>
 80154e2:	4603      	mov	r3, r0
 80154e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80154e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80154ec:	2b07      	cmp	r3, #7
 80154ee:	d10d      	bne.n	801550c <RegionAS923LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80154f0:	4b11      	ldr	r3, [pc, #68]	@ (8015538 <RegionAS923LinkAdrReq+0x240>)
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80154f8:	220c      	movs	r2, #12
 80154fa:	2100      	movs	r1, #0
 80154fc:	4618      	mov	r0, r3
 80154fe:	f001 fac3 	bl	8016a88 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015502:	4b0d      	ldr	r3, [pc, #52]	@ (8015538 <RegionAS923LinkAdrReq+0x240>)
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015508:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801550c:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8015510:	68bb      	ldr	r3, [r7, #8]
 8015512:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015514:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801551c:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015524:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015526:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801552a:	701a      	strb	r2, [r3, #0]

#endif /* REGION_AS923 */
    return status;
 801552c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015530:	4618      	mov	r0, r3
 8015532:	374c      	adds	r7, #76	@ 0x4c
 8015534:	46bd      	mov	sp, r7
 8015536:	bd90      	pop	{r4, r7, pc}
 8015538:	200015ac 	.word	0x200015ac

0801553c <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b084      	sub	sp, #16
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015544:	2307      	movs	r3, #7
 8015546:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	685b      	ldr	r3, [r3, #4]
 801554c:	4618      	mov	r0, r3
 801554e:	f7ff f8eb 	bl	8014728 <VerifyRfFreq>
 8015552:	4603      	mov	r3, r0
 8015554:	f083 0301 	eor.w	r3, r3, #1
 8015558:	b2db      	uxtb	r3, r3
 801555a:	2b00      	cmp	r3, #0
 801555c:	d003      	beq.n	8015566 <RegionAS923RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801555e:	7bfb      	ldrb	r3, [r7, #15]
 8015560:	f023 0301 	bic.w	r3, r3, #1
 8015564:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	f993 3000 	ldrsb.w	r3, [r3]
 801556c:	2207      	movs	r2, #7
 801556e:	2100      	movs	r1, #0
 8015570:	4618      	mov	r0, r3
 8015572:	f000 fc82 	bl	8015e7a <RegionCommonValueInRange>
 8015576:	4603      	mov	r3, r0
 8015578:	2b00      	cmp	r3, #0
 801557a:	d103      	bne.n	8015584 <RegionAS923RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 801557c:	7bfb      	ldrb	r3, [r7, #15]
 801557e:	f023 0302 	bic.w	r3, r3, #2
 8015582:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801558a:	2207      	movs	r2, #7
 801558c:	2100      	movs	r1, #0
 801558e:	4618      	mov	r0, r3
 8015590:	f000 fc73 	bl	8015e7a <RegionCommonValueInRange>
 8015594:	4603      	mov	r3, r0
 8015596:	2b00      	cmp	r3, #0
 8015598:	d103      	bne.n	80155a2 <RegionAS923RxParamSetupReq+0x66>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801559a:	7bfb      	ldrb	r3, [r7, #15]
 801559c:	f023 0304 	bic.w	r3, r3, #4
 80155a0:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_AS923 */
    return status;
 80155a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	3710      	adds	r7, #16
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd80      	pop	{r7, pc}

080155ac <RegionAS923NewChannelReq>:

int8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b086      	sub	sp, #24
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80155b4:	2303      	movs	r3, #3
 80155b6:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d114      	bne.n	80155ec <RegionAS923NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80155c8:	b2db      	uxtb	r3, r3
 80155ca:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 80155cc:	f107 0308 	add.w	r3, r7, #8
 80155d0:	4618      	mov	r0, r3
 80155d2:	f000 f9f1 	bl	80159b8 <RegionAS923ChannelsRemove>
 80155d6:	4603      	mov	r3, r0
 80155d8:	f083 0301 	eor.w	r3, r3, #1
 80155dc:	b2db      	uxtb	r3, r3
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d03b      	beq.n	801565a <RegionAS923NewChannelReq+0xae>
        {
            status &= 0xFC;
 80155e2:	7dfb      	ldrb	r3, [r7, #23]
 80155e4:	f023 0303 	bic.w	r3, r3, #3
 80155e8:	75fb      	strb	r3, [r7, #23]
 80155ea:	e036      	b.n	801565a <RegionAS923NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80155f8:	b2db      	uxtb	r3, r3
 80155fa:	743b      	strb	r3, [r7, #16]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 80155fc:	f107 030c 	add.w	r3, r7, #12
 8015600:	4618      	mov	r0, r3
 8015602:	f000 f93d 	bl	8015880 <RegionAS923ChannelAdd>
 8015606:	4603      	mov	r3, r0
 8015608:	2b06      	cmp	r3, #6
 801560a:	d820      	bhi.n	801564e <RegionAS923NewChannelReq+0xa2>
 801560c:	a201      	add	r2, pc, #4	@ (adr r2, 8015614 <RegionAS923NewChannelReq+0x68>)
 801560e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015612:	bf00      	nop
 8015614:	08015659 	.word	0x08015659
 8015618:	0801564f 	.word	0x0801564f
 801561c:	0801564f 	.word	0x0801564f
 8015620:	0801564f 	.word	0x0801564f
 8015624:	08015631 	.word	0x08015631
 8015628:	0801563b 	.word	0x0801563b
 801562c:	08015645 	.word	0x08015645
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015630:	7dfb      	ldrb	r3, [r7, #23]
 8015632:	f023 0301 	bic.w	r3, r3, #1
 8015636:	75fb      	strb	r3, [r7, #23]
                break;
 8015638:	e00f      	b.n	801565a <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801563a:	7dfb      	ldrb	r3, [r7, #23]
 801563c:	f023 0302 	bic.w	r3, r3, #2
 8015640:	75fb      	strb	r3, [r7, #23]
                break;
 8015642:	e00a      	b.n	801565a <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015644:	7dfb      	ldrb	r3, [r7, #23]
 8015646:	f023 0303 	bic.w	r3, r3, #3
 801564a:	75fb      	strb	r3, [r7, #23]
                break;
 801564c:	e005      	b.n	801565a <RegionAS923NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801564e:	7dfb      	ldrb	r3, [r7, #23]
 8015650:	f023 0303 	bic.w	r3, r3, #3
 8015654:	75fb      	strb	r3, [r7, #23]
                break;
 8015656:	e000      	b.n	801565a <RegionAS923NewChannelReq+0xae>
                break;
 8015658:	bf00      	nop
            }
        }
    }

    return status;
 801565a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801565e:	4618      	mov	r0, r3
 8015660:	3718      	adds	r7, #24
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}
 8015666:	bf00      	nop

08015668 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015668:	b480      	push	{r7}
 801566a:	b083      	sub	sp, #12
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 8015670:	2300      	movs	r3, #0
}
 8015672:	4618      	mov	r0, r3
 8015674:	370c      	adds	r7, #12
 8015676:	46bd      	mov	sp, r7
 8015678:	bc80      	pop	{r7}
 801567a:	4770      	bx	lr

0801567c <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b084      	sub	sp, #16
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015684:	2303      	movs	r3, #3
 8015686:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_AS923 )
    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	781b      	ldrb	r3, [r3, #0]
 801568c:	2b0f      	cmp	r3, #15
 801568e:	d901      	bls.n	8015694 <RegionAS923DlChannelReq+0x18>
    {
        return 0;
 8015690:	2300      	movs	r3, #0
 8015692:	e032      	b.n	80156fa <RegionAS923DlChannelReq+0x7e>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	685b      	ldr	r3, [r3, #4]
 8015698:	4618      	mov	r0, r3
 801569a:	f7ff f845 	bl	8014728 <VerifyRfFreq>
 801569e:	4603      	mov	r3, r0
 80156a0:	f083 0301 	eor.w	r3, r3, #1
 80156a4:	b2db      	uxtb	r3, r3
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d003      	beq.n	80156b2 <RegionAS923DlChannelReq+0x36>
    {
        status &= 0xFE;
 80156aa:	7bfb      	ldrb	r3, [r7, #15]
 80156ac:	f023 0301 	bic.w	r3, r3, #1
 80156b0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80156b2:	4b14      	ldr	r3, [pc, #80]	@ (8015704 <RegionAS923DlChannelReq+0x88>)
 80156b4:	681a      	ldr	r2, [r3, #0]
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	781b      	ldrb	r3, [r3, #0]
 80156ba:	4619      	mov	r1, r3
 80156bc:	460b      	mov	r3, r1
 80156be:	005b      	lsls	r3, r3, #1
 80156c0:	440b      	add	r3, r1
 80156c2:	009b      	lsls	r3, r3, #2
 80156c4:	4413      	add	r3, r2
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d103      	bne.n	80156d4 <RegionAS923DlChannelReq+0x58>
    {
        status &= 0xFD;
 80156cc:	7bfb      	ldrb	r3, [r7, #15]
 80156ce:	f023 0302 	bic.w	r3, r3, #2
 80156d2:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80156d4:	7bfb      	ldrb	r3, [r7, #15]
 80156d6:	2b03      	cmp	r3, #3
 80156d8:	d10d      	bne.n	80156f6 <RegionAS923DlChannelReq+0x7a>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80156da:	4b0a      	ldr	r3, [pc, #40]	@ (8015704 <RegionAS923DlChannelReq+0x88>)
 80156dc:	6819      	ldr	r1, [r3, #0]
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	781b      	ldrb	r3, [r3, #0]
 80156e2:	4618      	mov	r0, r3
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	685a      	ldr	r2, [r3, #4]
 80156e8:	4603      	mov	r3, r0
 80156ea:	005b      	lsls	r3, r3, #1
 80156ec:	4403      	add	r3, r0
 80156ee:	009b      	lsls	r3, r3, #2
 80156f0:	440b      	add	r3, r1
 80156f2:	3304      	adds	r3, #4
 80156f4:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_AS923 */
    return status;
 80156f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80156fa:	4618      	mov	r0, r3
 80156fc:	3710      	adds	r7, #16
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd80      	pop	{r7, pc}
 8015702:	bf00      	nop
 8015704:	200015ac 	.word	0x200015ac

08015708 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015708:	b480      	push	{r7}
 801570a:	b083      	sub	sp, #12
 801570c:	af00      	add	r7, sp, #0
 801570e:	4603      	mov	r3, r0
 8015710:	460a      	mov	r2, r1
 8015712:	71fb      	strb	r3, [r7, #7]
 8015714:	4613      	mov	r3, r2
 8015716:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AS923 )
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 8015718:	2302      	movs	r3, #2
#else
    return -1;
#endif /* REGION_AS923 */
}
 801571a:	4618      	mov	r0, r3
 801571c:	370c      	adds	r7, #12
 801571e:	46bd      	mov	sp, r7
 8015720:	bc80      	pop	{r7}
 8015722:	4770      	bx	lr

08015724 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b09a      	sub	sp, #104	@ 0x68
 8015728:	af02      	add	r7, sp, #8
 801572a:	60f8      	str	r0, [r7, #12]
 801572c:	60b9      	str	r1, [r7, #8]
 801572e:	607a      	str	r2, [r7, #4]
 8015730:	603b      	str	r3, [r7, #0]
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 8015732:	2300      	movs	r3, #0
 8015734:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015738:	2300      	movs	r3, #0
 801573a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 801573e:	2300      	movs	r3, #0
 8015740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015742:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8015746:	2200      	movs	r2, #0
 8015748:	601a      	str	r2, [r3, #0]
 801574a:	605a      	str	r2, [r3, #4]
 801574c:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801574e:	230c      	movs	r3, #12
 8015750:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 8015754:	2303      	movs	r3, #3
 8015756:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015758:	4b47      	ldr	r3, [pc, #284]	@ (8015878 <RegionAS923NextChannel+0x154>)
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8015760:	2201      	movs	r2, #1
 8015762:	2100      	movs	r1, #0
 8015764:	4618      	mov	r0, r3
 8015766:	f000 fbd9 	bl	8015f1c <RegionCommonCountChannels>
 801576a:	4603      	mov	r3, r0
 801576c:	2b00      	cmp	r3, #0
 801576e:	d10a      	bne.n	8015786 <RegionAS923NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8015770:	4b41      	ldr	r3, [pc, #260]	@ (8015878 <RegionAS923NextChannel+0x154>)
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 8015778:	4b3f      	ldr	r3, [pc, #252]	@ (8015878 <RegionAS923NextChannel+0x154>)
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	f042 0203 	orr.w	r2, r2, #3
 8015780:	b292      	uxth	r2, r2
 8015782:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	7a5b      	ldrb	r3, [r3, #9]
 801578a:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015792:	b2db      	uxtb	r3, r3
 8015794:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015796:	4b38      	ldr	r3, [pc, #224]	@ (8015878 <RegionAS923NextChannel+0x154>)
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801579e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80157a0:	4b35      	ldr	r3, [pc, #212]	@ (8015878 <RegionAS923NextChannel+0x154>)
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80157a6:	4b35      	ldr	r3, [pc, #212]	@ (801587c <RegionAS923NextChannel+0x158>)
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 80157ac:	2310      	movs	r3, #16
 80157ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80157b0:	f107 0312 	add.w	r3, r7, #18
 80157b4:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	685b      	ldr	r3, [r3, #4]
 80157c0:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	7a9b      	ldrb	r3, [r3, #10]
 80157c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 80157ca:	2301      	movs	r3, #1
 80157cc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80157d0:	68fa      	ldr	r2, [r7, #12]
 80157d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80157d6:	320c      	adds	r2, #12
 80157d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80157dc:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	7d1b      	ldrb	r3, [r3, #20]
 80157e4:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	8adb      	ldrh	r3, [r3, #22]
 80157f2:	4619      	mov	r1, r3
 80157f4:	4610      	mov	r0, r2
 80157f6:	f7fe ffbd 	bl	8014774 <GetTimeOnAir>
 80157fa:	4603      	mov	r3, r0
 80157fc:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80157fe:	f107 0314 	add.w	r3, r7, #20
 8015802:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8015804:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8015808:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801580c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	9301      	str	r3, [sp, #4]
 8015814:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8015818:	9300      	str	r3, [sp, #0]
 801581a:	460b      	mov	r3, r1
 801581c:	6839      	ldr	r1, [r7, #0]
 801581e:	f000 ff94 	bl	801674a <RegionCommonIdentifyChannels>
 8015822:	4603      	mov	r3, r0
 8015824:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015828:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801582c:	2b00      	cmp	r3, #0
 801582e:	d10e      	bne.n	801584e <RegionAS923NextChannel+0x12a>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015830:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8015834:	3b01      	subs	r3, #1
 8015836:	4619      	mov	r1, r3
 8015838:	2000      	movs	r0, #0
 801583a:	f001 f8d3 	bl	80169e4 <randr>
 801583e:	4603      	mov	r3, r0
 8015840:	3360      	adds	r3, #96	@ 0x60
 8015842:	443b      	add	r3, r7
 8015844:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	701a      	strb	r2, [r3, #0]
 801584c:	e00e      	b.n	801586c <RegionAS923NextChannel+0x148>
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801584e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015852:	2b0c      	cmp	r3, #12
 8015854:	d10a      	bne.n	801586c <RegionAS923NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8015856:	4b08      	ldr	r3, [pc, #32]	@ (8015878 <RegionAS923NextChannel+0x154>)
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 801585e:	4b06      	ldr	r3, [pc, #24]	@ (8015878 <RegionAS923NextChannel+0x154>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	f042 0203 	orr.w	r2, r2, #3
 8015866:	b292      	uxth	r2, r2
 8015868:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }
    return status;
 801586c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8015870:	4618      	mov	r0, r3
 8015872:	3760      	adds	r7, #96	@ 0x60
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}
 8015878:	200015ac 	.word	0x200015ac
 801587c:	200015a8 	.word	0x200015a8

08015880 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b084      	sub	sp, #16
 8015884:	af00      	add	r7, sp, #0
 8015886:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    bool drInvalid = false;
 8015888:	2300      	movs	r3, #0
 801588a:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 801588c:	2300      	movs	r3, #0
 801588e:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	791b      	ldrb	r3, [r3, #4]
 8015894:	737b      	strb	r3, [r7, #13]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8015896:	7b7b      	ldrb	r3, [r7, #13]
 8015898:	2b01      	cmp	r3, #1
 801589a:	d801      	bhi.n	80158a0 <RegionAS923ChannelAdd+0x20>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801589c:	2306      	movs	r3, #6
 801589e:	e085      	b.n	80159ac <RegionAS923ChannelAdd+0x12c>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 80158a0:	7b7b      	ldrb	r3, [r7, #13]
 80158a2:	2b0f      	cmp	r3, #15
 80158a4:	d901      	bls.n	80158aa <RegionAS923ChannelAdd+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80158a6:	2303      	movs	r3, #3
 80158a8:	e080      	b.n	80159ac <RegionAS923ChannelAdd+0x12c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	7a1b      	ldrb	r3, [r3, #8]
 80158b0:	f343 0303 	sbfx	r3, r3, #0, #4
 80158b4:	b25b      	sxtb	r3, r3
 80158b6:	2207      	movs	r2, #7
 80158b8:	2100      	movs	r1, #0
 80158ba:	4618      	mov	r0, r3
 80158bc:	f000 fadd 	bl	8015e7a <RegionCommonValueInRange>
 80158c0:	4603      	mov	r3, r0
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d101      	bne.n	80158ca <RegionAS923ChannelAdd+0x4a>
    {
        drInvalid = true;
 80158c6:	2301      	movs	r3, #1
 80158c8:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	7a1b      	ldrb	r3, [r3, #8]
 80158d0:	f343 1303 	sbfx	r3, r3, #4, #4
 80158d4:	b25b      	sxtb	r3, r3
 80158d6:	2207      	movs	r2, #7
 80158d8:	2100      	movs	r1, #0
 80158da:	4618      	mov	r0, r3
 80158dc:	f000 facd 	bl	8015e7a <RegionCommonValueInRange>
 80158e0:	4603      	mov	r3, r0
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d101      	bne.n	80158ea <RegionAS923ChannelAdd+0x6a>
    {
        drInvalid = true;
 80158e6:	2301      	movs	r3, #1
 80158e8:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	7a1b      	ldrb	r3, [r3, #8]
 80158f0:	f343 0303 	sbfx	r3, r3, #0, #4
 80158f4:	b25a      	sxtb	r2, r3
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	7a1b      	ldrb	r3, [r3, #8]
 80158fc:	f343 1303 	sbfx	r3, r3, #4, #4
 8015900:	b25b      	sxtb	r3, r3
 8015902:	429a      	cmp	r2, r3
 8015904:	dd01      	ble.n	801590a <RegionAS923ChannelAdd+0x8a>
    {
        drInvalid = true;
 8015906:	2301      	movs	r3, #1
 8015908:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801590a:	7bbb      	ldrb	r3, [r7, #14]
 801590c:	f083 0301 	eor.w	r3, r3, #1
 8015910:	b2db      	uxtb	r3, r3
 8015912:	2b00      	cmp	r3, #0
 8015914:	d00d      	beq.n	8015932 <RegionAS923ChannelAdd+0xb2>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	4618      	mov	r0, r3
 801591e:	f7fe ff03 	bl	8014728 <VerifyRfFreq>
 8015922:	4603      	mov	r3, r0
 8015924:	f083 0301 	eor.w	r3, r3, #1
 8015928:	b2db      	uxtb	r3, r3
 801592a:	2b00      	cmp	r3, #0
 801592c:	d001      	beq.n	8015932 <RegionAS923ChannelAdd+0xb2>
        {
            freqInvalid = true;
 801592e:	2301      	movs	r3, #1
 8015930:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8015932:	7bfb      	ldrb	r3, [r7, #15]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d004      	beq.n	8015942 <RegionAS923ChannelAdd+0xc2>
 8015938:	7bbb      	ldrb	r3, [r7, #14]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d001      	beq.n	8015942 <RegionAS923ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801593e:	2306      	movs	r3, #6
 8015940:	e034      	b.n	80159ac <RegionAS923ChannelAdd+0x12c>
    }
    if( drInvalid == true )
 8015942:	7bfb      	ldrb	r3, [r7, #15]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d001      	beq.n	801594c <RegionAS923ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8015948:	2305      	movs	r3, #5
 801594a:	e02f      	b.n	80159ac <RegionAS923ChannelAdd+0x12c>
    }
    if( freqInvalid == true )
 801594c:	7bbb      	ldrb	r3, [r7, #14]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d001      	beq.n	8015956 <RegionAS923ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8015952:	2304      	movs	r3, #4
 8015954:	e02a      	b.n	80159ac <RegionAS923ChannelAdd+0x12c>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8015956:	4b17      	ldr	r3, [pc, #92]	@ (80159b4 <RegionAS923ChannelAdd+0x134>)
 8015958:	6819      	ldr	r1, [r3, #0]
 801595a:	7b7a      	ldrb	r2, [r7, #13]
 801595c:	4613      	mov	r3, r2
 801595e:	005b      	lsls	r3, r3, #1
 8015960:	4413      	add	r3, r2
 8015962:	009b      	lsls	r3, r3, #2
 8015964:	18c8      	adds	r0, r1, r3
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	220c      	movs	r2, #12
 801596c:	4619      	mov	r1, r3
 801596e:	f001 f850 	bl	8016a12 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 8015972:	4b10      	ldr	r3, [pc, #64]	@ (80159b4 <RegionAS923ChannelAdd+0x134>)
 8015974:	6819      	ldr	r1, [r3, #0]
 8015976:	7b7a      	ldrb	r2, [r7, #13]
 8015978:	4613      	mov	r3, r2
 801597a:	005b      	lsls	r3, r3, #1
 801597c:	4413      	add	r3, r2
 801597e:	009b      	lsls	r3, r3, #2
 8015980:	440b      	add	r3, r1
 8015982:	3309      	adds	r3, #9
 8015984:	2200      	movs	r2, #0
 8015986:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8015988:	4b0a      	ldr	r3, [pc, #40]	@ (80159b4 <RegionAS923ChannelAdd+0x134>)
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	@ 0x480
 8015990:	b21a      	sxth	r2, r3
 8015992:	7b7b      	ldrb	r3, [r7, #13]
 8015994:	2101      	movs	r1, #1
 8015996:	fa01 f303 	lsl.w	r3, r1, r3
 801599a:	b21b      	sxth	r3, r3
 801599c:	4313      	orrs	r3, r2
 801599e:	b21a      	sxth	r2, r3
 80159a0:	4b04      	ldr	r3, [pc, #16]	@ (80159b4 <RegionAS923ChannelAdd+0x134>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	b292      	uxth	r2, r2
 80159a6:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    return LORAMAC_STATUS_OK;
 80159aa:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 80159ac:	4618      	mov	r0, r3
 80159ae:	3710      	adds	r7, #16
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd80      	pop	{r7, pc}
 80159b4:	200015ac 	.word	0x200015ac

080159b8 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b086      	sub	sp, #24
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	781b      	ldrb	r3, [r3, #0]
 80159c4:	75fb      	strb	r3, [r7, #23]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 80159c6:	7dfb      	ldrb	r3, [r7, #23]
 80159c8:	2b01      	cmp	r3, #1
 80159ca:	d801      	bhi.n	80159d0 <RegionAS923ChannelsRemove+0x18>
    {
        return false;
 80159cc:	2300      	movs	r3, #0
 80159ce:	e016      	b.n	80159fe <RegionAS923ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80159d0:	4b0d      	ldr	r3, [pc, #52]	@ (8015a08 <RegionAS923ChannelsRemove+0x50>)
 80159d2:	6819      	ldr	r1, [r3, #0]
 80159d4:	7dfa      	ldrb	r2, [r7, #23]
 80159d6:	4613      	mov	r3, r2
 80159d8:	005b      	lsls	r3, r3, #1
 80159da:	4413      	add	r3, r2
 80159dc:	009b      	lsls	r3, r3, #2
 80159de:	440b      	add	r3, r1
 80159e0:	461a      	mov	r2, r3
 80159e2:	2300      	movs	r3, #0
 80159e4:	6013      	str	r3, [r2, #0]
 80159e6:	6053      	str	r3, [r2, #4]
 80159e8:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 80159ea:	4b07      	ldr	r3, [pc, #28]	@ (8015a08 <RegionAS923ChannelsRemove+0x50>)
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80159f2:	7df9      	ldrb	r1, [r7, #23]
 80159f4:	2210      	movs	r2, #16
 80159f6:	4618      	mov	r0, r3
 80159f8:	f000 fa5c 	bl	8015eb4 <RegionCommonChanDisable>
 80159fc:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_AS923 */
}
 80159fe:	4618      	mov	r0, r3
 8015a00:	3718      	adds	r7, #24
 8015a02:	46bd      	mov	sp, r7
 8015a04:	bd80      	pop	{r7, pc}
 8015a06:	bf00      	nop
 8015a08:	200015ac 	.word	0x200015ac

08015a0c <RegionAS923SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionAS923SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8015a0c:	b590      	push	{r4, r7, lr}
 8015a0e:	b085      	sub	sp, #20
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015a1a:	4b20      	ldr	r3, [pc, #128]	@ (8015a9c <RegionAS923SetContinuousWave+0x90>)
 8015a1c:	681a      	ldr	r2, [r3, #0]
 8015a1e:	4b20      	ldr	r3, [pc, #128]	@ (8015aa0 <RegionAS923SetContinuousWave+0x94>)
 8015a20:	6819      	ldr	r1, [r3, #0]
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	781b      	ldrb	r3, [r3, #0]
 8015a26:	461c      	mov	r4, r3
 8015a28:	4623      	mov	r3, r4
 8015a2a:	005b      	lsls	r3, r3, #1
 8015a2c:	4423      	add	r3, r4
 8015a2e:	009b      	lsls	r3, r3, #2
 8015a30:	440b      	add	r3, r1
 8015a32:	3309      	adds	r3, #9
 8015a34:	781b      	ldrb	r3, [r3, #0]
 8015a36:	4619      	mov	r1, r3
 8015a38:	460b      	mov	r3, r1
 8015a3a:	005b      	lsls	r3, r3, #1
 8015a3c:	440b      	add	r3, r1
 8015a3e:	00db      	lsls	r3, r3, #3
 8015a40:	4413      	add	r3, r2
 8015a42:	3302      	adds	r3, #2
 8015a44:	f993 3000 	ldrsb.w	r3, [r3]
 8015a48:	4619      	mov	r1, r3
 8015a4a:	f000 ff1e 	bl	801688a <RegionCommonLimitTxPower>
 8015a4e:	4603      	mov	r3, r0
 8015a50:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8015a52:	2300      	movs	r3, #0
 8015a54:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8015a56:	4b12      	ldr	r3, [pc, #72]	@ (8015aa0 <RegionAS923SetContinuousWave+0x94>)
 8015a58:	681a      	ldr	r2, [r3, #0]
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	4619      	mov	r1, r3
 8015a60:	460b      	mov	r3, r1
 8015a62:	005b      	lsls	r3, r3, #1
 8015a64:	440b      	add	r3, r1
 8015a66:	009b      	lsls	r3, r3, #2
 8015a68:	4413      	add	r3, r2
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	6859      	ldr	r1, [r3, #4]
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	689a      	ldr	r2, [r3, #8]
 8015a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f000 fd76 	bl	801656c <RegionCommonComputeTxPower>
 8015a80:	4603      	mov	r3, r0
 8015a82:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8015a84:	4b07      	ldr	r3, [pc, #28]	@ (8015aa4 <RegionAS923SetContinuousWave+0x98>)
 8015a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015a88:	687a      	ldr	r2, [r7, #4]
 8015a8a:	8992      	ldrh	r2, [r2, #12]
 8015a8c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8015a90:	68b8      	ldr	r0, [r7, #8]
 8015a92:	4798      	blx	r3
#endif /* REGION_AS923 */
}
 8015a94:	bf00      	nop
 8015a96:	3714      	adds	r7, #20
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd90      	pop	{r4, r7, pc}
 8015a9c:	200015a8 	.word	0x200015a8
 8015aa0:	200015ac 	.word	0x200015ac
 8015aa4:	0801eb10 	.word	0x0801eb10

08015aa8 <RegionAS923ApplyDrOffset>:

uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015aa8:	b480      	push	{r7}
 8015aaa:	b085      	sub	sp, #20
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	4603      	mov	r3, r0
 8015ab0:	71fb      	strb	r3, [r7, #7]
 8015ab2:	460b      	mov	r3, r1
 8015ab4:	71bb      	strb	r3, [r7, #6]
 8015ab6:	4613      	mov	r3, r2
 8015ab8:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AS923 )
    // Initialize minDr for a downlink dwell time configuration of 0
    int8_t minDr = DR_0;
 8015aba:	2300      	movs	r3, #0
 8015abc:	73fb      	strb	r3, [r7, #15]

    // Update the minDR for a downlink dwell time configuration of 1
    if( downlinkDwellTime == 1 )
 8015abe:	79fb      	ldrb	r3, [r7, #7]
 8015ac0:	2b01      	cmp	r3, #1
 8015ac2:	d101      	bne.n	8015ac8 <RegionAS923ApplyDrOffset+0x20>
    {
        minDr = AS923_DWELL_LIMIT_DATARATE;
 8015ac4:	2302      	movs	r3, #2
 8015ac6:	73fb      	strb	r3, [r7, #15]
    }

    // Apply offset formula
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 8015ac8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015acc:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8015ad0:	4908      	ldr	r1, [pc, #32]	@ (8015af4 <RegionAS923ApplyDrOffset+0x4c>)
 8015ad2:	568a      	ldrsb	r2, [r1, r2]
 8015ad4:	1a9a      	subs	r2, r3, r2
 8015ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ada:	4293      	cmp	r3, r2
 8015adc:	bfb8      	it	lt
 8015ade:	4613      	movlt	r3, r2
 8015ae0:	2b05      	cmp	r3, #5
 8015ae2:	bfa8      	it	ge
 8015ae4:	2305      	movge	r3, #5
 8015ae6:	b2db      	uxtb	r3, r3
#else
    return 0;
#endif /* REGION_AS923 */

}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	3714      	adds	r7, #20
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bc80      	pop	{r7}
 8015af0:	4770      	bx	lr
 8015af2:	bf00      	nop
 8015af4:	0801eb08 	.word	0x0801eb08

08015af8 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015af8:	b480      	push	{r7}
 8015afa:	b087      	sub	sp, #28
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	60f8      	str	r0, [r7, #12]
 8015b00:	4608      	mov	r0, r1
 8015b02:	4639      	mov	r1, r7
 8015b04:	e881 000c 	stmia.w	r1, {r2, r3}
 8015b08:	4603      	mov	r3, r0
 8015b0a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	881b      	ldrh	r3, [r3, #0]
 8015b10:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8015b12:	7afb      	ldrb	r3, [r7, #11]
 8015b14:	f083 0301 	eor.w	r3, r3, #1
 8015b18:	b2db      	uxtb	r3, r3
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d01b      	beq.n	8015b56 <GetDutyCycle+0x5e>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
        uint16_t joinDutyCycle = BACKOFF_DC_1_HOUR;
#else
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015b1e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8015b22:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8015b24:	683b      	ldr	r3, [r7, #0]
 8015b26:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8015b2a:	d202      	bcs.n	8015b32 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8015b2c:	2364      	movs	r3, #100	@ 0x64
 8015b2e:	82bb      	strh	r3, [r7, #20]
 8015b30:	e00b      	b.n	8015b4a <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8015b32:	683b      	ldr	r3, [r7, #0]
 8015b34:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8015b38:	4293      	cmp	r3, r2
 8015b3a:	d803      	bhi.n	8015b44 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8015b3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015b40:	82bb      	strh	r3, [r7, #20]
 8015b42:	e002      	b.n	8015b4a <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015b44:	f242 7310 	movw	r3, #10000	@ 0x2710
 8015b48:	82bb      	strh	r3, [r7, #20]
        }
#endif
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8015b4a:	8aba      	ldrh	r2, [r7, #20]
 8015b4c:	8afb      	ldrh	r3, [r7, #22]
 8015b4e:	4293      	cmp	r3, r2
 8015b50:	bf38      	it	cc
 8015b52:	4613      	movcc	r3, r2
 8015b54:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8015b56:	8afb      	ldrh	r3, [r7, #22]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d101      	bne.n	8015b60 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8015b5c:	2301      	movs	r3, #1
 8015b5e:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8015b60:	8afb      	ldrh	r3, [r7, #22]
}
 8015b62:	4618      	mov	r0, r3
 8015b64:	371c      	adds	r7, #28
 8015b66:	46bd      	mov	sp, r7
 8015b68:	bc80      	pop	{r7}
 8015b6a:	4770      	bx	lr

08015b6c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b08e      	sub	sp, #56	@ 0x38
 8015b70:	af02      	add	r7, sp, #8
 8015b72:	60f8      	str	r0, [r7, #12]
 8015b74:	4608      	mov	r0, r1
 8015b76:	4639      	mov	r1, r7
 8015b78:	e881 000c 	stmia.w	r1, {r2, r3}
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	881b      	ldrh	r3, [r3, #0]
 8015b84:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015b86:	4b4b      	ldr	r3, [pc, #300]	@ (8015cb4 <SetMaxTimeCredits+0x148>)
 8015b88:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015b8a:	7af9      	ldrb	r1, [r7, #11]
 8015b8c:	463b      	mov	r3, r7
 8015b8e:	cb0c      	ldmia	r3, {r2, r3}
 8015b90:	68f8      	ldr	r0, [r7, #12]
 8015b92:	f7ff ffb1 	bl	8015af8 <GetDutyCycle>
 8015b96:	4603      	mov	r3, r0
 8015b98:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 8015b9a:	7afb      	ldrb	r3, [r7, #11]
 8015b9c:	f083 0301 	eor.w	r3, r3, #1
 8015ba0:	b2db      	uxtb	r3, r3
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d06d      	beq.n	8015c82 <SetMaxTimeCredits+0x116>
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD_JOIN_BACKOFF_24H;
        }
#else
    	TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8015ba6:	463b      	mov	r3, r7
 8015ba8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015bac:	f004 fbd6 	bl	801a35c <SysTimeToMs>
 8015bb0:	6278      	str	r0, [r7, #36]	@ 0x24
    	SysTime_t timeDiff = { 0 };
 8015bb2:	f107 0314 	add.w	r3, r7, #20
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	601a      	str	r2, [r3, #0]
 8015bba:	605a      	str	r2, [r3, #4]
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015bbc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015bbe:	2b64      	cmp	r3, #100	@ 0x64
 8015bc0:	d105      	bne.n	8015bce <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015bc2:	4b3c      	ldr	r3, [pc, #240]	@ (8015cb4 <SetMaxTimeCredits+0x148>)
 8015bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015bca:	609a      	str	r2, [r3, #8]
 8015bcc:	e00b      	b.n	8015be6 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015bce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015bd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015bd4:	d105      	bne.n	8015be2 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8015bd6:	4b38      	ldr	r3, [pc, #224]	@ (8015cb8 <SetMaxTimeCredits+0x14c>)
 8015bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015bde:	609a      	str	r2, [r3, #8]
 8015be0:	e001      	b.n	8015be6 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8015be2:	4b36      	ldr	r3, [pc, #216]	@ (8015cbc <SetMaxTimeCredits+0x150>)
 8015be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	689a      	ldr	r2, [r3, #8]
 8015bea:	f107 031c 	add.w	r3, r7, #28
 8015bee:	4611      	mov	r1, r2
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f004 fbdb 	bl	801a3ac <SysTimeFromMs>
 8015bf6:	f107 0014 	add.w	r0, r7, #20
 8015bfa:	6a3b      	ldr	r3, [r7, #32]
 8015bfc:	9300      	str	r3, [sp, #0]
 8015bfe:	69fb      	ldr	r3, [r7, #28]
 8015c00:	463a      	mov	r2, r7
 8015c02:	ca06      	ldmia	r2, {r1, r2}
 8015c04:	f004 faeb 	bl	801a1de <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015c08:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8015c0c:	f083 0301 	eor.w	r3, r3, #1
 8015c10:	b2db      	uxtb	r3, r3
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d006      	beq.n	8015c24 <SetMaxTimeCredits+0xb8>
 8015c16:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8015c1a:	f083 0301 	eor.w	r3, r3, #1
 8015c1e:	b2db      	uxtb	r3, r3
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d108      	bne.n	8015c36 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015c28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015c2a:	429a      	cmp	r2, r3
 8015c2c:	d103      	bne.n	8015c36 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8015c2e:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8015c30:	4a23      	ldr	r2, [pc, #140]	@ (8015cc0 <SetMaxTimeCredits+0x154>)
 8015c32:	4293      	cmp	r3, r2
 8015c34:	d92f      	bls.n	8015c96 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015c3a:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015c3c:	683b      	ldr	r3, [r7, #0]
 8015c3e:	4a21      	ldr	r2, [pc, #132]	@ (8015cc4 <SetMaxTimeCredits+0x158>)
 8015c40:	4293      	cmp	r3, r2
 8015c42:	d928      	bls.n	8015c96 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8015c44:	683b      	ldr	r3, [r7, #0]
 8015c46:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8015c4a:	3b30      	subs	r3, #48	@ 0x30
 8015c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8015cc8 <SetMaxTimeCredits+0x15c>)
 8015c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8015c52:	0c1b      	lsrs	r3, r3, #16
 8015c54:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8015c56:	697b      	ldr	r3, [r7, #20]
 8015c58:	4a1c      	ldr	r2, [pc, #112]	@ (8015ccc <SetMaxTimeCredits+0x160>)
 8015c5a:	fb02 f303 	mul.w	r3, r2, r3
 8015c5e:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015c60:	697b      	ldr	r3, [r7, #20]
 8015c62:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 8015c66:	3330      	adds	r3, #48	@ 0x30
 8015c68:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8015c6e:	f107 0314 	add.w	r3, r7, #20
 8015c72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015c76:	f004 fb71 	bl	801a35c <SysTimeToMs>
 8015c7a:	4602      	mov	r2, r0
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	609a      	str	r2, [r3, #8]
 8015c80:	e009      	b.n	8015c96 <SetMaxTimeCredits+0x12a>
#endif

    }
    else
    {
        if( dutyCycleEnabled == false )
 8015c82:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8015c86:	f083 0301 	eor.w	r3, r3, #1
 8015c8a:	b2db      	uxtb	r3, r3
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d002      	beq.n	8015c96 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015c94:	60da      	str	r2, [r3, #12]
        }
    }

#if (defined( REGION_VERSION ) && (( REGION_VERSION == 0x01010003 ) || ( REGION_VERSION == 0x02010001 )))
    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	685b      	ldr	r3, [r3, #4]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d102      	bne.n	8015ca4 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015ca2:	60da      	str	r2, [r3, #12]
    }
#endif 

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015ca8:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8015caa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 8015cac:	4618      	mov	r0, r3
 8015cae:	3730      	adds	r7, #48	@ 0x30
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bd80      	pop	{r7, pc}
 8015cb4:	001b7740 	.word	0x001b7740
 8015cb8:	0112a880 	.word	0x0112a880
 8015cbc:	02932e00 	.word	0x02932e00
 8015cc0:	0001517f 	.word	0x0001517f
 8015cc4:	0001ec2f 	.word	0x0001ec2f
 8015cc8:	c22e4507 	.word	0xc22e4507
 8015ccc:	00015180 	.word	0x00015180

08015cd0 <UpdateTimeCredits>:
}
#else
static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b086      	sub	sp, #24
 8015cd4:	af02      	add	r7, sp, #8
 8015cd6:	6078      	str	r0, [r7, #4]
 8015cd8:	4608      	mov	r0, r1
 8015cda:	4611      	mov	r1, r2
 8015cdc:	461a      	mov	r2, r3
 8015cde:	4603      	mov	r3, r0
 8015ce0:	70fb      	strb	r3, [r7, #3]
 8015ce2:	460b      	mov	r3, r1
 8015ce4:	70bb      	strb	r3, [r7, #2]
 8015ce6:	4613      	mov	r3, r2
 8015ce8:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8015cea:	78f9      	ldrb	r1, [r7, #3]
 8015cec:	787b      	ldrb	r3, [r7, #1]
 8015cee:	9301      	str	r3, [sp, #4]
 8015cf0:	78bb      	ldrb	r3, [r7, #2]
 8015cf2:	9300      	str	r3, [sp, #0]
 8015cf4:	f107 0318 	add.w	r3, r7, #24
 8015cf8:	cb0c      	ldmia	r3, {r2, r3}
 8015cfa:	6878      	ldr	r0, [r7, #4]
 8015cfc:	f7ff ff36 	bl	8015b6c <SetMaxTimeCredits>
 8015d00:	4603      	mov	r3, r0
 8015d02:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8015d04:	78fb      	ldrb	r3, [r7, #3]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d00a      	beq.n	8015d20 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	685b      	ldr	r3, [r3, #4]
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f005 f95e 	bl	801afd0 <UTIL_TIMER_GetElapsedTime>
 8015d14:	4602      	mov	r2, r0
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	68db      	ldr	r3, [r3, #12]
 8015d1a:	441a      	add	r2, r3
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	68da      	ldr	r2, [r3, #12]
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	691b      	ldr	r3, [r3, #16]
 8015d28:	429a      	cmp	r2, r3
 8015d2a:	d903      	bls.n	8015d34 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	691a      	ldr	r2, [r3, #16]
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	6a3a      	ldr	r2, [r7, #32]
 8015d38:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8015d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	3710      	adds	r7, #16
 8015d40:	46bd      	mov	sp, r7
 8015d42:	bd80      	pop	{r7, pc}

08015d44 <CountChannels>:
#endif

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8015d44:	b480      	push	{r7}
 8015d46:	b085      	sub	sp, #20
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	460a      	mov	r2, r1
 8015d4e:	80fb      	strh	r3, [r7, #6]
 8015d50:	4613      	mov	r3, r2
 8015d52:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8015d54:	2300      	movs	r3, #0
 8015d56:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8015d58:	2300      	movs	r3, #0
 8015d5a:	73bb      	strb	r3, [r7, #14]
 8015d5c:	e011      	b.n	8015d82 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015d5e:	88fa      	ldrh	r2, [r7, #6]
 8015d60:	7bbb      	ldrb	r3, [r7, #14]
 8015d62:	2101      	movs	r1, #1
 8015d64:	fa01 f303 	lsl.w	r3, r1, r3
 8015d68:	401a      	ands	r2, r3
 8015d6a:	7bbb      	ldrb	r3, [r7, #14]
 8015d6c:	2101      	movs	r1, #1
 8015d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d102      	bne.n	8015d7c <CountChannels+0x38>
        {
            nbActiveBits++;
 8015d76:	7bfb      	ldrb	r3, [r7, #15]
 8015d78:	3301      	adds	r3, #1
 8015d7a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8015d7c:	7bbb      	ldrb	r3, [r7, #14]
 8015d7e:	3301      	adds	r3, #1
 8015d80:	73bb      	strb	r3, [r7, #14]
 8015d82:	7bba      	ldrb	r2, [r7, #14]
 8015d84:	797b      	ldrb	r3, [r7, #5]
 8015d86:	429a      	cmp	r2, r3
 8015d88:	d3e9      	bcc.n	8015d5e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8015d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	3714      	adds	r7, #20
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bc80      	pop	{r7}
 8015d94:	4770      	bx	lr

08015d96 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8015d96:	b580      	push	{r7, lr}
 8015d98:	b084      	sub	sp, #16
 8015d9a:	af00      	add	r7, sp, #0
 8015d9c:	6039      	str	r1, [r7, #0]
 8015d9e:	4611      	mov	r1, r2
 8015da0:	461a      	mov	r2, r3
 8015da2:	4603      	mov	r3, r0
 8015da4:	71fb      	strb	r3, [r7, #7]
 8015da6:	460b      	mov	r3, r1
 8015da8:	71bb      	strb	r3, [r7, #6]
 8015daa:	4613      	mov	r3, r2
 8015dac:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8015dae:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8015db2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015db6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015dba:	4618      	mov	r0, r3
 8015dbc:	f000 f85d 	bl	8015e7a <RegionCommonValueInRange>
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d101      	bne.n	8015dca <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	e053      	b.n	8015e72 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015dca:	2300      	movs	r3, #0
 8015dcc:	73fb      	strb	r3, [r7, #15]
 8015dce:	2300      	movs	r3, #0
 8015dd0:	73bb      	strb	r3, [r7, #14]
 8015dd2:	e049      	b.n	8015e68 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	737b      	strb	r3, [r7, #13]
 8015dd8:	e03d      	b.n	8015e56 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015dda:	7bbb      	ldrb	r3, [r7, #14]
 8015ddc:	005b      	lsls	r3, r3, #1
 8015dde:	683a      	ldr	r2, [r7, #0]
 8015de0:	4413      	add	r3, r2
 8015de2:	881b      	ldrh	r3, [r3, #0]
 8015de4:	461a      	mov	r2, r3
 8015de6:	7b7b      	ldrb	r3, [r7, #13]
 8015de8:	fa42 f303 	asr.w	r3, r2, r3
 8015dec:	f003 0301 	and.w	r3, r3, #1
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d02d      	beq.n	8015e50 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015df4:	7bfa      	ldrb	r2, [r7, #15]
 8015df6:	7b7b      	ldrb	r3, [r7, #13]
 8015df8:	4413      	add	r3, r2
 8015dfa:	461a      	mov	r2, r3
 8015dfc:	4613      	mov	r3, r2
 8015dfe:	005b      	lsls	r3, r3, #1
 8015e00:	4413      	add	r3, r2
 8015e02:	009b      	lsls	r3, r3, #2
 8015e04:	461a      	mov	r2, r3
 8015e06:	69fb      	ldr	r3, [r7, #28]
 8015e08:	4413      	add	r3, r2
 8015e0a:	7a1b      	ldrb	r3, [r3, #8]
 8015e0c:	f343 0303 	sbfx	r3, r3, #0, #4
 8015e10:	b25b      	sxtb	r3, r3
 8015e12:	f003 030f 	and.w	r3, r3, #15
 8015e16:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015e18:	7bfa      	ldrb	r2, [r7, #15]
 8015e1a:	7b7b      	ldrb	r3, [r7, #13]
 8015e1c:	4413      	add	r3, r2
 8015e1e:	461a      	mov	r2, r3
 8015e20:	4613      	mov	r3, r2
 8015e22:	005b      	lsls	r3, r3, #1
 8015e24:	4413      	add	r3, r2
 8015e26:	009b      	lsls	r3, r3, #2
 8015e28:	461a      	mov	r2, r3
 8015e2a:	69fb      	ldr	r3, [r7, #28]
 8015e2c:	4413      	add	r3, r2
 8015e2e:	7a1b      	ldrb	r3, [r3, #8]
 8015e30:	f343 1303 	sbfx	r3, r3, #4, #4
 8015e34:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015e36:	f003 030f 	and.w	r3, r3, #15
 8015e3a:	b25a      	sxtb	r2, r3
 8015e3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015e40:	4618      	mov	r0, r3
 8015e42:	f000 f81a 	bl	8015e7a <RegionCommonValueInRange>
 8015e46:	4603      	mov	r3, r0
 8015e48:	2b01      	cmp	r3, #1
 8015e4a:	d101      	bne.n	8015e50 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015e4c:	2301      	movs	r3, #1
 8015e4e:	e010      	b.n	8015e72 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8015e50:	7b7b      	ldrb	r3, [r7, #13]
 8015e52:	3301      	adds	r3, #1
 8015e54:	737b      	strb	r3, [r7, #13]
 8015e56:	7b7b      	ldrb	r3, [r7, #13]
 8015e58:	2b0f      	cmp	r3, #15
 8015e5a:	d9be      	bls.n	8015dda <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015e5c:	7bfb      	ldrb	r3, [r7, #15]
 8015e5e:	3310      	adds	r3, #16
 8015e60:	73fb      	strb	r3, [r7, #15]
 8015e62:	7bbb      	ldrb	r3, [r7, #14]
 8015e64:	3301      	adds	r3, #1
 8015e66:	73bb      	strb	r3, [r7, #14]
 8015e68:	7bfa      	ldrb	r2, [r7, #15]
 8015e6a:	79fb      	ldrb	r3, [r7, #7]
 8015e6c:	429a      	cmp	r2, r3
 8015e6e:	d3b1      	bcc.n	8015dd4 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8015e70:	2300      	movs	r3, #0
}
 8015e72:	4618      	mov	r0, r3
 8015e74:	3710      	adds	r7, #16
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}

08015e7a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015e7a:	b480      	push	{r7}
 8015e7c:	b083      	sub	sp, #12
 8015e7e:	af00      	add	r7, sp, #0
 8015e80:	4603      	mov	r3, r0
 8015e82:	71fb      	strb	r3, [r7, #7]
 8015e84:	460b      	mov	r3, r1
 8015e86:	71bb      	strb	r3, [r7, #6]
 8015e88:	4613      	mov	r3, r2
 8015e8a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015e8c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015e90:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015e94:	429a      	cmp	r2, r3
 8015e96:	db07      	blt.n	8015ea8 <RegionCommonValueInRange+0x2e>
 8015e98:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015e9c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	dc01      	bgt.n	8015ea8 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015ea4:	2301      	movs	r3, #1
 8015ea6:	e000      	b.n	8015eaa <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015ea8:	2300      	movs	r3, #0
}
 8015eaa:	4618      	mov	r0, r3
 8015eac:	370c      	adds	r7, #12
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bc80      	pop	{r7}
 8015eb2:	4770      	bx	lr

08015eb4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015eb4:	b480      	push	{r7}
 8015eb6:	b085      	sub	sp, #20
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
 8015ebc:	460b      	mov	r3, r1
 8015ebe:	70fb      	strb	r3, [r7, #3]
 8015ec0:	4613      	mov	r3, r2
 8015ec2:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015ec4:	78fb      	ldrb	r3, [r7, #3]
 8015ec6:	091b      	lsrs	r3, r3, #4
 8015ec8:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015eca:	78bb      	ldrb	r3, [r7, #2]
 8015ecc:	091b      	lsrs	r3, r3, #4
 8015ece:	b2db      	uxtb	r3, r3
 8015ed0:	7bfa      	ldrb	r2, [r7, #15]
 8015ed2:	429a      	cmp	r2, r3
 8015ed4:	d803      	bhi.n	8015ede <RegionCommonChanDisable+0x2a>
 8015ed6:	78fa      	ldrb	r2, [r7, #3]
 8015ed8:	78bb      	ldrb	r3, [r7, #2]
 8015eda:	429a      	cmp	r2, r3
 8015edc:	d301      	bcc.n	8015ee2 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015ede:	2300      	movs	r3, #0
 8015ee0:	e017      	b.n	8015f12 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015ee2:	7bfb      	ldrb	r3, [r7, #15]
 8015ee4:	005b      	lsls	r3, r3, #1
 8015ee6:	687a      	ldr	r2, [r7, #4]
 8015ee8:	4413      	add	r3, r2
 8015eea:	881b      	ldrh	r3, [r3, #0]
 8015eec:	b21a      	sxth	r2, r3
 8015eee:	78fb      	ldrb	r3, [r7, #3]
 8015ef0:	f003 030f 	and.w	r3, r3, #15
 8015ef4:	2101      	movs	r1, #1
 8015ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8015efa:	b21b      	sxth	r3, r3
 8015efc:	43db      	mvns	r3, r3
 8015efe:	b21b      	sxth	r3, r3
 8015f00:	4013      	ands	r3, r2
 8015f02:	b219      	sxth	r1, r3
 8015f04:	7bfb      	ldrb	r3, [r7, #15]
 8015f06:	005b      	lsls	r3, r3, #1
 8015f08:	687a      	ldr	r2, [r7, #4]
 8015f0a:	4413      	add	r3, r2
 8015f0c:	b28a      	uxth	r2, r1
 8015f0e:	801a      	strh	r2, [r3, #0]

    return true;
 8015f10:	2301      	movs	r3, #1
}
 8015f12:	4618      	mov	r0, r3
 8015f14:	3714      	adds	r7, #20
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bc80      	pop	{r7}
 8015f1a:	4770      	bx	lr

08015f1c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b084      	sub	sp, #16
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
 8015f24:	460b      	mov	r3, r1
 8015f26:	70fb      	strb	r3, [r7, #3]
 8015f28:	4613      	mov	r3, r2
 8015f2a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d101      	bne.n	8015f3a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015f36:	2300      	movs	r3, #0
 8015f38:	e018      	b.n	8015f6c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015f3a:	78fb      	ldrb	r3, [r7, #3]
 8015f3c:	73bb      	strb	r3, [r7, #14]
 8015f3e:	e010      	b.n	8015f62 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015f40:	7bbb      	ldrb	r3, [r7, #14]
 8015f42:	005b      	lsls	r3, r3, #1
 8015f44:	687a      	ldr	r2, [r7, #4]
 8015f46:	4413      	add	r3, r2
 8015f48:	881b      	ldrh	r3, [r3, #0]
 8015f4a:	2110      	movs	r1, #16
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7ff fef9 	bl	8015d44 <CountChannels>
 8015f52:	4603      	mov	r3, r0
 8015f54:	461a      	mov	r2, r3
 8015f56:	7bfb      	ldrb	r3, [r7, #15]
 8015f58:	4413      	add	r3, r2
 8015f5a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015f5c:	7bbb      	ldrb	r3, [r7, #14]
 8015f5e:	3301      	adds	r3, #1
 8015f60:	73bb      	strb	r3, [r7, #14]
 8015f62:	7bba      	ldrb	r2, [r7, #14]
 8015f64:	78bb      	ldrb	r3, [r7, #2]
 8015f66:	429a      	cmp	r2, r3
 8015f68:	d3ea      	bcc.n	8015f40 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	3710      	adds	r7, #16
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}

08015f74 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015f74:	b480      	push	{r7}
 8015f76:	b087      	sub	sp, #28
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	60f8      	str	r0, [r7, #12]
 8015f7c:	60b9      	str	r1, [r7, #8]
 8015f7e:	4613      	mov	r3, r2
 8015f80:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d016      	beq.n	8015fb6 <RegionCommonChanMaskCopy+0x42>
 8015f88:	68bb      	ldr	r3, [r7, #8]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d013      	beq.n	8015fb6 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015f8e:	2300      	movs	r3, #0
 8015f90:	75fb      	strb	r3, [r7, #23]
 8015f92:	e00c      	b.n	8015fae <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015f94:	7dfb      	ldrb	r3, [r7, #23]
 8015f96:	005b      	lsls	r3, r3, #1
 8015f98:	68ba      	ldr	r2, [r7, #8]
 8015f9a:	441a      	add	r2, r3
 8015f9c:	7dfb      	ldrb	r3, [r7, #23]
 8015f9e:	005b      	lsls	r3, r3, #1
 8015fa0:	68f9      	ldr	r1, [r7, #12]
 8015fa2:	440b      	add	r3, r1
 8015fa4:	8812      	ldrh	r2, [r2, #0]
 8015fa6:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015fa8:	7dfb      	ldrb	r3, [r7, #23]
 8015faa:	3301      	adds	r3, #1
 8015fac:	75fb      	strb	r3, [r7, #23]
 8015fae:	7dfa      	ldrb	r2, [r7, #23]
 8015fb0:	79fb      	ldrb	r3, [r7, #7]
 8015fb2:	429a      	cmp	r2, r3
 8015fb4:	d3ee      	bcc.n	8015f94 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015fb6:	bf00      	nop
 8015fb8:	371c      	adds	r7, #28
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bc80      	pop	{r7}
 8015fbe:	4770      	bx	lr

08015fc0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015fc0:	b082      	sub	sp, #8
 8015fc2:	b580      	push	{r7, lr}
 8015fc4:	b086      	sub	sp, #24
 8015fc6:	af00      	add	r7, sp, #0
 8015fc8:	60f8      	str	r0, [r7, #12]
 8015fca:	60b9      	str	r1, [r7, #8]
 8015fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8015fce:	4613      	mov	r3, r2
 8015fd0:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015fd2:	79f9      	ldrb	r1, [r7, #7]
 8015fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015fd8:	cb0c      	ldmia	r3, {r2, r3}
 8015fda:	68f8      	ldr	r0, [r7, #12]
 8015fdc:	f7ff fd8c 	bl	8015af8 <GetDutyCycle>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	68da      	ldr	r2, [r3, #12]
 8015fe8:	8afb      	ldrh	r3, [r7, #22]
 8015fea:	68b9      	ldr	r1, [r7, #8]
 8015fec:	fb01 f303 	mul.w	r3, r1, r3
 8015ff0:	429a      	cmp	r2, r3
 8015ff2:	d909      	bls.n	8016008 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	68da      	ldr	r2, [r3, #12]
 8015ff8:	8afb      	ldrh	r3, [r7, #22]
 8015ffa:	68b9      	ldr	r1, [r7, #8]
 8015ffc:	fb01 f303 	mul.w	r3, r1, r3
 8016000:	1ad2      	subs	r2, r2, r3
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016006:	e002      	b.n	801600e <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	2200      	movs	r2, #0
 801600c:	60da      	str	r2, [r3, #12]
}
 801600e:	bf00      	nop
 8016010:	3718      	adds	r7, #24
 8016012:	46bd      	mov	sp, r7
 8016014:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016018:	b002      	add	sp, #8
 801601a:	4770      	bx	lr

0801601c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801601c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801601e:	b08f      	sub	sp, #60	@ 0x3c
 8016020:	af04      	add	r7, sp, #16
 8016022:	6039      	str	r1, [r7, #0]
 8016024:	4611      	mov	r1, r2
 8016026:	461a      	mov	r2, r3
 8016028:	4603      	mov	r3, r0
 801602a:	71fb      	strb	r3, [r7, #7]
 801602c:	460b      	mov	r3, r1
 801602e:	71bb      	strb	r3, [r7, #6]
 8016030:	4613      	mov	r3, r2
 8016032:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016034:	f04f 33ff 	mov.w	r3, #4294967295
 8016038:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801603a:	f004 ffb7 	bl	801afac <UTIL_TIMER_GetCurrentTime>
 801603e:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8016040:	2300      	movs	r3, #0
 8016042:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8016044:	2301      	movs	r3, #1
 8016046:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8016048:	2300      	movs	r3, #0
 801604a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801604e:	2300      	movs	r3, #0
 8016050:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016054:	e0ba      	b.n	80161cc <RegionCommonUpdateBandTimeOff+0x1b0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime, elapsedTime );
#else
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8016056:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801605a:	4613      	mov	r3, r2
 801605c:	005b      	lsls	r3, r3, #1
 801605e:	4413      	add	r3, r2
 8016060:	00db      	lsls	r3, r3, #3
 8016062:	461a      	mov	r2, r3
 8016064:	683b      	ldr	r3, [r7, #0]
 8016066:	189c      	adds	r4, r3, r2
 8016068:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 801606c:	797a      	ldrb	r2, [r7, #5]
 801606e:	79fd      	ldrb	r5, [r7, #7]
 8016070:	69fb      	ldr	r3, [r7, #28]
 8016072:	9302      	str	r3, [sp, #8]
 8016074:	46ec      	mov	ip, sp
 8016076:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801607a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801607e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016082:	4633      	mov	r3, r6
 8016084:	4629      	mov	r1, r5
 8016086:	4620      	mov	r0, r4
 8016088:	f7ff fe22 	bl	8015cd0 <UpdateTimeCredits>
 801608c:	4603      	mov	r3, r0
 801608e:	82fb      	strh	r3, [r7, #22]
                                       currentTime );
#endif

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8016090:	8afa      	ldrh	r2, [r7, #22]
 8016092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016094:	fb02 f303 	mul.w	r3, r2, r3
 8016098:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801609a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801609e:	4613      	mov	r3, r2
 80160a0:	005b      	lsls	r3, r3, #1
 80160a2:	4413      	add	r3, r2
 80160a4:	00db      	lsls	r3, r3, #3
 80160a6:	461a      	mov	r2, r3
 80160a8:	683b      	ldr	r3, [r7, #0]
 80160aa:	4413      	add	r3, r2
 80160ac:	68db      	ldr	r3, [r3, #12]
 80160ae:	69ba      	ldr	r2, [r7, #24]
 80160b0:	429a      	cmp	r2, r3
 80160b2:	d308      	bcc.n	80160c6 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80160b4:	797b      	ldrb	r3, [r7, #5]
 80160b6:	f083 0301 	eor.w	r3, r3, #1
 80160ba:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d013      	beq.n	80160e8 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80160c0:	79fb      	ldrb	r3, [r7, #7]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d010      	beq.n	80160e8 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80160c6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80160ca:	4613      	mov	r3, r2
 80160cc:	005b      	lsls	r3, r3, #1
 80160ce:	4413      	add	r3, r2
 80160d0:	00db      	lsls	r3, r3, #3
 80160d2:	461a      	mov	r2, r3
 80160d4:	683b      	ldr	r3, [r7, #0]
 80160d6:	4413      	add	r3, r2
 80160d8:	2201      	movs	r2, #1
 80160da:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80160dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80160e0:	3301      	adds	r3, #1
 80160e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80160e6:	e06c      	b.n	80161c2 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80160e8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80160ec:	4613      	mov	r3, r2
 80160ee:	005b      	lsls	r3, r3, #1
 80160f0:	4413      	add	r3, r2
 80160f2:	00db      	lsls	r3, r3, #3
 80160f4:	461a      	mov	r2, r3
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	4413      	add	r3, r2
 80160fa:	2200      	movs	r2, #0
 80160fc:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80160fe:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016102:	4613      	mov	r3, r2
 8016104:	005b      	lsls	r3, r3, #1
 8016106:	4413      	add	r3, r2
 8016108:	00db      	lsls	r3, r3, #3
 801610a:	461a      	mov	r2, r3
 801610c:	683b      	ldr	r3, [r7, #0]
 801610e:	4413      	add	r3, r2
 8016110:	691b      	ldr	r3, [r3, #16]
 8016112:	69ba      	ldr	r2, [r7, #24]
 8016114:	429a      	cmp	r2, r3
 8016116:	d215      	bcs.n	8016144 <RegionCommonUpdateBandTimeOff+0x128>
                {
                    observationTimeDiff = bands[i].LastMaxCreditAssignTime - elapsedTime;
                }
                minTimeToWait = MIN( minTimeToWait, observationTimeDiff );
#else
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8016118:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801611c:	4613      	mov	r3, r2
 801611e:	005b      	lsls	r3, r3, #1
 8016120:	4413      	add	r3, r2
 8016122:	00db      	lsls	r3, r3, #3
 8016124:	461a      	mov	r2, r3
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	4413      	add	r3, r2
 801612a:	68db      	ldr	r3, [r3, #12]
 801612c:	69ba      	ldr	r2, [r7, #24]
 801612e:	1ad3      	subs	r3, r2, r3
 8016130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016132:	4293      	cmp	r3, r2
 8016134:	bf28      	it	cs
 8016136:	4613      	movcs	r3, r2
 8016138:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801613a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801613e:	3301      	adds	r3, #1
 8016140:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

#if (defined( REGION_VERSION ) && (( REGION_VERSION == 0x01010003 ) || ( REGION_VERSION == 0x02010001 )))
            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8016144:	79fb      	ldrb	r3, [r7, #7]
 8016146:	f083 0301 	eor.w	r3, r3, #1
 801614a:	b2db      	uxtb	r3, r3
 801614c:	2b00      	cmp	r3, #0
 801614e:	d038      	beq.n	80161c2 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8016150:	2300      	movs	r3, #0
 8016152:	60fb      	str	r3, [r7, #12]
 8016154:	2300      	movs	r3, #0
 8016156:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8016158:	8afb      	ldrh	r3, [r7, #22]
 801615a:	2b64      	cmp	r3, #100	@ 0x64
 801615c:	d103      	bne.n	8016166 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801615e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8016162:	60fb      	str	r3, [r7, #12]
 8016164:	e009      	b.n	801617a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8016166:	8afb      	ldrh	r3, [r7, #22]
 8016168:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801616c:	d103      	bne.n	8016176 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801616e:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 8016172:	60fb      	str	r3, [r7, #12]
 8016174:	e001      	b.n	801617a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016176:	4b1e      	ldr	r3, [pc, #120]	@ (80161f0 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8016178:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801617a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801617c:	4a1c      	ldr	r2, [pc, #112]	@ (80161f0 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801617e:	4293      	cmp	r3, r2
 8016180:	d90e      	bls.n	80161a0 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8016182:	68fa      	ldr	r2, [r7, #12]
 8016184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016186:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 801618a:	3b30      	subs	r3, #48	@ 0x30
 801618c:	4919      	ldr	r1, [pc, #100]	@ (80161f4 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801618e:	fba1 1303 	umull	r1, r3, r1, r3
 8016192:	0c1b      	lsrs	r3, r3, #16
 8016194:	3301      	adds	r3, #1
 8016196:	4918      	ldr	r1, [pc, #96]	@ (80161f8 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8016198:	fb01 f303 	mul.w	r3, r1, r3
 801619c:	4413      	add	r3, r2
 801619e:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80161a0:	f107 000c 	add.w	r0, r7, #12
 80161a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80161a6:	9300      	str	r3, [sp, #0]
 80161a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80161aa:	f107 020c 	add.w	r2, r7, #12
 80161ae:	ca06      	ldmia	r2, {r1, r2}
 80161b0:	f004 f815 	bl	801a1de <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80161b4:	f107 030c 	add.w	r3, r7, #12
 80161b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80161bc:	f004 f8ce 	bl	801a35c <SysTimeToMs>
 80161c0:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80161c2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80161c6:	3301      	adds	r3, #1
 80161c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80161cc:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80161d0:	79bb      	ldrb	r3, [r7, #6]
 80161d2:	429a      	cmp	r2, r3
 80161d4:	f4ff af3f 	bcc.w	8016056 <RegionCommonUpdateBandTimeOff+0x3a>
#endif

        }
    }

    if( validBands == 0 )
 80161d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d102      	bne.n	80161e6 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80161e0:	f04f 33ff 	mov.w	r3, #4294967295
 80161e4:	e000      	b.n	80161e8 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80161e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80161e8:	4618      	mov	r0, r3
 80161ea:	372c      	adds	r7, #44	@ 0x2c
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161f0:	0001ec30 	.word	0x0001ec30
 80161f4:	c22e4507 	.word	0xc22e4507
 80161f8:	00015180 	.word	0x00015180

080161fc <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80161fc:	b480      	push	{r7}
 80161fe:	b085      	sub	sp, #20
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]
 8016204:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016206:	2300      	movs	r3, #0
 8016208:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	781b      	ldrb	r3, [r3, #0]
 801620e:	2b03      	cmp	r3, #3
 8016210:	d13f      	bne.n	8016292 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	3301      	adds	r3, #1
 8016216:	781b      	ldrb	r3, [r3, #0]
 8016218:	b25a      	sxtb	r2, r3
 801621a:	683b      	ldr	r3, [r7, #0]
 801621c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016224:	f003 030f 	and.w	r3, r3, #15
 8016228:	b25a      	sxtb	r2, r3
 801622a:	683b      	ldr	r3, [r7, #0]
 801622c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801622e:	683b      	ldr	r3, [r7, #0]
 8016230:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016234:	b2db      	uxtb	r3, r3
 8016236:	091b      	lsrs	r3, r3, #4
 8016238:	b2db      	uxtb	r3, r3
 801623a:	b25a      	sxtb	r2, r3
 801623c:	683b      	ldr	r3, [r7, #0]
 801623e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	3302      	adds	r3, #2
 8016244:	781b      	ldrb	r3, [r3, #0]
 8016246:	461a      	mov	r2, r3
 8016248:	683b      	ldr	r3, [r7, #0]
 801624a:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 801624c:	683b      	ldr	r3, [r7, #0]
 801624e:	889b      	ldrh	r3, [r3, #4]
 8016250:	b21a      	sxth	r2, r3
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	3303      	adds	r3, #3
 8016256:	781b      	ldrb	r3, [r3, #0]
 8016258:	021b      	lsls	r3, r3, #8
 801625a:	b21b      	sxth	r3, r3
 801625c:	4313      	orrs	r3, r2
 801625e:	b21b      	sxth	r3, r3
 8016260:	b29a      	uxth	r2, r3
 8016262:	683b      	ldr	r3, [r7, #0]
 8016264:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	791a      	ldrb	r2, [r3, #4]
 801626a:	683b      	ldr	r3, [r7, #0]
 801626c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	781b      	ldrb	r3, [r3, #0]
 8016272:	091b      	lsrs	r3, r3, #4
 8016274:	b2db      	uxtb	r3, r3
 8016276:	f003 0307 	and.w	r3, r3, #7
 801627a:	b2da      	uxtb	r2, r3
 801627c:	683b      	ldr	r3, [r7, #0]
 801627e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8016280:	683b      	ldr	r3, [r7, #0]
 8016282:	781b      	ldrb	r3, [r3, #0]
 8016284:	f003 030f 	and.w	r3, r3, #15
 8016288:	b2da      	uxtb	r2, r3
 801628a:	683b      	ldr	r3, [r7, #0]
 801628c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801628e:	2305      	movs	r3, #5
 8016290:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8016292:	7bfb      	ldrb	r3, [r7, #15]
}
 8016294:	4618      	mov	r0, r3
 8016296:	3714      	adds	r7, #20
 8016298:	46bd      	mov	sp, r7
 801629a:	bc80      	pop	{r7}
 801629c:	4770      	bx	lr

0801629e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801629e:	b5b0      	push	{r4, r5, r7, lr}
 80162a0:	b088      	sub	sp, #32
 80162a2:	af02      	add	r7, sp, #8
 80162a4:	60f8      	str	r0, [r7, #12]
 80162a6:	60b9      	str	r1, [r7, #8]
 80162a8:	607a      	str	r2, [r7, #4]
 80162aa:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	791b      	ldrb	r3, [r3, #4]
 80162b0:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	799b      	ldrb	r3, [r3, #6]
 80162b6:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	79db      	ldrb	r3, [r3, #7]
 80162bc:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	7a1b      	ldrb	r3, [r3, #8]
 80162c2:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	795b      	ldrb	r3, [r3, #5]
 80162c8:	f083 0301 	eor.w	r3, r3, #1
 80162cc:	b2db      	uxtb	r3, r3
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d008      	beq.n	80162e4 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	7adb      	ldrb	r3, [r3, #11]
 80162d6:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	7a5b      	ldrb	r3, [r3, #9]
 80162dc:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	7a9b      	ldrb	r3, [r3, #10]
 80162e2:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80162e4:	7dfb      	ldrb	r3, [r7, #23]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d04a      	beq.n	8016380 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80162ea:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80162ee:	2b0f      	cmp	r3, #15
 80162f0:	d103      	bne.n	80162fa <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	7a5b      	ldrb	r3, [r3, #9]
 80162f6:	75bb      	strb	r3, [r7, #22]
 80162f8:	e01d      	b.n	8016336 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	7b18      	ldrb	r0, [r3, #12]
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	6919      	ldr	r1, [r3, #16]
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801630e:	68fa      	ldr	r2, [r7, #12]
 8016310:	6992      	ldr	r2, [r2, #24]
 8016312:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8016316:	9201      	str	r2, [sp, #4]
 8016318:	9300      	str	r3, [sp, #0]
 801631a:	462b      	mov	r3, r5
 801631c:	4622      	mov	r2, r4
 801631e:	f7ff fd3a 	bl	8015d96 <RegionCommonChanVerifyDr>
 8016322:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016324:	f083 0301 	eor.w	r3, r3, #1
 8016328:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801632a:	2b00      	cmp	r3, #0
 801632c:	d003      	beq.n	8016336 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 801632e:	7dfb      	ldrb	r3, [r7, #23]
 8016330:	f023 0302 	bic.w	r3, r3, #2
 8016334:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8016336:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801633a:	2b0f      	cmp	r3, #15
 801633c:	d103      	bne.n	8016346 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	7a9b      	ldrb	r3, [r3, #10]
 8016342:	757b      	strb	r3, [r7, #21]
 8016344:	e01c      	b.n	8016380 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	f993 101d 	ldrsb.w	r1, [r3, #29]
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8016352:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016356:	4618      	mov	r0, r3
 8016358:	f7ff fd8f 	bl	8015e7a <RegionCommonValueInRange>
 801635c:	4603      	mov	r3, r0
 801635e:	2b00      	cmp	r3, #0
 8016360:	d10e      	bne.n	8016380 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8016368:	f997 2015 	ldrsb.w	r2, [r7, #21]
 801636c:	429a      	cmp	r2, r3
 801636e:	da03      	bge.n	8016378 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	7f5b      	ldrb	r3, [r3, #29]
 8016374:	757b      	strb	r3, [r7, #21]
 8016376:	e003      	b.n	8016380 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8016378:	7dfb      	ldrb	r3, [r7, #23]
 801637a:	f023 0304 	bic.w	r3, r3, #4
 801637e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8016380:	7dfb      	ldrb	r3, [r7, #23]
 8016382:	2b07      	cmp	r3, #7
 8016384:	d105      	bne.n	8016392 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8016386:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d101      	bne.n	8016392 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801638e:	2301      	movs	r3, #1
 8016390:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8016392:	68bb      	ldr	r3, [r7, #8]
 8016394:	7dba      	ldrb	r2, [r7, #22]
 8016396:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	7d7a      	ldrb	r2, [r7, #21]
 801639c:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801639e:	7d3a      	ldrb	r2, [r7, #20]
 80163a0:	683b      	ldr	r3, [r7, #0]
 80163a2:	701a      	strb	r2, [r3, #0]

    return status;
 80163a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80163a6:	4618      	mov	r0, r3
 80163a8:	3718      	adds	r7, #24
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080163b0 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80163b0:	b480      	push	{r7}
 80163b2:	b083      	sub	sp, #12
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	4603      	mov	r3, r0
 80163b8:	6039      	str	r1, [r7, #0]
 80163ba:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80163bc:	79fb      	ldrb	r3, [r7, #7]
 80163be:	4a06      	ldr	r2, [pc, #24]	@ (80163d8 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80163c0:	fa02 f303 	lsl.w	r3, r2, r3
 80163c4:	461a      	mov	r2, r3
 80163c6:	683b      	ldr	r3, [r7, #0]
 80163c8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80163cc:	4618      	mov	r0, r3
 80163ce:	370c      	adds	r7, #12
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bc80      	pop	{r7}
 80163d4:	4770      	bx	lr
 80163d6:	bf00      	nop
 80163d8:	000f4240 	.word	0x000f4240

080163dc <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80163dc:	b480      	push	{r7}
 80163de:	b083      	sub	sp, #12
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	4603      	mov	r3, r0
 80163e4:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80163e6:	79fb      	ldrb	r3, [r7, #7]
 80163e8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80163ec:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80163f0:	4618      	mov	r0, r3
 80163f2:	370c      	adds	r7, #12
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bc80      	pop	{r7}
 80163f8:	4770      	bx	lr
	...

080163fc <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80163fc:	b480      	push	{r7}
 80163fe:	b085      	sub	sp, #20
 8016400:	af00      	add	r7, sp, #0
 8016402:	60f8      	str	r0, [r7, #12]
 8016404:	607a      	str	r2, [r7, #4]
 8016406:	603b      	str	r3, [r7, #0]
 8016408:	460b      	mov	r3, r1
 801640a:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801640c:	7afa      	ldrb	r2, [r7, #11]
 801640e:	7afb      	ldrb	r3, [r7, #11]
 8016410:	3b04      	subs	r3, #4
 8016412:	4619      	mov	r1, r3
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	fb03 f101 	mul.w	r1, r3, r1
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016420:	fb00 f303 	mul.w	r3, r0, r3
 8016424:	440b      	add	r3, r1
 8016426:	005b      	lsls	r3, r3, #1
 8016428:	2b00      	cmp	r3, #0
 801642a:	d013      	beq.n	8016454 <RegionCommonComputeRxWindowParameters+0x58>
 801642c:	7afb      	ldrb	r3, [r7, #11]
 801642e:	3b04      	subs	r3, #4
 8016430:	4619      	mov	r1, r3
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	fb03 f101 	mul.w	r1, r3, r1
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801643e:	fb00 f303 	mul.w	r3, r0, r3
 8016442:	440b      	add	r3, r1
 8016444:	0059      	lsls	r1, r3, #1
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	440b      	add	r3, r1
 801644a:	1e59      	subs	r1, r3, #1
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	fbb1 f3f3 	udiv	r3, r1, r3
 8016452:	e00f      	b.n	8016474 <RegionCommonComputeRxWindowParameters+0x78>
 8016454:	7afb      	ldrb	r3, [r7, #11]
 8016456:	3b04      	subs	r3, #4
 8016458:	4619      	mov	r1, r3
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	fb03 f101 	mul.w	r1, r3, r1
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016466:	fb00 f303 	mul.w	r3, r0, r3
 801646a:	440b      	add	r3, r1
 801646c:	0059      	lsls	r1, r3, #1
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	fbb1 f3f3 	udiv	r3, r1, r3
 8016474:	429a      	cmp	r2, r3
 8016476:	bf38      	it	cc
 8016478:	461a      	movcc	r2, r3
 801647a:	69bb      	ldr	r3, [r7, #24]
 801647c:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	009b      	lsls	r3, r3, #2
 8016482:	4619      	mov	r1, r3
 8016484:	69bb      	ldr	r3, [r7, #24]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	68fa      	ldr	r2, [r7, #12]
 801648a:	fb02 f303 	mul.w	r3, r2, r3
 801648e:	2b00      	cmp	r3, #0
 8016490:	d007      	beq.n	80164a2 <RegionCommonComputeRxWindowParameters+0xa6>
 8016492:	69bb      	ldr	r3, [r7, #24]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	68fa      	ldr	r2, [r7, #12]
 8016498:	fb02 f303 	mul.w	r3, r2, r3
 801649c:	3301      	adds	r3, #1
 801649e:	085b      	lsrs	r3, r3, #1
 80164a0:	e005      	b.n	80164ae <RegionCommonComputeRxWindowParameters+0xb2>
 80164a2:	69bb      	ldr	r3, [r7, #24]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	68fa      	ldr	r2, [r7, #12]
 80164a8:	fb02 f303 	mul.w	r3, r2, r3
 80164ac:	085b      	lsrs	r3, r3, #1
 80164ae:	1acb      	subs	r3, r1, r3
 80164b0:	683a      	ldr	r2, [r7, #0]
 80164b2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80164b6:	fb01 f202 	mul.w	r2, r1, r2
 80164ba:	1a9b      	subs	r3, r3, r2
 80164bc:	2b00      	cmp	r3, #0
 80164be:	dd27      	ble.n	8016510 <RegionCommonComputeRxWindowParameters+0x114>
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	009b      	lsls	r3, r3, #2
 80164c4:	4619      	mov	r1, r3
 80164c6:	69bb      	ldr	r3, [r7, #24]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	68fa      	ldr	r2, [r7, #12]
 80164cc:	fb02 f303 	mul.w	r3, r2, r3
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d007      	beq.n	80164e4 <RegionCommonComputeRxWindowParameters+0xe8>
 80164d4:	69bb      	ldr	r3, [r7, #24]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	68fa      	ldr	r2, [r7, #12]
 80164da:	fb02 f303 	mul.w	r3, r2, r3
 80164de:	3301      	adds	r3, #1
 80164e0:	085b      	lsrs	r3, r3, #1
 80164e2:	e005      	b.n	80164f0 <RegionCommonComputeRxWindowParameters+0xf4>
 80164e4:	69bb      	ldr	r3, [r7, #24]
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	68fa      	ldr	r2, [r7, #12]
 80164ea:	fb02 f303 	mul.w	r3, r2, r3
 80164ee:	085b      	lsrs	r3, r3, #1
 80164f0:	1acb      	subs	r3, r1, r3
 80164f2:	683a      	ldr	r2, [r7, #0]
 80164f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80164f8:	fb01 f202 	mul.w	r2, r1, r2
 80164fc:	1a9b      	subs	r3, r3, r2
 80164fe:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8016502:	4a19      	ldr	r2, [pc, #100]	@ (8016568 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016504:	fb82 1203 	smull	r1, r2, r2, r3
 8016508:	1192      	asrs	r2, r2, #6
 801650a:	17db      	asrs	r3, r3, #31
 801650c:	1ad3      	subs	r3, r2, r3
 801650e:	e024      	b.n	801655a <RegionCommonComputeRxWindowParameters+0x15e>
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	009b      	lsls	r3, r3, #2
 8016514:	4619      	mov	r1, r3
 8016516:	69bb      	ldr	r3, [r7, #24]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	68fa      	ldr	r2, [r7, #12]
 801651c:	fb02 f303 	mul.w	r3, r2, r3
 8016520:	2b00      	cmp	r3, #0
 8016522:	d007      	beq.n	8016534 <RegionCommonComputeRxWindowParameters+0x138>
 8016524:	69bb      	ldr	r3, [r7, #24]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	68fa      	ldr	r2, [r7, #12]
 801652a:	fb02 f303 	mul.w	r3, r2, r3
 801652e:	3301      	adds	r3, #1
 8016530:	085b      	lsrs	r3, r3, #1
 8016532:	e005      	b.n	8016540 <RegionCommonComputeRxWindowParameters+0x144>
 8016534:	69bb      	ldr	r3, [r7, #24]
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	68fa      	ldr	r2, [r7, #12]
 801653a:	fb02 f303 	mul.w	r3, r2, r3
 801653e:	085b      	lsrs	r3, r3, #1
 8016540:	1acb      	subs	r3, r1, r3
 8016542:	683a      	ldr	r2, [r7, #0]
 8016544:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016548:	fb01 f202 	mul.w	r2, r1, r2
 801654c:	1a9b      	subs	r3, r3, r2
 801654e:	4a06      	ldr	r2, [pc, #24]	@ (8016568 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016550:	fb82 1203 	smull	r1, r2, r2, r3
 8016554:	1192      	asrs	r2, r2, #6
 8016556:	17db      	asrs	r3, r3, #31
 8016558:	1ad3      	subs	r3, r2, r3
 801655a:	69fa      	ldr	r2, [r7, #28]
 801655c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801655e:	bf00      	nop
 8016560:	3714      	adds	r7, #20
 8016562:	46bd      	mov	sp, r7
 8016564:	bc80      	pop	{r7}
 8016566:	4770      	bx	lr
 8016568:	10624dd3 	.word	0x10624dd3

0801656c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b086      	sub	sp, #24
 8016570:	af00      	add	r7, sp, #0
 8016572:	4603      	mov	r3, r0
 8016574:	60b9      	str	r1, [r7, #8]
 8016576:	607a      	str	r2, [r7, #4]
 8016578:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801657a:	2300      	movs	r3, #0
 801657c:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801657e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016582:	005b      	lsls	r3, r3, #1
 8016584:	4618      	mov	r0, r3
 8016586:	f7ea fb9d 	bl	8000cc4 <__aeabi_ui2f>
 801658a:	4603      	mov	r3, r0
 801658c:	4619      	mov	r1, r3
 801658e:	68b8      	ldr	r0, [r7, #8]
 8016590:	f7ea fae6 	bl	8000b60 <__aeabi_fsub>
 8016594:	4603      	mov	r3, r0
 8016596:	6879      	ldr	r1, [r7, #4]
 8016598:	4618      	mov	r0, r3
 801659a:	f7ea fae1 	bl	8000b60 <__aeabi_fsub>
 801659e:	4603      	mov	r3, r0
 80165a0:	4618      	mov	r0, r3
 80165a2:	f7e9 ffa9 	bl	80004f8 <__aeabi_f2d>
 80165a6:	4602      	mov	r2, r0
 80165a8:	460b      	mov	r3, r1
 80165aa:	4610      	mov	r0, r2
 80165ac:	4619      	mov	r1, r3
 80165ae:	f007 fcdb 	bl	801df68 <floor>
 80165b2:	4602      	mov	r2, r0
 80165b4:	460b      	mov	r3, r1
 80165b6:	4610      	mov	r0, r2
 80165b8:	4619      	mov	r1, r3
 80165ba:	f7ea faa5 	bl	8000b08 <__aeabi_d2iz>
 80165be:	4603      	mov	r3, r0
 80165c0:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80165c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80165c6:	4618      	mov	r0, r3
 80165c8:	3718      	adds	r7, #24
 80165ca:	46bd      	mov	sp, r7
 80165cc:	bd80      	pop	{r7, pc}

080165ce <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80165ce:	b590      	push	{r4, r7, lr}
 80165d0:	b087      	sub	sp, #28
 80165d2:	af00      	add	r7, sp, #0
 80165d4:	60f8      	str	r0, [r7, #12]
 80165d6:	60b9      	str	r1, [r7, #8]
 80165d8:	607a      	str	r2, [r7, #4]
 80165da:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80165dc:	2300      	movs	r3, #0
 80165de:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80165e0:	2300      	movs	r3, #0
 80165e2:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80165e4:	2300      	movs	r3, #0
 80165e6:	757b      	strb	r3, [r7, #21]
 80165e8:	2300      	movs	r3, #0
 80165ea:	753b      	strb	r3, [r7, #20]
 80165ec:	e09c      	b.n	8016728 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80165ee:	2300      	movs	r3, #0
 80165f0:	74fb      	strb	r3, [r7, #19]
 80165f2:	e08f      	b.n	8016714 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	685a      	ldr	r2, [r3, #4]
 80165f8:	7d3b      	ldrb	r3, [r7, #20]
 80165fa:	005b      	lsls	r3, r3, #1
 80165fc:	4413      	add	r3, r2
 80165fe:	881b      	ldrh	r3, [r3, #0]
 8016600:	461a      	mov	r2, r3
 8016602:	7cfb      	ldrb	r3, [r7, #19]
 8016604:	fa42 f303 	asr.w	r3, r2, r3
 8016608:	f003 0301 	and.w	r3, r3, #1
 801660c:	2b00      	cmp	r3, #0
 801660e:	d07e      	beq.n	801670e <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	689a      	ldr	r2, [r3, #8]
 8016614:	7d79      	ldrb	r1, [r7, #21]
 8016616:	7cfb      	ldrb	r3, [r7, #19]
 8016618:	440b      	add	r3, r1
 801661a:	4619      	mov	r1, r3
 801661c:	460b      	mov	r3, r1
 801661e:	005b      	lsls	r3, r3, #1
 8016620:	440b      	add	r3, r1
 8016622:	009b      	lsls	r3, r3, #2
 8016624:	4413      	add	r3, r2
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d06b      	beq.n	8016704 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	781b      	ldrb	r3, [r3, #0]
 8016630:	f083 0301 	eor.w	r3, r3, #1
 8016634:	b2db      	uxtb	r3, r3
 8016636:	2b00      	cmp	r3, #0
 8016638:	d011      	beq.n	801665e <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801663e:	2b00      	cmp	r3, #0
 8016640:	d00d      	beq.n	801665e <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	695a      	ldr	r2, [r3, #20]
 8016646:	7d3b      	ldrb	r3, [r7, #20]
 8016648:	005b      	lsls	r3, r3, #1
 801664a:	4413      	add	r3, r2
 801664c:	881b      	ldrh	r3, [r3, #0]
 801664e:	461a      	mov	r2, r3
 8016650:	7cfb      	ldrb	r3, [r7, #19]
 8016652:	fa42 f303 	asr.w	r3, r2, r3
 8016656:	f003 0301 	and.w	r3, r3, #1
 801665a:	2b00      	cmp	r3, #0
 801665c:	d054      	beq.n	8016708 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	785b      	ldrb	r3, [r3, #1]
 8016662:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	689a      	ldr	r2, [r3, #8]
 8016668:	7d79      	ldrb	r1, [r7, #21]
 801666a:	7cfb      	ldrb	r3, [r7, #19]
 801666c:	440b      	add	r3, r1
 801666e:	4619      	mov	r1, r3
 8016670:	460b      	mov	r3, r1
 8016672:	005b      	lsls	r3, r3, #1
 8016674:	440b      	add	r3, r1
 8016676:	009b      	lsls	r3, r3, #2
 8016678:	4413      	add	r3, r2
 801667a:	7a1b      	ldrb	r3, [r3, #8]
 801667c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016680:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016682:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	689a      	ldr	r2, [r3, #8]
 8016688:	7d79      	ldrb	r1, [r7, #21]
 801668a:	7cfb      	ldrb	r3, [r7, #19]
 801668c:	440b      	add	r3, r1
 801668e:	4619      	mov	r1, r3
 8016690:	460b      	mov	r3, r1
 8016692:	005b      	lsls	r3, r3, #1
 8016694:	440b      	add	r3, r1
 8016696:	009b      	lsls	r3, r3, #2
 8016698:	4413      	add	r3, r2
 801669a:	7a1b      	ldrb	r3, [r3, #8]
 801669c:	f343 1303 	sbfx	r3, r3, #4, #4
 80166a0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80166a2:	461a      	mov	r2, r3
 80166a4:	4621      	mov	r1, r4
 80166a6:	f7ff fbe8 	bl	8015e7a <RegionCommonValueInRange>
 80166aa:	4603      	mov	r3, r0
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d02d      	beq.n	801670c <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	68da      	ldr	r2, [r3, #12]
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	6899      	ldr	r1, [r3, #8]
 80166b8:	7d78      	ldrb	r0, [r7, #21]
 80166ba:	7cfb      	ldrb	r3, [r7, #19]
 80166bc:	4403      	add	r3, r0
 80166be:	4618      	mov	r0, r3
 80166c0:	4603      	mov	r3, r0
 80166c2:	005b      	lsls	r3, r3, #1
 80166c4:	4403      	add	r3, r0
 80166c6:	009b      	lsls	r3, r3, #2
 80166c8:	440b      	add	r3, r1
 80166ca:	7a5b      	ldrb	r3, [r3, #9]
 80166cc:	4619      	mov	r1, r3
 80166ce:	460b      	mov	r3, r1
 80166d0:	005b      	lsls	r3, r3, #1
 80166d2:	440b      	add	r3, r1
 80166d4:	00db      	lsls	r3, r3, #3
 80166d6:	4413      	add	r3, r2
 80166d8:	7d1b      	ldrb	r3, [r3, #20]
 80166da:	f083 0301 	eor.w	r3, r3, #1
 80166de:	b2db      	uxtb	r3, r3
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d003      	beq.n	80166ec <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80166e4:	7dbb      	ldrb	r3, [r7, #22]
 80166e6:	3301      	adds	r3, #1
 80166e8:	75bb      	strb	r3, [r7, #22]
                    continue;
 80166ea:	e010      	b.n	801670e <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80166ec:	7dfb      	ldrb	r3, [r7, #23]
 80166ee:	1c5a      	adds	r2, r3, #1
 80166f0:	75fa      	strb	r2, [r7, #23]
 80166f2:	461a      	mov	r2, r3
 80166f4:	68bb      	ldr	r3, [r7, #8]
 80166f6:	4413      	add	r3, r2
 80166f8:	7d79      	ldrb	r1, [r7, #21]
 80166fa:	7cfa      	ldrb	r2, [r7, #19]
 80166fc:	440a      	add	r2, r1
 80166fe:	b2d2      	uxtb	r2, r2
 8016700:	701a      	strb	r2, [r3, #0]
 8016702:	e004      	b.n	801670e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016704:	bf00      	nop
 8016706:	e002      	b.n	801670e <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016708:	bf00      	nop
 801670a:	e000      	b.n	801670e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801670c:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801670e:	7cfb      	ldrb	r3, [r7, #19]
 8016710:	3301      	adds	r3, #1
 8016712:	74fb      	strb	r3, [r7, #19]
 8016714:	7cfb      	ldrb	r3, [r7, #19]
 8016716:	2b0f      	cmp	r3, #15
 8016718:	f67f af6c 	bls.w	80165f4 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801671c:	7d7b      	ldrb	r3, [r7, #21]
 801671e:	3310      	adds	r3, #16
 8016720:	757b      	strb	r3, [r7, #21]
 8016722:	7d3b      	ldrb	r3, [r7, #20]
 8016724:	3301      	adds	r3, #1
 8016726:	753b      	strb	r3, [r7, #20]
 8016728:	7d7b      	ldrb	r3, [r7, #21]
 801672a:	b29a      	uxth	r2, r3
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	8a1b      	ldrh	r3, [r3, #16]
 8016730:	429a      	cmp	r2, r3
 8016732:	f4ff af5c 	bcc.w	80165ee <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	7dfa      	ldrb	r2, [r7, #23]
 801673a:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	7dba      	ldrb	r2, [r7, #22]
 8016740:	701a      	strb	r2, [r3, #0]
}
 8016742:	bf00      	nop
 8016744:	371c      	adds	r7, #28
 8016746:	46bd      	mov	sp, r7
 8016748:	bd90      	pop	{r4, r7, pc}

0801674a <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801674a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801674c:	b08b      	sub	sp, #44	@ 0x2c
 801674e:	af04      	add	r7, sp, #16
 8016750:	60f8      	str	r0, [r7, #12]
 8016752:	60b9      	str	r1, [r7, #8]
 8016754:	607a      	str	r2, [r7, #4]
 8016756:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	685b      	ldr	r3, [r3, #4]
 801675c:	4618      	mov	r0, r3
 801675e:	f004 fc37 	bl	801afd0 <UTIL_TIMER_GetElapsedTime>
 8016762:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	681a      	ldr	r2, [r3, #0]
 8016768:	697b      	ldr	r3, [r7, #20]
 801676a:	1ad2      	subs	r2, r2, r3
 801676c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801676e:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8016770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016772:	2201      	movs	r2, #1
 8016774:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	2200      	movs	r2, #0
 801677a:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	685b      	ldr	r3, [r3, #4]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d004      	beq.n	801678e <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016788:	697a      	ldr	r2, [r7, #20]
 801678a:	429a      	cmp	r2, r3
 801678c:	d32b      	bcc.n	80167e6 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801678e:	68bb      	ldr	r3, [r7, #8]
 8016790:	2200      	movs	r2, #0
 8016792:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	69db      	ldr	r3, [r3, #28]
 8016798:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801679e:	68dd      	ldr	r5, [r3, #12]
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	7a5e      	ldrb	r6, [r3, #9]
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	f893 c008 	ldrb.w	ip, [r3, #8]
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	7d1b      	ldrb	r3, [r3, #20]
 80167ae:	68fa      	ldr	r2, [r7, #12]
 80167b0:	6992      	ldr	r2, [r2, #24]
 80167b2:	9203      	str	r2, [sp, #12]
 80167b4:	68fa      	ldr	r2, [r7, #12]
 80167b6:	f10d 0e04 	add.w	lr, sp, #4
 80167ba:	320c      	adds	r2, #12
 80167bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80167c0:	e88e 0003 	stmia.w	lr, {r0, r1}
 80167c4:	9300      	str	r3, [sp, #0]
 80167c6:	4663      	mov	r3, ip
 80167c8:	4632      	mov	r2, r6
 80167ca:	4629      	mov	r1, r5
 80167cc:	4620      	mov	r0, r4
 80167ce:	f7ff fc25 	bl	801601c <RegionCommonUpdateBandTimeOff>
 80167d2:	4602      	mov	r2, r0
 80167d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167d6:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	69d8      	ldr	r0, [r3, #28]
 80167dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167de:	683a      	ldr	r2, [r7, #0]
 80167e0:	6879      	ldr	r1, [r7, #4]
 80167e2:	f7ff fef4 	bl	80165ce <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80167e6:	683b      	ldr	r3, [r7, #0]
 80167e8:	781b      	ldrb	r3, [r3, #0]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d004      	beq.n	80167f8 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80167ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167f0:	2200      	movs	r2, #0
 80167f2:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80167f4:	2300      	movs	r3, #0
 80167f6:	e006      	b.n	8016806 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80167f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167fa:	781b      	ldrb	r3, [r3, #0]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d001      	beq.n	8016804 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016800:	230b      	movs	r3, #11
 8016802:	e000      	b.n	8016806 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016804:	230c      	movs	r3, #12
    }
}
 8016806:	4618      	mov	r0, r3
 8016808:	371c      	adds	r7, #28
 801680a:	46bd      	mov	sp, r7
 801680c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801680e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801680e:	b5b0      	push	{r4, r5, r7, lr}
 8016810:	b086      	sub	sp, #24
 8016812:	af02      	add	r7, sp, #8
 8016814:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	781b      	ldrb	r3, [r3, #0]
 801681a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	f993 2000 	ldrsb.w	r2, [r3]
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016828:	429a      	cmp	r2, r3
 801682a:	d103      	bne.n	8016834 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016832:	e026      	b.n	8016882 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8016834:	7bfb      	ldrb	r3, [r7, #15]
 8016836:	3b01      	subs	r3, #1
 8016838:	b2db      	uxtb	r3, r3
 801683a:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016842:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016846:	429a      	cmp	r2, r3
 8016848:	d019      	beq.n	801687e <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	78d8      	ldrb	r0, [r3, #3]
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	6859      	ldr	r1, [r3, #4]
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801685e:	687a      	ldr	r2, [r7, #4]
 8016860:	6892      	ldr	r2, [r2, #8]
 8016862:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8016866:	9201      	str	r2, [sp, #4]
 8016868:	9300      	str	r3, [sp, #0]
 801686a:	462b      	mov	r3, r5
 801686c:	4622      	mov	r2, r4
 801686e:	f7ff fa92 	bl	8015d96 <RegionCommonChanVerifyDr>
 8016872:	4603      	mov	r3, r0
 8016874:	f083 0301 	eor.w	r3, r3, #1
 8016878:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801687a:	2b00      	cmp	r3, #0
 801687c:	d1da      	bne.n	8016834 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801687e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8016882:	4618      	mov	r0, r3
 8016884:	3710      	adds	r7, #16
 8016886:	46bd      	mov	sp, r7
 8016888:	bdb0      	pop	{r4, r5, r7, pc}

0801688a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801688a:	b480      	push	{r7}
 801688c:	b083      	sub	sp, #12
 801688e:	af00      	add	r7, sp, #0
 8016890:	4603      	mov	r3, r0
 8016892:	460a      	mov	r2, r1
 8016894:	71fb      	strb	r3, [r7, #7]
 8016896:	4613      	mov	r3, r2
 8016898:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801689a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801689e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80168a2:	4293      	cmp	r3, r2
 80168a4:	bfb8      	it	lt
 80168a6:	4613      	movlt	r3, r2
 80168a8:	b25b      	sxtb	r3, r3
}
 80168aa:	4618      	mov	r0, r3
 80168ac:	370c      	adds	r7, #12
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bc80      	pop	{r7}
 80168b2:	4770      	bx	lr

080168b4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80168b4:	b480      	push	{r7}
 80168b6:	b083      	sub	sp, #12
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
 80168bc:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	009b      	lsls	r3, r3, #2
 80168c2:	683a      	ldr	r2, [r7, #0]
 80168c4:	4413      	add	r3, r2
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	4a07      	ldr	r2, [pc, #28]	@ (80168e8 <RegionCommonGetBandwidth+0x34>)
 80168ca:	4293      	cmp	r3, r2
 80168cc:	d004      	beq.n	80168d8 <RegionCommonGetBandwidth+0x24>
 80168ce:	4a07      	ldr	r2, [pc, #28]	@ (80168ec <RegionCommonGetBandwidth+0x38>)
 80168d0:	4293      	cmp	r3, r2
 80168d2:	d003      	beq.n	80168dc <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80168d4:	2300      	movs	r3, #0
 80168d6:	e002      	b.n	80168de <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80168d8:	2301      	movs	r3, #1
 80168da:	e000      	b.n	80168de <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80168dc:	2302      	movs	r3, #2
    }
}
 80168de:	4618      	mov	r0, r3
 80168e0:	370c      	adds	r7, #12
 80168e2:	46bd      	mov	sp, r7
 80168e4:	bc80      	pop	{r7}
 80168e6:	4770      	bx	lr
 80168e8:	0003d090 	.word	0x0003d090
 80168ec:	0007a120 	.word	0x0007a120

080168f0 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b086      	sub	sp, #24
 80168f4:	af04      	add	r7, sp, #16
 80168f6:	4603      	mov	r3, r0
 80168f8:	6039      	str	r1, [r7, #0]
 80168fa:	71fb      	strb	r3, [r7, #7]
 80168fc:	4613      	mov	r3, r2
 80168fe:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8016900:	79fb      	ldrb	r3, [r7, #7]
 8016902:	2b05      	cmp	r3, #5
 8016904:	d810      	bhi.n	8016928 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8016906:	79fb      	ldrb	r3, [r7, #7]
 8016908:	4a0f      	ldr	r2, [pc, #60]	@ (8016948 <RegionCommonRxConfigPrint+0x58>)
 801690a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801690e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016912:	9202      	str	r2, [sp, #8]
 8016914:	683a      	ldr	r2, [r7, #0]
 8016916:	9201      	str	r2, [sp, #4]
 8016918:	9300      	str	r3, [sp, #0]
 801691a:	4b0c      	ldr	r3, [pc, #48]	@ (801694c <RegionCommonRxConfigPrint+0x5c>)
 801691c:	2201      	movs	r2, #1
 801691e:	2100      	movs	r1, #0
 8016920:	2002      	movs	r0, #2
 8016922:	f004 fc33 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8016926:	e00a      	b.n	801693e <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016928:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801692c:	9301      	str	r3, [sp, #4]
 801692e:	683b      	ldr	r3, [r7, #0]
 8016930:	9300      	str	r3, [sp, #0]
 8016932:	4b07      	ldr	r3, [pc, #28]	@ (8016950 <RegionCommonRxConfigPrint+0x60>)
 8016934:	2201      	movs	r2, #1
 8016936:	2100      	movs	r1, #0
 8016938:	2002      	movs	r0, #2
 801693a:	f004 fc27 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
}
 801693e:	bf00      	nop
 8016940:	3708      	adds	r7, #8
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}
 8016946:	bf00      	nop
 8016948:	20000108 	.word	0x20000108
 801694c:	0801e4c4 	.word	0x0801e4c4
 8016950:	0801e4e4 	.word	0x0801e4e4

08016954 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b084      	sub	sp, #16
 8016958:	af02      	add	r7, sp, #8
 801695a:	6078      	str	r0, [r7, #4]
 801695c:	460b      	mov	r3, r1
 801695e:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016964:	9301      	str	r3, [sp, #4]
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	9300      	str	r3, [sp, #0]
 801696a:	4b05      	ldr	r3, [pc, #20]	@ (8016980 <RegionCommonTxConfigPrint+0x2c>)
 801696c:	2201      	movs	r2, #1
 801696e:	2100      	movs	r1, #0
 8016970:	2002      	movs	r0, #2
 8016972:	f004 fc0b 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
}
 8016976:	bf00      	nop
 8016978:	3708      	adds	r7, #8
 801697a:	46bd      	mov	sp, r7
 801697c:	bd80      	pop	{r7, pc}
 801697e:	bf00      	nop
 8016980:	0801e500 	.word	0x0801e500

08016984 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8016984:	b480      	push	{r7}
 8016986:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8016988:	4b0d      	ldr	r3, [pc, #52]	@ (80169c0 <rand1+0x3c>)
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	4a0d      	ldr	r2, [pc, #52]	@ (80169c4 <rand1+0x40>)
 801698e:	fb02 f303 	mul.w	r3, r2, r3
 8016992:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8016996:	3339      	adds	r3, #57	@ 0x39
 8016998:	4a09      	ldr	r2, [pc, #36]	@ (80169c0 <rand1+0x3c>)
 801699a:	6013      	str	r3, [r2, #0]
 801699c:	4b08      	ldr	r3, [pc, #32]	@ (80169c0 <rand1+0x3c>)
 801699e:	681a      	ldr	r2, [r3, #0]
 80169a0:	2303      	movs	r3, #3
 80169a2:	fba3 1302 	umull	r1, r3, r3, r2
 80169a6:	1ad1      	subs	r1, r2, r3
 80169a8:	0849      	lsrs	r1, r1, #1
 80169aa:	440b      	add	r3, r1
 80169ac:	0f99      	lsrs	r1, r3, #30
 80169ae:	460b      	mov	r3, r1
 80169b0:	07db      	lsls	r3, r3, #31
 80169b2:	1a5b      	subs	r3, r3, r1
 80169b4:	1ad1      	subs	r1, r2, r3
 80169b6:	460b      	mov	r3, r1
}
 80169b8:	4618      	mov	r0, r3
 80169ba:	46bd      	mov	sp, r7
 80169bc:	bc80      	pop	{r7}
 80169be:	4770      	bx	lr
 80169c0:	20000120 	.word	0x20000120
 80169c4:	41c64e6d 	.word	0x41c64e6d

080169c8 <srand1>:

void srand1( uint32_t seed )
{
 80169c8:	b480      	push	{r7}
 80169ca:	b083      	sub	sp, #12
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
    next = seed;
 80169d0:	4a03      	ldr	r2, [pc, #12]	@ (80169e0 <srand1+0x18>)
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	6013      	str	r3, [r2, #0]
}
 80169d6:	bf00      	nop
 80169d8:	370c      	adds	r7, #12
 80169da:	46bd      	mov	sp, r7
 80169dc:	bc80      	pop	{r7}
 80169de:	4770      	bx	lr
 80169e0:	20000120 	.word	0x20000120

080169e4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b082      	sub	sp, #8
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	6078      	str	r0, [r7, #4]
 80169ec:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80169ee:	f7ff ffc9 	bl	8016984 <rand1>
 80169f2:	4602      	mov	r2, r0
 80169f4:	6839      	ldr	r1, [r7, #0]
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	1acb      	subs	r3, r1, r3
 80169fa:	3301      	adds	r3, #1
 80169fc:	fb92 f1f3 	sdiv	r1, r2, r3
 8016a00:	fb01 f303 	mul.w	r3, r1, r3
 8016a04:	1ad2      	subs	r2, r2, r3
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	4413      	add	r3, r2
}
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	3708      	adds	r7, #8
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	bd80      	pop	{r7, pc}

08016a12 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016a12:	b480      	push	{r7}
 8016a14:	b085      	sub	sp, #20
 8016a16:	af00      	add	r7, sp, #0
 8016a18:	60f8      	str	r0, [r7, #12]
 8016a1a:	60b9      	str	r1, [r7, #8]
 8016a1c:	4613      	mov	r3, r2
 8016a1e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8016a20:	e007      	b.n	8016a32 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8016a22:	68ba      	ldr	r2, [r7, #8]
 8016a24:	1c53      	adds	r3, r2, #1
 8016a26:	60bb      	str	r3, [r7, #8]
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	1c59      	adds	r1, r3, #1
 8016a2c:	60f9      	str	r1, [r7, #12]
 8016a2e:	7812      	ldrb	r2, [r2, #0]
 8016a30:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016a32:	88fb      	ldrh	r3, [r7, #6]
 8016a34:	1e5a      	subs	r2, r3, #1
 8016a36:	80fa      	strh	r2, [r7, #6]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d1f2      	bne.n	8016a22 <memcpy1+0x10>
    }
}
 8016a3c:	bf00      	nop
 8016a3e:	bf00      	nop
 8016a40:	3714      	adds	r7, #20
 8016a42:	46bd      	mov	sp, r7
 8016a44:	bc80      	pop	{r7}
 8016a46:	4770      	bx	lr

08016a48 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016a48:	b480      	push	{r7}
 8016a4a:	b085      	sub	sp, #20
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	60f8      	str	r0, [r7, #12]
 8016a50:	60b9      	str	r1, [r7, #8]
 8016a52:	4613      	mov	r3, r2
 8016a54:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8016a56:	88fb      	ldrh	r3, [r7, #6]
 8016a58:	3b01      	subs	r3, #1
 8016a5a:	68fa      	ldr	r2, [r7, #12]
 8016a5c:	4413      	add	r3, r2
 8016a5e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016a60:	e007      	b.n	8016a72 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8016a62:	68ba      	ldr	r2, [r7, #8]
 8016a64:	1c53      	adds	r3, r2, #1
 8016a66:	60bb      	str	r3, [r7, #8]
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	1e59      	subs	r1, r3, #1
 8016a6c:	60f9      	str	r1, [r7, #12]
 8016a6e:	7812      	ldrb	r2, [r2, #0]
 8016a70:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016a72:	88fb      	ldrh	r3, [r7, #6]
 8016a74:	1e5a      	subs	r2, r3, #1
 8016a76:	80fa      	strh	r2, [r7, #6]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d1f2      	bne.n	8016a62 <memcpyr+0x1a>
    }
}
 8016a7c:	bf00      	nop
 8016a7e:	bf00      	nop
 8016a80:	3714      	adds	r7, #20
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bc80      	pop	{r7}
 8016a86:	4770      	bx	lr

08016a88 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016a88:	b480      	push	{r7}
 8016a8a:	b083      	sub	sp, #12
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
 8016a90:	460b      	mov	r3, r1
 8016a92:	70fb      	strb	r3, [r7, #3]
 8016a94:	4613      	mov	r3, r2
 8016a96:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016a98:	e004      	b.n	8016aa4 <memset1+0x1c>
    {
        *dst++ = value;
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	1c5a      	adds	r2, r3, #1
 8016a9e:	607a      	str	r2, [r7, #4]
 8016aa0:	78fa      	ldrb	r2, [r7, #3]
 8016aa2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016aa4:	883b      	ldrh	r3, [r7, #0]
 8016aa6:	1e5a      	subs	r2, r3, #1
 8016aa8:	803a      	strh	r2, [r7, #0]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d1f5      	bne.n	8016a9a <memset1+0x12>
    }
}
 8016aae:	bf00      	nop
 8016ab0:	bf00      	nop
 8016ab2:	370c      	adds	r7, #12
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	bc80      	pop	{r7}
 8016ab8:	4770      	bx	lr
	...

08016abc <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016abc:	b480      	push	{r7}
 8016abe:	b085      	sub	sp, #20
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
 8016ac4:	460b      	mov	r3, r1
 8016ac6:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8016acc:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d101      	bne.n	8016ad8 <Crc32+0x1c>
    {
        return 0;
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	e026      	b.n	8016b26 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016ad8:	2300      	movs	r3, #0
 8016ada:	817b      	strh	r3, [r7, #10]
 8016adc:	e01d      	b.n	8016b1a <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8016ade:	897b      	ldrh	r3, [r7, #10]
 8016ae0:	687a      	ldr	r2, [r7, #4]
 8016ae2:	4413      	add	r3, r2
 8016ae4:	781b      	ldrb	r3, [r3, #0]
 8016ae6:	461a      	mov	r2, r3
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	4053      	eors	r3, r2
 8016aec:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016aee:	2300      	movs	r3, #0
 8016af0:	813b      	strh	r3, [r7, #8]
 8016af2:	e00c      	b.n	8016b0e <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	085a      	lsrs	r2, r3, #1
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	f003 0301 	and.w	r3, r3, #1
 8016afe:	425b      	negs	r3, r3
 8016b00:	490b      	ldr	r1, [pc, #44]	@ (8016b30 <Crc32+0x74>)
 8016b02:	400b      	ands	r3, r1
 8016b04:	4053      	eors	r3, r2
 8016b06:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016b08:	893b      	ldrh	r3, [r7, #8]
 8016b0a:	3301      	adds	r3, #1
 8016b0c:	813b      	strh	r3, [r7, #8]
 8016b0e:	893b      	ldrh	r3, [r7, #8]
 8016b10:	2b07      	cmp	r3, #7
 8016b12:	d9ef      	bls.n	8016af4 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8016b14:	897b      	ldrh	r3, [r7, #10]
 8016b16:	3301      	adds	r3, #1
 8016b18:	817b      	strh	r3, [r7, #10]
 8016b1a:	897a      	ldrh	r2, [r7, #10]
 8016b1c:	887b      	ldrh	r3, [r7, #2]
 8016b1e:	429a      	cmp	r2, r3
 8016b20:	d3dd      	bcc.n	8016ade <Crc32+0x22>
        }
    }

    return ~crc;
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	43db      	mvns	r3, r3
}
 8016b26:	4618      	mov	r0, r3
 8016b28:	3714      	adds	r7, #20
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	bc80      	pop	{r7}
 8016b2e:	4770      	bx	lr
 8016b30:	edb88320 	.word	0xedb88320

08016b34 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8016b34:	b580      	push	{r7, lr}
 8016b36:	b084      	sub	sp, #16
 8016b38:	af02      	add	r7, sp, #8
 8016b3a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016b3c:	4a24      	ldr	r2, [pc, #144]	@ (8016bd0 <RadioInit+0x9c>)
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8016b42:	4b24      	ldr	r3, [pc, #144]	@ (8016bd4 <RadioInit+0xa0>)
 8016b44:	2200      	movs	r2, #0
 8016b46:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016b48:	4b22      	ldr	r3, [pc, #136]	@ (8016bd4 <RadioInit+0xa0>)
 8016b4a:	2200      	movs	r2, #0
 8016b4c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8016b4e:	4b21      	ldr	r3, [pc, #132]	@ (8016bd4 <RadioInit+0xa0>)
 8016b50:	2200      	movs	r2, #0
 8016b52:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8016b54:	4b1f      	ldr	r3, [pc, #124]	@ (8016bd4 <RadioInit+0xa0>)
 8016b56:	2200      	movs	r2, #0
 8016b58:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8016b5a:	481f      	ldr	r0, [pc, #124]	@ (8016bd8 <RadioInit+0xa4>)
 8016b5c:	f001 ffc2 	bl	8018ae4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8016b60:	4b1c      	ldr	r3, [pc, #112]	@ (8016bd4 <RadioInit+0xa0>)
 8016b62:	2200      	movs	r2, #0
 8016b64:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8016b66:	4b1b      	ldr	r3, [pc, #108]	@ (8016bd4 <RadioInit+0xa0>)
 8016b68:	2200      	movs	r2, #0
 8016b6a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8016b6c:	f002 fa56 	bl	801901c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8016b70:	2100      	movs	r1, #0
 8016b72:	2000      	movs	r0, #0
 8016b74:	f002 fe22 	bl	80197bc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8016b78:	2204      	movs	r2, #4
 8016b7a:	2100      	movs	r1, #0
 8016b7c:	2001      	movs	r0, #1
 8016b7e:	f002 fbdf 	bl	8019340 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016b82:	2300      	movs	r3, #0
 8016b84:	2200      	movs	r2, #0
 8016b86:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016b8a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8016b8e:	f002 fb0f 	bl	80191b0 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8016b92:	f000 fe99 	bl	80178c8 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8016b96:	2300      	movs	r3, #0
 8016b98:	9300      	str	r3, [sp, #0]
 8016b9a:	4b10      	ldr	r3, [pc, #64]	@ (8016bdc <RadioInit+0xa8>)
 8016b9c:	2200      	movs	r2, #0
 8016b9e:	f04f 31ff 	mov.w	r1, #4294967295
 8016ba2:	480f      	ldr	r0, [pc, #60]	@ (8016be0 <RadioInit+0xac>)
 8016ba4:	f004 f844 	bl	801ac30 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8016ba8:	2300      	movs	r3, #0
 8016baa:	9300      	str	r3, [sp, #0]
 8016bac:	4b0d      	ldr	r3, [pc, #52]	@ (8016be4 <RadioInit+0xb0>)
 8016bae:	2200      	movs	r2, #0
 8016bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8016bb4:	480c      	ldr	r0, [pc, #48]	@ (8016be8 <RadioInit+0xb4>)
 8016bb6:	f004 f83b 	bl	801ac30 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8016bba:	4809      	ldr	r0, [pc, #36]	@ (8016be0 <RadioInit+0xac>)
 8016bbc:	f004 f8dc 	bl	801ad78 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8016bc0:	4809      	ldr	r0, [pc, #36]	@ (8016be8 <RadioInit+0xb4>)
 8016bc2:	f004 f8d9 	bl	801ad78 <UTIL_TIMER_Stop>
}
 8016bc6:	bf00      	nop
 8016bc8:	3708      	adds	r7, #8
 8016bca:	46bd      	mov	sp, r7
 8016bcc:	bd80      	pop	{r7, pc}
 8016bce:	bf00      	nop
 8016bd0:	200016b0 	.word	0x200016b0
 8016bd4:	200016b4 	.word	0x200016b4
 8016bd8:	08017cbd 	.word	0x08017cbd
 8016bdc:	08017c45 	.word	0x08017c45
 8016be0:	20001710 	.word	0x20001710
 8016be4:	08017c59 	.word	0x08017c59
 8016be8:	20001728 	.word	0x20001728

08016bec <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8016bf0:	f001 ffc0 	bl	8018b74 <SUBGRF_GetOperatingMode>
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	2b07      	cmp	r3, #7
 8016bf8:	d00a      	beq.n	8016c10 <RadioGetStatus+0x24>
 8016bfa:	2b07      	cmp	r3, #7
 8016bfc:	dc0a      	bgt.n	8016c14 <RadioGetStatus+0x28>
 8016bfe:	2b04      	cmp	r3, #4
 8016c00:	d002      	beq.n	8016c08 <RadioGetStatus+0x1c>
 8016c02:	2b05      	cmp	r3, #5
 8016c04:	d002      	beq.n	8016c0c <RadioGetStatus+0x20>
 8016c06:	e005      	b.n	8016c14 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8016c08:	2302      	movs	r3, #2
 8016c0a:	e004      	b.n	8016c16 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016c0c:	2301      	movs	r3, #1
 8016c0e:	e002      	b.n	8016c16 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8016c10:	2303      	movs	r3, #3
 8016c12:	e000      	b.n	8016c16 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016c14:	2300      	movs	r3, #0
    }
}
 8016c16:	4618      	mov	r0, r3
 8016c18:	bd80      	pop	{r7, pc}
	...

08016c1c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b082      	sub	sp, #8
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	4603      	mov	r3, r0
 8016c24:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8016c26:	4a2a      	ldr	r2, [pc, #168]	@ (8016cd0 <RadioSetModem+0xb4>)
 8016c28:	79fb      	ldrb	r3, [r7, #7]
 8016c2a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8016c2c:	79fb      	ldrb	r3, [r7, #7]
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f003 f9b1 	bl	8019f96 <RFW_SetRadioModem>
    switch( modem )
 8016c34:	79fb      	ldrb	r3, [r7, #7]
 8016c36:	2b05      	cmp	r3, #5
 8016c38:	d80e      	bhi.n	8016c58 <RadioSetModem+0x3c>
 8016c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8016c40 <RadioSetModem+0x24>)
 8016c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c40:	08016c67 	.word	0x08016c67
 8016c44:	08016c75 	.word	0x08016c75
 8016c48:	08016c59 	.word	0x08016c59
 8016c4c:	08016c9b 	.word	0x08016c9b
 8016c50:	08016ca9 	.word	0x08016ca9
 8016c54:	08016cb7 	.word	0x08016cb7
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8016c58:	2003      	movs	r0, #3
 8016c5a:	f002 fb4b 	bl	80192f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8016cd0 <RadioSetModem+0xb4>)
 8016c60:	2200      	movs	r2, #0
 8016c62:	735a      	strb	r2, [r3, #13]
        break;
 8016c64:	e02f      	b.n	8016cc6 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016c66:	2000      	movs	r0, #0
 8016c68:	f002 fb44 	bl	80192f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016c6c:	4b18      	ldr	r3, [pc, #96]	@ (8016cd0 <RadioSetModem+0xb4>)
 8016c6e:	2200      	movs	r2, #0
 8016c70:	735a      	strb	r2, [r3, #13]
        break;
 8016c72:	e028      	b.n	8016cc6 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8016c74:	2001      	movs	r0, #1
 8016c76:	f002 fb3d 	bl	80192f4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016c7a:	4b15      	ldr	r3, [pc, #84]	@ (8016cd0 <RadioSetModem+0xb4>)
 8016c7c:	7b5a      	ldrb	r2, [r3, #13]
 8016c7e:	4b14      	ldr	r3, [pc, #80]	@ (8016cd0 <RadioSetModem+0xb4>)
 8016c80:	7b1b      	ldrb	r3, [r3, #12]
 8016c82:	429a      	cmp	r2, r3
 8016c84:	d01e      	beq.n	8016cc4 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016c86:	4b12      	ldr	r3, [pc, #72]	@ (8016cd0 <RadioSetModem+0xb4>)
 8016c88:	7b1a      	ldrb	r2, [r3, #12]
 8016c8a:	4b11      	ldr	r3, [pc, #68]	@ (8016cd0 <RadioSetModem+0xb4>)
 8016c8c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016c8e:	4b10      	ldr	r3, [pc, #64]	@ (8016cd0 <RadioSetModem+0xb4>)
 8016c90:	7b5b      	ldrb	r3, [r3, #13]
 8016c92:	4618      	mov	r0, r3
 8016c94:	f000 ffa0 	bl	8017bd8 <RadioSetPublicNetwork>
        }
        break;
 8016c98:	e014      	b.n	8016cc4 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016c9a:	2002      	movs	r0, #2
 8016c9c:	f002 fb2a 	bl	80192f4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8016cd0 <RadioSetModem+0xb4>)
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	735a      	strb	r2, [r3, #13]
        break;
 8016ca6:	e00e      	b.n	8016cc6 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016ca8:	2002      	movs	r0, #2
 8016caa:	f002 fb23 	bl	80192f4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016cae:	4b08      	ldr	r3, [pc, #32]	@ (8016cd0 <RadioSetModem+0xb4>)
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	735a      	strb	r2, [r3, #13]
        break;
 8016cb4:	e007      	b.n	8016cc6 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016cb6:	2000      	movs	r0, #0
 8016cb8:	f002 fb1c 	bl	80192f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016cbc:	4b04      	ldr	r3, [pc, #16]	@ (8016cd0 <RadioSetModem+0xb4>)
 8016cbe:	2200      	movs	r2, #0
 8016cc0:	735a      	strb	r2, [r3, #13]
        break;
 8016cc2:	e000      	b.n	8016cc6 <RadioSetModem+0xaa>
        break;
 8016cc4:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8016cc6:	bf00      	nop
 8016cc8:	3708      	adds	r7, #8
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	bd80      	pop	{r7, pc}
 8016cce:	bf00      	nop
 8016cd0:	200016b4 	.word	0x200016b4

08016cd4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b082      	sub	sp, #8
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8016cdc:	6878      	ldr	r0, [r7, #4]
 8016cde:	f002 fac3 	bl	8019268 <SUBGRF_SetRfFrequency>
}
 8016ce2:	bf00      	nop
 8016ce4:	3708      	adds	r7, #8
 8016ce6:	46bd      	mov	sp, r7
 8016ce8:	bd80      	pop	{r7, pc}

08016cea <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8016cea:	b580      	push	{r7, lr}
 8016cec:	b090      	sub	sp, #64	@ 0x40
 8016cee:	af0a      	add	r7, sp, #40	@ 0x28
 8016cf0:	60f8      	str	r0, [r7, #12]
 8016cf2:	60b9      	str	r1, [r7, #8]
 8016cf4:	603b      	str	r3, [r7, #0]
 8016cf6:	4613      	mov	r3, r2
 8016cf8:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8016cfa:	2301      	movs	r3, #1
 8016cfc:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8016cfe:	2300      	movs	r3, #0
 8016d00:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8016d02:	2300      	movs	r3, #0
 8016d04:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8016d06:	f000 fdf2 	bl	80178ee <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8016d0a:	2000      	movs	r0, #0
 8016d0c:	f7ff ff86 	bl	8016c1c <RadioSetModem>

    RadioSetChannel( freq );
 8016d10:	68f8      	ldr	r0, [r7, #12]
 8016d12:	f7ff ffdf 	bl	8016cd4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8016d16:	2301      	movs	r3, #1
 8016d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	9308      	str	r3, [sp, #32]
 8016d1e:	2300      	movs	r3, #0
 8016d20:	9307      	str	r3, [sp, #28]
 8016d22:	2300      	movs	r3, #0
 8016d24:	9306      	str	r3, [sp, #24]
 8016d26:	2300      	movs	r3, #0
 8016d28:	9305      	str	r3, [sp, #20]
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	9304      	str	r3, [sp, #16]
 8016d2e:	2300      	movs	r3, #0
 8016d30:	9303      	str	r3, [sp, #12]
 8016d32:	2300      	movs	r3, #0
 8016d34:	9302      	str	r3, [sp, #8]
 8016d36:	2303      	movs	r3, #3
 8016d38:	9301      	str	r3, [sp, #4]
 8016d3a:	68bb      	ldr	r3, [r7, #8]
 8016d3c:	9300      	str	r3, [sp, #0]
 8016d3e:	2300      	movs	r3, #0
 8016d40:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8016d44:	68b9      	ldr	r1, [r7, #8]
 8016d46:	2000      	movs	r0, #0
 8016d48:	f000 f83c 	bl	8016dc4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8016d4c:	2000      	movs	r0, #0
 8016d4e:	f000 fdd5 	bl	80178fc <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016d52:	f000 ff6f 	bl	8017c34 <RadioGetWakeupTime>
 8016d56:	4603      	mov	r3, r0
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f7eb fa1f 	bl	800219c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8016d5e:	f004 f925 	bl	801afac <UTIL_TIMER_GetCurrentTime>
 8016d62:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016d64:	e00d      	b.n	8016d82 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8016d66:	2000      	movs	r0, #0
 8016d68:	f000 feb6 	bl	8017ad8 <RadioRssi>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016d70:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016d74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016d78:	429a      	cmp	r2, r3
 8016d7a:	dd02      	ble.n	8016d82 <RadioIsChannelFree+0x98>
        {
            status = false;
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	75fb      	strb	r3, [r7, #23]
            break;
 8016d80:	e006      	b.n	8016d90 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016d82:	6938      	ldr	r0, [r7, #16]
 8016d84:	f004 f924 	bl	801afd0 <UTIL_TIMER_GetElapsedTime>
 8016d88:	4602      	mov	r2, r0
 8016d8a:	683b      	ldr	r3, [r7, #0]
 8016d8c:	4293      	cmp	r3, r2
 8016d8e:	d8ea      	bhi.n	8016d66 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8016d90:	f000 fdad 	bl	80178ee <RadioStandby>

    return status;
 8016d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d96:	4618      	mov	r0, r3
 8016d98:	3718      	adds	r7, #24
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	bd80      	pop	{r7, pc}

08016d9e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8016d9e:	b580      	push	{r7, lr}
 8016da0:	b082      	sub	sp, #8
 8016da2:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016da4:	2300      	movs	r3, #0
 8016da6:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016da8:	2300      	movs	r3, #0
 8016daa:	2200      	movs	r2, #0
 8016dac:	2100      	movs	r1, #0
 8016dae:	2000      	movs	r0, #0
 8016db0:	f002 f9fe 	bl	80191b0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8016db4:	f001 ffaf 	bl	8018d16 <SUBGRF_GetRandom>
 8016db8:	6078      	str	r0, [r7, #4]

    return rnd;
 8016dba:	687b      	ldr	r3, [r7, #4]
}
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	3708      	adds	r7, #8
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	bd80      	pop	{r7, pc}

08016dc4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b08a      	sub	sp, #40	@ 0x28
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	60b9      	str	r1, [r7, #8]
 8016dcc:	607a      	str	r2, [r7, #4]
 8016dce:	461a      	mov	r2, r3
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	73fb      	strb	r3, [r7, #15]
 8016dd4:	4613      	mov	r3, r2
 8016dd6:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8016dd8:	4ab9      	ldr	r2, [pc, #740]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016dda:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016dde:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8016de0:	f003 f897 	bl	8019f12 <RFW_DeInit>
    if( rxContinuous == true )
 8016de4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d001      	beq.n	8016df0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016dec:	2300      	movs	r3, #0
 8016dee:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8016df0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d004      	beq.n	8016e02 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016df8:	4ab2      	ldr	r2, [pc, #712]	@ (80170c4 <RadioSetRxConfig+0x300>)
 8016dfa:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016dfe:	7013      	strb	r3, [r2, #0]
 8016e00:	e002      	b.n	8016e08 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016e02:	4bb0      	ldr	r3, [pc, #704]	@ (80170c4 <RadioSetRxConfig+0x300>)
 8016e04:	22ff      	movs	r2, #255	@ 0xff
 8016e06:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016e08:	7bfb      	ldrb	r3, [r7, #15]
 8016e0a:	2b05      	cmp	r3, #5
 8016e0c:	d009      	beq.n	8016e22 <RadioSetRxConfig+0x5e>
 8016e0e:	2b05      	cmp	r3, #5
 8016e10:	f300 81d7 	bgt.w	80171c2 <RadioSetRxConfig+0x3fe>
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	f000 80bf 	beq.w	8016f98 <RadioSetRxConfig+0x1d4>
 8016e1a:	2b01      	cmp	r3, #1
 8016e1c:	f000 8124 	beq.w	8017068 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016e20:	e1cf      	b.n	80171c2 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8016e22:	2001      	movs	r0, #1
 8016e24:	f002 f8bc 	bl	8018fa0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016e28:	4ba5      	ldr	r3, [pc, #660]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016e30:	4aa3      	ldr	r2, [pc, #652]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8016e36:	4ba2      	ldr	r3, [pc, #648]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016e38:	2209      	movs	r2, #9
 8016e3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8016e3e:	4ba0      	ldr	r3, [pc, #640]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016e40:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016e44:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016e46:	68b8      	ldr	r0, [r7, #8]
 8016e48:	f002 ff96 	bl	8019d78 <SUBGRF_GetFskBandwidthRegValue>
 8016e4c:	4603      	mov	r3, r0
 8016e4e:	461a      	mov	r2, r3
 8016e50:	4b9b      	ldr	r3, [pc, #620]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016e56:	4b9a      	ldr	r3, [pc, #616]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016e58:	2200      	movs	r2, #0
 8016e5a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016e5c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016e5e:	00db      	lsls	r3, r3, #3
 8016e60:	b29a      	uxth	r2, r3
 8016e62:	4b97      	ldr	r3, [pc, #604]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016e64:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8016e66:	4b96      	ldr	r3, [pc, #600]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016e68:	2200      	movs	r2, #0
 8016e6a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8016e6c:	4b94      	ldr	r3, [pc, #592]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016e6e:	2210      	movs	r2, #16
 8016e70:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016e72:	4b93      	ldr	r3, [pc, #588]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016e74:	2200      	movs	r2, #0
 8016e76:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016e78:	4b91      	ldr	r3, [pc, #580]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016e7e:	4b91      	ldr	r3, [pc, #580]	@ (80170c4 <RadioSetRxConfig+0x300>)
 8016e80:	781a      	ldrb	r2, [r3, #0]
 8016e82:	4b8f      	ldr	r3, [pc, #572]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016e84:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016e86:	4b8e      	ldr	r3, [pc, #568]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016e88:	2201      	movs	r2, #1
 8016e8a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016e8c:	4b8c      	ldr	r3, [pc, #560]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016e8e:	2200      	movs	r2, #0
 8016e90:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8016e92:	2005      	movs	r0, #5
 8016e94:	f7ff fec2 	bl	8016c1c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016e98:	488b      	ldr	r0, [pc, #556]	@ (80170c8 <RadioSetRxConfig+0x304>)
 8016e9a:	f002 fb1f 	bl	80194dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016e9e:	488b      	ldr	r0, [pc, #556]	@ (80170cc <RadioSetRxConfig+0x308>)
 8016ea0:	f002 fbee 	bl	8019680 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016ea4:	4a8a      	ldr	r2, [pc, #552]	@ (80170d0 <RadioSetRxConfig+0x30c>)
 8016ea6:	f107 031c 	add.w	r3, r7, #28
 8016eaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016eae:	e883 0003 	stmia.w	r3, {r0, r1}
 8016eb2:	f107 031c 	add.w	r3, r7, #28
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f001 feab 	bl	8018c12 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016ebc:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8016ec0:	f001 fef6 	bl	8018cb0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8016ec4:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8016ec8:	f000 fe24 	bl	8017b14 <RadioRead>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8016ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016ed6:	f023 0310 	bic.w	r3, r3, #16
 8016eda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8016ede:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016ee2:	4619      	mov	r1, r3
 8016ee4:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8016ee8:	f000 fe02 	bl	8017af0 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8016eec:	2104      	movs	r1, #4
 8016eee:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8016ef2:	f000 fdfd 	bl	8017af0 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8016ef6:	f640 009b 	movw	r0, #2203	@ 0x89b
 8016efa:	f000 fe0b 	bl	8017b14 <RadioRead>
 8016efe:	4603      	mov	r3, r0
 8016f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f08:	f023 031c 	bic.w	r3, r3, #28
 8016f0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8016f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f14:	f043 0308 	orr.w	r3, r3, #8
 8016f18:	b2db      	uxtb	r3, r3
 8016f1a:	4619      	mov	r1, r3
 8016f1c:	f640 009b 	movw	r0, #2203	@ 0x89b
 8016f20:	f000 fde6 	bl	8017af0 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8016f24:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8016f28:	f000 fdf4 	bl	8017b14 <RadioRead>
 8016f2c:	4603      	mov	r3, r0
 8016f2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016f32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f36:	f023 0318 	bic.w	r3, r3, #24
 8016f3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8016f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f42:	f043 0318 	orr.w	r3, r3, #24
 8016f46:	b2db      	uxtb	r3, r3
 8016f48:	4619      	mov	r1, r3
 8016f4a:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8016f4e:	f000 fdcf 	bl	8017af0 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8016f52:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8016f56:	f000 fddd 	bl	8017b14 <RadioRead>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8016f60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016f68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8016f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f70:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8016f74:	b2db      	uxtb	r3, r3
 8016f76:	4619      	mov	r1, r3
 8016f78:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8016f7c:	f000 fdb8 	bl	8017af0 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016f80:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8016f82:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016f86:	fb02 f303 	mul.w	r3, r2, r3
 8016f8a:	461a      	mov	r2, r3
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016f92:	4a4b      	ldr	r2, [pc, #300]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016f94:	6093      	str	r3, [r2, #8]
            break;
 8016f96:	e115      	b.n	80171c4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016f98:	2000      	movs	r0, #0
 8016f9a:	f002 f801 	bl	8018fa0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016f9e:	4b48      	ldr	r3, [pc, #288]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016fa6:	4a46      	ldr	r2, [pc, #280]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016fac:	4b44      	ldr	r3, [pc, #272]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016fae:	220b      	movs	r2, #11
 8016fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016fb4:	68b8      	ldr	r0, [r7, #8]
 8016fb6:	f002 fedf 	bl	8019d78 <SUBGRF_GetFskBandwidthRegValue>
 8016fba:	4603      	mov	r3, r0
 8016fbc:	461a      	mov	r2, r3
 8016fbe:	4b40      	ldr	r3, [pc, #256]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016fca:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016fcc:	00db      	lsls	r3, r3, #3
 8016fce:	b29a      	uxth	r2, r3
 8016fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016fd2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016fd6:	2204      	movs	r2, #4
 8016fd8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016fda:	4b39      	ldr	r3, [pc, #228]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016fdc:	2218      	movs	r2, #24
 8016fde:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016fe0:	4b37      	ldr	r3, [pc, #220]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016fe6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016fea:	f083 0301 	eor.w	r3, r3, #1
 8016fee:	b2db      	uxtb	r3, r3
 8016ff0:	461a      	mov	r2, r3
 8016ff2:	4b33      	ldr	r3, [pc, #204]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016ff4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016ff6:	4b33      	ldr	r3, [pc, #204]	@ (80170c4 <RadioSetRxConfig+0x300>)
 8016ff8:	781a      	ldrb	r2, [r3, #0]
 8016ffa:	4b31      	ldr	r3, [pc, #196]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8016ffc:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8016ffe:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017002:	2b00      	cmp	r3, #0
 8017004:	d003      	beq.n	801700e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017006:	4b2e      	ldr	r3, [pc, #184]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8017008:	22f2      	movs	r2, #242	@ 0xf2
 801700a:	75da      	strb	r2, [r3, #23]
 801700c:	e002      	b.n	8017014 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801700e:	4b2c      	ldr	r3, [pc, #176]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8017010:	2201      	movs	r2, #1
 8017012:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017014:	4b2a      	ldr	r3, [pc, #168]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8017016:	2201      	movs	r2, #1
 8017018:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801701a:	f000 fc68 	bl	80178ee <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801701e:	2000      	movs	r0, #0
 8017020:	f7ff fdfc 	bl	8016c1c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017024:	4828      	ldr	r0, [pc, #160]	@ (80170c8 <RadioSetRxConfig+0x304>)
 8017026:	f002 fa59 	bl	80194dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801702a:	4828      	ldr	r0, [pc, #160]	@ (80170cc <RadioSetRxConfig+0x308>)
 801702c:	f002 fb28 	bl	8019680 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017030:	4a28      	ldr	r2, [pc, #160]	@ (80170d4 <RadioSetRxConfig+0x310>)
 8017032:	f107 0314 	add.w	r3, r7, #20
 8017036:	e892 0003 	ldmia.w	r2, {r0, r1}
 801703a:	e883 0003 	stmia.w	r3, {r0, r1}
 801703e:	f107 0314 	add.w	r3, r7, #20
 8017042:	4618      	mov	r0, r3
 8017044:	f001 fde5 	bl	8018c12 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017048:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801704c:	f001 fe30 	bl	8018cb0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017050:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017052:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017056:	fb02 f303 	mul.w	r3, r2, r3
 801705a:	461a      	mov	r2, r3
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017062:	4a17      	ldr	r2, [pc, #92]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8017064:	6093      	str	r3, [r2, #8]
            break;
 8017066:	e0ad      	b.n	80171c4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017068:	2000      	movs	r0, #0
 801706a:	f001 ff99 	bl	8018fa0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801706e:	4b14      	ldr	r3, [pc, #80]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8017070:	2201      	movs	r2, #1
 8017072:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	b2da      	uxtb	r2, r3
 801707a:	4b11      	ldr	r3, [pc, #68]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 801707c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8017080:	4a15      	ldr	r2, [pc, #84]	@ (80170d8 <RadioSetRxConfig+0x314>)
 8017082:	68bb      	ldr	r3, [r7, #8]
 8017084:	4413      	add	r3, r2
 8017086:	781a      	ldrb	r2, [r3, #0]
 8017088:	4b0d      	ldr	r3, [pc, #52]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 801708a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801708e:	4a0c      	ldr	r2, [pc, #48]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 8017090:	7bbb      	ldrb	r3, [r7, #14]
 8017092:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017096:	68bb      	ldr	r3, [r7, #8]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d105      	bne.n	80170a8 <RadioSetRxConfig+0x2e4>
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	2b0b      	cmp	r3, #11
 80170a0:	d008      	beq.n	80170b4 <RadioSetRxConfig+0x2f0>
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	2b0c      	cmp	r3, #12
 80170a6:	d005      	beq.n	80170b4 <RadioSetRxConfig+0x2f0>
 80170a8:	68bb      	ldr	r3, [r7, #8]
 80170aa:	2b01      	cmp	r3, #1
 80170ac:	d116      	bne.n	80170dc <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	2b0c      	cmp	r3, #12
 80170b2:	d113      	bne.n	80170dc <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80170b4:	4b02      	ldr	r3, [pc, #8]	@ (80170c0 <RadioSetRxConfig+0x2fc>)
 80170b6:	2201      	movs	r2, #1
 80170b8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80170bc:	e012      	b.n	80170e4 <RadioSetRxConfig+0x320>
 80170be:	bf00      	nop
 80170c0:	200016b4 	.word	0x200016b4
 80170c4:	20000124 	.word	0x20000124
 80170c8:	200016ec 	.word	0x200016ec
 80170cc:	200016c2 	.word	0x200016c2
 80170d0:	0801e51c 	.word	0x0801e51c
 80170d4:	0801e524 	.word	0x0801e524
 80170d8:	0801eb9c 	.word	0x0801eb9c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80170dc:	4b3b      	ldr	r3, [pc, #236]	@ (80171cc <RadioSetRxConfig+0x408>)
 80170de:	2200      	movs	r2, #0
 80170e0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80170e4:	4b39      	ldr	r3, [pc, #228]	@ (80171cc <RadioSetRxConfig+0x408>)
 80170e6:	2201      	movs	r2, #1
 80170e8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80170ea:	4b38      	ldr	r3, [pc, #224]	@ (80171cc <RadioSetRxConfig+0x408>)
 80170ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80170f0:	2b05      	cmp	r3, #5
 80170f2:	d004      	beq.n	80170fe <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80170f4:	4b35      	ldr	r3, [pc, #212]	@ (80171cc <RadioSetRxConfig+0x408>)
 80170f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80170fa:	2b06      	cmp	r3, #6
 80170fc:	d10a      	bne.n	8017114 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80170fe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017100:	2b0b      	cmp	r3, #11
 8017102:	d803      	bhi.n	801710c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017104:	4b31      	ldr	r3, [pc, #196]	@ (80171cc <RadioSetRxConfig+0x408>)
 8017106:	220c      	movs	r2, #12
 8017108:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801710a:	e006      	b.n	801711a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801710c:	4a2f      	ldr	r2, [pc, #188]	@ (80171cc <RadioSetRxConfig+0x408>)
 801710e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017110:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017112:	e002      	b.n	801711a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017114:	4a2d      	ldr	r2, [pc, #180]	@ (80171cc <RadioSetRxConfig+0x408>)
 8017116:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017118:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801711a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801711e:	4b2b      	ldr	r3, [pc, #172]	@ (80171cc <RadioSetRxConfig+0x408>)
 8017120:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017122:	4b2b      	ldr	r3, [pc, #172]	@ (80171d0 <RadioSetRxConfig+0x40c>)
 8017124:	781a      	ldrb	r2, [r3, #0]
 8017126:	4b29      	ldr	r3, [pc, #164]	@ (80171cc <RadioSetRxConfig+0x408>)
 8017128:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801712a:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 801712e:	4b27      	ldr	r3, [pc, #156]	@ (80171cc <RadioSetRxConfig+0x408>)
 8017130:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017134:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8017138:	4b24      	ldr	r3, [pc, #144]	@ (80171cc <RadioSetRxConfig+0x408>)
 801713a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801713e:	f000 fbd6 	bl	80178ee <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017142:	2001      	movs	r0, #1
 8017144:	f7ff fd6a 	bl	8016c1c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017148:	4822      	ldr	r0, [pc, #136]	@ (80171d4 <RadioSetRxConfig+0x410>)
 801714a:	f002 f9c7 	bl	80194dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801714e:	4822      	ldr	r0, [pc, #136]	@ (80171d8 <RadioSetRxConfig+0x414>)
 8017150:	f002 fa96 	bl	8019680 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017154:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017156:	b2db      	uxtb	r3, r3
 8017158:	4618      	mov	r0, r3
 801715a:	f001 ff30 	bl	8018fbe <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801715e:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017162:	f002 fbf7 	bl	8019954 <SUBGRF_ReadRegister>
 8017166:	4603      	mov	r3, r0
 8017168:	f003 0301 	and.w	r3, r3, #1
 801716c:	b2db      	uxtb	r3, r3
 801716e:	4619      	mov	r1, r3
 8017170:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017174:	f002 fbcc 	bl	8019910 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017178:	4b14      	ldr	r3, [pc, #80]	@ (80171cc <RadioSetRxConfig+0x408>)
 801717a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801717e:	2b01      	cmp	r3, #1
 8017180:	d10d      	bne.n	801719e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8017182:	f240 7036 	movw	r0, #1846	@ 0x736
 8017186:	f002 fbe5 	bl	8019954 <SUBGRF_ReadRegister>
 801718a:	4603      	mov	r3, r0
 801718c:	f023 0304 	bic.w	r3, r3, #4
 8017190:	b2db      	uxtb	r3, r3
 8017192:	4619      	mov	r1, r3
 8017194:	f240 7036 	movw	r0, #1846	@ 0x736
 8017198:	f002 fbba 	bl	8019910 <SUBGRF_WriteRegister>
 801719c:	e00c      	b.n	80171b8 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801719e:	f240 7036 	movw	r0, #1846	@ 0x736
 80171a2:	f002 fbd7 	bl	8019954 <SUBGRF_ReadRegister>
 80171a6:	4603      	mov	r3, r0
 80171a8:	f043 0304 	orr.w	r3, r3, #4
 80171ac:	b2db      	uxtb	r3, r3
 80171ae:	4619      	mov	r1, r3
 80171b0:	f240 7036 	movw	r0, #1846	@ 0x736
 80171b4:	f002 fbac 	bl	8019910 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80171b8:	4b04      	ldr	r3, [pc, #16]	@ (80171cc <RadioSetRxConfig+0x408>)
 80171ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80171be:	609a      	str	r2, [r3, #8]
            break;
 80171c0:	e000      	b.n	80171c4 <RadioSetRxConfig+0x400>
            break;
 80171c2:	bf00      	nop
    }
}
 80171c4:	bf00      	nop
 80171c6:	3728      	adds	r7, #40	@ 0x28
 80171c8:	46bd      	mov	sp, r7
 80171ca:	bd80      	pop	{r7, pc}
 80171cc:	200016b4 	.word	0x200016b4
 80171d0:	20000124 	.word	0x20000124
 80171d4:	200016ec 	.word	0x200016ec
 80171d8:	200016c2 	.word	0x200016c2

080171dc <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b086      	sub	sp, #24
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	60ba      	str	r2, [r7, #8]
 80171e4:	607b      	str	r3, [r7, #4]
 80171e6:	4603      	mov	r3, r0
 80171e8:	73fb      	strb	r3, [r7, #15]
 80171ea:	460b      	mov	r3, r1
 80171ec:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80171ee:	f002 fe90 	bl	8019f12 <RFW_DeInit>
    switch( modem )
 80171f2:	7bfb      	ldrb	r3, [r7, #15]
 80171f4:	2b04      	cmp	r3, #4
 80171f6:	f000 80c7 	beq.w	8017388 <RadioSetTxConfig+0x1ac>
 80171fa:	2b04      	cmp	r3, #4
 80171fc:	f300 80d6 	bgt.w	80173ac <RadioSetTxConfig+0x1d0>
 8017200:	2b00      	cmp	r3, #0
 8017202:	d002      	beq.n	801720a <RadioSetTxConfig+0x2e>
 8017204:	2b01      	cmp	r3, #1
 8017206:	d059      	beq.n	80172bc <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017208:	e0d0      	b.n	80173ac <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801720a:	4b77      	ldr	r3, [pc, #476]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 801720c:	2200      	movs	r2, #0
 801720e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017212:	4a75      	ldr	r2, [pc, #468]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017214:	6a3b      	ldr	r3, [r7, #32]
 8017216:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017218:	4b73      	ldr	r3, [pc, #460]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 801721a:	220b      	movs	r2, #11
 801721c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017220:	6878      	ldr	r0, [r7, #4]
 8017222:	f002 fda9 	bl	8019d78 <SUBGRF_GetFskBandwidthRegValue>
 8017226:	4603      	mov	r3, r0
 8017228:	461a      	mov	r2, r3
 801722a:	4b6f      	ldr	r3, [pc, #444]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 801722c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8017230:	4a6d      	ldr	r2, [pc, #436]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017232:	68bb      	ldr	r3, [r7, #8]
 8017234:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017236:	4b6c      	ldr	r3, [pc, #432]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017238:	2200      	movs	r2, #0
 801723a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801723c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801723e:	00db      	lsls	r3, r3, #3
 8017240:	b29a      	uxth	r2, r3
 8017242:	4b69      	ldr	r3, [pc, #420]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017244:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017246:	4b68      	ldr	r3, [pc, #416]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017248:	2204      	movs	r2, #4
 801724a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801724c:	4b66      	ldr	r3, [pc, #408]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 801724e:	2218      	movs	r2, #24
 8017250:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017252:	4b65      	ldr	r3, [pc, #404]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017254:	2200      	movs	r2, #0
 8017256:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017258:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801725c:	f083 0301 	eor.w	r3, r3, #1
 8017260:	b2db      	uxtb	r3, r3
 8017262:	461a      	mov	r2, r3
 8017264:	4b60      	ldr	r3, [pc, #384]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017266:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8017268:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801726c:	2b00      	cmp	r3, #0
 801726e:	d003      	beq.n	8017278 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017270:	4b5d      	ldr	r3, [pc, #372]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017272:	22f2      	movs	r2, #242	@ 0xf2
 8017274:	75da      	strb	r2, [r3, #23]
 8017276:	e002      	b.n	801727e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017278:	4b5b      	ldr	r3, [pc, #364]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 801727a:	2201      	movs	r2, #1
 801727c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801727e:	4b5a      	ldr	r3, [pc, #360]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017280:	2201      	movs	r2, #1
 8017282:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017284:	f000 fb33 	bl	80178ee <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8017288:	2000      	movs	r0, #0
 801728a:	f7ff fcc7 	bl	8016c1c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801728e:	4857      	ldr	r0, [pc, #348]	@ (80173ec <RadioSetTxConfig+0x210>)
 8017290:	f002 f924 	bl	80194dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017294:	4856      	ldr	r0, [pc, #344]	@ (80173f0 <RadioSetTxConfig+0x214>)
 8017296:	f002 f9f3 	bl	8019680 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801729a:	4a56      	ldr	r2, [pc, #344]	@ (80173f4 <RadioSetTxConfig+0x218>)
 801729c:	f107 0310 	add.w	r3, r7, #16
 80172a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80172a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80172a8:	f107 0310 	add.w	r3, r7, #16
 80172ac:	4618      	mov	r0, r3
 80172ae:	f001 fcb0 	bl	8018c12 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80172b2:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80172b6:	f001 fcfb 	bl	8018cb0 <SUBGRF_SetWhiteningSeed>
            break;
 80172ba:	e078      	b.n	80173ae <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80172bc:	4b4a      	ldr	r3, [pc, #296]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 80172be:	2201      	movs	r2, #1
 80172c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80172c4:	6a3b      	ldr	r3, [r7, #32]
 80172c6:	b2da      	uxtb	r2, r3
 80172c8:	4b47      	ldr	r3, [pc, #284]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 80172ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80172ce:	4a4a      	ldr	r2, [pc, #296]	@ (80173f8 <RadioSetTxConfig+0x21c>)
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	4413      	add	r3, r2
 80172d4:	781a      	ldrb	r2, [r3, #0]
 80172d6:	4b44      	ldr	r3, [pc, #272]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 80172d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80172dc:	4a42      	ldr	r2, [pc, #264]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 80172de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80172e2:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d105      	bne.n	80172f8 <RadioSetTxConfig+0x11c>
 80172ec:	6a3b      	ldr	r3, [r7, #32]
 80172ee:	2b0b      	cmp	r3, #11
 80172f0:	d008      	beq.n	8017304 <RadioSetTxConfig+0x128>
 80172f2:	6a3b      	ldr	r3, [r7, #32]
 80172f4:	2b0c      	cmp	r3, #12
 80172f6:	d005      	beq.n	8017304 <RadioSetTxConfig+0x128>
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	2b01      	cmp	r3, #1
 80172fc:	d107      	bne.n	801730e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80172fe:	6a3b      	ldr	r3, [r7, #32]
 8017300:	2b0c      	cmp	r3, #12
 8017302:	d104      	bne.n	801730e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017304:	4b38      	ldr	r3, [pc, #224]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017306:	2201      	movs	r2, #1
 8017308:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 801730c:	e003      	b.n	8017316 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801730e:	4b36      	ldr	r3, [pc, #216]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017310:	2200      	movs	r2, #0
 8017312:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017316:	4b34      	ldr	r3, [pc, #208]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017318:	2201      	movs	r2, #1
 801731a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801731c:	4b32      	ldr	r3, [pc, #200]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 801731e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017322:	2b05      	cmp	r3, #5
 8017324:	d004      	beq.n	8017330 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017326:	4b30      	ldr	r3, [pc, #192]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017328:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801732c:	2b06      	cmp	r3, #6
 801732e:	d10a      	bne.n	8017346 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8017330:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017332:	2b0b      	cmp	r3, #11
 8017334:	d803      	bhi.n	801733e <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017336:	4b2c      	ldr	r3, [pc, #176]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017338:	220c      	movs	r2, #12
 801733a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801733c:	e006      	b.n	801734c <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801733e:	4a2a      	ldr	r2, [pc, #168]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017340:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017342:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017344:	e002      	b.n	801734c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017346:	4a28      	ldr	r2, [pc, #160]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017348:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801734a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801734c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017350:	4b25      	ldr	r3, [pc, #148]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017352:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017354:	4b29      	ldr	r3, [pc, #164]	@ (80173fc <RadioSetTxConfig+0x220>)
 8017356:	781a      	ldrb	r2, [r3, #0]
 8017358:	4b23      	ldr	r3, [pc, #140]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 801735a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801735c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017360:	4b21      	ldr	r3, [pc, #132]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017362:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017366:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801736a:	4b1f      	ldr	r3, [pc, #124]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 801736c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8017370:	f000 fabd 	bl	80178ee <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017374:	2001      	movs	r0, #1
 8017376:	f7ff fc51 	bl	8016c1c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801737a:	481c      	ldr	r0, [pc, #112]	@ (80173ec <RadioSetTxConfig+0x210>)
 801737c:	f002 f8ae 	bl	80194dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017380:	481b      	ldr	r0, [pc, #108]	@ (80173f0 <RadioSetTxConfig+0x214>)
 8017382:	f002 f97d 	bl	8019680 <SUBGRF_SetPacketParams>
            break;
 8017386:	e012      	b.n	80173ae <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8017388:	2004      	movs	r0, #4
 801738a:	f7ff fc47 	bl	8016c1c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801738e:	4b16      	ldr	r3, [pc, #88]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017390:	2202      	movs	r2, #2
 8017392:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8017396:	4a14      	ldr	r2, [pc, #80]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 8017398:	6a3b      	ldr	r3, [r7, #32]
 801739a:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801739c:	4b12      	ldr	r3, [pc, #72]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 801739e:	2216      	movs	r2, #22
 80173a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80173a4:	4811      	ldr	r0, [pc, #68]	@ (80173ec <RadioSetTxConfig+0x210>)
 80173a6:	f002 f899 	bl	80194dc <SUBGRF_SetModulationParams>
            break;
 80173aa:	e000      	b.n	80173ae <RadioSetTxConfig+0x1d2>
            break;
 80173ac:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80173ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80173b2:	4618      	mov	r0, r3
 80173b4:	f002 fbe2 	bl	8019b7c <SUBGRF_SetRfTxPower>
 80173b8:	4603      	mov	r3, r0
 80173ba:	461a      	mov	r2, r3
 80173bc:	4b0a      	ldr	r3, [pc, #40]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 80173be:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80173c2:	210e      	movs	r1, #14
 80173c4:	f640 101f 	movw	r0, #2335	@ 0x91f
 80173c8:	f002 faa2 	bl	8019910 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80173cc:	4b06      	ldr	r3, [pc, #24]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 80173ce:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80173d2:	4618      	mov	r0, r3
 80173d4:	f002 fdb1 	bl	8019f3a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80173d8:	4a03      	ldr	r2, [pc, #12]	@ (80173e8 <RadioSetTxConfig+0x20c>)
 80173da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80173dc:	6053      	str	r3, [r2, #4]
}
 80173de:	bf00      	nop
 80173e0:	3718      	adds	r7, #24
 80173e2:	46bd      	mov	sp, r7
 80173e4:	bd80      	pop	{r7, pc}
 80173e6:	bf00      	nop
 80173e8:	200016b4 	.word	0x200016b4
 80173ec:	200016ec 	.word	0x200016ec
 80173f0:	200016c2 	.word	0x200016c2
 80173f4:	0801e524 	.word	0x0801e524
 80173f8:	0801eb9c 	.word	0x0801eb9c
 80173fc:	20000124 	.word	0x20000124

08017400 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8017400:	b480      	push	{r7}
 8017402:	b083      	sub	sp, #12
 8017404:	af00      	add	r7, sp, #0
 8017406:	6078      	str	r0, [r7, #4]
    return true;
 8017408:	2301      	movs	r3, #1
}
 801740a:	4618      	mov	r0, r3
 801740c:	370c      	adds	r7, #12
 801740e:	46bd      	mov	sp, r7
 8017410:	bc80      	pop	{r7}
 8017412:	4770      	bx	lr

08017414 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8017414:	b480      	push	{r7}
 8017416:	b085      	sub	sp, #20
 8017418:	af00      	add	r7, sp, #0
 801741a:	4603      	mov	r3, r0
 801741c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801741e:	2300      	movs	r3, #0
 8017420:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8017422:	79fb      	ldrb	r3, [r7, #7]
 8017424:	2b0a      	cmp	r3, #10
 8017426:	d83e      	bhi.n	80174a6 <RadioGetLoRaBandwidthInHz+0x92>
 8017428:	a201      	add	r2, pc, #4	@ (adr r2, 8017430 <RadioGetLoRaBandwidthInHz+0x1c>)
 801742a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801742e:	bf00      	nop
 8017430:	0801745d 	.word	0x0801745d
 8017434:	0801746d 	.word	0x0801746d
 8017438:	0801747d 	.word	0x0801747d
 801743c:	0801748d 	.word	0x0801748d
 8017440:	08017495 	.word	0x08017495
 8017444:	0801749b 	.word	0x0801749b
 8017448:	080174a1 	.word	0x080174a1
 801744c:	080174a7 	.word	0x080174a7
 8017450:	08017465 	.word	0x08017465
 8017454:	08017475 	.word	0x08017475
 8017458:	08017485 	.word	0x08017485
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801745c:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8017460:	60fb      	str	r3, [r7, #12]
        break;
 8017462:	e020      	b.n	80174a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8017464:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8017468:	60fb      	str	r3, [r7, #12]
        break;
 801746a:	e01c      	b.n	80174a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801746c:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8017470:	60fb      	str	r3, [r7, #12]
        break;
 8017472:	e018      	b.n	80174a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8017474:	f245 1361 	movw	r3, #20833	@ 0x5161
 8017478:	60fb      	str	r3, [r7, #12]
        break;
 801747a:	e014      	b.n	80174a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801747c:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8017480:	60fb      	str	r3, [r7, #12]
        break;
 8017482:	e010      	b.n	80174a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8017484:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8017488:	60fb      	str	r3, [r7, #12]
        break;
 801748a:	e00c      	b.n	80174a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801748c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8017490:	60fb      	str	r3, [r7, #12]
        break;
 8017492:	e008      	b.n	80174a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8017494:	4b07      	ldr	r3, [pc, #28]	@ (80174b4 <RadioGetLoRaBandwidthInHz+0xa0>)
 8017496:	60fb      	str	r3, [r7, #12]
        break;
 8017498:	e005      	b.n	80174a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801749a:	4b07      	ldr	r3, [pc, #28]	@ (80174b8 <RadioGetLoRaBandwidthInHz+0xa4>)
 801749c:	60fb      	str	r3, [r7, #12]
        break;
 801749e:	e002      	b.n	80174a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80174a0:	4b06      	ldr	r3, [pc, #24]	@ (80174bc <RadioGetLoRaBandwidthInHz+0xa8>)
 80174a2:	60fb      	str	r3, [r7, #12]
        break;
 80174a4:	bf00      	nop
    }

    return bandwidthInHz;
 80174a6:	68fb      	ldr	r3, [r7, #12]
}
 80174a8:	4618      	mov	r0, r3
 80174aa:	3714      	adds	r7, #20
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bc80      	pop	{r7}
 80174b0:	4770      	bx	lr
 80174b2:	bf00      	nop
 80174b4:	0001e848 	.word	0x0001e848
 80174b8:	0003d090 	.word	0x0003d090
 80174bc:	0007a120 	.word	0x0007a120

080174c0 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80174c0:	b480      	push	{r7}
 80174c2:	b083      	sub	sp, #12
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]
 80174c8:	4608      	mov	r0, r1
 80174ca:	4611      	mov	r1, r2
 80174cc:	461a      	mov	r2, r3
 80174ce:	4603      	mov	r3, r0
 80174d0:	70fb      	strb	r3, [r7, #3]
 80174d2:	460b      	mov	r3, r1
 80174d4:	803b      	strh	r3, [r7, #0]
 80174d6:	4613      	mov	r3, r2
 80174d8:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80174da:	883b      	ldrh	r3, [r7, #0]
 80174dc:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80174de:	78ba      	ldrb	r2, [r7, #2]
 80174e0:	f082 0201 	eor.w	r2, r2, #1
 80174e4:	b2d2      	uxtb	r2, r2
 80174e6:	2a00      	cmp	r2, #0
 80174e8:	d001      	beq.n	80174ee <RadioGetGfskTimeOnAirNumerator+0x2e>
 80174ea:	2208      	movs	r2, #8
 80174ec:	e000      	b.n	80174f0 <RadioGetGfskTimeOnAirNumerator+0x30>
 80174ee:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80174f0:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80174f2:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80174f6:	7c3b      	ldrb	r3, [r7, #16]
 80174f8:	7d39      	ldrb	r1, [r7, #20]
 80174fa:	2900      	cmp	r1, #0
 80174fc:	d001      	beq.n	8017502 <RadioGetGfskTimeOnAirNumerator+0x42>
 80174fe:	2102      	movs	r1, #2
 8017500:	e000      	b.n	8017504 <RadioGetGfskTimeOnAirNumerator+0x44>
 8017502:	2100      	movs	r1, #0
 8017504:	440b      	add	r3, r1
 8017506:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017508:	4413      	add	r3, r2
}
 801750a:	4618      	mov	r0, r3
 801750c:	370c      	adds	r7, #12
 801750e:	46bd      	mov	sp, r7
 8017510:	bc80      	pop	{r7}
 8017512:	4770      	bx	lr

08017514 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017514:	b480      	push	{r7}
 8017516:	b08b      	sub	sp, #44	@ 0x2c
 8017518:	af00      	add	r7, sp, #0
 801751a:	60f8      	str	r0, [r7, #12]
 801751c:	60b9      	str	r1, [r7, #8]
 801751e:	4611      	mov	r1, r2
 8017520:	461a      	mov	r2, r3
 8017522:	460b      	mov	r3, r1
 8017524:	71fb      	strb	r3, [r7, #7]
 8017526:	4613      	mov	r3, r2
 8017528:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801752a:	79fb      	ldrb	r3, [r7, #7]
 801752c:	3304      	adds	r3, #4
 801752e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8017530:	2300      	movs	r3, #0
 8017532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8017536:	68bb      	ldr	r3, [r7, #8]
 8017538:	2b05      	cmp	r3, #5
 801753a:	d002      	beq.n	8017542 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801753c:	68bb      	ldr	r3, [r7, #8]
 801753e:	2b06      	cmp	r3, #6
 8017540:	d104      	bne.n	801754c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8017542:	88bb      	ldrh	r3, [r7, #4]
 8017544:	2b0b      	cmp	r3, #11
 8017546:	d801      	bhi.n	801754c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017548:	230c      	movs	r3, #12
 801754a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d105      	bne.n	801755e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8017552:	68bb      	ldr	r3, [r7, #8]
 8017554:	2b0b      	cmp	r3, #11
 8017556:	d008      	beq.n	801756a <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017558:	68bb      	ldr	r3, [r7, #8]
 801755a:	2b0c      	cmp	r3, #12
 801755c:	d005      	beq.n	801756a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	2b01      	cmp	r3, #1
 8017562:	d105      	bne.n	8017570 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017564:	68bb      	ldr	r3, [r7, #8]
 8017566:	2b0c      	cmp	r3, #12
 8017568:	d102      	bne.n	8017570 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801756a:	2301      	movs	r3, #1
 801756c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017570:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017574:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8017576:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801757a:	2a00      	cmp	r2, #0
 801757c:	d001      	beq.n	8017582 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801757e:	2210      	movs	r2, #16
 8017580:	e000      	b.n	8017584 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8017582:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017584:	4413      	add	r3, r2
 8017586:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8017588:	68bb      	ldr	r3, [r7, #8]
 801758a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801758c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801758e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017592:	2a00      	cmp	r2, #0
 8017594:	d001      	beq.n	801759a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8017596:	2200      	movs	r2, #0
 8017598:	e000      	b.n	801759c <RadioGetLoRaTimeOnAirNumerator+0x88>
 801759a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801759c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801759e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80175a0:	68bb      	ldr	r3, [r7, #8]
 80175a2:	2b06      	cmp	r3, #6
 80175a4:	d803      	bhi.n	80175ae <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80175a6:	68bb      	ldr	r3, [r7, #8]
 80175a8:	009b      	lsls	r3, r3, #2
 80175aa:	623b      	str	r3, [r7, #32]
 80175ac:	e00e      	b.n	80175cc <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80175ae:	69fb      	ldr	r3, [r7, #28]
 80175b0:	3308      	adds	r3, #8
 80175b2:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80175b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d004      	beq.n	80175c6 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80175bc:	68bb      	ldr	r3, [r7, #8]
 80175be:	3b02      	subs	r3, #2
 80175c0:	009b      	lsls	r3, r3, #2
 80175c2:	623b      	str	r3, [r7, #32]
 80175c4:	e002      	b.n	80175cc <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80175c6:	68bb      	ldr	r3, [r7, #8]
 80175c8:	009b      	lsls	r3, r3, #2
 80175ca:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80175cc:	69fb      	ldr	r3, [r7, #28]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	da01      	bge.n	80175d6 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80175d2:	2300      	movs	r3, #0
 80175d4:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80175d6:	69fa      	ldr	r2, [r7, #28]
 80175d8:	6a3b      	ldr	r3, [r7, #32]
 80175da:	4413      	add	r3, r2
 80175dc:	1e5a      	subs	r2, r3, #1
 80175de:	6a3b      	ldr	r3, [r7, #32]
 80175e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80175e4:	697a      	ldr	r2, [r7, #20]
 80175e6:	fb03 f202 	mul.w	r2, r3, r2
 80175ea:	88bb      	ldrh	r3, [r7, #4]
 80175ec:	4413      	add	r3, r2
    int32_t intermediate =
 80175ee:	330c      	adds	r3, #12
 80175f0:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80175f2:	68bb      	ldr	r3, [r7, #8]
 80175f4:	2b06      	cmp	r3, #6
 80175f6:	d802      	bhi.n	80175fe <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80175f8:	69bb      	ldr	r3, [r7, #24]
 80175fa:	3302      	adds	r3, #2
 80175fc:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80175fe:	69bb      	ldr	r3, [r7, #24]
 8017600:	009b      	lsls	r3, r3, #2
 8017602:	1c5a      	adds	r2, r3, #1
 8017604:	68bb      	ldr	r3, [r7, #8]
 8017606:	3b02      	subs	r3, #2
 8017608:	fa02 f303 	lsl.w	r3, r2, r3
}
 801760c:	4618      	mov	r0, r3
 801760e:	372c      	adds	r7, #44	@ 0x2c
 8017610:	46bd      	mov	sp, r7
 8017612:	bc80      	pop	{r7}
 8017614:	4770      	bx	lr
	...

08017618 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017618:	b580      	push	{r7, lr}
 801761a:	b08a      	sub	sp, #40	@ 0x28
 801761c:	af04      	add	r7, sp, #16
 801761e:	60b9      	str	r1, [r7, #8]
 8017620:	607a      	str	r2, [r7, #4]
 8017622:	461a      	mov	r2, r3
 8017624:	4603      	mov	r3, r0
 8017626:	73fb      	strb	r3, [r7, #15]
 8017628:	4613      	mov	r3, r2
 801762a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801762c:	2300      	movs	r3, #0
 801762e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017630:	2301      	movs	r3, #1
 8017632:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017634:	7bfb      	ldrb	r3, [r7, #15]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d002      	beq.n	8017640 <RadioTimeOnAir+0x28>
 801763a:	2b01      	cmp	r3, #1
 801763c:	d017      	beq.n	801766e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801763e:	e035      	b.n	80176ac <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8017640:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8017644:	8c3a      	ldrh	r2, [r7, #32]
 8017646:	7bb9      	ldrb	r1, [r7, #14]
 8017648:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801764c:	9301      	str	r3, [sp, #4]
 801764e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017652:	9300      	str	r3, [sp, #0]
 8017654:	4603      	mov	r3, r0
 8017656:	6878      	ldr	r0, [r7, #4]
 8017658:	f7ff ff32 	bl	80174c0 <RadioGetGfskTimeOnAirNumerator>
 801765c:	4603      	mov	r3, r0
 801765e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017662:	fb02 f303 	mul.w	r3, r2, r3
 8017666:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	613b      	str	r3, [r7, #16]
        break;
 801766c:	e01e      	b.n	80176ac <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801766e:	8c39      	ldrh	r1, [r7, #32]
 8017670:	7bba      	ldrb	r2, [r7, #14]
 8017672:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017676:	9302      	str	r3, [sp, #8]
 8017678:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801767c:	9301      	str	r3, [sp, #4]
 801767e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017682:	9300      	str	r3, [sp, #0]
 8017684:	460b      	mov	r3, r1
 8017686:	6879      	ldr	r1, [r7, #4]
 8017688:	68b8      	ldr	r0, [r7, #8]
 801768a:	f7ff ff43 	bl	8017514 <RadioGetLoRaTimeOnAirNumerator>
 801768e:	4603      	mov	r3, r0
 8017690:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017694:	fb02 f303 	mul.w	r3, r2, r3
 8017698:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801769a:	4a0a      	ldr	r2, [pc, #40]	@ (80176c4 <RadioTimeOnAir+0xac>)
 801769c:	68bb      	ldr	r3, [r7, #8]
 801769e:	4413      	add	r3, r2
 80176a0:	781b      	ldrb	r3, [r3, #0]
 80176a2:	4618      	mov	r0, r3
 80176a4:	f7ff feb6 	bl	8017414 <RadioGetLoRaBandwidthInHz>
 80176a8:	6138      	str	r0, [r7, #16]
        break;
 80176aa:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80176ac:	697a      	ldr	r2, [r7, #20]
 80176ae:	693b      	ldr	r3, [r7, #16]
 80176b0:	4413      	add	r3, r2
 80176b2:	1e5a      	subs	r2, r3, #1
 80176b4:	693b      	ldr	r3, [r7, #16]
 80176b6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80176ba:	4618      	mov	r0, r3
 80176bc:	3718      	adds	r7, #24
 80176be:	46bd      	mov	sp, r7
 80176c0:	bd80      	pop	{r7, pc}
 80176c2:	bf00      	nop
 80176c4:	0801eb9c 	.word	0x0801eb9c

080176c8 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b084      	sub	sp, #16
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	6078      	str	r0, [r7, #4]
 80176d0:	460b      	mov	r3, r1
 80176d2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80176d4:	2300      	movs	r3, #0
 80176d6:	2200      	movs	r2, #0
 80176d8:	f240 2101 	movw	r1, #513	@ 0x201
 80176dc:	f240 2001 	movw	r0, #513	@ 0x201
 80176e0:	f001 fd66 	bl	80191b0 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80176e4:	4b73      	ldr	r3, [pc, #460]	@ (80178b4 <RadioSend+0x1ec>)
 80176e6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80176ea:	2101      	movs	r1, #1
 80176ec:	4618      	mov	r0, r3
 80176ee:	f002 fa1d 	bl	8019b2c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80176f2:	4b70      	ldr	r3, [pc, #448]	@ (80178b4 <RadioSend+0x1ec>)
 80176f4:	781b      	ldrb	r3, [r3, #0]
 80176f6:	2b01      	cmp	r3, #1
 80176f8:	d112      	bne.n	8017720 <RadioSend+0x58>
 80176fa:	4b6e      	ldr	r3, [pc, #440]	@ (80178b4 <RadioSend+0x1ec>)
 80176fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017700:	2b06      	cmp	r3, #6
 8017702:	d10d      	bne.n	8017720 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8017704:	f640 0089 	movw	r0, #2185	@ 0x889
 8017708:	f002 f924 	bl	8019954 <SUBGRF_ReadRegister>
 801770c:	4603      	mov	r3, r0
 801770e:	f023 0304 	bic.w	r3, r3, #4
 8017712:	b2db      	uxtb	r3, r3
 8017714:	4619      	mov	r1, r3
 8017716:	f640 0089 	movw	r0, #2185	@ 0x889
 801771a:	f002 f8f9 	bl	8019910 <SUBGRF_WriteRegister>
 801771e:	e00c      	b.n	801773a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8017720:	f640 0089 	movw	r0, #2185	@ 0x889
 8017724:	f002 f916 	bl	8019954 <SUBGRF_ReadRegister>
 8017728:	4603      	mov	r3, r0
 801772a:	f043 0304 	orr.w	r3, r3, #4
 801772e:	b2db      	uxtb	r3, r3
 8017730:	4619      	mov	r1, r3
 8017732:	f640 0089 	movw	r0, #2185	@ 0x889
 8017736:	f002 f8eb 	bl	8019910 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801773a:	4b5e      	ldr	r3, [pc, #376]	@ (80178b4 <RadioSend+0x1ec>)
 801773c:	781b      	ldrb	r3, [r3, #0]
 801773e:	2b04      	cmp	r3, #4
 8017740:	f200 80a8 	bhi.w	8017894 <RadioSend+0x1cc>
 8017744:	a201      	add	r2, pc, #4	@ (adr r2, 801774c <RadioSend+0x84>)
 8017746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801774a:	bf00      	nop
 801774c:	0801777b 	.word	0x0801777b
 8017750:	08017761 	.word	0x08017761
 8017754:	0801777b 	.word	0x0801777b
 8017758:	080177dd 	.word	0x080177dd
 801775c:	080177fd 	.word	0x080177fd
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017760:	4a54      	ldr	r2, [pc, #336]	@ (80178b4 <RadioSend+0x1ec>)
 8017762:	78fb      	ldrb	r3, [r7, #3]
 8017764:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017766:	4854      	ldr	r0, [pc, #336]	@ (80178b8 <RadioSend+0x1f0>)
 8017768:	f001 ff8a 	bl	8019680 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801776c:	78fb      	ldrb	r3, [r7, #3]
 801776e:	2200      	movs	r2, #0
 8017770:	4619      	mov	r1, r3
 8017772:	6878      	ldr	r0, [r7, #4]
 8017774:	f001 fa3a 	bl	8018bec <SUBGRF_SendPayload>
            break;
 8017778:	e08d      	b.n	8017896 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801777a:	f002 fbd0 	bl	8019f1e <RFW_Is_Init>
 801777e:	4603      	mov	r3, r0
 8017780:	2b01      	cmp	r3, #1
 8017782:	d11e      	bne.n	80177c2 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8017784:	f107 020d 	add.w	r2, r7, #13
 8017788:	78fb      	ldrb	r3, [r7, #3]
 801778a:	4619      	mov	r1, r3
 801778c:	6878      	ldr	r0, [r7, #4]
 801778e:	f002 fbde 	bl	8019f4e <RFW_TransmitInit>
 8017792:	4603      	mov	r3, r0
 8017794:	2b00      	cmp	r3, #0
 8017796:	d10c      	bne.n	80177b2 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017798:	7b7a      	ldrb	r2, [r7, #13]
 801779a:	4b46      	ldr	r3, [pc, #280]	@ (80178b4 <RadioSend+0x1ec>)
 801779c:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801779e:	4846      	ldr	r0, [pc, #280]	@ (80178b8 <RadioSend+0x1f0>)
 80177a0:	f001 ff6e 	bl	8019680 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80177a4:	7b7b      	ldrb	r3, [r7, #13]
 80177a6:	2200      	movs	r2, #0
 80177a8:	4619      	mov	r1, r3
 80177aa:	6878      	ldr	r0, [r7, #4]
 80177ac:	f001 fa1e 	bl	8018bec <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80177b0:	e071      	b.n	8017896 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 80177b2:	4b42      	ldr	r3, [pc, #264]	@ (80178bc <RadioSend+0x1f4>)
 80177b4:	2201      	movs	r2, #1
 80177b6:	2100      	movs	r1, #0
 80177b8:	2002      	movs	r0, #2
 80177ba:	f003 fce7 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80177be:	2303      	movs	r3, #3
 80177c0:	e073      	b.n	80178aa <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80177c2:	4a3c      	ldr	r2, [pc, #240]	@ (80178b4 <RadioSend+0x1ec>)
 80177c4:	78fb      	ldrb	r3, [r7, #3]
 80177c6:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80177c8:	483b      	ldr	r0, [pc, #236]	@ (80178b8 <RadioSend+0x1f0>)
 80177ca:	f001 ff59 	bl	8019680 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80177ce:	78fb      	ldrb	r3, [r7, #3]
 80177d0:	2200      	movs	r2, #0
 80177d2:	4619      	mov	r1, r3
 80177d4:	6878      	ldr	r0, [r7, #4]
 80177d6:	f001 fa09 	bl	8018bec <SUBGRF_SendPayload>
            break;
 80177da:	e05c      	b.n	8017896 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80177dc:	4b35      	ldr	r3, [pc, #212]	@ (80178b4 <RadioSend+0x1ec>)
 80177de:	2202      	movs	r2, #2
 80177e0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80177e2:	4a34      	ldr	r2, [pc, #208]	@ (80178b4 <RadioSend+0x1ec>)
 80177e4:	78fb      	ldrb	r3, [r7, #3]
 80177e6:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80177e8:	4833      	ldr	r0, [pc, #204]	@ (80178b8 <RadioSend+0x1f0>)
 80177ea:	f001 ff49 	bl	8019680 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80177ee:	78fb      	ldrb	r3, [r7, #3]
 80177f0:	2200      	movs	r2, #0
 80177f2:	4619      	mov	r1, r3
 80177f4:	6878      	ldr	r0, [r7, #4]
 80177f6:	f001 f9f9 	bl	8018bec <SUBGRF_SendPayload>
            break;
 80177fa:	e04c      	b.n	8017896 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80177fc:	78fb      	ldrb	r3, [r7, #3]
 80177fe:	461a      	mov	r2, r3
 8017800:	6879      	ldr	r1, [r7, #4]
 8017802:	482f      	ldr	r0, [pc, #188]	@ (80178c0 <RadioSend+0x1f8>)
 8017804:	f000 fcca 	bl	801819c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017808:	4b2a      	ldr	r3, [pc, #168]	@ (80178b4 <RadioSend+0x1ec>)
 801780a:	2202      	movs	r2, #2
 801780c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801780e:	78fb      	ldrb	r3, [r7, #3]
 8017810:	3301      	adds	r3, #1
 8017812:	b2da      	uxtb	r2, r3
 8017814:	4b27      	ldr	r3, [pc, #156]	@ (80178b4 <RadioSend+0x1ec>)
 8017816:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017818:	4827      	ldr	r0, [pc, #156]	@ (80178b8 <RadioSend+0x1f0>)
 801781a:	f001 ff31 	bl	8019680 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801781e:	2100      	movs	r1, #0
 8017820:	20f1      	movs	r0, #241	@ 0xf1
 8017822:	f000 f965 	bl	8017af0 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8017826:	2100      	movs	r1, #0
 8017828:	20f0      	movs	r0, #240	@ 0xf0
 801782a:	f000 f961 	bl	8017af0 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801782e:	4b21      	ldr	r3, [pc, #132]	@ (80178b4 <RadioSend+0x1ec>)
 8017830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017832:	2b64      	cmp	r3, #100	@ 0x64
 8017834:	d108      	bne.n	8017848 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8017836:	2170      	movs	r1, #112	@ 0x70
 8017838:	20f3      	movs	r0, #243	@ 0xf3
 801783a:	f000 f959 	bl	8017af0 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801783e:	211d      	movs	r1, #29
 8017840:	20f2      	movs	r0, #242	@ 0xf2
 8017842:	f000 f955 	bl	8017af0 <RadioWrite>
 8017846:	e007      	b.n	8017858 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8017848:	21e1      	movs	r1, #225	@ 0xe1
 801784a:	20f3      	movs	r0, #243	@ 0xf3
 801784c:	f000 f950 	bl	8017af0 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8017850:	2104      	movs	r1, #4
 8017852:	20f2      	movs	r0, #242	@ 0xf2
 8017854:	f000 f94c 	bl	8017af0 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8017858:	78fb      	ldrb	r3, [r7, #3]
 801785a:	b29b      	uxth	r3, r3
 801785c:	00db      	lsls	r3, r3, #3
 801785e:	b29b      	uxth	r3, r3
 8017860:	3302      	adds	r3, #2
 8017862:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8017864:	89fb      	ldrh	r3, [r7, #14]
 8017866:	0a1b      	lsrs	r3, r3, #8
 8017868:	b29b      	uxth	r3, r3
 801786a:	b2db      	uxtb	r3, r3
 801786c:	4619      	mov	r1, r3
 801786e:	20f4      	movs	r0, #244	@ 0xf4
 8017870:	f000 f93e 	bl	8017af0 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8017874:	89fb      	ldrh	r3, [r7, #14]
 8017876:	b2db      	uxtb	r3, r3
 8017878:	4619      	mov	r1, r3
 801787a:	20f5      	movs	r0, #245	@ 0xf5
 801787c:	f000 f938 	bl	8017af0 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8017880:	78fb      	ldrb	r3, [r7, #3]
 8017882:	3301      	adds	r3, #1
 8017884:	b2db      	uxtb	r3, r3
 8017886:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 801788a:	4619      	mov	r1, r3
 801788c:	480c      	ldr	r0, [pc, #48]	@ (80178c0 <RadioSend+0x1f8>)
 801788e:	f001 f9ad 	bl	8018bec <SUBGRF_SendPayload>
            break;
 8017892:	e000      	b.n	8017896 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017894:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8017896:	4b07      	ldr	r3, [pc, #28]	@ (80178b4 <RadioSend+0x1ec>)
 8017898:	685b      	ldr	r3, [r3, #4]
 801789a:	4619      	mov	r1, r3
 801789c:	4809      	ldr	r0, [pc, #36]	@ (80178c4 <RadioSend+0x1fc>)
 801789e:	f003 fadb 	bl	801ae58 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80178a2:	4808      	ldr	r0, [pc, #32]	@ (80178c4 <RadioSend+0x1fc>)
 80178a4:	f003 f9fa 	bl	801ac9c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80178a8:	2300      	movs	r3, #0
}
 80178aa:	4618      	mov	r0, r3
 80178ac:	3710      	adds	r7, #16
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}
 80178b2:	bf00      	nop
 80178b4:	200016b4 	.word	0x200016b4
 80178b8:	200016c2 	.word	0x200016c2
 80178bc:	0801e52c 	.word	0x0801e52c
 80178c0:	200015b0 	.word	0x200015b0
 80178c4:	20001710 	.word	0x20001710

080178c8 <RadioSleep>:

static void RadioSleep( void )
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b082      	sub	sp, #8
 80178cc:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80178ce:	2300      	movs	r3, #0
 80178d0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80178d2:	793b      	ldrb	r3, [r7, #4]
 80178d4:	f043 0304 	orr.w	r3, r3, #4
 80178d8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80178da:	7938      	ldrb	r0, [r7, #4]
 80178dc:	f001 fa62 	bl	8018da4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80178e0:	2002      	movs	r0, #2
 80178e2:	f7ea fc5b 	bl	800219c <HAL_Delay>
}
 80178e6:	bf00      	nop
 80178e8:	3708      	adds	r7, #8
 80178ea:	46bd      	mov	sp, r7
 80178ec:	bd80      	pop	{r7, pc}

080178ee <RadioStandby>:

static void RadioStandby( void )
{
 80178ee:	b580      	push	{r7, lr}
 80178f0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80178f2:	2000      	movs	r0, #0
 80178f4:	f001 fa88 	bl	8018e08 <SUBGRF_SetStandby>
}
 80178f8:	bf00      	nop
 80178fa:	bd80      	pop	{r7, pc}

080178fc <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8017904:	f002 fb0b 	bl	8019f1e <RFW_Is_Init>
 8017908:	4603      	mov	r3, r0
 801790a:	2b01      	cmp	r3, #1
 801790c:	d102      	bne.n	8017914 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801790e:	f002 fb2e 	bl	8019f6e <RFW_ReceiveInit>
 8017912:	e007      	b.n	8017924 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017914:	2300      	movs	r3, #0
 8017916:	2200      	movs	r2, #0
 8017918:	f240 2162 	movw	r1, #610	@ 0x262
 801791c:	f240 2062 	movw	r0, #610	@ 0x262
 8017920:	f001 fc46 	bl	80191b0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d006      	beq.n	8017938 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801792a:	6879      	ldr	r1, [r7, #4]
 801792c:	4811      	ldr	r0, [pc, #68]	@ (8017974 <RadioRx+0x78>)
 801792e:	f003 fa93 	bl	801ae58 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017932:	4810      	ldr	r0, [pc, #64]	@ (8017974 <RadioRx+0x78>)
 8017934:	f003 f9b2 	bl	801ac9c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017938:	4b0f      	ldr	r3, [pc, #60]	@ (8017978 <RadioRx+0x7c>)
 801793a:	2200      	movs	r2, #0
 801793c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801793e:	4b0e      	ldr	r3, [pc, #56]	@ (8017978 <RadioRx+0x7c>)
 8017940:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017944:	2100      	movs	r1, #0
 8017946:	4618      	mov	r0, r3
 8017948:	f002 f8f0 	bl	8019b2c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801794c:	4b0a      	ldr	r3, [pc, #40]	@ (8017978 <RadioRx+0x7c>)
 801794e:	785b      	ldrb	r3, [r3, #1]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d004      	beq.n	801795e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017954:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017958:	f001 fa92 	bl	8018e80 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801795c:	e005      	b.n	801796a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801795e:	4b06      	ldr	r3, [pc, #24]	@ (8017978 <RadioRx+0x7c>)
 8017960:	689b      	ldr	r3, [r3, #8]
 8017962:	019b      	lsls	r3, r3, #6
 8017964:	4618      	mov	r0, r3
 8017966:	f001 fa8b 	bl	8018e80 <SUBGRF_SetRx>
}
 801796a:	bf00      	nop
 801796c:	3708      	adds	r7, #8
 801796e:	46bd      	mov	sp, r7
 8017970:	bd80      	pop	{r7, pc}
 8017972:	bf00      	nop
 8017974:	20001728 	.word	0x20001728
 8017978:	200016b4 	.word	0x200016b4

0801797c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801797c:	b580      	push	{r7, lr}
 801797e:	b082      	sub	sp, #8
 8017980:	af00      	add	r7, sp, #0
 8017982:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8017984:	f002 facb 	bl	8019f1e <RFW_Is_Init>
 8017988:	4603      	mov	r3, r0
 801798a:	2b01      	cmp	r3, #1
 801798c:	d102      	bne.n	8017994 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801798e:	f002 faee 	bl	8019f6e <RFW_ReceiveInit>
 8017992:	e007      	b.n	80179a4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017994:	2300      	movs	r3, #0
 8017996:	2200      	movs	r2, #0
 8017998:	f240 2162 	movw	r1, #610	@ 0x262
 801799c:	f240 2062 	movw	r0, #610	@ 0x262
 80179a0:	f001 fc06 	bl	80191b0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d006      	beq.n	80179b8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80179aa:	6879      	ldr	r1, [r7, #4]
 80179ac:	4811      	ldr	r0, [pc, #68]	@ (80179f4 <RadioRxBoosted+0x78>)
 80179ae:	f003 fa53 	bl	801ae58 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80179b2:	4810      	ldr	r0, [pc, #64]	@ (80179f4 <RadioRxBoosted+0x78>)
 80179b4:	f003 f972 	bl	801ac9c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80179b8:	4b0f      	ldr	r3, [pc, #60]	@ (80179f8 <RadioRxBoosted+0x7c>)
 80179ba:	2200      	movs	r2, #0
 80179bc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80179be:	4b0e      	ldr	r3, [pc, #56]	@ (80179f8 <RadioRxBoosted+0x7c>)
 80179c0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80179c4:	2100      	movs	r1, #0
 80179c6:	4618      	mov	r0, r3
 80179c8:	f002 f8b0 	bl	8019b2c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80179cc:	4b0a      	ldr	r3, [pc, #40]	@ (80179f8 <RadioRxBoosted+0x7c>)
 80179ce:	785b      	ldrb	r3, [r3, #1]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d004      	beq.n	80179de <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80179d4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80179d8:	f001 fa72 	bl	8018ec0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80179dc:	e005      	b.n	80179ea <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80179de:	4b06      	ldr	r3, [pc, #24]	@ (80179f8 <RadioRxBoosted+0x7c>)
 80179e0:	689b      	ldr	r3, [r3, #8]
 80179e2:	019b      	lsls	r3, r3, #6
 80179e4:	4618      	mov	r0, r3
 80179e6:	f001 fa6b 	bl	8018ec0 <SUBGRF_SetRxBoosted>
}
 80179ea:	bf00      	nop
 80179ec:	3708      	adds	r7, #8
 80179ee:	46bd      	mov	sp, r7
 80179f0:	bd80      	pop	{r7, pc}
 80179f2:	bf00      	nop
 80179f4:	20001728 	.word	0x20001728
 80179f8:	200016b4 	.word	0x200016b4

080179fc <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b082      	sub	sp, #8
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	6078      	str	r0, [r7, #4]
 8017a04:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	005a      	lsls	r2, r3, #1
 8017a0a:	683b      	ldr	r3, [r7, #0]
 8017a0c:	4413      	add	r3, r2
 8017a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8017a40 <RadioSetRxDutyCycle+0x44>)
 8017a10:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017a12:	2300      	movs	r3, #0
 8017a14:	2200      	movs	r2, #0
 8017a16:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017a1a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017a1e:	f001 fbc7 	bl	80191b0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017a22:	4b07      	ldr	r3, [pc, #28]	@ (8017a40 <RadioSetRxDutyCycle+0x44>)
 8017a24:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017a28:	2100      	movs	r1, #0
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	f002 f87e 	bl	8019b2c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017a30:	6839      	ldr	r1, [r7, #0]
 8017a32:	6878      	ldr	r0, [r7, #4]
 8017a34:	f001 fa68 	bl	8018f08 <SUBGRF_SetRxDutyCycle>
}
 8017a38:	bf00      	nop
 8017a3a:	3708      	adds	r7, #8
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}
 8017a40:	200016b4 	.word	0x200016b4

08017a44 <RadioStartCad>:

static void RadioStartCad( void )
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017a48:	4b09      	ldr	r3, [pc, #36]	@ (8017a70 <RadioStartCad+0x2c>)
 8017a4a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017a4e:	2100      	movs	r1, #0
 8017a50:	4618      	mov	r0, r3
 8017a52:	f002 f86b 	bl	8019b2c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8017a56:	2300      	movs	r3, #0
 8017a58:	2200      	movs	r2, #0
 8017a5a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8017a5e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8017a62:	f001 fba5 	bl	80191b0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8017a66:	f001 fa7b 	bl	8018f60 <SUBGRF_SetCad>
}
 8017a6a:	bf00      	nop
 8017a6c:	bd80      	pop	{r7, pc}
 8017a6e:	bf00      	nop
 8017a70:	200016b4 	.word	0x200016b4

08017a74 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b084      	sub	sp, #16
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
 8017a7c:	460b      	mov	r3, r1
 8017a7e:	70fb      	strb	r3, [r7, #3]
 8017a80:	4613      	mov	r3, r2
 8017a82:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8017a84:	883b      	ldrh	r3, [r7, #0]
 8017a86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017a8a:	fb02 f303 	mul.w	r3, r2, r3
 8017a8e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017a90:	6878      	ldr	r0, [r7, #4]
 8017a92:	f001 fbe9 	bl	8019268 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8017a96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f002 f86e 	bl	8019b7c <SUBGRF_SetRfTxPower>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8017aa4:	210e      	movs	r1, #14
 8017aa6:	f640 101f 	movw	r0, #2335	@ 0x91f
 8017aaa:	f001 ff31 	bl	8019910 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8017aae:	7afb      	ldrb	r3, [r7, #11]
 8017ab0:	2101      	movs	r1, #1
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f002 f83a 	bl	8019b2c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8017ab8:	f001 fa60 	bl	8018f7c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8017abc:	68f9      	ldr	r1, [r7, #12]
 8017abe:	4805      	ldr	r0, [pc, #20]	@ (8017ad4 <RadioSetTxContinuousWave+0x60>)
 8017ac0:	f003 f9ca 	bl	801ae58 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017ac4:	4803      	ldr	r0, [pc, #12]	@ (8017ad4 <RadioSetTxContinuousWave+0x60>)
 8017ac6:	f003 f8e9 	bl	801ac9c <UTIL_TIMER_Start>
}
 8017aca:	bf00      	nop
 8017acc:	3710      	adds	r7, #16
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	bd80      	pop	{r7, pc}
 8017ad2:	bf00      	nop
 8017ad4:	20001710 	.word	0x20001710

08017ad8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b082      	sub	sp, #8
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	4603      	mov	r3, r0
 8017ae0:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8017ae2:	f001 fe82 	bl	80197ea <SUBGRF_GetRssiInst>
 8017ae6:	4603      	mov	r3, r0
}
 8017ae8:	4618      	mov	r0, r3
 8017aea:	3708      	adds	r7, #8
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd80      	pop	{r7, pc}

08017af0 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8017af0:	b580      	push	{r7, lr}
 8017af2:	b082      	sub	sp, #8
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	4603      	mov	r3, r0
 8017af8:	460a      	mov	r2, r1
 8017afa:	80fb      	strh	r3, [r7, #6]
 8017afc:	4613      	mov	r3, r2
 8017afe:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8017b00:	797a      	ldrb	r2, [r7, #5]
 8017b02:	88fb      	ldrh	r3, [r7, #6]
 8017b04:	4611      	mov	r1, r2
 8017b06:	4618      	mov	r0, r3
 8017b08:	f001 ff02 	bl	8019910 <SUBGRF_WriteRegister>
}
 8017b0c:	bf00      	nop
 8017b0e:	3708      	adds	r7, #8
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}

08017b14 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b082      	sub	sp, #8
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8017b1e:	88fb      	ldrh	r3, [r7, #6]
 8017b20:	4618      	mov	r0, r3
 8017b22:	f001 ff17 	bl	8019954 <SUBGRF_ReadRegister>
 8017b26:	4603      	mov	r3, r0
}
 8017b28:	4618      	mov	r0, r3
 8017b2a:	3708      	adds	r7, #8
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bd80      	pop	{r7, pc}

08017b30 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b082      	sub	sp, #8
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	4603      	mov	r3, r0
 8017b38:	6039      	str	r1, [r7, #0]
 8017b3a:	80fb      	strh	r3, [r7, #6]
 8017b3c:	4613      	mov	r3, r2
 8017b3e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017b40:	797b      	ldrb	r3, [r7, #5]
 8017b42:	b29a      	uxth	r2, r3
 8017b44:	88fb      	ldrh	r3, [r7, #6]
 8017b46:	6839      	ldr	r1, [r7, #0]
 8017b48:	4618      	mov	r0, r3
 8017b4a:	f001 ff23 	bl	8019994 <SUBGRF_WriteRegisters>
}
 8017b4e:	bf00      	nop
 8017b50:	3708      	adds	r7, #8
 8017b52:	46bd      	mov	sp, r7
 8017b54:	bd80      	pop	{r7, pc}

08017b56 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017b56:	b580      	push	{r7, lr}
 8017b58:	b082      	sub	sp, #8
 8017b5a:	af00      	add	r7, sp, #0
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	6039      	str	r1, [r7, #0]
 8017b60:	80fb      	strh	r3, [r7, #6]
 8017b62:	4613      	mov	r3, r2
 8017b64:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8017b66:	797b      	ldrb	r3, [r7, #5]
 8017b68:	b29a      	uxth	r2, r3
 8017b6a:	88fb      	ldrh	r3, [r7, #6]
 8017b6c:	6839      	ldr	r1, [r7, #0]
 8017b6e:	4618      	mov	r0, r3
 8017b70:	f001 ff32 	bl	80199d8 <SUBGRF_ReadRegisters>
}
 8017b74:	bf00      	nop
 8017b76:	3708      	adds	r7, #8
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	bd80      	pop	{r7, pc}

08017b7c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017b7c:	b580      	push	{r7, lr}
 8017b7e:	b082      	sub	sp, #8
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	4603      	mov	r3, r0
 8017b84:	460a      	mov	r2, r1
 8017b86:	71fb      	strb	r3, [r7, #7]
 8017b88:	4613      	mov	r3, r2
 8017b8a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017b8c:	79fb      	ldrb	r3, [r7, #7]
 8017b8e:	2b01      	cmp	r3, #1
 8017b90:	d10a      	bne.n	8017ba8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8017b92:	4a0e      	ldr	r2, [pc, #56]	@ (8017bcc <RadioSetMaxPayloadLength+0x50>)
 8017b94:	79bb      	ldrb	r3, [r7, #6]
 8017b96:	7013      	strb	r3, [r2, #0]
 8017b98:	4b0c      	ldr	r3, [pc, #48]	@ (8017bcc <RadioSetMaxPayloadLength+0x50>)
 8017b9a:	781a      	ldrb	r2, [r3, #0]
 8017b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8017bd0 <RadioSetMaxPayloadLength+0x54>)
 8017b9e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017ba0:	480c      	ldr	r0, [pc, #48]	@ (8017bd4 <RadioSetMaxPayloadLength+0x58>)
 8017ba2:	f001 fd6d 	bl	8019680 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8017ba6:	e00d      	b.n	8017bc4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8017ba8:	4b09      	ldr	r3, [pc, #36]	@ (8017bd0 <RadioSetMaxPayloadLength+0x54>)
 8017baa:	7d5b      	ldrb	r3, [r3, #21]
 8017bac:	2b01      	cmp	r3, #1
 8017bae:	d109      	bne.n	8017bc4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8017bb0:	4a06      	ldr	r2, [pc, #24]	@ (8017bcc <RadioSetMaxPayloadLength+0x50>)
 8017bb2:	79bb      	ldrb	r3, [r7, #6]
 8017bb4:	7013      	strb	r3, [r2, #0]
 8017bb6:	4b05      	ldr	r3, [pc, #20]	@ (8017bcc <RadioSetMaxPayloadLength+0x50>)
 8017bb8:	781a      	ldrb	r2, [r3, #0]
 8017bba:	4b05      	ldr	r3, [pc, #20]	@ (8017bd0 <RadioSetMaxPayloadLength+0x54>)
 8017bbc:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017bbe:	4805      	ldr	r0, [pc, #20]	@ (8017bd4 <RadioSetMaxPayloadLength+0x58>)
 8017bc0:	f001 fd5e 	bl	8019680 <SUBGRF_SetPacketParams>
}
 8017bc4:	bf00      	nop
 8017bc6:	3708      	adds	r7, #8
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	bd80      	pop	{r7, pc}
 8017bcc:	20000124 	.word	0x20000124
 8017bd0:	200016b4 	.word	0x200016b4
 8017bd4:	200016c2 	.word	0x200016c2

08017bd8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8017bd8:	b580      	push	{r7, lr}
 8017bda:	b082      	sub	sp, #8
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	4603      	mov	r3, r0
 8017be0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8017be2:	4a13      	ldr	r2, [pc, #76]	@ (8017c30 <RadioSetPublicNetwork+0x58>)
 8017be4:	79fb      	ldrb	r3, [r7, #7]
 8017be6:	7313      	strb	r3, [r2, #12]
 8017be8:	4b11      	ldr	r3, [pc, #68]	@ (8017c30 <RadioSetPublicNetwork+0x58>)
 8017bea:	7b1a      	ldrb	r2, [r3, #12]
 8017bec:	4b10      	ldr	r3, [pc, #64]	@ (8017c30 <RadioSetPublicNetwork+0x58>)
 8017bee:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8017bf0:	2001      	movs	r0, #1
 8017bf2:	f7ff f813 	bl	8016c1c <RadioSetModem>
    if( enable == true )
 8017bf6:	79fb      	ldrb	r3, [r7, #7]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d00a      	beq.n	8017c12 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8017bfc:	2134      	movs	r1, #52	@ 0x34
 8017bfe:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8017c02:	f001 fe85 	bl	8019910 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8017c06:	2144      	movs	r1, #68	@ 0x44
 8017c08:	f240 7041 	movw	r0, #1857	@ 0x741
 8017c0c:	f001 fe80 	bl	8019910 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017c10:	e009      	b.n	8017c26 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8017c12:	2114      	movs	r1, #20
 8017c14:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8017c18:	f001 fe7a 	bl	8019910 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017c1c:	2124      	movs	r1, #36	@ 0x24
 8017c1e:	f240 7041 	movw	r0, #1857	@ 0x741
 8017c22:	f001 fe75 	bl	8019910 <SUBGRF_WriteRegister>
}
 8017c26:	bf00      	nop
 8017c28:	3708      	adds	r7, #8
 8017c2a:	46bd      	mov	sp, r7
 8017c2c:	bd80      	pop	{r7, pc}
 8017c2e:	bf00      	nop
 8017c30:	200016b4 	.word	0x200016b4

08017c34 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017c38:	f001 ffd4 	bl	8019be4 <SUBGRF_GetRadioWakeUpTime>
 8017c3c:	4603      	mov	r3, r0
 8017c3e:	3303      	adds	r3, #3
}
 8017c40:	4618      	mov	r0, r3
 8017c42:	bd80      	pop	{r7, pc}

08017c44 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b082      	sub	sp, #8
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017c4c:	f000 f80e 	bl	8017c6c <RadioOnTxTimeoutProcess>
}
 8017c50:	bf00      	nop
 8017c52:	3708      	adds	r7, #8
 8017c54:	46bd      	mov	sp, r7
 8017c56:	bd80      	pop	{r7, pc}

08017c58 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b082      	sub	sp, #8
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017c60:	f000 f818 	bl	8017c94 <RadioOnRxTimeoutProcess>
}
 8017c64:	bf00      	nop
 8017c66:	3708      	adds	r7, #8
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}

08017c6c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017c70:	4b07      	ldr	r3, [pc, #28]	@ (8017c90 <RadioOnTxTimeoutProcess+0x24>)
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d008      	beq.n	8017c8a <RadioOnTxTimeoutProcess+0x1e>
 8017c78:	4b05      	ldr	r3, [pc, #20]	@ (8017c90 <RadioOnTxTimeoutProcess+0x24>)
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	685b      	ldr	r3, [r3, #4]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d003      	beq.n	8017c8a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8017c82:	4b03      	ldr	r3, [pc, #12]	@ (8017c90 <RadioOnTxTimeoutProcess+0x24>)
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	685b      	ldr	r3, [r3, #4]
 8017c88:	4798      	blx	r3
    }
}
 8017c8a:	bf00      	nop
 8017c8c:	bd80      	pop	{r7, pc}
 8017c8e:	bf00      	nop
 8017c90:	200016b0 	.word	0x200016b0

08017c94 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017c94:	b580      	push	{r7, lr}
 8017c96:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017c98:	4b07      	ldr	r3, [pc, #28]	@ (8017cb8 <RadioOnRxTimeoutProcess+0x24>)
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d008      	beq.n	8017cb2 <RadioOnRxTimeoutProcess+0x1e>
 8017ca0:	4b05      	ldr	r3, [pc, #20]	@ (8017cb8 <RadioOnRxTimeoutProcess+0x24>)
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	68db      	ldr	r3, [r3, #12]
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d003      	beq.n	8017cb2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8017caa:	4b03      	ldr	r3, [pc, #12]	@ (8017cb8 <RadioOnRxTimeoutProcess+0x24>)
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	68db      	ldr	r3, [r3, #12]
 8017cb0:	4798      	blx	r3
    }
}
 8017cb2:	bf00      	nop
 8017cb4:	bd80      	pop	{r7, pc}
 8017cb6:	bf00      	nop
 8017cb8:	200016b0 	.word	0x200016b0

08017cbc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b082      	sub	sp, #8
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8017cc6:	4a05      	ldr	r2, [pc, #20]	@ (8017cdc <RadioOnDioIrq+0x20>)
 8017cc8:	88fb      	ldrh	r3, [r7, #6]
 8017cca:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8017cce:	f000 f807 	bl	8017ce0 <RadioIrqProcess>
}
 8017cd2:	bf00      	nop
 8017cd4:	3708      	adds	r7, #8
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	bd80      	pop	{r7, pc}
 8017cda:	bf00      	nop
 8017cdc:	200016b4 	.word	0x200016b4

08017ce0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8017ce0:	b5b0      	push	{r4, r5, r7, lr}
 8017ce2:	b082      	sub	sp, #8
 8017ce4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017cea:	2300      	movs	r3, #0
 8017cec:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8017cee:	4ba8      	ldr	r3, [pc, #672]	@ (8017f90 <RadioIrqProcess+0x2b0>)
 8017cf0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8017cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017cf8:	f000 810d 	beq.w	8017f16 <RadioIrqProcess+0x236>
 8017cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d00:	f300 81e8 	bgt.w	80180d4 <RadioIrqProcess+0x3f4>
 8017d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017d08:	f000 80f1 	beq.w	8017eee <RadioIrqProcess+0x20e>
 8017d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017d10:	f300 81e0 	bgt.w	80180d4 <RadioIrqProcess+0x3f4>
 8017d14:	2b80      	cmp	r3, #128	@ 0x80
 8017d16:	f000 80d6 	beq.w	8017ec6 <RadioIrqProcess+0x1e6>
 8017d1a:	2b80      	cmp	r3, #128	@ 0x80
 8017d1c:	f300 81da 	bgt.w	80180d4 <RadioIrqProcess+0x3f4>
 8017d20:	2b20      	cmp	r3, #32
 8017d22:	dc49      	bgt.n	8017db8 <RadioIrqProcess+0xd8>
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	f340 81d5 	ble.w	80180d4 <RadioIrqProcess+0x3f4>
 8017d2a:	3b01      	subs	r3, #1
 8017d2c:	2b1f      	cmp	r3, #31
 8017d2e:	f200 81d1 	bhi.w	80180d4 <RadioIrqProcess+0x3f4>
 8017d32:	a201      	add	r2, pc, #4	@ (adr r2, 8017d38 <RadioIrqProcess+0x58>)
 8017d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d38:	08017dc1 	.word	0x08017dc1
 8017d3c:	08017dfb 	.word	0x08017dfb
 8017d40:	080180d5 	.word	0x080180d5
 8017d44:	08017fb1 	.word	0x08017fb1
 8017d48:	080180d5 	.word	0x080180d5
 8017d4c:	080180d5 	.word	0x080180d5
 8017d50:	080180d5 	.word	0x080180d5
 8017d54:	0801802d 	.word	0x0801802d
 8017d58:	080180d5 	.word	0x080180d5
 8017d5c:	080180d5 	.word	0x080180d5
 8017d60:	080180d5 	.word	0x080180d5
 8017d64:	080180d5 	.word	0x080180d5
 8017d68:	080180d5 	.word	0x080180d5
 8017d6c:	080180d5 	.word	0x080180d5
 8017d70:	080180d5 	.word	0x080180d5
 8017d74:	08018049 	.word	0x08018049
 8017d78:	080180d5 	.word	0x080180d5
 8017d7c:	080180d5 	.word	0x080180d5
 8017d80:	080180d5 	.word	0x080180d5
 8017d84:	080180d5 	.word	0x080180d5
 8017d88:	080180d5 	.word	0x080180d5
 8017d8c:	080180d5 	.word	0x080180d5
 8017d90:	080180d5 	.word	0x080180d5
 8017d94:	080180d5 	.word	0x080180d5
 8017d98:	080180d5 	.word	0x080180d5
 8017d9c:	080180d5 	.word	0x080180d5
 8017da0:	080180d5 	.word	0x080180d5
 8017da4:	080180d5 	.word	0x080180d5
 8017da8:	080180d5 	.word	0x080180d5
 8017dac:	080180d5 	.word	0x080180d5
 8017db0:	080180d5 	.word	0x080180d5
 8017db4:	08018057 	.word	0x08018057
 8017db8:	2b40      	cmp	r3, #64	@ 0x40
 8017dba:	f000 816d 	beq.w	8018098 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8017dbe:	e189      	b.n	80180d4 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8017dc0:	4874      	ldr	r0, [pc, #464]	@ (8017f94 <RadioIrqProcess+0x2b4>)
 8017dc2:	f002 ffd9 	bl	801ad78 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017dc6:	2000      	movs	r0, #0
 8017dc8:	f001 f81e 	bl	8018e08 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8017dcc:	f002 f8ae 	bl	8019f2c <RFW_Is_LongPacketModeEnabled>
 8017dd0:	4603      	mov	r3, r0
 8017dd2:	2b01      	cmp	r3, #1
 8017dd4:	d101      	bne.n	8017dda <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8017dd6:	f002 f8d2 	bl	8019f7e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017dda:	4b6f      	ldr	r3, [pc, #444]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	f000 817a 	beq.w	80180d8 <RadioIrqProcess+0x3f8>
 8017de4:	4b6c      	ldr	r3, [pc, #432]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	f000 8174 	beq.w	80180d8 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8017df0:	4b69      	ldr	r3, [pc, #420]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	4798      	blx	r3
        break;
 8017df8:	e16e      	b.n	80180d8 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8017dfa:	4868      	ldr	r0, [pc, #416]	@ (8017f9c <RadioIrqProcess+0x2bc>)
 8017dfc:	f002 ffbc 	bl	801ad78 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017e00:	4b63      	ldr	r3, [pc, #396]	@ (8017f90 <RadioIrqProcess+0x2b0>)
 8017e02:	785b      	ldrb	r3, [r3, #1]
 8017e04:	f083 0301 	eor.w	r3, r3, #1
 8017e08:	b2db      	uxtb	r3, r3
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d014      	beq.n	8017e38 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8017e0e:	2000      	movs	r0, #0
 8017e10:	f000 fffa 	bl	8018e08 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8017e14:	2100      	movs	r1, #0
 8017e16:	f640 1002 	movw	r0, #2306	@ 0x902
 8017e1a:	f001 fd79 	bl	8019910 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8017e1e:	f640 1044 	movw	r0, #2372	@ 0x944
 8017e22:	f001 fd97 	bl	8019954 <SUBGRF_ReadRegister>
 8017e26:	4603      	mov	r3, r0
 8017e28:	f043 0302 	orr.w	r3, r3, #2
 8017e2c:	b2db      	uxtb	r3, r3
 8017e2e:	4619      	mov	r1, r3
 8017e30:	f640 1044 	movw	r0, #2372	@ 0x944
 8017e34:	f001 fd6c 	bl	8019910 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8017e38:	1dfb      	adds	r3, r7, #7
 8017e3a:	22ff      	movs	r2, #255	@ 0xff
 8017e3c:	4619      	mov	r1, r3
 8017e3e:	4858      	ldr	r0, [pc, #352]	@ (8017fa0 <RadioIrqProcess+0x2c0>)
 8017e40:	f000 feb2 	bl	8018ba8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8017e44:	4857      	ldr	r0, [pc, #348]	@ (8017fa4 <RadioIrqProcess+0x2c4>)
 8017e46:	f001 fd11 	bl	801986c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017e4a:	4b53      	ldr	r3, [pc, #332]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	f000 8144 	beq.w	80180dc <RadioIrqProcess+0x3fc>
 8017e54:	4b50      	ldr	r3, [pc, #320]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	689b      	ldr	r3, [r3, #8]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	f000 813e 	beq.w	80180dc <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8017e60:	4b4b      	ldr	r3, [pc, #300]	@ (8017f90 <RadioIrqProcess+0x2b0>)
 8017e62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8017e66:	2b01      	cmp	r3, #1
 8017e68:	d10e      	bne.n	8017e88 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8017e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	689c      	ldr	r4, [r3, #8]
 8017e70:	79fb      	ldrb	r3, [r7, #7]
 8017e72:	4619      	mov	r1, r3
 8017e74:	4b46      	ldr	r3, [pc, #280]	@ (8017f90 <RadioIrqProcess+0x2b0>)
 8017e76:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8017e7a:	461a      	mov	r2, r3
 8017e7c:	4b44      	ldr	r3, [pc, #272]	@ (8017f90 <RadioIrqProcess+0x2b0>)
 8017e7e:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8017e82:	4847      	ldr	r0, [pc, #284]	@ (8017fa0 <RadioIrqProcess+0x2c0>)
 8017e84:	47a0      	blx	r4
                break;
 8017e86:	e01d      	b.n	8017ec4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017e88:	4b41      	ldr	r3, [pc, #260]	@ (8017f90 <RadioIrqProcess+0x2b0>)
 8017e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017e8c:	463a      	mov	r2, r7
 8017e8e:	4611      	mov	r1, r2
 8017e90:	4618      	mov	r0, r3
 8017e92:	f001 ff99 	bl	8019dc8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8017e96:	4b40      	ldr	r3, [pc, #256]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	689c      	ldr	r4, [r3, #8]
 8017e9c:	79fb      	ldrb	r3, [r7, #7]
 8017e9e:	4619      	mov	r1, r3
 8017ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8017f90 <RadioIrqProcess+0x2b0>)
 8017ea2:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	683b      	ldr	r3, [r7, #0]
 8017eaa:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8017eae:	4a3e      	ldr	r2, [pc, #248]	@ (8017fa8 <RadioIrqProcess+0x2c8>)
 8017eb0:	fb82 5203 	smull	r5, r2, r2, r3
 8017eb4:	1192      	asrs	r2, r2, #6
 8017eb6:	17db      	asrs	r3, r3, #31
 8017eb8:	1ad3      	subs	r3, r2, r3
 8017eba:	b25b      	sxtb	r3, r3
 8017ebc:	4602      	mov	r2, r0
 8017ebe:	4838      	ldr	r0, [pc, #224]	@ (8017fa0 <RadioIrqProcess+0x2c0>)
 8017ec0:	47a0      	blx	r4
                break;
 8017ec2:	bf00      	nop
        break;
 8017ec4:	e10a      	b.n	80180dc <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8017ec6:	2000      	movs	r0, #0
 8017ec8:	f000 ff9e 	bl	8018e08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017ecc:	4b32      	ldr	r3, [pc, #200]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	f000 8105 	beq.w	80180e0 <RadioIrqProcess+0x400>
 8017ed6:	4b30      	ldr	r3, [pc, #192]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	699b      	ldr	r3, [r3, #24]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	f000 80ff 	beq.w	80180e0 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8017ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	699b      	ldr	r3, [r3, #24]
 8017ee8:	2000      	movs	r0, #0
 8017eea:	4798      	blx	r3
        break;
 8017eec:	e0f8      	b.n	80180e0 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8017eee:	2000      	movs	r0, #0
 8017ef0:	f000 ff8a 	bl	8018e08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017ef4:	4b28      	ldr	r3, [pc, #160]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	f000 80f3 	beq.w	80180e4 <RadioIrqProcess+0x404>
 8017efe:	4b26      	ldr	r3, [pc, #152]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	699b      	ldr	r3, [r3, #24]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	f000 80ed 	beq.w	80180e4 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8017f0a:	4b23      	ldr	r3, [pc, #140]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	699b      	ldr	r3, [r3, #24]
 8017f10:	2001      	movs	r0, #1
 8017f12:	4798      	blx	r3
        break;
 8017f14:	e0e6      	b.n	80180e4 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017f16:	4b25      	ldr	r3, [pc, #148]	@ (8017fac <RadioIrqProcess+0x2cc>)
 8017f18:	2201      	movs	r2, #1
 8017f1a:	2100      	movs	r1, #0
 8017f1c:	2002      	movs	r0, #2
 8017f1e:	f003 f935 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017f22:	f000 fe27 	bl	8018b74 <SUBGRF_GetOperatingMode>
 8017f26:	4603      	mov	r3, r0
 8017f28:	2b04      	cmp	r3, #4
 8017f2a:	d115      	bne.n	8017f58 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8017f2c:	4819      	ldr	r0, [pc, #100]	@ (8017f94 <RadioIrqProcess+0x2b4>)
 8017f2e:	f002 ff23 	bl	801ad78 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017f32:	2000      	movs	r0, #0
 8017f34:	f000 ff68 	bl	8018e08 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017f38:	4b17      	ldr	r3, [pc, #92]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	f000 80d3 	beq.w	80180e8 <RadioIrqProcess+0x408>
 8017f42:	4b15      	ldr	r3, [pc, #84]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	685b      	ldr	r3, [r3, #4]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	f000 80cd 	beq.w	80180e8 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8017f4e:	4b12      	ldr	r3, [pc, #72]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	685b      	ldr	r3, [r3, #4]
 8017f54:	4798      	blx	r3
        break;
 8017f56:	e0c7      	b.n	80180e8 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017f58:	f000 fe0c 	bl	8018b74 <SUBGRF_GetOperatingMode>
 8017f5c:	4603      	mov	r3, r0
 8017f5e:	2b05      	cmp	r3, #5
 8017f60:	f040 80c2 	bne.w	80180e8 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8017f64:	480d      	ldr	r0, [pc, #52]	@ (8017f9c <RadioIrqProcess+0x2bc>)
 8017f66:	f002 ff07 	bl	801ad78 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017f6a:	2000      	movs	r0, #0
 8017f6c:	f000 ff4c 	bl	8018e08 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017f70:	4b09      	ldr	r3, [pc, #36]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	f000 80b7 	beq.w	80180e8 <RadioIrqProcess+0x408>
 8017f7a:	4b07      	ldr	r3, [pc, #28]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	68db      	ldr	r3, [r3, #12]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	f000 80b1 	beq.w	80180e8 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8017f86:	4b04      	ldr	r3, [pc, #16]	@ (8017f98 <RadioIrqProcess+0x2b8>)
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	68db      	ldr	r3, [r3, #12]
 8017f8c:	4798      	blx	r3
        break;
 8017f8e:	e0ab      	b.n	80180e8 <RadioIrqProcess+0x408>
 8017f90:	200016b4 	.word	0x200016b4
 8017f94:	20001710 	.word	0x20001710
 8017f98:	200016b0 	.word	0x200016b0
 8017f9c:	20001728 	.word	0x20001728
 8017fa0:	200015b0 	.word	0x200015b0
 8017fa4:	200016d8 	.word	0x200016d8
 8017fa8:	10624dd3 	.word	0x10624dd3
 8017fac:	0801e544 	.word	0x0801e544
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017fb0:	4b54      	ldr	r3, [pc, #336]	@ (8018104 <RadioIrqProcess+0x424>)
 8017fb2:	2201      	movs	r2, #1
 8017fb4:	2100      	movs	r1, #0
 8017fb6:	2002      	movs	r0, #2
 8017fb8:	f003 f8e8 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8017fbc:	4b52      	ldr	r3, [pc, #328]	@ (8018108 <RadioIrqProcess+0x428>)
 8017fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	f000 8093 	beq.w	80180ec <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8017fc6:	4a51      	ldr	r2, [pc, #324]	@ (801810c <RadioIrqProcess+0x42c>)
 8017fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8018108 <RadioIrqProcess+0x428>)
 8017fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017fcc:	0c1b      	lsrs	r3, r3, #16
 8017fce:	b2db      	uxtb	r3, r3
 8017fd0:	4619      	mov	r1, r3
 8017fd2:	f640 1003 	movw	r0, #2307	@ 0x903
 8017fd6:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8017fd8:	4a4c      	ldr	r2, [pc, #304]	@ (801810c <RadioIrqProcess+0x42c>)
 8017fda:	4b4b      	ldr	r3, [pc, #300]	@ (8018108 <RadioIrqProcess+0x428>)
 8017fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017fde:	0a1b      	lsrs	r3, r3, #8
 8017fe0:	b2db      	uxtb	r3, r3
 8017fe2:	4619      	mov	r1, r3
 8017fe4:	f640 1004 	movw	r0, #2308	@ 0x904
 8017fe8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8017fea:	4a48      	ldr	r2, [pc, #288]	@ (801810c <RadioIrqProcess+0x42c>)
 8017fec:	4b46      	ldr	r3, [pc, #280]	@ (8018108 <RadioIrqProcess+0x428>)
 8017fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017ff0:	b2db      	uxtb	r3, r3
 8017ff2:	4619      	mov	r1, r3
 8017ff4:	f640 1005 	movw	r0, #2309	@ 0x905
 8017ff8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8017ffa:	4c44      	ldr	r4, [pc, #272]	@ (801810c <RadioIrqProcess+0x42c>)
 8017ffc:	4b44      	ldr	r3, [pc, #272]	@ (8018110 <RadioIrqProcess+0x430>)
 8017ffe:	f640 1002 	movw	r0, #2306	@ 0x902
 8018002:	4798      	blx	r3
 8018004:	4603      	mov	r3, r0
 8018006:	f043 0301 	orr.w	r3, r3, #1
 801800a:	b2db      	uxtb	r3, r3
 801800c:	4619      	mov	r1, r3
 801800e:	f640 1002 	movw	r0, #2306	@ 0x902
 8018012:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8018014:	4b3c      	ldr	r3, [pc, #240]	@ (8018108 <RadioIrqProcess+0x428>)
 8018016:	2200      	movs	r2, #0
 8018018:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801801a:	2300      	movs	r3, #0
 801801c:	2200      	movs	r2, #0
 801801e:	f240 2162 	movw	r1, #610	@ 0x262
 8018022:	f240 2062 	movw	r0, #610	@ 0x262
 8018026:	f001 f8c3 	bl	80191b0 <SUBGRF_SetDioIrqParams>
        break;
 801802a:	e05f      	b.n	80180ec <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801802c:	4b39      	ldr	r3, [pc, #228]	@ (8018114 <RadioIrqProcess+0x434>)
 801802e:	2201      	movs	r2, #1
 8018030:	2100      	movs	r1, #0
 8018032:	2002      	movs	r0, #2
 8018034:	f003 f8aa 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8018038:	f001 ff71 	bl	8019f1e <RFW_Is_Init>
 801803c:	4603      	mov	r3, r0
 801803e:	2b01      	cmp	r3, #1
 8018040:	d156      	bne.n	80180f0 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8018042:	f001 ffa2 	bl	8019f8a <RFW_ReceivePayload>
        break;
 8018046:	e053      	b.n	80180f0 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8018048:	4b33      	ldr	r3, [pc, #204]	@ (8018118 <RadioIrqProcess+0x438>)
 801804a:	2201      	movs	r2, #1
 801804c:	2100      	movs	r1, #0
 801804e:	2002      	movs	r0, #2
 8018050:	f003 f89c 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018054:	e051      	b.n	80180fa <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8018056:	4831      	ldr	r0, [pc, #196]	@ (801811c <RadioIrqProcess+0x43c>)
 8018058:	f002 fe8e 	bl	801ad78 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801805c:	4b2a      	ldr	r3, [pc, #168]	@ (8018108 <RadioIrqProcess+0x428>)
 801805e:	785b      	ldrb	r3, [r3, #1]
 8018060:	f083 0301 	eor.w	r3, r3, #1
 8018064:	b2db      	uxtb	r3, r3
 8018066:	2b00      	cmp	r3, #0
 8018068:	d002      	beq.n	8018070 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801806a:	2000      	movs	r0, #0
 801806c:	f000 fecc 	bl	8018e08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018070:	4b2b      	ldr	r3, [pc, #172]	@ (8018120 <RadioIrqProcess+0x440>)
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d03d      	beq.n	80180f4 <RadioIrqProcess+0x414>
 8018078:	4b29      	ldr	r3, [pc, #164]	@ (8018120 <RadioIrqProcess+0x440>)
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	68db      	ldr	r3, [r3, #12]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d038      	beq.n	80180f4 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8018082:	4b27      	ldr	r3, [pc, #156]	@ (8018120 <RadioIrqProcess+0x440>)
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	68db      	ldr	r3, [r3, #12]
 8018088:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801808a:	4b26      	ldr	r3, [pc, #152]	@ (8018124 <RadioIrqProcess+0x444>)
 801808c:	2201      	movs	r2, #1
 801808e:	2100      	movs	r1, #0
 8018090:	2002      	movs	r0, #2
 8018092:	f003 f87b 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018096:	e02d      	b.n	80180f4 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8018098:	4b23      	ldr	r3, [pc, #140]	@ (8018128 <RadioIrqProcess+0x448>)
 801809a:	2201      	movs	r2, #1
 801809c:	2100      	movs	r1, #0
 801809e:	2002      	movs	r0, #2
 80180a0:	f003 f874 	bl	801b18c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80180a4:	4b18      	ldr	r3, [pc, #96]	@ (8018108 <RadioIrqProcess+0x428>)
 80180a6:	785b      	ldrb	r3, [r3, #1]
 80180a8:	f083 0301 	eor.w	r3, r3, #1
 80180ac:	b2db      	uxtb	r3, r3
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d002      	beq.n	80180b8 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 80180b2:	2000      	movs	r0, #0
 80180b4:	f000 fea8 	bl	8018e08 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80180b8:	4b19      	ldr	r3, [pc, #100]	@ (8018120 <RadioIrqProcess+0x440>)
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d01b      	beq.n	80180f8 <RadioIrqProcess+0x418>
 80180c0:	4b17      	ldr	r3, [pc, #92]	@ (8018120 <RadioIrqProcess+0x440>)
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	691b      	ldr	r3, [r3, #16]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d016      	beq.n	80180f8 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 80180ca:	4b15      	ldr	r3, [pc, #84]	@ (8018120 <RadioIrqProcess+0x440>)
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	691b      	ldr	r3, [r3, #16]
 80180d0:	4798      	blx	r3
        break;
 80180d2:	e011      	b.n	80180f8 <RadioIrqProcess+0x418>
        break;
 80180d4:	bf00      	nop
 80180d6:	e010      	b.n	80180fa <RadioIrqProcess+0x41a>
        break;
 80180d8:	bf00      	nop
 80180da:	e00e      	b.n	80180fa <RadioIrqProcess+0x41a>
        break;
 80180dc:	bf00      	nop
 80180de:	e00c      	b.n	80180fa <RadioIrqProcess+0x41a>
        break;
 80180e0:	bf00      	nop
 80180e2:	e00a      	b.n	80180fa <RadioIrqProcess+0x41a>
        break;
 80180e4:	bf00      	nop
 80180e6:	e008      	b.n	80180fa <RadioIrqProcess+0x41a>
        break;
 80180e8:	bf00      	nop
 80180ea:	e006      	b.n	80180fa <RadioIrqProcess+0x41a>
        break;
 80180ec:	bf00      	nop
 80180ee:	e004      	b.n	80180fa <RadioIrqProcess+0x41a>
        break;
 80180f0:	bf00      	nop
 80180f2:	e002      	b.n	80180fa <RadioIrqProcess+0x41a>
        break;
 80180f4:	bf00      	nop
 80180f6:	e000      	b.n	80180fa <RadioIrqProcess+0x41a>
        break;
 80180f8:	bf00      	nop
    }
}
 80180fa:	bf00      	nop
 80180fc:	3708      	adds	r7, #8
 80180fe:	46bd      	mov	sp, r7
 8018100:	bdb0      	pop	{r4, r5, r7, pc}
 8018102:	bf00      	nop
 8018104:	0801e558 	.word	0x0801e558
 8018108:	200016b4 	.word	0x200016b4
 801810c:	08017af1 	.word	0x08017af1
 8018110:	08017b15 	.word	0x08017b15
 8018114:	0801e564 	.word	0x0801e564
 8018118:	0801e570 	.word	0x0801e570
 801811c:	20001728 	.word	0x20001728
 8018120:	200016b0 	.word	0x200016b0
 8018124:	0801e57c 	.word	0x0801e57c
 8018128:	0801e588 	.word	0x0801e588

0801812c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801812c:	b580      	push	{r7, lr}
 801812e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018130:	4b09      	ldr	r3, [pc, #36]	@ (8018158 <RadioTxPrbs+0x2c>)
 8018132:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018136:	2101      	movs	r1, #1
 8018138:	4618      	mov	r0, r3
 801813a:	f001 fcf7 	bl	8019b2c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801813e:	4b07      	ldr	r3, [pc, #28]	@ (801815c <RadioTxPrbs+0x30>)
 8018140:	212d      	movs	r1, #45	@ 0x2d
 8018142:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018146:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8018148:	f000 ff21 	bl	8018f8e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801814c:	4804      	ldr	r0, [pc, #16]	@ (8018160 <RadioTxPrbs+0x34>)
 801814e:	f000 fe77 	bl	8018e40 <SUBGRF_SetTx>
}
 8018152:	bf00      	nop
 8018154:	bd80      	pop	{r7, pc}
 8018156:	bf00      	nop
 8018158:	200016b4 	.word	0x200016b4
 801815c:	08017af1 	.word	0x08017af1
 8018160:	000fffff 	.word	0x000fffff

08018164 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8018164:	b580      	push	{r7, lr}
 8018166:	b084      	sub	sp, #16
 8018168:	af00      	add	r7, sp, #0
 801816a:	4603      	mov	r3, r0
 801816c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801816e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018172:	4618      	mov	r0, r3
 8018174:	f001 fd02 	bl	8019b7c <SUBGRF_SetRfTxPower>
 8018178:	4603      	mov	r3, r0
 801817a:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801817c:	210e      	movs	r1, #14
 801817e:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018182:	f001 fbc5 	bl	8019910 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8018186:	7bfb      	ldrb	r3, [r7, #15]
 8018188:	2101      	movs	r1, #1
 801818a:	4618      	mov	r0, r3
 801818c:	f001 fcce 	bl	8019b2c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8018190:	f000 fef4 	bl	8018f7c <SUBGRF_SetTxContinuousWave>
}
 8018194:	bf00      	nop
 8018196:	3710      	adds	r7, #16
 8018198:	46bd      	mov	sp, r7
 801819a:	bd80      	pop	{r7, pc}

0801819c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801819c:	b480      	push	{r7}
 801819e:	b089      	sub	sp, #36	@ 0x24
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	60f8      	str	r0, [r7, #12]
 80181a4:	60b9      	str	r1, [r7, #8]
 80181a6:	4613      	mov	r3, r2
 80181a8:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80181aa:	2300      	movs	r3, #0
 80181ac:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80181ae:	2300      	movs	r3, #0
 80181b0:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80181b2:	2300      	movs	r3, #0
 80181b4:	61bb      	str	r3, [r7, #24]
 80181b6:	e011      	b.n	80181dc <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80181b8:	69bb      	ldr	r3, [r7, #24]
 80181ba:	68ba      	ldr	r2, [r7, #8]
 80181bc:	4413      	add	r3, r2
 80181be:	781a      	ldrb	r2, [r3, #0]
 80181c0:	69bb      	ldr	r3, [r7, #24]
 80181c2:	68b9      	ldr	r1, [r7, #8]
 80181c4:	440b      	add	r3, r1
 80181c6:	43d2      	mvns	r2, r2
 80181c8:	b2d2      	uxtb	r2, r2
 80181ca:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80181cc:	69bb      	ldr	r3, [r7, #24]
 80181ce:	68fa      	ldr	r2, [r7, #12]
 80181d0:	4413      	add	r3, r2
 80181d2:	2200      	movs	r2, #0
 80181d4:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80181d6:	69bb      	ldr	r3, [r7, #24]
 80181d8:	3301      	adds	r3, #1
 80181da:	61bb      	str	r3, [r7, #24]
 80181dc:	79fb      	ldrb	r3, [r7, #7]
 80181de:	69ba      	ldr	r2, [r7, #24]
 80181e0:	429a      	cmp	r2, r3
 80181e2:	dbe9      	blt.n	80181b8 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80181e4:	2300      	movs	r3, #0
 80181e6:	61bb      	str	r3, [r7, #24]
 80181e8:	e049      	b.n	801827e <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80181ea:	69bb      	ldr	r3, [r7, #24]
 80181ec:	425a      	negs	r2, r3
 80181ee:	f003 0307 	and.w	r3, r3, #7
 80181f2:	f002 0207 	and.w	r2, r2, #7
 80181f6:	bf58      	it	pl
 80181f8:	4253      	negpl	r3, r2
 80181fa:	b2db      	uxtb	r3, r3
 80181fc:	f1c3 0307 	rsb	r3, r3, #7
 8018200:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8018202:	69bb      	ldr	r3, [r7, #24]
 8018204:	2b00      	cmp	r3, #0
 8018206:	da00      	bge.n	801820a <payload_integration+0x6e>
 8018208:	3307      	adds	r3, #7
 801820a:	10db      	asrs	r3, r3, #3
 801820c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801820e:	69bb      	ldr	r3, [r7, #24]
 8018210:	3301      	adds	r3, #1
 8018212:	425a      	negs	r2, r3
 8018214:	f003 0307 	and.w	r3, r3, #7
 8018218:	f002 0207 	and.w	r2, r2, #7
 801821c:	bf58      	it	pl
 801821e:	4253      	negpl	r3, r2
 8018220:	b2db      	uxtb	r3, r3
 8018222:	f1c3 0307 	rsb	r3, r3, #7
 8018226:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8018228:	69bb      	ldr	r3, [r7, #24]
 801822a:	3301      	adds	r3, #1
 801822c:	2b00      	cmp	r3, #0
 801822e:	da00      	bge.n	8018232 <payload_integration+0x96>
 8018230:	3307      	adds	r3, #7
 8018232:	10db      	asrs	r3, r3, #3
 8018234:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8018236:	7dbb      	ldrb	r3, [r7, #22]
 8018238:	68ba      	ldr	r2, [r7, #8]
 801823a:	4413      	add	r3, r2
 801823c:	781b      	ldrb	r3, [r3, #0]
 801823e:	461a      	mov	r2, r3
 8018240:	7dfb      	ldrb	r3, [r7, #23]
 8018242:	fa42 f303 	asr.w	r3, r2, r3
 8018246:	b2db      	uxtb	r3, r3
 8018248:	f003 0301 	and.w	r3, r3, #1
 801824c:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801824e:	7ffa      	ldrb	r2, [r7, #31]
 8018250:	7cfb      	ldrb	r3, [r7, #19]
 8018252:	4053      	eors	r3, r2
 8018254:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8018256:	7d3b      	ldrb	r3, [r7, #20]
 8018258:	68fa      	ldr	r2, [r7, #12]
 801825a:	4413      	add	r3, r2
 801825c:	781b      	ldrb	r3, [r3, #0]
 801825e:	b25a      	sxtb	r2, r3
 8018260:	7ff9      	ldrb	r1, [r7, #31]
 8018262:	7d7b      	ldrb	r3, [r7, #21]
 8018264:	fa01 f303 	lsl.w	r3, r1, r3
 8018268:	b25b      	sxtb	r3, r3
 801826a:	4313      	orrs	r3, r2
 801826c:	b259      	sxtb	r1, r3
 801826e:	7d3b      	ldrb	r3, [r7, #20]
 8018270:	68fa      	ldr	r2, [r7, #12]
 8018272:	4413      	add	r3, r2
 8018274:	b2ca      	uxtb	r2, r1
 8018276:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8018278:	69bb      	ldr	r3, [r7, #24]
 801827a:	3301      	adds	r3, #1
 801827c:	61bb      	str	r3, [r7, #24]
 801827e:	79fb      	ldrb	r3, [r7, #7]
 8018280:	00db      	lsls	r3, r3, #3
 8018282:	69ba      	ldr	r2, [r7, #24]
 8018284:	429a      	cmp	r2, r3
 8018286:	dbb0      	blt.n	80181ea <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8018288:	7ffb      	ldrb	r3, [r7, #31]
 801828a:	01db      	lsls	r3, r3, #7
 801828c:	b25a      	sxtb	r2, r3
 801828e:	7ffb      	ldrb	r3, [r7, #31]
 8018290:	019b      	lsls	r3, r3, #6
 8018292:	b25b      	sxtb	r3, r3
 8018294:	4313      	orrs	r3, r2
 8018296:	b25b      	sxtb	r3, r3
 8018298:	7ffa      	ldrb	r2, [r7, #31]
 801829a:	2a00      	cmp	r2, #0
 801829c:	d101      	bne.n	80182a2 <payload_integration+0x106>
 801829e:	2220      	movs	r2, #32
 80182a0:	e000      	b.n	80182a4 <payload_integration+0x108>
 80182a2:	2200      	movs	r2, #0
 80182a4:	4313      	orrs	r3, r2
 80182a6:	b259      	sxtb	r1, r3
 80182a8:	79fb      	ldrb	r3, [r7, #7]
 80182aa:	68fa      	ldr	r2, [r7, #12]
 80182ac:	4413      	add	r3, r2
 80182ae:	b2ca      	uxtb	r2, r1
 80182b0:	701a      	strb	r2, [r3, #0]
}
 80182b2:	bf00      	nop
 80182b4:	3724      	adds	r7, #36	@ 0x24
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bc80      	pop	{r7}
 80182ba:	4770      	bx	lr

080182bc <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b08c      	sub	sp, #48	@ 0x30
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	60b9      	str	r1, [r7, #8]
 80182c4:	607a      	str	r2, [r7, #4]
 80182c6:	603b      	str	r3, [r7, #0]
 80182c8:	4603      	mov	r3, r0
 80182ca:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80182cc:	2300      	movs	r3, #0
 80182ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 80182d0:	2300      	movs	r3, #0
 80182d2:	623b      	str	r3, [r7, #32]
 80182d4:	2300      	movs	r3, #0
 80182d6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80182d8:	f001 fe1b 	bl	8019f12 <RFW_DeInit>

    if( rxContinuous != 0 )
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d001      	beq.n	80182e6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80182e2:	2300      	movs	r3, #0
 80182e4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	bf14      	ite	ne
 80182ec:	2301      	movne	r3, #1
 80182ee:	2300      	moveq	r3, #0
 80182f0:	b2da      	uxtb	r2, r3
 80182f2:	4ba4      	ldr	r3, [pc, #656]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 80182f4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80182f6:	7bfb      	ldrb	r3, [r7, #15]
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d003      	beq.n	8018304 <RadioSetRxGenericConfig+0x48>
 80182fc:	2b01      	cmp	r3, #1
 80182fe:	f000 80dc 	beq.w	80184ba <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8018302:	e196      	b.n	8018632 <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8018304:	68bb      	ldr	r3, [r7, #8]
 8018306:	689b      	ldr	r3, [r3, #8]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d003      	beq.n	8018314 <RadioSetRxGenericConfig+0x58>
 801830c:	68bb      	ldr	r3, [r7, #8]
 801830e:	68db      	ldr	r3, [r3, #12]
 8018310:	2b00      	cmp	r3, #0
 8018312:	d102      	bne.n	801831a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8018314:	f04f 33ff 	mov.w	r3, #4294967295
 8018318:	e18c      	b.n	8018634 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 801831a:	68bb      	ldr	r3, [r7, #8]
 801831c:	7f9b      	ldrb	r3, [r3, #30]
 801831e:	2b08      	cmp	r3, #8
 8018320:	d902      	bls.n	8018328 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8018322:	f04f 33ff 	mov.w	r3, #4294967295
 8018326:	e185      	b.n	8018634 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8018328:	68bb      	ldr	r3, [r7, #8]
 801832a:	6919      	ldr	r1, [r3, #16]
 801832c:	68bb      	ldr	r3, [r7, #8]
 801832e:	7f9b      	ldrb	r3, [r3, #30]
 8018330:	461a      	mov	r2, r3
 8018332:	f107 0320 	add.w	r3, r7, #32
 8018336:	4618      	mov	r0, r3
 8018338:	f001 fede 	bl	801a0f8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801833c:	68bb      	ldr	r3, [r7, #8]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	2b00      	cmp	r3, #0
 8018342:	bf14      	ite	ne
 8018344:	2301      	movne	r3, #1
 8018346:	2300      	moveq	r3, #0
 8018348:	b2db      	uxtb	r3, r3
 801834a:	4618      	mov	r0, r3
 801834c:	f000 fe28 	bl	8018fa0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018350:	4b8c      	ldr	r3, [pc, #560]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 8018352:	2200      	movs	r2, #0
 8018354:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018358:	68bb      	ldr	r3, [r7, #8]
 801835a:	689b      	ldr	r3, [r3, #8]
 801835c:	4a89      	ldr	r2, [pc, #548]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 801835e:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018360:	68bb      	ldr	r3, [r7, #8]
 8018362:	f893 2020 	ldrb.w	r2, [r3, #32]
 8018366:	4b87      	ldr	r3, [pc, #540]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 8018368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801836c:	68bb      	ldr	r3, [r7, #8]
 801836e:	685b      	ldr	r3, [r3, #4]
 8018370:	4618      	mov	r0, r3
 8018372:	f001 fd01 	bl	8019d78 <SUBGRF_GetFskBandwidthRegValue>
 8018376:	4603      	mov	r3, r0
 8018378:	461a      	mov	r2, r3
 801837a:	4b82      	ldr	r3, [pc, #520]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 801837c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018380:	4b80      	ldr	r3, [pc, #512]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 8018382:	2200      	movs	r2, #0
 8018384:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8018386:	68bb      	ldr	r3, [r7, #8]
 8018388:	68db      	ldr	r3, [r3, #12]
 801838a:	b29b      	uxth	r3, r3
 801838c:	00db      	lsls	r3, r3, #3
 801838e:	b29a      	uxth	r2, r3
 8018390:	4b7c      	ldr	r3, [pc, #496]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 8018392:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8018394:	68bb      	ldr	r3, [r7, #8]
 8018396:	7fda      	ldrb	r2, [r3, #31]
 8018398:	4b7a      	ldr	r3, [pc, #488]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 801839a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801839c:	68bb      	ldr	r3, [r7, #8]
 801839e:	7f9b      	ldrb	r3, [r3, #30]
 80183a0:	00db      	lsls	r3, r3, #3
 80183a2:	b2da      	uxtb	r2, r3
 80183a4:	4b77      	ldr	r3, [pc, #476]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 80183a6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80183a8:	68bb      	ldr	r3, [r7, #8]
 80183aa:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80183ae:	4b75      	ldr	r3, [pc, #468]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 80183b0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80183b2:	68bb      	ldr	r3, [r7, #8]
 80183b4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d105      	bne.n	80183c8 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80183bc:	68bb      	ldr	r3, [r7, #8]
 80183be:	695b      	ldr	r3, [r3, #20]
 80183c0:	b2da      	uxtb	r2, r3
 80183c2:	4b70      	ldr	r3, [pc, #448]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 80183c4:	759a      	strb	r2, [r3, #22]
 80183c6:	e00b      	b.n	80183e0 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80183c8:	68bb      	ldr	r3, [r7, #8]
 80183ca:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80183ce:	2b02      	cmp	r3, #2
 80183d0:	d103      	bne.n	80183da <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80183d2:	4b6c      	ldr	r3, [pc, #432]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 80183d4:	22ff      	movs	r2, #255	@ 0xff
 80183d6:	759a      	strb	r2, [r3, #22]
 80183d8:	e002      	b.n	80183e0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80183da:	4b6a      	ldr	r3, [pc, #424]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 80183dc:	22ff      	movs	r2, #255	@ 0xff
 80183de:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80183e0:	68bb      	ldr	r3, [r7, #8]
 80183e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80183e6:	2b02      	cmp	r3, #2
 80183e8:	d004      	beq.n	80183f4 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80183ea:	68bb      	ldr	r3, [r7, #8]
 80183ec:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80183f0:	2b02      	cmp	r3, #2
 80183f2:	d12d      	bne.n	8018450 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80183f4:	68bb      	ldr	r3, [r7, #8]
 80183f6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80183fa:	2bf1      	cmp	r3, #241	@ 0xf1
 80183fc:	d00c      	beq.n	8018418 <RadioSetRxGenericConfig+0x15c>
 80183fe:	68bb      	ldr	r3, [r7, #8]
 8018400:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018404:	2bf2      	cmp	r3, #242	@ 0xf2
 8018406:	d007      	beq.n	8018418 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018408:	68bb      	ldr	r3, [r7, #8]
 801840a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801840e:	2b01      	cmp	r3, #1
 8018410:	d002      	beq.n	8018418 <RadioSetRxGenericConfig+0x15c>
                return -1;
 8018412:	f04f 33ff 	mov.w	r3, #4294967295
 8018416:	e10d      	b.n	8018634 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 8018418:	2300      	movs	r3, #0
 801841a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801841c:	68bb      	ldr	r3, [r7, #8]
 801841e:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8018420:	4b59      	ldr	r3, [pc, #356]	@ (8018588 <RadioSetRxGenericConfig+0x2cc>)
 8018422:	6819      	ldr	r1, [r3, #0]
 8018424:	f107 0314 	add.w	r3, r7, #20
 8018428:	4a58      	ldr	r2, [pc, #352]	@ (801858c <RadioSetRxGenericConfig+0x2d0>)
 801842a:	4618      	mov	r0, r3
 801842c:	f001 fd64 	bl	8019ef8 <RFW_Init>
 8018430:	4603      	mov	r3, r0
 8018432:	2b00      	cmp	r3, #0
 8018434:	d002      	beq.n	801843c <RadioSetRxGenericConfig+0x180>
                return -1;
 8018436:	f04f 33ff 	mov.w	r3, #4294967295
 801843a:	e0fb      	b.n	8018634 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801843c:	4b51      	ldr	r3, [pc, #324]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 801843e:	2200      	movs	r2, #0
 8018440:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8018442:	4b50      	ldr	r3, [pc, #320]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 8018444:	2201      	movs	r2, #1
 8018446:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018448:	4b4e      	ldr	r3, [pc, #312]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 801844a:	2200      	movs	r2, #0
 801844c:	755a      	strb	r2, [r3, #21]
        {
 801844e:	e00e      	b.n	801846e <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018450:	68bb      	ldr	r3, [r7, #8]
 8018452:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8018456:	4b4b      	ldr	r3, [pc, #300]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 8018458:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801845a:	68bb      	ldr	r3, [r7, #8]
 801845c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8018460:	4b48      	ldr	r3, [pc, #288]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 8018462:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8018464:	68bb      	ldr	r3, [r7, #8]
 8018466:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801846a:	4b46      	ldr	r3, [pc, #280]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 801846c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801846e:	f7ff fa3e 	bl	80178ee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018472:	2000      	movs	r0, #0
 8018474:	f7fe fbd2 	bl	8016c1c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018478:	4845      	ldr	r0, [pc, #276]	@ (8018590 <RadioSetRxGenericConfig+0x2d4>)
 801847a:	f001 f82f 	bl	80194dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801847e:	4845      	ldr	r0, [pc, #276]	@ (8018594 <RadioSetRxGenericConfig+0x2d8>)
 8018480:	f001 f8fe 	bl	8019680 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018484:	f107 0320 	add.w	r3, r7, #32
 8018488:	4618      	mov	r0, r3
 801848a:	f000 fbc2 	bl	8018c12 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801848e:	68bb      	ldr	r3, [r7, #8]
 8018490:	8b9b      	ldrh	r3, [r3, #28]
 8018492:	4618      	mov	r0, r3
 8018494:	f000 fc0c 	bl	8018cb0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8018498:	68bb      	ldr	r3, [r7, #8]
 801849a:	8b1b      	ldrh	r3, [r3, #24]
 801849c:	4618      	mov	r0, r3
 801849e:	f000 fbe7 	bl	8018c70 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80184a2:	683b      	ldr	r3, [r7, #0]
 80184a4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80184a8:	fb03 f202 	mul.w	r2, r3, r2
 80184ac:	68bb      	ldr	r3, [r7, #8]
 80184ae:	689b      	ldr	r3, [r3, #8]
 80184b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80184b4:	4a33      	ldr	r2, [pc, #204]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 80184b6:	6093      	str	r3, [r2, #8]
        break;
 80184b8:	e0bb      	b.n	8018632 <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 80184ba:	68bb      	ldr	r3, [r7, #8]
 80184bc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d102      	bne.n	80184c8 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80184c2:	f04f 33ff 	mov.w	r3, #4294967295
 80184c6:	e0b5      	b.n	8018634 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80184c8:	68bb      	ldr	r3, [r7, #8]
 80184ca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80184ce:	2b01      	cmp	r3, #1
 80184d0:	d105      	bne.n	80184de <RadioSetRxGenericConfig+0x222>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 80184d2:	68bb      	ldr	r3, [r7, #8]
 80184d4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80184d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80184dc:	e002      	b.n	80184e4 <RadioSetRxGenericConfig+0x228>
            MaxPayloadLength = 0xFF;
 80184de:	23ff      	movs	r3, #255	@ 0xff
 80184e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80184e4:	68bb      	ldr	r3, [r7, #8]
 80184e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	bf14      	ite	ne
 80184ec:	2301      	movne	r3, #1
 80184ee:	2300      	moveq	r3, #0
 80184f0:	b2db      	uxtb	r3, r3
 80184f2:	4618      	mov	r0, r3
 80184f4:	f000 fd54 	bl	8018fa0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80184f8:	683b      	ldr	r3, [r7, #0]
 80184fa:	b2db      	uxtb	r3, r3
 80184fc:	4618      	mov	r0, r3
 80184fe:	f000 fd5e 	bl	8018fbe <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018502:	4b20      	ldr	r3, [pc, #128]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 8018504:	2201      	movs	r2, #1
 8018506:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801850a:	68bb      	ldr	r3, [r7, #8]
 801850c:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8018510:	4b1c      	ldr	r3, [pc, #112]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 8018512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018516:	68bb      	ldr	r3, [r7, #8]
 8018518:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801851c:	4b19      	ldr	r3, [pc, #100]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 801851e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018522:	68bb      	ldr	r3, [r7, #8]
 8018524:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8018528:	4b16      	ldr	r3, [pc, #88]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 801852a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801852e:	68bb      	ldr	r3, [r7, #8]
 8018530:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018534:	2b02      	cmp	r3, #2
 8018536:	d010      	beq.n	801855a <RadioSetRxGenericConfig+0x29e>
 8018538:	2b02      	cmp	r3, #2
 801853a:	dc2d      	bgt.n	8018598 <RadioSetRxGenericConfig+0x2dc>
 801853c:	2b00      	cmp	r3, #0
 801853e:	d002      	beq.n	8018546 <RadioSetRxGenericConfig+0x28a>
 8018540:	2b01      	cmp	r3, #1
 8018542:	d005      	beq.n	8018550 <RadioSetRxGenericConfig+0x294>
            break;
 8018544:	e028      	b.n	8018598 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018546:	4b0f      	ldr	r3, [pc, #60]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 8018548:	2200      	movs	r2, #0
 801854a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801854e:	e024      	b.n	801859a <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018550:	4b0c      	ldr	r3, [pc, #48]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 8018552:	2201      	movs	r2, #1
 8018554:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018558:	e01f      	b.n	801859a <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801855a:	68bb      	ldr	r3, [r7, #8]
 801855c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018560:	2b0b      	cmp	r3, #11
 8018562:	d004      	beq.n	801856e <RadioSetRxGenericConfig+0x2b2>
 8018564:	68bb      	ldr	r3, [r7, #8]
 8018566:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801856a:	2b0c      	cmp	r3, #12
 801856c:	d104      	bne.n	8018578 <RadioSetRxGenericConfig+0x2bc>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801856e:	4b05      	ldr	r3, [pc, #20]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 8018570:	2201      	movs	r2, #1
 8018572:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018576:	e010      	b.n	801859a <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018578:	4b02      	ldr	r3, [pc, #8]	@ (8018584 <RadioSetRxGenericConfig+0x2c8>)
 801857a:	2200      	movs	r2, #0
 801857c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018580:	e00b      	b.n	801859a <RadioSetRxGenericConfig+0x2de>
 8018582:	bf00      	nop
 8018584:	200016b4 	.word	0x200016b4
 8018588:	200016b0 	.word	0x200016b0
 801858c:	20001728 	.word	0x20001728
 8018590:	200016ec 	.word	0x200016ec
 8018594:	200016c2 	.word	0x200016c2
            break;
 8018598:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801859a:	4b28      	ldr	r3, [pc, #160]	@ (801863c <RadioSetRxGenericConfig+0x380>)
 801859c:	2201      	movs	r2, #1
 801859e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80185a0:	68bb      	ldr	r3, [r7, #8]
 80185a2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80185a4:	4b25      	ldr	r3, [pc, #148]	@ (801863c <RadioSetRxGenericConfig+0x380>)
 80185a6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80185a8:	68bb      	ldr	r3, [r7, #8]
 80185aa:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80185ae:	4b23      	ldr	r3, [pc, #140]	@ (801863c <RadioSetRxGenericConfig+0x380>)
 80185b0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80185b2:	4a22      	ldr	r2, [pc, #136]	@ (801863c <RadioSetRxGenericConfig+0x380>)
 80185b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80185b8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80185ba:	68bb      	ldr	r3, [r7, #8]
 80185bc:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80185c0:	4b1e      	ldr	r3, [pc, #120]	@ (801863c <RadioSetRxGenericConfig+0x380>)
 80185c2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80185c6:	68bb      	ldr	r3, [r7, #8]
 80185c8:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80185cc:	4b1b      	ldr	r3, [pc, #108]	@ (801863c <RadioSetRxGenericConfig+0x380>)
 80185ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 80185d2:	f7ff f98c 	bl	80178ee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80185d6:	2001      	movs	r0, #1
 80185d8:	f7fe fb20 	bl	8016c1c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80185dc:	4818      	ldr	r0, [pc, #96]	@ (8018640 <RadioSetRxGenericConfig+0x384>)
 80185de:	f000 ff7d 	bl	80194dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80185e2:	4818      	ldr	r0, [pc, #96]	@ (8018644 <RadioSetRxGenericConfig+0x388>)
 80185e4:	f001 f84c 	bl	8019680 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80185e8:	4b14      	ldr	r3, [pc, #80]	@ (801863c <RadioSetRxGenericConfig+0x380>)
 80185ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80185ee:	2b01      	cmp	r3, #1
 80185f0:	d10d      	bne.n	801860e <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80185f2:	f240 7036 	movw	r0, #1846	@ 0x736
 80185f6:	f001 f9ad 	bl	8019954 <SUBGRF_ReadRegister>
 80185fa:	4603      	mov	r3, r0
 80185fc:	f023 0304 	bic.w	r3, r3, #4
 8018600:	b2db      	uxtb	r3, r3
 8018602:	4619      	mov	r1, r3
 8018604:	f240 7036 	movw	r0, #1846	@ 0x736
 8018608:	f001 f982 	bl	8019910 <SUBGRF_WriteRegister>
 801860c:	e00c      	b.n	8018628 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801860e:	f240 7036 	movw	r0, #1846	@ 0x736
 8018612:	f001 f99f 	bl	8019954 <SUBGRF_ReadRegister>
 8018616:	4603      	mov	r3, r0
 8018618:	f043 0304 	orr.w	r3, r3, #4
 801861c:	b2db      	uxtb	r3, r3
 801861e:	4619      	mov	r1, r3
 8018620:	f240 7036 	movw	r0, #1846	@ 0x736
 8018624:	f001 f974 	bl	8019910 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8018628:	4b04      	ldr	r3, [pc, #16]	@ (801863c <RadioSetRxGenericConfig+0x380>)
 801862a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801862e:	609a      	str	r2, [r3, #8]
        break;
 8018630:	bf00      	nop
    }
    return status;
 8018632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018634:	4618      	mov	r0, r3
 8018636:	3730      	adds	r7, #48	@ 0x30
 8018638:	46bd      	mov	sp, r7
 801863a:	bd80      	pop	{r7, pc}
 801863c:	200016b4 	.word	0x200016b4
 8018640:	200016ec 	.word	0x200016ec
 8018644:	200016c2 	.word	0x200016c2

08018648 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8018648:	b580      	push	{r7, lr}
 801864a:	b08e      	sub	sp, #56	@ 0x38
 801864c:	af00      	add	r7, sp, #0
 801864e:	60b9      	str	r1, [r7, #8]
 8018650:	607b      	str	r3, [r7, #4]
 8018652:	4603      	mov	r3, r0
 8018654:	73fb      	strb	r3, [r7, #15]
 8018656:	4613      	mov	r3, r2
 8018658:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801865a:	2300      	movs	r3, #0
 801865c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801865e:	2300      	movs	r3, #0
 8018660:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018662:	f001 fc56 	bl	8019f12 <RFW_DeInit>
    switch( modem )
 8018666:	7bfb      	ldrb	r3, [r7, #15]
 8018668:	2b03      	cmp	r3, #3
 801866a:	f200 8204 	bhi.w	8018a76 <RadioSetTxGenericConfig+0x42e>
 801866e:	a201      	add	r2, pc, #4	@ (adr r2, 8018674 <RadioSetTxGenericConfig+0x2c>)
 8018670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018674:	080187f9 	.word	0x080187f9
 8018678:	08018941 	.word	0x08018941
 801867c:	08018a39 	.word	0x08018a39
 8018680:	08018685 	.word	0x08018685
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8018684:	68bb      	ldr	r3, [r7, #8]
 8018686:	7c9b      	ldrb	r3, [r3, #18]
 8018688:	2b08      	cmp	r3, #8
 801868a:	d902      	bls.n	8018692 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801868c:	f04f 33ff 	mov.w	r3, #4294967295
 8018690:	e206      	b.n	8018aa0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8018692:	68bb      	ldr	r3, [r7, #8]
 8018694:	6899      	ldr	r1, [r3, #8]
 8018696:	68bb      	ldr	r3, [r7, #8]
 8018698:	7c9b      	ldrb	r3, [r3, #18]
 801869a:	461a      	mov	r2, r3
 801869c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80186a0:	4618      	mov	r0, r3
 80186a2:	f001 fd29 	bl	801a0f8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80186a6:	68bb      	ldr	r3, [r7, #8]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d102      	bne.n	80186b4 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80186ae:	f04f 33ff 	mov.w	r3, #4294967295
 80186b2:	e1f5      	b.n	8018aa0 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 80186b4:	68bb      	ldr	r3, [r7, #8]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80186bc:	4293      	cmp	r3, r2
 80186be:	d813      	bhi.n	80186e8 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 80186c0:	2302      	movs	r3, #2
 80186c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80186c6:	4b99      	ldr	r3, [pc, #612]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80186c8:	2203      	movs	r2, #3
 80186ca:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80186cc:	4b97      	ldr	r3, [pc, #604]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80186ce:	2203      	movs	r2, #3
 80186d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80186d4:	68bb      	ldr	r3, [r7, #8]
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	4a94      	ldr	r2, [pc, #592]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80186da:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80186dc:	68bb      	ldr	r3, [r7, #8]
 80186de:	7cda      	ldrb	r2, [r3, #19]
 80186e0:	4b92      	ldr	r3, [pc, #584]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80186e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80186e6:	e017      	b.n	8018718 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 80186e8:	2300      	movs	r3, #0
 80186ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80186ee:	4b8f      	ldr	r3, [pc, #572]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80186f0:	2200      	movs	r2, #0
 80186f2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80186f4:	4b8d      	ldr	r3, [pc, #564]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80186f6:	2200      	movs	r2, #0
 80186f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80186fc:	68bb      	ldr	r3, [r7, #8]
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	4a8a      	ldr	r2, [pc, #552]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 8018702:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018704:	68bb      	ldr	r3, [r7, #8]
 8018706:	7cda      	ldrb	r2, [r3, #19]
 8018708:	4b88      	ldr	r3, [pc, #544]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 801870a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801870e:	68bb      	ldr	r3, [r7, #8]
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	089b      	lsrs	r3, r3, #2
 8018714:	4a85      	ldr	r2, [pc, #532]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 8018716:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8018718:	68bb      	ldr	r3, [r7, #8]
 801871a:	685b      	ldr	r3, [r3, #4]
 801871c:	b29b      	uxth	r3, r3
 801871e:	00db      	lsls	r3, r3, #3
 8018720:	b29a      	uxth	r2, r3
 8018722:	4b82      	ldr	r3, [pc, #520]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 8018724:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018726:	4b81      	ldr	r3, [pc, #516]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 8018728:	2204      	movs	r2, #4
 801872a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801872c:	68bb      	ldr	r3, [r7, #8]
 801872e:	7c9b      	ldrb	r3, [r3, #18]
 8018730:	00db      	lsls	r3, r3, #3
 8018732:	b2da      	uxtb	r2, r3
 8018734:	4b7d      	ldr	r3, [pc, #500]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 8018736:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018738:	4b7c      	ldr	r3, [pc, #496]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 801873a:	2200      	movs	r2, #0
 801873c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801873e:	68bb      	ldr	r3, [r7, #8]
 8018740:	7d9b      	ldrb	r3, [r3, #22]
 8018742:	2b02      	cmp	r3, #2
 8018744:	d003      	beq.n	801874e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018746:	68bb      	ldr	r3, [r7, #8]
 8018748:	7d1b      	ldrb	r3, [r3, #20]
 801874a:	2b02      	cmp	r3, #2
 801874c:	d12b      	bne.n	80187a6 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801874e:	68bb      	ldr	r3, [r7, #8]
 8018750:	7d5b      	ldrb	r3, [r3, #21]
 8018752:	2bf1      	cmp	r3, #241	@ 0xf1
 8018754:	d00a      	beq.n	801876c <RadioSetTxGenericConfig+0x124>
 8018756:	68bb      	ldr	r3, [r7, #8]
 8018758:	7d5b      	ldrb	r3, [r3, #21]
 801875a:	2bf2      	cmp	r3, #242	@ 0xf2
 801875c:	d006      	beq.n	801876c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801875e:	68bb      	ldr	r3, [r7, #8]
 8018760:	7d5b      	ldrb	r3, [r3, #21]
 8018762:	2b01      	cmp	r3, #1
 8018764:	d002      	beq.n	801876c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8018766:	f04f 33ff 	mov.w	r3, #4294967295
 801876a:	e199      	b.n	8018aa0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801876c:	68bb      	ldr	r3, [r7, #8]
 801876e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8018770:	2301      	movs	r3, #1
 8018772:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8018776:	4b6e      	ldr	r3, [pc, #440]	@ (8018930 <RadioSetTxGenericConfig+0x2e8>)
 8018778:	6819      	ldr	r1, [r3, #0]
 801877a:	f107 0320 	add.w	r3, r7, #32
 801877e:	4a6d      	ldr	r2, [pc, #436]	@ (8018934 <RadioSetTxGenericConfig+0x2ec>)
 8018780:	4618      	mov	r0, r3
 8018782:	f001 fbb9 	bl	8019ef8 <RFW_Init>
 8018786:	4603      	mov	r3, r0
 8018788:	2b00      	cmp	r3, #0
 801878a:	d002      	beq.n	8018792 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801878c:	f04f 33ff 	mov.w	r3, #4294967295
 8018790:	e186      	b.n	8018aa0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018792:	4b66      	ldr	r3, [pc, #408]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 8018794:	2200      	movs	r2, #0
 8018796:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8018798:	4b64      	ldr	r3, [pc, #400]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 801879a:	2201      	movs	r2, #1
 801879c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801879e:	4b63      	ldr	r3, [pc, #396]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80187a0:	2200      	movs	r2, #0
 80187a2:	755a      	strb	r2, [r3, #21]
        {
 80187a4:	e00b      	b.n	80187be <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80187a6:	68bb      	ldr	r3, [r7, #8]
 80187a8:	7d5a      	ldrb	r2, [r3, #21]
 80187aa:	4b60      	ldr	r3, [pc, #384]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80187ac:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80187ae:	68bb      	ldr	r3, [r7, #8]
 80187b0:	7d9a      	ldrb	r2, [r3, #22]
 80187b2:	4b5e      	ldr	r3, [pc, #376]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80187b4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80187b6:	68bb      	ldr	r3, [r7, #8]
 80187b8:	7d1a      	ldrb	r2, [r3, #20]
 80187ba:	4b5c      	ldr	r3, [pc, #368]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80187bc:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80187be:	f7ff f896 	bl	80178ee <RadioStandby>
        RadioSetModem( radio_modem );
 80187c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80187c6:	4618      	mov	r0, r3
 80187c8:	f7fe fa28 	bl	8016c1c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80187cc:	485a      	ldr	r0, [pc, #360]	@ (8018938 <RadioSetTxGenericConfig+0x2f0>)
 80187ce:	f000 fe85 	bl	80194dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80187d2:	485a      	ldr	r0, [pc, #360]	@ (801893c <RadioSetTxGenericConfig+0x2f4>)
 80187d4:	f000 ff54 	bl	8019680 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80187d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80187dc:	4618      	mov	r0, r3
 80187de:	f000 fa18 	bl	8018c12 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80187e2:	68bb      	ldr	r3, [r7, #8]
 80187e4:	8a1b      	ldrh	r3, [r3, #16]
 80187e6:	4618      	mov	r0, r3
 80187e8:	f000 fa62 	bl	8018cb0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80187ec:	68bb      	ldr	r3, [r7, #8]
 80187ee:	899b      	ldrh	r3, [r3, #12]
 80187f0:	4618      	mov	r0, r3
 80187f2:	f000 fa3d 	bl	8018c70 <SUBGRF_SetCrcPolynomial>
        break;
 80187f6:	e13f      	b.n	8018a78 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 80187f8:	68bb      	ldr	r3, [r7, #8]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d102      	bne.n	8018806 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8018800:	f04f 33ff 	mov.w	r3, #4294967295
 8018804:	e14c      	b.n	8018aa0 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8018806:	68bb      	ldr	r3, [r7, #8]
 8018808:	7c9b      	ldrb	r3, [r3, #18]
 801880a:	2b08      	cmp	r3, #8
 801880c:	d902      	bls.n	8018814 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801880e:	f04f 33ff 	mov.w	r3, #4294967295
 8018812:	e145      	b.n	8018aa0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8018814:	68bb      	ldr	r3, [r7, #8]
 8018816:	6899      	ldr	r1, [r3, #8]
 8018818:	68bb      	ldr	r3, [r7, #8]
 801881a:	7c9b      	ldrb	r3, [r3, #18]
 801881c:	461a      	mov	r2, r3
 801881e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018822:	4618      	mov	r0, r3
 8018824:	f001 fc68 	bl	801a0f8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018828:	4b40      	ldr	r3, [pc, #256]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 801882a:	2200      	movs	r2, #0
 801882c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018830:	68bb      	ldr	r3, [r7, #8]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	4a3d      	ldr	r2, [pc, #244]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 8018836:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018838:	68bb      	ldr	r3, [r7, #8]
 801883a:	7cda      	ldrb	r2, [r3, #19]
 801883c:	4b3b      	ldr	r3, [pc, #236]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 801883e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8018842:	68bb      	ldr	r3, [r7, #8]
 8018844:	699b      	ldr	r3, [r3, #24]
 8018846:	4a39      	ldr	r2, [pc, #228]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 8018848:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801884a:	4b38      	ldr	r3, [pc, #224]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 801884c:	2200      	movs	r2, #0
 801884e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018850:	68bb      	ldr	r3, [r7, #8]
 8018852:	685b      	ldr	r3, [r3, #4]
 8018854:	b29b      	uxth	r3, r3
 8018856:	00db      	lsls	r3, r3, #3
 8018858:	b29a      	uxth	r2, r3
 801885a:	4b34      	ldr	r3, [pc, #208]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 801885c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801885e:	4b33      	ldr	r3, [pc, #204]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 8018860:	2204      	movs	r2, #4
 8018862:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018864:	68bb      	ldr	r3, [r7, #8]
 8018866:	7c9b      	ldrb	r3, [r3, #18]
 8018868:	00db      	lsls	r3, r3, #3
 801886a:	b2da      	uxtb	r2, r3
 801886c:	4b2f      	ldr	r3, [pc, #188]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 801886e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018870:	4b2e      	ldr	r3, [pc, #184]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 8018872:	2200      	movs	r2, #0
 8018874:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8018876:	68bb      	ldr	r3, [r7, #8]
 8018878:	7d9b      	ldrb	r3, [r3, #22]
 801887a:	2b02      	cmp	r3, #2
 801887c:	d003      	beq.n	8018886 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801887e:	68bb      	ldr	r3, [r7, #8]
 8018880:	7d1b      	ldrb	r3, [r3, #20]
 8018882:	2b02      	cmp	r3, #2
 8018884:	d12a      	bne.n	80188dc <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8018886:	68bb      	ldr	r3, [r7, #8]
 8018888:	7d5b      	ldrb	r3, [r3, #21]
 801888a:	2bf1      	cmp	r3, #241	@ 0xf1
 801888c:	d00a      	beq.n	80188a4 <RadioSetTxGenericConfig+0x25c>
 801888e:	68bb      	ldr	r3, [r7, #8]
 8018890:	7d5b      	ldrb	r3, [r3, #21]
 8018892:	2bf2      	cmp	r3, #242	@ 0xf2
 8018894:	d006      	beq.n	80188a4 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018896:	68bb      	ldr	r3, [r7, #8]
 8018898:	7d5b      	ldrb	r3, [r3, #21]
 801889a:	2b01      	cmp	r3, #1
 801889c:	d002      	beq.n	80188a4 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801889e:	f04f 33ff 	mov.w	r3, #4294967295
 80188a2:	e0fd      	b.n	8018aa0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80188a4:	2301      	movs	r3, #1
 80188a6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80188a8:	68bb      	ldr	r3, [r7, #8]
 80188aa:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80188ac:	4b20      	ldr	r3, [pc, #128]	@ (8018930 <RadioSetTxGenericConfig+0x2e8>)
 80188ae:	6819      	ldr	r1, [r3, #0]
 80188b0:	f107 0314 	add.w	r3, r7, #20
 80188b4:	4a1f      	ldr	r2, [pc, #124]	@ (8018934 <RadioSetTxGenericConfig+0x2ec>)
 80188b6:	4618      	mov	r0, r3
 80188b8:	f001 fb1e 	bl	8019ef8 <RFW_Init>
 80188bc:	4603      	mov	r3, r0
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d002      	beq.n	80188c8 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 80188c2:	f04f 33ff 	mov.w	r3, #4294967295
 80188c6:	e0eb      	b.n	8018aa0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80188c8:	4b18      	ldr	r3, [pc, #96]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80188ca:	2200      	movs	r2, #0
 80188cc:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80188ce:	4b17      	ldr	r3, [pc, #92]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80188d0:	2201      	movs	r2, #1
 80188d2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80188d4:	4b15      	ldr	r3, [pc, #84]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80188d6:	2200      	movs	r2, #0
 80188d8:	755a      	strb	r2, [r3, #21]
        {
 80188da:	e00b      	b.n	80188f4 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80188dc:	68bb      	ldr	r3, [r7, #8]
 80188de:	7d5a      	ldrb	r2, [r3, #21]
 80188e0:	4b12      	ldr	r3, [pc, #72]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80188e2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80188e4:	68bb      	ldr	r3, [r7, #8]
 80188e6:	7d9a      	ldrb	r2, [r3, #22]
 80188e8:	4b10      	ldr	r3, [pc, #64]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80188ea:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80188ec:	68bb      	ldr	r3, [r7, #8]
 80188ee:	7d1a      	ldrb	r2, [r3, #20]
 80188f0:	4b0e      	ldr	r3, [pc, #56]	@ (801892c <RadioSetTxGenericConfig+0x2e4>)
 80188f2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80188f4:	f7fe fffb 	bl	80178ee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80188f8:	2000      	movs	r0, #0
 80188fa:	f7fe f98f 	bl	8016c1c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80188fe:	480e      	ldr	r0, [pc, #56]	@ (8018938 <RadioSetTxGenericConfig+0x2f0>)
 8018900:	f000 fdec 	bl	80194dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018904:	480d      	ldr	r0, [pc, #52]	@ (801893c <RadioSetTxGenericConfig+0x2f4>)
 8018906:	f000 febb 	bl	8019680 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801890a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801890e:	4618      	mov	r0, r3
 8018910:	f000 f97f 	bl	8018c12 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018914:	68bb      	ldr	r3, [r7, #8]
 8018916:	8a1b      	ldrh	r3, [r3, #16]
 8018918:	4618      	mov	r0, r3
 801891a:	f000 f9c9 	bl	8018cb0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801891e:	68bb      	ldr	r3, [r7, #8]
 8018920:	899b      	ldrh	r3, [r3, #12]
 8018922:	4618      	mov	r0, r3
 8018924:	f000 f9a4 	bl	8018c70 <SUBGRF_SetCrcPolynomial>
        break;
 8018928:	e0a6      	b.n	8018a78 <RadioSetTxGenericConfig+0x430>
 801892a:	bf00      	nop
 801892c:	200016b4 	.word	0x200016b4
 8018930:	200016b0 	.word	0x200016b0
 8018934:	20001710 	.word	0x20001710
 8018938:	200016ec 	.word	0x200016ec
 801893c:	200016c2 	.word	0x200016c2
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018940:	4b59      	ldr	r3, [pc, #356]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 8018942:	2201      	movs	r2, #1
 8018944:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018948:	68bb      	ldr	r3, [r7, #8]
 801894a:	781a      	ldrb	r2, [r3, #0]
 801894c:	4b56      	ldr	r3, [pc, #344]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 801894e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018952:	68bb      	ldr	r3, [r7, #8]
 8018954:	785a      	ldrb	r2, [r3, #1]
 8018956:	4b54      	ldr	r3, [pc, #336]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 8018958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801895c:	68bb      	ldr	r3, [r7, #8]
 801895e:	789a      	ldrb	r2, [r3, #2]
 8018960:	4b51      	ldr	r3, [pc, #324]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 8018962:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8018966:	68bb      	ldr	r3, [r7, #8]
 8018968:	78db      	ldrb	r3, [r3, #3]
 801896a:	2b02      	cmp	r3, #2
 801896c:	d010      	beq.n	8018990 <RadioSetTxGenericConfig+0x348>
 801896e:	2b02      	cmp	r3, #2
 8018970:	dc20      	bgt.n	80189b4 <RadioSetTxGenericConfig+0x36c>
 8018972:	2b00      	cmp	r3, #0
 8018974:	d002      	beq.n	801897c <RadioSetTxGenericConfig+0x334>
 8018976:	2b01      	cmp	r3, #1
 8018978:	d005      	beq.n	8018986 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801897a:	e01b      	b.n	80189b4 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801897c:	4b4a      	ldr	r3, [pc, #296]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 801897e:	2200      	movs	r2, #0
 8018980:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018984:	e017      	b.n	80189b6 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018986:	4b48      	ldr	r3, [pc, #288]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 8018988:	2201      	movs	r2, #1
 801898a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801898e:	e012      	b.n	80189b6 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018990:	68bb      	ldr	r3, [r7, #8]
 8018992:	781b      	ldrb	r3, [r3, #0]
 8018994:	2b0b      	cmp	r3, #11
 8018996:	d003      	beq.n	80189a0 <RadioSetTxGenericConfig+0x358>
 8018998:	68bb      	ldr	r3, [r7, #8]
 801899a:	781b      	ldrb	r3, [r3, #0]
 801899c:	2b0c      	cmp	r3, #12
 801899e:	d104      	bne.n	80189aa <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80189a0:	4b41      	ldr	r3, [pc, #260]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 80189a2:	2201      	movs	r2, #1
 80189a4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80189a8:	e005      	b.n	80189b6 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80189aa:	4b3f      	ldr	r3, [pc, #252]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 80189ac:	2200      	movs	r2, #0
 80189ae:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80189b2:	e000      	b.n	80189b6 <RadioSetTxGenericConfig+0x36e>
            break;
 80189b4:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80189b6:	4b3c      	ldr	r3, [pc, #240]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 80189b8:	2201      	movs	r2, #1
 80189ba:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80189bc:	68bb      	ldr	r3, [r7, #8]
 80189be:	889a      	ldrh	r2, [r3, #4]
 80189c0:	4b39      	ldr	r3, [pc, #228]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 80189c2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80189c4:	68bb      	ldr	r3, [r7, #8]
 80189c6:	799a      	ldrb	r2, [r3, #6]
 80189c8:	4b37      	ldr	r3, [pc, #220]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 80189ca:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80189cc:	68bb      	ldr	r3, [r7, #8]
 80189ce:	79da      	ldrb	r2, [r3, #7]
 80189d0:	4b35      	ldr	r3, [pc, #212]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 80189d2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80189d6:	68bb      	ldr	r3, [r7, #8]
 80189d8:	7a1a      	ldrb	r2, [r3, #8]
 80189da:	4b33      	ldr	r3, [pc, #204]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 80189dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 80189e0:	f7fe ff85 	bl	80178ee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80189e4:	2001      	movs	r0, #1
 80189e6:	f7fe f919 	bl	8016c1c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80189ea:	4830      	ldr	r0, [pc, #192]	@ (8018aac <RadioSetTxGenericConfig+0x464>)
 80189ec:	f000 fd76 	bl	80194dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80189f0:	482f      	ldr	r0, [pc, #188]	@ (8018ab0 <RadioSetTxGenericConfig+0x468>)
 80189f2:	f000 fe45 	bl	8019680 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80189f6:	4b2c      	ldr	r3, [pc, #176]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 80189f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80189fc:	2b06      	cmp	r3, #6
 80189fe:	d10d      	bne.n	8018a1c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018a00:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a04:	f000 ffa6 	bl	8019954 <SUBGRF_ReadRegister>
 8018a08:	4603      	mov	r3, r0
 8018a0a:	f023 0304 	bic.w	r3, r3, #4
 8018a0e:	b2db      	uxtb	r3, r3
 8018a10:	4619      	mov	r1, r3
 8018a12:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a16:	f000 ff7b 	bl	8019910 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8018a1a:	e02d      	b.n	8018a78 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018a1c:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a20:	f000 ff98 	bl	8019954 <SUBGRF_ReadRegister>
 8018a24:	4603      	mov	r3, r0
 8018a26:	f043 0304 	orr.w	r3, r3, #4
 8018a2a:	b2db      	uxtb	r3, r3
 8018a2c:	4619      	mov	r1, r3
 8018a2e:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a32:	f000 ff6d 	bl	8019910 <SUBGRF_WriteRegister>
        break;
 8018a36:	e01f      	b.n	8018a78 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8018a38:	68bb      	ldr	r3, [r7, #8]
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d004      	beq.n	8018a4a <RadioSetTxGenericConfig+0x402>
 8018a40:	68bb      	ldr	r3, [r7, #8]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018a48:	d902      	bls.n	8018a50 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8018a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8018a4e:	e027      	b.n	8018aa0 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8018a50:	2003      	movs	r0, #3
 8018a52:	f7fe f8e3 	bl	8016c1c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018a56:	4b14      	ldr	r3, [pc, #80]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 8018a58:	2202      	movs	r2, #2
 8018a5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8018a5e:	68bb      	ldr	r3, [r7, #8]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	4a11      	ldr	r2, [pc, #68]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 8018a64:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018a66:	4b10      	ldr	r3, [pc, #64]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 8018a68:	2216      	movs	r2, #22
 8018a6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018a6e:	480f      	ldr	r0, [pc, #60]	@ (8018aac <RadioSetTxGenericConfig+0x464>)
 8018a70:	f000 fd34 	bl	80194dc <SUBGRF_SetModulationParams>
        break;
 8018a74:	e000      	b.n	8018a78 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8018a76:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018a78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	f001 f87d 	bl	8019b7c <SUBGRF_SetRfTxPower>
 8018a82:	4603      	mov	r3, r0
 8018a84:	461a      	mov	r2, r3
 8018a86:	4b08      	ldr	r3, [pc, #32]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 8018a88:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018a8c:	4b06      	ldr	r3, [pc, #24]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 8018a8e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018a92:	4618      	mov	r0, r3
 8018a94:	f001 fa51 	bl	8019f3a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018a98:	4a03      	ldr	r2, [pc, #12]	@ (8018aa8 <RadioSetTxGenericConfig+0x460>)
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	6053      	str	r3, [r2, #4]
    return 0;
 8018a9e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	3738      	adds	r7, #56	@ 0x38
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}
 8018aa8:	200016b4 	.word	0x200016b4
 8018aac:	200016ec 	.word	0x200016ec
 8018ab0:	200016c2 	.word	0x200016c2

08018ab4 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8018ab4:	b480      	push	{r7}
 8018ab6:	b085      	sub	sp, #20
 8018ab8:	af00      	add	r7, sp, #0
 8018aba:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8018abc:	2301      	movs	r3, #1
 8018abe:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8018ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	3714      	adds	r7, #20
 8018ac6:	46bd      	mov	sp, r7
 8018ac8:	bc80      	pop	{r7}
 8018aca:	4770      	bx	lr

08018acc <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8018acc:	b480      	push	{r7}
 8018ace:	b083      	sub	sp, #12
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	6078      	str	r0, [r7, #4]
 8018ad4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8018ad6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8018ad8:	4618      	mov	r0, r3
 8018ada:	370c      	adds	r7, #12
 8018adc:	46bd      	mov	sp, r7
 8018ade:	bc80      	pop	{r7}
 8018ae0:	4770      	bx	lr
	...

08018ae4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	b084      	sub	sp, #16
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d002      	beq.n	8018af8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8018af2:	4a1d      	ldr	r2, [pc, #116]	@ (8018b68 <SUBGRF_Init+0x84>)
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018af8:	f7e9 f98c 	bl	8001e14 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018afc:	2002      	movs	r0, #2
 8018afe:	f001 f919 	bl	8019d34 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8018b02:	4b1a      	ldr	r3, [pc, #104]	@ (8018b6c <SUBGRF_Init+0x88>)
 8018b04:	2200      	movs	r2, #0
 8018b06:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018b08:	2000      	movs	r0, #0
 8018b0a:	f000 f97d 	bl	8018e08 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018b0e:	f7f1 ff02 	bl	800a916 <RBI_IsTCXO>
 8018b12:	4603      	mov	r3, r0
 8018b14:	2b01      	cmp	r3, #1
 8018b16:	d10e      	bne.n	8018b36 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018b18:	2140      	movs	r1, #64	@ 0x40
 8018b1a:	2001      	movs	r0, #1
 8018b1c:	f000 fb82 	bl	8019224 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018b20:	2100      	movs	r1, #0
 8018b22:	f640 1011 	movw	r0, #2321	@ 0x911
 8018b26:	f000 fef3 	bl	8019910 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8018b2a:	237f      	movs	r3, #127	@ 0x7f
 8018b2c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018b2e:	7b38      	ldrb	r0, [r7, #12]
 8018b30:	f000 fa8b 	bl	801904a <SUBGRF_Calibrate>
 8018b34:	e009      	b.n	8018b4a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018b36:	2120      	movs	r1, #32
 8018b38:	f640 1011 	movw	r0, #2321	@ 0x911
 8018b3c:	f000 fee8 	bl	8019910 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018b40:	2120      	movs	r1, #32
 8018b42:	f640 1012 	movw	r0, #2322	@ 0x912
 8018b46:	f000 fee3 	bl	8019910 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018b4a:	210e      	movs	r1, #14
 8018b4c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018b50:	f000 fede 	bl	8019910 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8018b54:	f7f1 febc 	bl	800a8d0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018b58:	4b05      	ldr	r3, [pc, #20]	@ (8018b70 <SUBGRF_Init+0x8c>)
 8018b5a:	2201      	movs	r2, #1
 8018b5c:	701a      	strb	r2, [r3, #0]
}
 8018b5e:	bf00      	nop
 8018b60:	3710      	adds	r7, #16
 8018b62:	46bd      	mov	sp, r7
 8018b64:	bd80      	pop	{r7, pc}
 8018b66:	bf00      	nop
 8018b68:	2000174c 	.word	0x2000174c
 8018b6c:	20001748 	.word	0x20001748
 8018b70:	20001740 	.word	0x20001740

08018b74 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8018b74:	b480      	push	{r7}
 8018b76:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018b78:	4b02      	ldr	r3, [pc, #8]	@ (8018b84 <SUBGRF_GetOperatingMode+0x10>)
 8018b7a:	781b      	ldrb	r3, [r3, #0]
}
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	bc80      	pop	{r7}
 8018b82:	4770      	bx	lr
 8018b84:	20001740 	.word	0x20001740

08018b88 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018b88:	b580      	push	{r7, lr}
 8018b8a:	b082      	sub	sp, #8
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	6078      	str	r0, [r7, #4]
 8018b90:	460b      	mov	r3, r1
 8018b92:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8018b94:	78fb      	ldrb	r3, [r7, #3]
 8018b96:	461a      	mov	r2, r3
 8018b98:	6879      	ldr	r1, [r7, #4]
 8018b9a:	2000      	movs	r0, #0
 8018b9c:	f000 ff3e 	bl	8019a1c <SUBGRF_WriteBuffer>
}
 8018ba0:	bf00      	nop
 8018ba2:	3708      	adds	r7, #8
 8018ba4:	46bd      	mov	sp, r7
 8018ba6:	bd80      	pop	{r7, pc}

08018ba8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b086      	sub	sp, #24
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	60f8      	str	r0, [r7, #12]
 8018bb0:	60b9      	str	r1, [r7, #8]
 8018bb2:	4613      	mov	r3, r2
 8018bb4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8018bba:	f107 0317 	add.w	r3, r7, #23
 8018bbe:	4619      	mov	r1, r3
 8018bc0:	68b8      	ldr	r0, [r7, #8]
 8018bc2:	f000 fe27 	bl	8019814 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8018bc6:	68bb      	ldr	r3, [r7, #8]
 8018bc8:	781b      	ldrb	r3, [r3, #0]
 8018bca:	79fa      	ldrb	r2, [r7, #7]
 8018bcc:	429a      	cmp	r2, r3
 8018bce:	d201      	bcs.n	8018bd4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8018bd0:	2301      	movs	r3, #1
 8018bd2:	e007      	b.n	8018be4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8018bd4:	7df8      	ldrb	r0, [r7, #23]
 8018bd6:	68bb      	ldr	r3, [r7, #8]
 8018bd8:	781b      	ldrb	r3, [r3, #0]
 8018bda:	461a      	mov	r2, r3
 8018bdc:	68f9      	ldr	r1, [r7, #12]
 8018bde:	f000 ff3f 	bl	8019a60 <SUBGRF_ReadBuffer>

    return 0;
 8018be2:	2300      	movs	r3, #0
}
 8018be4:	4618      	mov	r0, r3
 8018be6:	3718      	adds	r7, #24
 8018be8:	46bd      	mov	sp, r7
 8018bea:	bd80      	pop	{r7, pc}

08018bec <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8018bec:	b580      	push	{r7, lr}
 8018bee:	b084      	sub	sp, #16
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	60f8      	str	r0, [r7, #12]
 8018bf4:	460b      	mov	r3, r1
 8018bf6:	607a      	str	r2, [r7, #4]
 8018bf8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018bfa:	7afb      	ldrb	r3, [r7, #11]
 8018bfc:	4619      	mov	r1, r3
 8018bfe:	68f8      	ldr	r0, [r7, #12]
 8018c00:	f7ff ffc2 	bl	8018b88 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8018c04:	6878      	ldr	r0, [r7, #4]
 8018c06:	f000 f91b 	bl	8018e40 <SUBGRF_SetTx>
}
 8018c0a:	bf00      	nop
 8018c0c:	3710      	adds	r7, #16
 8018c0e:	46bd      	mov	sp, r7
 8018c10:	bd80      	pop	{r7, pc}

08018c12 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8018c12:	b580      	push	{r7, lr}
 8018c14:	b082      	sub	sp, #8
 8018c16:	af00      	add	r7, sp, #0
 8018c18:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8018c1a:	2208      	movs	r2, #8
 8018c1c:	6879      	ldr	r1, [r7, #4]
 8018c1e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8018c22:	f000 feb7 	bl	8019994 <SUBGRF_WriteRegisters>
    return 0;
 8018c26:	2300      	movs	r3, #0
}
 8018c28:	4618      	mov	r0, r3
 8018c2a:	3708      	adds	r7, #8
 8018c2c:	46bd      	mov	sp, r7
 8018c2e:	bd80      	pop	{r7, pc}

08018c30 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018c30:	b580      	push	{r7, lr}
 8018c32:	b084      	sub	sp, #16
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	4603      	mov	r3, r0
 8018c38:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8018c3a:	88fb      	ldrh	r3, [r7, #6]
 8018c3c:	0a1b      	lsrs	r3, r3, #8
 8018c3e:	b29b      	uxth	r3, r3
 8018c40:	b2db      	uxtb	r3, r3
 8018c42:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8018c44:	88fb      	ldrh	r3, [r7, #6]
 8018c46:	b2db      	uxtb	r3, r3
 8018c48:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018c4a:	f000 fb6f 	bl	801932c <SUBGRF_GetPacketType>
 8018c4e:	4603      	mov	r3, r0
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d108      	bne.n	8018c66 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8018c54:	f107 030c 	add.w	r3, r7, #12
 8018c58:	2202      	movs	r2, #2
 8018c5a:	4619      	mov	r1, r3
 8018c5c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8018c60:	f000 fe98 	bl	8019994 <SUBGRF_WriteRegisters>
            break;
 8018c64:	e000      	b.n	8018c68 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8018c66:	bf00      	nop
    }
}
 8018c68:	bf00      	nop
 8018c6a:	3710      	adds	r7, #16
 8018c6c:	46bd      	mov	sp, r7
 8018c6e:	bd80      	pop	{r7, pc}

08018c70 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b084      	sub	sp, #16
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	4603      	mov	r3, r0
 8018c78:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8018c7a:	88fb      	ldrh	r3, [r7, #6]
 8018c7c:	0a1b      	lsrs	r3, r3, #8
 8018c7e:	b29b      	uxth	r3, r3
 8018c80:	b2db      	uxtb	r3, r3
 8018c82:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8018c84:	88fb      	ldrh	r3, [r7, #6]
 8018c86:	b2db      	uxtb	r3, r3
 8018c88:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018c8a:	f000 fb4f 	bl	801932c <SUBGRF_GetPacketType>
 8018c8e:	4603      	mov	r3, r0
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d108      	bne.n	8018ca6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8018c94:	f107 030c 	add.w	r3, r7, #12
 8018c98:	2202      	movs	r2, #2
 8018c9a:	4619      	mov	r1, r3
 8018c9c:	f240 60be 	movw	r0, #1726	@ 0x6be
 8018ca0:	f000 fe78 	bl	8019994 <SUBGRF_WriteRegisters>
            break;
 8018ca4:	e000      	b.n	8018ca8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8018ca6:	bf00      	nop
    }
}
 8018ca8:	bf00      	nop
 8018caa:	3710      	adds	r7, #16
 8018cac:	46bd      	mov	sp, r7
 8018cae:	bd80      	pop	{r7, pc}

08018cb0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b084      	sub	sp, #16
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	4603      	mov	r3, r0
 8018cb8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8018cba:	2300      	movs	r3, #0
 8018cbc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8018cbe:	f000 fb35 	bl	801932c <SUBGRF_GetPacketType>
 8018cc2:	4603      	mov	r3, r0
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d121      	bne.n	8018d0c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8018cc8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018ccc:	f000 fe42 	bl	8019954 <SUBGRF_ReadRegister>
 8018cd0:	4603      	mov	r3, r0
 8018cd2:	f023 0301 	bic.w	r3, r3, #1
 8018cd6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018cd8:	88fb      	ldrh	r3, [r7, #6]
 8018cda:	0a1b      	lsrs	r3, r3, #8
 8018cdc:	b29b      	uxth	r3, r3
 8018cde:	b25b      	sxtb	r3, r3
 8018ce0:	f003 0301 	and.w	r3, r3, #1
 8018ce4:	b25a      	sxtb	r2, r3
 8018ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018cea:	4313      	orrs	r3, r2
 8018cec:	b25b      	sxtb	r3, r3
 8018cee:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8018cf0:	7bfb      	ldrb	r3, [r7, #15]
 8018cf2:	4619      	mov	r1, r3
 8018cf4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018cf8:	f000 fe0a 	bl	8019910 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018cfc:	88fb      	ldrh	r3, [r7, #6]
 8018cfe:	b2db      	uxtb	r3, r3
 8018d00:	4619      	mov	r1, r3
 8018d02:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8018d06:	f000 fe03 	bl	8019910 <SUBGRF_WriteRegister>
            break;
 8018d0a:	e000      	b.n	8018d0e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018d0c:	bf00      	nop
    }
}
 8018d0e:	bf00      	nop
 8018d10:	3710      	adds	r7, #16
 8018d12:	46bd      	mov	sp, r7
 8018d14:	bd80      	pop	{r7, pc}

08018d16 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8018d16:	b580      	push	{r7, lr}
 8018d18:	b082      	sub	sp, #8
 8018d1a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018d20:	2300      	movs	r3, #0
 8018d22:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8018d24:	2300      	movs	r3, #0
 8018d26:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018d28:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018d2c:	f000 fe12 	bl	8019954 <SUBGRF_ReadRegister>
 8018d30:	4603      	mov	r3, r0
 8018d32:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8018d34:	79fb      	ldrb	r3, [r7, #7]
 8018d36:	f023 0301 	bic.w	r3, r3, #1
 8018d3a:	b2db      	uxtb	r3, r3
 8018d3c:	4619      	mov	r1, r3
 8018d3e:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018d42:	f000 fde5 	bl	8019910 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8018d46:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018d4a:	f000 fe03 	bl	8019954 <SUBGRF_ReadRegister>
 8018d4e:	4603      	mov	r3, r0
 8018d50:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8018d52:	79bb      	ldrb	r3, [r7, #6]
 8018d54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018d58:	b2db      	uxtb	r3, r3
 8018d5a:	4619      	mov	r1, r3
 8018d5c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018d60:	f000 fdd6 	bl	8019910 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018d64:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018d68:	f000 f88a 	bl	8018e80 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8018d6c:	463b      	mov	r3, r7
 8018d6e:	2204      	movs	r2, #4
 8018d70:	4619      	mov	r1, r3
 8018d72:	f640 0019 	movw	r0, #2073	@ 0x819
 8018d76:	f000 fe2f 	bl	80199d8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8018d7a:	2000      	movs	r0, #0
 8018d7c:	f000 f844 	bl	8018e08 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8018d80:	79fb      	ldrb	r3, [r7, #7]
 8018d82:	4619      	mov	r1, r3
 8018d84:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018d88:	f000 fdc2 	bl	8019910 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8018d8c:	79bb      	ldrb	r3, [r7, #6]
 8018d8e:	4619      	mov	r1, r3
 8018d90:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018d94:	f000 fdbc 	bl	8019910 <SUBGRF_WriteRegister>

    return number;
 8018d98:	683b      	ldr	r3, [r7, #0]
}
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	3708      	adds	r7, #8
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	bd80      	pop	{r7, pc}
	...

08018da4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b084      	sub	sp, #16
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8018dac:	2000      	movs	r0, #0
 8018dae:	f7f1 fd9a 	bl	800a8e6 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018db2:	2002      	movs	r0, #2
 8018db4:	f000 ffbe 	bl	8019d34 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018db8:	793b      	ldrb	r3, [r7, #4]
 8018dba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018dbe:	b2db      	uxtb	r3, r3
 8018dc0:	009b      	lsls	r3, r3, #2
 8018dc2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018dc4:	793b      	ldrb	r3, [r7, #4]
 8018dc6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018dca:	b2db      	uxtb	r3, r3
 8018dcc:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018dce:	b25b      	sxtb	r3, r3
 8018dd0:	4313      	orrs	r3, r2
 8018dd2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8018dd4:	793b      	ldrb	r3, [r7, #4]
 8018dd6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018dda:	b2db      	uxtb	r3, r3
 8018ddc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018dde:	4313      	orrs	r3, r2
 8018de0:	b25b      	sxtb	r3, r3
 8018de2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018de4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8018de6:	f107 030f 	add.w	r3, r7, #15
 8018dea:	2201      	movs	r2, #1
 8018dec:	4619      	mov	r1, r3
 8018dee:	2084      	movs	r0, #132	@ 0x84
 8018df0:	f000 fe58 	bl	8019aa4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018df4:	4b03      	ldr	r3, [pc, #12]	@ (8018e04 <SUBGRF_SetSleep+0x60>)
 8018df6:	2200      	movs	r2, #0
 8018df8:	701a      	strb	r2, [r3, #0]
}
 8018dfa:	bf00      	nop
 8018dfc:	3710      	adds	r7, #16
 8018dfe:	46bd      	mov	sp, r7
 8018e00:	bd80      	pop	{r7, pc}
 8018e02:	bf00      	nop
 8018e04:	20001740 	.word	0x20001740

08018e08 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b082      	sub	sp, #8
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	4603      	mov	r3, r0
 8018e10:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8018e12:	1dfb      	adds	r3, r7, #7
 8018e14:	2201      	movs	r2, #1
 8018e16:	4619      	mov	r1, r3
 8018e18:	2080      	movs	r0, #128	@ 0x80
 8018e1a:	f000 fe43 	bl	8019aa4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8018e1e:	79fb      	ldrb	r3, [r7, #7]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d103      	bne.n	8018e2c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018e24:	4b05      	ldr	r3, [pc, #20]	@ (8018e3c <SUBGRF_SetStandby+0x34>)
 8018e26:	2201      	movs	r2, #1
 8018e28:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8018e2a:	e002      	b.n	8018e32 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018e2c:	4b03      	ldr	r3, [pc, #12]	@ (8018e3c <SUBGRF_SetStandby+0x34>)
 8018e2e:	2202      	movs	r2, #2
 8018e30:	701a      	strb	r2, [r3, #0]
}
 8018e32:	bf00      	nop
 8018e34:	3708      	adds	r7, #8
 8018e36:	46bd      	mov	sp, r7
 8018e38:	bd80      	pop	{r7, pc}
 8018e3a:	bf00      	nop
 8018e3c:	20001740 	.word	0x20001740

08018e40 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018e40:	b580      	push	{r7, lr}
 8018e42:	b084      	sub	sp, #16
 8018e44:	af00      	add	r7, sp, #0
 8018e46:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018e48:	4b0c      	ldr	r3, [pc, #48]	@ (8018e7c <SUBGRF_SetTx+0x3c>)
 8018e4a:	2204      	movs	r2, #4
 8018e4c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	0c1b      	lsrs	r3, r3, #16
 8018e52:	b2db      	uxtb	r3, r3
 8018e54:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	0a1b      	lsrs	r3, r3, #8
 8018e5a:	b2db      	uxtb	r3, r3
 8018e5c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	b2db      	uxtb	r3, r3
 8018e62:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8018e64:	f107 030c 	add.w	r3, r7, #12
 8018e68:	2203      	movs	r2, #3
 8018e6a:	4619      	mov	r1, r3
 8018e6c:	2083      	movs	r0, #131	@ 0x83
 8018e6e:	f000 fe19 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 8018e72:	bf00      	nop
 8018e74:	3710      	adds	r7, #16
 8018e76:	46bd      	mov	sp, r7
 8018e78:	bd80      	pop	{r7, pc}
 8018e7a:	bf00      	nop
 8018e7c:	20001740 	.word	0x20001740

08018e80 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8018e80:	b580      	push	{r7, lr}
 8018e82:	b084      	sub	sp, #16
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018e88:	4b0c      	ldr	r3, [pc, #48]	@ (8018ebc <SUBGRF_SetRx+0x3c>)
 8018e8a:	2205      	movs	r2, #5
 8018e8c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	0c1b      	lsrs	r3, r3, #16
 8018e92:	b2db      	uxtb	r3, r3
 8018e94:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	0a1b      	lsrs	r3, r3, #8
 8018e9a:	b2db      	uxtb	r3, r3
 8018e9c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	b2db      	uxtb	r3, r3
 8018ea2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018ea4:	f107 030c 	add.w	r3, r7, #12
 8018ea8:	2203      	movs	r2, #3
 8018eaa:	4619      	mov	r1, r3
 8018eac:	2082      	movs	r0, #130	@ 0x82
 8018eae:	f000 fdf9 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 8018eb2:	bf00      	nop
 8018eb4:	3710      	adds	r7, #16
 8018eb6:	46bd      	mov	sp, r7
 8018eb8:	bd80      	pop	{r7, pc}
 8018eba:	bf00      	nop
 8018ebc:	20001740 	.word	0x20001740

08018ec0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8018ec0:	b580      	push	{r7, lr}
 8018ec2:	b084      	sub	sp, #16
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8018f04 <SUBGRF_SetRxBoosted+0x44>)
 8018eca:	2205      	movs	r2, #5
 8018ecc:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8018ece:	2197      	movs	r1, #151	@ 0x97
 8018ed0:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8018ed4:	f000 fd1c 	bl	8019910 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	0c1b      	lsrs	r3, r3, #16
 8018edc:	b2db      	uxtb	r3, r3
 8018ede:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	0a1b      	lsrs	r3, r3, #8
 8018ee4:	b2db      	uxtb	r3, r3
 8018ee6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	b2db      	uxtb	r3, r3
 8018eec:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018eee:	f107 030c 	add.w	r3, r7, #12
 8018ef2:	2203      	movs	r2, #3
 8018ef4:	4619      	mov	r1, r3
 8018ef6:	2082      	movs	r0, #130	@ 0x82
 8018ef8:	f000 fdd4 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 8018efc:	bf00      	nop
 8018efe:	3710      	adds	r7, #16
 8018f00:	46bd      	mov	sp, r7
 8018f02:	bd80      	pop	{r7, pc}
 8018f04:	20001740 	.word	0x20001740

08018f08 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b084      	sub	sp, #16
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
 8018f10:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	0c1b      	lsrs	r3, r3, #16
 8018f16:	b2db      	uxtb	r3, r3
 8018f18:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	0a1b      	lsrs	r3, r3, #8
 8018f1e:	b2db      	uxtb	r3, r3
 8018f20:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	b2db      	uxtb	r3, r3
 8018f26:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018f28:	683b      	ldr	r3, [r7, #0]
 8018f2a:	0c1b      	lsrs	r3, r3, #16
 8018f2c:	b2db      	uxtb	r3, r3
 8018f2e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018f30:	683b      	ldr	r3, [r7, #0]
 8018f32:	0a1b      	lsrs	r3, r3, #8
 8018f34:	b2db      	uxtb	r3, r3
 8018f36:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018f38:	683b      	ldr	r3, [r7, #0]
 8018f3a:	b2db      	uxtb	r3, r3
 8018f3c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8018f3e:	f107 0308 	add.w	r3, r7, #8
 8018f42:	2206      	movs	r2, #6
 8018f44:	4619      	mov	r1, r3
 8018f46:	2094      	movs	r0, #148	@ 0x94
 8018f48:	f000 fdac 	bl	8019aa4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8018f4c:	4b03      	ldr	r3, [pc, #12]	@ (8018f5c <SUBGRF_SetRxDutyCycle+0x54>)
 8018f4e:	2206      	movs	r2, #6
 8018f50:	701a      	strb	r2, [r3, #0]
}
 8018f52:	bf00      	nop
 8018f54:	3710      	adds	r7, #16
 8018f56:	46bd      	mov	sp, r7
 8018f58:	bd80      	pop	{r7, pc}
 8018f5a:	bf00      	nop
 8018f5c:	20001740 	.word	0x20001740

08018f60 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018f64:	2200      	movs	r2, #0
 8018f66:	2100      	movs	r1, #0
 8018f68:	20c5      	movs	r0, #197	@ 0xc5
 8018f6a:	f000 fd9b 	bl	8019aa4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8018f6e:	4b02      	ldr	r3, [pc, #8]	@ (8018f78 <SUBGRF_SetCad+0x18>)
 8018f70:	2207      	movs	r2, #7
 8018f72:	701a      	strb	r2, [r3, #0]
}
 8018f74:	bf00      	nop
 8018f76:	bd80      	pop	{r7, pc}
 8018f78:	20001740 	.word	0x20001740

08018f7c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018f80:	2200      	movs	r2, #0
 8018f82:	2100      	movs	r1, #0
 8018f84:	20d1      	movs	r0, #209	@ 0xd1
 8018f86:	f000 fd8d 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 8018f8a:	bf00      	nop
 8018f8c:	bd80      	pop	{r7, pc}

08018f8e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8018f8e:	b580      	push	{r7, lr}
 8018f90:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8018f92:	2200      	movs	r2, #0
 8018f94:	2100      	movs	r1, #0
 8018f96:	20d2      	movs	r0, #210	@ 0xd2
 8018f98:	f000 fd84 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 8018f9c:	bf00      	nop
 8018f9e:	bd80      	pop	{r7, pc}

08018fa0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b082      	sub	sp, #8
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	4603      	mov	r3, r0
 8018fa8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8018faa:	1dfb      	adds	r3, r7, #7
 8018fac:	2201      	movs	r2, #1
 8018fae:	4619      	mov	r1, r3
 8018fb0:	209f      	movs	r0, #159	@ 0x9f
 8018fb2:	f000 fd77 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 8018fb6:	bf00      	nop
 8018fb8:	3708      	adds	r7, #8
 8018fba:	46bd      	mov	sp, r7
 8018fbc:	bd80      	pop	{r7, pc}

08018fbe <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8018fbe:	b580      	push	{r7, lr}
 8018fc0:	b084      	sub	sp, #16
 8018fc2:	af00      	add	r7, sp, #0
 8018fc4:	4603      	mov	r3, r0
 8018fc6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8018fc8:	1dfb      	adds	r3, r7, #7
 8018fca:	2201      	movs	r2, #1
 8018fcc:	4619      	mov	r1, r3
 8018fce:	20a0      	movs	r0, #160	@ 0xa0
 8018fd0:	f000 fd68 	bl	8019aa4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8018fd4:	79fb      	ldrb	r3, [r7, #7]
 8018fd6:	2b3f      	cmp	r3, #63	@ 0x3f
 8018fd8:	d91c      	bls.n	8019014 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8018fda:	79fb      	ldrb	r3, [r7, #7]
 8018fdc:	085b      	lsrs	r3, r3, #1
 8018fde:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018fe0:	2300      	movs	r3, #0
 8018fe2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018fe4:	2300      	movs	r3, #0
 8018fe6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018fe8:	e005      	b.n	8018ff6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8018fea:	7bfb      	ldrb	r3, [r7, #15]
 8018fec:	089b      	lsrs	r3, r3, #2
 8018fee:	73fb      	strb	r3, [r7, #15]
            exp++;
 8018ff0:	7bbb      	ldrb	r3, [r7, #14]
 8018ff2:	3301      	adds	r3, #1
 8018ff4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018ff6:	7bfb      	ldrb	r3, [r7, #15]
 8018ff8:	2b1f      	cmp	r3, #31
 8018ffa:	d8f6      	bhi.n	8018fea <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018ffc:	7bfb      	ldrb	r3, [r7, #15]
 8018ffe:	00db      	lsls	r3, r3, #3
 8019000:	b2da      	uxtb	r2, r3
 8019002:	7bbb      	ldrb	r3, [r7, #14]
 8019004:	4413      	add	r3, r2
 8019006:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8019008:	7b7b      	ldrb	r3, [r7, #13]
 801900a:	4619      	mov	r1, r3
 801900c:	f240 7006 	movw	r0, #1798	@ 0x706
 8019010:	f000 fc7e 	bl	8019910 <SUBGRF_WriteRegister>
    }
}
 8019014:	bf00      	nop
 8019016:	3710      	adds	r7, #16
 8019018:	46bd      	mov	sp, r7
 801901a:	bd80      	pop	{r7, pc}

0801901c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801901c:	b580      	push	{r7, lr}
 801901e:	b082      	sub	sp, #8
 8019020:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8019022:	f7f1 fc83 	bl	800a92c <RBI_IsDCDC>
 8019026:	4603      	mov	r3, r0
 8019028:	2b01      	cmp	r3, #1
 801902a:	d102      	bne.n	8019032 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801902c:	2301      	movs	r3, #1
 801902e:	71fb      	strb	r3, [r7, #7]
 8019030:	e001      	b.n	8019036 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8019032:	2300      	movs	r3, #0
 8019034:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8019036:	1dfb      	adds	r3, r7, #7
 8019038:	2201      	movs	r2, #1
 801903a:	4619      	mov	r1, r3
 801903c:	2096      	movs	r0, #150	@ 0x96
 801903e:	f000 fd31 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 8019042:	bf00      	nop
 8019044:	3708      	adds	r7, #8
 8019046:	46bd      	mov	sp, r7
 8019048:	bd80      	pop	{r7, pc}

0801904a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801904a:	b580      	push	{r7, lr}
 801904c:	b084      	sub	sp, #16
 801904e:	af00      	add	r7, sp, #0
 8019050:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019052:	793b      	ldrb	r3, [r7, #4]
 8019054:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8019058:	b2db      	uxtb	r3, r3
 801905a:	019b      	lsls	r3, r3, #6
 801905c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801905e:	793b      	ldrb	r3, [r7, #4]
 8019060:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019064:	b2db      	uxtb	r3, r3
 8019066:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019068:	b25b      	sxtb	r3, r3
 801906a:	4313      	orrs	r3, r2
 801906c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801906e:	793b      	ldrb	r3, [r7, #4]
 8019070:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8019074:	b2db      	uxtb	r3, r3
 8019076:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019078:	b25b      	sxtb	r3, r3
 801907a:	4313      	orrs	r3, r2
 801907c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801907e:	793b      	ldrb	r3, [r7, #4]
 8019080:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019084:	b2db      	uxtb	r3, r3
 8019086:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019088:	b25b      	sxtb	r3, r3
 801908a:	4313      	orrs	r3, r2
 801908c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801908e:	793b      	ldrb	r3, [r7, #4]
 8019090:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019094:	b2db      	uxtb	r3, r3
 8019096:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019098:	b25b      	sxtb	r3, r3
 801909a:	4313      	orrs	r3, r2
 801909c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801909e:	793b      	ldrb	r3, [r7, #4]
 80190a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80190a4:	b2db      	uxtb	r3, r3
 80190a6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80190a8:	b25b      	sxtb	r3, r3
 80190aa:	4313      	orrs	r3, r2
 80190ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80190ae:	793b      	ldrb	r3, [r7, #4]
 80190b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80190b4:	b2db      	uxtb	r3, r3
 80190b6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80190b8:	4313      	orrs	r3, r2
 80190ba:	b25b      	sxtb	r3, r3
 80190bc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80190be:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80190c0:	f107 030f 	add.w	r3, r7, #15
 80190c4:	2201      	movs	r2, #1
 80190c6:	4619      	mov	r1, r3
 80190c8:	2089      	movs	r0, #137	@ 0x89
 80190ca:	f000 fceb 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 80190ce:	bf00      	nop
 80190d0:	3710      	adds	r7, #16
 80190d2:	46bd      	mov	sp, r7
 80190d4:	bd80      	pop	{r7, pc}
	...

080190d8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80190d8:	b580      	push	{r7, lr}
 80190da:	b084      	sub	sp, #16
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	4a1d      	ldr	r2, [pc, #116]	@ (8019158 <SUBGRF_CalibrateImage+0x80>)
 80190e4:	4293      	cmp	r3, r2
 80190e6:	d904      	bls.n	80190f2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80190e8:	23e1      	movs	r3, #225	@ 0xe1
 80190ea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80190ec:	23e9      	movs	r3, #233	@ 0xe9
 80190ee:	737b      	strb	r3, [r7, #13]
 80190f0:	e027      	b.n	8019142 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	4a19      	ldr	r2, [pc, #100]	@ (801915c <SUBGRF_CalibrateImage+0x84>)
 80190f6:	4293      	cmp	r3, r2
 80190f8:	d904      	bls.n	8019104 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80190fa:	23d7      	movs	r3, #215	@ 0xd7
 80190fc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80190fe:	23db      	movs	r3, #219	@ 0xdb
 8019100:	737b      	strb	r3, [r7, #13]
 8019102:	e01e      	b.n	8019142 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	4a16      	ldr	r2, [pc, #88]	@ (8019160 <SUBGRF_CalibrateImage+0x88>)
 8019108:	4293      	cmp	r3, r2
 801910a:	d904      	bls.n	8019116 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801910c:	23c1      	movs	r3, #193	@ 0xc1
 801910e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8019110:	23c5      	movs	r3, #197	@ 0xc5
 8019112:	737b      	strb	r3, [r7, #13]
 8019114:	e015      	b.n	8019142 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	4a12      	ldr	r2, [pc, #72]	@ (8019164 <SUBGRF_CalibrateImage+0x8c>)
 801911a:	4293      	cmp	r3, r2
 801911c:	d904      	bls.n	8019128 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801911e:	2375      	movs	r3, #117	@ 0x75
 8019120:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8019122:	2381      	movs	r3, #129	@ 0x81
 8019124:	737b      	strb	r3, [r7, #13]
 8019126:	e00c      	b.n	8019142 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	4a0f      	ldr	r2, [pc, #60]	@ (8019168 <SUBGRF_CalibrateImage+0x90>)
 801912c:	4293      	cmp	r3, r2
 801912e:	d904      	bls.n	801913a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8019130:	236b      	movs	r3, #107	@ 0x6b
 8019132:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8019134:	236f      	movs	r3, #111	@ 0x6f
 8019136:	737b      	strb	r3, [r7, #13]
 8019138:	e003      	b.n	8019142 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801913a:	2329      	movs	r3, #41	@ 0x29
 801913c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801913e:	232b      	movs	r3, #43	@ 0x2b
 8019140:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8019142:	f107 030c 	add.w	r3, r7, #12
 8019146:	2202      	movs	r2, #2
 8019148:	4619      	mov	r1, r3
 801914a:	2098      	movs	r0, #152	@ 0x98
 801914c:	f000 fcaa 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 8019150:	bf00      	nop
 8019152:	3710      	adds	r7, #16
 8019154:	46bd      	mov	sp, r7
 8019156:	bd80      	pop	{r7, pc}
 8019158:	35a4e900 	.word	0x35a4e900
 801915c:	32a9f880 	.word	0x32a9f880
 8019160:	2de54480 	.word	0x2de54480
 8019164:	1b6b0b00 	.word	0x1b6b0b00
 8019168:	1954fc40 	.word	0x1954fc40

0801916c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801916c:	b590      	push	{r4, r7, lr}
 801916e:	b085      	sub	sp, #20
 8019170:	af00      	add	r7, sp, #0
 8019172:	4604      	mov	r4, r0
 8019174:	4608      	mov	r0, r1
 8019176:	4611      	mov	r1, r2
 8019178:	461a      	mov	r2, r3
 801917a:	4623      	mov	r3, r4
 801917c:	71fb      	strb	r3, [r7, #7]
 801917e:	4603      	mov	r3, r0
 8019180:	71bb      	strb	r3, [r7, #6]
 8019182:	460b      	mov	r3, r1
 8019184:	717b      	strb	r3, [r7, #5]
 8019186:	4613      	mov	r3, r2
 8019188:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801918a:	79fb      	ldrb	r3, [r7, #7]
 801918c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801918e:	79bb      	ldrb	r3, [r7, #6]
 8019190:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8019192:	797b      	ldrb	r3, [r7, #5]
 8019194:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8019196:	793b      	ldrb	r3, [r7, #4]
 8019198:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801919a:	f107 030c 	add.w	r3, r7, #12
 801919e:	2204      	movs	r2, #4
 80191a0:	4619      	mov	r1, r3
 80191a2:	2095      	movs	r0, #149	@ 0x95
 80191a4:	f000 fc7e 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 80191a8:	bf00      	nop
 80191aa:	3714      	adds	r7, #20
 80191ac:	46bd      	mov	sp, r7
 80191ae:	bd90      	pop	{r4, r7, pc}

080191b0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80191b0:	b590      	push	{r4, r7, lr}
 80191b2:	b085      	sub	sp, #20
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	4604      	mov	r4, r0
 80191b8:	4608      	mov	r0, r1
 80191ba:	4611      	mov	r1, r2
 80191bc:	461a      	mov	r2, r3
 80191be:	4623      	mov	r3, r4
 80191c0:	80fb      	strh	r3, [r7, #6]
 80191c2:	4603      	mov	r3, r0
 80191c4:	80bb      	strh	r3, [r7, #4]
 80191c6:	460b      	mov	r3, r1
 80191c8:	807b      	strh	r3, [r7, #2]
 80191ca:	4613      	mov	r3, r2
 80191cc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80191ce:	88fb      	ldrh	r3, [r7, #6]
 80191d0:	0a1b      	lsrs	r3, r3, #8
 80191d2:	b29b      	uxth	r3, r3
 80191d4:	b2db      	uxtb	r3, r3
 80191d6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80191d8:	88fb      	ldrh	r3, [r7, #6]
 80191da:	b2db      	uxtb	r3, r3
 80191dc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80191de:	88bb      	ldrh	r3, [r7, #4]
 80191e0:	0a1b      	lsrs	r3, r3, #8
 80191e2:	b29b      	uxth	r3, r3
 80191e4:	b2db      	uxtb	r3, r3
 80191e6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80191e8:	88bb      	ldrh	r3, [r7, #4]
 80191ea:	b2db      	uxtb	r3, r3
 80191ec:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80191ee:	887b      	ldrh	r3, [r7, #2]
 80191f0:	0a1b      	lsrs	r3, r3, #8
 80191f2:	b29b      	uxth	r3, r3
 80191f4:	b2db      	uxtb	r3, r3
 80191f6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80191f8:	887b      	ldrh	r3, [r7, #2]
 80191fa:	b2db      	uxtb	r3, r3
 80191fc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80191fe:	883b      	ldrh	r3, [r7, #0]
 8019200:	0a1b      	lsrs	r3, r3, #8
 8019202:	b29b      	uxth	r3, r3
 8019204:	b2db      	uxtb	r3, r3
 8019206:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8019208:	883b      	ldrh	r3, [r7, #0]
 801920a:	b2db      	uxtb	r3, r3
 801920c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801920e:	f107 0308 	add.w	r3, r7, #8
 8019212:	2208      	movs	r2, #8
 8019214:	4619      	mov	r1, r3
 8019216:	2008      	movs	r0, #8
 8019218:	f000 fc44 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 801921c:	bf00      	nop
 801921e:	3714      	adds	r7, #20
 8019220:	46bd      	mov	sp, r7
 8019222:	bd90      	pop	{r4, r7, pc}

08019224 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b084      	sub	sp, #16
 8019228:	af00      	add	r7, sp, #0
 801922a:	4603      	mov	r3, r0
 801922c:	6039      	str	r1, [r7, #0]
 801922e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8019230:	79fb      	ldrb	r3, [r7, #7]
 8019232:	f003 0307 	and.w	r3, r3, #7
 8019236:	b2db      	uxtb	r3, r3
 8019238:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801923a:	683b      	ldr	r3, [r7, #0]
 801923c:	0c1b      	lsrs	r3, r3, #16
 801923e:	b2db      	uxtb	r3, r3
 8019240:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019242:	683b      	ldr	r3, [r7, #0]
 8019244:	0a1b      	lsrs	r3, r3, #8
 8019246:	b2db      	uxtb	r3, r3
 8019248:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801924a:	683b      	ldr	r3, [r7, #0]
 801924c:	b2db      	uxtb	r3, r3
 801924e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8019250:	f107 030c 	add.w	r3, r7, #12
 8019254:	2204      	movs	r2, #4
 8019256:	4619      	mov	r1, r3
 8019258:	2097      	movs	r0, #151	@ 0x97
 801925a:	f000 fc23 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 801925e:	bf00      	nop
 8019260:	3710      	adds	r7, #16
 8019262:	46bd      	mov	sp, r7
 8019264:	bd80      	pop	{r7, pc}
	...

08019268 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8019268:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801926c:	b084      	sub	sp, #16
 801926e:	af00      	add	r7, sp, #0
 8019270:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8019272:	2300      	movs	r3, #0
 8019274:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8019276:	4b1d      	ldr	r3, [pc, #116]	@ (80192ec <SUBGRF_SetRfFrequency+0x84>)
 8019278:	781b      	ldrb	r3, [r3, #0]
 801927a:	f083 0301 	eor.w	r3, r3, #1
 801927e:	b2db      	uxtb	r3, r3
 8019280:	2b00      	cmp	r3, #0
 8019282:	d005      	beq.n	8019290 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8019284:	6878      	ldr	r0, [r7, #4]
 8019286:	f7ff ff27 	bl	80190d8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801928a:	4b18      	ldr	r3, [pc, #96]	@ (80192ec <SUBGRF_SetRfFrequency+0x84>)
 801928c:	2201      	movs	r2, #1
 801928e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	2200      	movs	r2, #0
 8019294:	461c      	mov	r4, r3
 8019296:	4615      	mov	r5, r2
 8019298:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801929c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80192a0:	4a13      	ldr	r2, [pc, #76]	@ (80192f0 <SUBGRF_SetRfFrequency+0x88>)
 80192a2:	f04f 0300 	mov.w	r3, #0
 80192a6:	4640      	mov	r0, r8
 80192a8:	4649      	mov	r1, r9
 80192aa:	f7e7 fd89 	bl	8000dc0 <__aeabi_uldivmod>
 80192ae:	4602      	mov	r2, r0
 80192b0:	460b      	mov	r3, r1
 80192b2:	4613      	mov	r3, r2
 80192b4:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	0e1b      	lsrs	r3, r3, #24
 80192ba:	b2db      	uxtb	r3, r3
 80192bc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80192be:	68fb      	ldr	r3, [r7, #12]
 80192c0:	0c1b      	lsrs	r3, r3, #16
 80192c2:	b2db      	uxtb	r3, r3
 80192c4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	0a1b      	lsrs	r3, r3, #8
 80192ca:	b2db      	uxtb	r3, r3
 80192cc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	b2db      	uxtb	r3, r3
 80192d2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80192d4:	f107 0308 	add.w	r3, r7, #8
 80192d8:	2204      	movs	r2, #4
 80192da:	4619      	mov	r1, r3
 80192dc:	2086      	movs	r0, #134	@ 0x86
 80192de:	f000 fbe1 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 80192e2:	bf00      	nop
 80192e4:	3710      	adds	r7, #16
 80192e6:	46bd      	mov	sp, r7
 80192e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80192ec:	20001748 	.word	0x20001748
 80192f0:	01e84800 	.word	0x01e84800

080192f4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b082      	sub	sp, #8
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	4603      	mov	r3, r0
 80192fc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80192fe:	79fa      	ldrb	r2, [r7, #7]
 8019300:	4b09      	ldr	r3, [pc, #36]	@ (8019328 <SUBGRF_SetPacketType+0x34>)
 8019302:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8019304:	79fb      	ldrb	r3, [r7, #7]
 8019306:	2b00      	cmp	r3, #0
 8019308:	d104      	bne.n	8019314 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801930a:	2100      	movs	r1, #0
 801930c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8019310:	f000 fafe 	bl	8019910 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8019314:	1dfb      	adds	r3, r7, #7
 8019316:	2201      	movs	r2, #1
 8019318:	4619      	mov	r1, r3
 801931a:	208a      	movs	r0, #138	@ 0x8a
 801931c:	f000 fbc2 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 8019320:	bf00      	nop
 8019322:	3708      	adds	r7, #8
 8019324:	46bd      	mov	sp, r7
 8019326:	bd80      	pop	{r7, pc}
 8019328:	20001741 	.word	0x20001741

0801932c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801932c:	b480      	push	{r7}
 801932e:	af00      	add	r7, sp, #0
    return PacketType;
 8019330:	4b02      	ldr	r3, [pc, #8]	@ (801933c <SUBGRF_GetPacketType+0x10>)
 8019332:	781b      	ldrb	r3, [r3, #0]
}
 8019334:	4618      	mov	r0, r3
 8019336:	46bd      	mov	sp, r7
 8019338:	bc80      	pop	{r7}
 801933a:	4770      	bx	lr
 801933c:	20001741 	.word	0x20001741

08019340 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8019340:	b580      	push	{r7, lr}
 8019342:	b084      	sub	sp, #16
 8019344:	af00      	add	r7, sp, #0
 8019346:	4603      	mov	r3, r0
 8019348:	71fb      	strb	r3, [r7, #7]
 801934a:	460b      	mov	r3, r1
 801934c:	71bb      	strb	r3, [r7, #6]
 801934e:	4613      	mov	r3, r2
 8019350:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8019352:	79fb      	ldrb	r3, [r7, #7]
 8019354:	2b01      	cmp	r3, #1
 8019356:	d149      	bne.n	80193ec <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8019358:	2000      	movs	r0, #0
 801935a:	f7f1 faf2 	bl	800a942 <RBI_GetRFOMaxPowerConfig>
 801935e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8019360:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019364:	68fa      	ldr	r2, [r7, #12]
 8019366:	429a      	cmp	r2, r3
 8019368:	da01      	bge.n	801936e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801936e:	68fb      	ldr	r3, [r7, #12]
 8019370:	2b0e      	cmp	r3, #14
 8019372:	d10e      	bne.n	8019392 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8019374:	2301      	movs	r3, #1
 8019376:	2201      	movs	r2, #1
 8019378:	2100      	movs	r1, #0
 801937a:	2004      	movs	r0, #4
 801937c:	f7ff fef6 	bl	801916c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019380:	79ba      	ldrb	r2, [r7, #6]
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	b2db      	uxtb	r3, r3
 8019386:	1ad3      	subs	r3, r2, r3
 8019388:	b2db      	uxtb	r3, r3
 801938a:	330e      	adds	r3, #14
 801938c:	b2db      	uxtb	r3, r3
 801938e:	71bb      	strb	r3, [r7, #6]
 8019390:	e01f      	b.n	80193d2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	2b0a      	cmp	r3, #10
 8019396:	d10e      	bne.n	80193b6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8019398:	2301      	movs	r3, #1
 801939a:	2201      	movs	r2, #1
 801939c:	2100      	movs	r1, #0
 801939e:	2001      	movs	r0, #1
 80193a0:	f7ff fee4 	bl	801916c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80193a4:	79ba      	ldrb	r2, [r7, #6]
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	b2db      	uxtb	r3, r3
 80193aa:	1ad3      	subs	r3, r2, r3
 80193ac:	b2db      	uxtb	r3, r3
 80193ae:	330d      	adds	r3, #13
 80193b0:	b2db      	uxtb	r3, r3
 80193b2:	71bb      	strb	r3, [r7, #6]
 80193b4:	e00d      	b.n	80193d2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80193b6:	2301      	movs	r3, #1
 80193b8:	2201      	movs	r2, #1
 80193ba:	2100      	movs	r1, #0
 80193bc:	2007      	movs	r0, #7
 80193be:	f7ff fed5 	bl	801916c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80193c2:	79ba      	ldrb	r2, [r7, #6]
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	b2db      	uxtb	r3, r3
 80193c8:	1ad3      	subs	r3, r2, r3
 80193ca:	b2db      	uxtb	r3, r3
 80193cc:	330e      	adds	r3, #14
 80193ce:	b2db      	uxtb	r3, r3
 80193d0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80193d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80193d6:	f113 0f11 	cmn.w	r3, #17
 80193da:	da01      	bge.n	80193e0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80193dc:	23ef      	movs	r3, #239	@ 0xef
 80193de:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80193e0:	2118      	movs	r1, #24
 80193e2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80193e6:	f000 fa93 	bl	8019910 <SUBGRF_WriteRegister>
 80193ea:	e067      	b.n	80194bc <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80193ec:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80193f0:	f000 fab0 	bl	8019954 <SUBGRF_ReadRegister>
 80193f4:	4603      	mov	r3, r0
 80193f6:	f043 031e 	orr.w	r3, r3, #30
 80193fa:	b2db      	uxtb	r3, r3
 80193fc:	4619      	mov	r1, r3
 80193fe:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019402:	f000 fa85 	bl	8019910 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8019406:	2001      	movs	r0, #1
 8019408:	f7f1 fa9b 	bl	800a942 <RBI_GetRFOMaxPowerConfig>
 801940c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801940e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019412:	68fa      	ldr	r2, [r7, #12]
 8019414:	429a      	cmp	r2, r3
 8019416:	da01      	bge.n	801941c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	2b14      	cmp	r3, #20
 8019420:	d10e      	bne.n	8019440 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8019422:	2301      	movs	r3, #1
 8019424:	2200      	movs	r2, #0
 8019426:	2105      	movs	r1, #5
 8019428:	2003      	movs	r0, #3
 801942a:	f7ff fe9f 	bl	801916c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801942e:	79ba      	ldrb	r2, [r7, #6]
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	b2db      	uxtb	r3, r3
 8019434:	1ad3      	subs	r3, r2, r3
 8019436:	b2db      	uxtb	r3, r3
 8019438:	3316      	adds	r3, #22
 801943a:	b2db      	uxtb	r3, r3
 801943c:	71bb      	strb	r3, [r7, #6]
 801943e:	e031      	b.n	80194a4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	2b11      	cmp	r3, #17
 8019444:	d10e      	bne.n	8019464 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8019446:	2301      	movs	r3, #1
 8019448:	2200      	movs	r2, #0
 801944a:	2103      	movs	r1, #3
 801944c:	2002      	movs	r0, #2
 801944e:	f7ff fe8d 	bl	801916c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019452:	79ba      	ldrb	r2, [r7, #6]
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	b2db      	uxtb	r3, r3
 8019458:	1ad3      	subs	r3, r2, r3
 801945a:	b2db      	uxtb	r3, r3
 801945c:	3316      	adds	r3, #22
 801945e:	b2db      	uxtb	r3, r3
 8019460:	71bb      	strb	r3, [r7, #6]
 8019462:	e01f      	b.n	80194a4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	2b0e      	cmp	r3, #14
 8019468:	d10e      	bne.n	8019488 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801946a:	2301      	movs	r3, #1
 801946c:	2200      	movs	r2, #0
 801946e:	2102      	movs	r1, #2
 8019470:	2002      	movs	r0, #2
 8019472:	f7ff fe7b 	bl	801916c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019476:	79ba      	ldrb	r2, [r7, #6]
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	b2db      	uxtb	r3, r3
 801947c:	1ad3      	subs	r3, r2, r3
 801947e:	b2db      	uxtb	r3, r3
 8019480:	330e      	adds	r3, #14
 8019482:	b2db      	uxtb	r3, r3
 8019484:	71bb      	strb	r3, [r7, #6]
 8019486:	e00d      	b.n	80194a4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8019488:	2301      	movs	r3, #1
 801948a:	2200      	movs	r2, #0
 801948c:	2107      	movs	r1, #7
 801948e:	2004      	movs	r0, #4
 8019490:	f7ff fe6c 	bl	801916c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019494:	79ba      	ldrb	r2, [r7, #6]
 8019496:	68fb      	ldr	r3, [r7, #12]
 8019498:	b2db      	uxtb	r3, r3
 801949a:	1ad3      	subs	r3, r2, r3
 801949c:	b2db      	uxtb	r3, r3
 801949e:	3316      	adds	r3, #22
 80194a0:	b2db      	uxtb	r3, r3
 80194a2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80194a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80194a8:	f113 0f09 	cmn.w	r3, #9
 80194ac:	da01      	bge.n	80194b2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80194ae:	23f7      	movs	r3, #247	@ 0xf7
 80194b0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80194b2:	2138      	movs	r1, #56	@ 0x38
 80194b4:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80194b8:	f000 fa2a 	bl	8019910 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80194bc:	79bb      	ldrb	r3, [r7, #6]
 80194be:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 80194c0:	797b      	ldrb	r3, [r7, #5]
 80194c2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80194c4:	f107 0308 	add.w	r3, r7, #8
 80194c8:	2202      	movs	r2, #2
 80194ca:	4619      	mov	r1, r3
 80194cc:	208e      	movs	r0, #142	@ 0x8e
 80194ce:	f000 fae9 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 80194d2:	bf00      	nop
 80194d4:	3710      	adds	r7, #16
 80194d6:	46bd      	mov	sp, r7
 80194d8:	bd80      	pop	{r7, pc}
	...

080194dc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80194dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80194e0:	b086      	sub	sp, #24
 80194e2:	af00      	add	r7, sp, #0
 80194e4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80194e6:	2300      	movs	r3, #0
 80194e8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80194ea:	4a61      	ldr	r2, [pc, #388]	@ (8019670 <SUBGRF_SetModulationParams+0x194>)
 80194ec:	f107 0308 	add.w	r3, r7, #8
 80194f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194f4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	781a      	ldrb	r2, [r3, #0]
 80194fc:	4b5d      	ldr	r3, [pc, #372]	@ (8019674 <SUBGRF_SetModulationParams+0x198>)
 80194fe:	781b      	ldrb	r3, [r3, #0]
 8019500:	429a      	cmp	r2, r3
 8019502:	d004      	beq.n	801950e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	781b      	ldrb	r3, [r3, #0]
 8019508:	4618      	mov	r0, r3
 801950a:	f7ff fef3 	bl	80192f4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	781b      	ldrb	r3, [r3, #0]
 8019512:	2b03      	cmp	r3, #3
 8019514:	f200 80a5 	bhi.w	8019662 <SUBGRF_SetModulationParams+0x186>
 8019518:	a201      	add	r2, pc, #4	@ (adr r2, 8019520 <SUBGRF_SetModulationParams+0x44>)
 801951a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801951e:	bf00      	nop
 8019520:	08019531 	.word	0x08019531
 8019524:	080195f1 	.word	0x080195f1
 8019528:	080195b3 	.word	0x080195b3
 801952c:	0801961f 	.word	0x0801961f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8019530:	2308      	movs	r3, #8
 8019532:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	685b      	ldr	r3, [r3, #4]
 8019538:	4a4f      	ldr	r2, [pc, #316]	@ (8019678 <SUBGRF_SetModulationParams+0x19c>)
 801953a:	fbb2 f3f3 	udiv	r3, r2, r3
 801953e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019540:	697b      	ldr	r3, [r7, #20]
 8019542:	0c1b      	lsrs	r3, r3, #16
 8019544:	b2db      	uxtb	r3, r3
 8019546:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019548:	697b      	ldr	r3, [r7, #20]
 801954a:	0a1b      	lsrs	r3, r3, #8
 801954c:	b2db      	uxtb	r3, r3
 801954e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019550:	697b      	ldr	r3, [r7, #20]
 8019552:	b2db      	uxtb	r3, r3
 8019554:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	7b1b      	ldrb	r3, [r3, #12]
 801955a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	7b5b      	ldrb	r3, [r3, #13]
 8019560:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	689b      	ldr	r3, [r3, #8]
 8019566:	2200      	movs	r2, #0
 8019568:	461c      	mov	r4, r3
 801956a:	4615      	mov	r5, r2
 801956c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019570:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019574:	4a41      	ldr	r2, [pc, #260]	@ (801967c <SUBGRF_SetModulationParams+0x1a0>)
 8019576:	f04f 0300 	mov.w	r3, #0
 801957a:	4640      	mov	r0, r8
 801957c:	4649      	mov	r1, r9
 801957e:	f7e7 fc1f 	bl	8000dc0 <__aeabi_uldivmod>
 8019582:	4602      	mov	r2, r0
 8019584:	460b      	mov	r3, r1
 8019586:	4613      	mov	r3, r2
 8019588:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801958a:	697b      	ldr	r3, [r7, #20]
 801958c:	0c1b      	lsrs	r3, r3, #16
 801958e:	b2db      	uxtb	r3, r3
 8019590:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8019592:	697b      	ldr	r3, [r7, #20]
 8019594:	0a1b      	lsrs	r3, r3, #8
 8019596:	b2db      	uxtb	r3, r3
 8019598:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801959a:	697b      	ldr	r3, [r7, #20]
 801959c:	b2db      	uxtb	r3, r3
 801959e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80195a0:	7cfb      	ldrb	r3, [r7, #19]
 80195a2:	b29a      	uxth	r2, r3
 80195a4:	f107 0308 	add.w	r3, r7, #8
 80195a8:	4619      	mov	r1, r3
 80195aa:	208b      	movs	r0, #139	@ 0x8b
 80195ac:	f000 fa7a 	bl	8019aa4 <SUBGRF_WriteCommand>
        break;
 80195b0:	e058      	b.n	8019664 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 80195b2:	2304      	movs	r3, #4
 80195b4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	691b      	ldr	r3, [r3, #16]
 80195ba:	4a2f      	ldr	r2, [pc, #188]	@ (8019678 <SUBGRF_SetModulationParams+0x19c>)
 80195bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80195c0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80195c2:	697b      	ldr	r3, [r7, #20]
 80195c4:	0c1b      	lsrs	r3, r3, #16
 80195c6:	b2db      	uxtb	r3, r3
 80195c8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80195ca:	697b      	ldr	r3, [r7, #20]
 80195cc:	0a1b      	lsrs	r3, r3, #8
 80195ce:	b2db      	uxtb	r3, r3
 80195d0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80195d2:	697b      	ldr	r3, [r7, #20]
 80195d4:	b2db      	uxtb	r3, r3
 80195d6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	7d1b      	ldrb	r3, [r3, #20]
 80195dc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80195de:	7cfb      	ldrb	r3, [r7, #19]
 80195e0:	b29a      	uxth	r2, r3
 80195e2:	f107 0308 	add.w	r3, r7, #8
 80195e6:	4619      	mov	r1, r3
 80195e8:	208b      	movs	r0, #139	@ 0x8b
 80195ea:	f000 fa5b 	bl	8019aa4 <SUBGRF_WriteCommand>
        break;
 80195ee:	e039      	b.n	8019664 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 80195f0:	2304      	movs	r3, #4
 80195f2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	7e1b      	ldrb	r3, [r3, #24]
 80195f8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	7e5b      	ldrb	r3, [r3, #25]
 80195fe:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	7e9b      	ldrb	r3, [r3, #26]
 8019604:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	7edb      	ldrb	r3, [r3, #27]
 801960a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801960c:	7cfb      	ldrb	r3, [r7, #19]
 801960e:	b29a      	uxth	r2, r3
 8019610:	f107 0308 	add.w	r3, r7, #8
 8019614:	4619      	mov	r1, r3
 8019616:	208b      	movs	r0, #139	@ 0x8b
 8019618:	f000 fa44 	bl	8019aa4 <SUBGRF_WriteCommand>

        break;
 801961c:	e022      	b.n	8019664 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801961e:	2305      	movs	r3, #5
 8019620:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	685b      	ldr	r3, [r3, #4]
 8019626:	4a14      	ldr	r2, [pc, #80]	@ (8019678 <SUBGRF_SetModulationParams+0x19c>)
 8019628:	fbb2 f3f3 	udiv	r3, r2, r3
 801962c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801962e:	697b      	ldr	r3, [r7, #20]
 8019630:	0c1b      	lsrs	r3, r3, #16
 8019632:	b2db      	uxtb	r3, r3
 8019634:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019636:	697b      	ldr	r3, [r7, #20]
 8019638:	0a1b      	lsrs	r3, r3, #8
 801963a:	b2db      	uxtb	r3, r3
 801963c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801963e:	697b      	ldr	r3, [r7, #20]
 8019640:	b2db      	uxtb	r3, r3
 8019642:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	7b1b      	ldrb	r3, [r3, #12]
 8019648:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	7b5b      	ldrb	r3, [r3, #13]
 801964e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019650:	7cfb      	ldrb	r3, [r7, #19]
 8019652:	b29a      	uxth	r2, r3
 8019654:	f107 0308 	add.w	r3, r7, #8
 8019658:	4619      	mov	r1, r3
 801965a:	208b      	movs	r0, #139	@ 0x8b
 801965c:	f000 fa22 	bl	8019aa4 <SUBGRF_WriteCommand>
        break;
 8019660:	e000      	b.n	8019664 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8019662:	bf00      	nop
    }
}
 8019664:	bf00      	nop
 8019666:	3718      	adds	r7, #24
 8019668:	46bd      	mov	sp, r7
 801966a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801966e:	bf00      	nop
 8019670:	0801e598 	.word	0x0801e598
 8019674:	20001741 	.word	0x20001741
 8019678:	3d090000 	.word	0x3d090000
 801967c:	01e84800 	.word	0x01e84800

08019680 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8019680:	b580      	push	{r7, lr}
 8019682:	b086      	sub	sp, #24
 8019684:	af00      	add	r7, sp, #0
 8019686:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8019688:	2300      	movs	r3, #0
 801968a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801968c:	4a48      	ldr	r2, [pc, #288]	@ (80197b0 <SUBGRF_SetPacketParams+0x130>)
 801968e:	f107 030c 	add.w	r3, r7, #12
 8019692:	ca07      	ldmia	r2, {r0, r1, r2}
 8019694:	c303      	stmia	r3!, {r0, r1}
 8019696:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	781a      	ldrb	r2, [r3, #0]
 801969c:	4b45      	ldr	r3, [pc, #276]	@ (80197b4 <SUBGRF_SetPacketParams+0x134>)
 801969e:	781b      	ldrb	r3, [r3, #0]
 80196a0:	429a      	cmp	r2, r3
 80196a2:	d004      	beq.n	80196ae <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	781b      	ldrb	r3, [r3, #0]
 80196a8:	4618      	mov	r0, r3
 80196aa:	f7ff fe23 	bl	80192f4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	781b      	ldrb	r3, [r3, #0]
 80196b2:	2b03      	cmp	r3, #3
 80196b4:	d878      	bhi.n	80197a8 <SUBGRF_SetPacketParams+0x128>
 80196b6:	a201      	add	r2, pc, #4	@ (adr r2, 80196bc <SUBGRF_SetPacketParams+0x3c>)
 80196b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80196bc:	080196cd 	.word	0x080196cd
 80196c0:	0801975d 	.word	0x0801975d
 80196c4:	08019751 	.word	0x08019751
 80196c8:	080196cd 	.word	0x080196cd
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	7a5b      	ldrb	r3, [r3, #9]
 80196d0:	2bf1      	cmp	r3, #241	@ 0xf1
 80196d2:	d10a      	bne.n	80196ea <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80196d4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80196d8:	f7ff faaa 	bl	8018c30 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80196dc:	f248 0005 	movw	r0, #32773	@ 0x8005
 80196e0:	f7ff fac6 	bl	8018c70 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80196e4:	2302      	movs	r3, #2
 80196e6:	75bb      	strb	r3, [r7, #22]
 80196e8:	e011      	b.n	801970e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	7a5b      	ldrb	r3, [r3, #9]
 80196ee:	2bf2      	cmp	r3, #242	@ 0xf2
 80196f0:	d10a      	bne.n	8019708 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80196f2:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80196f6:	f7ff fa9b 	bl	8018c30 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80196fa:	f241 0021 	movw	r0, #4129	@ 0x1021
 80196fe:	f7ff fab7 	bl	8018c70 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8019702:	2306      	movs	r3, #6
 8019704:	75bb      	strb	r3, [r7, #22]
 8019706:	e002      	b.n	801970e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	7a5b      	ldrb	r3, [r3, #9]
 801970c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801970e:	2309      	movs	r3, #9
 8019710:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	885b      	ldrh	r3, [r3, #2]
 8019716:	0a1b      	lsrs	r3, r3, #8
 8019718:	b29b      	uxth	r3, r3
 801971a:	b2db      	uxtb	r3, r3
 801971c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	885b      	ldrh	r3, [r3, #2]
 8019722:	b2db      	uxtb	r3, r3
 8019724:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	791b      	ldrb	r3, [r3, #4]
 801972a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	795b      	ldrb	r3, [r3, #5]
 8019730:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	799b      	ldrb	r3, [r3, #6]
 8019736:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	79db      	ldrb	r3, [r3, #7]
 801973c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	7a1b      	ldrb	r3, [r3, #8]
 8019742:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019744:	7dbb      	ldrb	r3, [r7, #22]
 8019746:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	7a9b      	ldrb	r3, [r3, #10]
 801974c:	753b      	strb	r3, [r7, #20]
        break;
 801974e:	e022      	b.n	8019796 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019750:	2301      	movs	r3, #1
 8019752:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	7b1b      	ldrb	r3, [r3, #12]
 8019758:	733b      	strb	r3, [r7, #12]
        break;
 801975a:	e01c      	b.n	8019796 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801975c:	2306      	movs	r3, #6
 801975e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	89db      	ldrh	r3, [r3, #14]
 8019764:	0a1b      	lsrs	r3, r3, #8
 8019766:	b29b      	uxth	r3, r3
 8019768:	b2db      	uxtb	r3, r3
 801976a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	89db      	ldrh	r3, [r3, #14]
 8019770:	b2db      	uxtb	r3, r3
 8019772:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	7c1a      	ldrb	r2, [r3, #16]
 8019778:	4b0f      	ldr	r3, [pc, #60]	@ (80197b8 <SUBGRF_SetPacketParams+0x138>)
 801977a:	4611      	mov	r1, r2
 801977c:	7019      	strb	r1, [r3, #0]
 801977e:	4613      	mov	r3, r2
 8019780:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	7c5b      	ldrb	r3, [r3, #17]
 8019786:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	7c9b      	ldrb	r3, [r3, #18]
 801978c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	7cdb      	ldrb	r3, [r3, #19]
 8019792:	747b      	strb	r3, [r7, #17]
        break;
 8019794:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8019796:	7dfb      	ldrb	r3, [r7, #23]
 8019798:	b29a      	uxth	r2, r3
 801979a:	f107 030c 	add.w	r3, r7, #12
 801979e:	4619      	mov	r1, r3
 80197a0:	208c      	movs	r0, #140	@ 0x8c
 80197a2:	f000 f97f 	bl	8019aa4 <SUBGRF_WriteCommand>
 80197a6:	e000      	b.n	80197aa <SUBGRF_SetPacketParams+0x12a>
        return;
 80197a8:	bf00      	nop
}
 80197aa:	3718      	adds	r7, #24
 80197ac:	46bd      	mov	sp, r7
 80197ae:	bd80      	pop	{r7, pc}
 80197b0:	0801e5a0 	.word	0x0801e5a0
 80197b4:	20001741 	.word	0x20001741
 80197b8:	20001742 	.word	0x20001742

080197bc <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80197bc:	b580      	push	{r7, lr}
 80197be:	b084      	sub	sp, #16
 80197c0:	af00      	add	r7, sp, #0
 80197c2:	4603      	mov	r3, r0
 80197c4:	460a      	mov	r2, r1
 80197c6:	71fb      	strb	r3, [r7, #7]
 80197c8:	4613      	mov	r3, r2
 80197ca:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80197cc:	79fb      	ldrb	r3, [r7, #7]
 80197ce:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80197d0:	79bb      	ldrb	r3, [r7, #6]
 80197d2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80197d4:	f107 030c 	add.w	r3, r7, #12
 80197d8:	2202      	movs	r2, #2
 80197da:	4619      	mov	r1, r3
 80197dc:	208f      	movs	r0, #143	@ 0x8f
 80197de:	f000 f961 	bl	8019aa4 <SUBGRF_WriteCommand>
}
 80197e2:	bf00      	nop
 80197e4:	3710      	adds	r7, #16
 80197e6:	46bd      	mov	sp, r7
 80197e8:	bd80      	pop	{r7, pc}

080197ea <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80197ea:	b580      	push	{r7, lr}
 80197ec:	b082      	sub	sp, #8
 80197ee:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80197f0:	2300      	movs	r3, #0
 80197f2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80197f4:	1d3b      	adds	r3, r7, #4
 80197f6:	2201      	movs	r2, #1
 80197f8:	4619      	mov	r1, r3
 80197fa:	2015      	movs	r0, #21
 80197fc:	f000 f974 	bl	8019ae8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019800:	793b      	ldrb	r3, [r7, #4]
 8019802:	425b      	negs	r3, r3
 8019804:	105b      	asrs	r3, r3, #1
 8019806:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019808:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801980c:	4618      	mov	r0, r3
 801980e:	3708      	adds	r7, #8
 8019810:	46bd      	mov	sp, r7
 8019812:	bd80      	pop	{r7, pc}

08019814 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8019814:	b580      	push	{r7, lr}
 8019816:	b084      	sub	sp, #16
 8019818:	af00      	add	r7, sp, #0
 801981a:	6078      	str	r0, [r7, #4]
 801981c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801981e:	f107 030c 	add.w	r3, r7, #12
 8019822:	2202      	movs	r2, #2
 8019824:	4619      	mov	r1, r3
 8019826:	2013      	movs	r0, #19
 8019828:	f000 f95e 	bl	8019ae8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801982c:	f7ff fd7e 	bl	801932c <SUBGRF_GetPacketType>
 8019830:	4603      	mov	r3, r0
 8019832:	2b01      	cmp	r3, #1
 8019834:	d10d      	bne.n	8019852 <SUBGRF_GetRxBufferStatus+0x3e>
 8019836:	4b0c      	ldr	r3, [pc, #48]	@ (8019868 <SUBGRF_GetRxBufferStatus+0x54>)
 8019838:	781b      	ldrb	r3, [r3, #0]
 801983a:	b2db      	uxtb	r3, r3
 801983c:	2b01      	cmp	r3, #1
 801983e:	d108      	bne.n	8019852 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019840:	f240 7002 	movw	r0, #1794	@ 0x702
 8019844:	f000 f886 	bl	8019954 <SUBGRF_ReadRegister>
 8019848:	4603      	mov	r3, r0
 801984a:	461a      	mov	r2, r3
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	701a      	strb	r2, [r3, #0]
 8019850:	e002      	b.n	8019858 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8019852:	7b3a      	ldrb	r2, [r7, #12]
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8019858:	7b7a      	ldrb	r2, [r7, #13]
 801985a:	683b      	ldr	r3, [r7, #0]
 801985c:	701a      	strb	r2, [r3, #0]
}
 801985e:	bf00      	nop
 8019860:	3710      	adds	r7, #16
 8019862:	46bd      	mov	sp, r7
 8019864:	bd80      	pop	{r7, pc}
 8019866:	bf00      	nop
 8019868:	20001742 	.word	0x20001742

0801986c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801986c:	b580      	push	{r7, lr}
 801986e:	b084      	sub	sp, #16
 8019870:	af00      	add	r7, sp, #0
 8019872:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019874:	f107 030c 	add.w	r3, r7, #12
 8019878:	2203      	movs	r2, #3
 801987a:	4619      	mov	r1, r3
 801987c:	2014      	movs	r0, #20
 801987e:	f000 f933 	bl	8019ae8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8019882:	f7ff fd53 	bl	801932c <SUBGRF_GetPacketType>
 8019886:	4603      	mov	r3, r0
 8019888:	461a      	mov	r2, r3
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	781b      	ldrb	r3, [r3, #0]
 8019892:	2b00      	cmp	r3, #0
 8019894:	d002      	beq.n	801989c <SUBGRF_GetPacketStatus+0x30>
 8019896:	2b01      	cmp	r3, #1
 8019898:	d013      	beq.n	80198c2 <SUBGRF_GetPacketStatus+0x56>
 801989a:	e02a      	b.n	80198f2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801989c:	7b3a      	ldrb	r2, [r7, #12]
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80198a2:	7b7b      	ldrb	r3, [r7, #13]
 80198a4:	425b      	negs	r3, r3
 80198a6:	105b      	asrs	r3, r3, #1
 80198a8:	b25a      	sxtb	r2, r3
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80198ae:	7bbb      	ldrb	r3, [r7, #14]
 80198b0:	425b      	negs	r3, r3
 80198b2:	105b      	asrs	r3, r3, #1
 80198b4:	b25a      	sxtb	r2, r3
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	2200      	movs	r2, #0
 80198be:	609a      	str	r2, [r3, #8]
            break;
 80198c0:	e020      	b.n	8019904 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80198c2:	7b3b      	ldrb	r3, [r7, #12]
 80198c4:	425b      	negs	r3, r3
 80198c6:	105b      	asrs	r3, r3, #1
 80198c8:	b25a      	sxtb	r2, r3
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80198ce:	7b7b      	ldrb	r3, [r7, #13]
 80198d0:	b25b      	sxtb	r3, r3
 80198d2:	3302      	adds	r3, #2
 80198d4:	109b      	asrs	r3, r3, #2
 80198d6:	b25a      	sxtb	r2, r3
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80198dc:	7bbb      	ldrb	r3, [r7, #14]
 80198de:	425b      	negs	r3, r3
 80198e0:	105b      	asrs	r3, r3, #1
 80198e2:	b25a      	sxtb	r2, r3
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80198e8:	4b08      	ldr	r3, [pc, #32]	@ (801990c <SUBGRF_GetPacketStatus+0xa0>)
 80198ea:	681a      	ldr	r2, [r3, #0]
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	611a      	str	r2, [r3, #16]
            break;
 80198f0:	e008      	b.n	8019904 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80198f2:	2214      	movs	r2, #20
 80198f4:	2100      	movs	r1, #0
 80198f6:	6878      	ldr	r0, [r7, #4]
 80198f8:	f000 fc1d 	bl	801a136 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	220f      	movs	r2, #15
 8019900:	701a      	strb	r2, [r3, #0]
            break;
 8019902:	bf00      	nop
    }
}
 8019904:	bf00      	nop
 8019906:	3710      	adds	r7, #16
 8019908:	46bd      	mov	sp, r7
 801990a:	bd80      	pop	{r7, pc}
 801990c:	20001744 	.word	0x20001744

08019910 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8019910:	b580      	push	{r7, lr}
 8019912:	b086      	sub	sp, #24
 8019914:	af00      	add	r7, sp, #0
 8019916:	4603      	mov	r3, r0
 8019918:	460a      	mov	r2, r1
 801991a:	80fb      	strh	r3, [r7, #6]
 801991c:	4613      	mov	r3, r2
 801991e:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019920:	f3ef 8310 	mrs	r3, PRIMASK
 8019924:	60fb      	str	r3, [r7, #12]
  return(result);
 8019926:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019928:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801992a:	b672      	cpsid	i
}
 801992c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801992e:	1d7a      	adds	r2, r7, #5
 8019930:	88f9      	ldrh	r1, [r7, #6]
 8019932:	2301      	movs	r3, #1
 8019934:	4806      	ldr	r0, [pc, #24]	@ (8019950 <SUBGRF_WriteRegister+0x40>)
 8019936:	f7ed ff39 	bl	80077ac <HAL_SUBGHZ_WriteRegisters>
 801993a:	697b      	ldr	r3, [r7, #20]
 801993c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801993e:	693b      	ldr	r3, [r7, #16]
 8019940:	f383 8810 	msr	PRIMASK, r3
}
 8019944:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019946:	bf00      	nop
 8019948:	3718      	adds	r7, #24
 801994a:	46bd      	mov	sp, r7
 801994c:	bd80      	pop	{r7, pc}
 801994e:	bf00      	nop
 8019950:	200003bc 	.word	0x200003bc

08019954 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8019954:	b580      	push	{r7, lr}
 8019956:	b086      	sub	sp, #24
 8019958:	af00      	add	r7, sp, #0
 801995a:	4603      	mov	r3, r0
 801995c:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801995e:	f3ef 8310 	mrs	r3, PRIMASK
 8019962:	60fb      	str	r3, [r7, #12]
  return(result);
 8019964:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 8019966:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019968:	b672      	cpsid	i
}
 801996a:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801996c:	f107 020b 	add.w	r2, r7, #11
 8019970:	88f9      	ldrh	r1, [r7, #6]
 8019972:	2301      	movs	r3, #1
 8019974:	4806      	ldr	r0, [pc, #24]	@ (8019990 <SUBGRF_ReadRegister+0x3c>)
 8019976:	f7ed ff78 	bl	800786a <HAL_SUBGHZ_ReadRegisters>
 801997a:	697b      	ldr	r3, [r7, #20]
 801997c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801997e:	693b      	ldr	r3, [r7, #16]
 8019980:	f383 8810 	msr	PRIMASK, r3
}
 8019984:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 8019986:	7afb      	ldrb	r3, [r7, #11]
}
 8019988:	4618      	mov	r0, r3
 801998a:	3718      	adds	r7, #24
 801998c:	46bd      	mov	sp, r7
 801998e:	bd80      	pop	{r7, pc}
 8019990:	200003bc 	.word	0x200003bc

08019994 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019994:	b580      	push	{r7, lr}
 8019996:	b086      	sub	sp, #24
 8019998:	af00      	add	r7, sp, #0
 801999a:	4603      	mov	r3, r0
 801999c:	6039      	str	r1, [r7, #0]
 801999e:	80fb      	strh	r3, [r7, #6]
 80199a0:	4613      	mov	r3, r2
 80199a2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199a4:	f3ef 8310 	mrs	r3, PRIMASK
 80199a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80199aa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80199ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80199ae:	b672      	cpsid	i
}
 80199b0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80199b2:	88bb      	ldrh	r3, [r7, #4]
 80199b4:	88f9      	ldrh	r1, [r7, #6]
 80199b6:	683a      	ldr	r2, [r7, #0]
 80199b8:	4806      	ldr	r0, [pc, #24]	@ (80199d4 <SUBGRF_WriteRegisters+0x40>)
 80199ba:	f7ed fef7 	bl	80077ac <HAL_SUBGHZ_WriteRegisters>
 80199be:	697b      	ldr	r3, [r7, #20]
 80199c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80199c2:	693b      	ldr	r3, [r7, #16]
 80199c4:	f383 8810 	msr	PRIMASK, r3
}
 80199c8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80199ca:	bf00      	nop
 80199cc:	3718      	adds	r7, #24
 80199ce:	46bd      	mov	sp, r7
 80199d0:	bd80      	pop	{r7, pc}
 80199d2:	bf00      	nop
 80199d4:	200003bc 	.word	0x200003bc

080199d8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80199d8:	b580      	push	{r7, lr}
 80199da:	b086      	sub	sp, #24
 80199dc:	af00      	add	r7, sp, #0
 80199de:	4603      	mov	r3, r0
 80199e0:	6039      	str	r1, [r7, #0]
 80199e2:	80fb      	strh	r3, [r7, #6]
 80199e4:	4613      	mov	r3, r2
 80199e6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199e8:	f3ef 8310 	mrs	r3, PRIMASK
 80199ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80199ee:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80199f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80199f2:	b672      	cpsid	i
}
 80199f4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80199f6:	88bb      	ldrh	r3, [r7, #4]
 80199f8:	88f9      	ldrh	r1, [r7, #6]
 80199fa:	683a      	ldr	r2, [r7, #0]
 80199fc:	4806      	ldr	r0, [pc, #24]	@ (8019a18 <SUBGRF_ReadRegisters+0x40>)
 80199fe:	f7ed ff34 	bl	800786a <HAL_SUBGHZ_ReadRegisters>
 8019a02:	697b      	ldr	r3, [r7, #20]
 8019a04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a06:	693b      	ldr	r3, [r7, #16]
 8019a08:	f383 8810 	msr	PRIMASK, r3
}
 8019a0c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019a0e:	bf00      	nop
 8019a10:	3718      	adds	r7, #24
 8019a12:	46bd      	mov	sp, r7
 8019a14:	bd80      	pop	{r7, pc}
 8019a16:	bf00      	nop
 8019a18:	200003bc 	.word	0x200003bc

08019a1c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b086      	sub	sp, #24
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	4603      	mov	r3, r0
 8019a24:	6039      	str	r1, [r7, #0]
 8019a26:	71fb      	strb	r3, [r7, #7]
 8019a28:	4613      	mov	r3, r2
 8019a2a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8019a30:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a32:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019a34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a36:	b672      	cpsid	i
}
 8019a38:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8019a3a:	79bb      	ldrb	r3, [r7, #6]
 8019a3c:	b29b      	uxth	r3, r3
 8019a3e:	79f9      	ldrb	r1, [r7, #7]
 8019a40:	683a      	ldr	r2, [r7, #0]
 8019a42:	4806      	ldr	r0, [pc, #24]	@ (8019a5c <SUBGRF_WriteBuffer+0x40>)
 8019a44:	f7ee f825 	bl	8007a92 <HAL_SUBGHZ_WriteBuffer>
 8019a48:	697b      	ldr	r3, [r7, #20]
 8019a4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a4c:	693b      	ldr	r3, [r7, #16]
 8019a4e:	f383 8810 	msr	PRIMASK, r3
}
 8019a52:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019a54:	bf00      	nop
 8019a56:	3718      	adds	r7, #24
 8019a58:	46bd      	mov	sp, r7
 8019a5a:	bd80      	pop	{r7, pc}
 8019a5c:	200003bc 	.word	0x200003bc

08019a60 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b086      	sub	sp, #24
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	4603      	mov	r3, r0
 8019a68:	6039      	str	r1, [r7, #0]
 8019a6a:	71fb      	strb	r3, [r7, #7]
 8019a6c:	4613      	mov	r3, r2
 8019a6e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a70:	f3ef 8310 	mrs	r3, PRIMASK
 8019a74:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a76:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019a78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a7a:	b672      	cpsid	i
}
 8019a7c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8019a7e:	79bb      	ldrb	r3, [r7, #6]
 8019a80:	b29b      	uxth	r3, r3
 8019a82:	79f9      	ldrb	r1, [r7, #7]
 8019a84:	683a      	ldr	r2, [r7, #0]
 8019a86:	4806      	ldr	r0, [pc, #24]	@ (8019aa0 <SUBGRF_ReadBuffer+0x40>)
 8019a88:	f7ee f856 	bl	8007b38 <HAL_SUBGHZ_ReadBuffer>
 8019a8c:	697b      	ldr	r3, [r7, #20]
 8019a8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a90:	693b      	ldr	r3, [r7, #16]
 8019a92:	f383 8810 	msr	PRIMASK, r3
}
 8019a96:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019a98:	bf00      	nop
 8019a9a:	3718      	adds	r7, #24
 8019a9c:	46bd      	mov	sp, r7
 8019a9e:	bd80      	pop	{r7, pc}
 8019aa0:	200003bc 	.word	0x200003bc

08019aa4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019aa4:	b580      	push	{r7, lr}
 8019aa6:	b086      	sub	sp, #24
 8019aa8:	af00      	add	r7, sp, #0
 8019aaa:	4603      	mov	r3, r0
 8019aac:	6039      	str	r1, [r7, #0]
 8019aae:	71fb      	strb	r3, [r7, #7]
 8019ab0:	4613      	mov	r3, r2
 8019ab2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8019ab8:	60fb      	str	r3, [r7, #12]
  return(result);
 8019aba:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019abc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019abe:	b672      	cpsid	i
}
 8019ac0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8019ac2:	88bb      	ldrh	r3, [r7, #4]
 8019ac4:	79f9      	ldrb	r1, [r7, #7]
 8019ac6:	683a      	ldr	r2, [r7, #0]
 8019ac8:	4806      	ldr	r0, [pc, #24]	@ (8019ae4 <SUBGRF_WriteCommand+0x40>)
 8019aca:	f7ed ff2f 	bl	800792c <HAL_SUBGHZ_ExecSetCmd>
 8019ace:	697b      	ldr	r3, [r7, #20]
 8019ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ad2:	693b      	ldr	r3, [r7, #16]
 8019ad4:	f383 8810 	msr	PRIMASK, r3
}
 8019ad8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019ada:	bf00      	nop
 8019adc:	3718      	adds	r7, #24
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd80      	pop	{r7, pc}
 8019ae2:	bf00      	nop
 8019ae4:	200003bc 	.word	0x200003bc

08019ae8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019ae8:	b580      	push	{r7, lr}
 8019aea:	b086      	sub	sp, #24
 8019aec:	af00      	add	r7, sp, #0
 8019aee:	4603      	mov	r3, r0
 8019af0:	6039      	str	r1, [r7, #0]
 8019af2:	71fb      	strb	r3, [r7, #7]
 8019af4:	4613      	mov	r3, r2
 8019af6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019af8:	f3ef 8310 	mrs	r3, PRIMASK
 8019afc:	60fb      	str	r3, [r7, #12]
  return(result);
 8019afe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019b00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019b02:	b672      	cpsid	i
}
 8019b04:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8019b06:	88bb      	ldrh	r3, [r7, #4]
 8019b08:	79f9      	ldrb	r1, [r7, #7]
 8019b0a:	683a      	ldr	r2, [r7, #0]
 8019b0c:	4806      	ldr	r0, [pc, #24]	@ (8019b28 <SUBGRF_ReadCommand+0x40>)
 8019b0e:	f7ed ff6c 	bl	80079ea <HAL_SUBGHZ_ExecGetCmd>
 8019b12:	697b      	ldr	r3, [r7, #20]
 8019b14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b16:	693b      	ldr	r3, [r7, #16]
 8019b18:	f383 8810 	msr	PRIMASK, r3
}
 8019b1c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019b1e:	bf00      	nop
 8019b20:	3718      	adds	r7, #24
 8019b22:	46bd      	mov	sp, r7
 8019b24:	bd80      	pop	{r7, pc}
 8019b26:	bf00      	nop
 8019b28:	200003bc 	.word	0x200003bc

08019b2c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	b084      	sub	sp, #16
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	4603      	mov	r3, r0
 8019b34:	460a      	mov	r2, r1
 8019b36:	71fb      	strb	r3, [r7, #7]
 8019b38:	4613      	mov	r3, r2
 8019b3a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019b3c:	2301      	movs	r3, #1
 8019b3e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019b40:	79bb      	ldrb	r3, [r7, #6]
 8019b42:	2b01      	cmp	r3, #1
 8019b44:	d10d      	bne.n	8019b62 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8019b46:	79fb      	ldrb	r3, [r7, #7]
 8019b48:	2b01      	cmp	r3, #1
 8019b4a:	d104      	bne.n	8019b56 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019b4c:	2302      	movs	r3, #2
 8019b4e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019b50:	2004      	movs	r0, #4
 8019b52:	f000 f8ef 	bl	8019d34 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8019b56:	79fb      	ldrb	r3, [r7, #7]
 8019b58:	2b02      	cmp	r3, #2
 8019b5a:	d107      	bne.n	8019b6c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019b5c:	2303      	movs	r3, #3
 8019b5e:	73fb      	strb	r3, [r7, #15]
 8019b60:	e004      	b.n	8019b6c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019b62:	79bb      	ldrb	r3, [r7, #6]
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	d101      	bne.n	8019b6c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019b68:	2301      	movs	r3, #1
 8019b6a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019b6c:	7bfb      	ldrb	r3, [r7, #15]
 8019b6e:	4618      	mov	r0, r3
 8019b70:	f7f0 feb9 	bl	800a8e6 <RBI_ConfigRFSwitch>
}
 8019b74:	bf00      	nop
 8019b76:	3710      	adds	r7, #16
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	bd80      	pop	{r7, pc}

08019b7c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8019b7c:	b580      	push	{r7, lr}
 8019b7e:	b084      	sub	sp, #16
 8019b80:	af00      	add	r7, sp, #0
 8019b82:	4603      	mov	r3, r0
 8019b84:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8019b86:	2301      	movs	r3, #1
 8019b88:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8019b8a:	f7f0 feb9 	bl	800a900 <RBI_GetTxConfig>
 8019b8e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019b90:	68bb      	ldr	r3, [r7, #8]
 8019b92:	2b02      	cmp	r3, #2
 8019b94:	d016      	beq.n	8019bc4 <SUBGRF_SetRfTxPower+0x48>
 8019b96:	68bb      	ldr	r3, [r7, #8]
 8019b98:	2b02      	cmp	r3, #2
 8019b9a:	dc16      	bgt.n	8019bca <SUBGRF_SetRfTxPower+0x4e>
 8019b9c:	68bb      	ldr	r3, [r7, #8]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d003      	beq.n	8019baa <SUBGRF_SetRfTxPower+0x2e>
 8019ba2:	68bb      	ldr	r3, [r7, #8]
 8019ba4:	2b01      	cmp	r3, #1
 8019ba6:	d00a      	beq.n	8019bbe <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019ba8:	e00f      	b.n	8019bca <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8019baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019bae:	2b0f      	cmp	r3, #15
 8019bb0:	dd02      	ble.n	8019bb8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8019bb2:	2302      	movs	r3, #2
 8019bb4:	73fb      	strb	r3, [r7, #15]
            break;
 8019bb6:	e009      	b.n	8019bcc <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019bb8:	2301      	movs	r3, #1
 8019bba:	73fb      	strb	r3, [r7, #15]
            break;
 8019bbc:	e006      	b.n	8019bcc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8019bbe:	2301      	movs	r3, #1
 8019bc0:	73fb      	strb	r3, [r7, #15]
            break;
 8019bc2:	e003      	b.n	8019bcc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8019bc4:	2302      	movs	r3, #2
 8019bc6:	73fb      	strb	r3, [r7, #15]
            break;
 8019bc8:	e000      	b.n	8019bcc <SUBGRF_SetRfTxPower+0x50>
            break;
 8019bca:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8019bcc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8019bd0:	7bfb      	ldrb	r3, [r7, #15]
 8019bd2:	2202      	movs	r2, #2
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	f7ff fbb3 	bl	8019340 <SUBGRF_SetTxParams>

    return paSelect;
 8019bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8019bdc:	4618      	mov	r0, r3
 8019bde:	3710      	adds	r7, #16
 8019be0:	46bd      	mov	sp, r7
 8019be2:	bd80      	pop	{r7, pc}

08019be4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8019be4:	b480      	push	{r7}
 8019be6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019be8:	2301      	movs	r3, #1
}
 8019bea:	4618      	mov	r0, r3
 8019bec:	46bd      	mov	sp, r7
 8019bee:	bc80      	pop	{r7}
 8019bf0:	4770      	bx	lr
	...

08019bf4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019bf4:	b580      	push	{r7, lr}
 8019bf6:	b082      	sub	sp, #8
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8019bfc:	4b03      	ldr	r3, [pc, #12]	@ (8019c0c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	2001      	movs	r0, #1
 8019c02:	4798      	blx	r3
}
 8019c04:	bf00      	nop
 8019c06:	3708      	adds	r7, #8
 8019c08:	46bd      	mov	sp, r7
 8019c0a:	bd80      	pop	{r7, pc}
 8019c0c:	2000174c 	.word	0x2000174c

08019c10 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b082      	sub	sp, #8
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019c18:	4b03      	ldr	r3, [pc, #12]	@ (8019c28 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	2002      	movs	r0, #2
 8019c1e:	4798      	blx	r3
}
 8019c20:	bf00      	nop
 8019c22:	3708      	adds	r7, #8
 8019c24:	46bd      	mov	sp, r7
 8019c26:	bd80      	pop	{r7, pc}
 8019c28:	2000174c 	.word	0x2000174c

08019c2c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c2c:	b580      	push	{r7, lr}
 8019c2e:	b082      	sub	sp, #8
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8019c34:	4b03      	ldr	r3, [pc, #12]	@ (8019c44 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	2040      	movs	r0, #64	@ 0x40
 8019c3a:	4798      	blx	r3
}
 8019c3c:	bf00      	nop
 8019c3e:	3708      	adds	r7, #8
 8019c40:	46bd      	mov	sp, r7
 8019c42:	bd80      	pop	{r7, pc}
 8019c44:	2000174c 	.word	0x2000174c

08019c48 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019c48:	b580      	push	{r7, lr}
 8019c4a:	b082      	sub	sp, #8
 8019c4c:	af00      	add	r7, sp, #0
 8019c4e:	6078      	str	r0, [r7, #4]
 8019c50:	460b      	mov	r3, r1
 8019c52:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019c54:	78fb      	ldrb	r3, [r7, #3]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d002      	beq.n	8019c60 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8019c5a:	2b01      	cmp	r3, #1
 8019c5c:	d005      	beq.n	8019c6a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019c5e:	e00a      	b.n	8019c76 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019c60:	4b07      	ldr	r3, [pc, #28]	@ (8019c80 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	2080      	movs	r0, #128	@ 0x80
 8019c66:	4798      	blx	r3
            break;
 8019c68:	e005      	b.n	8019c76 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8019c6a:	4b05      	ldr	r3, [pc, #20]	@ (8019c80 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8019c72:	4798      	blx	r3
            break;
 8019c74:	bf00      	nop
    }
}
 8019c76:	bf00      	nop
 8019c78:	3708      	adds	r7, #8
 8019c7a:	46bd      	mov	sp, r7
 8019c7c:	bd80      	pop	{r7, pc}
 8019c7e:	bf00      	nop
 8019c80:	2000174c 	.word	0x2000174c

08019c84 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c84:	b580      	push	{r7, lr}
 8019c86:	b082      	sub	sp, #8
 8019c88:	af00      	add	r7, sp, #0
 8019c8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8019c8c:	4b04      	ldr	r3, [pc, #16]	@ (8019ca0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8019c94:	4798      	blx	r3
}
 8019c96:	bf00      	nop
 8019c98:	3708      	adds	r7, #8
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	bd80      	pop	{r7, pc}
 8019c9e:	bf00      	nop
 8019ca0:	2000174c 	.word	0x2000174c

08019ca4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019ca4:	b580      	push	{r7, lr}
 8019ca6:	b082      	sub	sp, #8
 8019ca8:	af00      	add	r7, sp, #0
 8019caa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8019cac:	4b03      	ldr	r3, [pc, #12]	@ (8019cbc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	2020      	movs	r0, #32
 8019cb2:	4798      	blx	r3
}
 8019cb4:	bf00      	nop
 8019cb6:	3708      	adds	r7, #8
 8019cb8:	46bd      	mov	sp, r7
 8019cba:	bd80      	pop	{r7, pc}
 8019cbc:	2000174c 	.word	0x2000174c

08019cc0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b082      	sub	sp, #8
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8019cc8:	4b03      	ldr	r3, [pc, #12]	@ (8019cd8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	2004      	movs	r0, #4
 8019cce:	4798      	blx	r3
}
 8019cd0:	bf00      	nop
 8019cd2:	3708      	adds	r7, #8
 8019cd4:	46bd      	mov	sp, r7
 8019cd6:	bd80      	pop	{r7, pc}
 8019cd8:	2000174c 	.word	0x2000174c

08019cdc <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019cdc:	b580      	push	{r7, lr}
 8019cde:	b082      	sub	sp, #8
 8019ce0:	af00      	add	r7, sp, #0
 8019ce2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8019ce4:	4b03      	ldr	r3, [pc, #12]	@ (8019cf4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	2008      	movs	r0, #8
 8019cea:	4798      	blx	r3
}
 8019cec:	bf00      	nop
 8019cee:	3708      	adds	r7, #8
 8019cf0:	46bd      	mov	sp, r7
 8019cf2:	bd80      	pop	{r7, pc}
 8019cf4:	2000174c 	.word	0x2000174c

08019cf8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b082      	sub	sp, #8
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019d00:	4b03      	ldr	r3, [pc, #12]	@ (8019d10 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	2010      	movs	r0, #16
 8019d06:	4798      	blx	r3
}
 8019d08:	bf00      	nop
 8019d0a:	3708      	adds	r7, #8
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	bd80      	pop	{r7, pc}
 8019d10:	2000174c 	.word	0x2000174c

08019d14 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019d14:	b580      	push	{r7, lr}
 8019d16:	b082      	sub	sp, #8
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8019d1c:	4b04      	ldr	r3, [pc, #16]	@ (8019d30 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8019d24:	4798      	blx	r3
}
 8019d26:	bf00      	nop
 8019d28:	3708      	adds	r7, #8
 8019d2a:	46bd      	mov	sp, r7
 8019d2c:	bd80      	pop	{r7, pc}
 8019d2e:	bf00      	nop
 8019d30:	2000174c 	.word	0x2000174c

08019d34 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8019d34:	b580      	push	{r7, lr}
 8019d36:	b084      	sub	sp, #16
 8019d38:	af00      	add	r7, sp, #0
 8019d3a:	4603      	mov	r3, r0
 8019d3c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8019d3e:	f7f0 fdf5 	bl	800a92c <RBI_IsDCDC>
 8019d42:	4603      	mov	r3, r0
 8019d44:	2b01      	cmp	r3, #1
 8019d46:	d112      	bne.n	8019d6e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019d48:	f640 1023 	movw	r0, #2339	@ 0x923
 8019d4c:	f7ff fe02 	bl	8019954 <SUBGRF_ReadRegister>
 8019d50:	4603      	mov	r3, r0
 8019d52:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8019d54:	7bfb      	ldrb	r3, [r7, #15]
 8019d56:	f023 0306 	bic.w	r3, r3, #6
 8019d5a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8019d5c:	7bfa      	ldrb	r2, [r7, #15]
 8019d5e:	79fb      	ldrb	r3, [r7, #7]
 8019d60:	4313      	orrs	r3, r2
 8019d62:	b2db      	uxtb	r3, r3
 8019d64:	4619      	mov	r1, r3
 8019d66:	f640 1023 	movw	r0, #2339	@ 0x923
 8019d6a:	f7ff fdd1 	bl	8019910 <SUBGRF_WriteRegister>
  }
}
 8019d6e:	bf00      	nop
 8019d70:	3710      	adds	r7, #16
 8019d72:	46bd      	mov	sp, r7
 8019d74:	bd80      	pop	{r7, pc}
	...

08019d78 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8019d78:	b480      	push	{r7}
 8019d7a:	b085      	sub	sp, #20
 8019d7c:	af00      	add	r7, sp, #0
 8019d7e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d101      	bne.n	8019d8a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8019d86:	231f      	movs	r3, #31
 8019d88:	e017      	b.n	8019dba <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019d8a:	2300      	movs	r3, #0
 8019d8c:	73fb      	strb	r3, [r7, #15]
 8019d8e:	e00f      	b.n	8019db0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019d90:	7bfb      	ldrb	r3, [r7, #15]
 8019d92:	4a0c      	ldr	r2, [pc, #48]	@ (8019dc4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019d94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019d98:	687a      	ldr	r2, [r7, #4]
 8019d9a:	429a      	cmp	r2, r3
 8019d9c:	d205      	bcs.n	8019daa <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8019d9e:	7bfb      	ldrb	r3, [r7, #15]
 8019da0:	4a08      	ldr	r2, [pc, #32]	@ (8019dc4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019da2:	00db      	lsls	r3, r3, #3
 8019da4:	4413      	add	r3, r2
 8019da6:	791b      	ldrb	r3, [r3, #4]
 8019da8:	e007      	b.n	8019dba <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019daa:	7bfb      	ldrb	r3, [r7, #15]
 8019dac:	3301      	adds	r3, #1
 8019dae:	73fb      	strb	r3, [r7, #15]
 8019db0:	7bfb      	ldrb	r3, [r7, #15]
 8019db2:	2b15      	cmp	r3, #21
 8019db4:	d9ec      	bls.n	8019d90 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8019db6:	bf00      	nop
 8019db8:	e7fd      	b.n	8019db6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8019dba:	4618      	mov	r0, r3
 8019dbc:	3714      	adds	r7, #20
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	bc80      	pop	{r7}
 8019dc2:	4770      	bx	lr
 8019dc4:	0801eba0 	.word	0x0801eba0

08019dc8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8019dc8:	b580      	push	{r7, lr}
 8019dca:	b08a      	sub	sp, #40	@ 0x28
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
 8019dd0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8019dd2:	4b35      	ldr	r3, [pc, #212]	@ (8019ea8 <SUBGRF_GetCFO+0xe0>)
 8019dd4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8019dd6:	f640 0007 	movw	r0, #2055	@ 0x807
 8019dda:	f7ff fdbb 	bl	8019954 <SUBGRF_ReadRegister>
 8019dde:	4603      	mov	r3, r0
 8019de0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8019de2:	7ffb      	ldrb	r3, [r7, #31]
 8019de4:	08db      	lsrs	r3, r3, #3
 8019de6:	b2db      	uxtb	r3, r3
 8019de8:	f003 0303 	and.w	r3, r3, #3
 8019dec:	3328      	adds	r3, #40	@ 0x28
 8019dee:	443b      	add	r3, r7
 8019df0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8019df4:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8019df6:	7ffb      	ldrb	r3, [r7, #31]
 8019df8:	f003 0307 	and.w	r3, r3, #7
 8019dfc:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8019dfe:	7fba      	ldrb	r2, [r7, #30]
 8019e00:	7f7b      	ldrb	r3, [r7, #29]
 8019e02:	3301      	adds	r3, #1
 8019e04:	fa02 f303 	lsl.w	r3, r2, r3
 8019e08:	461a      	mov	r2, r3
 8019e0a:	4b28      	ldr	r3, [pc, #160]	@ (8019eac <SUBGRF_GetCFO+0xe4>)
 8019e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8019e10:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8019e12:	69ba      	ldr	r2, [r7, #24]
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e1a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8019e1c:	2301      	movs	r3, #1
 8019e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8019e22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e26:	697a      	ldr	r2, [r7, #20]
 8019e28:	fb02 f303 	mul.w	r3, r2, r3
 8019e2c:	2b07      	cmp	r3, #7
 8019e2e:	d802      	bhi.n	8019e36 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8019e30:	2302      	movs	r3, #2
 8019e32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 8019e36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e3a:	697a      	ldr	r2, [r7, #20]
 8019e3c:	fb02 f303 	mul.w	r3, r2, r3
 8019e40:	2b03      	cmp	r3, #3
 8019e42:	d802      	bhi.n	8019e4a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8019e44:	2304      	movs	r3, #4
 8019e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8019e4a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019e4e:	69bb      	ldr	r3, [r7, #24]
 8019e50:	fb02 f303 	mul.w	r3, r2, r3
 8019e54:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8019e56:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8019e5a:	f7ff fd7b 	bl	8019954 <SUBGRF_ReadRegister>
 8019e5e:	4603      	mov	r3, r0
 8019e60:	021b      	lsls	r3, r3, #8
 8019e62:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8019e66:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8019e68:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8019e6c:	f7ff fd72 	bl	8019954 <SUBGRF_ReadRegister>
 8019e70:	4603      	mov	r3, r0
 8019e72:	461a      	mov	r2, r3
 8019e74:	6a3b      	ldr	r3, [r7, #32]
 8019e76:	4313      	orrs	r3, r2
 8019e78:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8019e7a:	6a3b      	ldr	r3, [r7, #32]
 8019e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	d005      	beq.n	8019e90 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8019e84:	6a3b      	ldr	r3, [r7, #32]
 8019e86:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8019e8a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019e8e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019e90:	693b      	ldr	r3, [r7, #16]
 8019e92:	095b      	lsrs	r3, r3, #5
 8019e94:	6a3a      	ldr	r2, [r7, #32]
 8019e96:	fb02 f303 	mul.w	r3, r2, r3
 8019e9a:	11da      	asrs	r2, r3, #7
 8019e9c:	683b      	ldr	r3, [r7, #0]
 8019e9e:	601a      	str	r2, [r3, #0]
}
 8019ea0:	bf00      	nop
 8019ea2:	3728      	adds	r7, #40	@ 0x28
 8019ea4:	46bd      	mov	sp, r7
 8019ea6:	bd80      	pop	{r7, pc}
 8019ea8:	0c0a0804 	.word	0x0c0a0804
 8019eac:	01e84800 	.word	0x01e84800

08019eb0 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 8019eb0:	b480      	push	{r7}
 8019eb2:	b087      	sub	sp, #28
 8019eb4:	af00      	add	r7, sp, #0
 8019eb6:	4603      	mov	r3, r0
 8019eb8:	60b9      	str	r1, [r7, #8]
 8019eba:	607a      	str	r2, [r7, #4]
 8019ebc:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 8019ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8019ec6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8019ec8:	697b      	ldr	r3, [r7, #20]
}
 8019eca:	4618      	mov	r0, r3
 8019ecc:	371c      	adds	r7, #28
 8019ece:	46bd      	mov	sp, r7
 8019ed0:	bc80      	pop	{r7}
 8019ed2:	4770      	bx	lr

08019ed4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8019ed4:	b480      	push	{r7}
 8019ed6:	b087      	sub	sp, #28
 8019ed8:	af00      	add	r7, sp, #0
 8019eda:	4603      	mov	r3, r0
 8019edc:	60b9      	str	r1, [r7, #8]
 8019ede:	607a      	str	r2, [r7, #4]
 8019ee0:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8019ee2:	2300      	movs	r3, #0
 8019ee4:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8019ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8019eea:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8019eec:	697b      	ldr	r3, [r7, #20]
}
 8019eee:	4618      	mov	r0, r3
 8019ef0:	371c      	adds	r7, #28
 8019ef2:	46bd      	mov	sp, r7
 8019ef4:	bc80      	pop	{r7}
 8019ef6:	4770      	bx	lr

08019ef8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8019ef8:	b480      	push	{r7}
 8019efa:	b085      	sub	sp, #20
 8019efc:	af00      	add	r7, sp, #0
 8019efe:	60f8      	str	r0, [r7, #12]
 8019f00:	60b9      	str	r1, [r7, #8]
 8019f02:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 8019f04:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8019f08:	4618      	mov	r0, r3
 8019f0a:	3714      	adds	r7, #20
 8019f0c:	46bd      	mov	sp, r7
 8019f0e:	bc80      	pop	{r7}
 8019f10:	4770      	bx	lr

08019f12 <RFW_DeInit>:

void RFW_DeInit( void )
{
 8019f12:	b480      	push	{r7}
 8019f14:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8019f16:	bf00      	nop
 8019f18:	46bd      	mov	sp, r7
 8019f1a:	bc80      	pop	{r7}
 8019f1c:	4770      	bx	lr

08019f1e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 8019f1e:	b480      	push	{r7}
 8019f20:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 8019f22:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8019f24:	4618      	mov	r0, r3
 8019f26:	46bd      	mov	sp, r7
 8019f28:	bc80      	pop	{r7}
 8019f2a:	4770      	bx	lr

08019f2c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8019f2c:	b480      	push	{r7}
 8019f2e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8019f30:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8019f32:	4618      	mov	r0, r3
 8019f34:	46bd      	mov	sp, r7
 8019f36:	bc80      	pop	{r7}
 8019f38:	4770      	bx	lr

08019f3a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8019f3a:	b480      	push	{r7}
 8019f3c:	b083      	sub	sp, #12
 8019f3e:	af00      	add	r7, sp, #0
 8019f40:	4603      	mov	r3, r0
 8019f42:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8019f44:	bf00      	nop
 8019f46:	370c      	adds	r7, #12
 8019f48:	46bd      	mov	sp, r7
 8019f4a:	bc80      	pop	{r7}
 8019f4c:	4770      	bx	lr

08019f4e <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 8019f4e:	b480      	push	{r7}
 8019f50:	b087      	sub	sp, #28
 8019f52:	af00      	add	r7, sp, #0
 8019f54:	60f8      	str	r0, [r7, #12]
 8019f56:	460b      	mov	r3, r1
 8019f58:	607a      	str	r2, [r7, #4]
 8019f5a:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 8019f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8019f60:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8019f62:	697b      	ldr	r3, [r7, #20]
}
 8019f64:	4618      	mov	r0, r3
 8019f66:	371c      	adds	r7, #28
 8019f68:	46bd      	mov	sp, r7
 8019f6a:	bc80      	pop	{r7}
 8019f6c:	4770      	bx	lr

08019f6e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8019f6e:	b480      	push	{r7}
 8019f70:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8019f72:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8019f76:	4618      	mov	r0, r3
 8019f78:	46bd      	mov	sp, r7
 8019f7a:	bc80      	pop	{r7}
 8019f7c:	4770      	bx	lr

08019f7e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 8019f7e:	b480      	push	{r7}
 8019f80:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8019f82:	bf00      	nop
 8019f84:	46bd      	mov	sp, r7
 8019f86:	bc80      	pop	{r7}
 8019f88:	4770      	bx	lr

08019f8a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8019f8a:	b480      	push	{r7}
 8019f8c:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8019f8e:	bf00      	nop
 8019f90:	46bd      	mov	sp, r7
 8019f92:	bc80      	pop	{r7}
 8019f94:	4770      	bx	lr

08019f96 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8019f96:	b480      	push	{r7}
 8019f98:	b083      	sub	sp, #12
 8019f9a:	af00      	add	r7, sp, #0
 8019f9c:	4603      	mov	r3, r0
 8019f9e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8019fa0:	bf00      	nop
 8019fa2:	370c      	adds	r7, #12
 8019fa4:	46bd      	mov	sp, r7
 8019fa6:	bc80      	pop	{r7}
 8019fa8:	4770      	bx	lr
	...

08019fac <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019fac:	b480      	push	{r7}
 8019fae:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019fb0:	4b04      	ldr	r3, [pc, #16]	@ (8019fc4 <UTIL_LPM_Init+0x18>)
 8019fb2:	2200      	movs	r2, #0
 8019fb4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019fb6:	4b04      	ldr	r3, [pc, #16]	@ (8019fc8 <UTIL_LPM_Init+0x1c>)
 8019fb8:	2200      	movs	r2, #0
 8019fba:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019fbc:	bf00      	nop
 8019fbe:	46bd      	mov	sp, r7
 8019fc0:	bc80      	pop	{r7}
 8019fc2:	4770      	bx	lr
 8019fc4:	20001750 	.word	0x20001750
 8019fc8:	20001754 	.word	0x20001754

08019fcc <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019fcc:	b480      	push	{r7}
 8019fce:	b087      	sub	sp, #28
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	6078      	str	r0, [r7, #4]
 8019fd4:	460b      	mov	r3, r1
 8019fd6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8019fdc:	613b      	str	r3, [r7, #16]
  return(result);
 8019fde:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019fe0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019fe2:	b672      	cpsid	i
}
 8019fe4:	bf00      	nop
  
  switch( state )
 8019fe6:	78fb      	ldrb	r3, [r7, #3]
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d008      	beq.n	8019ffe <UTIL_LPM_SetStopMode+0x32>
 8019fec:	2b01      	cmp	r3, #1
 8019fee:	d10e      	bne.n	801a00e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8019ff0:	4b0d      	ldr	r3, [pc, #52]	@ (801a028 <UTIL_LPM_SetStopMode+0x5c>)
 8019ff2:	681a      	ldr	r2, [r3, #0]
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	4313      	orrs	r3, r2
 8019ff8:	4a0b      	ldr	r2, [pc, #44]	@ (801a028 <UTIL_LPM_SetStopMode+0x5c>)
 8019ffa:	6013      	str	r3, [r2, #0]
      break;
 8019ffc:	e008      	b.n	801a010 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	43da      	mvns	r2, r3
 801a002:	4b09      	ldr	r3, [pc, #36]	@ (801a028 <UTIL_LPM_SetStopMode+0x5c>)
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	4013      	ands	r3, r2
 801a008:	4a07      	ldr	r2, [pc, #28]	@ (801a028 <UTIL_LPM_SetStopMode+0x5c>)
 801a00a:	6013      	str	r3, [r2, #0]
      break;
 801a00c:	e000      	b.n	801a010 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801a00e:	bf00      	nop
 801a010:	697b      	ldr	r3, [r7, #20]
 801a012:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a014:	68fb      	ldr	r3, [r7, #12]
 801a016:	f383 8810 	msr	PRIMASK, r3
}
 801a01a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a01c:	bf00      	nop
 801a01e:	371c      	adds	r7, #28
 801a020:	46bd      	mov	sp, r7
 801a022:	bc80      	pop	{r7}
 801a024:	4770      	bx	lr
 801a026:	bf00      	nop
 801a028:	20001750 	.word	0x20001750

0801a02c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a02c:	b480      	push	{r7}
 801a02e:	b087      	sub	sp, #28
 801a030:	af00      	add	r7, sp, #0
 801a032:	6078      	str	r0, [r7, #4]
 801a034:	460b      	mov	r3, r1
 801a036:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a038:	f3ef 8310 	mrs	r3, PRIMASK
 801a03c:	613b      	str	r3, [r7, #16]
  return(result);
 801a03e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a040:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a042:	b672      	cpsid	i
}
 801a044:	bf00      	nop
  
  switch(state)
 801a046:	78fb      	ldrb	r3, [r7, #3]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d008      	beq.n	801a05e <UTIL_LPM_SetOffMode+0x32>
 801a04c:	2b01      	cmp	r3, #1
 801a04e:	d10e      	bne.n	801a06e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a050:	4b0d      	ldr	r3, [pc, #52]	@ (801a088 <UTIL_LPM_SetOffMode+0x5c>)
 801a052:	681a      	ldr	r2, [r3, #0]
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	4313      	orrs	r3, r2
 801a058:	4a0b      	ldr	r2, [pc, #44]	@ (801a088 <UTIL_LPM_SetOffMode+0x5c>)
 801a05a:	6013      	str	r3, [r2, #0]
      break;
 801a05c:	e008      	b.n	801a070 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	43da      	mvns	r2, r3
 801a062:	4b09      	ldr	r3, [pc, #36]	@ (801a088 <UTIL_LPM_SetOffMode+0x5c>)
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	4013      	ands	r3, r2
 801a068:	4a07      	ldr	r2, [pc, #28]	@ (801a088 <UTIL_LPM_SetOffMode+0x5c>)
 801a06a:	6013      	str	r3, [r2, #0]
      break;
 801a06c:	e000      	b.n	801a070 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a06e:	bf00      	nop
 801a070:	697b      	ldr	r3, [r7, #20]
 801a072:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	f383 8810 	msr	PRIMASK, r3
}
 801a07a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a07c:	bf00      	nop
 801a07e:	371c      	adds	r7, #28
 801a080:	46bd      	mov	sp, r7
 801a082:	bc80      	pop	{r7}
 801a084:	4770      	bx	lr
 801a086:	bf00      	nop
 801a088:	20001754 	.word	0x20001754

0801a08c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801a08c:	b580      	push	{r7, lr}
 801a08e:	b084      	sub	sp, #16
 801a090:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a092:	f3ef 8310 	mrs	r3, PRIMASK
 801a096:	60bb      	str	r3, [r7, #8]
  return(result);
 801a098:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a09a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a09c:	b672      	cpsid	i
}
 801a09e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a0a0:	4b12      	ldr	r3, [pc, #72]	@ (801a0ec <UTIL_LPM_EnterLowPower+0x60>)
 801a0a2:	681b      	ldr	r3, [r3, #0]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d006      	beq.n	801a0b6 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a0a8:	4b11      	ldr	r3, [pc, #68]	@ (801a0f0 <UTIL_LPM_EnterLowPower+0x64>)
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a0ae:	4b10      	ldr	r3, [pc, #64]	@ (801a0f0 <UTIL_LPM_EnterLowPower+0x64>)
 801a0b0:	685b      	ldr	r3, [r3, #4]
 801a0b2:	4798      	blx	r3
 801a0b4:	e010      	b.n	801a0d8 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801a0b6:	4b0f      	ldr	r3, [pc, #60]	@ (801a0f4 <UTIL_LPM_EnterLowPower+0x68>)
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d006      	beq.n	801a0cc <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801a0be:	4b0c      	ldr	r3, [pc, #48]	@ (801a0f0 <UTIL_LPM_EnterLowPower+0x64>)
 801a0c0:	689b      	ldr	r3, [r3, #8]
 801a0c2:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801a0c4:	4b0a      	ldr	r3, [pc, #40]	@ (801a0f0 <UTIL_LPM_EnterLowPower+0x64>)
 801a0c6:	68db      	ldr	r3, [r3, #12]
 801a0c8:	4798      	blx	r3
 801a0ca:	e005      	b.n	801a0d8 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801a0cc:	4b08      	ldr	r3, [pc, #32]	@ (801a0f0 <UTIL_LPM_EnterLowPower+0x64>)
 801a0ce:	691b      	ldr	r3, [r3, #16]
 801a0d0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801a0d2:	4b07      	ldr	r3, [pc, #28]	@ (801a0f0 <UTIL_LPM_EnterLowPower+0x64>)
 801a0d4:	695b      	ldr	r3, [r3, #20]
 801a0d6:	4798      	blx	r3
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	f383 8810 	msr	PRIMASK, r3
}
 801a0e2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801a0e4:	bf00      	nop
 801a0e6:	3710      	adds	r7, #16
 801a0e8:	46bd      	mov	sp, r7
 801a0ea:	bd80      	pop	{r7, pc}
 801a0ec:	20001750 	.word	0x20001750
 801a0f0:	0801e604 	.word	0x0801e604
 801a0f4:	20001754 	.word	0x20001754

0801a0f8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801a0f8:	b480      	push	{r7}
 801a0fa:	b087      	sub	sp, #28
 801a0fc:	af00      	add	r7, sp, #0
 801a0fe:	60f8      	str	r0, [r7, #12]
 801a100:	60b9      	str	r1, [r7, #8]
 801a102:	4613      	mov	r3, r2
 801a104:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801a106:	68fb      	ldr	r3, [r7, #12]
 801a108:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801a10a:	68bb      	ldr	r3, [r7, #8]
 801a10c:	613b      	str	r3, [r7, #16]

  while( size-- )
 801a10e:	e007      	b.n	801a120 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801a110:	693a      	ldr	r2, [r7, #16]
 801a112:	1c53      	adds	r3, r2, #1
 801a114:	613b      	str	r3, [r7, #16]
 801a116:	697b      	ldr	r3, [r7, #20]
 801a118:	1c59      	adds	r1, r3, #1
 801a11a:	6179      	str	r1, [r7, #20]
 801a11c:	7812      	ldrb	r2, [r2, #0]
 801a11e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a120:	88fb      	ldrh	r3, [r7, #6]
 801a122:	1e5a      	subs	r2, r3, #1
 801a124:	80fa      	strh	r2, [r7, #6]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d1f2      	bne.n	801a110 <UTIL_MEM_cpy_8+0x18>
    }
}
 801a12a:	bf00      	nop
 801a12c:	bf00      	nop
 801a12e:	371c      	adds	r7, #28
 801a130:	46bd      	mov	sp, r7
 801a132:	bc80      	pop	{r7}
 801a134:	4770      	bx	lr

0801a136 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801a136:	b480      	push	{r7}
 801a138:	b085      	sub	sp, #20
 801a13a:	af00      	add	r7, sp, #0
 801a13c:	6078      	str	r0, [r7, #4]
 801a13e:	460b      	mov	r3, r1
 801a140:	70fb      	strb	r3, [r7, #3]
 801a142:	4613      	mov	r3, r2
 801a144:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801a14a:	e004      	b.n	801a156 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	1c5a      	adds	r2, r3, #1
 801a150:	60fa      	str	r2, [r7, #12]
 801a152:	78fa      	ldrb	r2, [r7, #3]
 801a154:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a156:	883b      	ldrh	r3, [r7, #0]
 801a158:	1e5a      	subs	r2, r3, #1
 801a15a:	803a      	strh	r2, [r7, #0]
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d1f5      	bne.n	801a14c <UTIL_MEM_set_8+0x16>
  }
}
 801a160:	bf00      	nop
 801a162:	bf00      	nop
 801a164:	3714      	adds	r7, #20
 801a166:	46bd      	mov	sp, r7
 801a168:	bc80      	pop	{r7}
 801a16a:	4770      	bx	lr

0801a16c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801a16c:	b082      	sub	sp, #8
 801a16e:	b480      	push	{r7}
 801a170:	b087      	sub	sp, #28
 801a172:	af00      	add	r7, sp, #0
 801a174:	60f8      	str	r0, [r7, #12]
 801a176:	1d38      	adds	r0, r7, #4
 801a178:	e880 0006 	stmia.w	r0, {r1, r2}
 801a17c:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801a17e:	2300      	movs	r3, #0
 801a180:	613b      	str	r3, [r7, #16]
 801a182:	2300      	movs	r3, #0
 801a184:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801a186:	687a      	ldr	r2, [r7, #4]
 801a188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a18a:	4413      	add	r3, r2
 801a18c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801a18e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a192:	b29a      	uxth	r2, r3
 801a194:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a198:	b29b      	uxth	r3, r3
 801a19a:	4413      	add	r3, r2
 801a19c:	b29b      	uxth	r3, r3
 801a19e:	b21b      	sxth	r3, r3
 801a1a0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801a1a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a1a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a1aa:	db0a      	blt.n	801a1c2 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801a1ac:	693b      	ldr	r3, [r7, #16]
 801a1ae:	3301      	adds	r3, #1
 801a1b0:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801a1b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a1b6:	b29b      	uxth	r3, r3
 801a1b8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801a1bc:	b29b      	uxth	r3, r3
 801a1be:	b21b      	sxth	r3, r3
 801a1c0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a1c2:	68fb      	ldr	r3, [r7, #12]
 801a1c4:	461a      	mov	r2, r3
 801a1c6:	f107 0310 	add.w	r3, r7, #16
 801a1ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a1ce:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a1d2:	68f8      	ldr	r0, [r7, #12]
 801a1d4:	371c      	adds	r7, #28
 801a1d6:	46bd      	mov	sp, r7
 801a1d8:	bc80      	pop	{r7}
 801a1da:	b002      	add	sp, #8
 801a1dc:	4770      	bx	lr

0801a1de <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801a1de:	b082      	sub	sp, #8
 801a1e0:	b480      	push	{r7}
 801a1e2:	b087      	sub	sp, #28
 801a1e4:	af00      	add	r7, sp, #0
 801a1e6:	60f8      	str	r0, [r7, #12]
 801a1e8:	1d38      	adds	r0, r7, #4
 801a1ea:	e880 0006 	stmia.w	r0, {r1, r2}
 801a1ee:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	613b      	str	r3, [r7, #16]
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801a1f8:	687a      	ldr	r2, [r7, #4]
 801a1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1fc:	1ad3      	subs	r3, r2, r3
 801a1fe:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801a200:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a204:	b29a      	uxth	r2, r3
 801a206:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a20a:	b29b      	uxth	r3, r3
 801a20c:	1ad3      	subs	r3, r2, r3
 801a20e:	b29b      	uxth	r3, r3
 801a210:	b21b      	sxth	r3, r3
 801a212:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801a214:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a218:	2b00      	cmp	r3, #0
 801a21a:	da0a      	bge.n	801a232 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801a21c:	693b      	ldr	r3, [r7, #16]
 801a21e:	3b01      	subs	r3, #1
 801a220:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801a222:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a226:	b29b      	uxth	r3, r3
 801a228:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801a22c:	b29b      	uxth	r3, r3
 801a22e:	b21b      	sxth	r3, r3
 801a230:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	461a      	mov	r2, r3
 801a236:	f107 0310 	add.w	r3, r7, #16
 801a23a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a23e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a242:	68f8      	ldr	r0, [r7, #12]
 801a244:	371c      	adds	r7, #28
 801a246:	46bd      	mov	sp, r7
 801a248:	bc80      	pop	{r7}
 801a24a:	b002      	add	sp, #8
 801a24c:	4770      	bx	lr
	...

0801a250 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801a250:	b580      	push	{r7, lr}
 801a252:	b088      	sub	sp, #32
 801a254:	af02      	add	r7, sp, #8
 801a256:	463b      	mov	r3, r7
 801a258:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a25c:	2300      	movs	r3, #0
 801a25e:	60bb      	str	r3, [r7, #8]
 801a260:	2300      	movs	r3, #0
 801a262:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a264:	4b10      	ldr	r3, [pc, #64]	@ (801a2a8 <SysTimeSet+0x58>)
 801a266:	691b      	ldr	r3, [r3, #16]
 801a268:	f107 0208 	add.w	r2, r7, #8
 801a26c:	3204      	adds	r2, #4
 801a26e:	4610      	mov	r0, r2
 801a270:	4798      	blx	r3
 801a272:	4603      	mov	r3, r0
 801a274:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801a276:	f107 0010 	add.w	r0, r7, #16
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	9300      	str	r3, [sp, #0]
 801a27e:	68bb      	ldr	r3, [r7, #8]
 801a280:	463a      	mov	r2, r7
 801a282:	ca06      	ldmia	r2, {r1, r2}
 801a284:	f7ff ffab 	bl	801a1de <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801a288:	4b07      	ldr	r3, [pc, #28]	@ (801a2a8 <SysTimeSet+0x58>)
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	693a      	ldr	r2, [r7, #16]
 801a28e:	4610      	mov	r0, r2
 801a290:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801a292:	4b05      	ldr	r3, [pc, #20]	@ (801a2a8 <SysTimeSet+0x58>)
 801a294:	689b      	ldr	r3, [r3, #8]
 801a296:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a29a:	4610      	mov	r0, r2
 801a29c:	4798      	blx	r3
}
 801a29e:	bf00      	nop
 801a2a0:	3718      	adds	r7, #24
 801a2a2:	46bd      	mov	sp, r7
 801a2a4:	bd80      	pop	{r7, pc}
 801a2a6:	bf00      	nop
 801a2a8:	0801e6e8 	.word	0x0801e6e8

0801a2ac <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801a2ac:	b580      	push	{r7, lr}
 801a2ae:	b08a      	sub	sp, #40	@ 0x28
 801a2b0:	af02      	add	r7, sp, #8
 801a2b2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	61bb      	str	r3, [r7, #24]
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801a2bc:	2300      	movs	r3, #0
 801a2be:	613b      	str	r3, [r7, #16]
 801a2c0:	2300      	movs	r3, #0
 801a2c2:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a2c4:	4b14      	ldr	r3, [pc, #80]	@ (801a318 <SysTimeGet+0x6c>)
 801a2c6:	691b      	ldr	r3, [r3, #16]
 801a2c8:	f107 0218 	add.w	r2, r7, #24
 801a2cc:	3204      	adds	r2, #4
 801a2ce:	4610      	mov	r0, r2
 801a2d0:	4798      	blx	r3
 801a2d2:	4603      	mov	r3, r0
 801a2d4:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a2d6:	4b10      	ldr	r3, [pc, #64]	@ (801a318 <SysTimeGet+0x6c>)
 801a2d8:	68db      	ldr	r3, [r3, #12]
 801a2da:	4798      	blx	r3
 801a2dc:	4603      	mov	r3, r0
 801a2de:	b21b      	sxth	r3, r3
 801a2e0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a2e2:	4b0d      	ldr	r3, [pc, #52]	@ (801a318 <SysTimeGet+0x6c>)
 801a2e4:	685b      	ldr	r3, [r3, #4]
 801a2e6:	4798      	blx	r3
 801a2e8:	4603      	mov	r3, r0
 801a2ea:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801a2ec:	f107 0010 	add.w	r0, r7, #16
 801a2f0:	69fb      	ldr	r3, [r7, #28]
 801a2f2:	9300      	str	r3, [sp, #0]
 801a2f4:	69bb      	ldr	r3, [r7, #24]
 801a2f6:	f107 0208 	add.w	r2, r7, #8
 801a2fa:	ca06      	ldmia	r2, {r1, r2}
 801a2fc:	f7ff ff36 	bl	801a16c <SysTimeAdd>

  return sysTime;
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	461a      	mov	r2, r3
 801a304:	f107 0310 	add.w	r3, r7, #16
 801a308:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a30c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a310:	6878      	ldr	r0, [r7, #4]
 801a312:	3720      	adds	r7, #32
 801a314:	46bd      	mov	sp, r7
 801a316:	bd80      	pop	{r7, pc}
 801a318:	0801e6e8 	.word	0x0801e6e8

0801a31c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801a31c:	b580      	push	{r7, lr}
 801a31e:	b084      	sub	sp, #16
 801a320:	af00      	add	r7, sp, #0
 801a322:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a324:	2300      	movs	r3, #0
 801a326:	60bb      	str	r3, [r7, #8]
 801a328:	2300      	movs	r3, #0
 801a32a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a32c:	4b0a      	ldr	r3, [pc, #40]	@ (801a358 <SysTimeGetMcuTime+0x3c>)
 801a32e:	691b      	ldr	r3, [r3, #16]
 801a330:	f107 0208 	add.w	r2, r7, #8
 801a334:	3204      	adds	r2, #4
 801a336:	4610      	mov	r0, r2
 801a338:	4798      	blx	r3
 801a33a:	4603      	mov	r3, r0
 801a33c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	461a      	mov	r2, r3
 801a342:	f107 0308 	add.w	r3, r7, #8
 801a346:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a34a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a34e:	6878      	ldr	r0, [r7, #4]
 801a350:	3710      	adds	r7, #16
 801a352:	46bd      	mov	sp, r7
 801a354:	bd80      	pop	{r7, pc}
 801a356:	bf00      	nop
 801a358:	0801e6e8 	.word	0x0801e6e8

0801a35c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801a35c:	b580      	push	{r7, lr}
 801a35e:	b088      	sub	sp, #32
 801a360:	af02      	add	r7, sp, #8
 801a362:	463b      	mov	r3, r7
 801a364:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a368:	4b0f      	ldr	r3, [pc, #60]	@ (801a3a8 <SysTimeToMs+0x4c>)
 801a36a:	68db      	ldr	r3, [r3, #12]
 801a36c:	4798      	blx	r3
 801a36e:	4603      	mov	r3, r0
 801a370:	b21b      	sxth	r3, r3
 801a372:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a374:	4b0c      	ldr	r3, [pc, #48]	@ (801a3a8 <SysTimeToMs+0x4c>)
 801a376:	685b      	ldr	r3, [r3, #4]
 801a378:	4798      	blx	r3
 801a37a:	4603      	mov	r3, r0
 801a37c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801a37e:	f107 0008 	add.w	r0, r7, #8
 801a382:	697b      	ldr	r3, [r7, #20]
 801a384:	9300      	str	r3, [sp, #0]
 801a386:	693b      	ldr	r3, [r7, #16]
 801a388:	463a      	mov	r2, r7
 801a38a:	ca06      	ldmia	r2, {r1, r2}
 801a38c:	f7ff ff27 	bl	801a1de <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801a390:	68bb      	ldr	r3, [r7, #8]
 801a392:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a396:	fb02 f303 	mul.w	r3, r2, r3
 801a39a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801a39e:	4413      	add	r3, r2
}
 801a3a0:	4618      	mov	r0, r3
 801a3a2:	3718      	adds	r7, #24
 801a3a4:	46bd      	mov	sp, r7
 801a3a6:	bd80      	pop	{r7, pc}
 801a3a8:	0801e6e8 	.word	0x0801e6e8

0801a3ac <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801a3ac:	b580      	push	{r7, lr}
 801a3ae:	b08a      	sub	sp, #40	@ 0x28
 801a3b0:	af02      	add	r7, sp, #8
 801a3b2:	6078      	str	r0, [r7, #4]
 801a3b4:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801a3b6:	683b      	ldr	r3, [r7, #0]
 801a3b8:	4a19      	ldr	r2, [pc, #100]	@ (801a420 <SysTimeFromMs+0x74>)
 801a3ba:	fba2 2303 	umull	r2, r3, r2, r3
 801a3be:	099b      	lsrs	r3, r3, #6
 801a3c0:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801a3c2:	69fb      	ldr	r3, [r7, #28]
 801a3c4:	617b      	str	r3, [r7, #20]
 801a3c6:	683b      	ldr	r3, [r7, #0]
 801a3c8:	b29a      	uxth	r2, r3
 801a3ca:	69fb      	ldr	r3, [r7, #28]
 801a3cc:	b29b      	uxth	r3, r3
 801a3ce:	4619      	mov	r1, r3
 801a3d0:	0149      	lsls	r1, r1, #5
 801a3d2:	1ac9      	subs	r1, r1, r3
 801a3d4:	0089      	lsls	r1, r1, #2
 801a3d6:	440b      	add	r3, r1
 801a3d8:	00db      	lsls	r3, r3, #3
 801a3da:	b29b      	uxth	r3, r3
 801a3dc:	1ad3      	subs	r3, r2, r3
 801a3de:	b29b      	uxth	r3, r3
 801a3e0:	b21b      	sxth	r3, r3
 801a3e2:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801a3e4:	f107 030c 	add.w	r3, r7, #12
 801a3e8:	2200      	movs	r2, #0
 801a3ea:	601a      	str	r2, [r3, #0]
 801a3ec:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a3ee:	4b0d      	ldr	r3, [pc, #52]	@ (801a424 <SysTimeFromMs+0x78>)
 801a3f0:	68db      	ldr	r3, [r3, #12]
 801a3f2:	4798      	blx	r3
 801a3f4:	4603      	mov	r3, r0
 801a3f6:	b21b      	sxth	r3, r3
 801a3f8:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a3fa:	4b0a      	ldr	r3, [pc, #40]	@ (801a424 <SysTimeFromMs+0x78>)
 801a3fc:	685b      	ldr	r3, [r3, #4]
 801a3fe:	4798      	blx	r3
 801a400:	4603      	mov	r3, r0
 801a402:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801a404:	6878      	ldr	r0, [r7, #4]
 801a406:	693b      	ldr	r3, [r7, #16]
 801a408:	9300      	str	r3, [sp, #0]
 801a40a:	68fb      	ldr	r3, [r7, #12]
 801a40c:	f107 0214 	add.w	r2, r7, #20
 801a410:	ca06      	ldmia	r2, {r1, r2}
 801a412:	f7ff feab 	bl	801a16c <SysTimeAdd>
}
 801a416:	6878      	ldr	r0, [r7, #4]
 801a418:	3720      	adds	r7, #32
 801a41a:	46bd      	mov	sp, r7
 801a41c:	bd80      	pop	{r7, pc}
 801a41e:	bf00      	nop
 801a420:	10624dd3 	.word	0x10624dd3
 801a424:	0801e6e8 	.word	0x0801e6e8

0801a428 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801a428:	b480      	push	{r7}
 801a42a:	b085      	sub	sp, #20
 801a42c:	af00      	add	r7, sp, #0
 801a42e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801a430:	2300      	movs	r3, #0
 801a432:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801a434:	e00e      	b.n	801a454 <ee_skip_atoi+0x2c>
 801a436:	68fa      	ldr	r2, [r7, #12]
 801a438:	4613      	mov	r3, r2
 801a43a:	009b      	lsls	r3, r3, #2
 801a43c:	4413      	add	r3, r2
 801a43e:	005b      	lsls	r3, r3, #1
 801a440:	4618      	mov	r0, r3
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	1c59      	adds	r1, r3, #1
 801a448:	687a      	ldr	r2, [r7, #4]
 801a44a:	6011      	str	r1, [r2, #0]
 801a44c:	781b      	ldrb	r3, [r3, #0]
 801a44e:	4403      	add	r3, r0
 801a450:	3b30      	subs	r3, #48	@ 0x30
 801a452:	60fb      	str	r3, [r7, #12]
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	781b      	ldrb	r3, [r3, #0]
 801a45a:	2b2f      	cmp	r3, #47	@ 0x2f
 801a45c:	d904      	bls.n	801a468 <ee_skip_atoi+0x40>
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	781b      	ldrb	r3, [r3, #0]
 801a464:	2b39      	cmp	r3, #57	@ 0x39
 801a466:	d9e6      	bls.n	801a436 <ee_skip_atoi+0xe>
  return i;
 801a468:	68fb      	ldr	r3, [r7, #12]
}
 801a46a:	4618      	mov	r0, r3
 801a46c:	3714      	adds	r7, #20
 801a46e:	46bd      	mov	sp, r7
 801a470:	bc80      	pop	{r7}
 801a472:	4770      	bx	lr

0801a474 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801a474:	b480      	push	{r7}
 801a476:	b099      	sub	sp, #100	@ 0x64
 801a478:	af00      	add	r7, sp, #0
 801a47a:	60f8      	str	r0, [r7, #12]
 801a47c:	60b9      	str	r1, [r7, #8]
 801a47e:	607a      	str	r2, [r7, #4]
 801a480:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801a482:	4b71      	ldr	r3, [pc, #452]	@ (801a648 <ee_number+0x1d4>)
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801a488:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a48a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d002      	beq.n	801a498 <ee_number+0x24>
 801a492:	4b6e      	ldr	r3, [pc, #440]	@ (801a64c <ee_number+0x1d8>)
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801a498:	683b      	ldr	r3, [r7, #0]
 801a49a:	2b01      	cmp	r3, #1
 801a49c:	dd02      	ble.n	801a4a4 <ee_number+0x30>
 801a49e:	683b      	ldr	r3, [r7, #0]
 801a4a0:	2b24      	cmp	r3, #36	@ 0x24
 801a4a2:	dd01      	ble.n	801a4a8 <ee_number+0x34>
 801a4a4:	2300      	movs	r3, #0
 801a4a6:	e0ca      	b.n	801a63e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801a4a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a4aa:	f003 0301 	and.w	r3, r3, #1
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d001      	beq.n	801a4b6 <ee_number+0x42>
 801a4b2:	2330      	movs	r3, #48	@ 0x30
 801a4b4:	e000      	b.n	801a4b8 <ee_number+0x44>
 801a4b6:	2320      	movs	r3, #32
 801a4b8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801a4bc:	2300      	movs	r3, #0
 801a4be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801a4c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a4c4:	f003 0302 	and.w	r3, r3, #2
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d00b      	beq.n	801a4e4 <ee_number+0x70>
  {
    if (num < 0)
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	da08      	bge.n	801a4e4 <ee_number+0x70>
    {
      sign = '-';
 801a4d2:	232d      	movs	r3, #45	@ 0x2d
 801a4d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	425b      	negs	r3, r3
 801a4dc:	607b      	str	r3, [r7, #4]
      size--;
 801a4de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a4e0:	3b01      	subs	r3, #1
 801a4e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801a4e4:	2300      	movs	r3, #0
 801a4e6:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d11e      	bne.n	801a52c <ee_number+0xb8>
    tmp[i++] = '0';
 801a4ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4f0:	1c5a      	adds	r2, r3, #1
 801a4f2:	657a      	str	r2, [r7, #84]	@ 0x54
 801a4f4:	3360      	adds	r3, #96	@ 0x60
 801a4f6:	443b      	add	r3, r7
 801a4f8:	2230      	movs	r2, #48	@ 0x30
 801a4fa:	f803 2c50 	strb.w	r2, [r3, #-80]
 801a4fe:	e018      	b.n	801a532 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	683a      	ldr	r2, [r7, #0]
 801a504:	fbb3 f1f2 	udiv	r1, r3, r2
 801a508:	fb01 f202 	mul.w	r2, r1, r2
 801a50c:	1a9b      	subs	r3, r3, r2
 801a50e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a510:	441a      	add	r2, r3
 801a512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a514:	1c59      	adds	r1, r3, #1
 801a516:	6579      	str	r1, [r7, #84]	@ 0x54
 801a518:	7812      	ldrb	r2, [r2, #0]
 801a51a:	3360      	adds	r3, #96	@ 0x60
 801a51c:	443b      	add	r3, r7
 801a51e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801a522:	687a      	ldr	r2, [r7, #4]
 801a524:	683b      	ldr	r3, [r7, #0]
 801a526:	fbb2 f3f3 	udiv	r3, r2, r3
 801a52a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d1e6      	bne.n	801a500 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801a532:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a536:	429a      	cmp	r2, r3
 801a538:	dd01      	ble.n	801a53e <ee_number+0xca>
 801a53a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a53c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801a53e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a542:	1ad3      	subs	r3, r2, r3
 801a544:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801a546:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a548:	f003 0301 	and.w	r3, r3, #1
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d112      	bne.n	801a576 <ee_number+0x102>
 801a550:	e00c      	b.n	801a56c <ee_number+0xf8>
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	1c5a      	adds	r2, r3, #1
 801a556:	60fa      	str	r2, [r7, #12]
 801a558:	2220      	movs	r2, #32
 801a55a:	701a      	strb	r2, [r3, #0]
 801a55c:	68bb      	ldr	r3, [r7, #8]
 801a55e:	3b01      	subs	r3, #1
 801a560:	60bb      	str	r3, [r7, #8]
 801a562:	68bb      	ldr	r3, [r7, #8]
 801a564:	2b00      	cmp	r3, #0
 801a566:	d101      	bne.n	801a56c <ee_number+0xf8>
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	e068      	b.n	801a63e <ee_number+0x1ca>
 801a56c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a56e:	1e5a      	subs	r2, r3, #1
 801a570:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a572:	2b00      	cmp	r3, #0
 801a574:	dced      	bgt.n	801a552 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801a576:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d01b      	beq.n	801a5b6 <ee_number+0x142>
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	1c5a      	adds	r2, r3, #1
 801a582:	60fa      	str	r2, [r7, #12]
 801a584:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801a588:	701a      	strb	r2, [r3, #0]
 801a58a:	68bb      	ldr	r3, [r7, #8]
 801a58c:	3b01      	subs	r3, #1
 801a58e:	60bb      	str	r3, [r7, #8]
 801a590:	68bb      	ldr	r3, [r7, #8]
 801a592:	2b00      	cmp	r3, #0
 801a594:	d10f      	bne.n	801a5b6 <ee_number+0x142>
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	e051      	b.n	801a63e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	1c5a      	adds	r2, r3, #1
 801a59e:	60fa      	str	r2, [r7, #12]
 801a5a0:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801a5a4:	701a      	strb	r2, [r3, #0]
 801a5a6:	68bb      	ldr	r3, [r7, #8]
 801a5a8:	3b01      	subs	r3, #1
 801a5aa:	60bb      	str	r3, [r7, #8]
 801a5ac:	68bb      	ldr	r3, [r7, #8]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d101      	bne.n	801a5b6 <ee_number+0x142>
 801a5b2:	68fb      	ldr	r3, [r7, #12]
 801a5b4:	e043      	b.n	801a63e <ee_number+0x1ca>
 801a5b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a5b8:	1e5a      	subs	r2, r3, #1
 801a5ba:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	dcec      	bgt.n	801a59a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801a5c0:	e00c      	b.n	801a5dc <ee_number+0x168>
 801a5c2:	68fb      	ldr	r3, [r7, #12]
 801a5c4:	1c5a      	adds	r2, r3, #1
 801a5c6:	60fa      	str	r2, [r7, #12]
 801a5c8:	2230      	movs	r2, #48	@ 0x30
 801a5ca:	701a      	strb	r2, [r3, #0]
 801a5cc:	68bb      	ldr	r3, [r7, #8]
 801a5ce:	3b01      	subs	r3, #1
 801a5d0:	60bb      	str	r3, [r7, #8]
 801a5d2:	68bb      	ldr	r3, [r7, #8]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d101      	bne.n	801a5dc <ee_number+0x168>
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	e030      	b.n	801a63e <ee_number+0x1ca>
 801a5dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a5de:	1e5a      	subs	r2, r3, #1
 801a5e0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a5e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a5e4:	429a      	cmp	r2, r3
 801a5e6:	dbec      	blt.n	801a5c2 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801a5e8:	e010      	b.n	801a60c <ee_number+0x198>
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	1c5a      	adds	r2, r3, #1
 801a5ee:	60fa      	str	r2, [r7, #12]
 801a5f0:	f107 0110 	add.w	r1, r7, #16
 801a5f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a5f6:	440a      	add	r2, r1
 801a5f8:	7812      	ldrb	r2, [r2, #0]
 801a5fa:	701a      	strb	r2, [r3, #0]
 801a5fc:	68bb      	ldr	r3, [r7, #8]
 801a5fe:	3b01      	subs	r3, #1
 801a600:	60bb      	str	r3, [r7, #8]
 801a602:	68bb      	ldr	r3, [r7, #8]
 801a604:	2b00      	cmp	r3, #0
 801a606:	d101      	bne.n	801a60c <ee_number+0x198>
 801a608:	68fb      	ldr	r3, [r7, #12]
 801a60a:	e018      	b.n	801a63e <ee_number+0x1ca>
 801a60c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a60e:	1e5a      	subs	r2, r3, #1
 801a610:	657a      	str	r2, [r7, #84]	@ 0x54
 801a612:	2b00      	cmp	r3, #0
 801a614:	dce9      	bgt.n	801a5ea <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801a616:	e00c      	b.n	801a632 <ee_number+0x1be>
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	1c5a      	adds	r2, r3, #1
 801a61c:	60fa      	str	r2, [r7, #12]
 801a61e:	2220      	movs	r2, #32
 801a620:	701a      	strb	r2, [r3, #0]
 801a622:	68bb      	ldr	r3, [r7, #8]
 801a624:	3b01      	subs	r3, #1
 801a626:	60bb      	str	r3, [r7, #8]
 801a628:	68bb      	ldr	r3, [r7, #8]
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d101      	bne.n	801a632 <ee_number+0x1be>
 801a62e:	68fb      	ldr	r3, [r7, #12]
 801a630:	e005      	b.n	801a63e <ee_number+0x1ca>
 801a632:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a634:	1e5a      	subs	r2, r3, #1
 801a636:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a638:	2b00      	cmp	r3, #0
 801a63a:	dced      	bgt.n	801a618 <ee_number+0x1a4>

  return str;
 801a63c:	68fb      	ldr	r3, [r7, #12]
}
 801a63e:	4618      	mov	r0, r3
 801a640:	3764      	adds	r7, #100	@ 0x64
 801a642:	46bd      	mov	sp, r7
 801a644:	bc80      	pop	{r7}
 801a646:	4770      	bx	lr
 801a648:	20000128 	.word	0x20000128
 801a64c:	2000012c 	.word	0x2000012c

0801a650 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801a650:	b580      	push	{r7, lr}
 801a652:	b092      	sub	sp, #72	@ 0x48
 801a654:	af04      	add	r7, sp, #16
 801a656:	60f8      	str	r0, [r7, #12]
 801a658:	60b9      	str	r1, [r7, #8]
 801a65a:	607a      	str	r2, [r7, #4]
 801a65c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801a65e:	68bb      	ldr	r3, [r7, #8]
 801a660:	2b00      	cmp	r3, #0
 801a662:	dc01      	bgt.n	801a668 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801a664:	2300      	movs	r3, #0
 801a666:	e13e      	b.n	801a8e6 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a66c:	e128      	b.n	801a8c0 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801a66e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a670:	68fb      	ldr	r3, [r7, #12]
 801a672:	1ad2      	subs	r2, r2, r3
 801a674:	68bb      	ldr	r3, [r7, #8]
 801a676:	3b01      	subs	r3, #1
 801a678:	429a      	cmp	r2, r3
 801a67a:	f280 812e 	bge.w	801a8da <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	781b      	ldrb	r3, [r3, #0]
 801a682:	2b25      	cmp	r3, #37	@ 0x25
 801a684:	d006      	beq.n	801a694 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801a686:	687a      	ldr	r2, [r7, #4]
 801a688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a68a:	1c59      	adds	r1, r3, #1
 801a68c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a68e:	7812      	ldrb	r2, [r2, #0]
 801a690:	701a      	strb	r2, [r3, #0]
      continue;
 801a692:	e112      	b.n	801a8ba <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801a694:	2300      	movs	r3, #0
 801a696:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	3301      	adds	r3, #1
 801a69c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	781b      	ldrb	r3, [r3, #0]
 801a6a2:	2b30      	cmp	r3, #48	@ 0x30
 801a6a4:	d103      	bne.n	801a6ae <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801a6a6:	6a3b      	ldr	r3, [r7, #32]
 801a6a8:	f043 0301 	orr.w	r3, r3, #1
 801a6ac:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801a6ae:	f04f 33ff 	mov.w	r3, #4294967295
 801a6b2:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	781b      	ldrb	r3, [r3, #0]
 801a6b8:	2b2f      	cmp	r3, #47	@ 0x2f
 801a6ba:	d908      	bls.n	801a6ce <tiny_vsnprintf_like+0x7e>
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	781b      	ldrb	r3, [r3, #0]
 801a6c0:	2b39      	cmp	r3, #57	@ 0x39
 801a6c2:	d804      	bhi.n	801a6ce <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801a6c4:	1d3b      	adds	r3, r7, #4
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	f7ff feae 	bl	801a428 <ee_skip_atoi>
 801a6cc:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801a6ce:	f04f 33ff 	mov.w	r3, #4294967295
 801a6d2:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801a6d4:	f04f 33ff 	mov.w	r3, #4294967295
 801a6d8:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801a6da:	230a      	movs	r3, #10
 801a6dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	781b      	ldrb	r3, [r3, #0]
 801a6e2:	3b58      	subs	r3, #88	@ 0x58
 801a6e4:	2b20      	cmp	r3, #32
 801a6e6:	f200 8094 	bhi.w	801a812 <tiny_vsnprintf_like+0x1c2>
 801a6ea:	a201      	add	r2, pc, #4	@ (adr r2, 801a6f0 <tiny_vsnprintf_like+0xa0>)
 801a6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a6f0:	0801a7fb 	.word	0x0801a7fb
 801a6f4:	0801a813 	.word	0x0801a813
 801a6f8:	0801a813 	.word	0x0801a813
 801a6fc:	0801a813 	.word	0x0801a813
 801a700:	0801a813 	.word	0x0801a813
 801a704:	0801a813 	.word	0x0801a813
 801a708:	0801a813 	.word	0x0801a813
 801a70c:	0801a813 	.word	0x0801a813
 801a710:	0801a813 	.word	0x0801a813
 801a714:	0801a813 	.word	0x0801a813
 801a718:	0801a813 	.word	0x0801a813
 801a71c:	0801a77f 	.word	0x0801a77f
 801a720:	0801a809 	.word	0x0801a809
 801a724:	0801a813 	.word	0x0801a813
 801a728:	0801a813 	.word	0x0801a813
 801a72c:	0801a813 	.word	0x0801a813
 801a730:	0801a813 	.word	0x0801a813
 801a734:	0801a809 	.word	0x0801a809
 801a738:	0801a813 	.word	0x0801a813
 801a73c:	0801a813 	.word	0x0801a813
 801a740:	0801a813 	.word	0x0801a813
 801a744:	0801a813 	.word	0x0801a813
 801a748:	0801a813 	.word	0x0801a813
 801a74c:	0801a813 	.word	0x0801a813
 801a750:	0801a813 	.word	0x0801a813
 801a754:	0801a813 	.word	0x0801a813
 801a758:	0801a813 	.word	0x0801a813
 801a75c:	0801a79f 	.word	0x0801a79f
 801a760:	0801a813 	.word	0x0801a813
 801a764:	0801a85f 	.word	0x0801a85f
 801a768:	0801a813 	.word	0x0801a813
 801a76c:	0801a813 	.word	0x0801a813
 801a770:	0801a803 	.word	0x0801a803
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a776:	1c5a      	adds	r2, r3, #1
 801a778:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a77a:	2220      	movs	r2, #32
 801a77c:	701a      	strb	r2, [r3, #0]
 801a77e:	69fb      	ldr	r3, [r7, #28]
 801a780:	3b01      	subs	r3, #1
 801a782:	61fb      	str	r3, [r7, #28]
 801a784:	69fb      	ldr	r3, [r7, #28]
 801a786:	2b00      	cmp	r3, #0
 801a788:	dcf4      	bgt.n	801a774 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a78a:	683b      	ldr	r3, [r7, #0]
 801a78c:	1d1a      	adds	r2, r3, #4
 801a78e:	603a      	str	r2, [r7, #0]
 801a790:	6819      	ldr	r1, [r3, #0]
 801a792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a794:	1c5a      	adds	r2, r3, #1
 801a796:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a798:	b2ca      	uxtb	r2, r1
 801a79a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a79c:	e08d      	b.n	801a8ba <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801a79e:	683b      	ldr	r3, [r7, #0]
 801a7a0:	1d1a      	adds	r2, r3, #4
 801a7a2:	603a      	str	r2, [r7, #0]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801a7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d101      	bne.n	801a7b2 <tiny_vsnprintf_like+0x162>
 801a7ae:	4b50      	ldr	r3, [pc, #320]	@ (801a8f0 <tiny_vsnprintf_like+0x2a0>)
 801a7b0:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a7b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a7b4:	f7e5 fd34 	bl	8000220 <strlen>
 801a7b8:	4603      	mov	r3, r0
 801a7ba:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a7bc:	e004      	b.n	801a7c8 <tiny_vsnprintf_like+0x178>
 801a7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7c0:	1c5a      	adds	r2, r3, #1
 801a7c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a7c4:	2220      	movs	r2, #32
 801a7c6:	701a      	strb	r2, [r3, #0]
 801a7c8:	69fb      	ldr	r3, [r7, #28]
 801a7ca:	1e5a      	subs	r2, r3, #1
 801a7cc:	61fa      	str	r2, [r7, #28]
 801a7ce:	693a      	ldr	r2, [r7, #16]
 801a7d0:	429a      	cmp	r2, r3
 801a7d2:	dbf4      	blt.n	801a7be <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a7d4:	2300      	movs	r3, #0
 801a7d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a7d8:	e00a      	b.n	801a7f0 <tiny_vsnprintf_like+0x1a0>
 801a7da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a7dc:	1c53      	adds	r3, r2, #1
 801a7de:	627b      	str	r3, [r7, #36]	@ 0x24
 801a7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7e2:	1c59      	adds	r1, r3, #1
 801a7e4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a7e6:	7812      	ldrb	r2, [r2, #0]
 801a7e8:	701a      	strb	r2, [r3, #0]
 801a7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7ec:	3301      	adds	r3, #1
 801a7ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a7f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a7f2:	693b      	ldr	r3, [r7, #16]
 801a7f4:	429a      	cmp	r2, r3
 801a7f6:	dbf0      	blt.n	801a7da <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a7f8:	e05f      	b.n	801a8ba <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801a7fa:	6a3b      	ldr	r3, [r7, #32]
 801a7fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a800:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a802:	2310      	movs	r3, #16
 801a804:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801a806:	e02b      	b.n	801a860 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a808:	6a3b      	ldr	r3, [r7, #32]
 801a80a:	f043 0302 	orr.w	r3, r3, #2
 801a80e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a810:	e025      	b.n	801a85e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	781b      	ldrb	r3, [r3, #0]
 801a816:	2b25      	cmp	r3, #37	@ 0x25
 801a818:	d004      	beq.n	801a824 <tiny_vsnprintf_like+0x1d4>
 801a81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a81c:	1c5a      	adds	r2, r3, #1
 801a81e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a820:	2225      	movs	r2, #37	@ 0x25
 801a822:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	1ad2      	subs	r2, r2, r3
 801a82a:	68bb      	ldr	r3, [r7, #8]
 801a82c:	3b01      	subs	r3, #1
 801a82e:	429a      	cmp	r2, r3
 801a830:	da16      	bge.n	801a860 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	781b      	ldrb	r3, [r3, #0]
 801a836:	2b00      	cmp	r3, #0
 801a838:	d006      	beq.n	801a848 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a83a:	687a      	ldr	r2, [r7, #4]
 801a83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a83e:	1c59      	adds	r1, r3, #1
 801a840:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a842:	7812      	ldrb	r2, [r2, #0]
 801a844:	701a      	strb	r2, [r3, #0]
 801a846:	e002      	b.n	801a84e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	3b01      	subs	r3, #1
 801a84c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a84e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	1ad2      	subs	r2, r2, r3
 801a854:	68bb      	ldr	r3, [r7, #8]
 801a856:	3b01      	subs	r3, #1
 801a858:	429a      	cmp	r2, r3
 801a85a:	db2d      	blt.n	801a8b8 <tiny_vsnprintf_like+0x268>
 801a85c:	e000      	b.n	801a860 <tiny_vsnprintf_like+0x210>
        break;
 801a85e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a860:	697b      	ldr	r3, [r7, #20]
 801a862:	2b6c      	cmp	r3, #108	@ 0x6c
 801a864:	d105      	bne.n	801a872 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801a866:	683b      	ldr	r3, [r7, #0]
 801a868:	1d1a      	adds	r2, r3, #4
 801a86a:	603a      	str	r2, [r7, #0]
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	637b      	str	r3, [r7, #52]	@ 0x34
 801a870:	e00f      	b.n	801a892 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801a872:	6a3b      	ldr	r3, [r7, #32]
 801a874:	f003 0302 	and.w	r3, r3, #2
 801a878:	2b00      	cmp	r3, #0
 801a87a:	d005      	beq.n	801a888 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801a87c:	683b      	ldr	r3, [r7, #0]
 801a87e:	1d1a      	adds	r2, r3, #4
 801a880:	603a      	str	r2, [r7, #0]
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	637b      	str	r3, [r7, #52]	@ 0x34
 801a886:	e004      	b.n	801a892 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801a888:	683b      	ldr	r3, [r7, #0]
 801a88a:	1d1a      	adds	r2, r3, #4
 801a88c:	603a      	str	r2, [r7, #0]
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a892:	68bb      	ldr	r3, [r7, #8]
 801a894:	1e5a      	subs	r2, r3, #1
 801a896:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	1acb      	subs	r3, r1, r3
 801a89c:	1ad1      	subs	r1, r2, r3
 801a89e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a8a0:	6a3b      	ldr	r3, [r7, #32]
 801a8a2:	9302      	str	r3, [sp, #8]
 801a8a4:	69bb      	ldr	r3, [r7, #24]
 801a8a6:	9301      	str	r3, [sp, #4]
 801a8a8:	69fb      	ldr	r3, [r7, #28]
 801a8aa:	9300      	str	r3, [sp, #0]
 801a8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a8b0:	f7ff fde0 	bl	801a474 <ee_number>
 801a8b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801a8b6:	e000      	b.n	801a8ba <tiny_vsnprintf_like+0x26a>
        continue;
 801a8b8:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	3301      	adds	r3, #1
 801a8be:	607b      	str	r3, [r7, #4]
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	781b      	ldrb	r3, [r3, #0]
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	f47f aed2 	bne.w	801a66e <tiny_vsnprintf_like+0x1e>
 801a8ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a8cc:	68fb      	ldr	r3, [r7, #12]
 801a8ce:	1ad2      	subs	r2, r2, r3
 801a8d0:	68bb      	ldr	r3, [r7, #8]
 801a8d2:	3b01      	subs	r3, #1
 801a8d4:	429a      	cmp	r2, r3
 801a8d6:	f6bf aeca 	bge.w	801a66e <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801a8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8dc:	2200      	movs	r2, #0
 801a8de:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a8e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a8e2:	68fb      	ldr	r3, [r7, #12]
 801a8e4:	1ad3      	subs	r3, r2, r3
}
 801a8e6:	4618      	mov	r0, r3
 801a8e8:	3738      	adds	r7, #56	@ 0x38
 801a8ea:	46bd      	mov	sp, r7
 801a8ec:	bd80      	pop	{r7, pc}
 801a8ee:	bf00      	nop
 801a8f0:	0801e5fc 	.word	0x0801e5fc

0801a8f4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a8f4:	b580      	push	{r7, lr}
 801a8f6:	b090      	sub	sp, #64	@ 0x40
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a8fc:	4b73      	ldr	r3, [pc, #460]	@ (801aacc <UTIL_SEQ_Run+0x1d8>)
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801a902:	4b72      	ldr	r3, [pc, #456]	@ (801aacc <UTIL_SEQ_Run+0x1d8>)
 801a904:	681a      	ldr	r2, [r3, #0]
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	4013      	ands	r3, r2
 801a90a:	4a70      	ldr	r2, [pc, #448]	@ (801aacc <UTIL_SEQ_Run+0x1d8>)
 801a90c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801a90e:	4b70      	ldr	r3, [pc, #448]	@ (801aad0 <UTIL_SEQ_Run+0x1dc>)
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a914:	4b6f      	ldr	r3, [pc, #444]	@ (801aad4 <UTIL_SEQ_Run+0x1e0>)
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801a91a:	4b6f      	ldr	r3, [pc, #444]	@ (801aad8 <UTIL_SEQ_Run+0x1e4>)
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801a920:	4b6e      	ldr	r3, [pc, #440]	@ (801aadc <UTIL_SEQ_Run+0x1e8>)
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a926:	e08d      	b.n	801aa44 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801a928:	2300      	movs	r3, #0
 801a92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a92c:	e002      	b.n	801a934 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801a92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a930:	3301      	adds	r3, #1
 801a932:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a934:	4a6a      	ldr	r2, [pc, #424]	@ (801aae0 <UTIL_SEQ_Run+0x1ec>)
 801a936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a938:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a93e:	401a      	ands	r2, r3
 801a940:	4b62      	ldr	r3, [pc, #392]	@ (801aacc <UTIL_SEQ_Run+0x1d8>)
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	4013      	ands	r3, r2
 801a946:	2b00      	cmp	r3, #0
 801a948:	d0f1      	beq.n	801a92e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801a94a:	4a65      	ldr	r2, [pc, #404]	@ (801aae0 <UTIL_SEQ_Run+0x1ec>)
 801a94c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a94e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a954:	401a      	ands	r2, r3
 801a956:	4b5d      	ldr	r3, [pc, #372]	@ (801aacc <UTIL_SEQ_Run+0x1d8>)
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	4013      	ands	r3, r2
 801a95c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a95e:	4a60      	ldr	r2, [pc, #384]	@ (801aae0 <UTIL_SEQ_Run+0x1ec>)
 801a960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a962:	00db      	lsls	r3, r3, #3
 801a964:	4413      	add	r3, r2
 801a966:	685a      	ldr	r2, [r3, #4]
 801a968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a96a:	4013      	ands	r3, r2
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d106      	bne.n	801a97e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a970:	4a5b      	ldr	r2, [pc, #364]	@ (801aae0 <UTIL_SEQ_Run+0x1ec>)
 801a972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a974:	00db      	lsls	r3, r3, #3
 801a976:	4413      	add	r3, r2
 801a978:	f04f 32ff 	mov.w	r2, #4294967295
 801a97c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a97e:	4a58      	ldr	r2, [pc, #352]	@ (801aae0 <UTIL_SEQ_Run+0x1ec>)
 801a980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a982:	00db      	lsls	r3, r3, #3
 801a984:	4413      	add	r3, r2
 801a986:	685a      	ldr	r2, [r3, #4]
 801a988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a98a:	4013      	ands	r3, r2
 801a98c:	4618      	mov	r0, r3
 801a98e:	f000 f907 	bl	801aba0 <SEQ_BitPosition>
 801a992:	4603      	mov	r3, r0
 801a994:	461a      	mov	r2, r3
 801a996:	4b53      	ldr	r3, [pc, #332]	@ (801aae4 <UTIL_SEQ_Run+0x1f0>)
 801a998:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a99a:	4a51      	ldr	r2, [pc, #324]	@ (801aae0 <UTIL_SEQ_Run+0x1ec>)
 801a99c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a99e:	00db      	lsls	r3, r3, #3
 801a9a0:	4413      	add	r3, r2
 801a9a2:	685a      	ldr	r2, [r3, #4]
 801a9a4:	4b4f      	ldr	r3, [pc, #316]	@ (801aae4 <UTIL_SEQ_Run+0x1f0>)
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	2101      	movs	r1, #1
 801a9aa:	fa01 f303 	lsl.w	r3, r1, r3
 801a9ae:	43db      	mvns	r3, r3
 801a9b0:	401a      	ands	r2, r3
 801a9b2:	494b      	ldr	r1, [pc, #300]	@ (801aae0 <UTIL_SEQ_Run+0x1ec>)
 801a9b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a9b6:	00db      	lsls	r3, r3, #3
 801a9b8:	440b      	add	r3, r1
 801a9ba:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9bc:	f3ef 8310 	mrs	r3, PRIMASK
 801a9c0:	61bb      	str	r3, [r7, #24]
  return(result);
 801a9c2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a9c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a9c6:	b672      	cpsid	i
}
 801a9c8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a9ca:	4b46      	ldr	r3, [pc, #280]	@ (801aae4 <UTIL_SEQ_Run+0x1f0>)
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	2201      	movs	r2, #1
 801a9d0:	fa02 f303 	lsl.w	r3, r2, r3
 801a9d4:	43da      	mvns	r2, r3
 801a9d6:	4b3e      	ldr	r3, [pc, #248]	@ (801aad0 <UTIL_SEQ_Run+0x1dc>)
 801a9d8:	681b      	ldr	r3, [r3, #0]
 801a9da:	4013      	ands	r3, r2
 801a9dc:	4a3c      	ldr	r2, [pc, #240]	@ (801aad0 <UTIL_SEQ_Run+0x1dc>)
 801a9de:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a9e0:	2301      	movs	r3, #1
 801a9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a9e4:	e013      	b.n	801aa0e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a9e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a9e8:	3b01      	subs	r3, #1
 801a9ea:	4a3d      	ldr	r2, [pc, #244]	@ (801aae0 <UTIL_SEQ_Run+0x1ec>)
 801a9ec:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a9f0:	4b3c      	ldr	r3, [pc, #240]	@ (801aae4 <UTIL_SEQ_Run+0x1f0>)
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	2201      	movs	r2, #1
 801a9f6:	fa02 f303 	lsl.w	r3, r2, r3
 801a9fa:	43da      	mvns	r2, r3
 801a9fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a9fe:	3b01      	subs	r3, #1
 801aa00:	400a      	ands	r2, r1
 801aa02:	4937      	ldr	r1, [pc, #220]	@ (801aae0 <UTIL_SEQ_Run+0x1ec>)
 801aa04:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801aa08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa0a:	3b01      	subs	r3, #1
 801aa0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801aa0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d1e8      	bne.n	801a9e6 <UTIL_SEQ_Run+0xf2>
 801aa14:	6a3b      	ldr	r3, [r7, #32]
 801aa16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa18:	697b      	ldr	r3, [r7, #20]
 801aa1a:	f383 8810 	msr	PRIMASK, r3
}
 801aa1e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801aa20:	4b30      	ldr	r3, [pc, #192]	@ (801aae4 <UTIL_SEQ_Run+0x1f0>)
 801aa22:	681b      	ldr	r3, [r3, #0]
 801aa24:	4a30      	ldr	r2, [pc, #192]	@ (801aae8 <UTIL_SEQ_Run+0x1f4>)
 801aa26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801aa2a:	4798      	blx	r3

    local_taskset = TaskSet;
 801aa2c:	4b28      	ldr	r3, [pc, #160]	@ (801aad0 <UTIL_SEQ_Run+0x1dc>)
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801aa32:	4b28      	ldr	r3, [pc, #160]	@ (801aad4 <UTIL_SEQ_Run+0x1e0>)
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801aa38:	4b27      	ldr	r3, [pc, #156]	@ (801aad8 <UTIL_SEQ_Run+0x1e4>)
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801aa3e:	4b27      	ldr	r3, [pc, #156]	@ (801aadc <UTIL_SEQ_Run+0x1e8>)
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801aa44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801aa46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa48:	401a      	ands	r2, r3
 801aa4a:	4b20      	ldr	r3, [pc, #128]	@ (801aacc <UTIL_SEQ_Run+0x1d8>)
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	4013      	ands	r3, r2
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d005      	beq.n	801aa60 <UTIL_SEQ_Run+0x16c>
 801aa54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801aa56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aa58:	4013      	ands	r3, r2
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	f43f af64 	beq.w	801a928 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801aa60:	4b20      	ldr	r3, [pc, #128]	@ (801aae4 <UTIL_SEQ_Run+0x1f0>)
 801aa62:	f04f 32ff 	mov.w	r2, #4294967295
 801aa66:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801aa68:	f000 f88e 	bl	801ab88 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa6c:	f3ef 8310 	mrs	r3, PRIMASK
 801aa70:	613b      	str	r3, [r7, #16]
  return(result);
 801aa72:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801aa74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa76:	b672      	cpsid	i
}
 801aa78:	bf00      	nop
  local_taskset = TaskSet;
 801aa7a:	4b15      	ldr	r3, [pc, #84]	@ (801aad0 <UTIL_SEQ_Run+0x1dc>)
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801aa80:	4b14      	ldr	r3, [pc, #80]	@ (801aad4 <UTIL_SEQ_Run+0x1e0>)
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801aa86:	4b14      	ldr	r3, [pc, #80]	@ (801aad8 <UTIL_SEQ_Run+0x1e4>)
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801aa8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801aa8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa90:	401a      	ands	r2, r3
 801aa92:	4b0e      	ldr	r3, [pc, #56]	@ (801aacc <UTIL_SEQ_Run+0x1d8>)
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	4013      	ands	r3, r2
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d107      	bne.n	801aaac <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801aa9c:	4b0f      	ldr	r3, [pc, #60]	@ (801aadc <UTIL_SEQ_Run+0x1e8>)
 801aa9e:	681a      	ldr	r2, [r3, #0]
 801aaa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aaa2:	4013      	ands	r3, r2
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d101      	bne.n	801aaac <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801aaa8:	f7e7 fa38 	bl	8001f1c <UTIL_SEQ_Idle>
 801aaac:	69fb      	ldr	r3, [r7, #28]
 801aaae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	f383 8810 	msr	PRIMASK, r3
}
 801aab6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801aab8:	f000 f86c 	bl	801ab94 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801aabc:	4a03      	ldr	r2, [pc, #12]	@ (801aacc <UTIL_SEQ_Run+0x1d8>)
 801aabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aac0:	6013      	str	r3, [r2, #0]

  return;
 801aac2:	bf00      	nop
}
 801aac4:	3740      	adds	r7, #64	@ 0x40
 801aac6:	46bd      	mov	sp, r7
 801aac8:	bd80      	pop	{r7, pc}
 801aaca:	bf00      	nop
 801aacc:	20000134 	.word	0x20000134
 801aad0:	20001758 	.word	0x20001758
 801aad4:	2000175c 	.word	0x2000175c
 801aad8:	20000130 	.word	0x20000130
 801aadc:	20001760 	.word	0x20001760
 801aae0:	20001778 	.word	0x20001778
 801aae4:	20001764 	.word	0x20001764
 801aae8:	20001768 	.word	0x20001768

0801aaec <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801aaec:	b580      	push	{r7, lr}
 801aaee:	b088      	sub	sp, #32
 801aaf0:	af00      	add	r7, sp, #0
 801aaf2:	60f8      	str	r0, [r7, #12]
 801aaf4:	60b9      	str	r1, [r7, #8]
 801aaf6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aaf8:	f3ef 8310 	mrs	r3, PRIMASK
 801aafc:	617b      	str	r3, [r7, #20]
  return(result);
 801aafe:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801ab00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab02:	b672      	cpsid	i
}
 801ab04:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801ab06:	68f8      	ldr	r0, [r7, #12]
 801ab08:	f000 f84a 	bl	801aba0 <SEQ_BitPosition>
 801ab0c:	4603      	mov	r3, r0
 801ab0e:	4619      	mov	r1, r3
 801ab10:	4a06      	ldr	r2, [pc, #24]	@ (801ab2c <UTIL_SEQ_RegTask+0x40>)
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801ab18:	69fb      	ldr	r3, [r7, #28]
 801ab1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab1c:	69bb      	ldr	r3, [r7, #24]
 801ab1e:	f383 8810 	msr	PRIMASK, r3
}
 801ab22:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801ab24:	bf00      	nop
}
 801ab26:	3720      	adds	r7, #32
 801ab28:	46bd      	mov	sp, r7
 801ab2a:	bd80      	pop	{r7, pc}
 801ab2c:	20001768 	.word	0x20001768

0801ab30 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801ab30:	b480      	push	{r7}
 801ab32:	b087      	sub	sp, #28
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	6078      	str	r0, [r7, #4]
 801ab38:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab3a:	f3ef 8310 	mrs	r3, PRIMASK
 801ab3e:	60fb      	str	r3, [r7, #12]
  return(result);
 801ab40:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ab42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab44:	b672      	cpsid	i
}
 801ab46:	bf00      	nop

  TaskSet |= TaskId_bm;
 801ab48:	4b0d      	ldr	r3, [pc, #52]	@ (801ab80 <UTIL_SEQ_SetTask+0x50>)
 801ab4a:	681a      	ldr	r2, [r3, #0]
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	4313      	orrs	r3, r2
 801ab50:	4a0b      	ldr	r2, [pc, #44]	@ (801ab80 <UTIL_SEQ_SetTask+0x50>)
 801ab52:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801ab54:	4a0b      	ldr	r2, [pc, #44]	@ (801ab84 <UTIL_SEQ_SetTask+0x54>)
 801ab56:	683b      	ldr	r3, [r7, #0]
 801ab58:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	431a      	orrs	r2, r3
 801ab60:	4908      	ldr	r1, [pc, #32]	@ (801ab84 <UTIL_SEQ_SetTask+0x54>)
 801ab62:	683b      	ldr	r3, [r7, #0]
 801ab64:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801ab68:	697b      	ldr	r3, [r7, #20]
 801ab6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab6c:	693b      	ldr	r3, [r7, #16]
 801ab6e:	f383 8810 	msr	PRIMASK, r3
}
 801ab72:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801ab74:	bf00      	nop
}
 801ab76:	371c      	adds	r7, #28
 801ab78:	46bd      	mov	sp, r7
 801ab7a:	bc80      	pop	{r7}
 801ab7c:	4770      	bx	lr
 801ab7e:	bf00      	nop
 801ab80:	20001758 	.word	0x20001758
 801ab84:	20001778 	.word	0x20001778

0801ab88 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801ab88:	b480      	push	{r7}
 801ab8a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ab8c:	bf00      	nop
}
 801ab8e:	46bd      	mov	sp, r7
 801ab90:	bc80      	pop	{r7}
 801ab92:	4770      	bx	lr

0801ab94 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801ab94:	b480      	push	{r7}
 801ab96:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ab98:	bf00      	nop
}
 801ab9a:	46bd      	mov	sp, r7
 801ab9c:	bc80      	pop	{r7}
 801ab9e:	4770      	bx	lr

0801aba0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801aba0:	b480      	push	{r7}
 801aba2:	b085      	sub	sp, #20
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801aba8:	2300      	movs	r3, #0
 801abaa:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801abb0:	68bb      	ldr	r3, [r7, #8]
 801abb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801abb6:	d204      	bcs.n	801abc2 <SEQ_BitPosition+0x22>
 801abb8:	2310      	movs	r3, #16
 801abba:	73fb      	strb	r3, [r7, #15]
 801abbc:	68bb      	ldr	r3, [r7, #8]
 801abbe:	041b      	lsls	r3, r3, #16
 801abc0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801abc2:	68bb      	ldr	r3, [r7, #8]
 801abc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801abc8:	d205      	bcs.n	801abd6 <SEQ_BitPosition+0x36>
 801abca:	7bfb      	ldrb	r3, [r7, #15]
 801abcc:	3308      	adds	r3, #8
 801abce:	73fb      	strb	r3, [r7, #15]
 801abd0:	68bb      	ldr	r3, [r7, #8]
 801abd2:	021b      	lsls	r3, r3, #8
 801abd4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801abd6:	68bb      	ldr	r3, [r7, #8]
 801abd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801abdc:	d205      	bcs.n	801abea <SEQ_BitPosition+0x4a>
 801abde:	7bfb      	ldrb	r3, [r7, #15]
 801abe0:	3304      	adds	r3, #4
 801abe2:	73fb      	strb	r3, [r7, #15]
 801abe4:	68bb      	ldr	r3, [r7, #8]
 801abe6:	011b      	lsls	r3, r3, #4
 801abe8:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801abea:	68bb      	ldr	r3, [r7, #8]
 801abec:	0f1b      	lsrs	r3, r3, #28
 801abee:	4a07      	ldr	r2, [pc, #28]	@ (801ac0c <SEQ_BitPosition+0x6c>)
 801abf0:	5cd2      	ldrb	r2, [r2, r3]
 801abf2:	7bfb      	ldrb	r3, [r7, #15]
 801abf4:	4413      	add	r3, r2
 801abf6:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801abf8:	7bfb      	ldrb	r3, [r7, #15]
 801abfa:	f1c3 031f 	rsb	r3, r3, #31
 801abfe:	b2db      	uxtb	r3, r3
}
 801ac00:	4618      	mov	r0, r3
 801ac02:	3714      	adds	r7, #20
 801ac04:	46bd      	mov	sp, r7
 801ac06:	bc80      	pop	{r7}
 801ac08:	4770      	bx	lr
 801ac0a:	bf00      	nop
 801ac0c:	0801ec50 	.word	0x0801ec50

0801ac10 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801ac10:	b580      	push	{r7, lr}
 801ac12:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801ac14:	4b04      	ldr	r3, [pc, #16]	@ (801ac28 <UTIL_TIMER_Init+0x18>)
 801ac16:	2200      	movs	r2, #0
 801ac18:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801ac1a:	4b04      	ldr	r3, [pc, #16]	@ (801ac2c <UTIL_TIMER_Init+0x1c>)
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	4798      	blx	r3
 801ac20:	4603      	mov	r3, r0
}
 801ac22:	4618      	mov	r0, r3
 801ac24:	bd80      	pop	{r7, pc}
 801ac26:	bf00      	nop
 801ac28:	20001780 	.word	0x20001780
 801ac2c:	0801e6bc 	.word	0x0801e6bc

0801ac30 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801ac30:	b580      	push	{r7, lr}
 801ac32:	b084      	sub	sp, #16
 801ac34:	af00      	add	r7, sp, #0
 801ac36:	60f8      	str	r0, [r7, #12]
 801ac38:	60b9      	str	r1, [r7, #8]
 801ac3a:	603b      	str	r3, [r7, #0]
 801ac3c:	4613      	mov	r3, r2
 801ac3e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801ac40:	68fb      	ldr	r3, [r7, #12]
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d023      	beq.n	801ac8e <UTIL_TIMER_Create+0x5e>
 801ac46:	683b      	ldr	r3, [r7, #0]
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d020      	beq.n	801ac8e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801ac4c:	68fb      	ldr	r3, [r7, #12]
 801ac4e:	2200      	movs	r2, #0
 801ac50:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801ac52:	4b11      	ldr	r3, [pc, #68]	@ (801ac98 <UTIL_TIMER_Create+0x68>)
 801ac54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ac56:	68b8      	ldr	r0, [r7, #8]
 801ac58:	4798      	blx	r3
 801ac5a:	4602      	mov	r2, r0
 801ac5c:	68fb      	ldr	r3, [r7, #12]
 801ac5e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	2200      	movs	r2, #0
 801ac64:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801ac66:	68fb      	ldr	r3, [r7, #12]
 801ac68:	2200      	movs	r2, #0
 801ac6a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	2200      	movs	r2, #0
 801ac70:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801ac72:	68fb      	ldr	r3, [r7, #12]
 801ac74:	683a      	ldr	r2, [r7, #0]
 801ac76:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801ac78:	68fb      	ldr	r3, [r7, #12]
 801ac7a:	69ba      	ldr	r2, [r7, #24]
 801ac7c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801ac7e:	68fb      	ldr	r3, [r7, #12]
 801ac80:	79fa      	ldrb	r2, [r7, #7]
 801ac82:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	2200      	movs	r2, #0
 801ac88:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	e000      	b.n	801ac90 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801ac8e:	2301      	movs	r3, #1
  }
}
 801ac90:	4618      	mov	r0, r3
 801ac92:	3710      	adds	r7, #16
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd80      	pop	{r7, pc}
 801ac98:	0801e6bc 	.word	0x0801e6bc

0801ac9c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801ac9c:	b580      	push	{r7, lr}
 801ac9e:	b08a      	sub	sp, #40	@ 0x28
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801aca4:	2300      	movs	r3, #0
 801aca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	2b00      	cmp	r3, #0
 801acae:	d056      	beq.n	801ad5e <UTIL_TIMER_Start+0xc2>
 801acb0:	6878      	ldr	r0, [r7, #4]
 801acb2:	f000 f9a9 	bl	801b008 <TimerExists>
 801acb6:	4603      	mov	r3, r0
 801acb8:	f083 0301 	eor.w	r3, r3, #1
 801acbc:	b2db      	uxtb	r3, r3
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d04d      	beq.n	801ad5e <UTIL_TIMER_Start+0xc2>
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	7a5b      	ldrb	r3, [r3, #9]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d149      	bne.n	801ad5e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801acca:	f3ef 8310 	mrs	r3, PRIMASK
 801acce:	613b      	str	r3, [r7, #16]
  return(result);
 801acd0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801acd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801acd4:	b672      	cpsid	i
}
 801acd6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	685b      	ldr	r3, [r3, #4]
 801acdc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801acde:	4b24      	ldr	r3, [pc, #144]	@ (801ad70 <UTIL_TIMER_Start+0xd4>)
 801ace0:	6a1b      	ldr	r3, [r3, #32]
 801ace2:	4798      	blx	r3
 801ace4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801ace6:	6a3a      	ldr	r2, [r7, #32]
 801ace8:	69bb      	ldr	r3, [r7, #24]
 801acea:	429a      	cmp	r2, r3
 801acec:	d201      	bcs.n	801acf2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801acee:	69bb      	ldr	r3, [r7, #24]
 801acf0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	6a3a      	ldr	r2, [r7, #32]
 801acf6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	2200      	movs	r2, #0
 801acfc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	2201      	movs	r2, #1
 801ad02:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	2200      	movs	r2, #0
 801ad08:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801ad0a:	4b1a      	ldr	r3, [pc, #104]	@ (801ad74 <UTIL_TIMER_Start+0xd8>)
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d106      	bne.n	801ad20 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801ad12:	4b17      	ldr	r3, [pc, #92]	@ (801ad70 <UTIL_TIMER_Start+0xd4>)
 801ad14:	691b      	ldr	r3, [r3, #16]
 801ad16:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801ad18:	6878      	ldr	r0, [r7, #4]
 801ad1a:	f000 f9eb 	bl	801b0f4 <TimerInsertNewHeadTimer>
 801ad1e:	e017      	b.n	801ad50 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801ad20:	4b13      	ldr	r3, [pc, #76]	@ (801ad70 <UTIL_TIMER_Start+0xd4>)
 801ad22:	699b      	ldr	r3, [r3, #24]
 801ad24:	4798      	blx	r3
 801ad26:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	681a      	ldr	r2, [r3, #0]
 801ad2c:	697b      	ldr	r3, [r7, #20]
 801ad2e:	441a      	add	r2, r3
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	681a      	ldr	r2, [r3, #0]
 801ad38:	4b0e      	ldr	r3, [pc, #56]	@ (801ad74 <UTIL_TIMER_Start+0xd8>)
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	429a      	cmp	r2, r3
 801ad40:	d203      	bcs.n	801ad4a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801ad42:	6878      	ldr	r0, [r7, #4]
 801ad44:	f000 f9d6 	bl	801b0f4 <TimerInsertNewHeadTimer>
 801ad48:	e002      	b.n	801ad50 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801ad4a:	6878      	ldr	r0, [r7, #4]
 801ad4c:	f000 f9a2 	bl	801b094 <TimerInsertTimer>
 801ad50:	69fb      	ldr	r3, [r7, #28]
 801ad52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad54:	68fb      	ldr	r3, [r7, #12]
 801ad56:	f383 8810 	msr	PRIMASK, r3
}
 801ad5a:	bf00      	nop
  {
 801ad5c:	e002      	b.n	801ad64 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801ad5e:	2301      	movs	r3, #1
 801ad60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801ad64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801ad68:	4618      	mov	r0, r3
 801ad6a:	3728      	adds	r7, #40	@ 0x28
 801ad6c:	46bd      	mov	sp, r7
 801ad6e:	bd80      	pop	{r7, pc}
 801ad70:	0801e6bc 	.word	0x0801e6bc
 801ad74:	20001780 	.word	0x20001780

0801ad78 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801ad78:	b580      	push	{r7, lr}
 801ad7a:	b088      	sub	sp, #32
 801ad7c:	af00      	add	r7, sp, #0
 801ad7e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ad80:	2300      	movs	r3, #0
 801ad82:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d05b      	beq.n	801ae42 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad8a:	f3ef 8310 	mrs	r3, PRIMASK
 801ad8e:	60fb      	str	r3, [r7, #12]
  return(result);
 801ad90:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ad92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ad94:	b672      	cpsid	i
}
 801ad96:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801ad98:	4b2d      	ldr	r3, [pc, #180]	@ (801ae50 <UTIL_TIMER_Stop+0xd8>)
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801ad9e:	4b2c      	ldr	r3, [pc, #176]	@ (801ae50 <UTIL_TIMER_Stop+0xd8>)
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	2201      	movs	r2, #1
 801ada8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801adaa:	4b29      	ldr	r3, [pc, #164]	@ (801ae50 <UTIL_TIMER_Stop+0xd8>)
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d041      	beq.n	801ae36 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	2200      	movs	r2, #0
 801adb6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801adb8:	4b25      	ldr	r3, [pc, #148]	@ (801ae50 <UTIL_TIMER_Stop+0xd8>)
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	687a      	ldr	r2, [r7, #4]
 801adbe:	429a      	cmp	r2, r3
 801adc0:	d134      	bne.n	801ae2c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801adc2:	4b23      	ldr	r3, [pc, #140]	@ (801ae50 <UTIL_TIMER_Stop+0xd8>)
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	2200      	movs	r2, #0
 801adc8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801adca:	4b21      	ldr	r3, [pc, #132]	@ (801ae50 <UTIL_TIMER_Stop+0xd8>)
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	695b      	ldr	r3, [r3, #20]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d00a      	beq.n	801adea <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801add4:	4b1e      	ldr	r3, [pc, #120]	@ (801ae50 <UTIL_TIMER_Stop+0xd8>)
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	695b      	ldr	r3, [r3, #20]
 801adda:	4a1d      	ldr	r2, [pc, #116]	@ (801ae50 <UTIL_TIMER_Stop+0xd8>)
 801addc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801adde:	4b1c      	ldr	r3, [pc, #112]	@ (801ae50 <UTIL_TIMER_Stop+0xd8>)
 801ade0:	681b      	ldr	r3, [r3, #0]
 801ade2:	4618      	mov	r0, r3
 801ade4:	f000 f92c 	bl	801b040 <TimerSetTimeout>
 801ade8:	e023      	b.n	801ae32 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801adea:	4b1a      	ldr	r3, [pc, #104]	@ (801ae54 <UTIL_TIMER_Stop+0xdc>)
 801adec:	68db      	ldr	r3, [r3, #12]
 801adee:	4798      	blx	r3
            TimerListHead = NULL;
 801adf0:	4b17      	ldr	r3, [pc, #92]	@ (801ae50 <UTIL_TIMER_Stop+0xd8>)
 801adf2:	2200      	movs	r2, #0
 801adf4:	601a      	str	r2, [r3, #0]
 801adf6:	e01c      	b.n	801ae32 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801adf8:	697a      	ldr	r2, [r7, #20]
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	429a      	cmp	r2, r3
 801adfe:	d110      	bne.n	801ae22 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801ae00:	697b      	ldr	r3, [r7, #20]
 801ae02:	695b      	ldr	r3, [r3, #20]
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d006      	beq.n	801ae16 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801ae08:	697b      	ldr	r3, [r7, #20]
 801ae0a:	695b      	ldr	r3, [r3, #20]
 801ae0c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ae0e:	69bb      	ldr	r3, [r7, #24]
 801ae10:	697a      	ldr	r2, [r7, #20]
 801ae12:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801ae14:	e00d      	b.n	801ae32 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801ae16:	2300      	movs	r3, #0
 801ae18:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ae1a:	69bb      	ldr	r3, [r7, #24]
 801ae1c:	697a      	ldr	r2, [r7, #20]
 801ae1e:	615a      	str	r2, [r3, #20]
            break;
 801ae20:	e007      	b.n	801ae32 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801ae22:	697b      	ldr	r3, [r7, #20]
 801ae24:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801ae26:	697b      	ldr	r3, [r7, #20]
 801ae28:	695b      	ldr	r3, [r3, #20]
 801ae2a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801ae2c:	697b      	ldr	r3, [r7, #20]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d1e2      	bne.n	801adf8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801ae32:	2300      	movs	r3, #0
 801ae34:	77fb      	strb	r3, [r7, #31]
 801ae36:	693b      	ldr	r3, [r7, #16]
 801ae38:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae3a:	68bb      	ldr	r3, [r7, #8]
 801ae3c:	f383 8810 	msr	PRIMASK, r3
}
 801ae40:	e001      	b.n	801ae46 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801ae42:	2301      	movs	r3, #1
 801ae44:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801ae46:	7ffb      	ldrb	r3, [r7, #31]
}
 801ae48:	4618      	mov	r0, r3
 801ae4a:	3720      	adds	r7, #32
 801ae4c:	46bd      	mov	sp, r7
 801ae4e:	bd80      	pop	{r7, pc}
 801ae50:	20001780 	.word	0x20001780
 801ae54:	0801e6bc 	.word	0x0801e6bc

0801ae58 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801ae58:	b580      	push	{r7, lr}
 801ae5a:	b084      	sub	sp, #16
 801ae5c:	af00      	add	r7, sp, #0
 801ae5e:	6078      	str	r0, [r7, #4]
 801ae60:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ae62:	2300      	movs	r3, #0
 801ae64:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d102      	bne.n	801ae72 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801ae6c:	2301      	movs	r3, #1
 801ae6e:	73fb      	strb	r3, [r7, #15]
 801ae70:	e014      	b.n	801ae9c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801ae72:	4b0d      	ldr	r3, [pc, #52]	@ (801aea8 <UTIL_TIMER_SetPeriod+0x50>)
 801ae74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ae76:	6838      	ldr	r0, [r7, #0]
 801ae78:	4798      	blx	r3
 801ae7a:	4602      	mov	r2, r0
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801ae80:	6878      	ldr	r0, [r7, #4]
 801ae82:	f000 f8c1 	bl	801b008 <TimerExists>
 801ae86:	4603      	mov	r3, r0
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d007      	beq.n	801ae9c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801ae8c:	6878      	ldr	r0, [r7, #4]
 801ae8e:	f7ff ff73 	bl	801ad78 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801ae92:	6878      	ldr	r0, [r7, #4]
 801ae94:	f7ff ff02 	bl	801ac9c <UTIL_TIMER_Start>
 801ae98:	4603      	mov	r3, r0
 801ae9a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801ae9c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae9e:	4618      	mov	r0, r3
 801aea0:	3710      	adds	r7, #16
 801aea2:	46bd      	mov	sp, r7
 801aea4:	bd80      	pop	{r7, pc}
 801aea6:	bf00      	nop
 801aea8:	0801e6bc 	.word	0x0801e6bc

0801aeac <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801aeac:	b590      	push	{r4, r7, lr}
 801aeae:	b089      	sub	sp, #36	@ 0x24
 801aeb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aeb2:	f3ef 8310 	mrs	r3, PRIMASK
 801aeb6:	60bb      	str	r3, [r7, #8]
  return(result);
 801aeb8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801aeba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801aebc:	b672      	cpsid	i
}
 801aebe:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801aec0:	4b38      	ldr	r3, [pc, #224]	@ (801afa4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801aec2:	695b      	ldr	r3, [r3, #20]
 801aec4:	4798      	blx	r3
 801aec6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801aec8:	4b36      	ldr	r3, [pc, #216]	@ (801afa4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801aeca:	691b      	ldr	r3, [r3, #16]
 801aecc:	4798      	blx	r3
 801aece:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801aed0:	693a      	ldr	r2, [r7, #16]
 801aed2:	697b      	ldr	r3, [r7, #20]
 801aed4:	1ad3      	subs	r3, r2, r3
 801aed6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801aed8:	4b33      	ldr	r3, [pc, #204]	@ (801afa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	2b00      	cmp	r3, #0
 801aede:	d037      	beq.n	801af50 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801aee0:	4b31      	ldr	r3, [pc, #196]	@ (801afa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801aee6:	69fb      	ldr	r3, [r7, #28]
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	68fa      	ldr	r2, [r7, #12]
 801aeec:	429a      	cmp	r2, r3
 801aeee:	d206      	bcs.n	801aefe <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801aef0:	69fb      	ldr	r3, [r7, #28]
 801aef2:	681a      	ldr	r2, [r3, #0]
 801aef4:	68fb      	ldr	r3, [r7, #12]
 801aef6:	1ad2      	subs	r2, r2, r3
 801aef8:	69fb      	ldr	r3, [r7, #28]
 801aefa:	601a      	str	r2, [r3, #0]
 801aefc:	e002      	b.n	801af04 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801aefe:	69fb      	ldr	r3, [r7, #28]
 801af00:	2200      	movs	r2, #0
 801af02:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801af04:	69fb      	ldr	r3, [r7, #28]
 801af06:	695b      	ldr	r3, [r3, #20]
 801af08:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801af0a:	69fb      	ldr	r3, [r7, #28]
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d1ea      	bne.n	801aee6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801af10:	e01e      	b.n	801af50 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801af12:	4b25      	ldr	r3, [pc, #148]	@ (801afa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801af18:	4b23      	ldr	r3, [pc, #140]	@ (801afa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	695b      	ldr	r3, [r3, #20]
 801af1e:	4a22      	ldr	r2, [pc, #136]	@ (801afa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af20:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801af22:	69fb      	ldr	r3, [r7, #28]
 801af24:	2200      	movs	r2, #0
 801af26:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801af28:	69fb      	ldr	r3, [r7, #28]
 801af2a:	2200      	movs	r2, #0
 801af2c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801af2e:	69fb      	ldr	r3, [r7, #28]
 801af30:	68db      	ldr	r3, [r3, #12]
 801af32:	69fa      	ldr	r2, [r7, #28]
 801af34:	6912      	ldr	r2, [r2, #16]
 801af36:	4610      	mov	r0, r2
 801af38:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801af3a:	69fb      	ldr	r3, [r7, #28]
 801af3c:	7adb      	ldrb	r3, [r3, #11]
 801af3e:	2b01      	cmp	r3, #1
 801af40:	d106      	bne.n	801af50 <UTIL_TIMER_IRQ_Handler+0xa4>
 801af42:	69fb      	ldr	r3, [r7, #28]
 801af44:	7a9b      	ldrb	r3, [r3, #10]
 801af46:	2b00      	cmp	r3, #0
 801af48:	d102      	bne.n	801af50 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801af4a:	69f8      	ldr	r0, [r7, #28]
 801af4c:	f7ff fea6 	bl	801ac9c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801af50:	4b15      	ldr	r3, [pc, #84]	@ (801afa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	2b00      	cmp	r3, #0
 801af56:	d00d      	beq.n	801af74 <UTIL_TIMER_IRQ_Handler+0xc8>
 801af58:	4b13      	ldr	r3, [pc, #76]	@ (801afa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d0d7      	beq.n	801af12 <UTIL_TIMER_IRQ_Handler+0x66>
 801af62:	4b11      	ldr	r3, [pc, #68]	@ (801afa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	681c      	ldr	r4, [r3, #0]
 801af68:	4b0e      	ldr	r3, [pc, #56]	@ (801afa4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801af6a:	699b      	ldr	r3, [r3, #24]
 801af6c:	4798      	blx	r3
 801af6e:	4603      	mov	r3, r0
 801af70:	429c      	cmp	r4, r3
 801af72:	d3ce      	bcc.n	801af12 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801af74:	4b0c      	ldr	r3, [pc, #48]	@ (801afa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af76:	681b      	ldr	r3, [r3, #0]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d009      	beq.n	801af90 <UTIL_TIMER_IRQ_Handler+0xe4>
 801af7c:	4b0a      	ldr	r3, [pc, #40]	@ (801afa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	7a1b      	ldrb	r3, [r3, #8]
 801af82:	2b00      	cmp	r3, #0
 801af84:	d104      	bne.n	801af90 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801af86:	4b08      	ldr	r3, [pc, #32]	@ (801afa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	4618      	mov	r0, r3
 801af8c:	f000 f858 	bl	801b040 <TimerSetTimeout>
 801af90:	69bb      	ldr	r3, [r7, #24]
 801af92:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	f383 8810 	msr	PRIMASK, r3
}
 801af9a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801af9c:	bf00      	nop
 801af9e:	3724      	adds	r7, #36	@ 0x24
 801afa0:	46bd      	mov	sp, r7
 801afa2:	bd90      	pop	{r4, r7, pc}
 801afa4:	0801e6bc 	.word	0x0801e6bc
 801afa8:	20001780 	.word	0x20001780

0801afac <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801afac:	b580      	push	{r7, lr}
 801afae:	b082      	sub	sp, #8
 801afb0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801afb2:	4b06      	ldr	r3, [pc, #24]	@ (801afcc <UTIL_TIMER_GetCurrentTime+0x20>)
 801afb4:	69db      	ldr	r3, [r3, #28]
 801afb6:	4798      	blx	r3
 801afb8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801afba:	4b04      	ldr	r3, [pc, #16]	@ (801afcc <UTIL_TIMER_GetCurrentTime+0x20>)
 801afbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801afbe:	6878      	ldr	r0, [r7, #4]
 801afc0:	4798      	blx	r3
 801afc2:	4603      	mov	r3, r0
}
 801afc4:	4618      	mov	r0, r3
 801afc6:	3708      	adds	r7, #8
 801afc8:	46bd      	mov	sp, r7
 801afca:	bd80      	pop	{r7, pc}
 801afcc:	0801e6bc 	.word	0x0801e6bc

0801afd0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	b084      	sub	sp, #16
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801afd8:	4b0a      	ldr	r3, [pc, #40]	@ (801b004 <UTIL_TIMER_GetElapsedTime+0x34>)
 801afda:	69db      	ldr	r3, [r3, #28]
 801afdc:	4798      	blx	r3
 801afde:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801afe0:	4b08      	ldr	r3, [pc, #32]	@ (801b004 <UTIL_TIMER_GetElapsedTime+0x34>)
 801afe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801afe4:	6878      	ldr	r0, [r7, #4]
 801afe6:	4798      	blx	r3
 801afe8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801afea:	4b06      	ldr	r3, [pc, #24]	@ (801b004 <UTIL_TIMER_GetElapsedTime+0x34>)
 801afec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801afee:	68f9      	ldr	r1, [r7, #12]
 801aff0:	68ba      	ldr	r2, [r7, #8]
 801aff2:	1a8a      	subs	r2, r1, r2
 801aff4:	4610      	mov	r0, r2
 801aff6:	4798      	blx	r3
 801aff8:	4603      	mov	r3, r0
}
 801affa:	4618      	mov	r0, r3
 801affc:	3710      	adds	r7, #16
 801affe:	46bd      	mov	sp, r7
 801b000:	bd80      	pop	{r7, pc}
 801b002:	bf00      	nop
 801b004:	0801e6bc 	.word	0x0801e6bc

0801b008 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801b008:	b480      	push	{r7}
 801b00a:	b085      	sub	sp, #20
 801b00c:	af00      	add	r7, sp, #0
 801b00e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b010:	4b0a      	ldr	r3, [pc, #40]	@ (801b03c <TimerExists+0x34>)
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801b016:	e008      	b.n	801b02a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801b018:	68fa      	ldr	r2, [r7, #12]
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	429a      	cmp	r2, r3
 801b01e:	d101      	bne.n	801b024 <TimerExists+0x1c>
    {
      return true;
 801b020:	2301      	movs	r3, #1
 801b022:	e006      	b.n	801b032 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801b024:	68fb      	ldr	r3, [r7, #12]
 801b026:	695b      	ldr	r3, [r3, #20]
 801b028:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d1f3      	bne.n	801b018 <TimerExists+0x10>
  }
  return false;
 801b030:	2300      	movs	r3, #0
}
 801b032:	4618      	mov	r0, r3
 801b034:	3714      	adds	r7, #20
 801b036:	46bd      	mov	sp, r7
 801b038:	bc80      	pop	{r7}
 801b03a:	4770      	bx	lr
 801b03c:	20001780 	.word	0x20001780

0801b040 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801b040:	b590      	push	{r4, r7, lr}
 801b042:	b085      	sub	sp, #20
 801b044:	af00      	add	r7, sp, #0
 801b046:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801b048:	4b11      	ldr	r3, [pc, #68]	@ (801b090 <TimerSetTimeout+0x50>)
 801b04a:	6a1b      	ldr	r3, [r3, #32]
 801b04c:	4798      	blx	r3
 801b04e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	2201      	movs	r2, #1
 801b054:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	681c      	ldr	r4, [r3, #0]
 801b05a:	4b0d      	ldr	r3, [pc, #52]	@ (801b090 <TimerSetTimeout+0x50>)
 801b05c:	699b      	ldr	r3, [r3, #24]
 801b05e:	4798      	blx	r3
 801b060:	4602      	mov	r2, r0
 801b062:	68fb      	ldr	r3, [r7, #12]
 801b064:	4413      	add	r3, r2
 801b066:	429c      	cmp	r4, r3
 801b068:	d207      	bcs.n	801b07a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801b06a:	4b09      	ldr	r3, [pc, #36]	@ (801b090 <TimerSetTimeout+0x50>)
 801b06c:	699b      	ldr	r3, [r3, #24]
 801b06e:	4798      	blx	r3
 801b070:	4602      	mov	r2, r0
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	441a      	add	r2, r3
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801b07a:	4b05      	ldr	r3, [pc, #20]	@ (801b090 <TimerSetTimeout+0x50>)
 801b07c:	689b      	ldr	r3, [r3, #8]
 801b07e:	687a      	ldr	r2, [r7, #4]
 801b080:	6812      	ldr	r2, [r2, #0]
 801b082:	4610      	mov	r0, r2
 801b084:	4798      	blx	r3
}
 801b086:	bf00      	nop
 801b088:	3714      	adds	r7, #20
 801b08a:	46bd      	mov	sp, r7
 801b08c:	bd90      	pop	{r4, r7, pc}
 801b08e:	bf00      	nop
 801b090:	0801e6bc 	.word	0x0801e6bc

0801b094 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801b094:	b480      	push	{r7}
 801b096:	b085      	sub	sp, #20
 801b098:	af00      	add	r7, sp, #0
 801b09a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b09c:	4b14      	ldr	r3, [pc, #80]	@ (801b0f0 <TimerInsertTimer+0x5c>)
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801b0a2:	4b13      	ldr	r3, [pc, #76]	@ (801b0f0 <TimerInsertTimer+0x5c>)
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	695b      	ldr	r3, [r3, #20]
 801b0a8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b0aa:	e012      	b.n	801b0d2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	681a      	ldr	r2, [r3, #0]
 801b0b0:	68bb      	ldr	r3, [r7, #8]
 801b0b2:	681b      	ldr	r3, [r3, #0]
 801b0b4:	429a      	cmp	r2, r3
 801b0b6:	d905      	bls.n	801b0c4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801b0b8:	68bb      	ldr	r3, [r7, #8]
 801b0ba:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b0bc:	68bb      	ldr	r3, [r7, #8]
 801b0be:	695b      	ldr	r3, [r3, #20]
 801b0c0:	60bb      	str	r3, [r7, #8]
 801b0c2:	e006      	b.n	801b0d2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	687a      	ldr	r2, [r7, #4]
 801b0c8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	68ba      	ldr	r2, [r7, #8]
 801b0ce:	615a      	str	r2, [r3, #20]
        return;
 801b0d0:	e009      	b.n	801b0e6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	695b      	ldr	r3, [r3, #20]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d1e8      	bne.n	801b0ac <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801b0da:	68fb      	ldr	r3, [r7, #12]
 801b0dc:	687a      	ldr	r2, [r7, #4]
 801b0de:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	2200      	movs	r2, #0
 801b0e4:	615a      	str	r2, [r3, #20]
}
 801b0e6:	3714      	adds	r7, #20
 801b0e8:	46bd      	mov	sp, r7
 801b0ea:	bc80      	pop	{r7}
 801b0ec:	4770      	bx	lr
 801b0ee:	bf00      	nop
 801b0f0:	20001780 	.word	0x20001780

0801b0f4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801b0f4:	b580      	push	{r7, lr}
 801b0f6:	b084      	sub	sp, #16
 801b0f8:	af00      	add	r7, sp, #0
 801b0fa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b0fc:	4b0b      	ldr	r3, [pc, #44]	@ (801b12c <TimerInsertNewHeadTimer+0x38>)
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b102:	68fb      	ldr	r3, [r7, #12]
 801b104:	2b00      	cmp	r3, #0
 801b106:	d002      	beq.n	801b10e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	2200      	movs	r2, #0
 801b10c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	68fa      	ldr	r2, [r7, #12]
 801b112:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801b114:	4a05      	ldr	r2, [pc, #20]	@ (801b12c <TimerInsertNewHeadTimer+0x38>)
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801b11a:	4b04      	ldr	r3, [pc, #16]	@ (801b12c <TimerInsertNewHeadTimer+0x38>)
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	4618      	mov	r0, r3
 801b120:	f7ff ff8e 	bl	801b040 <TimerSetTimeout>
}
 801b124:	bf00      	nop
 801b126:	3710      	adds	r7, #16
 801b128:	46bd      	mov	sp, r7
 801b12a:	bd80      	pop	{r7, pc}
 801b12c:	20001780 	.word	0x20001780

0801b130 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b130:	b580      	push	{r7, lr}
 801b132:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b134:	2218      	movs	r2, #24
 801b136:	2100      	movs	r1, #0
 801b138:	4807      	ldr	r0, [pc, #28]	@ (801b158 <UTIL_ADV_TRACE_Init+0x28>)
 801b13a:	f7fe fffc 	bl	801a136 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b13e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b142:	2100      	movs	r1, #0
 801b144:	4805      	ldr	r0, [pc, #20]	@ (801b15c <UTIL_ADV_TRACE_Init+0x2c>)
 801b146:	f7fe fff6 	bl	801a136 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b14a:	4b05      	ldr	r3, [pc, #20]	@ (801b160 <UTIL_ADV_TRACE_Init+0x30>)
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	4805      	ldr	r0, [pc, #20]	@ (801b164 <UTIL_ADV_TRACE_Init+0x34>)
 801b150:	4798      	blx	r3
 801b152:	4603      	mov	r3, r0
}
 801b154:	4618      	mov	r0, r3
 801b156:	bd80      	pop	{r7, pc}
 801b158:	20001784 	.word	0x20001784
 801b15c:	2000179c 	.word	0x2000179c
 801b160:	0801e6fc 	.word	0x0801e6fc
 801b164:	0801b3d1 	.word	0x0801b3d1

0801b168 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801b168:	b480      	push	{r7}
 801b16a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b16c:	4b06      	ldr	r3, [pc, #24]	@ (801b188 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b16e:	8a5a      	ldrh	r2, [r3, #18]
 801b170:	4b05      	ldr	r3, [pc, #20]	@ (801b188 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b172:	8a1b      	ldrh	r3, [r3, #16]
 801b174:	429a      	cmp	r2, r3
 801b176:	d101      	bne.n	801b17c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801b178:	2301      	movs	r3, #1
 801b17a:	e000      	b.n	801b17e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801b17c:	2300      	movs	r3, #0
}
 801b17e:	4618      	mov	r0, r3
 801b180:	46bd      	mov	sp, r7
 801b182:	bc80      	pop	{r7}
 801b184:	4770      	bx	lr
 801b186:	bf00      	nop
 801b188:	20001784 	.word	0x20001784

0801b18c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b18c:	b408      	push	{r3}
 801b18e:	b580      	push	{r7, lr}
 801b190:	b08d      	sub	sp, #52	@ 0x34
 801b192:	af00      	add	r7, sp, #0
 801b194:	60f8      	str	r0, [r7, #12]
 801b196:	60b9      	str	r1, [r7, #8]
 801b198:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b19a:	2300      	movs	r3, #0
 801b19c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b19e:	2300      	movs	r3, #0
 801b1a0:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b1a2:	4b37      	ldr	r3, [pc, #220]	@ (801b280 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b1a4:	7a1b      	ldrb	r3, [r3, #8]
 801b1a6:	461a      	mov	r2, r3
 801b1a8:	68fb      	ldr	r3, [r7, #12]
 801b1aa:	4293      	cmp	r3, r2
 801b1ac:	d902      	bls.n	801b1b4 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b1ae:	f06f 0304 	mvn.w	r3, #4
 801b1b2:	e05e      	b.n	801b272 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b1b4:	4b32      	ldr	r3, [pc, #200]	@ (801b280 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b1b6:	68da      	ldr	r2, [r3, #12]
 801b1b8:	68bb      	ldr	r3, [r7, #8]
 801b1ba:	4013      	ands	r3, r2
 801b1bc:	68ba      	ldr	r2, [r7, #8]
 801b1be:	429a      	cmp	r2, r3
 801b1c0:	d002      	beq.n	801b1c8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b1c2:	f06f 0305 	mvn.w	r3, #5
 801b1c6:	e054      	b.n	801b272 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b1c8:	4b2d      	ldr	r3, [pc, #180]	@ (801b280 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b1ca:	685b      	ldr	r3, [r3, #4]
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d00a      	beq.n	801b1e6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d007      	beq.n	801b1e6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b1d6:	4b2a      	ldr	r3, [pc, #168]	@ (801b280 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b1d8:	685b      	ldr	r3, [r3, #4]
 801b1da:	f107 0116 	add.w	r1, r7, #22
 801b1de:	f107 0218 	add.w	r2, r7, #24
 801b1e2:	4610      	mov	r0, r2
 801b1e4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b1e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801b1ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b1ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b1f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b1f4:	4823      	ldr	r0, [pc, #140]	@ (801b284 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801b1f6:	f7ff fa2b 	bl	801a650 <tiny_vsnprintf_like>
 801b1fa:	4603      	mov	r3, r0
 801b1fc:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801b1fe:	f000 f9f1 	bl	801b5e4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b202:	8afa      	ldrh	r2, [r7, #22]
 801b204:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b206:	4413      	add	r3, r2
 801b208:	b29b      	uxth	r3, r3
 801b20a:	f107 0214 	add.w	r2, r7, #20
 801b20e:	4611      	mov	r1, r2
 801b210:	4618      	mov	r0, r3
 801b212:	f000 f969 	bl	801b4e8 <TRACE_AllocateBufer>
 801b216:	4603      	mov	r3, r0
 801b218:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b21c:	d025      	beq.n	801b26a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b21e:	2300      	movs	r3, #0
 801b220:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b222:	e00e      	b.n	801b242 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b224:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b226:	8aba      	ldrh	r2, [r7, #20]
 801b228:	3330      	adds	r3, #48	@ 0x30
 801b22a:	443b      	add	r3, r7
 801b22c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801b230:	4b15      	ldr	r3, [pc, #84]	@ (801b288 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b232:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801b234:	8abb      	ldrh	r3, [r7, #20]
 801b236:	3301      	adds	r3, #1
 801b238:	b29b      	uxth	r3, r3
 801b23a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b23c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b23e:	3301      	adds	r3, #1
 801b240:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b242:	8afb      	ldrh	r3, [r7, #22]
 801b244:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b246:	429a      	cmp	r2, r3
 801b248:	d3ec      	bcc.n	801b224 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b24a:	8abb      	ldrh	r3, [r7, #20]
 801b24c:	461a      	mov	r2, r3
 801b24e:	4b0e      	ldr	r3, [pc, #56]	@ (801b288 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b250:	18d0      	adds	r0, r2, r3
 801b252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b254:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b256:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b25a:	f7ff f9f9 	bl	801a650 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b25e:	f000 f9df 	bl	801b620 <TRACE_UnLock>

    return TRACE_Send();
 801b262:	f000 f831 	bl	801b2c8 <TRACE_Send>
 801b266:	4603      	mov	r3, r0
 801b268:	e003      	b.n	801b272 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b26a:	f000 f9d9 	bl	801b620 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b26e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b272:	4618      	mov	r0, r3
 801b274:	3734      	adds	r7, #52	@ 0x34
 801b276:	46bd      	mov	sp, r7
 801b278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b27c:	b001      	add	sp, #4
 801b27e:	4770      	bx	lr
 801b280:	20001784 	.word	0x20001784
 801b284:	20001b9c 	.word	0x20001b9c
 801b288:	2000179c 	.word	0x2000179c

0801b28c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801b28c:	b480      	push	{r7}
 801b28e:	b083      	sub	sp, #12
 801b290:	af00      	add	r7, sp, #0
 801b292:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801b294:	4a03      	ldr	r2, [pc, #12]	@ (801b2a4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	6053      	str	r3, [r2, #4]
}
 801b29a:	bf00      	nop
 801b29c:	370c      	adds	r7, #12
 801b29e:	46bd      	mov	sp, r7
 801b2a0:	bc80      	pop	{r7}
 801b2a2:	4770      	bx	lr
 801b2a4:	20001784 	.word	0x20001784

0801b2a8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b2a8:	b480      	push	{r7}
 801b2aa:	b083      	sub	sp, #12
 801b2ac:	af00      	add	r7, sp, #0
 801b2ae:	4603      	mov	r3, r0
 801b2b0:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b2b2:	4a04      	ldr	r2, [pc, #16]	@ (801b2c4 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b2b4:	79fb      	ldrb	r3, [r7, #7]
 801b2b6:	7213      	strb	r3, [r2, #8]
}
 801b2b8:	bf00      	nop
 801b2ba:	370c      	adds	r7, #12
 801b2bc:	46bd      	mov	sp, r7
 801b2be:	bc80      	pop	{r7}
 801b2c0:	4770      	bx	lr
 801b2c2:	bf00      	nop
 801b2c4:	20001784 	.word	0x20001784

0801b2c8 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b2c8:	b580      	push	{r7, lr}
 801b2ca:	b088      	sub	sp, #32
 801b2cc:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801b2d2:	2300      	movs	r3, #0
 801b2d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b2d6:	f3ef 8310 	mrs	r3, PRIMASK
 801b2da:	613b      	str	r3, [r7, #16]
  return(result);
 801b2dc:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b2de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b2e0:	b672      	cpsid	i
}
 801b2e2:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801b2e4:	f000 f9ba 	bl	801b65c <TRACE_IsLocked>
 801b2e8:	4603      	mov	r3, r0
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	d15d      	bne.n	801b3aa <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801b2ee:	f000 f979 	bl	801b5e4 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b2f2:	4b34      	ldr	r3, [pc, #208]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b2f4:	8a1a      	ldrh	r2, [r3, #16]
 801b2f6:	4b33      	ldr	r3, [pc, #204]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b2f8:	8a5b      	ldrh	r3, [r3, #18]
 801b2fa:	429a      	cmp	r2, r3
 801b2fc:	d04d      	beq.n	801b39a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b2fe:	4b31      	ldr	r3, [pc, #196]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b300:	789b      	ldrb	r3, [r3, #2]
 801b302:	2b01      	cmp	r3, #1
 801b304:	d117      	bne.n	801b336 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b306:	4b2f      	ldr	r3, [pc, #188]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b308:	881a      	ldrh	r2, [r3, #0]
 801b30a:	4b2e      	ldr	r3, [pc, #184]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b30c:	8a1b      	ldrh	r3, [r3, #16]
 801b30e:	1ad3      	subs	r3, r2, r3
 801b310:	b29a      	uxth	r2, r3
 801b312:	4b2c      	ldr	r3, [pc, #176]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b314:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b316:	4b2b      	ldr	r3, [pc, #172]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b318:	2202      	movs	r2, #2
 801b31a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b31c:	4b29      	ldr	r3, [pc, #164]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b31e:	2200      	movs	r2, #0
 801b320:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b322:	4b28      	ldr	r3, [pc, #160]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b324:	8a9b      	ldrh	r3, [r3, #20]
 801b326:	2b00      	cmp	r3, #0
 801b328:	d105      	bne.n	801b336 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b32a:	4b26      	ldr	r3, [pc, #152]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b32c:	2200      	movs	r2, #0
 801b32e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b330:	4b24      	ldr	r3, [pc, #144]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b332:	2200      	movs	r2, #0
 801b334:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b336:	4b23      	ldr	r3, [pc, #140]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b338:	789b      	ldrb	r3, [r3, #2]
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d115      	bne.n	801b36a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b33e:	4b21      	ldr	r3, [pc, #132]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b340:	8a5a      	ldrh	r2, [r3, #18]
 801b342:	4b20      	ldr	r3, [pc, #128]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b344:	8a1b      	ldrh	r3, [r3, #16]
 801b346:	429a      	cmp	r2, r3
 801b348:	d908      	bls.n	801b35c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b34a:	4b1e      	ldr	r3, [pc, #120]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b34c:	8a5a      	ldrh	r2, [r3, #18]
 801b34e:	4b1d      	ldr	r3, [pc, #116]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b350:	8a1b      	ldrh	r3, [r3, #16]
 801b352:	1ad3      	subs	r3, r2, r3
 801b354:	b29a      	uxth	r2, r3
 801b356:	4b1b      	ldr	r3, [pc, #108]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b358:	829a      	strh	r2, [r3, #20]
 801b35a:	e006      	b.n	801b36a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b35c:	4b19      	ldr	r3, [pc, #100]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b35e:	8a1b      	ldrh	r3, [r3, #16]
 801b360:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b364:	b29a      	uxth	r2, r3
 801b366:	4b17      	ldr	r3, [pc, #92]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b368:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b36a:	4b16      	ldr	r3, [pc, #88]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b36c:	8a1b      	ldrh	r3, [r3, #16]
 801b36e:	461a      	mov	r2, r3
 801b370:	4b15      	ldr	r3, [pc, #84]	@ (801b3c8 <TRACE_Send+0x100>)
 801b372:	4413      	add	r3, r2
 801b374:	61bb      	str	r3, [r7, #24]
 801b376:	697b      	ldr	r3, [r7, #20]
 801b378:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b37a:	68fb      	ldr	r3, [r7, #12]
 801b37c:	f383 8810 	msr	PRIMASK, r3
}
 801b380:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801b382:	f7e6 fed1 	bl	8002128 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b386:	4b11      	ldr	r3, [pc, #68]	@ (801b3cc <TRACE_Send+0x104>)
 801b388:	68db      	ldr	r3, [r3, #12]
 801b38a:	4a0e      	ldr	r2, [pc, #56]	@ (801b3c4 <TRACE_Send+0xfc>)
 801b38c:	8a92      	ldrh	r2, [r2, #20]
 801b38e:	4611      	mov	r1, r2
 801b390:	69b8      	ldr	r0, [r7, #24]
 801b392:	4798      	blx	r3
 801b394:	4603      	mov	r3, r0
 801b396:	77fb      	strb	r3, [r7, #31]
 801b398:	e00d      	b.n	801b3b6 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801b39a:	f000 f941 	bl	801b620 <TRACE_UnLock>
 801b39e:	697b      	ldr	r3, [r7, #20]
 801b3a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3a2:	68bb      	ldr	r3, [r7, #8]
 801b3a4:	f383 8810 	msr	PRIMASK, r3
}
 801b3a8:	e005      	b.n	801b3b6 <TRACE_Send+0xee>
 801b3aa:	697b      	ldr	r3, [r7, #20]
 801b3ac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	f383 8810 	msr	PRIMASK, r3
}
 801b3b4:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801b3b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	3720      	adds	r7, #32
 801b3be:	46bd      	mov	sp, r7
 801b3c0:	bd80      	pop	{r7, pc}
 801b3c2:	bf00      	nop
 801b3c4:	20001784 	.word	0x20001784
 801b3c8:	2000179c 	.word	0x2000179c
 801b3cc:	0801e6fc 	.word	0x0801e6fc

0801b3d0 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801b3d0:	b580      	push	{r7, lr}
 801b3d2:	b088      	sub	sp, #32
 801b3d4:	af00      	add	r7, sp, #0
 801b3d6:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801b3d8:	2300      	movs	r3, #0
 801b3da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b3dc:	f3ef 8310 	mrs	r3, PRIMASK
 801b3e0:	617b      	str	r3, [r7, #20]
  return(result);
 801b3e2:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b3e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b3e6:	b672      	cpsid	i
}
 801b3e8:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801b3ea:	4b3c      	ldr	r3, [pc, #240]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b3ec:	789b      	ldrb	r3, [r3, #2]
 801b3ee:	2b02      	cmp	r3, #2
 801b3f0:	d106      	bne.n	801b400 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b3f2:	4b3a      	ldr	r3, [pc, #232]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b3f4:	2200      	movs	r2, #0
 801b3f6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b3f8:	4b38      	ldr	r3, [pc, #224]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b3fa:	2200      	movs	r2, #0
 801b3fc:	821a      	strh	r2, [r3, #16]
 801b3fe:	e00a      	b.n	801b416 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b400:	4b36      	ldr	r3, [pc, #216]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b402:	8a1a      	ldrh	r2, [r3, #16]
 801b404:	4b35      	ldr	r3, [pc, #212]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b406:	8a9b      	ldrh	r3, [r3, #20]
 801b408:	4413      	add	r3, r2
 801b40a:	b29b      	uxth	r3, r3
 801b40c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b410:	b29a      	uxth	r2, r3
 801b412:	4b32      	ldr	r3, [pc, #200]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b414:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801b416:	4b31      	ldr	r3, [pc, #196]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b418:	8a1a      	ldrh	r2, [r3, #16]
 801b41a:	4b30      	ldr	r3, [pc, #192]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b41c:	8a5b      	ldrh	r3, [r3, #18]
 801b41e:	429a      	cmp	r2, r3
 801b420:	d04d      	beq.n	801b4be <TRACE_TxCpltCallback+0xee>
 801b422:	4b2e      	ldr	r3, [pc, #184]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b424:	8adb      	ldrh	r3, [r3, #22]
 801b426:	2b01      	cmp	r3, #1
 801b428:	d149      	bne.n	801b4be <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b42a:	4b2c      	ldr	r3, [pc, #176]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b42c:	789b      	ldrb	r3, [r3, #2]
 801b42e:	2b01      	cmp	r3, #1
 801b430:	d117      	bne.n	801b462 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801b432:	4b2a      	ldr	r3, [pc, #168]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b434:	881a      	ldrh	r2, [r3, #0]
 801b436:	4b29      	ldr	r3, [pc, #164]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b438:	8a1b      	ldrh	r3, [r3, #16]
 801b43a:	1ad3      	subs	r3, r2, r3
 801b43c:	b29a      	uxth	r2, r3
 801b43e:	4b27      	ldr	r3, [pc, #156]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b440:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b442:	4b26      	ldr	r3, [pc, #152]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b444:	2202      	movs	r2, #2
 801b446:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b448:	4b24      	ldr	r3, [pc, #144]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b44a:	2200      	movs	r2, #0
 801b44c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b44e:	4b23      	ldr	r3, [pc, #140]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b450:	8a9b      	ldrh	r3, [r3, #20]
 801b452:	2b00      	cmp	r3, #0
 801b454:	d105      	bne.n	801b462 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b456:	4b21      	ldr	r3, [pc, #132]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b458:	2200      	movs	r2, #0
 801b45a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b45c:	4b1f      	ldr	r3, [pc, #124]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b45e:	2200      	movs	r2, #0
 801b460:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b462:	4b1e      	ldr	r3, [pc, #120]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b464:	789b      	ldrb	r3, [r3, #2]
 801b466:	2b00      	cmp	r3, #0
 801b468:	d115      	bne.n	801b496 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b46a:	4b1c      	ldr	r3, [pc, #112]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b46c:	8a5a      	ldrh	r2, [r3, #18]
 801b46e:	4b1b      	ldr	r3, [pc, #108]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b470:	8a1b      	ldrh	r3, [r3, #16]
 801b472:	429a      	cmp	r2, r3
 801b474:	d908      	bls.n	801b488 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b476:	4b19      	ldr	r3, [pc, #100]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b478:	8a5a      	ldrh	r2, [r3, #18]
 801b47a:	4b18      	ldr	r3, [pc, #96]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b47c:	8a1b      	ldrh	r3, [r3, #16]
 801b47e:	1ad3      	subs	r3, r2, r3
 801b480:	b29a      	uxth	r2, r3
 801b482:	4b16      	ldr	r3, [pc, #88]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b484:	829a      	strh	r2, [r3, #20]
 801b486:	e006      	b.n	801b496 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b488:	4b14      	ldr	r3, [pc, #80]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b48a:	8a1b      	ldrh	r3, [r3, #16]
 801b48c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b490:	b29a      	uxth	r2, r3
 801b492:	4b12      	ldr	r3, [pc, #72]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b494:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b496:	4b11      	ldr	r3, [pc, #68]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b498:	8a1b      	ldrh	r3, [r3, #16]
 801b49a:	461a      	mov	r2, r3
 801b49c:	4b10      	ldr	r3, [pc, #64]	@ (801b4e0 <TRACE_TxCpltCallback+0x110>)
 801b49e:	4413      	add	r3, r2
 801b4a0:	61fb      	str	r3, [r7, #28]
 801b4a2:	69bb      	ldr	r3, [r7, #24]
 801b4a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4a6:	693b      	ldr	r3, [r7, #16]
 801b4a8:	f383 8810 	msr	PRIMASK, r3
}
 801b4ac:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b4ae:	4b0d      	ldr	r3, [pc, #52]	@ (801b4e4 <TRACE_TxCpltCallback+0x114>)
 801b4b0:	68db      	ldr	r3, [r3, #12]
 801b4b2:	4a0a      	ldr	r2, [pc, #40]	@ (801b4dc <TRACE_TxCpltCallback+0x10c>)
 801b4b4:	8a92      	ldrh	r2, [r2, #20]
 801b4b6:	4611      	mov	r1, r2
 801b4b8:	69f8      	ldr	r0, [r7, #28]
 801b4ba:	4798      	blx	r3
 801b4bc:	e00a      	b.n	801b4d4 <TRACE_TxCpltCallback+0x104>
 801b4be:	69bb      	ldr	r3, [r7, #24]
 801b4c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4c2:	68fb      	ldr	r3, [r7, #12]
 801b4c4:	f383 8810 	msr	PRIMASK, r3
}
 801b4c8:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801b4ca:	f7e6 fe35 	bl	8002138 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801b4ce:	f000 f8a7 	bl	801b620 <TRACE_UnLock>
  }
}
 801b4d2:	bf00      	nop
 801b4d4:	bf00      	nop
 801b4d6:	3720      	adds	r7, #32
 801b4d8:	46bd      	mov	sp, r7
 801b4da:	bd80      	pop	{r7, pc}
 801b4dc:	20001784 	.word	0x20001784
 801b4e0:	2000179c 	.word	0x2000179c
 801b4e4:	0801e6fc 	.word	0x0801e6fc

0801b4e8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801b4e8:	b480      	push	{r7}
 801b4ea:	b087      	sub	sp, #28
 801b4ec:	af00      	add	r7, sp, #0
 801b4ee:	4603      	mov	r3, r0
 801b4f0:	6039      	str	r1, [r7, #0]
 801b4f2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801b4f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b4f8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b4fa:	f3ef 8310 	mrs	r3, PRIMASK
 801b4fe:	60fb      	str	r3, [r7, #12]
  return(result);
 801b500:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b504:	b672      	cpsid	i
}
 801b506:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b508:	4b35      	ldr	r3, [pc, #212]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b50a:	8a5a      	ldrh	r2, [r3, #18]
 801b50c:	4b34      	ldr	r3, [pc, #208]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b50e:	8a1b      	ldrh	r3, [r3, #16]
 801b510:	429a      	cmp	r2, r3
 801b512:	d11b      	bne.n	801b54c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b514:	4b32      	ldr	r3, [pc, #200]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b516:	8a5b      	ldrh	r3, [r3, #18]
 801b518:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b51c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801b51e:	88fa      	ldrh	r2, [r7, #6]
 801b520:	8afb      	ldrh	r3, [r7, #22]
 801b522:	429a      	cmp	r2, r3
 801b524:	d33a      	bcc.n	801b59c <TRACE_AllocateBufer+0xb4>
 801b526:	4b2e      	ldr	r3, [pc, #184]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b528:	8a1b      	ldrh	r3, [r3, #16]
 801b52a:	88fa      	ldrh	r2, [r7, #6]
 801b52c:	429a      	cmp	r2, r3
 801b52e:	d235      	bcs.n	801b59c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b530:	4b2b      	ldr	r3, [pc, #172]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b532:	2201      	movs	r2, #1
 801b534:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b536:	4b2a      	ldr	r3, [pc, #168]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b538:	8a5a      	ldrh	r2, [r3, #18]
 801b53a:	4b29      	ldr	r3, [pc, #164]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b53c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b53e:	4b28      	ldr	r3, [pc, #160]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b540:	8a1b      	ldrh	r3, [r3, #16]
 801b542:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b544:	4b26      	ldr	r3, [pc, #152]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b546:	2200      	movs	r2, #0
 801b548:	825a      	strh	r2, [r3, #18]
 801b54a:	e027      	b.n	801b59c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b54c:	4b24      	ldr	r3, [pc, #144]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b54e:	8a5a      	ldrh	r2, [r3, #18]
 801b550:	4b23      	ldr	r3, [pc, #140]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b552:	8a1b      	ldrh	r3, [r3, #16]
 801b554:	429a      	cmp	r2, r3
 801b556:	d91b      	bls.n	801b590 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b558:	4b21      	ldr	r3, [pc, #132]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b55a:	8a5b      	ldrh	r3, [r3, #18]
 801b55c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b560:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801b562:	88fa      	ldrh	r2, [r7, #6]
 801b564:	8afb      	ldrh	r3, [r7, #22]
 801b566:	429a      	cmp	r2, r3
 801b568:	d318      	bcc.n	801b59c <TRACE_AllocateBufer+0xb4>
 801b56a:	4b1d      	ldr	r3, [pc, #116]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b56c:	8a1b      	ldrh	r3, [r3, #16]
 801b56e:	88fa      	ldrh	r2, [r7, #6]
 801b570:	429a      	cmp	r2, r3
 801b572:	d213      	bcs.n	801b59c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b574:	4b1a      	ldr	r3, [pc, #104]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b576:	2201      	movs	r2, #1
 801b578:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b57a:	4b19      	ldr	r3, [pc, #100]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b57c:	8a5a      	ldrh	r2, [r3, #18]
 801b57e:	4b18      	ldr	r3, [pc, #96]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b580:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b582:	4b17      	ldr	r3, [pc, #92]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b584:	8a1b      	ldrh	r3, [r3, #16]
 801b586:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b588:	4b15      	ldr	r3, [pc, #84]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b58a:	2200      	movs	r2, #0
 801b58c:	825a      	strh	r2, [r3, #18]
 801b58e:	e005      	b.n	801b59c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801b590:	4b13      	ldr	r3, [pc, #76]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b592:	8a1a      	ldrh	r2, [r3, #16]
 801b594:	4b12      	ldr	r3, [pc, #72]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b596:	8a5b      	ldrh	r3, [r3, #18]
 801b598:	1ad3      	subs	r3, r2, r3
 801b59a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801b59c:	8afa      	ldrh	r2, [r7, #22]
 801b59e:	88fb      	ldrh	r3, [r7, #6]
 801b5a0:	429a      	cmp	r2, r3
 801b5a2:	d90f      	bls.n	801b5c4 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801b5a4:	4b0e      	ldr	r3, [pc, #56]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b5a6:	8a5a      	ldrh	r2, [r3, #18]
 801b5a8:	683b      	ldr	r3, [r7, #0]
 801b5aa:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b5ac:	4b0c      	ldr	r3, [pc, #48]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b5ae:	8a5a      	ldrh	r2, [r3, #18]
 801b5b0:	88fb      	ldrh	r3, [r7, #6]
 801b5b2:	4413      	add	r3, r2
 801b5b4:	b29b      	uxth	r3, r3
 801b5b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b5ba:	b29a      	uxth	r2, r3
 801b5bc:	4b08      	ldr	r3, [pc, #32]	@ (801b5e0 <TRACE_AllocateBufer+0xf8>)
 801b5be:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	82bb      	strh	r3, [r7, #20]
 801b5c4:	693b      	ldr	r3, [r7, #16]
 801b5c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5c8:	68bb      	ldr	r3, [r7, #8]
 801b5ca:	f383 8810 	msr	PRIMASK, r3
}
 801b5ce:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801b5d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801b5d4:	4618      	mov	r0, r3
 801b5d6:	371c      	adds	r7, #28
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	bc80      	pop	{r7}
 801b5dc:	4770      	bx	lr
 801b5de:	bf00      	nop
 801b5e0:	20001784 	.word	0x20001784

0801b5e4 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801b5e4:	b480      	push	{r7}
 801b5e6:	b085      	sub	sp, #20
 801b5e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b5ea:	f3ef 8310 	mrs	r3, PRIMASK
 801b5ee:	607b      	str	r3, [r7, #4]
  return(result);
 801b5f0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b5f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b5f4:	b672      	cpsid	i
}
 801b5f6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801b5f8:	4b08      	ldr	r3, [pc, #32]	@ (801b61c <TRACE_Lock+0x38>)
 801b5fa:	8adb      	ldrh	r3, [r3, #22]
 801b5fc:	3301      	adds	r3, #1
 801b5fe:	b29a      	uxth	r2, r3
 801b600:	4b06      	ldr	r3, [pc, #24]	@ (801b61c <TRACE_Lock+0x38>)
 801b602:	82da      	strh	r2, [r3, #22]
 801b604:	68fb      	ldr	r3, [r7, #12]
 801b606:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b608:	68bb      	ldr	r3, [r7, #8]
 801b60a:	f383 8810 	msr	PRIMASK, r3
}
 801b60e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b610:	bf00      	nop
 801b612:	3714      	adds	r7, #20
 801b614:	46bd      	mov	sp, r7
 801b616:	bc80      	pop	{r7}
 801b618:	4770      	bx	lr
 801b61a:	bf00      	nop
 801b61c:	20001784 	.word	0x20001784

0801b620 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801b620:	b480      	push	{r7}
 801b622:	b085      	sub	sp, #20
 801b624:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b626:	f3ef 8310 	mrs	r3, PRIMASK
 801b62a:	607b      	str	r3, [r7, #4]
  return(result);
 801b62c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b62e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b630:	b672      	cpsid	i
}
 801b632:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801b634:	4b08      	ldr	r3, [pc, #32]	@ (801b658 <TRACE_UnLock+0x38>)
 801b636:	8adb      	ldrh	r3, [r3, #22]
 801b638:	3b01      	subs	r3, #1
 801b63a:	b29a      	uxth	r2, r3
 801b63c:	4b06      	ldr	r3, [pc, #24]	@ (801b658 <TRACE_UnLock+0x38>)
 801b63e:	82da      	strh	r2, [r3, #22]
 801b640:	68fb      	ldr	r3, [r7, #12]
 801b642:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b644:	68bb      	ldr	r3, [r7, #8]
 801b646:	f383 8810 	msr	PRIMASK, r3
}
 801b64a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b64c:	bf00      	nop
 801b64e:	3714      	adds	r7, #20
 801b650:	46bd      	mov	sp, r7
 801b652:	bc80      	pop	{r7}
 801b654:	4770      	bx	lr
 801b656:	bf00      	nop
 801b658:	20001784 	.word	0x20001784

0801b65c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801b65c:	b480      	push	{r7}
 801b65e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801b660:	4b05      	ldr	r3, [pc, #20]	@ (801b678 <TRACE_IsLocked+0x1c>)
 801b662:	8adb      	ldrh	r3, [r3, #22]
 801b664:	2b00      	cmp	r3, #0
 801b666:	bf14      	ite	ne
 801b668:	2301      	movne	r3, #1
 801b66a:	2300      	moveq	r3, #0
 801b66c:	b2db      	uxtb	r3, r3
}
 801b66e:	4618      	mov	r0, r3
 801b670:	46bd      	mov	sp, r7
 801b672:	bc80      	pop	{r7}
 801b674:	4770      	bx	lr
 801b676:	bf00      	nop
 801b678:	20001784 	.word	0x20001784

0801b67c <__cvt>:
 801b67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b680:	b088      	sub	sp, #32
 801b682:	2b00      	cmp	r3, #0
 801b684:	461d      	mov	r5, r3
 801b686:	4614      	mov	r4, r2
 801b688:	bfbc      	itt	lt
 801b68a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 801b68e:	4614      	movlt	r4, r2
 801b690:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b692:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801b694:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 801b698:	bfb6      	itet	lt
 801b69a:	461d      	movlt	r5, r3
 801b69c:	2300      	movge	r3, #0
 801b69e:	232d      	movlt	r3, #45	@ 0x2d
 801b6a0:	7013      	strb	r3, [r2, #0]
 801b6a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b6a4:	f023 0820 	bic.w	r8, r3, #32
 801b6a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801b6ac:	d005      	beq.n	801b6ba <__cvt+0x3e>
 801b6ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801b6b2:	d100      	bne.n	801b6b6 <__cvt+0x3a>
 801b6b4:	3601      	adds	r6, #1
 801b6b6:	2302      	movs	r3, #2
 801b6b8:	e000      	b.n	801b6bc <__cvt+0x40>
 801b6ba:	2303      	movs	r3, #3
 801b6bc:	aa07      	add	r2, sp, #28
 801b6be:	9204      	str	r2, [sp, #16]
 801b6c0:	aa06      	add	r2, sp, #24
 801b6c2:	e9cd a202 	strd	sl, r2, [sp, #8]
 801b6c6:	e9cd 3600 	strd	r3, r6, [sp]
 801b6ca:	4622      	mov	r2, r4
 801b6cc:	462b      	mov	r3, r5
 801b6ce:	f000 fe37 	bl	801c340 <_dtoa_r>
 801b6d2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801b6d6:	4607      	mov	r7, r0
 801b6d8:	d119      	bne.n	801b70e <__cvt+0x92>
 801b6da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b6dc:	07db      	lsls	r3, r3, #31
 801b6de:	d50e      	bpl.n	801b6fe <__cvt+0x82>
 801b6e0:	eb00 0906 	add.w	r9, r0, r6
 801b6e4:	2200      	movs	r2, #0
 801b6e6:	2300      	movs	r3, #0
 801b6e8:	4620      	mov	r0, r4
 801b6ea:	4629      	mov	r1, r5
 801b6ec:	f7e5 f9c4 	bl	8000a78 <__aeabi_dcmpeq>
 801b6f0:	b108      	cbz	r0, 801b6f6 <__cvt+0x7a>
 801b6f2:	f8cd 901c 	str.w	r9, [sp, #28]
 801b6f6:	2230      	movs	r2, #48	@ 0x30
 801b6f8:	9b07      	ldr	r3, [sp, #28]
 801b6fa:	454b      	cmp	r3, r9
 801b6fc:	d31e      	bcc.n	801b73c <__cvt+0xc0>
 801b6fe:	9b07      	ldr	r3, [sp, #28]
 801b700:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801b702:	1bdb      	subs	r3, r3, r7
 801b704:	4638      	mov	r0, r7
 801b706:	6013      	str	r3, [r2, #0]
 801b708:	b008      	add	sp, #32
 801b70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b70e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801b712:	eb00 0906 	add.w	r9, r0, r6
 801b716:	d1e5      	bne.n	801b6e4 <__cvt+0x68>
 801b718:	7803      	ldrb	r3, [r0, #0]
 801b71a:	2b30      	cmp	r3, #48	@ 0x30
 801b71c:	d10a      	bne.n	801b734 <__cvt+0xb8>
 801b71e:	2200      	movs	r2, #0
 801b720:	2300      	movs	r3, #0
 801b722:	4620      	mov	r0, r4
 801b724:	4629      	mov	r1, r5
 801b726:	f7e5 f9a7 	bl	8000a78 <__aeabi_dcmpeq>
 801b72a:	b918      	cbnz	r0, 801b734 <__cvt+0xb8>
 801b72c:	f1c6 0601 	rsb	r6, r6, #1
 801b730:	f8ca 6000 	str.w	r6, [sl]
 801b734:	f8da 3000 	ldr.w	r3, [sl]
 801b738:	4499      	add	r9, r3
 801b73a:	e7d3      	b.n	801b6e4 <__cvt+0x68>
 801b73c:	1c59      	adds	r1, r3, #1
 801b73e:	9107      	str	r1, [sp, #28]
 801b740:	701a      	strb	r2, [r3, #0]
 801b742:	e7d9      	b.n	801b6f8 <__cvt+0x7c>

0801b744 <__exponent>:
 801b744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b746:	2900      	cmp	r1, #0
 801b748:	bfba      	itte	lt
 801b74a:	4249      	neglt	r1, r1
 801b74c:	232d      	movlt	r3, #45	@ 0x2d
 801b74e:	232b      	movge	r3, #43	@ 0x2b
 801b750:	2909      	cmp	r1, #9
 801b752:	7002      	strb	r2, [r0, #0]
 801b754:	7043      	strb	r3, [r0, #1]
 801b756:	dd29      	ble.n	801b7ac <__exponent+0x68>
 801b758:	f10d 0307 	add.w	r3, sp, #7
 801b75c:	461d      	mov	r5, r3
 801b75e:	270a      	movs	r7, #10
 801b760:	461a      	mov	r2, r3
 801b762:	fbb1 f6f7 	udiv	r6, r1, r7
 801b766:	fb07 1416 	mls	r4, r7, r6, r1
 801b76a:	3430      	adds	r4, #48	@ 0x30
 801b76c:	f802 4c01 	strb.w	r4, [r2, #-1]
 801b770:	460c      	mov	r4, r1
 801b772:	2c63      	cmp	r4, #99	@ 0x63
 801b774:	f103 33ff 	add.w	r3, r3, #4294967295
 801b778:	4631      	mov	r1, r6
 801b77a:	dcf1      	bgt.n	801b760 <__exponent+0x1c>
 801b77c:	3130      	adds	r1, #48	@ 0x30
 801b77e:	1e94      	subs	r4, r2, #2
 801b780:	f803 1c01 	strb.w	r1, [r3, #-1]
 801b784:	1c41      	adds	r1, r0, #1
 801b786:	4623      	mov	r3, r4
 801b788:	42ab      	cmp	r3, r5
 801b78a:	d30a      	bcc.n	801b7a2 <__exponent+0x5e>
 801b78c:	f10d 0309 	add.w	r3, sp, #9
 801b790:	1a9b      	subs	r3, r3, r2
 801b792:	42ac      	cmp	r4, r5
 801b794:	bf88      	it	hi
 801b796:	2300      	movhi	r3, #0
 801b798:	3302      	adds	r3, #2
 801b79a:	4403      	add	r3, r0
 801b79c:	1a18      	subs	r0, r3, r0
 801b79e:	b003      	add	sp, #12
 801b7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7a2:	f813 6b01 	ldrb.w	r6, [r3], #1
 801b7a6:	f801 6f01 	strb.w	r6, [r1, #1]!
 801b7aa:	e7ed      	b.n	801b788 <__exponent+0x44>
 801b7ac:	2330      	movs	r3, #48	@ 0x30
 801b7ae:	3130      	adds	r1, #48	@ 0x30
 801b7b0:	7083      	strb	r3, [r0, #2]
 801b7b2:	70c1      	strb	r1, [r0, #3]
 801b7b4:	1d03      	adds	r3, r0, #4
 801b7b6:	e7f1      	b.n	801b79c <__exponent+0x58>

0801b7b8 <_printf_float>:
 801b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7bc:	b091      	sub	sp, #68	@ 0x44
 801b7be:	460c      	mov	r4, r1
 801b7c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 801b7c4:	4616      	mov	r6, r2
 801b7c6:	461f      	mov	r7, r3
 801b7c8:	4605      	mov	r5, r0
 801b7ca:	f000 fcbd 	bl	801c148 <_localeconv_r>
 801b7ce:	6803      	ldr	r3, [r0, #0]
 801b7d0:	9308      	str	r3, [sp, #32]
 801b7d2:	4618      	mov	r0, r3
 801b7d4:	f7e4 fd24 	bl	8000220 <strlen>
 801b7d8:	2300      	movs	r3, #0
 801b7da:	930e      	str	r3, [sp, #56]	@ 0x38
 801b7dc:	f8d8 3000 	ldr.w	r3, [r8]
 801b7e0:	9009      	str	r0, [sp, #36]	@ 0x24
 801b7e2:	3307      	adds	r3, #7
 801b7e4:	f023 0307 	bic.w	r3, r3, #7
 801b7e8:	f103 0208 	add.w	r2, r3, #8
 801b7ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 801b7f0:	f8d4 b000 	ldr.w	fp, [r4]
 801b7f4:	f8c8 2000 	str.w	r2, [r8]
 801b7f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b7fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801b800:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b802:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801b806:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801b80a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b80e:	4b9d      	ldr	r3, [pc, #628]	@ (801ba84 <_printf_float+0x2cc>)
 801b810:	f04f 32ff 	mov.w	r2, #4294967295
 801b814:	f7e5 f962 	bl	8000adc <__aeabi_dcmpun>
 801b818:	bb70      	cbnz	r0, 801b878 <_printf_float+0xc0>
 801b81a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b81e:	4b99      	ldr	r3, [pc, #612]	@ (801ba84 <_printf_float+0x2cc>)
 801b820:	f04f 32ff 	mov.w	r2, #4294967295
 801b824:	f7e5 f93c 	bl	8000aa0 <__aeabi_dcmple>
 801b828:	bb30      	cbnz	r0, 801b878 <_printf_float+0xc0>
 801b82a:	2200      	movs	r2, #0
 801b82c:	2300      	movs	r3, #0
 801b82e:	4640      	mov	r0, r8
 801b830:	4649      	mov	r1, r9
 801b832:	f7e5 f92b 	bl	8000a8c <__aeabi_dcmplt>
 801b836:	b110      	cbz	r0, 801b83e <_printf_float+0x86>
 801b838:	232d      	movs	r3, #45	@ 0x2d
 801b83a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b83e:	4a92      	ldr	r2, [pc, #584]	@ (801ba88 <_printf_float+0x2d0>)
 801b840:	4b92      	ldr	r3, [pc, #584]	@ (801ba8c <_printf_float+0x2d4>)
 801b842:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801b846:	bf94      	ite	ls
 801b848:	4690      	movls	r8, r2
 801b84a:	4698      	movhi	r8, r3
 801b84c:	2303      	movs	r3, #3
 801b84e:	6123      	str	r3, [r4, #16]
 801b850:	f02b 0304 	bic.w	r3, fp, #4
 801b854:	6023      	str	r3, [r4, #0]
 801b856:	f04f 0900 	mov.w	r9, #0
 801b85a:	9700      	str	r7, [sp, #0]
 801b85c:	4633      	mov	r3, r6
 801b85e:	aa0f      	add	r2, sp, #60	@ 0x3c
 801b860:	4621      	mov	r1, r4
 801b862:	4628      	mov	r0, r5
 801b864:	f000 f9d4 	bl	801bc10 <_printf_common>
 801b868:	3001      	adds	r0, #1
 801b86a:	f040 808f 	bne.w	801b98c <_printf_float+0x1d4>
 801b86e:	f04f 30ff 	mov.w	r0, #4294967295
 801b872:	b011      	add	sp, #68	@ 0x44
 801b874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b878:	4642      	mov	r2, r8
 801b87a:	464b      	mov	r3, r9
 801b87c:	4640      	mov	r0, r8
 801b87e:	4649      	mov	r1, r9
 801b880:	f7e5 f92c 	bl	8000adc <__aeabi_dcmpun>
 801b884:	b140      	cbz	r0, 801b898 <_printf_float+0xe0>
 801b886:	464b      	mov	r3, r9
 801b888:	2b00      	cmp	r3, #0
 801b88a:	bfbc      	itt	lt
 801b88c:	232d      	movlt	r3, #45	@ 0x2d
 801b88e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801b892:	4a7f      	ldr	r2, [pc, #508]	@ (801ba90 <_printf_float+0x2d8>)
 801b894:	4b7f      	ldr	r3, [pc, #508]	@ (801ba94 <_printf_float+0x2dc>)
 801b896:	e7d4      	b.n	801b842 <_printf_float+0x8a>
 801b898:	6863      	ldr	r3, [r4, #4]
 801b89a:	1c5a      	adds	r2, r3, #1
 801b89c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 801b8a0:	d13f      	bne.n	801b922 <_printf_float+0x16a>
 801b8a2:	2306      	movs	r3, #6
 801b8a4:	6063      	str	r3, [r4, #4]
 801b8a6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 801b8aa:	2200      	movs	r2, #0
 801b8ac:	6023      	str	r3, [r4, #0]
 801b8ae:	9206      	str	r2, [sp, #24]
 801b8b0:	aa0e      	add	r2, sp, #56	@ 0x38
 801b8b2:	e9cd a204 	strd	sl, r2, [sp, #16]
 801b8b6:	aa0d      	add	r2, sp, #52	@ 0x34
 801b8b8:	9203      	str	r2, [sp, #12]
 801b8ba:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 801b8be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801b8c2:	6863      	ldr	r3, [r4, #4]
 801b8c4:	9300      	str	r3, [sp, #0]
 801b8c6:	4642      	mov	r2, r8
 801b8c8:	464b      	mov	r3, r9
 801b8ca:	4628      	mov	r0, r5
 801b8cc:	910a      	str	r1, [sp, #40]	@ 0x28
 801b8ce:	f7ff fed5 	bl	801b67c <__cvt>
 801b8d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b8d4:	2947      	cmp	r1, #71	@ 0x47
 801b8d6:	4680      	mov	r8, r0
 801b8d8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801b8da:	d128      	bne.n	801b92e <_printf_float+0x176>
 801b8dc:	1cc8      	adds	r0, r1, #3
 801b8de:	db02      	blt.n	801b8e6 <_printf_float+0x12e>
 801b8e0:	6863      	ldr	r3, [r4, #4]
 801b8e2:	4299      	cmp	r1, r3
 801b8e4:	dd40      	ble.n	801b968 <_printf_float+0x1b0>
 801b8e6:	f1aa 0a02 	sub.w	sl, sl, #2
 801b8ea:	fa5f fa8a 	uxtb.w	sl, sl
 801b8ee:	3901      	subs	r1, #1
 801b8f0:	4652      	mov	r2, sl
 801b8f2:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801b8f6:	910d      	str	r1, [sp, #52]	@ 0x34
 801b8f8:	f7ff ff24 	bl	801b744 <__exponent>
 801b8fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b8fe:	1813      	adds	r3, r2, r0
 801b900:	2a01      	cmp	r2, #1
 801b902:	4681      	mov	r9, r0
 801b904:	6123      	str	r3, [r4, #16]
 801b906:	dc02      	bgt.n	801b90e <_printf_float+0x156>
 801b908:	6822      	ldr	r2, [r4, #0]
 801b90a:	07d2      	lsls	r2, r2, #31
 801b90c:	d501      	bpl.n	801b912 <_printf_float+0x15a>
 801b90e:	3301      	adds	r3, #1
 801b910:	6123      	str	r3, [r4, #16]
 801b912:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801b916:	2b00      	cmp	r3, #0
 801b918:	d09f      	beq.n	801b85a <_printf_float+0xa2>
 801b91a:	232d      	movs	r3, #45	@ 0x2d
 801b91c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b920:	e79b      	b.n	801b85a <_printf_float+0xa2>
 801b922:	2947      	cmp	r1, #71	@ 0x47
 801b924:	d1bf      	bne.n	801b8a6 <_printf_float+0xee>
 801b926:	2b00      	cmp	r3, #0
 801b928:	d1bd      	bne.n	801b8a6 <_printf_float+0xee>
 801b92a:	2301      	movs	r3, #1
 801b92c:	e7ba      	b.n	801b8a4 <_printf_float+0xec>
 801b92e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801b932:	d9dc      	bls.n	801b8ee <_printf_float+0x136>
 801b934:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801b938:	d118      	bne.n	801b96c <_printf_float+0x1b4>
 801b93a:	2900      	cmp	r1, #0
 801b93c:	6863      	ldr	r3, [r4, #4]
 801b93e:	dd0b      	ble.n	801b958 <_printf_float+0x1a0>
 801b940:	6121      	str	r1, [r4, #16]
 801b942:	b913      	cbnz	r3, 801b94a <_printf_float+0x192>
 801b944:	6822      	ldr	r2, [r4, #0]
 801b946:	07d0      	lsls	r0, r2, #31
 801b948:	d502      	bpl.n	801b950 <_printf_float+0x198>
 801b94a:	3301      	adds	r3, #1
 801b94c:	440b      	add	r3, r1
 801b94e:	6123      	str	r3, [r4, #16]
 801b950:	65a1      	str	r1, [r4, #88]	@ 0x58
 801b952:	f04f 0900 	mov.w	r9, #0
 801b956:	e7dc      	b.n	801b912 <_printf_float+0x15a>
 801b958:	b913      	cbnz	r3, 801b960 <_printf_float+0x1a8>
 801b95a:	6822      	ldr	r2, [r4, #0]
 801b95c:	07d2      	lsls	r2, r2, #31
 801b95e:	d501      	bpl.n	801b964 <_printf_float+0x1ac>
 801b960:	3302      	adds	r3, #2
 801b962:	e7f4      	b.n	801b94e <_printf_float+0x196>
 801b964:	2301      	movs	r3, #1
 801b966:	e7f2      	b.n	801b94e <_printf_float+0x196>
 801b968:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801b96c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b96e:	4299      	cmp	r1, r3
 801b970:	db05      	blt.n	801b97e <_printf_float+0x1c6>
 801b972:	6823      	ldr	r3, [r4, #0]
 801b974:	6121      	str	r1, [r4, #16]
 801b976:	07d8      	lsls	r0, r3, #31
 801b978:	d5ea      	bpl.n	801b950 <_printf_float+0x198>
 801b97a:	1c4b      	adds	r3, r1, #1
 801b97c:	e7e7      	b.n	801b94e <_printf_float+0x196>
 801b97e:	2900      	cmp	r1, #0
 801b980:	bfd4      	ite	le
 801b982:	f1c1 0202 	rsble	r2, r1, #2
 801b986:	2201      	movgt	r2, #1
 801b988:	4413      	add	r3, r2
 801b98a:	e7e0      	b.n	801b94e <_printf_float+0x196>
 801b98c:	6823      	ldr	r3, [r4, #0]
 801b98e:	055a      	lsls	r2, r3, #21
 801b990:	d407      	bmi.n	801b9a2 <_printf_float+0x1ea>
 801b992:	6923      	ldr	r3, [r4, #16]
 801b994:	4642      	mov	r2, r8
 801b996:	4631      	mov	r1, r6
 801b998:	4628      	mov	r0, r5
 801b99a:	47b8      	blx	r7
 801b99c:	3001      	adds	r0, #1
 801b99e:	d12b      	bne.n	801b9f8 <_printf_float+0x240>
 801b9a0:	e765      	b.n	801b86e <_printf_float+0xb6>
 801b9a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801b9a6:	f240 80dd 	bls.w	801bb64 <_printf_float+0x3ac>
 801b9aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801b9ae:	2200      	movs	r2, #0
 801b9b0:	2300      	movs	r3, #0
 801b9b2:	f7e5 f861 	bl	8000a78 <__aeabi_dcmpeq>
 801b9b6:	2800      	cmp	r0, #0
 801b9b8:	d033      	beq.n	801ba22 <_printf_float+0x26a>
 801b9ba:	4a37      	ldr	r2, [pc, #220]	@ (801ba98 <_printf_float+0x2e0>)
 801b9bc:	2301      	movs	r3, #1
 801b9be:	4631      	mov	r1, r6
 801b9c0:	4628      	mov	r0, r5
 801b9c2:	47b8      	blx	r7
 801b9c4:	3001      	adds	r0, #1
 801b9c6:	f43f af52 	beq.w	801b86e <_printf_float+0xb6>
 801b9ca:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 801b9ce:	4543      	cmp	r3, r8
 801b9d0:	db02      	blt.n	801b9d8 <_printf_float+0x220>
 801b9d2:	6823      	ldr	r3, [r4, #0]
 801b9d4:	07d8      	lsls	r0, r3, #31
 801b9d6:	d50f      	bpl.n	801b9f8 <_printf_float+0x240>
 801b9d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b9dc:	4631      	mov	r1, r6
 801b9de:	4628      	mov	r0, r5
 801b9e0:	47b8      	blx	r7
 801b9e2:	3001      	adds	r0, #1
 801b9e4:	f43f af43 	beq.w	801b86e <_printf_float+0xb6>
 801b9e8:	f04f 0900 	mov.w	r9, #0
 801b9ec:	f108 38ff 	add.w	r8, r8, #4294967295
 801b9f0:	f104 0a1a 	add.w	sl, r4, #26
 801b9f4:	45c8      	cmp	r8, r9
 801b9f6:	dc09      	bgt.n	801ba0c <_printf_float+0x254>
 801b9f8:	6823      	ldr	r3, [r4, #0]
 801b9fa:	079b      	lsls	r3, r3, #30
 801b9fc:	f100 8103 	bmi.w	801bc06 <_printf_float+0x44e>
 801ba00:	68e0      	ldr	r0, [r4, #12]
 801ba02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ba04:	4298      	cmp	r0, r3
 801ba06:	bfb8      	it	lt
 801ba08:	4618      	movlt	r0, r3
 801ba0a:	e732      	b.n	801b872 <_printf_float+0xba>
 801ba0c:	2301      	movs	r3, #1
 801ba0e:	4652      	mov	r2, sl
 801ba10:	4631      	mov	r1, r6
 801ba12:	4628      	mov	r0, r5
 801ba14:	47b8      	blx	r7
 801ba16:	3001      	adds	r0, #1
 801ba18:	f43f af29 	beq.w	801b86e <_printf_float+0xb6>
 801ba1c:	f109 0901 	add.w	r9, r9, #1
 801ba20:	e7e8      	b.n	801b9f4 <_printf_float+0x23c>
 801ba22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	dc39      	bgt.n	801ba9c <_printf_float+0x2e4>
 801ba28:	4a1b      	ldr	r2, [pc, #108]	@ (801ba98 <_printf_float+0x2e0>)
 801ba2a:	2301      	movs	r3, #1
 801ba2c:	4631      	mov	r1, r6
 801ba2e:	4628      	mov	r0, r5
 801ba30:	47b8      	blx	r7
 801ba32:	3001      	adds	r0, #1
 801ba34:	f43f af1b 	beq.w	801b86e <_printf_float+0xb6>
 801ba38:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 801ba3c:	ea59 0303 	orrs.w	r3, r9, r3
 801ba40:	d102      	bne.n	801ba48 <_printf_float+0x290>
 801ba42:	6823      	ldr	r3, [r4, #0]
 801ba44:	07d9      	lsls	r1, r3, #31
 801ba46:	d5d7      	bpl.n	801b9f8 <_printf_float+0x240>
 801ba48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ba4c:	4631      	mov	r1, r6
 801ba4e:	4628      	mov	r0, r5
 801ba50:	47b8      	blx	r7
 801ba52:	3001      	adds	r0, #1
 801ba54:	f43f af0b 	beq.w	801b86e <_printf_float+0xb6>
 801ba58:	f04f 0a00 	mov.w	sl, #0
 801ba5c:	f104 0b1a 	add.w	fp, r4, #26
 801ba60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ba62:	425b      	negs	r3, r3
 801ba64:	4553      	cmp	r3, sl
 801ba66:	dc01      	bgt.n	801ba6c <_printf_float+0x2b4>
 801ba68:	464b      	mov	r3, r9
 801ba6a:	e793      	b.n	801b994 <_printf_float+0x1dc>
 801ba6c:	2301      	movs	r3, #1
 801ba6e:	465a      	mov	r2, fp
 801ba70:	4631      	mov	r1, r6
 801ba72:	4628      	mov	r0, r5
 801ba74:	47b8      	blx	r7
 801ba76:	3001      	adds	r0, #1
 801ba78:	f43f aef9 	beq.w	801b86e <_printf_float+0xb6>
 801ba7c:	f10a 0a01 	add.w	sl, sl, #1
 801ba80:	e7ee      	b.n	801ba60 <_printf_float+0x2a8>
 801ba82:	bf00      	nop
 801ba84:	7fefffff 	.word	0x7fefffff
 801ba88:	0801ec60 	.word	0x0801ec60
 801ba8c:	0801ec64 	.word	0x0801ec64
 801ba90:	0801ec68 	.word	0x0801ec68
 801ba94:	0801ec6c 	.word	0x0801ec6c
 801ba98:	0801ec70 	.word	0x0801ec70
 801ba9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801ba9e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801baa2:	4553      	cmp	r3, sl
 801baa4:	bfa8      	it	ge
 801baa6:	4653      	movge	r3, sl
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	4699      	mov	r9, r3
 801baac:	dc36      	bgt.n	801bb1c <_printf_float+0x364>
 801baae:	f04f 0b00 	mov.w	fp, #0
 801bab2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bab6:	f104 021a 	add.w	r2, r4, #26
 801baba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801babc:	930a      	str	r3, [sp, #40]	@ 0x28
 801babe:	eba3 0309 	sub.w	r3, r3, r9
 801bac2:	455b      	cmp	r3, fp
 801bac4:	dc31      	bgt.n	801bb2a <_printf_float+0x372>
 801bac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bac8:	459a      	cmp	sl, r3
 801baca:	dc3a      	bgt.n	801bb42 <_printf_float+0x38a>
 801bacc:	6823      	ldr	r3, [r4, #0]
 801bace:	07da      	lsls	r2, r3, #31
 801bad0:	d437      	bmi.n	801bb42 <_printf_float+0x38a>
 801bad2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bad4:	ebaa 0903 	sub.w	r9, sl, r3
 801bad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bada:	ebaa 0303 	sub.w	r3, sl, r3
 801bade:	4599      	cmp	r9, r3
 801bae0:	bfa8      	it	ge
 801bae2:	4699      	movge	r9, r3
 801bae4:	f1b9 0f00 	cmp.w	r9, #0
 801bae8:	dc33      	bgt.n	801bb52 <_printf_float+0x39a>
 801baea:	f04f 0800 	mov.w	r8, #0
 801baee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801baf2:	f104 0b1a 	add.w	fp, r4, #26
 801baf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801baf8:	ebaa 0303 	sub.w	r3, sl, r3
 801bafc:	eba3 0309 	sub.w	r3, r3, r9
 801bb00:	4543      	cmp	r3, r8
 801bb02:	f77f af79 	ble.w	801b9f8 <_printf_float+0x240>
 801bb06:	2301      	movs	r3, #1
 801bb08:	465a      	mov	r2, fp
 801bb0a:	4631      	mov	r1, r6
 801bb0c:	4628      	mov	r0, r5
 801bb0e:	47b8      	blx	r7
 801bb10:	3001      	adds	r0, #1
 801bb12:	f43f aeac 	beq.w	801b86e <_printf_float+0xb6>
 801bb16:	f108 0801 	add.w	r8, r8, #1
 801bb1a:	e7ec      	b.n	801baf6 <_printf_float+0x33e>
 801bb1c:	4642      	mov	r2, r8
 801bb1e:	4631      	mov	r1, r6
 801bb20:	4628      	mov	r0, r5
 801bb22:	47b8      	blx	r7
 801bb24:	3001      	adds	r0, #1
 801bb26:	d1c2      	bne.n	801baae <_printf_float+0x2f6>
 801bb28:	e6a1      	b.n	801b86e <_printf_float+0xb6>
 801bb2a:	2301      	movs	r3, #1
 801bb2c:	4631      	mov	r1, r6
 801bb2e:	4628      	mov	r0, r5
 801bb30:	920a      	str	r2, [sp, #40]	@ 0x28
 801bb32:	47b8      	blx	r7
 801bb34:	3001      	adds	r0, #1
 801bb36:	f43f ae9a 	beq.w	801b86e <_printf_float+0xb6>
 801bb3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bb3c:	f10b 0b01 	add.w	fp, fp, #1
 801bb40:	e7bb      	b.n	801baba <_printf_float+0x302>
 801bb42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bb46:	4631      	mov	r1, r6
 801bb48:	4628      	mov	r0, r5
 801bb4a:	47b8      	blx	r7
 801bb4c:	3001      	adds	r0, #1
 801bb4e:	d1c0      	bne.n	801bad2 <_printf_float+0x31a>
 801bb50:	e68d      	b.n	801b86e <_printf_float+0xb6>
 801bb52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bb54:	464b      	mov	r3, r9
 801bb56:	4442      	add	r2, r8
 801bb58:	4631      	mov	r1, r6
 801bb5a:	4628      	mov	r0, r5
 801bb5c:	47b8      	blx	r7
 801bb5e:	3001      	adds	r0, #1
 801bb60:	d1c3      	bne.n	801baea <_printf_float+0x332>
 801bb62:	e684      	b.n	801b86e <_printf_float+0xb6>
 801bb64:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801bb68:	f1ba 0f01 	cmp.w	sl, #1
 801bb6c:	dc01      	bgt.n	801bb72 <_printf_float+0x3ba>
 801bb6e:	07db      	lsls	r3, r3, #31
 801bb70:	d536      	bpl.n	801bbe0 <_printf_float+0x428>
 801bb72:	2301      	movs	r3, #1
 801bb74:	4642      	mov	r2, r8
 801bb76:	4631      	mov	r1, r6
 801bb78:	4628      	mov	r0, r5
 801bb7a:	47b8      	blx	r7
 801bb7c:	3001      	adds	r0, #1
 801bb7e:	f43f ae76 	beq.w	801b86e <_printf_float+0xb6>
 801bb82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bb86:	4631      	mov	r1, r6
 801bb88:	4628      	mov	r0, r5
 801bb8a:	47b8      	blx	r7
 801bb8c:	3001      	adds	r0, #1
 801bb8e:	f43f ae6e 	beq.w	801b86e <_printf_float+0xb6>
 801bb92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801bb96:	2200      	movs	r2, #0
 801bb98:	2300      	movs	r3, #0
 801bb9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bb9e:	f7e4 ff6b 	bl	8000a78 <__aeabi_dcmpeq>
 801bba2:	b9c0      	cbnz	r0, 801bbd6 <_printf_float+0x41e>
 801bba4:	4653      	mov	r3, sl
 801bba6:	f108 0201 	add.w	r2, r8, #1
 801bbaa:	4631      	mov	r1, r6
 801bbac:	4628      	mov	r0, r5
 801bbae:	47b8      	blx	r7
 801bbb0:	3001      	adds	r0, #1
 801bbb2:	d10c      	bne.n	801bbce <_printf_float+0x416>
 801bbb4:	e65b      	b.n	801b86e <_printf_float+0xb6>
 801bbb6:	2301      	movs	r3, #1
 801bbb8:	465a      	mov	r2, fp
 801bbba:	4631      	mov	r1, r6
 801bbbc:	4628      	mov	r0, r5
 801bbbe:	47b8      	blx	r7
 801bbc0:	3001      	adds	r0, #1
 801bbc2:	f43f ae54 	beq.w	801b86e <_printf_float+0xb6>
 801bbc6:	f108 0801 	add.w	r8, r8, #1
 801bbca:	45d0      	cmp	r8, sl
 801bbcc:	dbf3      	blt.n	801bbb6 <_printf_float+0x3fe>
 801bbce:	464b      	mov	r3, r9
 801bbd0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801bbd4:	e6df      	b.n	801b996 <_printf_float+0x1de>
 801bbd6:	f04f 0800 	mov.w	r8, #0
 801bbda:	f104 0b1a 	add.w	fp, r4, #26
 801bbde:	e7f4      	b.n	801bbca <_printf_float+0x412>
 801bbe0:	2301      	movs	r3, #1
 801bbe2:	4642      	mov	r2, r8
 801bbe4:	e7e1      	b.n	801bbaa <_printf_float+0x3f2>
 801bbe6:	2301      	movs	r3, #1
 801bbe8:	464a      	mov	r2, r9
 801bbea:	4631      	mov	r1, r6
 801bbec:	4628      	mov	r0, r5
 801bbee:	47b8      	blx	r7
 801bbf0:	3001      	adds	r0, #1
 801bbf2:	f43f ae3c 	beq.w	801b86e <_printf_float+0xb6>
 801bbf6:	f108 0801 	add.w	r8, r8, #1
 801bbfa:	68e3      	ldr	r3, [r4, #12]
 801bbfc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801bbfe:	1a5b      	subs	r3, r3, r1
 801bc00:	4543      	cmp	r3, r8
 801bc02:	dcf0      	bgt.n	801bbe6 <_printf_float+0x42e>
 801bc04:	e6fc      	b.n	801ba00 <_printf_float+0x248>
 801bc06:	f04f 0800 	mov.w	r8, #0
 801bc0a:	f104 0919 	add.w	r9, r4, #25
 801bc0e:	e7f4      	b.n	801bbfa <_printf_float+0x442>

0801bc10 <_printf_common>:
 801bc10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc14:	4616      	mov	r6, r2
 801bc16:	4698      	mov	r8, r3
 801bc18:	688a      	ldr	r2, [r1, #8]
 801bc1a:	690b      	ldr	r3, [r1, #16]
 801bc1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bc20:	4293      	cmp	r3, r2
 801bc22:	bfb8      	it	lt
 801bc24:	4613      	movlt	r3, r2
 801bc26:	6033      	str	r3, [r6, #0]
 801bc28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bc2c:	4607      	mov	r7, r0
 801bc2e:	460c      	mov	r4, r1
 801bc30:	b10a      	cbz	r2, 801bc36 <_printf_common+0x26>
 801bc32:	3301      	adds	r3, #1
 801bc34:	6033      	str	r3, [r6, #0]
 801bc36:	6823      	ldr	r3, [r4, #0]
 801bc38:	0699      	lsls	r1, r3, #26
 801bc3a:	bf42      	ittt	mi
 801bc3c:	6833      	ldrmi	r3, [r6, #0]
 801bc3e:	3302      	addmi	r3, #2
 801bc40:	6033      	strmi	r3, [r6, #0]
 801bc42:	6825      	ldr	r5, [r4, #0]
 801bc44:	f015 0506 	ands.w	r5, r5, #6
 801bc48:	d106      	bne.n	801bc58 <_printf_common+0x48>
 801bc4a:	f104 0a19 	add.w	sl, r4, #25
 801bc4e:	68e3      	ldr	r3, [r4, #12]
 801bc50:	6832      	ldr	r2, [r6, #0]
 801bc52:	1a9b      	subs	r3, r3, r2
 801bc54:	42ab      	cmp	r3, r5
 801bc56:	dc26      	bgt.n	801bca6 <_printf_common+0x96>
 801bc58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bc5c:	6822      	ldr	r2, [r4, #0]
 801bc5e:	3b00      	subs	r3, #0
 801bc60:	bf18      	it	ne
 801bc62:	2301      	movne	r3, #1
 801bc64:	0692      	lsls	r2, r2, #26
 801bc66:	d42b      	bmi.n	801bcc0 <_printf_common+0xb0>
 801bc68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bc6c:	4641      	mov	r1, r8
 801bc6e:	4638      	mov	r0, r7
 801bc70:	47c8      	blx	r9
 801bc72:	3001      	adds	r0, #1
 801bc74:	d01e      	beq.n	801bcb4 <_printf_common+0xa4>
 801bc76:	6823      	ldr	r3, [r4, #0]
 801bc78:	6922      	ldr	r2, [r4, #16]
 801bc7a:	f003 0306 	and.w	r3, r3, #6
 801bc7e:	2b04      	cmp	r3, #4
 801bc80:	bf02      	ittt	eq
 801bc82:	68e5      	ldreq	r5, [r4, #12]
 801bc84:	6833      	ldreq	r3, [r6, #0]
 801bc86:	1aed      	subeq	r5, r5, r3
 801bc88:	68a3      	ldr	r3, [r4, #8]
 801bc8a:	bf0c      	ite	eq
 801bc8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bc90:	2500      	movne	r5, #0
 801bc92:	4293      	cmp	r3, r2
 801bc94:	bfc4      	itt	gt
 801bc96:	1a9b      	subgt	r3, r3, r2
 801bc98:	18ed      	addgt	r5, r5, r3
 801bc9a:	2600      	movs	r6, #0
 801bc9c:	341a      	adds	r4, #26
 801bc9e:	42b5      	cmp	r5, r6
 801bca0:	d11a      	bne.n	801bcd8 <_printf_common+0xc8>
 801bca2:	2000      	movs	r0, #0
 801bca4:	e008      	b.n	801bcb8 <_printf_common+0xa8>
 801bca6:	2301      	movs	r3, #1
 801bca8:	4652      	mov	r2, sl
 801bcaa:	4641      	mov	r1, r8
 801bcac:	4638      	mov	r0, r7
 801bcae:	47c8      	blx	r9
 801bcb0:	3001      	adds	r0, #1
 801bcb2:	d103      	bne.n	801bcbc <_printf_common+0xac>
 801bcb4:	f04f 30ff 	mov.w	r0, #4294967295
 801bcb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bcbc:	3501      	adds	r5, #1
 801bcbe:	e7c6      	b.n	801bc4e <_printf_common+0x3e>
 801bcc0:	18e1      	adds	r1, r4, r3
 801bcc2:	1c5a      	adds	r2, r3, #1
 801bcc4:	2030      	movs	r0, #48	@ 0x30
 801bcc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801bcca:	4422      	add	r2, r4
 801bccc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bcd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bcd4:	3302      	adds	r3, #2
 801bcd6:	e7c7      	b.n	801bc68 <_printf_common+0x58>
 801bcd8:	2301      	movs	r3, #1
 801bcda:	4622      	mov	r2, r4
 801bcdc:	4641      	mov	r1, r8
 801bcde:	4638      	mov	r0, r7
 801bce0:	47c8      	blx	r9
 801bce2:	3001      	adds	r0, #1
 801bce4:	d0e6      	beq.n	801bcb4 <_printf_common+0xa4>
 801bce6:	3601      	adds	r6, #1
 801bce8:	e7d9      	b.n	801bc9e <_printf_common+0x8e>
	...

0801bcec <_printf_i>:
 801bcec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bcf0:	7e0f      	ldrb	r7, [r1, #24]
 801bcf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bcf4:	2f78      	cmp	r7, #120	@ 0x78
 801bcf6:	4691      	mov	r9, r2
 801bcf8:	4680      	mov	r8, r0
 801bcfa:	460c      	mov	r4, r1
 801bcfc:	469a      	mov	sl, r3
 801bcfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bd02:	d807      	bhi.n	801bd14 <_printf_i+0x28>
 801bd04:	2f62      	cmp	r7, #98	@ 0x62
 801bd06:	d80a      	bhi.n	801bd1e <_printf_i+0x32>
 801bd08:	2f00      	cmp	r7, #0
 801bd0a:	f000 80d2 	beq.w	801beb2 <_printf_i+0x1c6>
 801bd0e:	2f58      	cmp	r7, #88	@ 0x58
 801bd10:	f000 80b9 	beq.w	801be86 <_printf_i+0x19a>
 801bd14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bd18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bd1c:	e03a      	b.n	801bd94 <_printf_i+0xa8>
 801bd1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bd22:	2b15      	cmp	r3, #21
 801bd24:	d8f6      	bhi.n	801bd14 <_printf_i+0x28>
 801bd26:	a101      	add	r1, pc, #4	@ (adr r1, 801bd2c <_printf_i+0x40>)
 801bd28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bd2c:	0801bd85 	.word	0x0801bd85
 801bd30:	0801bd99 	.word	0x0801bd99
 801bd34:	0801bd15 	.word	0x0801bd15
 801bd38:	0801bd15 	.word	0x0801bd15
 801bd3c:	0801bd15 	.word	0x0801bd15
 801bd40:	0801bd15 	.word	0x0801bd15
 801bd44:	0801bd99 	.word	0x0801bd99
 801bd48:	0801bd15 	.word	0x0801bd15
 801bd4c:	0801bd15 	.word	0x0801bd15
 801bd50:	0801bd15 	.word	0x0801bd15
 801bd54:	0801bd15 	.word	0x0801bd15
 801bd58:	0801be99 	.word	0x0801be99
 801bd5c:	0801bdc3 	.word	0x0801bdc3
 801bd60:	0801be53 	.word	0x0801be53
 801bd64:	0801bd15 	.word	0x0801bd15
 801bd68:	0801bd15 	.word	0x0801bd15
 801bd6c:	0801bebb 	.word	0x0801bebb
 801bd70:	0801bd15 	.word	0x0801bd15
 801bd74:	0801bdc3 	.word	0x0801bdc3
 801bd78:	0801bd15 	.word	0x0801bd15
 801bd7c:	0801bd15 	.word	0x0801bd15
 801bd80:	0801be5b 	.word	0x0801be5b
 801bd84:	6833      	ldr	r3, [r6, #0]
 801bd86:	1d1a      	adds	r2, r3, #4
 801bd88:	681b      	ldr	r3, [r3, #0]
 801bd8a:	6032      	str	r2, [r6, #0]
 801bd8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bd90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801bd94:	2301      	movs	r3, #1
 801bd96:	e09d      	b.n	801bed4 <_printf_i+0x1e8>
 801bd98:	6833      	ldr	r3, [r6, #0]
 801bd9a:	6820      	ldr	r0, [r4, #0]
 801bd9c:	1d19      	adds	r1, r3, #4
 801bd9e:	6031      	str	r1, [r6, #0]
 801bda0:	0606      	lsls	r6, r0, #24
 801bda2:	d501      	bpl.n	801bda8 <_printf_i+0xbc>
 801bda4:	681d      	ldr	r5, [r3, #0]
 801bda6:	e003      	b.n	801bdb0 <_printf_i+0xc4>
 801bda8:	0645      	lsls	r5, r0, #25
 801bdaa:	d5fb      	bpl.n	801bda4 <_printf_i+0xb8>
 801bdac:	f9b3 5000 	ldrsh.w	r5, [r3]
 801bdb0:	2d00      	cmp	r5, #0
 801bdb2:	da03      	bge.n	801bdbc <_printf_i+0xd0>
 801bdb4:	232d      	movs	r3, #45	@ 0x2d
 801bdb6:	426d      	negs	r5, r5
 801bdb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bdbc:	4859      	ldr	r0, [pc, #356]	@ (801bf24 <_printf_i+0x238>)
 801bdbe:	230a      	movs	r3, #10
 801bdc0:	e011      	b.n	801bde6 <_printf_i+0xfa>
 801bdc2:	6821      	ldr	r1, [r4, #0]
 801bdc4:	6833      	ldr	r3, [r6, #0]
 801bdc6:	0608      	lsls	r0, r1, #24
 801bdc8:	f853 5b04 	ldr.w	r5, [r3], #4
 801bdcc:	d402      	bmi.n	801bdd4 <_printf_i+0xe8>
 801bdce:	0649      	lsls	r1, r1, #25
 801bdd0:	bf48      	it	mi
 801bdd2:	b2ad      	uxthmi	r5, r5
 801bdd4:	2f6f      	cmp	r7, #111	@ 0x6f
 801bdd6:	4853      	ldr	r0, [pc, #332]	@ (801bf24 <_printf_i+0x238>)
 801bdd8:	6033      	str	r3, [r6, #0]
 801bdda:	bf14      	ite	ne
 801bddc:	230a      	movne	r3, #10
 801bdde:	2308      	moveq	r3, #8
 801bde0:	2100      	movs	r1, #0
 801bde2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801bde6:	6866      	ldr	r6, [r4, #4]
 801bde8:	60a6      	str	r6, [r4, #8]
 801bdea:	2e00      	cmp	r6, #0
 801bdec:	bfa2      	ittt	ge
 801bdee:	6821      	ldrge	r1, [r4, #0]
 801bdf0:	f021 0104 	bicge.w	r1, r1, #4
 801bdf4:	6021      	strge	r1, [r4, #0]
 801bdf6:	b90d      	cbnz	r5, 801bdfc <_printf_i+0x110>
 801bdf8:	2e00      	cmp	r6, #0
 801bdfa:	d04b      	beq.n	801be94 <_printf_i+0x1a8>
 801bdfc:	4616      	mov	r6, r2
 801bdfe:	fbb5 f1f3 	udiv	r1, r5, r3
 801be02:	fb03 5711 	mls	r7, r3, r1, r5
 801be06:	5dc7      	ldrb	r7, [r0, r7]
 801be08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801be0c:	462f      	mov	r7, r5
 801be0e:	42bb      	cmp	r3, r7
 801be10:	460d      	mov	r5, r1
 801be12:	d9f4      	bls.n	801bdfe <_printf_i+0x112>
 801be14:	2b08      	cmp	r3, #8
 801be16:	d10b      	bne.n	801be30 <_printf_i+0x144>
 801be18:	6823      	ldr	r3, [r4, #0]
 801be1a:	07df      	lsls	r7, r3, #31
 801be1c:	d508      	bpl.n	801be30 <_printf_i+0x144>
 801be1e:	6923      	ldr	r3, [r4, #16]
 801be20:	6861      	ldr	r1, [r4, #4]
 801be22:	4299      	cmp	r1, r3
 801be24:	bfde      	ittt	le
 801be26:	2330      	movle	r3, #48	@ 0x30
 801be28:	f806 3c01 	strble.w	r3, [r6, #-1]
 801be2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801be30:	1b92      	subs	r2, r2, r6
 801be32:	6122      	str	r2, [r4, #16]
 801be34:	f8cd a000 	str.w	sl, [sp]
 801be38:	464b      	mov	r3, r9
 801be3a:	aa03      	add	r2, sp, #12
 801be3c:	4621      	mov	r1, r4
 801be3e:	4640      	mov	r0, r8
 801be40:	f7ff fee6 	bl	801bc10 <_printf_common>
 801be44:	3001      	adds	r0, #1
 801be46:	d14a      	bne.n	801bede <_printf_i+0x1f2>
 801be48:	f04f 30ff 	mov.w	r0, #4294967295
 801be4c:	b004      	add	sp, #16
 801be4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be52:	6823      	ldr	r3, [r4, #0]
 801be54:	f043 0320 	orr.w	r3, r3, #32
 801be58:	6023      	str	r3, [r4, #0]
 801be5a:	4833      	ldr	r0, [pc, #204]	@ (801bf28 <_printf_i+0x23c>)
 801be5c:	2778      	movs	r7, #120	@ 0x78
 801be5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801be62:	6823      	ldr	r3, [r4, #0]
 801be64:	6831      	ldr	r1, [r6, #0]
 801be66:	061f      	lsls	r7, r3, #24
 801be68:	f851 5b04 	ldr.w	r5, [r1], #4
 801be6c:	d402      	bmi.n	801be74 <_printf_i+0x188>
 801be6e:	065f      	lsls	r7, r3, #25
 801be70:	bf48      	it	mi
 801be72:	b2ad      	uxthmi	r5, r5
 801be74:	6031      	str	r1, [r6, #0]
 801be76:	07d9      	lsls	r1, r3, #31
 801be78:	bf44      	itt	mi
 801be7a:	f043 0320 	orrmi.w	r3, r3, #32
 801be7e:	6023      	strmi	r3, [r4, #0]
 801be80:	b11d      	cbz	r5, 801be8a <_printf_i+0x19e>
 801be82:	2310      	movs	r3, #16
 801be84:	e7ac      	b.n	801bde0 <_printf_i+0xf4>
 801be86:	4827      	ldr	r0, [pc, #156]	@ (801bf24 <_printf_i+0x238>)
 801be88:	e7e9      	b.n	801be5e <_printf_i+0x172>
 801be8a:	6823      	ldr	r3, [r4, #0]
 801be8c:	f023 0320 	bic.w	r3, r3, #32
 801be90:	6023      	str	r3, [r4, #0]
 801be92:	e7f6      	b.n	801be82 <_printf_i+0x196>
 801be94:	4616      	mov	r6, r2
 801be96:	e7bd      	b.n	801be14 <_printf_i+0x128>
 801be98:	6833      	ldr	r3, [r6, #0]
 801be9a:	6825      	ldr	r5, [r4, #0]
 801be9c:	6961      	ldr	r1, [r4, #20]
 801be9e:	1d18      	adds	r0, r3, #4
 801bea0:	6030      	str	r0, [r6, #0]
 801bea2:	062e      	lsls	r6, r5, #24
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	d501      	bpl.n	801beac <_printf_i+0x1c0>
 801bea8:	6019      	str	r1, [r3, #0]
 801beaa:	e002      	b.n	801beb2 <_printf_i+0x1c6>
 801beac:	0668      	lsls	r0, r5, #25
 801beae:	d5fb      	bpl.n	801bea8 <_printf_i+0x1bc>
 801beb0:	8019      	strh	r1, [r3, #0]
 801beb2:	2300      	movs	r3, #0
 801beb4:	6123      	str	r3, [r4, #16]
 801beb6:	4616      	mov	r6, r2
 801beb8:	e7bc      	b.n	801be34 <_printf_i+0x148>
 801beba:	6833      	ldr	r3, [r6, #0]
 801bebc:	1d1a      	adds	r2, r3, #4
 801bebe:	6032      	str	r2, [r6, #0]
 801bec0:	681e      	ldr	r6, [r3, #0]
 801bec2:	6862      	ldr	r2, [r4, #4]
 801bec4:	2100      	movs	r1, #0
 801bec6:	4630      	mov	r0, r6
 801bec8:	f7e4 f95a 	bl	8000180 <memchr>
 801becc:	b108      	cbz	r0, 801bed2 <_printf_i+0x1e6>
 801bece:	1b80      	subs	r0, r0, r6
 801bed0:	6060      	str	r0, [r4, #4]
 801bed2:	6863      	ldr	r3, [r4, #4]
 801bed4:	6123      	str	r3, [r4, #16]
 801bed6:	2300      	movs	r3, #0
 801bed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bedc:	e7aa      	b.n	801be34 <_printf_i+0x148>
 801bede:	6923      	ldr	r3, [r4, #16]
 801bee0:	4632      	mov	r2, r6
 801bee2:	4649      	mov	r1, r9
 801bee4:	4640      	mov	r0, r8
 801bee6:	47d0      	blx	sl
 801bee8:	3001      	adds	r0, #1
 801beea:	d0ad      	beq.n	801be48 <_printf_i+0x15c>
 801beec:	6823      	ldr	r3, [r4, #0]
 801beee:	079b      	lsls	r3, r3, #30
 801bef0:	d413      	bmi.n	801bf1a <_printf_i+0x22e>
 801bef2:	68e0      	ldr	r0, [r4, #12]
 801bef4:	9b03      	ldr	r3, [sp, #12]
 801bef6:	4298      	cmp	r0, r3
 801bef8:	bfb8      	it	lt
 801befa:	4618      	movlt	r0, r3
 801befc:	e7a6      	b.n	801be4c <_printf_i+0x160>
 801befe:	2301      	movs	r3, #1
 801bf00:	4632      	mov	r2, r6
 801bf02:	4649      	mov	r1, r9
 801bf04:	4640      	mov	r0, r8
 801bf06:	47d0      	blx	sl
 801bf08:	3001      	adds	r0, #1
 801bf0a:	d09d      	beq.n	801be48 <_printf_i+0x15c>
 801bf0c:	3501      	adds	r5, #1
 801bf0e:	68e3      	ldr	r3, [r4, #12]
 801bf10:	9903      	ldr	r1, [sp, #12]
 801bf12:	1a5b      	subs	r3, r3, r1
 801bf14:	42ab      	cmp	r3, r5
 801bf16:	dcf2      	bgt.n	801befe <_printf_i+0x212>
 801bf18:	e7eb      	b.n	801bef2 <_printf_i+0x206>
 801bf1a:	2500      	movs	r5, #0
 801bf1c:	f104 0619 	add.w	r6, r4, #25
 801bf20:	e7f5      	b.n	801bf0e <_printf_i+0x222>
 801bf22:	bf00      	nop
 801bf24:	0801ec72 	.word	0x0801ec72
 801bf28:	0801ec83 	.word	0x0801ec83

0801bf2c <std>:
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	b510      	push	{r4, lr}
 801bf30:	4604      	mov	r4, r0
 801bf32:	e9c0 3300 	strd	r3, r3, [r0]
 801bf36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bf3a:	6083      	str	r3, [r0, #8]
 801bf3c:	8181      	strh	r1, [r0, #12]
 801bf3e:	6643      	str	r3, [r0, #100]	@ 0x64
 801bf40:	81c2      	strh	r2, [r0, #14]
 801bf42:	6183      	str	r3, [r0, #24]
 801bf44:	4619      	mov	r1, r3
 801bf46:	2208      	movs	r2, #8
 801bf48:	305c      	adds	r0, #92	@ 0x5c
 801bf4a:	f000 f8f4 	bl	801c136 <memset>
 801bf4e:	4b0d      	ldr	r3, [pc, #52]	@ (801bf84 <std+0x58>)
 801bf50:	6263      	str	r3, [r4, #36]	@ 0x24
 801bf52:	4b0d      	ldr	r3, [pc, #52]	@ (801bf88 <std+0x5c>)
 801bf54:	62a3      	str	r3, [r4, #40]	@ 0x28
 801bf56:	4b0d      	ldr	r3, [pc, #52]	@ (801bf8c <std+0x60>)
 801bf58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801bf5a:	4b0d      	ldr	r3, [pc, #52]	@ (801bf90 <std+0x64>)
 801bf5c:	6323      	str	r3, [r4, #48]	@ 0x30
 801bf5e:	4b0d      	ldr	r3, [pc, #52]	@ (801bf94 <std+0x68>)
 801bf60:	6224      	str	r4, [r4, #32]
 801bf62:	429c      	cmp	r4, r3
 801bf64:	d006      	beq.n	801bf74 <std+0x48>
 801bf66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801bf6a:	4294      	cmp	r4, r2
 801bf6c:	d002      	beq.n	801bf74 <std+0x48>
 801bf6e:	33d0      	adds	r3, #208	@ 0xd0
 801bf70:	429c      	cmp	r4, r3
 801bf72:	d105      	bne.n	801bf80 <std+0x54>
 801bf74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801bf78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf7c:	f000 b952 	b.w	801c224 <__retarget_lock_init_recursive>
 801bf80:	bd10      	pop	{r4, pc}
 801bf82:	bf00      	nop
 801bf84:	0801c0b1 	.word	0x0801c0b1
 801bf88:	0801c0d3 	.word	0x0801c0d3
 801bf8c:	0801c10b 	.word	0x0801c10b
 801bf90:	0801c12f 	.word	0x0801c12f
 801bf94:	20001d9c 	.word	0x20001d9c

0801bf98 <stdio_exit_handler>:
 801bf98:	4a02      	ldr	r2, [pc, #8]	@ (801bfa4 <stdio_exit_handler+0xc>)
 801bf9a:	4903      	ldr	r1, [pc, #12]	@ (801bfa8 <stdio_exit_handler+0x10>)
 801bf9c:	4803      	ldr	r0, [pc, #12]	@ (801bfac <stdio_exit_handler+0x14>)
 801bf9e:	f000 b869 	b.w	801c074 <_fwalk_sglue>
 801bfa2:	bf00      	nop
 801bfa4:	20000138 	.word	0x20000138
 801bfa8:	0801d8d1 	.word	0x0801d8d1
 801bfac:	20000148 	.word	0x20000148

0801bfb0 <cleanup_stdio>:
 801bfb0:	6841      	ldr	r1, [r0, #4]
 801bfb2:	4b0c      	ldr	r3, [pc, #48]	@ (801bfe4 <cleanup_stdio+0x34>)
 801bfb4:	4299      	cmp	r1, r3
 801bfb6:	b510      	push	{r4, lr}
 801bfb8:	4604      	mov	r4, r0
 801bfba:	d001      	beq.n	801bfc0 <cleanup_stdio+0x10>
 801bfbc:	f001 fc88 	bl	801d8d0 <_fflush_r>
 801bfc0:	68a1      	ldr	r1, [r4, #8]
 801bfc2:	4b09      	ldr	r3, [pc, #36]	@ (801bfe8 <cleanup_stdio+0x38>)
 801bfc4:	4299      	cmp	r1, r3
 801bfc6:	d002      	beq.n	801bfce <cleanup_stdio+0x1e>
 801bfc8:	4620      	mov	r0, r4
 801bfca:	f001 fc81 	bl	801d8d0 <_fflush_r>
 801bfce:	68e1      	ldr	r1, [r4, #12]
 801bfd0:	4b06      	ldr	r3, [pc, #24]	@ (801bfec <cleanup_stdio+0x3c>)
 801bfd2:	4299      	cmp	r1, r3
 801bfd4:	d004      	beq.n	801bfe0 <cleanup_stdio+0x30>
 801bfd6:	4620      	mov	r0, r4
 801bfd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bfdc:	f001 bc78 	b.w	801d8d0 <_fflush_r>
 801bfe0:	bd10      	pop	{r4, pc}
 801bfe2:	bf00      	nop
 801bfe4:	20001d9c 	.word	0x20001d9c
 801bfe8:	20001e04 	.word	0x20001e04
 801bfec:	20001e6c 	.word	0x20001e6c

0801bff0 <global_stdio_init.part.0>:
 801bff0:	b510      	push	{r4, lr}
 801bff2:	4b0b      	ldr	r3, [pc, #44]	@ (801c020 <global_stdio_init.part.0+0x30>)
 801bff4:	4c0b      	ldr	r4, [pc, #44]	@ (801c024 <global_stdio_init.part.0+0x34>)
 801bff6:	4a0c      	ldr	r2, [pc, #48]	@ (801c028 <global_stdio_init.part.0+0x38>)
 801bff8:	601a      	str	r2, [r3, #0]
 801bffa:	4620      	mov	r0, r4
 801bffc:	2200      	movs	r2, #0
 801bffe:	2104      	movs	r1, #4
 801c000:	f7ff ff94 	bl	801bf2c <std>
 801c004:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c008:	2201      	movs	r2, #1
 801c00a:	2109      	movs	r1, #9
 801c00c:	f7ff ff8e 	bl	801bf2c <std>
 801c010:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c014:	2202      	movs	r2, #2
 801c016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c01a:	2112      	movs	r1, #18
 801c01c:	f7ff bf86 	b.w	801bf2c <std>
 801c020:	20001ed4 	.word	0x20001ed4
 801c024:	20001d9c 	.word	0x20001d9c
 801c028:	0801bf99 	.word	0x0801bf99

0801c02c <__sfp_lock_acquire>:
 801c02c:	4801      	ldr	r0, [pc, #4]	@ (801c034 <__sfp_lock_acquire+0x8>)
 801c02e:	f000 b8fa 	b.w	801c226 <__retarget_lock_acquire_recursive>
 801c032:	bf00      	nop
 801c034:	20001edd 	.word	0x20001edd

0801c038 <__sfp_lock_release>:
 801c038:	4801      	ldr	r0, [pc, #4]	@ (801c040 <__sfp_lock_release+0x8>)
 801c03a:	f000 b8f5 	b.w	801c228 <__retarget_lock_release_recursive>
 801c03e:	bf00      	nop
 801c040:	20001edd 	.word	0x20001edd

0801c044 <__sinit>:
 801c044:	b510      	push	{r4, lr}
 801c046:	4604      	mov	r4, r0
 801c048:	f7ff fff0 	bl	801c02c <__sfp_lock_acquire>
 801c04c:	6a23      	ldr	r3, [r4, #32]
 801c04e:	b11b      	cbz	r3, 801c058 <__sinit+0x14>
 801c050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c054:	f7ff bff0 	b.w	801c038 <__sfp_lock_release>
 801c058:	4b04      	ldr	r3, [pc, #16]	@ (801c06c <__sinit+0x28>)
 801c05a:	6223      	str	r3, [r4, #32]
 801c05c:	4b04      	ldr	r3, [pc, #16]	@ (801c070 <__sinit+0x2c>)
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	2b00      	cmp	r3, #0
 801c062:	d1f5      	bne.n	801c050 <__sinit+0xc>
 801c064:	f7ff ffc4 	bl	801bff0 <global_stdio_init.part.0>
 801c068:	e7f2      	b.n	801c050 <__sinit+0xc>
 801c06a:	bf00      	nop
 801c06c:	0801bfb1 	.word	0x0801bfb1
 801c070:	20001ed4 	.word	0x20001ed4

0801c074 <_fwalk_sglue>:
 801c074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c078:	4607      	mov	r7, r0
 801c07a:	4688      	mov	r8, r1
 801c07c:	4614      	mov	r4, r2
 801c07e:	2600      	movs	r6, #0
 801c080:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c084:	f1b9 0901 	subs.w	r9, r9, #1
 801c088:	d505      	bpl.n	801c096 <_fwalk_sglue+0x22>
 801c08a:	6824      	ldr	r4, [r4, #0]
 801c08c:	2c00      	cmp	r4, #0
 801c08e:	d1f7      	bne.n	801c080 <_fwalk_sglue+0xc>
 801c090:	4630      	mov	r0, r6
 801c092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c096:	89ab      	ldrh	r3, [r5, #12]
 801c098:	2b01      	cmp	r3, #1
 801c09a:	d907      	bls.n	801c0ac <_fwalk_sglue+0x38>
 801c09c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c0a0:	3301      	adds	r3, #1
 801c0a2:	d003      	beq.n	801c0ac <_fwalk_sglue+0x38>
 801c0a4:	4629      	mov	r1, r5
 801c0a6:	4638      	mov	r0, r7
 801c0a8:	47c0      	blx	r8
 801c0aa:	4306      	orrs	r6, r0
 801c0ac:	3568      	adds	r5, #104	@ 0x68
 801c0ae:	e7e9      	b.n	801c084 <_fwalk_sglue+0x10>

0801c0b0 <__sread>:
 801c0b0:	b510      	push	{r4, lr}
 801c0b2:	460c      	mov	r4, r1
 801c0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c0b8:	f000 f86c 	bl	801c194 <_read_r>
 801c0bc:	2800      	cmp	r0, #0
 801c0be:	bfab      	itete	ge
 801c0c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c0c2:	89a3      	ldrhlt	r3, [r4, #12]
 801c0c4:	181b      	addge	r3, r3, r0
 801c0c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c0ca:	bfac      	ite	ge
 801c0cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c0ce:	81a3      	strhlt	r3, [r4, #12]
 801c0d0:	bd10      	pop	{r4, pc}

0801c0d2 <__swrite>:
 801c0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0d6:	461f      	mov	r7, r3
 801c0d8:	898b      	ldrh	r3, [r1, #12]
 801c0da:	05db      	lsls	r3, r3, #23
 801c0dc:	4605      	mov	r5, r0
 801c0de:	460c      	mov	r4, r1
 801c0e0:	4616      	mov	r6, r2
 801c0e2:	d505      	bpl.n	801c0f0 <__swrite+0x1e>
 801c0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c0e8:	2302      	movs	r3, #2
 801c0ea:	2200      	movs	r2, #0
 801c0ec:	f000 f840 	bl	801c170 <_lseek_r>
 801c0f0:	89a3      	ldrh	r3, [r4, #12]
 801c0f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c0f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c0fa:	81a3      	strh	r3, [r4, #12]
 801c0fc:	4632      	mov	r2, r6
 801c0fe:	463b      	mov	r3, r7
 801c100:	4628      	mov	r0, r5
 801c102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c106:	f000 b857 	b.w	801c1b8 <_write_r>

0801c10a <__sseek>:
 801c10a:	b510      	push	{r4, lr}
 801c10c:	460c      	mov	r4, r1
 801c10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c112:	f000 f82d 	bl	801c170 <_lseek_r>
 801c116:	1c43      	adds	r3, r0, #1
 801c118:	89a3      	ldrh	r3, [r4, #12]
 801c11a:	bf15      	itete	ne
 801c11c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c11e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c122:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c126:	81a3      	strheq	r3, [r4, #12]
 801c128:	bf18      	it	ne
 801c12a:	81a3      	strhne	r3, [r4, #12]
 801c12c:	bd10      	pop	{r4, pc}

0801c12e <__sclose>:
 801c12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c132:	f000 b80d 	b.w	801c150 <_close_r>

0801c136 <memset>:
 801c136:	4402      	add	r2, r0
 801c138:	4603      	mov	r3, r0
 801c13a:	4293      	cmp	r3, r2
 801c13c:	d100      	bne.n	801c140 <memset+0xa>
 801c13e:	4770      	bx	lr
 801c140:	f803 1b01 	strb.w	r1, [r3], #1
 801c144:	e7f9      	b.n	801c13a <memset+0x4>
	...

0801c148 <_localeconv_r>:
 801c148:	4800      	ldr	r0, [pc, #0]	@ (801c14c <_localeconv_r+0x4>)
 801c14a:	4770      	bx	lr
 801c14c:	20000284 	.word	0x20000284

0801c150 <_close_r>:
 801c150:	b538      	push	{r3, r4, r5, lr}
 801c152:	4d06      	ldr	r5, [pc, #24]	@ (801c16c <_close_r+0x1c>)
 801c154:	2300      	movs	r3, #0
 801c156:	4604      	mov	r4, r0
 801c158:	4608      	mov	r0, r1
 801c15a:	602b      	str	r3, [r5, #0]
 801c15c:	f001 ff84 	bl	801e068 <_close>
 801c160:	1c43      	adds	r3, r0, #1
 801c162:	d102      	bne.n	801c16a <_close_r+0x1a>
 801c164:	682b      	ldr	r3, [r5, #0]
 801c166:	b103      	cbz	r3, 801c16a <_close_r+0x1a>
 801c168:	6023      	str	r3, [r4, #0]
 801c16a:	bd38      	pop	{r3, r4, r5, pc}
 801c16c:	20001ed8 	.word	0x20001ed8

0801c170 <_lseek_r>:
 801c170:	b538      	push	{r3, r4, r5, lr}
 801c172:	4d07      	ldr	r5, [pc, #28]	@ (801c190 <_lseek_r+0x20>)
 801c174:	4604      	mov	r4, r0
 801c176:	4608      	mov	r0, r1
 801c178:	4611      	mov	r1, r2
 801c17a:	2200      	movs	r2, #0
 801c17c:	602a      	str	r2, [r5, #0]
 801c17e:	461a      	mov	r2, r3
 801c180:	f001 ff9a 	bl	801e0b8 <_lseek>
 801c184:	1c43      	adds	r3, r0, #1
 801c186:	d102      	bne.n	801c18e <_lseek_r+0x1e>
 801c188:	682b      	ldr	r3, [r5, #0]
 801c18a:	b103      	cbz	r3, 801c18e <_lseek_r+0x1e>
 801c18c:	6023      	str	r3, [r4, #0]
 801c18e:	bd38      	pop	{r3, r4, r5, pc}
 801c190:	20001ed8 	.word	0x20001ed8

0801c194 <_read_r>:
 801c194:	b538      	push	{r3, r4, r5, lr}
 801c196:	4d07      	ldr	r5, [pc, #28]	@ (801c1b4 <_read_r+0x20>)
 801c198:	4604      	mov	r4, r0
 801c19a:	4608      	mov	r0, r1
 801c19c:	4611      	mov	r1, r2
 801c19e:	2200      	movs	r2, #0
 801c1a0:	602a      	str	r2, [r5, #0]
 801c1a2:	461a      	mov	r2, r3
 801c1a4:	f001 ff90 	bl	801e0c8 <_read>
 801c1a8:	1c43      	adds	r3, r0, #1
 801c1aa:	d102      	bne.n	801c1b2 <_read_r+0x1e>
 801c1ac:	682b      	ldr	r3, [r5, #0]
 801c1ae:	b103      	cbz	r3, 801c1b2 <_read_r+0x1e>
 801c1b0:	6023      	str	r3, [r4, #0]
 801c1b2:	bd38      	pop	{r3, r4, r5, pc}
 801c1b4:	20001ed8 	.word	0x20001ed8

0801c1b8 <_write_r>:
 801c1b8:	b538      	push	{r3, r4, r5, lr}
 801c1ba:	4d07      	ldr	r5, [pc, #28]	@ (801c1d8 <_write_r+0x20>)
 801c1bc:	4604      	mov	r4, r0
 801c1be:	4608      	mov	r0, r1
 801c1c0:	4611      	mov	r1, r2
 801c1c2:	2200      	movs	r2, #0
 801c1c4:	602a      	str	r2, [r5, #0]
 801c1c6:	461a      	mov	r2, r3
 801c1c8:	f001 ff94 	bl	801e0f4 <_write>
 801c1cc:	1c43      	adds	r3, r0, #1
 801c1ce:	d102      	bne.n	801c1d6 <_write_r+0x1e>
 801c1d0:	682b      	ldr	r3, [r5, #0]
 801c1d2:	b103      	cbz	r3, 801c1d6 <_write_r+0x1e>
 801c1d4:	6023      	str	r3, [r4, #0]
 801c1d6:	bd38      	pop	{r3, r4, r5, pc}
 801c1d8:	20001ed8 	.word	0x20001ed8

0801c1dc <__libc_init_array>:
 801c1dc:	b570      	push	{r4, r5, r6, lr}
 801c1de:	4d0d      	ldr	r5, [pc, #52]	@ (801c214 <__libc_init_array+0x38>)
 801c1e0:	4c0d      	ldr	r4, [pc, #52]	@ (801c218 <__libc_init_array+0x3c>)
 801c1e2:	1b64      	subs	r4, r4, r5
 801c1e4:	10a4      	asrs	r4, r4, #2
 801c1e6:	2600      	movs	r6, #0
 801c1e8:	42a6      	cmp	r6, r4
 801c1ea:	d109      	bne.n	801c200 <__libc_init_array+0x24>
 801c1ec:	4d0b      	ldr	r5, [pc, #44]	@ (801c21c <__libc_init_array+0x40>)
 801c1ee:	4c0c      	ldr	r4, [pc, #48]	@ (801c220 <__libc_init_array+0x44>)
 801c1f0:	f001 ff8a 	bl	801e108 <_init>
 801c1f4:	1b64      	subs	r4, r4, r5
 801c1f6:	10a4      	asrs	r4, r4, #2
 801c1f8:	2600      	movs	r6, #0
 801c1fa:	42a6      	cmp	r6, r4
 801c1fc:	d105      	bne.n	801c20a <__libc_init_array+0x2e>
 801c1fe:	bd70      	pop	{r4, r5, r6, pc}
 801c200:	f855 3b04 	ldr.w	r3, [r5], #4
 801c204:	4798      	blx	r3
 801c206:	3601      	adds	r6, #1
 801c208:	e7ee      	b.n	801c1e8 <__libc_init_array+0xc>
 801c20a:	f855 3b04 	ldr.w	r3, [r5], #4
 801c20e:	4798      	blx	r3
 801c210:	3601      	adds	r6, #1
 801c212:	e7f2      	b.n	801c1fa <__libc_init_array+0x1e>
 801c214:	0801f0b0 	.word	0x0801f0b0
 801c218:	0801f0b0 	.word	0x0801f0b0
 801c21c:	0801f0b0 	.word	0x0801f0b0
 801c220:	0801f0b4 	.word	0x0801f0b4

0801c224 <__retarget_lock_init_recursive>:
 801c224:	4770      	bx	lr

0801c226 <__retarget_lock_acquire_recursive>:
 801c226:	4770      	bx	lr

0801c228 <__retarget_lock_release_recursive>:
 801c228:	4770      	bx	lr

0801c22a <quorem>:
 801c22a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c22e:	6903      	ldr	r3, [r0, #16]
 801c230:	690c      	ldr	r4, [r1, #16]
 801c232:	42a3      	cmp	r3, r4
 801c234:	4607      	mov	r7, r0
 801c236:	db7e      	blt.n	801c336 <quorem+0x10c>
 801c238:	3c01      	subs	r4, #1
 801c23a:	f101 0814 	add.w	r8, r1, #20
 801c23e:	00a3      	lsls	r3, r4, #2
 801c240:	f100 0514 	add.w	r5, r0, #20
 801c244:	9300      	str	r3, [sp, #0]
 801c246:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c24a:	9301      	str	r3, [sp, #4]
 801c24c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c250:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c254:	3301      	adds	r3, #1
 801c256:	429a      	cmp	r2, r3
 801c258:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c25c:	fbb2 f6f3 	udiv	r6, r2, r3
 801c260:	d32e      	bcc.n	801c2c0 <quorem+0x96>
 801c262:	f04f 0a00 	mov.w	sl, #0
 801c266:	46c4      	mov	ip, r8
 801c268:	46ae      	mov	lr, r5
 801c26a:	46d3      	mov	fp, sl
 801c26c:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c270:	b298      	uxth	r0, r3
 801c272:	fb06 a000 	mla	r0, r6, r0, sl
 801c276:	0c02      	lsrs	r2, r0, #16
 801c278:	0c1b      	lsrs	r3, r3, #16
 801c27a:	fb06 2303 	mla	r3, r6, r3, r2
 801c27e:	f8de 2000 	ldr.w	r2, [lr]
 801c282:	b280      	uxth	r0, r0
 801c284:	b292      	uxth	r2, r2
 801c286:	1a12      	subs	r2, r2, r0
 801c288:	445a      	add	r2, fp
 801c28a:	f8de 0000 	ldr.w	r0, [lr]
 801c28e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c292:	b29b      	uxth	r3, r3
 801c294:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801c298:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801c29c:	b292      	uxth	r2, r2
 801c29e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801c2a2:	45e1      	cmp	r9, ip
 801c2a4:	f84e 2b04 	str.w	r2, [lr], #4
 801c2a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801c2ac:	d2de      	bcs.n	801c26c <quorem+0x42>
 801c2ae:	9b00      	ldr	r3, [sp, #0]
 801c2b0:	58eb      	ldr	r3, [r5, r3]
 801c2b2:	b92b      	cbnz	r3, 801c2c0 <quorem+0x96>
 801c2b4:	9b01      	ldr	r3, [sp, #4]
 801c2b6:	3b04      	subs	r3, #4
 801c2b8:	429d      	cmp	r5, r3
 801c2ba:	461a      	mov	r2, r3
 801c2bc:	d32f      	bcc.n	801c31e <quorem+0xf4>
 801c2be:	613c      	str	r4, [r7, #16]
 801c2c0:	4638      	mov	r0, r7
 801c2c2:	f001 f97f 	bl	801d5c4 <__mcmp>
 801c2c6:	2800      	cmp	r0, #0
 801c2c8:	db25      	blt.n	801c316 <quorem+0xec>
 801c2ca:	4629      	mov	r1, r5
 801c2cc:	2000      	movs	r0, #0
 801c2ce:	f858 2b04 	ldr.w	r2, [r8], #4
 801c2d2:	f8d1 c000 	ldr.w	ip, [r1]
 801c2d6:	fa1f fe82 	uxth.w	lr, r2
 801c2da:	fa1f f38c 	uxth.w	r3, ip
 801c2de:	eba3 030e 	sub.w	r3, r3, lr
 801c2e2:	4403      	add	r3, r0
 801c2e4:	0c12      	lsrs	r2, r2, #16
 801c2e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801c2ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801c2ee:	b29b      	uxth	r3, r3
 801c2f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c2f4:	45c1      	cmp	r9, r8
 801c2f6:	f841 3b04 	str.w	r3, [r1], #4
 801c2fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c2fe:	d2e6      	bcs.n	801c2ce <quorem+0xa4>
 801c300:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c304:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c308:	b922      	cbnz	r2, 801c314 <quorem+0xea>
 801c30a:	3b04      	subs	r3, #4
 801c30c:	429d      	cmp	r5, r3
 801c30e:	461a      	mov	r2, r3
 801c310:	d30b      	bcc.n	801c32a <quorem+0x100>
 801c312:	613c      	str	r4, [r7, #16]
 801c314:	3601      	adds	r6, #1
 801c316:	4630      	mov	r0, r6
 801c318:	b003      	add	sp, #12
 801c31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c31e:	6812      	ldr	r2, [r2, #0]
 801c320:	3b04      	subs	r3, #4
 801c322:	2a00      	cmp	r2, #0
 801c324:	d1cb      	bne.n	801c2be <quorem+0x94>
 801c326:	3c01      	subs	r4, #1
 801c328:	e7c6      	b.n	801c2b8 <quorem+0x8e>
 801c32a:	6812      	ldr	r2, [r2, #0]
 801c32c:	3b04      	subs	r3, #4
 801c32e:	2a00      	cmp	r2, #0
 801c330:	d1ef      	bne.n	801c312 <quorem+0xe8>
 801c332:	3c01      	subs	r4, #1
 801c334:	e7ea      	b.n	801c30c <quorem+0xe2>
 801c336:	2000      	movs	r0, #0
 801c338:	e7ee      	b.n	801c318 <quorem+0xee>
 801c33a:	0000      	movs	r0, r0
 801c33c:	0000      	movs	r0, r0
	...

0801c340 <_dtoa_r>:
 801c340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c344:	69c7      	ldr	r7, [r0, #28]
 801c346:	b097      	sub	sp, #92	@ 0x5c
 801c348:	4614      	mov	r4, r2
 801c34a:	461d      	mov	r5, r3
 801c34c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801c350:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801c352:	4683      	mov	fp, r0
 801c354:	b97f      	cbnz	r7, 801c376 <_dtoa_r+0x36>
 801c356:	2010      	movs	r0, #16
 801c358:	f000 fe04 	bl	801cf64 <malloc>
 801c35c:	4602      	mov	r2, r0
 801c35e:	f8cb 001c 	str.w	r0, [fp, #28]
 801c362:	b920      	cbnz	r0, 801c36e <_dtoa_r+0x2e>
 801c364:	4ba8      	ldr	r3, [pc, #672]	@ (801c608 <_dtoa_r+0x2c8>)
 801c366:	21ef      	movs	r1, #239	@ 0xef
 801c368:	48a8      	ldr	r0, [pc, #672]	@ (801c60c <_dtoa_r+0x2cc>)
 801c36a:	f001 faf7 	bl	801d95c <__assert_func>
 801c36e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801c372:	6007      	str	r7, [r0, #0]
 801c374:	60c7      	str	r7, [r0, #12]
 801c376:	f8db 301c 	ldr.w	r3, [fp, #28]
 801c37a:	6819      	ldr	r1, [r3, #0]
 801c37c:	b159      	cbz	r1, 801c396 <_dtoa_r+0x56>
 801c37e:	685a      	ldr	r2, [r3, #4]
 801c380:	604a      	str	r2, [r1, #4]
 801c382:	2301      	movs	r3, #1
 801c384:	4093      	lsls	r3, r2
 801c386:	608b      	str	r3, [r1, #8]
 801c388:	4658      	mov	r0, fp
 801c38a:	f000 fee1 	bl	801d150 <_Bfree>
 801c38e:	f8db 301c 	ldr.w	r3, [fp, #28]
 801c392:	2200      	movs	r2, #0
 801c394:	601a      	str	r2, [r3, #0]
 801c396:	1e2b      	subs	r3, r5, #0
 801c398:	bfb9      	ittee	lt
 801c39a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801c39e:	9303      	strlt	r3, [sp, #12]
 801c3a0:	2300      	movge	r3, #0
 801c3a2:	6033      	strge	r3, [r6, #0]
 801c3a4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801c3a8:	4b99      	ldr	r3, [pc, #612]	@ (801c610 <_dtoa_r+0x2d0>)
 801c3aa:	bfbc      	itt	lt
 801c3ac:	2201      	movlt	r2, #1
 801c3ae:	6032      	strlt	r2, [r6, #0]
 801c3b0:	ea33 0308 	bics.w	r3, r3, r8
 801c3b4:	d112      	bne.n	801c3dc <_dtoa_r+0x9c>
 801c3b6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801c3b8:	f242 730f 	movw	r3, #9999	@ 0x270f
 801c3bc:	6013      	str	r3, [r2, #0]
 801c3be:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801c3c2:	4323      	orrs	r3, r4
 801c3c4:	f000 8551 	beq.w	801ce6a <_dtoa_r+0xb2a>
 801c3c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c3ca:	f8df a248 	ldr.w	sl, [pc, #584]	@ 801c614 <_dtoa_r+0x2d4>
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	f000 8553 	beq.w	801ce7a <_dtoa_r+0xb3a>
 801c3d4:	f10a 0303 	add.w	r3, sl, #3
 801c3d8:	f000 bd4d 	b.w	801ce76 <_dtoa_r+0xb36>
 801c3dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c3e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801c3e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c3e8:	2200      	movs	r2, #0
 801c3ea:	2300      	movs	r3, #0
 801c3ec:	f7e4 fb44 	bl	8000a78 <__aeabi_dcmpeq>
 801c3f0:	4607      	mov	r7, r0
 801c3f2:	b158      	cbz	r0, 801c40c <_dtoa_r+0xcc>
 801c3f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801c3f6:	2301      	movs	r3, #1
 801c3f8:	6013      	str	r3, [r2, #0]
 801c3fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c3fc:	b113      	cbz	r3, 801c404 <_dtoa_r+0xc4>
 801c3fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c400:	4b85      	ldr	r3, [pc, #532]	@ (801c618 <_dtoa_r+0x2d8>)
 801c402:	6013      	str	r3, [r2, #0]
 801c404:	f8df a214 	ldr.w	sl, [pc, #532]	@ 801c61c <_dtoa_r+0x2dc>
 801c408:	f000 bd37 	b.w	801ce7a <_dtoa_r+0xb3a>
 801c40c:	ab14      	add	r3, sp, #80	@ 0x50
 801c40e:	9301      	str	r3, [sp, #4]
 801c410:	ab15      	add	r3, sp, #84	@ 0x54
 801c412:	9300      	str	r3, [sp, #0]
 801c414:	4658      	mov	r0, fp
 801c416:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801c41a:	f001 f981 	bl	801d720 <__d2b>
 801c41e:	f3c8 560a 	ubfx	r6, r8, #20, #11
 801c422:	4681      	mov	r9, r0
 801c424:	2e00      	cmp	r6, #0
 801c426:	d076      	beq.n	801c516 <_dtoa_r+0x1d6>
 801c428:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c42a:	9712      	str	r7, [sp, #72]	@ 0x48
 801c42c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c430:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c434:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801c438:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801c43c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801c440:	4619      	mov	r1, r3
 801c442:	2200      	movs	r2, #0
 801c444:	4b76      	ldr	r3, [pc, #472]	@ (801c620 <_dtoa_r+0x2e0>)
 801c446:	f7e3 fef7 	bl	8000238 <__aeabi_dsub>
 801c44a:	a369      	add	r3, pc, #420	@ (adr r3, 801c5f0 <_dtoa_r+0x2b0>)
 801c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c450:	f7e4 f8aa 	bl	80005a8 <__aeabi_dmul>
 801c454:	a368      	add	r3, pc, #416	@ (adr r3, 801c5f8 <_dtoa_r+0x2b8>)
 801c456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c45a:	f7e3 feef 	bl	800023c <__adddf3>
 801c45e:	4604      	mov	r4, r0
 801c460:	4630      	mov	r0, r6
 801c462:	460d      	mov	r5, r1
 801c464:	f7e4 f836 	bl	80004d4 <__aeabi_i2d>
 801c468:	a365      	add	r3, pc, #404	@ (adr r3, 801c600 <_dtoa_r+0x2c0>)
 801c46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c46e:	f7e4 f89b 	bl	80005a8 <__aeabi_dmul>
 801c472:	4602      	mov	r2, r0
 801c474:	460b      	mov	r3, r1
 801c476:	4620      	mov	r0, r4
 801c478:	4629      	mov	r1, r5
 801c47a:	f7e3 fedf 	bl	800023c <__adddf3>
 801c47e:	4604      	mov	r4, r0
 801c480:	460d      	mov	r5, r1
 801c482:	f7e4 fb41 	bl	8000b08 <__aeabi_d2iz>
 801c486:	2200      	movs	r2, #0
 801c488:	4607      	mov	r7, r0
 801c48a:	2300      	movs	r3, #0
 801c48c:	4620      	mov	r0, r4
 801c48e:	4629      	mov	r1, r5
 801c490:	f7e4 fafc 	bl	8000a8c <__aeabi_dcmplt>
 801c494:	b140      	cbz	r0, 801c4a8 <_dtoa_r+0x168>
 801c496:	4638      	mov	r0, r7
 801c498:	f7e4 f81c 	bl	80004d4 <__aeabi_i2d>
 801c49c:	4622      	mov	r2, r4
 801c49e:	462b      	mov	r3, r5
 801c4a0:	f7e4 faea 	bl	8000a78 <__aeabi_dcmpeq>
 801c4a4:	b900      	cbnz	r0, 801c4a8 <_dtoa_r+0x168>
 801c4a6:	3f01      	subs	r7, #1
 801c4a8:	2f16      	cmp	r7, #22
 801c4aa:	d852      	bhi.n	801c552 <_dtoa_r+0x212>
 801c4ac:	4b5d      	ldr	r3, [pc, #372]	@ (801c624 <_dtoa_r+0x2e4>)
 801c4ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801c4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c4ba:	f7e4 fae7 	bl	8000a8c <__aeabi_dcmplt>
 801c4be:	2800      	cmp	r0, #0
 801c4c0:	d049      	beq.n	801c556 <_dtoa_r+0x216>
 801c4c2:	3f01      	subs	r7, #1
 801c4c4:	2300      	movs	r3, #0
 801c4c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c4c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c4ca:	1b9b      	subs	r3, r3, r6
 801c4cc:	1e5a      	subs	r2, r3, #1
 801c4ce:	bf44      	itt	mi
 801c4d0:	f1c3 0801 	rsbmi	r8, r3, #1
 801c4d4:	2300      	movmi	r3, #0
 801c4d6:	9209      	str	r2, [sp, #36]	@ 0x24
 801c4d8:	bf54      	ite	pl
 801c4da:	f04f 0800 	movpl.w	r8, #0
 801c4de:	9309      	strmi	r3, [sp, #36]	@ 0x24
 801c4e0:	2f00      	cmp	r7, #0
 801c4e2:	db3a      	blt.n	801c55a <_dtoa_r+0x21a>
 801c4e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c4e6:	970e      	str	r7, [sp, #56]	@ 0x38
 801c4e8:	443b      	add	r3, r7
 801c4ea:	9309      	str	r3, [sp, #36]	@ 0x24
 801c4ec:	2300      	movs	r3, #0
 801c4ee:	930a      	str	r3, [sp, #40]	@ 0x28
 801c4f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c4f2:	2b09      	cmp	r3, #9
 801c4f4:	d865      	bhi.n	801c5c2 <_dtoa_r+0x282>
 801c4f6:	2b05      	cmp	r3, #5
 801c4f8:	bfc4      	itt	gt
 801c4fa:	3b04      	subgt	r3, #4
 801c4fc:	9320      	strgt	r3, [sp, #128]	@ 0x80
 801c4fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c500:	f1a3 0302 	sub.w	r3, r3, #2
 801c504:	bfcc      	ite	gt
 801c506:	2400      	movgt	r4, #0
 801c508:	2401      	movle	r4, #1
 801c50a:	2b03      	cmp	r3, #3
 801c50c:	d864      	bhi.n	801c5d8 <_dtoa_r+0x298>
 801c50e:	e8df f003 	tbb	[pc, r3]
 801c512:	382b      	.short	0x382b
 801c514:	5636      	.short	0x5636
 801c516:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801c51a:	441e      	add	r6, r3
 801c51c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801c520:	2b20      	cmp	r3, #32
 801c522:	bfc1      	itttt	gt
 801c524:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801c528:	fa08 f803 	lslgt.w	r8, r8, r3
 801c52c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801c530:	fa24 f303 	lsrgt.w	r3, r4, r3
 801c534:	bfd6      	itet	le
 801c536:	f1c3 0320 	rsble	r3, r3, #32
 801c53a:	ea48 0003 	orrgt.w	r0, r8, r3
 801c53e:	fa04 f003 	lslle.w	r0, r4, r3
 801c542:	f7e3 ffb7 	bl	80004b4 <__aeabi_ui2d>
 801c546:	2201      	movs	r2, #1
 801c548:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801c54c:	3e01      	subs	r6, #1
 801c54e:	9212      	str	r2, [sp, #72]	@ 0x48
 801c550:	e776      	b.n	801c440 <_dtoa_r+0x100>
 801c552:	2301      	movs	r3, #1
 801c554:	e7b7      	b.n	801c4c6 <_dtoa_r+0x186>
 801c556:	900f      	str	r0, [sp, #60]	@ 0x3c
 801c558:	e7b6      	b.n	801c4c8 <_dtoa_r+0x188>
 801c55a:	427b      	negs	r3, r7
 801c55c:	930a      	str	r3, [sp, #40]	@ 0x28
 801c55e:	2300      	movs	r3, #0
 801c560:	eba8 0807 	sub.w	r8, r8, r7
 801c564:	930e      	str	r3, [sp, #56]	@ 0x38
 801c566:	e7c3      	b.n	801c4f0 <_dtoa_r+0x1b0>
 801c568:	2300      	movs	r3, #0
 801c56a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c56c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c56e:	2b00      	cmp	r3, #0
 801c570:	dc35      	bgt.n	801c5de <_dtoa_r+0x29e>
 801c572:	2301      	movs	r3, #1
 801c574:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801c578:	461a      	mov	r2, r3
 801c57a:	9221      	str	r2, [sp, #132]	@ 0x84
 801c57c:	e00b      	b.n	801c596 <_dtoa_r+0x256>
 801c57e:	2301      	movs	r3, #1
 801c580:	e7f3      	b.n	801c56a <_dtoa_r+0x22a>
 801c582:	2300      	movs	r3, #0
 801c584:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c586:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c588:	18fb      	adds	r3, r7, r3
 801c58a:	9308      	str	r3, [sp, #32]
 801c58c:	3301      	adds	r3, #1
 801c58e:	2b01      	cmp	r3, #1
 801c590:	9307      	str	r3, [sp, #28]
 801c592:	bfb8      	it	lt
 801c594:	2301      	movlt	r3, #1
 801c596:	f8db 001c 	ldr.w	r0, [fp, #28]
 801c59a:	2100      	movs	r1, #0
 801c59c:	2204      	movs	r2, #4
 801c59e:	f102 0514 	add.w	r5, r2, #20
 801c5a2:	429d      	cmp	r5, r3
 801c5a4:	d91f      	bls.n	801c5e6 <_dtoa_r+0x2a6>
 801c5a6:	6041      	str	r1, [r0, #4]
 801c5a8:	4658      	mov	r0, fp
 801c5aa:	f000 fd91 	bl	801d0d0 <_Balloc>
 801c5ae:	4682      	mov	sl, r0
 801c5b0:	2800      	cmp	r0, #0
 801c5b2:	d13b      	bne.n	801c62c <_dtoa_r+0x2ec>
 801c5b4:	4b1c      	ldr	r3, [pc, #112]	@ (801c628 <_dtoa_r+0x2e8>)
 801c5b6:	4602      	mov	r2, r0
 801c5b8:	f240 11af 	movw	r1, #431	@ 0x1af
 801c5bc:	e6d4      	b.n	801c368 <_dtoa_r+0x28>
 801c5be:	2301      	movs	r3, #1
 801c5c0:	e7e0      	b.n	801c584 <_dtoa_r+0x244>
 801c5c2:	2401      	movs	r4, #1
 801c5c4:	2300      	movs	r3, #0
 801c5c6:	9320      	str	r3, [sp, #128]	@ 0x80
 801c5c8:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c5ca:	f04f 33ff 	mov.w	r3, #4294967295
 801c5ce:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801c5d2:	2200      	movs	r2, #0
 801c5d4:	2312      	movs	r3, #18
 801c5d6:	e7d0      	b.n	801c57a <_dtoa_r+0x23a>
 801c5d8:	2301      	movs	r3, #1
 801c5da:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c5dc:	e7f5      	b.n	801c5ca <_dtoa_r+0x28a>
 801c5de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c5e0:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801c5e4:	e7d7      	b.n	801c596 <_dtoa_r+0x256>
 801c5e6:	3101      	adds	r1, #1
 801c5e8:	0052      	lsls	r2, r2, #1
 801c5ea:	e7d8      	b.n	801c59e <_dtoa_r+0x25e>
 801c5ec:	f3af 8000 	nop.w
 801c5f0:	636f4361 	.word	0x636f4361
 801c5f4:	3fd287a7 	.word	0x3fd287a7
 801c5f8:	8b60c8b3 	.word	0x8b60c8b3
 801c5fc:	3fc68a28 	.word	0x3fc68a28
 801c600:	509f79fb 	.word	0x509f79fb
 801c604:	3fd34413 	.word	0x3fd34413
 801c608:	0801eca1 	.word	0x0801eca1
 801c60c:	0801ecb8 	.word	0x0801ecb8
 801c610:	7ff00000 	.word	0x7ff00000
 801c614:	0801ec9d 	.word	0x0801ec9d
 801c618:	0801ec71 	.word	0x0801ec71
 801c61c:	0801ec70 	.word	0x0801ec70
 801c620:	3ff80000 	.word	0x3ff80000
 801c624:	0801edb0 	.word	0x0801edb0
 801c628:	0801ed10 	.word	0x0801ed10
 801c62c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801c630:	6018      	str	r0, [r3, #0]
 801c632:	9b07      	ldr	r3, [sp, #28]
 801c634:	2b0e      	cmp	r3, #14
 801c636:	f200 80a4 	bhi.w	801c782 <_dtoa_r+0x442>
 801c63a:	2c00      	cmp	r4, #0
 801c63c:	f000 80a1 	beq.w	801c782 <_dtoa_r+0x442>
 801c640:	2f00      	cmp	r7, #0
 801c642:	dd33      	ble.n	801c6ac <_dtoa_r+0x36c>
 801c644:	4b86      	ldr	r3, [pc, #536]	@ (801c860 <_dtoa_r+0x520>)
 801c646:	f007 020f 	and.w	r2, r7, #15
 801c64a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c64e:	e9d3 3400 	ldrd	r3, r4, [r3]
 801c652:	05f8      	lsls	r0, r7, #23
 801c654:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801c658:	ea4f 1427 	mov.w	r4, r7, asr #4
 801c65c:	d516      	bpl.n	801c68c <_dtoa_r+0x34c>
 801c65e:	4b81      	ldr	r3, [pc, #516]	@ (801c864 <_dtoa_r+0x524>)
 801c660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c664:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c668:	f7e4 f8c8 	bl	80007fc <__aeabi_ddiv>
 801c66c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c670:	f004 040f 	and.w	r4, r4, #15
 801c674:	2603      	movs	r6, #3
 801c676:	4d7b      	ldr	r5, [pc, #492]	@ (801c864 <_dtoa_r+0x524>)
 801c678:	b954      	cbnz	r4, 801c690 <_dtoa_r+0x350>
 801c67a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c67e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c682:	f7e4 f8bb 	bl	80007fc <__aeabi_ddiv>
 801c686:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c68a:	e028      	b.n	801c6de <_dtoa_r+0x39e>
 801c68c:	2602      	movs	r6, #2
 801c68e:	e7f2      	b.n	801c676 <_dtoa_r+0x336>
 801c690:	07e1      	lsls	r1, r4, #31
 801c692:	d508      	bpl.n	801c6a6 <_dtoa_r+0x366>
 801c694:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c698:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c69c:	f7e3 ff84 	bl	80005a8 <__aeabi_dmul>
 801c6a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c6a4:	3601      	adds	r6, #1
 801c6a6:	1064      	asrs	r4, r4, #1
 801c6a8:	3508      	adds	r5, #8
 801c6aa:	e7e5      	b.n	801c678 <_dtoa_r+0x338>
 801c6ac:	f000 80d2 	beq.w	801c854 <_dtoa_r+0x514>
 801c6b0:	427c      	negs	r4, r7
 801c6b2:	4b6b      	ldr	r3, [pc, #428]	@ (801c860 <_dtoa_r+0x520>)
 801c6b4:	4d6b      	ldr	r5, [pc, #428]	@ (801c864 <_dtoa_r+0x524>)
 801c6b6:	f004 020f 	and.w	r2, r4, #15
 801c6ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c6c6:	f7e3 ff6f 	bl	80005a8 <__aeabi_dmul>
 801c6ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c6ce:	1124      	asrs	r4, r4, #4
 801c6d0:	2300      	movs	r3, #0
 801c6d2:	2602      	movs	r6, #2
 801c6d4:	2c00      	cmp	r4, #0
 801c6d6:	f040 80b2 	bne.w	801c83e <_dtoa_r+0x4fe>
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d1d3      	bne.n	801c686 <_dtoa_r+0x346>
 801c6de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c6e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	f000 80b7 	beq.w	801c858 <_dtoa_r+0x518>
 801c6ea:	4b5f      	ldr	r3, [pc, #380]	@ (801c868 <_dtoa_r+0x528>)
 801c6ec:	2200      	movs	r2, #0
 801c6ee:	4620      	mov	r0, r4
 801c6f0:	4629      	mov	r1, r5
 801c6f2:	f7e4 f9cb 	bl	8000a8c <__aeabi_dcmplt>
 801c6f6:	2800      	cmp	r0, #0
 801c6f8:	f000 80ae 	beq.w	801c858 <_dtoa_r+0x518>
 801c6fc:	9b07      	ldr	r3, [sp, #28]
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	f000 80aa 	beq.w	801c858 <_dtoa_r+0x518>
 801c704:	9b08      	ldr	r3, [sp, #32]
 801c706:	2b00      	cmp	r3, #0
 801c708:	dd37      	ble.n	801c77a <_dtoa_r+0x43a>
 801c70a:	1e7b      	subs	r3, r7, #1
 801c70c:	9304      	str	r3, [sp, #16]
 801c70e:	4620      	mov	r0, r4
 801c710:	4b56      	ldr	r3, [pc, #344]	@ (801c86c <_dtoa_r+0x52c>)
 801c712:	2200      	movs	r2, #0
 801c714:	4629      	mov	r1, r5
 801c716:	f7e3 ff47 	bl	80005a8 <__aeabi_dmul>
 801c71a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c71e:	9c08      	ldr	r4, [sp, #32]
 801c720:	3601      	adds	r6, #1
 801c722:	4630      	mov	r0, r6
 801c724:	f7e3 fed6 	bl	80004d4 <__aeabi_i2d>
 801c728:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c72c:	f7e3 ff3c 	bl	80005a8 <__aeabi_dmul>
 801c730:	4b4f      	ldr	r3, [pc, #316]	@ (801c870 <_dtoa_r+0x530>)
 801c732:	2200      	movs	r2, #0
 801c734:	f7e3 fd82 	bl	800023c <__adddf3>
 801c738:	4605      	mov	r5, r0
 801c73a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801c73e:	2c00      	cmp	r4, #0
 801c740:	f040 809a 	bne.w	801c878 <_dtoa_r+0x538>
 801c744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c748:	4b4a      	ldr	r3, [pc, #296]	@ (801c874 <_dtoa_r+0x534>)
 801c74a:	2200      	movs	r2, #0
 801c74c:	f7e3 fd74 	bl	8000238 <__aeabi_dsub>
 801c750:	4602      	mov	r2, r0
 801c752:	460b      	mov	r3, r1
 801c754:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c758:	462a      	mov	r2, r5
 801c75a:	4633      	mov	r3, r6
 801c75c:	f7e4 f9b4 	bl	8000ac8 <__aeabi_dcmpgt>
 801c760:	2800      	cmp	r0, #0
 801c762:	f040 828e 	bne.w	801cc82 <_dtoa_r+0x942>
 801c766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c76a:	462a      	mov	r2, r5
 801c76c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801c770:	f7e4 f98c 	bl	8000a8c <__aeabi_dcmplt>
 801c774:	2800      	cmp	r0, #0
 801c776:	f040 8127 	bne.w	801c9c8 <_dtoa_r+0x688>
 801c77a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801c77e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801c782:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c784:	2b00      	cmp	r3, #0
 801c786:	f2c0 8163 	blt.w	801ca50 <_dtoa_r+0x710>
 801c78a:	2f0e      	cmp	r7, #14
 801c78c:	f300 8160 	bgt.w	801ca50 <_dtoa_r+0x710>
 801c790:	4b33      	ldr	r3, [pc, #204]	@ (801c860 <_dtoa_r+0x520>)
 801c792:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801c796:	e9d3 3400 	ldrd	r3, r4, [r3]
 801c79a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801c79e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	da03      	bge.n	801c7ac <_dtoa_r+0x46c>
 801c7a4:	9b07      	ldr	r3, [sp, #28]
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	f340 8100 	ble.w	801c9ac <_dtoa_r+0x66c>
 801c7ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801c7b0:	4656      	mov	r6, sl
 801c7b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c7b6:	4620      	mov	r0, r4
 801c7b8:	4629      	mov	r1, r5
 801c7ba:	f7e4 f81f 	bl	80007fc <__aeabi_ddiv>
 801c7be:	f7e4 f9a3 	bl	8000b08 <__aeabi_d2iz>
 801c7c2:	4680      	mov	r8, r0
 801c7c4:	f7e3 fe86 	bl	80004d4 <__aeabi_i2d>
 801c7c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c7cc:	f7e3 feec 	bl	80005a8 <__aeabi_dmul>
 801c7d0:	4602      	mov	r2, r0
 801c7d2:	460b      	mov	r3, r1
 801c7d4:	4620      	mov	r0, r4
 801c7d6:	4629      	mov	r1, r5
 801c7d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801c7dc:	f7e3 fd2c 	bl	8000238 <__aeabi_dsub>
 801c7e0:	f806 4b01 	strb.w	r4, [r6], #1
 801c7e4:	9d07      	ldr	r5, [sp, #28]
 801c7e6:	eba6 040a 	sub.w	r4, r6, sl
 801c7ea:	42a5      	cmp	r5, r4
 801c7ec:	4602      	mov	r2, r0
 801c7ee:	460b      	mov	r3, r1
 801c7f0:	f040 8116 	bne.w	801ca20 <_dtoa_r+0x6e0>
 801c7f4:	f7e3 fd22 	bl	800023c <__adddf3>
 801c7f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c7fc:	4604      	mov	r4, r0
 801c7fe:	460d      	mov	r5, r1
 801c800:	f7e4 f962 	bl	8000ac8 <__aeabi_dcmpgt>
 801c804:	2800      	cmp	r0, #0
 801c806:	f040 80f8 	bne.w	801c9fa <_dtoa_r+0x6ba>
 801c80a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c80e:	4620      	mov	r0, r4
 801c810:	4629      	mov	r1, r5
 801c812:	f7e4 f931 	bl	8000a78 <__aeabi_dcmpeq>
 801c816:	b118      	cbz	r0, 801c820 <_dtoa_r+0x4e0>
 801c818:	f018 0f01 	tst.w	r8, #1
 801c81c:	f040 80ed 	bne.w	801c9fa <_dtoa_r+0x6ba>
 801c820:	4649      	mov	r1, r9
 801c822:	4658      	mov	r0, fp
 801c824:	f000 fc94 	bl	801d150 <_Bfree>
 801c828:	2300      	movs	r3, #0
 801c82a:	7033      	strb	r3, [r6, #0]
 801c82c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c82e:	3701      	adds	r7, #1
 801c830:	601f      	str	r7, [r3, #0]
 801c832:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c834:	2b00      	cmp	r3, #0
 801c836:	f000 8320 	beq.w	801ce7a <_dtoa_r+0xb3a>
 801c83a:	601e      	str	r6, [r3, #0]
 801c83c:	e31d      	b.n	801ce7a <_dtoa_r+0xb3a>
 801c83e:	07e2      	lsls	r2, r4, #31
 801c840:	d505      	bpl.n	801c84e <_dtoa_r+0x50e>
 801c842:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c846:	f7e3 feaf 	bl	80005a8 <__aeabi_dmul>
 801c84a:	3601      	adds	r6, #1
 801c84c:	2301      	movs	r3, #1
 801c84e:	1064      	asrs	r4, r4, #1
 801c850:	3508      	adds	r5, #8
 801c852:	e73f      	b.n	801c6d4 <_dtoa_r+0x394>
 801c854:	2602      	movs	r6, #2
 801c856:	e742      	b.n	801c6de <_dtoa_r+0x39e>
 801c858:	9c07      	ldr	r4, [sp, #28]
 801c85a:	9704      	str	r7, [sp, #16]
 801c85c:	e761      	b.n	801c722 <_dtoa_r+0x3e2>
 801c85e:	bf00      	nop
 801c860:	0801edb0 	.word	0x0801edb0
 801c864:	0801ed88 	.word	0x0801ed88
 801c868:	3ff00000 	.word	0x3ff00000
 801c86c:	40240000 	.word	0x40240000
 801c870:	401c0000 	.word	0x401c0000
 801c874:	40140000 	.word	0x40140000
 801c878:	4b70      	ldr	r3, [pc, #448]	@ (801ca3c <_dtoa_r+0x6fc>)
 801c87a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c87c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c880:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c884:	4454      	add	r4, sl
 801c886:	2900      	cmp	r1, #0
 801c888:	d045      	beq.n	801c916 <_dtoa_r+0x5d6>
 801c88a:	496d      	ldr	r1, [pc, #436]	@ (801ca40 <_dtoa_r+0x700>)
 801c88c:	2000      	movs	r0, #0
 801c88e:	f7e3 ffb5 	bl	80007fc <__aeabi_ddiv>
 801c892:	4633      	mov	r3, r6
 801c894:	462a      	mov	r2, r5
 801c896:	f7e3 fccf 	bl	8000238 <__aeabi_dsub>
 801c89a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c89e:	4656      	mov	r6, sl
 801c8a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c8a4:	f7e4 f930 	bl	8000b08 <__aeabi_d2iz>
 801c8a8:	4605      	mov	r5, r0
 801c8aa:	f7e3 fe13 	bl	80004d4 <__aeabi_i2d>
 801c8ae:	4602      	mov	r2, r0
 801c8b0:	460b      	mov	r3, r1
 801c8b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c8b6:	f7e3 fcbf 	bl	8000238 <__aeabi_dsub>
 801c8ba:	3530      	adds	r5, #48	@ 0x30
 801c8bc:	4602      	mov	r2, r0
 801c8be:	460b      	mov	r3, r1
 801c8c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c8c4:	f806 5b01 	strb.w	r5, [r6], #1
 801c8c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c8cc:	f7e4 f8de 	bl	8000a8c <__aeabi_dcmplt>
 801c8d0:	2800      	cmp	r0, #0
 801c8d2:	d163      	bne.n	801c99c <_dtoa_r+0x65c>
 801c8d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c8d8:	495a      	ldr	r1, [pc, #360]	@ (801ca44 <_dtoa_r+0x704>)
 801c8da:	2000      	movs	r0, #0
 801c8dc:	f7e3 fcac 	bl	8000238 <__aeabi_dsub>
 801c8e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c8e4:	f7e4 f8d2 	bl	8000a8c <__aeabi_dcmplt>
 801c8e8:	2800      	cmp	r0, #0
 801c8ea:	f040 8087 	bne.w	801c9fc <_dtoa_r+0x6bc>
 801c8ee:	42a6      	cmp	r6, r4
 801c8f0:	f43f af43 	beq.w	801c77a <_dtoa_r+0x43a>
 801c8f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801c8f8:	4b53      	ldr	r3, [pc, #332]	@ (801ca48 <_dtoa_r+0x708>)
 801c8fa:	2200      	movs	r2, #0
 801c8fc:	f7e3 fe54 	bl	80005a8 <__aeabi_dmul>
 801c900:	4b51      	ldr	r3, [pc, #324]	@ (801ca48 <_dtoa_r+0x708>)
 801c902:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c906:	2200      	movs	r2, #0
 801c908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c90c:	f7e3 fe4c 	bl	80005a8 <__aeabi_dmul>
 801c910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c914:	e7c4      	b.n	801c8a0 <_dtoa_r+0x560>
 801c916:	4631      	mov	r1, r6
 801c918:	4628      	mov	r0, r5
 801c91a:	f7e3 fe45 	bl	80005a8 <__aeabi_dmul>
 801c91e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c922:	9413      	str	r4, [sp, #76]	@ 0x4c
 801c924:	4656      	mov	r6, sl
 801c926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c92a:	f7e4 f8ed 	bl	8000b08 <__aeabi_d2iz>
 801c92e:	4605      	mov	r5, r0
 801c930:	f7e3 fdd0 	bl	80004d4 <__aeabi_i2d>
 801c934:	4602      	mov	r2, r0
 801c936:	460b      	mov	r3, r1
 801c938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c93c:	f7e3 fc7c 	bl	8000238 <__aeabi_dsub>
 801c940:	3530      	adds	r5, #48	@ 0x30
 801c942:	f806 5b01 	strb.w	r5, [r6], #1
 801c946:	4602      	mov	r2, r0
 801c948:	460b      	mov	r3, r1
 801c94a:	42a6      	cmp	r6, r4
 801c94c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c950:	f04f 0200 	mov.w	r2, #0
 801c954:	d124      	bne.n	801c9a0 <_dtoa_r+0x660>
 801c956:	4b3a      	ldr	r3, [pc, #232]	@ (801ca40 <_dtoa_r+0x700>)
 801c958:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801c95c:	f7e3 fc6e 	bl	800023c <__adddf3>
 801c960:	4602      	mov	r2, r0
 801c962:	460b      	mov	r3, r1
 801c964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c968:	f7e4 f8ae 	bl	8000ac8 <__aeabi_dcmpgt>
 801c96c:	2800      	cmp	r0, #0
 801c96e:	d145      	bne.n	801c9fc <_dtoa_r+0x6bc>
 801c970:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c974:	4932      	ldr	r1, [pc, #200]	@ (801ca40 <_dtoa_r+0x700>)
 801c976:	2000      	movs	r0, #0
 801c978:	f7e3 fc5e 	bl	8000238 <__aeabi_dsub>
 801c97c:	4602      	mov	r2, r0
 801c97e:	460b      	mov	r3, r1
 801c980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c984:	f7e4 f882 	bl	8000a8c <__aeabi_dcmplt>
 801c988:	2800      	cmp	r0, #0
 801c98a:	f43f aef6 	beq.w	801c77a <_dtoa_r+0x43a>
 801c98e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801c990:	1e73      	subs	r3, r6, #1
 801c992:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c994:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c998:	2b30      	cmp	r3, #48	@ 0x30
 801c99a:	d0f8      	beq.n	801c98e <_dtoa_r+0x64e>
 801c99c:	9f04      	ldr	r7, [sp, #16]
 801c99e:	e73f      	b.n	801c820 <_dtoa_r+0x4e0>
 801c9a0:	4b29      	ldr	r3, [pc, #164]	@ (801ca48 <_dtoa_r+0x708>)
 801c9a2:	f7e3 fe01 	bl	80005a8 <__aeabi_dmul>
 801c9a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c9aa:	e7bc      	b.n	801c926 <_dtoa_r+0x5e6>
 801c9ac:	d10c      	bne.n	801c9c8 <_dtoa_r+0x688>
 801c9ae:	4b27      	ldr	r3, [pc, #156]	@ (801ca4c <_dtoa_r+0x70c>)
 801c9b0:	2200      	movs	r2, #0
 801c9b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c9b6:	f7e3 fdf7 	bl	80005a8 <__aeabi_dmul>
 801c9ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c9be:	f7e4 f879 	bl	8000ab4 <__aeabi_dcmpge>
 801c9c2:	2800      	cmp	r0, #0
 801c9c4:	f000 815b 	beq.w	801cc7e <_dtoa_r+0x93e>
 801c9c8:	2400      	movs	r4, #0
 801c9ca:	4625      	mov	r5, r4
 801c9cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c9ce:	43db      	mvns	r3, r3
 801c9d0:	9304      	str	r3, [sp, #16]
 801c9d2:	4656      	mov	r6, sl
 801c9d4:	2700      	movs	r7, #0
 801c9d6:	4621      	mov	r1, r4
 801c9d8:	4658      	mov	r0, fp
 801c9da:	f000 fbb9 	bl	801d150 <_Bfree>
 801c9de:	2d00      	cmp	r5, #0
 801c9e0:	d0dc      	beq.n	801c99c <_dtoa_r+0x65c>
 801c9e2:	b12f      	cbz	r7, 801c9f0 <_dtoa_r+0x6b0>
 801c9e4:	42af      	cmp	r7, r5
 801c9e6:	d003      	beq.n	801c9f0 <_dtoa_r+0x6b0>
 801c9e8:	4639      	mov	r1, r7
 801c9ea:	4658      	mov	r0, fp
 801c9ec:	f000 fbb0 	bl	801d150 <_Bfree>
 801c9f0:	4629      	mov	r1, r5
 801c9f2:	4658      	mov	r0, fp
 801c9f4:	f000 fbac 	bl	801d150 <_Bfree>
 801c9f8:	e7d0      	b.n	801c99c <_dtoa_r+0x65c>
 801c9fa:	9704      	str	r7, [sp, #16]
 801c9fc:	4633      	mov	r3, r6
 801c9fe:	461e      	mov	r6, r3
 801ca00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ca04:	2a39      	cmp	r2, #57	@ 0x39
 801ca06:	d107      	bne.n	801ca18 <_dtoa_r+0x6d8>
 801ca08:	459a      	cmp	sl, r3
 801ca0a:	d1f8      	bne.n	801c9fe <_dtoa_r+0x6be>
 801ca0c:	9a04      	ldr	r2, [sp, #16]
 801ca0e:	3201      	adds	r2, #1
 801ca10:	9204      	str	r2, [sp, #16]
 801ca12:	2230      	movs	r2, #48	@ 0x30
 801ca14:	f88a 2000 	strb.w	r2, [sl]
 801ca18:	781a      	ldrb	r2, [r3, #0]
 801ca1a:	3201      	adds	r2, #1
 801ca1c:	701a      	strb	r2, [r3, #0]
 801ca1e:	e7bd      	b.n	801c99c <_dtoa_r+0x65c>
 801ca20:	4b09      	ldr	r3, [pc, #36]	@ (801ca48 <_dtoa_r+0x708>)
 801ca22:	2200      	movs	r2, #0
 801ca24:	f7e3 fdc0 	bl	80005a8 <__aeabi_dmul>
 801ca28:	2200      	movs	r2, #0
 801ca2a:	2300      	movs	r3, #0
 801ca2c:	4604      	mov	r4, r0
 801ca2e:	460d      	mov	r5, r1
 801ca30:	f7e4 f822 	bl	8000a78 <__aeabi_dcmpeq>
 801ca34:	2800      	cmp	r0, #0
 801ca36:	f43f aebc 	beq.w	801c7b2 <_dtoa_r+0x472>
 801ca3a:	e6f1      	b.n	801c820 <_dtoa_r+0x4e0>
 801ca3c:	0801edb0 	.word	0x0801edb0
 801ca40:	3fe00000 	.word	0x3fe00000
 801ca44:	3ff00000 	.word	0x3ff00000
 801ca48:	40240000 	.word	0x40240000
 801ca4c:	40140000 	.word	0x40140000
 801ca50:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ca52:	2a00      	cmp	r2, #0
 801ca54:	f000 80db 	beq.w	801cc0e <_dtoa_r+0x8ce>
 801ca58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ca5a:	2a01      	cmp	r2, #1
 801ca5c:	f300 80bf 	bgt.w	801cbde <_dtoa_r+0x89e>
 801ca60:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ca62:	2a00      	cmp	r2, #0
 801ca64:	f000 80b7 	beq.w	801cbd6 <_dtoa_r+0x896>
 801ca68:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801ca6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ca6e:	4646      	mov	r6, r8
 801ca70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ca72:	2101      	movs	r1, #1
 801ca74:	441a      	add	r2, r3
 801ca76:	4658      	mov	r0, fp
 801ca78:	4498      	add	r8, r3
 801ca7a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ca7c:	f000 fc1c 	bl	801d2b8 <__i2b>
 801ca80:	4605      	mov	r5, r0
 801ca82:	b15e      	cbz	r6, 801ca9c <_dtoa_r+0x75c>
 801ca84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	dd08      	ble.n	801ca9c <_dtoa_r+0x75c>
 801ca8a:	42b3      	cmp	r3, r6
 801ca8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ca8e:	bfa8      	it	ge
 801ca90:	4633      	movge	r3, r6
 801ca92:	eba8 0803 	sub.w	r8, r8, r3
 801ca96:	1af6      	subs	r6, r6, r3
 801ca98:	1ad3      	subs	r3, r2, r3
 801ca9a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ca9e:	b1f3      	cbz	r3, 801cade <_dtoa_r+0x79e>
 801caa0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	f000 80b7 	beq.w	801cc16 <_dtoa_r+0x8d6>
 801caa8:	b18c      	cbz	r4, 801cace <_dtoa_r+0x78e>
 801caaa:	4629      	mov	r1, r5
 801caac:	4622      	mov	r2, r4
 801caae:	4658      	mov	r0, fp
 801cab0:	f000 fcc2 	bl	801d438 <__pow5mult>
 801cab4:	464a      	mov	r2, r9
 801cab6:	4601      	mov	r1, r0
 801cab8:	4605      	mov	r5, r0
 801caba:	4658      	mov	r0, fp
 801cabc:	f000 fc12 	bl	801d2e4 <__multiply>
 801cac0:	4649      	mov	r1, r9
 801cac2:	9004      	str	r0, [sp, #16]
 801cac4:	4658      	mov	r0, fp
 801cac6:	f000 fb43 	bl	801d150 <_Bfree>
 801caca:	9b04      	ldr	r3, [sp, #16]
 801cacc:	4699      	mov	r9, r3
 801cace:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cad0:	1b1a      	subs	r2, r3, r4
 801cad2:	d004      	beq.n	801cade <_dtoa_r+0x79e>
 801cad4:	4649      	mov	r1, r9
 801cad6:	4658      	mov	r0, fp
 801cad8:	f000 fcae 	bl	801d438 <__pow5mult>
 801cadc:	4681      	mov	r9, r0
 801cade:	2101      	movs	r1, #1
 801cae0:	4658      	mov	r0, fp
 801cae2:	f000 fbe9 	bl	801d2b8 <__i2b>
 801cae6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cae8:	4604      	mov	r4, r0
 801caea:	2b00      	cmp	r3, #0
 801caec:	f000 81c9 	beq.w	801ce82 <_dtoa_r+0xb42>
 801caf0:	461a      	mov	r2, r3
 801caf2:	4601      	mov	r1, r0
 801caf4:	4658      	mov	r0, fp
 801caf6:	f000 fc9f 	bl	801d438 <__pow5mult>
 801cafa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cafc:	2b01      	cmp	r3, #1
 801cafe:	4604      	mov	r4, r0
 801cb00:	f300 808f 	bgt.w	801cc22 <_dtoa_r+0x8e2>
 801cb04:	9b02      	ldr	r3, [sp, #8]
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	f040 8087 	bne.w	801cc1a <_dtoa_r+0x8da>
 801cb0c:	9b03      	ldr	r3, [sp, #12]
 801cb0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	f040 8083 	bne.w	801cc1e <_dtoa_r+0x8de>
 801cb18:	9b03      	ldr	r3, [sp, #12]
 801cb1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801cb1e:	0d1b      	lsrs	r3, r3, #20
 801cb20:	051b      	lsls	r3, r3, #20
 801cb22:	b12b      	cbz	r3, 801cb30 <_dtoa_r+0x7f0>
 801cb24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb26:	3301      	adds	r3, #1
 801cb28:	9309      	str	r3, [sp, #36]	@ 0x24
 801cb2a:	f108 0801 	add.w	r8, r8, #1
 801cb2e:	2301      	movs	r3, #1
 801cb30:	930a      	str	r3, [sp, #40]	@ 0x28
 801cb32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	f000 81aa 	beq.w	801ce8e <_dtoa_r+0xb4e>
 801cb3a:	6923      	ldr	r3, [r4, #16]
 801cb3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801cb40:	6918      	ldr	r0, [r3, #16]
 801cb42:	f000 fb6d 	bl	801d220 <__hi0bits>
 801cb46:	f1c0 0020 	rsb	r0, r0, #32
 801cb4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb4c:	4418      	add	r0, r3
 801cb4e:	f010 001f 	ands.w	r0, r0, #31
 801cb52:	d071      	beq.n	801cc38 <_dtoa_r+0x8f8>
 801cb54:	f1c0 0320 	rsb	r3, r0, #32
 801cb58:	2b04      	cmp	r3, #4
 801cb5a:	dd65      	ble.n	801cc28 <_dtoa_r+0x8e8>
 801cb5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb5e:	f1c0 001c 	rsb	r0, r0, #28
 801cb62:	4403      	add	r3, r0
 801cb64:	4480      	add	r8, r0
 801cb66:	4406      	add	r6, r0
 801cb68:	9309      	str	r3, [sp, #36]	@ 0x24
 801cb6a:	f1b8 0f00 	cmp.w	r8, #0
 801cb6e:	dd05      	ble.n	801cb7c <_dtoa_r+0x83c>
 801cb70:	4649      	mov	r1, r9
 801cb72:	4642      	mov	r2, r8
 801cb74:	4658      	mov	r0, fp
 801cb76:	f000 fcb9 	bl	801d4ec <__lshift>
 801cb7a:	4681      	mov	r9, r0
 801cb7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	dd05      	ble.n	801cb8e <_dtoa_r+0x84e>
 801cb82:	4621      	mov	r1, r4
 801cb84:	461a      	mov	r2, r3
 801cb86:	4658      	mov	r0, fp
 801cb88:	f000 fcb0 	bl	801d4ec <__lshift>
 801cb8c:	4604      	mov	r4, r0
 801cb8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d053      	beq.n	801cc3c <_dtoa_r+0x8fc>
 801cb94:	4621      	mov	r1, r4
 801cb96:	4648      	mov	r0, r9
 801cb98:	f000 fd14 	bl	801d5c4 <__mcmp>
 801cb9c:	2800      	cmp	r0, #0
 801cb9e:	da4d      	bge.n	801cc3c <_dtoa_r+0x8fc>
 801cba0:	1e7b      	subs	r3, r7, #1
 801cba2:	9304      	str	r3, [sp, #16]
 801cba4:	4649      	mov	r1, r9
 801cba6:	2300      	movs	r3, #0
 801cba8:	220a      	movs	r2, #10
 801cbaa:	4658      	mov	r0, fp
 801cbac:	f000 faf2 	bl	801d194 <__multadd>
 801cbb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cbb2:	4681      	mov	r9, r0
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	f000 816c 	beq.w	801ce92 <_dtoa_r+0xb52>
 801cbba:	2300      	movs	r3, #0
 801cbbc:	4629      	mov	r1, r5
 801cbbe:	220a      	movs	r2, #10
 801cbc0:	4658      	mov	r0, fp
 801cbc2:	f000 fae7 	bl	801d194 <__multadd>
 801cbc6:	9b08      	ldr	r3, [sp, #32]
 801cbc8:	2b00      	cmp	r3, #0
 801cbca:	4605      	mov	r5, r0
 801cbcc:	dc61      	bgt.n	801cc92 <_dtoa_r+0x952>
 801cbce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cbd0:	2b02      	cmp	r3, #2
 801cbd2:	dc3b      	bgt.n	801cc4c <_dtoa_r+0x90c>
 801cbd4:	e05d      	b.n	801cc92 <_dtoa_r+0x952>
 801cbd6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cbd8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801cbdc:	e746      	b.n	801ca6c <_dtoa_r+0x72c>
 801cbde:	9b07      	ldr	r3, [sp, #28]
 801cbe0:	1e5c      	subs	r4, r3, #1
 801cbe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cbe4:	42a3      	cmp	r3, r4
 801cbe6:	bfbf      	itttt	lt
 801cbe8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801cbea:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 801cbec:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801cbee:	1ae3      	sublt	r3, r4, r3
 801cbf0:	bfb4      	ite	lt
 801cbf2:	18d2      	addlt	r2, r2, r3
 801cbf4:	1b1c      	subge	r4, r3, r4
 801cbf6:	9b07      	ldr	r3, [sp, #28]
 801cbf8:	bfbc      	itt	lt
 801cbfa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 801cbfc:	2400      	movlt	r4, #0
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	bfb5      	itete	lt
 801cc02:	eba8 0603 	sublt.w	r6, r8, r3
 801cc06:	9b07      	ldrge	r3, [sp, #28]
 801cc08:	2300      	movlt	r3, #0
 801cc0a:	4646      	movge	r6, r8
 801cc0c:	e730      	b.n	801ca70 <_dtoa_r+0x730>
 801cc0e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801cc10:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801cc12:	4646      	mov	r6, r8
 801cc14:	e735      	b.n	801ca82 <_dtoa_r+0x742>
 801cc16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cc18:	e75c      	b.n	801cad4 <_dtoa_r+0x794>
 801cc1a:	2300      	movs	r3, #0
 801cc1c:	e788      	b.n	801cb30 <_dtoa_r+0x7f0>
 801cc1e:	9b02      	ldr	r3, [sp, #8]
 801cc20:	e786      	b.n	801cb30 <_dtoa_r+0x7f0>
 801cc22:	2300      	movs	r3, #0
 801cc24:	930a      	str	r3, [sp, #40]	@ 0x28
 801cc26:	e788      	b.n	801cb3a <_dtoa_r+0x7fa>
 801cc28:	d09f      	beq.n	801cb6a <_dtoa_r+0x82a>
 801cc2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cc2c:	331c      	adds	r3, #28
 801cc2e:	441a      	add	r2, r3
 801cc30:	4498      	add	r8, r3
 801cc32:	441e      	add	r6, r3
 801cc34:	9209      	str	r2, [sp, #36]	@ 0x24
 801cc36:	e798      	b.n	801cb6a <_dtoa_r+0x82a>
 801cc38:	4603      	mov	r3, r0
 801cc3a:	e7f6      	b.n	801cc2a <_dtoa_r+0x8ea>
 801cc3c:	9b07      	ldr	r3, [sp, #28]
 801cc3e:	9704      	str	r7, [sp, #16]
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	dc20      	bgt.n	801cc86 <_dtoa_r+0x946>
 801cc44:	9308      	str	r3, [sp, #32]
 801cc46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cc48:	2b02      	cmp	r3, #2
 801cc4a:	dd1e      	ble.n	801cc8a <_dtoa_r+0x94a>
 801cc4c:	9b08      	ldr	r3, [sp, #32]
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	f47f aebc 	bne.w	801c9cc <_dtoa_r+0x68c>
 801cc54:	4621      	mov	r1, r4
 801cc56:	2205      	movs	r2, #5
 801cc58:	4658      	mov	r0, fp
 801cc5a:	f000 fa9b 	bl	801d194 <__multadd>
 801cc5e:	4601      	mov	r1, r0
 801cc60:	4604      	mov	r4, r0
 801cc62:	4648      	mov	r0, r9
 801cc64:	f000 fcae 	bl	801d5c4 <__mcmp>
 801cc68:	2800      	cmp	r0, #0
 801cc6a:	f77f aeaf 	ble.w	801c9cc <_dtoa_r+0x68c>
 801cc6e:	4656      	mov	r6, sl
 801cc70:	2331      	movs	r3, #49	@ 0x31
 801cc72:	f806 3b01 	strb.w	r3, [r6], #1
 801cc76:	9b04      	ldr	r3, [sp, #16]
 801cc78:	3301      	adds	r3, #1
 801cc7a:	9304      	str	r3, [sp, #16]
 801cc7c:	e6aa      	b.n	801c9d4 <_dtoa_r+0x694>
 801cc7e:	9c07      	ldr	r4, [sp, #28]
 801cc80:	9704      	str	r7, [sp, #16]
 801cc82:	4625      	mov	r5, r4
 801cc84:	e7f3      	b.n	801cc6e <_dtoa_r+0x92e>
 801cc86:	9b07      	ldr	r3, [sp, #28]
 801cc88:	9308      	str	r3, [sp, #32]
 801cc8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	f000 8104 	beq.w	801ce9a <_dtoa_r+0xb5a>
 801cc92:	2e00      	cmp	r6, #0
 801cc94:	dd05      	ble.n	801cca2 <_dtoa_r+0x962>
 801cc96:	4629      	mov	r1, r5
 801cc98:	4632      	mov	r2, r6
 801cc9a:	4658      	mov	r0, fp
 801cc9c:	f000 fc26 	bl	801d4ec <__lshift>
 801cca0:	4605      	mov	r5, r0
 801cca2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d05a      	beq.n	801cd5e <_dtoa_r+0xa1e>
 801cca8:	6869      	ldr	r1, [r5, #4]
 801ccaa:	4658      	mov	r0, fp
 801ccac:	f000 fa10 	bl	801d0d0 <_Balloc>
 801ccb0:	4606      	mov	r6, r0
 801ccb2:	b928      	cbnz	r0, 801ccc0 <_dtoa_r+0x980>
 801ccb4:	4b84      	ldr	r3, [pc, #528]	@ (801cec8 <_dtoa_r+0xb88>)
 801ccb6:	4602      	mov	r2, r0
 801ccb8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801ccbc:	f7ff bb54 	b.w	801c368 <_dtoa_r+0x28>
 801ccc0:	692a      	ldr	r2, [r5, #16]
 801ccc2:	3202      	adds	r2, #2
 801ccc4:	0092      	lsls	r2, r2, #2
 801ccc6:	f105 010c 	add.w	r1, r5, #12
 801ccca:	300c      	adds	r0, #12
 801cccc:	f000 fe38 	bl	801d940 <memcpy>
 801ccd0:	2201      	movs	r2, #1
 801ccd2:	4631      	mov	r1, r6
 801ccd4:	4658      	mov	r0, fp
 801ccd6:	f000 fc09 	bl	801d4ec <__lshift>
 801ccda:	f10a 0301 	add.w	r3, sl, #1
 801ccde:	9307      	str	r3, [sp, #28]
 801cce0:	9b08      	ldr	r3, [sp, #32]
 801cce2:	4453      	add	r3, sl
 801cce4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cce6:	9b02      	ldr	r3, [sp, #8]
 801cce8:	f003 0301 	and.w	r3, r3, #1
 801ccec:	462f      	mov	r7, r5
 801ccee:	930a      	str	r3, [sp, #40]	@ 0x28
 801ccf0:	4605      	mov	r5, r0
 801ccf2:	9b07      	ldr	r3, [sp, #28]
 801ccf4:	4621      	mov	r1, r4
 801ccf6:	3b01      	subs	r3, #1
 801ccf8:	4648      	mov	r0, r9
 801ccfa:	9302      	str	r3, [sp, #8]
 801ccfc:	f7ff fa95 	bl	801c22a <quorem>
 801cd00:	4639      	mov	r1, r7
 801cd02:	9008      	str	r0, [sp, #32]
 801cd04:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801cd08:	4648      	mov	r0, r9
 801cd0a:	f000 fc5b 	bl	801d5c4 <__mcmp>
 801cd0e:	462a      	mov	r2, r5
 801cd10:	9009      	str	r0, [sp, #36]	@ 0x24
 801cd12:	4621      	mov	r1, r4
 801cd14:	4658      	mov	r0, fp
 801cd16:	f000 fc71 	bl	801d5fc <__mdiff>
 801cd1a:	68c2      	ldr	r2, [r0, #12]
 801cd1c:	4606      	mov	r6, r0
 801cd1e:	bb02      	cbnz	r2, 801cd62 <_dtoa_r+0xa22>
 801cd20:	4601      	mov	r1, r0
 801cd22:	4648      	mov	r0, r9
 801cd24:	f000 fc4e 	bl	801d5c4 <__mcmp>
 801cd28:	4602      	mov	r2, r0
 801cd2a:	4631      	mov	r1, r6
 801cd2c:	4658      	mov	r0, fp
 801cd2e:	920c      	str	r2, [sp, #48]	@ 0x30
 801cd30:	f000 fa0e 	bl	801d150 <_Bfree>
 801cd34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cd36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801cd38:	9e07      	ldr	r6, [sp, #28]
 801cd3a:	ea43 0102 	orr.w	r1, r3, r2
 801cd3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd40:	4319      	orrs	r1, r3
 801cd42:	d110      	bne.n	801cd66 <_dtoa_r+0xa26>
 801cd44:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801cd48:	d029      	beq.n	801cd9e <_dtoa_r+0xa5e>
 801cd4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd4c:	2b00      	cmp	r3, #0
 801cd4e:	dd02      	ble.n	801cd56 <_dtoa_r+0xa16>
 801cd50:	9b08      	ldr	r3, [sp, #32]
 801cd52:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801cd56:	9b02      	ldr	r3, [sp, #8]
 801cd58:	f883 8000 	strb.w	r8, [r3]
 801cd5c:	e63b      	b.n	801c9d6 <_dtoa_r+0x696>
 801cd5e:	4628      	mov	r0, r5
 801cd60:	e7bb      	b.n	801ccda <_dtoa_r+0x99a>
 801cd62:	2201      	movs	r2, #1
 801cd64:	e7e1      	b.n	801cd2a <_dtoa_r+0x9ea>
 801cd66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	db04      	blt.n	801cd76 <_dtoa_r+0xa36>
 801cd6c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801cd6e:	430b      	orrs	r3, r1
 801cd70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cd72:	430b      	orrs	r3, r1
 801cd74:	d120      	bne.n	801cdb8 <_dtoa_r+0xa78>
 801cd76:	2a00      	cmp	r2, #0
 801cd78:	dded      	ble.n	801cd56 <_dtoa_r+0xa16>
 801cd7a:	4649      	mov	r1, r9
 801cd7c:	2201      	movs	r2, #1
 801cd7e:	4658      	mov	r0, fp
 801cd80:	f000 fbb4 	bl	801d4ec <__lshift>
 801cd84:	4621      	mov	r1, r4
 801cd86:	4681      	mov	r9, r0
 801cd88:	f000 fc1c 	bl	801d5c4 <__mcmp>
 801cd8c:	2800      	cmp	r0, #0
 801cd8e:	dc03      	bgt.n	801cd98 <_dtoa_r+0xa58>
 801cd90:	d1e1      	bne.n	801cd56 <_dtoa_r+0xa16>
 801cd92:	f018 0f01 	tst.w	r8, #1
 801cd96:	d0de      	beq.n	801cd56 <_dtoa_r+0xa16>
 801cd98:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801cd9c:	d1d8      	bne.n	801cd50 <_dtoa_r+0xa10>
 801cd9e:	9a02      	ldr	r2, [sp, #8]
 801cda0:	2339      	movs	r3, #57	@ 0x39
 801cda2:	7013      	strb	r3, [r2, #0]
 801cda4:	4633      	mov	r3, r6
 801cda6:	461e      	mov	r6, r3
 801cda8:	3b01      	subs	r3, #1
 801cdaa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801cdae:	2a39      	cmp	r2, #57	@ 0x39
 801cdb0:	d052      	beq.n	801ce58 <_dtoa_r+0xb18>
 801cdb2:	3201      	adds	r2, #1
 801cdb4:	701a      	strb	r2, [r3, #0]
 801cdb6:	e60e      	b.n	801c9d6 <_dtoa_r+0x696>
 801cdb8:	2a00      	cmp	r2, #0
 801cdba:	dd07      	ble.n	801cdcc <_dtoa_r+0xa8c>
 801cdbc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801cdc0:	d0ed      	beq.n	801cd9e <_dtoa_r+0xa5e>
 801cdc2:	9a02      	ldr	r2, [sp, #8]
 801cdc4:	f108 0301 	add.w	r3, r8, #1
 801cdc8:	7013      	strb	r3, [r2, #0]
 801cdca:	e604      	b.n	801c9d6 <_dtoa_r+0x696>
 801cdcc:	9b07      	ldr	r3, [sp, #28]
 801cdce:	9a07      	ldr	r2, [sp, #28]
 801cdd0:	f803 8c01 	strb.w	r8, [r3, #-1]
 801cdd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cdd6:	4293      	cmp	r3, r2
 801cdd8:	d028      	beq.n	801ce2c <_dtoa_r+0xaec>
 801cdda:	4649      	mov	r1, r9
 801cddc:	2300      	movs	r3, #0
 801cdde:	220a      	movs	r2, #10
 801cde0:	4658      	mov	r0, fp
 801cde2:	f000 f9d7 	bl	801d194 <__multadd>
 801cde6:	42af      	cmp	r7, r5
 801cde8:	4681      	mov	r9, r0
 801cdea:	f04f 0300 	mov.w	r3, #0
 801cdee:	f04f 020a 	mov.w	r2, #10
 801cdf2:	4639      	mov	r1, r7
 801cdf4:	4658      	mov	r0, fp
 801cdf6:	d107      	bne.n	801ce08 <_dtoa_r+0xac8>
 801cdf8:	f000 f9cc 	bl	801d194 <__multadd>
 801cdfc:	4607      	mov	r7, r0
 801cdfe:	4605      	mov	r5, r0
 801ce00:	9b07      	ldr	r3, [sp, #28]
 801ce02:	3301      	adds	r3, #1
 801ce04:	9307      	str	r3, [sp, #28]
 801ce06:	e774      	b.n	801ccf2 <_dtoa_r+0x9b2>
 801ce08:	f000 f9c4 	bl	801d194 <__multadd>
 801ce0c:	4629      	mov	r1, r5
 801ce0e:	4607      	mov	r7, r0
 801ce10:	2300      	movs	r3, #0
 801ce12:	220a      	movs	r2, #10
 801ce14:	4658      	mov	r0, fp
 801ce16:	f000 f9bd 	bl	801d194 <__multadd>
 801ce1a:	4605      	mov	r5, r0
 801ce1c:	e7f0      	b.n	801ce00 <_dtoa_r+0xac0>
 801ce1e:	9b08      	ldr	r3, [sp, #32]
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	bfcc      	ite	gt
 801ce24:	461e      	movgt	r6, r3
 801ce26:	2601      	movle	r6, #1
 801ce28:	4456      	add	r6, sl
 801ce2a:	2700      	movs	r7, #0
 801ce2c:	4649      	mov	r1, r9
 801ce2e:	2201      	movs	r2, #1
 801ce30:	4658      	mov	r0, fp
 801ce32:	f000 fb5b 	bl	801d4ec <__lshift>
 801ce36:	4621      	mov	r1, r4
 801ce38:	4681      	mov	r9, r0
 801ce3a:	f000 fbc3 	bl	801d5c4 <__mcmp>
 801ce3e:	2800      	cmp	r0, #0
 801ce40:	dcb0      	bgt.n	801cda4 <_dtoa_r+0xa64>
 801ce42:	d102      	bne.n	801ce4a <_dtoa_r+0xb0a>
 801ce44:	f018 0f01 	tst.w	r8, #1
 801ce48:	d1ac      	bne.n	801cda4 <_dtoa_r+0xa64>
 801ce4a:	4633      	mov	r3, r6
 801ce4c:	461e      	mov	r6, r3
 801ce4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ce52:	2a30      	cmp	r2, #48	@ 0x30
 801ce54:	d0fa      	beq.n	801ce4c <_dtoa_r+0xb0c>
 801ce56:	e5be      	b.n	801c9d6 <_dtoa_r+0x696>
 801ce58:	459a      	cmp	sl, r3
 801ce5a:	d1a4      	bne.n	801cda6 <_dtoa_r+0xa66>
 801ce5c:	9b04      	ldr	r3, [sp, #16]
 801ce5e:	3301      	adds	r3, #1
 801ce60:	9304      	str	r3, [sp, #16]
 801ce62:	2331      	movs	r3, #49	@ 0x31
 801ce64:	f88a 3000 	strb.w	r3, [sl]
 801ce68:	e5b5      	b.n	801c9d6 <_dtoa_r+0x696>
 801ce6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce6c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801cecc <_dtoa_r+0xb8c>
 801ce70:	b11b      	cbz	r3, 801ce7a <_dtoa_r+0xb3a>
 801ce72:	f10a 0308 	add.w	r3, sl, #8
 801ce76:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ce78:	6013      	str	r3, [r2, #0]
 801ce7a:	4650      	mov	r0, sl
 801ce7c:	b017      	add	sp, #92	@ 0x5c
 801ce7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ce84:	2b01      	cmp	r3, #1
 801ce86:	f77f ae3d 	ble.w	801cb04 <_dtoa_r+0x7c4>
 801ce8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce8c:	930a      	str	r3, [sp, #40]	@ 0x28
 801ce8e:	2001      	movs	r0, #1
 801ce90:	e65b      	b.n	801cb4a <_dtoa_r+0x80a>
 801ce92:	9b08      	ldr	r3, [sp, #32]
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	f77f aed6 	ble.w	801cc46 <_dtoa_r+0x906>
 801ce9a:	4656      	mov	r6, sl
 801ce9c:	4621      	mov	r1, r4
 801ce9e:	4648      	mov	r0, r9
 801cea0:	f7ff f9c3 	bl	801c22a <quorem>
 801cea4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801cea8:	f806 8b01 	strb.w	r8, [r6], #1
 801ceac:	9b08      	ldr	r3, [sp, #32]
 801ceae:	eba6 020a 	sub.w	r2, r6, sl
 801ceb2:	4293      	cmp	r3, r2
 801ceb4:	ddb3      	ble.n	801ce1e <_dtoa_r+0xade>
 801ceb6:	4649      	mov	r1, r9
 801ceb8:	2300      	movs	r3, #0
 801ceba:	220a      	movs	r2, #10
 801cebc:	4658      	mov	r0, fp
 801cebe:	f000 f969 	bl	801d194 <__multadd>
 801cec2:	4681      	mov	r9, r0
 801cec4:	e7ea      	b.n	801ce9c <_dtoa_r+0xb5c>
 801cec6:	bf00      	nop
 801cec8:	0801ed10 	.word	0x0801ed10
 801cecc:	0801ec94 	.word	0x0801ec94

0801ced0 <_free_r>:
 801ced0:	b538      	push	{r3, r4, r5, lr}
 801ced2:	4605      	mov	r5, r0
 801ced4:	2900      	cmp	r1, #0
 801ced6:	d041      	beq.n	801cf5c <_free_r+0x8c>
 801ced8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cedc:	1f0c      	subs	r4, r1, #4
 801cede:	2b00      	cmp	r3, #0
 801cee0:	bfb8      	it	lt
 801cee2:	18e4      	addlt	r4, r4, r3
 801cee4:	f000 f8e8 	bl	801d0b8 <__malloc_lock>
 801cee8:	4a1d      	ldr	r2, [pc, #116]	@ (801cf60 <_free_r+0x90>)
 801ceea:	6813      	ldr	r3, [r2, #0]
 801ceec:	b933      	cbnz	r3, 801cefc <_free_r+0x2c>
 801ceee:	6063      	str	r3, [r4, #4]
 801cef0:	6014      	str	r4, [r2, #0]
 801cef2:	4628      	mov	r0, r5
 801cef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cef8:	f000 b8e4 	b.w	801d0c4 <__malloc_unlock>
 801cefc:	42a3      	cmp	r3, r4
 801cefe:	d908      	bls.n	801cf12 <_free_r+0x42>
 801cf00:	6820      	ldr	r0, [r4, #0]
 801cf02:	1821      	adds	r1, r4, r0
 801cf04:	428b      	cmp	r3, r1
 801cf06:	bf01      	itttt	eq
 801cf08:	6819      	ldreq	r1, [r3, #0]
 801cf0a:	685b      	ldreq	r3, [r3, #4]
 801cf0c:	1809      	addeq	r1, r1, r0
 801cf0e:	6021      	streq	r1, [r4, #0]
 801cf10:	e7ed      	b.n	801ceee <_free_r+0x1e>
 801cf12:	461a      	mov	r2, r3
 801cf14:	685b      	ldr	r3, [r3, #4]
 801cf16:	b10b      	cbz	r3, 801cf1c <_free_r+0x4c>
 801cf18:	42a3      	cmp	r3, r4
 801cf1a:	d9fa      	bls.n	801cf12 <_free_r+0x42>
 801cf1c:	6811      	ldr	r1, [r2, #0]
 801cf1e:	1850      	adds	r0, r2, r1
 801cf20:	42a0      	cmp	r0, r4
 801cf22:	d10b      	bne.n	801cf3c <_free_r+0x6c>
 801cf24:	6820      	ldr	r0, [r4, #0]
 801cf26:	4401      	add	r1, r0
 801cf28:	1850      	adds	r0, r2, r1
 801cf2a:	4283      	cmp	r3, r0
 801cf2c:	6011      	str	r1, [r2, #0]
 801cf2e:	d1e0      	bne.n	801cef2 <_free_r+0x22>
 801cf30:	6818      	ldr	r0, [r3, #0]
 801cf32:	685b      	ldr	r3, [r3, #4]
 801cf34:	6053      	str	r3, [r2, #4]
 801cf36:	4408      	add	r0, r1
 801cf38:	6010      	str	r0, [r2, #0]
 801cf3a:	e7da      	b.n	801cef2 <_free_r+0x22>
 801cf3c:	d902      	bls.n	801cf44 <_free_r+0x74>
 801cf3e:	230c      	movs	r3, #12
 801cf40:	602b      	str	r3, [r5, #0]
 801cf42:	e7d6      	b.n	801cef2 <_free_r+0x22>
 801cf44:	6820      	ldr	r0, [r4, #0]
 801cf46:	1821      	adds	r1, r4, r0
 801cf48:	428b      	cmp	r3, r1
 801cf4a:	bf04      	itt	eq
 801cf4c:	6819      	ldreq	r1, [r3, #0]
 801cf4e:	685b      	ldreq	r3, [r3, #4]
 801cf50:	6063      	str	r3, [r4, #4]
 801cf52:	bf04      	itt	eq
 801cf54:	1809      	addeq	r1, r1, r0
 801cf56:	6021      	streq	r1, [r4, #0]
 801cf58:	6054      	str	r4, [r2, #4]
 801cf5a:	e7ca      	b.n	801cef2 <_free_r+0x22>
 801cf5c:	bd38      	pop	{r3, r4, r5, pc}
 801cf5e:	bf00      	nop
 801cf60:	20001ee4 	.word	0x20001ee4

0801cf64 <malloc>:
 801cf64:	4b02      	ldr	r3, [pc, #8]	@ (801cf70 <malloc+0xc>)
 801cf66:	4601      	mov	r1, r0
 801cf68:	6818      	ldr	r0, [r3, #0]
 801cf6a:	f000 b825 	b.w	801cfb8 <_malloc_r>
 801cf6e:	bf00      	nop
 801cf70:	20000144 	.word	0x20000144

0801cf74 <sbrk_aligned>:
 801cf74:	b570      	push	{r4, r5, r6, lr}
 801cf76:	4e0f      	ldr	r6, [pc, #60]	@ (801cfb4 <sbrk_aligned+0x40>)
 801cf78:	460c      	mov	r4, r1
 801cf7a:	6831      	ldr	r1, [r6, #0]
 801cf7c:	4605      	mov	r5, r0
 801cf7e:	b911      	cbnz	r1, 801cf86 <sbrk_aligned+0x12>
 801cf80:	f000 fcce 	bl	801d920 <_sbrk_r>
 801cf84:	6030      	str	r0, [r6, #0]
 801cf86:	4621      	mov	r1, r4
 801cf88:	4628      	mov	r0, r5
 801cf8a:	f000 fcc9 	bl	801d920 <_sbrk_r>
 801cf8e:	1c43      	adds	r3, r0, #1
 801cf90:	d103      	bne.n	801cf9a <sbrk_aligned+0x26>
 801cf92:	f04f 34ff 	mov.w	r4, #4294967295
 801cf96:	4620      	mov	r0, r4
 801cf98:	bd70      	pop	{r4, r5, r6, pc}
 801cf9a:	1cc4      	adds	r4, r0, #3
 801cf9c:	f024 0403 	bic.w	r4, r4, #3
 801cfa0:	42a0      	cmp	r0, r4
 801cfa2:	d0f8      	beq.n	801cf96 <sbrk_aligned+0x22>
 801cfa4:	1a21      	subs	r1, r4, r0
 801cfa6:	4628      	mov	r0, r5
 801cfa8:	f000 fcba 	bl	801d920 <_sbrk_r>
 801cfac:	3001      	adds	r0, #1
 801cfae:	d1f2      	bne.n	801cf96 <sbrk_aligned+0x22>
 801cfb0:	e7ef      	b.n	801cf92 <sbrk_aligned+0x1e>
 801cfb2:	bf00      	nop
 801cfb4:	20001ee0 	.word	0x20001ee0

0801cfb8 <_malloc_r>:
 801cfb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cfbc:	1ccd      	adds	r5, r1, #3
 801cfbe:	f025 0503 	bic.w	r5, r5, #3
 801cfc2:	3508      	adds	r5, #8
 801cfc4:	2d0c      	cmp	r5, #12
 801cfc6:	bf38      	it	cc
 801cfc8:	250c      	movcc	r5, #12
 801cfca:	2d00      	cmp	r5, #0
 801cfcc:	4606      	mov	r6, r0
 801cfce:	db01      	blt.n	801cfd4 <_malloc_r+0x1c>
 801cfd0:	42a9      	cmp	r1, r5
 801cfd2:	d904      	bls.n	801cfde <_malloc_r+0x26>
 801cfd4:	230c      	movs	r3, #12
 801cfd6:	6033      	str	r3, [r6, #0]
 801cfd8:	2000      	movs	r0, #0
 801cfda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cfde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d0b4 <_malloc_r+0xfc>
 801cfe2:	f000 f869 	bl	801d0b8 <__malloc_lock>
 801cfe6:	f8d8 3000 	ldr.w	r3, [r8]
 801cfea:	461c      	mov	r4, r3
 801cfec:	bb44      	cbnz	r4, 801d040 <_malloc_r+0x88>
 801cfee:	4629      	mov	r1, r5
 801cff0:	4630      	mov	r0, r6
 801cff2:	f7ff ffbf 	bl	801cf74 <sbrk_aligned>
 801cff6:	1c43      	adds	r3, r0, #1
 801cff8:	4604      	mov	r4, r0
 801cffa:	d158      	bne.n	801d0ae <_malloc_r+0xf6>
 801cffc:	f8d8 4000 	ldr.w	r4, [r8]
 801d000:	4627      	mov	r7, r4
 801d002:	2f00      	cmp	r7, #0
 801d004:	d143      	bne.n	801d08e <_malloc_r+0xd6>
 801d006:	2c00      	cmp	r4, #0
 801d008:	d04b      	beq.n	801d0a2 <_malloc_r+0xea>
 801d00a:	6823      	ldr	r3, [r4, #0]
 801d00c:	4639      	mov	r1, r7
 801d00e:	4630      	mov	r0, r6
 801d010:	eb04 0903 	add.w	r9, r4, r3
 801d014:	f000 fc84 	bl	801d920 <_sbrk_r>
 801d018:	4581      	cmp	r9, r0
 801d01a:	d142      	bne.n	801d0a2 <_malloc_r+0xea>
 801d01c:	6821      	ldr	r1, [r4, #0]
 801d01e:	1a6d      	subs	r5, r5, r1
 801d020:	4629      	mov	r1, r5
 801d022:	4630      	mov	r0, r6
 801d024:	f7ff ffa6 	bl	801cf74 <sbrk_aligned>
 801d028:	3001      	adds	r0, #1
 801d02a:	d03a      	beq.n	801d0a2 <_malloc_r+0xea>
 801d02c:	6823      	ldr	r3, [r4, #0]
 801d02e:	442b      	add	r3, r5
 801d030:	6023      	str	r3, [r4, #0]
 801d032:	f8d8 3000 	ldr.w	r3, [r8]
 801d036:	685a      	ldr	r2, [r3, #4]
 801d038:	bb62      	cbnz	r2, 801d094 <_malloc_r+0xdc>
 801d03a:	f8c8 7000 	str.w	r7, [r8]
 801d03e:	e00f      	b.n	801d060 <_malloc_r+0xa8>
 801d040:	6822      	ldr	r2, [r4, #0]
 801d042:	1b52      	subs	r2, r2, r5
 801d044:	d420      	bmi.n	801d088 <_malloc_r+0xd0>
 801d046:	2a0b      	cmp	r2, #11
 801d048:	d917      	bls.n	801d07a <_malloc_r+0xc2>
 801d04a:	1961      	adds	r1, r4, r5
 801d04c:	42a3      	cmp	r3, r4
 801d04e:	6025      	str	r5, [r4, #0]
 801d050:	bf18      	it	ne
 801d052:	6059      	strne	r1, [r3, #4]
 801d054:	6863      	ldr	r3, [r4, #4]
 801d056:	bf08      	it	eq
 801d058:	f8c8 1000 	streq.w	r1, [r8]
 801d05c:	5162      	str	r2, [r4, r5]
 801d05e:	604b      	str	r3, [r1, #4]
 801d060:	4630      	mov	r0, r6
 801d062:	f000 f82f 	bl	801d0c4 <__malloc_unlock>
 801d066:	f104 000b 	add.w	r0, r4, #11
 801d06a:	1d23      	adds	r3, r4, #4
 801d06c:	f020 0007 	bic.w	r0, r0, #7
 801d070:	1ac2      	subs	r2, r0, r3
 801d072:	bf1c      	itt	ne
 801d074:	1a1b      	subne	r3, r3, r0
 801d076:	50a3      	strne	r3, [r4, r2]
 801d078:	e7af      	b.n	801cfda <_malloc_r+0x22>
 801d07a:	6862      	ldr	r2, [r4, #4]
 801d07c:	42a3      	cmp	r3, r4
 801d07e:	bf0c      	ite	eq
 801d080:	f8c8 2000 	streq.w	r2, [r8]
 801d084:	605a      	strne	r2, [r3, #4]
 801d086:	e7eb      	b.n	801d060 <_malloc_r+0xa8>
 801d088:	4623      	mov	r3, r4
 801d08a:	6864      	ldr	r4, [r4, #4]
 801d08c:	e7ae      	b.n	801cfec <_malloc_r+0x34>
 801d08e:	463c      	mov	r4, r7
 801d090:	687f      	ldr	r7, [r7, #4]
 801d092:	e7b6      	b.n	801d002 <_malloc_r+0x4a>
 801d094:	461a      	mov	r2, r3
 801d096:	685b      	ldr	r3, [r3, #4]
 801d098:	42a3      	cmp	r3, r4
 801d09a:	d1fb      	bne.n	801d094 <_malloc_r+0xdc>
 801d09c:	2300      	movs	r3, #0
 801d09e:	6053      	str	r3, [r2, #4]
 801d0a0:	e7de      	b.n	801d060 <_malloc_r+0xa8>
 801d0a2:	230c      	movs	r3, #12
 801d0a4:	6033      	str	r3, [r6, #0]
 801d0a6:	4630      	mov	r0, r6
 801d0a8:	f000 f80c 	bl	801d0c4 <__malloc_unlock>
 801d0ac:	e794      	b.n	801cfd8 <_malloc_r+0x20>
 801d0ae:	6005      	str	r5, [r0, #0]
 801d0b0:	e7d6      	b.n	801d060 <_malloc_r+0xa8>
 801d0b2:	bf00      	nop
 801d0b4:	20001ee4 	.word	0x20001ee4

0801d0b8 <__malloc_lock>:
 801d0b8:	4801      	ldr	r0, [pc, #4]	@ (801d0c0 <__malloc_lock+0x8>)
 801d0ba:	f7ff b8b4 	b.w	801c226 <__retarget_lock_acquire_recursive>
 801d0be:	bf00      	nop
 801d0c0:	20001edc 	.word	0x20001edc

0801d0c4 <__malloc_unlock>:
 801d0c4:	4801      	ldr	r0, [pc, #4]	@ (801d0cc <__malloc_unlock+0x8>)
 801d0c6:	f7ff b8af 	b.w	801c228 <__retarget_lock_release_recursive>
 801d0ca:	bf00      	nop
 801d0cc:	20001edc 	.word	0x20001edc

0801d0d0 <_Balloc>:
 801d0d0:	b570      	push	{r4, r5, r6, lr}
 801d0d2:	69c6      	ldr	r6, [r0, #28]
 801d0d4:	4604      	mov	r4, r0
 801d0d6:	460d      	mov	r5, r1
 801d0d8:	b976      	cbnz	r6, 801d0f8 <_Balloc+0x28>
 801d0da:	2010      	movs	r0, #16
 801d0dc:	f7ff ff42 	bl	801cf64 <malloc>
 801d0e0:	4602      	mov	r2, r0
 801d0e2:	61e0      	str	r0, [r4, #28]
 801d0e4:	b920      	cbnz	r0, 801d0f0 <_Balloc+0x20>
 801d0e6:	4b18      	ldr	r3, [pc, #96]	@ (801d148 <_Balloc+0x78>)
 801d0e8:	4818      	ldr	r0, [pc, #96]	@ (801d14c <_Balloc+0x7c>)
 801d0ea:	216b      	movs	r1, #107	@ 0x6b
 801d0ec:	f000 fc36 	bl	801d95c <__assert_func>
 801d0f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d0f4:	6006      	str	r6, [r0, #0]
 801d0f6:	60c6      	str	r6, [r0, #12]
 801d0f8:	69e6      	ldr	r6, [r4, #28]
 801d0fa:	68f3      	ldr	r3, [r6, #12]
 801d0fc:	b183      	cbz	r3, 801d120 <_Balloc+0x50>
 801d0fe:	69e3      	ldr	r3, [r4, #28]
 801d100:	68db      	ldr	r3, [r3, #12]
 801d102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d106:	b9b8      	cbnz	r0, 801d138 <_Balloc+0x68>
 801d108:	2101      	movs	r1, #1
 801d10a:	fa01 f605 	lsl.w	r6, r1, r5
 801d10e:	1d72      	adds	r2, r6, #5
 801d110:	0092      	lsls	r2, r2, #2
 801d112:	4620      	mov	r0, r4
 801d114:	f000 fc40 	bl	801d998 <_calloc_r>
 801d118:	b160      	cbz	r0, 801d134 <_Balloc+0x64>
 801d11a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d11e:	e00e      	b.n	801d13e <_Balloc+0x6e>
 801d120:	2221      	movs	r2, #33	@ 0x21
 801d122:	2104      	movs	r1, #4
 801d124:	4620      	mov	r0, r4
 801d126:	f000 fc37 	bl	801d998 <_calloc_r>
 801d12a:	69e3      	ldr	r3, [r4, #28]
 801d12c:	60f0      	str	r0, [r6, #12]
 801d12e:	68db      	ldr	r3, [r3, #12]
 801d130:	2b00      	cmp	r3, #0
 801d132:	d1e4      	bne.n	801d0fe <_Balloc+0x2e>
 801d134:	2000      	movs	r0, #0
 801d136:	bd70      	pop	{r4, r5, r6, pc}
 801d138:	6802      	ldr	r2, [r0, #0]
 801d13a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d13e:	2300      	movs	r3, #0
 801d140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d144:	e7f7      	b.n	801d136 <_Balloc+0x66>
 801d146:	bf00      	nop
 801d148:	0801eca1 	.word	0x0801eca1
 801d14c:	0801ed21 	.word	0x0801ed21

0801d150 <_Bfree>:
 801d150:	b570      	push	{r4, r5, r6, lr}
 801d152:	69c6      	ldr	r6, [r0, #28]
 801d154:	4605      	mov	r5, r0
 801d156:	460c      	mov	r4, r1
 801d158:	b976      	cbnz	r6, 801d178 <_Bfree+0x28>
 801d15a:	2010      	movs	r0, #16
 801d15c:	f7ff ff02 	bl	801cf64 <malloc>
 801d160:	4602      	mov	r2, r0
 801d162:	61e8      	str	r0, [r5, #28]
 801d164:	b920      	cbnz	r0, 801d170 <_Bfree+0x20>
 801d166:	4b09      	ldr	r3, [pc, #36]	@ (801d18c <_Bfree+0x3c>)
 801d168:	4809      	ldr	r0, [pc, #36]	@ (801d190 <_Bfree+0x40>)
 801d16a:	218f      	movs	r1, #143	@ 0x8f
 801d16c:	f000 fbf6 	bl	801d95c <__assert_func>
 801d170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d174:	6006      	str	r6, [r0, #0]
 801d176:	60c6      	str	r6, [r0, #12]
 801d178:	b13c      	cbz	r4, 801d18a <_Bfree+0x3a>
 801d17a:	69eb      	ldr	r3, [r5, #28]
 801d17c:	6862      	ldr	r2, [r4, #4]
 801d17e:	68db      	ldr	r3, [r3, #12]
 801d180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d184:	6021      	str	r1, [r4, #0]
 801d186:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d18a:	bd70      	pop	{r4, r5, r6, pc}
 801d18c:	0801eca1 	.word	0x0801eca1
 801d190:	0801ed21 	.word	0x0801ed21

0801d194 <__multadd>:
 801d194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d198:	690d      	ldr	r5, [r1, #16]
 801d19a:	4607      	mov	r7, r0
 801d19c:	460c      	mov	r4, r1
 801d19e:	461e      	mov	r6, r3
 801d1a0:	f101 0c14 	add.w	ip, r1, #20
 801d1a4:	2000      	movs	r0, #0
 801d1a6:	f8dc 3000 	ldr.w	r3, [ip]
 801d1aa:	b299      	uxth	r1, r3
 801d1ac:	fb02 6101 	mla	r1, r2, r1, r6
 801d1b0:	0c1e      	lsrs	r6, r3, #16
 801d1b2:	0c0b      	lsrs	r3, r1, #16
 801d1b4:	fb02 3306 	mla	r3, r2, r6, r3
 801d1b8:	b289      	uxth	r1, r1
 801d1ba:	3001      	adds	r0, #1
 801d1bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d1c0:	4285      	cmp	r5, r0
 801d1c2:	f84c 1b04 	str.w	r1, [ip], #4
 801d1c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d1ca:	dcec      	bgt.n	801d1a6 <__multadd+0x12>
 801d1cc:	b30e      	cbz	r6, 801d212 <__multadd+0x7e>
 801d1ce:	68a3      	ldr	r3, [r4, #8]
 801d1d0:	42ab      	cmp	r3, r5
 801d1d2:	dc19      	bgt.n	801d208 <__multadd+0x74>
 801d1d4:	6861      	ldr	r1, [r4, #4]
 801d1d6:	4638      	mov	r0, r7
 801d1d8:	3101      	adds	r1, #1
 801d1da:	f7ff ff79 	bl	801d0d0 <_Balloc>
 801d1de:	4680      	mov	r8, r0
 801d1e0:	b928      	cbnz	r0, 801d1ee <__multadd+0x5a>
 801d1e2:	4602      	mov	r2, r0
 801d1e4:	4b0c      	ldr	r3, [pc, #48]	@ (801d218 <__multadd+0x84>)
 801d1e6:	480d      	ldr	r0, [pc, #52]	@ (801d21c <__multadd+0x88>)
 801d1e8:	21ba      	movs	r1, #186	@ 0xba
 801d1ea:	f000 fbb7 	bl	801d95c <__assert_func>
 801d1ee:	6922      	ldr	r2, [r4, #16]
 801d1f0:	3202      	adds	r2, #2
 801d1f2:	f104 010c 	add.w	r1, r4, #12
 801d1f6:	0092      	lsls	r2, r2, #2
 801d1f8:	300c      	adds	r0, #12
 801d1fa:	f000 fba1 	bl	801d940 <memcpy>
 801d1fe:	4621      	mov	r1, r4
 801d200:	4638      	mov	r0, r7
 801d202:	f7ff ffa5 	bl	801d150 <_Bfree>
 801d206:	4644      	mov	r4, r8
 801d208:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d20c:	3501      	adds	r5, #1
 801d20e:	615e      	str	r6, [r3, #20]
 801d210:	6125      	str	r5, [r4, #16]
 801d212:	4620      	mov	r0, r4
 801d214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d218:	0801ed10 	.word	0x0801ed10
 801d21c:	0801ed21 	.word	0x0801ed21

0801d220 <__hi0bits>:
 801d220:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801d224:	4603      	mov	r3, r0
 801d226:	bf36      	itet	cc
 801d228:	0403      	lslcc	r3, r0, #16
 801d22a:	2000      	movcs	r0, #0
 801d22c:	2010      	movcc	r0, #16
 801d22e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d232:	bf3c      	itt	cc
 801d234:	021b      	lslcc	r3, r3, #8
 801d236:	3008      	addcc	r0, #8
 801d238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d23c:	bf3c      	itt	cc
 801d23e:	011b      	lslcc	r3, r3, #4
 801d240:	3004      	addcc	r0, #4
 801d242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d246:	bf3c      	itt	cc
 801d248:	009b      	lslcc	r3, r3, #2
 801d24a:	3002      	addcc	r0, #2
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	db05      	blt.n	801d25c <__hi0bits+0x3c>
 801d250:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801d254:	f100 0001 	add.w	r0, r0, #1
 801d258:	bf08      	it	eq
 801d25a:	2020      	moveq	r0, #32
 801d25c:	4770      	bx	lr

0801d25e <__lo0bits>:
 801d25e:	6803      	ldr	r3, [r0, #0]
 801d260:	4602      	mov	r2, r0
 801d262:	f013 0007 	ands.w	r0, r3, #7
 801d266:	d00b      	beq.n	801d280 <__lo0bits+0x22>
 801d268:	07d9      	lsls	r1, r3, #31
 801d26a:	d421      	bmi.n	801d2b0 <__lo0bits+0x52>
 801d26c:	0798      	lsls	r0, r3, #30
 801d26e:	bf49      	itett	mi
 801d270:	085b      	lsrmi	r3, r3, #1
 801d272:	089b      	lsrpl	r3, r3, #2
 801d274:	2001      	movmi	r0, #1
 801d276:	6013      	strmi	r3, [r2, #0]
 801d278:	bf5c      	itt	pl
 801d27a:	6013      	strpl	r3, [r2, #0]
 801d27c:	2002      	movpl	r0, #2
 801d27e:	4770      	bx	lr
 801d280:	b299      	uxth	r1, r3
 801d282:	b909      	cbnz	r1, 801d288 <__lo0bits+0x2a>
 801d284:	0c1b      	lsrs	r3, r3, #16
 801d286:	2010      	movs	r0, #16
 801d288:	b2d9      	uxtb	r1, r3
 801d28a:	b909      	cbnz	r1, 801d290 <__lo0bits+0x32>
 801d28c:	3008      	adds	r0, #8
 801d28e:	0a1b      	lsrs	r3, r3, #8
 801d290:	0719      	lsls	r1, r3, #28
 801d292:	bf04      	itt	eq
 801d294:	091b      	lsreq	r3, r3, #4
 801d296:	3004      	addeq	r0, #4
 801d298:	0799      	lsls	r1, r3, #30
 801d29a:	bf04      	itt	eq
 801d29c:	089b      	lsreq	r3, r3, #2
 801d29e:	3002      	addeq	r0, #2
 801d2a0:	07d9      	lsls	r1, r3, #31
 801d2a2:	d403      	bmi.n	801d2ac <__lo0bits+0x4e>
 801d2a4:	085b      	lsrs	r3, r3, #1
 801d2a6:	f100 0001 	add.w	r0, r0, #1
 801d2aa:	d003      	beq.n	801d2b4 <__lo0bits+0x56>
 801d2ac:	6013      	str	r3, [r2, #0]
 801d2ae:	4770      	bx	lr
 801d2b0:	2000      	movs	r0, #0
 801d2b2:	4770      	bx	lr
 801d2b4:	2020      	movs	r0, #32
 801d2b6:	4770      	bx	lr

0801d2b8 <__i2b>:
 801d2b8:	b510      	push	{r4, lr}
 801d2ba:	460c      	mov	r4, r1
 801d2bc:	2101      	movs	r1, #1
 801d2be:	f7ff ff07 	bl	801d0d0 <_Balloc>
 801d2c2:	4602      	mov	r2, r0
 801d2c4:	b928      	cbnz	r0, 801d2d2 <__i2b+0x1a>
 801d2c6:	4b05      	ldr	r3, [pc, #20]	@ (801d2dc <__i2b+0x24>)
 801d2c8:	4805      	ldr	r0, [pc, #20]	@ (801d2e0 <__i2b+0x28>)
 801d2ca:	f240 1145 	movw	r1, #325	@ 0x145
 801d2ce:	f000 fb45 	bl	801d95c <__assert_func>
 801d2d2:	2301      	movs	r3, #1
 801d2d4:	6144      	str	r4, [r0, #20]
 801d2d6:	6103      	str	r3, [r0, #16]
 801d2d8:	bd10      	pop	{r4, pc}
 801d2da:	bf00      	nop
 801d2dc:	0801ed10 	.word	0x0801ed10
 801d2e0:	0801ed21 	.word	0x0801ed21

0801d2e4 <__multiply>:
 801d2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2e8:	4614      	mov	r4, r2
 801d2ea:	690a      	ldr	r2, [r1, #16]
 801d2ec:	6923      	ldr	r3, [r4, #16]
 801d2ee:	429a      	cmp	r2, r3
 801d2f0:	bfa8      	it	ge
 801d2f2:	4623      	movge	r3, r4
 801d2f4:	460f      	mov	r7, r1
 801d2f6:	bfa4      	itt	ge
 801d2f8:	460c      	movge	r4, r1
 801d2fa:	461f      	movge	r7, r3
 801d2fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801d300:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801d304:	68a3      	ldr	r3, [r4, #8]
 801d306:	6861      	ldr	r1, [r4, #4]
 801d308:	eb0a 0609 	add.w	r6, sl, r9
 801d30c:	42b3      	cmp	r3, r6
 801d30e:	b085      	sub	sp, #20
 801d310:	bfb8      	it	lt
 801d312:	3101      	addlt	r1, #1
 801d314:	f7ff fedc 	bl	801d0d0 <_Balloc>
 801d318:	b930      	cbnz	r0, 801d328 <__multiply+0x44>
 801d31a:	4602      	mov	r2, r0
 801d31c:	4b44      	ldr	r3, [pc, #272]	@ (801d430 <__multiply+0x14c>)
 801d31e:	4845      	ldr	r0, [pc, #276]	@ (801d434 <__multiply+0x150>)
 801d320:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801d324:	f000 fb1a 	bl	801d95c <__assert_func>
 801d328:	f100 0514 	add.w	r5, r0, #20
 801d32c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d330:	462b      	mov	r3, r5
 801d332:	2200      	movs	r2, #0
 801d334:	4543      	cmp	r3, r8
 801d336:	d321      	bcc.n	801d37c <__multiply+0x98>
 801d338:	f107 0114 	add.w	r1, r7, #20
 801d33c:	f104 0214 	add.w	r2, r4, #20
 801d340:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801d344:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801d348:	9302      	str	r3, [sp, #8]
 801d34a:	1b13      	subs	r3, r2, r4
 801d34c:	3b15      	subs	r3, #21
 801d34e:	f023 0303 	bic.w	r3, r3, #3
 801d352:	3304      	adds	r3, #4
 801d354:	f104 0715 	add.w	r7, r4, #21
 801d358:	42ba      	cmp	r2, r7
 801d35a:	bf38      	it	cc
 801d35c:	2304      	movcc	r3, #4
 801d35e:	9301      	str	r3, [sp, #4]
 801d360:	9b02      	ldr	r3, [sp, #8]
 801d362:	9103      	str	r1, [sp, #12]
 801d364:	428b      	cmp	r3, r1
 801d366:	d80c      	bhi.n	801d382 <__multiply+0x9e>
 801d368:	2e00      	cmp	r6, #0
 801d36a:	dd03      	ble.n	801d374 <__multiply+0x90>
 801d36c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d370:	2b00      	cmp	r3, #0
 801d372:	d05a      	beq.n	801d42a <__multiply+0x146>
 801d374:	6106      	str	r6, [r0, #16]
 801d376:	b005      	add	sp, #20
 801d378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d37c:	f843 2b04 	str.w	r2, [r3], #4
 801d380:	e7d8      	b.n	801d334 <__multiply+0x50>
 801d382:	f8b1 a000 	ldrh.w	sl, [r1]
 801d386:	f1ba 0f00 	cmp.w	sl, #0
 801d38a:	d023      	beq.n	801d3d4 <__multiply+0xf0>
 801d38c:	f104 0e14 	add.w	lr, r4, #20
 801d390:	46a9      	mov	r9, r5
 801d392:	f04f 0c00 	mov.w	ip, #0
 801d396:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d39a:	f8d9 3000 	ldr.w	r3, [r9]
 801d39e:	fa1f fb87 	uxth.w	fp, r7
 801d3a2:	b29b      	uxth	r3, r3
 801d3a4:	fb0a 330b 	mla	r3, sl, fp, r3
 801d3a8:	4463      	add	r3, ip
 801d3aa:	f8d9 c000 	ldr.w	ip, [r9]
 801d3ae:	0c3f      	lsrs	r7, r7, #16
 801d3b0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d3b4:	fb0a c707 	mla	r7, sl, r7, ip
 801d3b8:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801d3bc:	b29b      	uxth	r3, r3
 801d3be:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801d3c2:	4572      	cmp	r2, lr
 801d3c4:	f849 3b04 	str.w	r3, [r9], #4
 801d3c8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801d3cc:	d8e3      	bhi.n	801d396 <__multiply+0xb2>
 801d3ce:	9b01      	ldr	r3, [sp, #4]
 801d3d0:	f845 c003 	str.w	ip, [r5, r3]
 801d3d4:	9b03      	ldr	r3, [sp, #12]
 801d3d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801d3da:	3104      	adds	r1, #4
 801d3dc:	f1b9 0f00 	cmp.w	r9, #0
 801d3e0:	d021      	beq.n	801d426 <__multiply+0x142>
 801d3e2:	682b      	ldr	r3, [r5, #0]
 801d3e4:	f104 0c14 	add.w	ip, r4, #20
 801d3e8:	46ae      	mov	lr, r5
 801d3ea:	f04f 0a00 	mov.w	sl, #0
 801d3ee:	f8bc b000 	ldrh.w	fp, [ip]
 801d3f2:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801d3f6:	fb09 770b 	mla	r7, r9, fp, r7
 801d3fa:	4457      	add	r7, sl
 801d3fc:	b29b      	uxth	r3, r3
 801d3fe:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801d402:	f84e 3b04 	str.w	r3, [lr], #4
 801d406:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d40a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d40e:	f8be 3000 	ldrh.w	r3, [lr]
 801d412:	fb09 330a 	mla	r3, r9, sl, r3
 801d416:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801d41a:	4562      	cmp	r2, ip
 801d41c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d420:	d8e5      	bhi.n	801d3ee <__multiply+0x10a>
 801d422:	9f01      	ldr	r7, [sp, #4]
 801d424:	51eb      	str	r3, [r5, r7]
 801d426:	3504      	adds	r5, #4
 801d428:	e79a      	b.n	801d360 <__multiply+0x7c>
 801d42a:	3e01      	subs	r6, #1
 801d42c:	e79c      	b.n	801d368 <__multiply+0x84>
 801d42e:	bf00      	nop
 801d430:	0801ed10 	.word	0x0801ed10
 801d434:	0801ed21 	.word	0x0801ed21

0801d438 <__pow5mult>:
 801d438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d43c:	4615      	mov	r5, r2
 801d43e:	f012 0203 	ands.w	r2, r2, #3
 801d442:	4607      	mov	r7, r0
 801d444:	460e      	mov	r6, r1
 801d446:	d007      	beq.n	801d458 <__pow5mult+0x20>
 801d448:	4c25      	ldr	r4, [pc, #148]	@ (801d4e0 <__pow5mult+0xa8>)
 801d44a:	3a01      	subs	r2, #1
 801d44c:	2300      	movs	r3, #0
 801d44e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d452:	f7ff fe9f 	bl	801d194 <__multadd>
 801d456:	4606      	mov	r6, r0
 801d458:	10ad      	asrs	r5, r5, #2
 801d45a:	d03d      	beq.n	801d4d8 <__pow5mult+0xa0>
 801d45c:	69fc      	ldr	r4, [r7, #28]
 801d45e:	b97c      	cbnz	r4, 801d480 <__pow5mult+0x48>
 801d460:	2010      	movs	r0, #16
 801d462:	f7ff fd7f 	bl	801cf64 <malloc>
 801d466:	4602      	mov	r2, r0
 801d468:	61f8      	str	r0, [r7, #28]
 801d46a:	b928      	cbnz	r0, 801d478 <__pow5mult+0x40>
 801d46c:	4b1d      	ldr	r3, [pc, #116]	@ (801d4e4 <__pow5mult+0xac>)
 801d46e:	481e      	ldr	r0, [pc, #120]	@ (801d4e8 <__pow5mult+0xb0>)
 801d470:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801d474:	f000 fa72 	bl	801d95c <__assert_func>
 801d478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d47c:	6004      	str	r4, [r0, #0]
 801d47e:	60c4      	str	r4, [r0, #12]
 801d480:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801d484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d488:	b94c      	cbnz	r4, 801d49e <__pow5mult+0x66>
 801d48a:	f240 2171 	movw	r1, #625	@ 0x271
 801d48e:	4638      	mov	r0, r7
 801d490:	f7ff ff12 	bl	801d2b8 <__i2b>
 801d494:	2300      	movs	r3, #0
 801d496:	f8c8 0008 	str.w	r0, [r8, #8]
 801d49a:	4604      	mov	r4, r0
 801d49c:	6003      	str	r3, [r0, #0]
 801d49e:	f04f 0900 	mov.w	r9, #0
 801d4a2:	07eb      	lsls	r3, r5, #31
 801d4a4:	d50a      	bpl.n	801d4bc <__pow5mult+0x84>
 801d4a6:	4631      	mov	r1, r6
 801d4a8:	4622      	mov	r2, r4
 801d4aa:	4638      	mov	r0, r7
 801d4ac:	f7ff ff1a 	bl	801d2e4 <__multiply>
 801d4b0:	4631      	mov	r1, r6
 801d4b2:	4680      	mov	r8, r0
 801d4b4:	4638      	mov	r0, r7
 801d4b6:	f7ff fe4b 	bl	801d150 <_Bfree>
 801d4ba:	4646      	mov	r6, r8
 801d4bc:	106d      	asrs	r5, r5, #1
 801d4be:	d00b      	beq.n	801d4d8 <__pow5mult+0xa0>
 801d4c0:	6820      	ldr	r0, [r4, #0]
 801d4c2:	b938      	cbnz	r0, 801d4d4 <__pow5mult+0x9c>
 801d4c4:	4622      	mov	r2, r4
 801d4c6:	4621      	mov	r1, r4
 801d4c8:	4638      	mov	r0, r7
 801d4ca:	f7ff ff0b 	bl	801d2e4 <__multiply>
 801d4ce:	6020      	str	r0, [r4, #0]
 801d4d0:	f8c0 9000 	str.w	r9, [r0]
 801d4d4:	4604      	mov	r4, r0
 801d4d6:	e7e4      	b.n	801d4a2 <__pow5mult+0x6a>
 801d4d8:	4630      	mov	r0, r6
 801d4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4de:	bf00      	nop
 801d4e0:	0801ed7c 	.word	0x0801ed7c
 801d4e4:	0801eca1 	.word	0x0801eca1
 801d4e8:	0801ed21 	.word	0x0801ed21

0801d4ec <__lshift>:
 801d4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d4f0:	460c      	mov	r4, r1
 801d4f2:	6849      	ldr	r1, [r1, #4]
 801d4f4:	6923      	ldr	r3, [r4, #16]
 801d4f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d4fa:	68a3      	ldr	r3, [r4, #8]
 801d4fc:	4607      	mov	r7, r0
 801d4fe:	4691      	mov	r9, r2
 801d500:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d504:	f108 0601 	add.w	r6, r8, #1
 801d508:	42b3      	cmp	r3, r6
 801d50a:	db0b      	blt.n	801d524 <__lshift+0x38>
 801d50c:	4638      	mov	r0, r7
 801d50e:	f7ff fddf 	bl	801d0d0 <_Balloc>
 801d512:	4605      	mov	r5, r0
 801d514:	b948      	cbnz	r0, 801d52a <__lshift+0x3e>
 801d516:	4602      	mov	r2, r0
 801d518:	4b28      	ldr	r3, [pc, #160]	@ (801d5bc <__lshift+0xd0>)
 801d51a:	4829      	ldr	r0, [pc, #164]	@ (801d5c0 <__lshift+0xd4>)
 801d51c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801d520:	f000 fa1c 	bl	801d95c <__assert_func>
 801d524:	3101      	adds	r1, #1
 801d526:	005b      	lsls	r3, r3, #1
 801d528:	e7ee      	b.n	801d508 <__lshift+0x1c>
 801d52a:	2300      	movs	r3, #0
 801d52c:	f100 0114 	add.w	r1, r0, #20
 801d530:	f100 0210 	add.w	r2, r0, #16
 801d534:	4618      	mov	r0, r3
 801d536:	4553      	cmp	r3, sl
 801d538:	db33      	blt.n	801d5a2 <__lshift+0xb6>
 801d53a:	6920      	ldr	r0, [r4, #16]
 801d53c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d540:	f104 0314 	add.w	r3, r4, #20
 801d544:	f019 091f 	ands.w	r9, r9, #31
 801d548:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d54c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d550:	d02b      	beq.n	801d5aa <__lshift+0xbe>
 801d552:	f1c9 0e20 	rsb	lr, r9, #32
 801d556:	468a      	mov	sl, r1
 801d558:	2200      	movs	r2, #0
 801d55a:	6818      	ldr	r0, [r3, #0]
 801d55c:	fa00 f009 	lsl.w	r0, r0, r9
 801d560:	4310      	orrs	r0, r2
 801d562:	f84a 0b04 	str.w	r0, [sl], #4
 801d566:	f853 2b04 	ldr.w	r2, [r3], #4
 801d56a:	459c      	cmp	ip, r3
 801d56c:	fa22 f20e 	lsr.w	r2, r2, lr
 801d570:	d8f3      	bhi.n	801d55a <__lshift+0x6e>
 801d572:	ebac 0304 	sub.w	r3, ip, r4
 801d576:	3b15      	subs	r3, #21
 801d578:	f023 0303 	bic.w	r3, r3, #3
 801d57c:	3304      	adds	r3, #4
 801d57e:	f104 0015 	add.w	r0, r4, #21
 801d582:	4584      	cmp	ip, r0
 801d584:	bf38      	it	cc
 801d586:	2304      	movcc	r3, #4
 801d588:	50ca      	str	r2, [r1, r3]
 801d58a:	b10a      	cbz	r2, 801d590 <__lshift+0xa4>
 801d58c:	f108 0602 	add.w	r6, r8, #2
 801d590:	3e01      	subs	r6, #1
 801d592:	4638      	mov	r0, r7
 801d594:	612e      	str	r6, [r5, #16]
 801d596:	4621      	mov	r1, r4
 801d598:	f7ff fdda 	bl	801d150 <_Bfree>
 801d59c:	4628      	mov	r0, r5
 801d59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d5a2:	f842 0f04 	str.w	r0, [r2, #4]!
 801d5a6:	3301      	adds	r3, #1
 801d5a8:	e7c5      	b.n	801d536 <__lshift+0x4a>
 801d5aa:	3904      	subs	r1, #4
 801d5ac:	f853 2b04 	ldr.w	r2, [r3], #4
 801d5b0:	f841 2f04 	str.w	r2, [r1, #4]!
 801d5b4:	459c      	cmp	ip, r3
 801d5b6:	d8f9      	bhi.n	801d5ac <__lshift+0xc0>
 801d5b8:	e7ea      	b.n	801d590 <__lshift+0xa4>
 801d5ba:	bf00      	nop
 801d5bc:	0801ed10 	.word	0x0801ed10
 801d5c0:	0801ed21 	.word	0x0801ed21

0801d5c4 <__mcmp>:
 801d5c4:	690a      	ldr	r2, [r1, #16]
 801d5c6:	4603      	mov	r3, r0
 801d5c8:	6900      	ldr	r0, [r0, #16]
 801d5ca:	1a80      	subs	r0, r0, r2
 801d5cc:	b530      	push	{r4, r5, lr}
 801d5ce:	d10e      	bne.n	801d5ee <__mcmp+0x2a>
 801d5d0:	3314      	adds	r3, #20
 801d5d2:	3114      	adds	r1, #20
 801d5d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801d5d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801d5dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d5e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d5e4:	4295      	cmp	r5, r2
 801d5e6:	d003      	beq.n	801d5f0 <__mcmp+0x2c>
 801d5e8:	d205      	bcs.n	801d5f6 <__mcmp+0x32>
 801d5ea:	f04f 30ff 	mov.w	r0, #4294967295
 801d5ee:	bd30      	pop	{r4, r5, pc}
 801d5f0:	42a3      	cmp	r3, r4
 801d5f2:	d3f3      	bcc.n	801d5dc <__mcmp+0x18>
 801d5f4:	e7fb      	b.n	801d5ee <__mcmp+0x2a>
 801d5f6:	2001      	movs	r0, #1
 801d5f8:	e7f9      	b.n	801d5ee <__mcmp+0x2a>
	...

0801d5fc <__mdiff>:
 801d5fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d600:	4689      	mov	r9, r1
 801d602:	4606      	mov	r6, r0
 801d604:	4611      	mov	r1, r2
 801d606:	4648      	mov	r0, r9
 801d608:	4614      	mov	r4, r2
 801d60a:	f7ff ffdb 	bl	801d5c4 <__mcmp>
 801d60e:	1e05      	subs	r5, r0, #0
 801d610:	d112      	bne.n	801d638 <__mdiff+0x3c>
 801d612:	4629      	mov	r1, r5
 801d614:	4630      	mov	r0, r6
 801d616:	f7ff fd5b 	bl	801d0d0 <_Balloc>
 801d61a:	4602      	mov	r2, r0
 801d61c:	b928      	cbnz	r0, 801d62a <__mdiff+0x2e>
 801d61e:	4b3e      	ldr	r3, [pc, #248]	@ (801d718 <__mdiff+0x11c>)
 801d620:	f240 2137 	movw	r1, #567	@ 0x237
 801d624:	483d      	ldr	r0, [pc, #244]	@ (801d71c <__mdiff+0x120>)
 801d626:	f000 f999 	bl	801d95c <__assert_func>
 801d62a:	2301      	movs	r3, #1
 801d62c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d630:	4610      	mov	r0, r2
 801d632:	b003      	add	sp, #12
 801d634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d638:	bfbc      	itt	lt
 801d63a:	464b      	movlt	r3, r9
 801d63c:	46a1      	movlt	r9, r4
 801d63e:	4630      	mov	r0, r6
 801d640:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d644:	bfba      	itte	lt
 801d646:	461c      	movlt	r4, r3
 801d648:	2501      	movlt	r5, #1
 801d64a:	2500      	movge	r5, #0
 801d64c:	f7ff fd40 	bl	801d0d0 <_Balloc>
 801d650:	4602      	mov	r2, r0
 801d652:	b918      	cbnz	r0, 801d65c <__mdiff+0x60>
 801d654:	4b30      	ldr	r3, [pc, #192]	@ (801d718 <__mdiff+0x11c>)
 801d656:	f240 2145 	movw	r1, #581	@ 0x245
 801d65a:	e7e3      	b.n	801d624 <__mdiff+0x28>
 801d65c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d660:	6926      	ldr	r6, [r4, #16]
 801d662:	60c5      	str	r5, [r0, #12]
 801d664:	f109 0310 	add.w	r3, r9, #16
 801d668:	f109 0514 	add.w	r5, r9, #20
 801d66c:	f104 0e14 	add.w	lr, r4, #20
 801d670:	f100 0b14 	add.w	fp, r0, #20
 801d674:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801d678:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801d67c:	9301      	str	r3, [sp, #4]
 801d67e:	46d9      	mov	r9, fp
 801d680:	f04f 0c00 	mov.w	ip, #0
 801d684:	9b01      	ldr	r3, [sp, #4]
 801d686:	f85e 0b04 	ldr.w	r0, [lr], #4
 801d68a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801d68e:	9301      	str	r3, [sp, #4]
 801d690:	b281      	uxth	r1, r0
 801d692:	fa1f f38a 	uxth.w	r3, sl
 801d696:	1a5b      	subs	r3, r3, r1
 801d698:	0c00      	lsrs	r0, r0, #16
 801d69a:	4463      	add	r3, ip
 801d69c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801d6a0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801d6a4:	b29b      	uxth	r3, r3
 801d6a6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d6aa:	4576      	cmp	r6, lr
 801d6ac:	f849 3b04 	str.w	r3, [r9], #4
 801d6b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d6b4:	d8e6      	bhi.n	801d684 <__mdiff+0x88>
 801d6b6:	1b33      	subs	r3, r6, r4
 801d6b8:	3b15      	subs	r3, #21
 801d6ba:	f023 0303 	bic.w	r3, r3, #3
 801d6be:	3415      	adds	r4, #21
 801d6c0:	3304      	adds	r3, #4
 801d6c2:	42a6      	cmp	r6, r4
 801d6c4:	bf38      	it	cc
 801d6c6:	2304      	movcc	r3, #4
 801d6c8:	441d      	add	r5, r3
 801d6ca:	445b      	add	r3, fp
 801d6cc:	461e      	mov	r6, r3
 801d6ce:	462c      	mov	r4, r5
 801d6d0:	4544      	cmp	r4, r8
 801d6d2:	d30e      	bcc.n	801d6f2 <__mdiff+0xf6>
 801d6d4:	f108 0103 	add.w	r1, r8, #3
 801d6d8:	1b49      	subs	r1, r1, r5
 801d6da:	f021 0103 	bic.w	r1, r1, #3
 801d6de:	3d03      	subs	r5, #3
 801d6e0:	45a8      	cmp	r8, r5
 801d6e2:	bf38      	it	cc
 801d6e4:	2100      	movcc	r1, #0
 801d6e6:	440b      	add	r3, r1
 801d6e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d6ec:	b191      	cbz	r1, 801d714 <__mdiff+0x118>
 801d6ee:	6117      	str	r7, [r2, #16]
 801d6f0:	e79e      	b.n	801d630 <__mdiff+0x34>
 801d6f2:	f854 1b04 	ldr.w	r1, [r4], #4
 801d6f6:	46e6      	mov	lr, ip
 801d6f8:	0c08      	lsrs	r0, r1, #16
 801d6fa:	fa1c fc81 	uxtah	ip, ip, r1
 801d6fe:	4471      	add	r1, lr
 801d700:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d704:	b289      	uxth	r1, r1
 801d706:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d70a:	f846 1b04 	str.w	r1, [r6], #4
 801d70e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d712:	e7dd      	b.n	801d6d0 <__mdiff+0xd4>
 801d714:	3f01      	subs	r7, #1
 801d716:	e7e7      	b.n	801d6e8 <__mdiff+0xec>
 801d718:	0801ed10 	.word	0x0801ed10
 801d71c:	0801ed21 	.word	0x0801ed21

0801d720 <__d2b>:
 801d720:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 801d724:	2101      	movs	r1, #1
 801d726:	9e08      	ldr	r6, [sp, #32]
 801d728:	4690      	mov	r8, r2
 801d72a:	4699      	mov	r9, r3
 801d72c:	f7ff fcd0 	bl	801d0d0 <_Balloc>
 801d730:	4604      	mov	r4, r0
 801d732:	b930      	cbnz	r0, 801d742 <__d2b+0x22>
 801d734:	4602      	mov	r2, r0
 801d736:	4b24      	ldr	r3, [pc, #144]	@ (801d7c8 <__d2b+0xa8>)
 801d738:	4824      	ldr	r0, [pc, #144]	@ (801d7cc <__d2b+0xac>)
 801d73a:	f240 310f 	movw	r1, #783	@ 0x30f
 801d73e:	f000 f90d 	bl	801d95c <__assert_func>
 801d742:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d746:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d74a:	b10d      	cbz	r5, 801d750 <__d2b+0x30>
 801d74c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d750:	9301      	str	r3, [sp, #4]
 801d752:	f1b8 0300 	subs.w	r3, r8, #0
 801d756:	d024      	beq.n	801d7a2 <__d2b+0x82>
 801d758:	4668      	mov	r0, sp
 801d75a:	9300      	str	r3, [sp, #0]
 801d75c:	f7ff fd7f 	bl	801d25e <__lo0bits>
 801d760:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d764:	b1d8      	cbz	r0, 801d79e <__d2b+0x7e>
 801d766:	f1c0 0320 	rsb	r3, r0, #32
 801d76a:	fa02 f303 	lsl.w	r3, r2, r3
 801d76e:	430b      	orrs	r3, r1
 801d770:	40c2      	lsrs	r2, r0
 801d772:	6163      	str	r3, [r4, #20]
 801d774:	9201      	str	r2, [sp, #4]
 801d776:	9b01      	ldr	r3, [sp, #4]
 801d778:	61a3      	str	r3, [r4, #24]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	bf0c      	ite	eq
 801d77e:	2201      	moveq	r2, #1
 801d780:	2202      	movne	r2, #2
 801d782:	6122      	str	r2, [r4, #16]
 801d784:	b1ad      	cbz	r5, 801d7b2 <__d2b+0x92>
 801d786:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d78a:	4405      	add	r5, r0
 801d78c:	6035      	str	r5, [r6, #0]
 801d78e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d794:	6018      	str	r0, [r3, #0]
 801d796:	4620      	mov	r0, r4
 801d798:	b002      	add	sp, #8
 801d79a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801d79e:	6161      	str	r1, [r4, #20]
 801d7a0:	e7e9      	b.n	801d776 <__d2b+0x56>
 801d7a2:	a801      	add	r0, sp, #4
 801d7a4:	f7ff fd5b 	bl	801d25e <__lo0bits>
 801d7a8:	9b01      	ldr	r3, [sp, #4]
 801d7aa:	6163      	str	r3, [r4, #20]
 801d7ac:	3020      	adds	r0, #32
 801d7ae:	2201      	movs	r2, #1
 801d7b0:	e7e7      	b.n	801d782 <__d2b+0x62>
 801d7b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d7b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d7ba:	6030      	str	r0, [r6, #0]
 801d7bc:	6918      	ldr	r0, [r3, #16]
 801d7be:	f7ff fd2f 	bl	801d220 <__hi0bits>
 801d7c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d7c6:	e7e4      	b.n	801d792 <__d2b+0x72>
 801d7c8:	0801ed10 	.word	0x0801ed10
 801d7cc:	0801ed21 	.word	0x0801ed21

0801d7d0 <__sflush_r>:
 801d7d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7d6:	0716      	lsls	r6, r2, #28
 801d7d8:	4605      	mov	r5, r0
 801d7da:	460c      	mov	r4, r1
 801d7dc:	d454      	bmi.n	801d888 <__sflush_r+0xb8>
 801d7de:	684b      	ldr	r3, [r1, #4]
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	dc02      	bgt.n	801d7ea <__sflush_r+0x1a>
 801d7e4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d7e6:	2b00      	cmp	r3, #0
 801d7e8:	dd48      	ble.n	801d87c <__sflush_r+0xac>
 801d7ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d7ec:	2e00      	cmp	r6, #0
 801d7ee:	d045      	beq.n	801d87c <__sflush_r+0xac>
 801d7f0:	2300      	movs	r3, #0
 801d7f2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d7f6:	682f      	ldr	r7, [r5, #0]
 801d7f8:	6a21      	ldr	r1, [r4, #32]
 801d7fa:	602b      	str	r3, [r5, #0]
 801d7fc:	d030      	beq.n	801d860 <__sflush_r+0x90>
 801d7fe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d800:	89a3      	ldrh	r3, [r4, #12]
 801d802:	0759      	lsls	r1, r3, #29
 801d804:	d505      	bpl.n	801d812 <__sflush_r+0x42>
 801d806:	6863      	ldr	r3, [r4, #4]
 801d808:	1ad2      	subs	r2, r2, r3
 801d80a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d80c:	b10b      	cbz	r3, 801d812 <__sflush_r+0x42>
 801d80e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d810:	1ad2      	subs	r2, r2, r3
 801d812:	2300      	movs	r3, #0
 801d814:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d816:	6a21      	ldr	r1, [r4, #32]
 801d818:	4628      	mov	r0, r5
 801d81a:	47b0      	blx	r6
 801d81c:	1c43      	adds	r3, r0, #1
 801d81e:	89a3      	ldrh	r3, [r4, #12]
 801d820:	d106      	bne.n	801d830 <__sflush_r+0x60>
 801d822:	6829      	ldr	r1, [r5, #0]
 801d824:	291d      	cmp	r1, #29
 801d826:	d82b      	bhi.n	801d880 <__sflush_r+0xb0>
 801d828:	4a28      	ldr	r2, [pc, #160]	@ (801d8cc <__sflush_r+0xfc>)
 801d82a:	410a      	asrs	r2, r1
 801d82c:	07d6      	lsls	r6, r2, #31
 801d82e:	d427      	bmi.n	801d880 <__sflush_r+0xb0>
 801d830:	2200      	movs	r2, #0
 801d832:	6062      	str	r2, [r4, #4]
 801d834:	04d9      	lsls	r1, r3, #19
 801d836:	6922      	ldr	r2, [r4, #16]
 801d838:	6022      	str	r2, [r4, #0]
 801d83a:	d504      	bpl.n	801d846 <__sflush_r+0x76>
 801d83c:	1c42      	adds	r2, r0, #1
 801d83e:	d101      	bne.n	801d844 <__sflush_r+0x74>
 801d840:	682b      	ldr	r3, [r5, #0]
 801d842:	b903      	cbnz	r3, 801d846 <__sflush_r+0x76>
 801d844:	6560      	str	r0, [r4, #84]	@ 0x54
 801d846:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d848:	602f      	str	r7, [r5, #0]
 801d84a:	b1b9      	cbz	r1, 801d87c <__sflush_r+0xac>
 801d84c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d850:	4299      	cmp	r1, r3
 801d852:	d002      	beq.n	801d85a <__sflush_r+0x8a>
 801d854:	4628      	mov	r0, r5
 801d856:	f7ff fb3b 	bl	801ced0 <_free_r>
 801d85a:	2300      	movs	r3, #0
 801d85c:	6363      	str	r3, [r4, #52]	@ 0x34
 801d85e:	e00d      	b.n	801d87c <__sflush_r+0xac>
 801d860:	2301      	movs	r3, #1
 801d862:	4628      	mov	r0, r5
 801d864:	47b0      	blx	r6
 801d866:	4602      	mov	r2, r0
 801d868:	1c50      	adds	r0, r2, #1
 801d86a:	d1c9      	bne.n	801d800 <__sflush_r+0x30>
 801d86c:	682b      	ldr	r3, [r5, #0]
 801d86e:	2b00      	cmp	r3, #0
 801d870:	d0c6      	beq.n	801d800 <__sflush_r+0x30>
 801d872:	2b1d      	cmp	r3, #29
 801d874:	d001      	beq.n	801d87a <__sflush_r+0xaa>
 801d876:	2b16      	cmp	r3, #22
 801d878:	d11d      	bne.n	801d8b6 <__sflush_r+0xe6>
 801d87a:	602f      	str	r7, [r5, #0]
 801d87c:	2000      	movs	r0, #0
 801d87e:	e021      	b.n	801d8c4 <__sflush_r+0xf4>
 801d880:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d884:	b21b      	sxth	r3, r3
 801d886:	e01a      	b.n	801d8be <__sflush_r+0xee>
 801d888:	690f      	ldr	r7, [r1, #16]
 801d88a:	2f00      	cmp	r7, #0
 801d88c:	d0f6      	beq.n	801d87c <__sflush_r+0xac>
 801d88e:	0793      	lsls	r3, r2, #30
 801d890:	680e      	ldr	r6, [r1, #0]
 801d892:	bf08      	it	eq
 801d894:	694b      	ldreq	r3, [r1, #20]
 801d896:	600f      	str	r7, [r1, #0]
 801d898:	bf18      	it	ne
 801d89a:	2300      	movne	r3, #0
 801d89c:	1bf6      	subs	r6, r6, r7
 801d89e:	608b      	str	r3, [r1, #8]
 801d8a0:	2e00      	cmp	r6, #0
 801d8a2:	ddeb      	ble.n	801d87c <__sflush_r+0xac>
 801d8a4:	6a21      	ldr	r1, [r4, #32]
 801d8a6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801d8aa:	4633      	mov	r3, r6
 801d8ac:	463a      	mov	r2, r7
 801d8ae:	4628      	mov	r0, r5
 801d8b0:	47e0      	blx	ip
 801d8b2:	2800      	cmp	r0, #0
 801d8b4:	dc07      	bgt.n	801d8c6 <__sflush_r+0xf6>
 801d8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d8ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d8be:	81a3      	strh	r3, [r4, #12]
 801d8c0:	f04f 30ff 	mov.w	r0, #4294967295
 801d8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8c6:	4407      	add	r7, r0
 801d8c8:	1a36      	subs	r6, r6, r0
 801d8ca:	e7e9      	b.n	801d8a0 <__sflush_r+0xd0>
 801d8cc:	dfbffffe 	.word	0xdfbffffe

0801d8d0 <_fflush_r>:
 801d8d0:	b538      	push	{r3, r4, r5, lr}
 801d8d2:	690b      	ldr	r3, [r1, #16]
 801d8d4:	4605      	mov	r5, r0
 801d8d6:	460c      	mov	r4, r1
 801d8d8:	b913      	cbnz	r3, 801d8e0 <_fflush_r+0x10>
 801d8da:	2500      	movs	r5, #0
 801d8dc:	4628      	mov	r0, r5
 801d8de:	bd38      	pop	{r3, r4, r5, pc}
 801d8e0:	b118      	cbz	r0, 801d8ea <_fflush_r+0x1a>
 801d8e2:	6a03      	ldr	r3, [r0, #32]
 801d8e4:	b90b      	cbnz	r3, 801d8ea <_fflush_r+0x1a>
 801d8e6:	f7fe fbad 	bl	801c044 <__sinit>
 801d8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	d0f3      	beq.n	801d8da <_fflush_r+0xa>
 801d8f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d8f4:	07d0      	lsls	r0, r2, #31
 801d8f6:	d404      	bmi.n	801d902 <_fflush_r+0x32>
 801d8f8:	0599      	lsls	r1, r3, #22
 801d8fa:	d402      	bmi.n	801d902 <_fflush_r+0x32>
 801d8fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d8fe:	f7fe fc92 	bl	801c226 <__retarget_lock_acquire_recursive>
 801d902:	4628      	mov	r0, r5
 801d904:	4621      	mov	r1, r4
 801d906:	f7ff ff63 	bl	801d7d0 <__sflush_r>
 801d90a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d90c:	07da      	lsls	r2, r3, #31
 801d90e:	4605      	mov	r5, r0
 801d910:	d4e4      	bmi.n	801d8dc <_fflush_r+0xc>
 801d912:	89a3      	ldrh	r3, [r4, #12]
 801d914:	059b      	lsls	r3, r3, #22
 801d916:	d4e1      	bmi.n	801d8dc <_fflush_r+0xc>
 801d918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d91a:	f7fe fc85 	bl	801c228 <__retarget_lock_release_recursive>
 801d91e:	e7dd      	b.n	801d8dc <_fflush_r+0xc>

0801d920 <_sbrk_r>:
 801d920:	b538      	push	{r3, r4, r5, lr}
 801d922:	4d06      	ldr	r5, [pc, #24]	@ (801d93c <_sbrk_r+0x1c>)
 801d924:	2300      	movs	r3, #0
 801d926:	4604      	mov	r4, r0
 801d928:	4608      	mov	r0, r1
 801d92a:	602b      	str	r3, [r5, #0]
 801d92c:	f000 fbd4 	bl	801e0d8 <_sbrk>
 801d930:	1c43      	adds	r3, r0, #1
 801d932:	d102      	bne.n	801d93a <_sbrk_r+0x1a>
 801d934:	682b      	ldr	r3, [r5, #0]
 801d936:	b103      	cbz	r3, 801d93a <_sbrk_r+0x1a>
 801d938:	6023      	str	r3, [r4, #0]
 801d93a:	bd38      	pop	{r3, r4, r5, pc}
 801d93c:	20001ed8 	.word	0x20001ed8

0801d940 <memcpy>:
 801d940:	440a      	add	r2, r1
 801d942:	4291      	cmp	r1, r2
 801d944:	f100 33ff 	add.w	r3, r0, #4294967295
 801d948:	d100      	bne.n	801d94c <memcpy+0xc>
 801d94a:	4770      	bx	lr
 801d94c:	b510      	push	{r4, lr}
 801d94e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d952:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d956:	4291      	cmp	r1, r2
 801d958:	d1f9      	bne.n	801d94e <memcpy+0xe>
 801d95a:	bd10      	pop	{r4, pc}

0801d95c <__assert_func>:
 801d95c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d95e:	4614      	mov	r4, r2
 801d960:	461a      	mov	r2, r3
 801d962:	4b09      	ldr	r3, [pc, #36]	@ (801d988 <__assert_func+0x2c>)
 801d964:	681b      	ldr	r3, [r3, #0]
 801d966:	4605      	mov	r5, r0
 801d968:	68d8      	ldr	r0, [r3, #12]
 801d96a:	b954      	cbnz	r4, 801d982 <__assert_func+0x26>
 801d96c:	4b07      	ldr	r3, [pc, #28]	@ (801d98c <__assert_func+0x30>)
 801d96e:	461c      	mov	r4, r3
 801d970:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d974:	9100      	str	r1, [sp, #0]
 801d976:	462b      	mov	r3, r5
 801d978:	4905      	ldr	r1, [pc, #20]	@ (801d990 <__assert_func+0x34>)
 801d97a:	f000 f841 	bl	801da00 <fiprintf>
 801d97e:	f000 f851 	bl	801da24 <abort>
 801d982:	4b04      	ldr	r3, [pc, #16]	@ (801d994 <__assert_func+0x38>)
 801d984:	e7f4      	b.n	801d970 <__assert_func+0x14>
 801d986:	bf00      	nop
 801d988:	20000144 	.word	0x20000144
 801d98c:	0801eebd 	.word	0x0801eebd
 801d990:	0801ee8f 	.word	0x0801ee8f
 801d994:	0801ee82 	.word	0x0801ee82

0801d998 <_calloc_r>:
 801d998:	b570      	push	{r4, r5, r6, lr}
 801d99a:	fba1 5402 	umull	r5, r4, r1, r2
 801d99e:	b93c      	cbnz	r4, 801d9b0 <_calloc_r+0x18>
 801d9a0:	4629      	mov	r1, r5
 801d9a2:	f7ff fb09 	bl	801cfb8 <_malloc_r>
 801d9a6:	4606      	mov	r6, r0
 801d9a8:	b928      	cbnz	r0, 801d9b6 <_calloc_r+0x1e>
 801d9aa:	2600      	movs	r6, #0
 801d9ac:	4630      	mov	r0, r6
 801d9ae:	bd70      	pop	{r4, r5, r6, pc}
 801d9b0:	220c      	movs	r2, #12
 801d9b2:	6002      	str	r2, [r0, #0]
 801d9b4:	e7f9      	b.n	801d9aa <_calloc_r+0x12>
 801d9b6:	462a      	mov	r2, r5
 801d9b8:	4621      	mov	r1, r4
 801d9ba:	f7fe fbbc 	bl	801c136 <memset>
 801d9be:	e7f5      	b.n	801d9ac <_calloc_r+0x14>

0801d9c0 <__ascii_mbtowc>:
 801d9c0:	b082      	sub	sp, #8
 801d9c2:	b901      	cbnz	r1, 801d9c6 <__ascii_mbtowc+0x6>
 801d9c4:	a901      	add	r1, sp, #4
 801d9c6:	b142      	cbz	r2, 801d9da <__ascii_mbtowc+0x1a>
 801d9c8:	b14b      	cbz	r3, 801d9de <__ascii_mbtowc+0x1e>
 801d9ca:	7813      	ldrb	r3, [r2, #0]
 801d9cc:	600b      	str	r3, [r1, #0]
 801d9ce:	7812      	ldrb	r2, [r2, #0]
 801d9d0:	1e10      	subs	r0, r2, #0
 801d9d2:	bf18      	it	ne
 801d9d4:	2001      	movne	r0, #1
 801d9d6:	b002      	add	sp, #8
 801d9d8:	4770      	bx	lr
 801d9da:	4610      	mov	r0, r2
 801d9dc:	e7fb      	b.n	801d9d6 <__ascii_mbtowc+0x16>
 801d9de:	f06f 0001 	mvn.w	r0, #1
 801d9e2:	e7f8      	b.n	801d9d6 <__ascii_mbtowc+0x16>

0801d9e4 <__ascii_wctomb>:
 801d9e4:	4603      	mov	r3, r0
 801d9e6:	4608      	mov	r0, r1
 801d9e8:	b141      	cbz	r1, 801d9fc <__ascii_wctomb+0x18>
 801d9ea:	2aff      	cmp	r2, #255	@ 0xff
 801d9ec:	d904      	bls.n	801d9f8 <__ascii_wctomb+0x14>
 801d9ee:	228a      	movs	r2, #138	@ 0x8a
 801d9f0:	601a      	str	r2, [r3, #0]
 801d9f2:	f04f 30ff 	mov.w	r0, #4294967295
 801d9f6:	4770      	bx	lr
 801d9f8:	700a      	strb	r2, [r1, #0]
 801d9fa:	2001      	movs	r0, #1
 801d9fc:	4770      	bx	lr
	...

0801da00 <fiprintf>:
 801da00:	b40e      	push	{r1, r2, r3}
 801da02:	b503      	push	{r0, r1, lr}
 801da04:	4601      	mov	r1, r0
 801da06:	ab03      	add	r3, sp, #12
 801da08:	4805      	ldr	r0, [pc, #20]	@ (801da20 <fiprintf+0x20>)
 801da0a:	f853 2b04 	ldr.w	r2, [r3], #4
 801da0e:	6800      	ldr	r0, [r0, #0]
 801da10:	9301      	str	r3, [sp, #4]
 801da12:	f000 f835 	bl	801da80 <_vfiprintf_r>
 801da16:	b002      	add	sp, #8
 801da18:	f85d eb04 	ldr.w	lr, [sp], #4
 801da1c:	b003      	add	sp, #12
 801da1e:	4770      	bx	lr
 801da20:	20000144 	.word	0x20000144

0801da24 <abort>:
 801da24:	b508      	push	{r3, lr}
 801da26:	2006      	movs	r0, #6
 801da28:	f000 f9fe 	bl	801de28 <raise>
 801da2c:	2001      	movs	r0, #1
 801da2e:	f000 fb69 	bl	801e104 <_exit>

0801da32 <__sfputc_r>:
 801da32:	6893      	ldr	r3, [r2, #8]
 801da34:	3b01      	subs	r3, #1
 801da36:	2b00      	cmp	r3, #0
 801da38:	b410      	push	{r4}
 801da3a:	6093      	str	r3, [r2, #8]
 801da3c:	da07      	bge.n	801da4e <__sfputc_r+0x1c>
 801da3e:	6994      	ldr	r4, [r2, #24]
 801da40:	42a3      	cmp	r3, r4
 801da42:	db01      	blt.n	801da48 <__sfputc_r+0x16>
 801da44:	290a      	cmp	r1, #10
 801da46:	d102      	bne.n	801da4e <__sfputc_r+0x1c>
 801da48:	bc10      	pop	{r4}
 801da4a:	f000 b931 	b.w	801dcb0 <__swbuf_r>
 801da4e:	6813      	ldr	r3, [r2, #0]
 801da50:	1c58      	adds	r0, r3, #1
 801da52:	6010      	str	r0, [r2, #0]
 801da54:	7019      	strb	r1, [r3, #0]
 801da56:	4608      	mov	r0, r1
 801da58:	bc10      	pop	{r4}
 801da5a:	4770      	bx	lr

0801da5c <__sfputs_r>:
 801da5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da5e:	4606      	mov	r6, r0
 801da60:	460f      	mov	r7, r1
 801da62:	4614      	mov	r4, r2
 801da64:	18d5      	adds	r5, r2, r3
 801da66:	42ac      	cmp	r4, r5
 801da68:	d101      	bne.n	801da6e <__sfputs_r+0x12>
 801da6a:	2000      	movs	r0, #0
 801da6c:	e007      	b.n	801da7e <__sfputs_r+0x22>
 801da6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da72:	463a      	mov	r2, r7
 801da74:	4630      	mov	r0, r6
 801da76:	f7ff ffdc 	bl	801da32 <__sfputc_r>
 801da7a:	1c43      	adds	r3, r0, #1
 801da7c:	d1f3      	bne.n	801da66 <__sfputs_r+0xa>
 801da7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801da80 <_vfiprintf_r>:
 801da80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da84:	460d      	mov	r5, r1
 801da86:	b09d      	sub	sp, #116	@ 0x74
 801da88:	4614      	mov	r4, r2
 801da8a:	4698      	mov	r8, r3
 801da8c:	4606      	mov	r6, r0
 801da8e:	b118      	cbz	r0, 801da98 <_vfiprintf_r+0x18>
 801da90:	6a03      	ldr	r3, [r0, #32]
 801da92:	b90b      	cbnz	r3, 801da98 <_vfiprintf_r+0x18>
 801da94:	f7fe fad6 	bl	801c044 <__sinit>
 801da98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801da9a:	07d9      	lsls	r1, r3, #31
 801da9c:	d405      	bmi.n	801daaa <_vfiprintf_r+0x2a>
 801da9e:	89ab      	ldrh	r3, [r5, #12]
 801daa0:	059a      	lsls	r2, r3, #22
 801daa2:	d402      	bmi.n	801daaa <_vfiprintf_r+0x2a>
 801daa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801daa6:	f7fe fbbe 	bl	801c226 <__retarget_lock_acquire_recursive>
 801daaa:	89ab      	ldrh	r3, [r5, #12]
 801daac:	071b      	lsls	r3, r3, #28
 801daae:	d501      	bpl.n	801dab4 <_vfiprintf_r+0x34>
 801dab0:	692b      	ldr	r3, [r5, #16]
 801dab2:	b99b      	cbnz	r3, 801dadc <_vfiprintf_r+0x5c>
 801dab4:	4629      	mov	r1, r5
 801dab6:	4630      	mov	r0, r6
 801dab8:	f000 f938 	bl	801dd2c <__swsetup_r>
 801dabc:	b170      	cbz	r0, 801dadc <_vfiprintf_r+0x5c>
 801dabe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dac0:	07dc      	lsls	r4, r3, #31
 801dac2:	d504      	bpl.n	801dace <_vfiprintf_r+0x4e>
 801dac4:	f04f 30ff 	mov.w	r0, #4294967295
 801dac8:	b01d      	add	sp, #116	@ 0x74
 801daca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dace:	89ab      	ldrh	r3, [r5, #12]
 801dad0:	0598      	lsls	r0, r3, #22
 801dad2:	d4f7      	bmi.n	801dac4 <_vfiprintf_r+0x44>
 801dad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dad6:	f7fe fba7 	bl	801c228 <__retarget_lock_release_recursive>
 801dada:	e7f3      	b.n	801dac4 <_vfiprintf_r+0x44>
 801dadc:	2300      	movs	r3, #0
 801dade:	9309      	str	r3, [sp, #36]	@ 0x24
 801dae0:	2320      	movs	r3, #32
 801dae2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801dae6:	f8cd 800c 	str.w	r8, [sp, #12]
 801daea:	2330      	movs	r3, #48	@ 0x30
 801daec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801dc9c <_vfiprintf_r+0x21c>
 801daf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801daf4:	f04f 0901 	mov.w	r9, #1
 801daf8:	4623      	mov	r3, r4
 801dafa:	469a      	mov	sl, r3
 801dafc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801db00:	b10a      	cbz	r2, 801db06 <_vfiprintf_r+0x86>
 801db02:	2a25      	cmp	r2, #37	@ 0x25
 801db04:	d1f9      	bne.n	801dafa <_vfiprintf_r+0x7a>
 801db06:	ebba 0b04 	subs.w	fp, sl, r4
 801db0a:	d00b      	beq.n	801db24 <_vfiprintf_r+0xa4>
 801db0c:	465b      	mov	r3, fp
 801db0e:	4622      	mov	r2, r4
 801db10:	4629      	mov	r1, r5
 801db12:	4630      	mov	r0, r6
 801db14:	f7ff ffa2 	bl	801da5c <__sfputs_r>
 801db18:	3001      	adds	r0, #1
 801db1a:	f000 80a7 	beq.w	801dc6c <_vfiprintf_r+0x1ec>
 801db1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801db20:	445a      	add	r2, fp
 801db22:	9209      	str	r2, [sp, #36]	@ 0x24
 801db24:	f89a 3000 	ldrb.w	r3, [sl]
 801db28:	2b00      	cmp	r3, #0
 801db2a:	f000 809f 	beq.w	801dc6c <_vfiprintf_r+0x1ec>
 801db2e:	2300      	movs	r3, #0
 801db30:	f04f 32ff 	mov.w	r2, #4294967295
 801db34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801db38:	f10a 0a01 	add.w	sl, sl, #1
 801db3c:	9304      	str	r3, [sp, #16]
 801db3e:	9307      	str	r3, [sp, #28]
 801db40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801db44:	931a      	str	r3, [sp, #104]	@ 0x68
 801db46:	4654      	mov	r4, sl
 801db48:	2205      	movs	r2, #5
 801db4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db4e:	4853      	ldr	r0, [pc, #332]	@ (801dc9c <_vfiprintf_r+0x21c>)
 801db50:	f7e2 fb16 	bl	8000180 <memchr>
 801db54:	9a04      	ldr	r2, [sp, #16]
 801db56:	b9d8      	cbnz	r0, 801db90 <_vfiprintf_r+0x110>
 801db58:	06d1      	lsls	r1, r2, #27
 801db5a:	bf44      	itt	mi
 801db5c:	2320      	movmi	r3, #32
 801db5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801db62:	0713      	lsls	r3, r2, #28
 801db64:	bf44      	itt	mi
 801db66:	232b      	movmi	r3, #43	@ 0x2b
 801db68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801db6c:	f89a 3000 	ldrb.w	r3, [sl]
 801db70:	2b2a      	cmp	r3, #42	@ 0x2a
 801db72:	d015      	beq.n	801dba0 <_vfiprintf_r+0x120>
 801db74:	9a07      	ldr	r2, [sp, #28]
 801db76:	4654      	mov	r4, sl
 801db78:	2000      	movs	r0, #0
 801db7a:	f04f 0c0a 	mov.w	ip, #10
 801db7e:	4621      	mov	r1, r4
 801db80:	f811 3b01 	ldrb.w	r3, [r1], #1
 801db84:	3b30      	subs	r3, #48	@ 0x30
 801db86:	2b09      	cmp	r3, #9
 801db88:	d94b      	bls.n	801dc22 <_vfiprintf_r+0x1a2>
 801db8a:	b1b0      	cbz	r0, 801dbba <_vfiprintf_r+0x13a>
 801db8c:	9207      	str	r2, [sp, #28]
 801db8e:	e014      	b.n	801dbba <_vfiprintf_r+0x13a>
 801db90:	eba0 0308 	sub.w	r3, r0, r8
 801db94:	fa09 f303 	lsl.w	r3, r9, r3
 801db98:	4313      	orrs	r3, r2
 801db9a:	9304      	str	r3, [sp, #16]
 801db9c:	46a2      	mov	sl, r4
 801db9e:	e7d2      	b.n	801db46 <_vfiprintf_r+0xc6>
 801dba0:	9b03      	ldr	r3, [sp, #12]
 801dba2:	1d19      	adds	r1, r3, #4
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	9103      	str	r1, [sp, #12]
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	bfbb      	ittet	lt
 801dbac:	425b      	neglt	r3, r3
 801dbae:	f042 0202 	orrlt.w	r2, r2, #2
 801dbb2:	9307      	strge	r3, [sp, #28]
 801dbb4:	9307      	strlt	r3, [sp, #28]
 801dbb6:	bfb8      	it	lt
 801dbb8:	9204      	strlt	r2, [sp, #16]
 801dbba:	7823      	ldrb	r3, [r4, #0]
 801dbbc:	2b2e      	cmp	r3, #46	@ 0x2e
 801dbbe:	d10a      	bne.n	801dbd6 <_vfiprintf_r+0x156>
 801dbc0:	7863      	ldrb	r3, [r4, #1]
 801dbc2:	2b2a      	cmp	r3, #42	@ 0x2a
 801dbc4:	d132      	bne.n	801dc2c <_vfiprintf_r+0x1ac>
 801dbc6:	9b03      	ldr	r3, [sp, #12]
 801dbc8:	1d1a      	adds	r2, r3, #4
 801dbca:	681b      	ldr	r3, [r3, #0]
 801dbcc:	9203      	str	r2, [sp, #12]
 801dbce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801dbd2:	3402      	adds	r4, #2
 801dbd4:	9305      	str	r3, [sp, #20]
 801dbd6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801dca0 <_vfiprintf_r+0x220>
 801dbda:	7821      	ldrb	r1, [r4, #0]
 801dbdc:	2203      	movs	r2, #3
 801dbde:	4650      	mov	r0, sl
 801dbe0:	f7e2 face 	bl	8000180 <memchr>
 801dbe4:	b138      	cbz	r0, 801dbf6 <_vfiprintf_r+0x176>
 801dbe6:	9b04      	ldr	r3, [sp, #16]
 801dbe8:	eba0 000a 	sub.w	r0, r0, sl
 801dbec:	2240      	movs	r2, #64	@ 0x40
 801dbee:	4082      	lsls	r2, r0
 801dbf0:	4313      	orrs	r3, r2
 801dbf2:	3401      	adds	r4, #1
 801dbf4:	9304      	str	r3, [sp, #16]
 801dbf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dbfa:	482a      	ldr	r0, [pc, #168]	@ (801dca4 <_vfiprintf_r+0x224>)
 801dbfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801dc00:	2206      	movs	r2, #6
 801dc02:	f7e2 fabd 	bl	8000180 <memchr>
 801dc06:	2800      	cmp	r0, #0
 801dc08:	d03f      	beq.n	801dc8a <_vfiprintf_r+0x20a>
 801dc0a:	4b27      	ldr	r3, [pc, #156]	@ (801dca8 <_vfiprintf_r+0x228>)
 801dc0c:	bb1b      	cbnz	r3, 801dc56 <_vfiprintf_r+0x1d6>
 801dc0e:	9b03      	ldr	r3, [sp, #12]
 801dc10:	3307      	adds	r3, #7
 801dc12:	f023 0307 	bic.w	r3, r3, #7
 801dc16:	3308      	adds	r3, #8
 801dc18:	9303      	str	r3, [sp, #12]
 801dc1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc1c:	443b      	add	r3, r7
 801dc1e:	9309      	str	r3, [sp, #36]	@ 0x24
 801dc20:	e76a      	b.n	801daf8 <_vfiprintf_r+0x78>
 801dc22:	fb0c 3202 	mla	r2, ip, r2, r3
 801dc26:	460c      	mov	r4, r1
 801dc28:	2001      	movs	r0, #1
 801dc2a:	e7a8      	b.n	801db7e <_vfiprintf_r+0xfe>
 801dc2c:	2300      	movs	r3, #0
 801dc2e:	3401      	adds	r4, #1
 801dc30:	9305      	str	r3, [sp, #20]
 801dc32:	4619      	mov	r1, r3
 801dc34:	f04f 0c0a 	mov.w	ip, #10
 801dc38:	4620      	mov	r0, r4
 801dc3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dc3e:	3a30      	subs	r2, #48	@ 0x30
 801dc40:	2a09      	cmp	r2, #9
 801dc42:	d903      	bls.n	801dc4c <_vfiprintf_r+0x1cc>
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	d0c6      	beq.n	801dbd6 <_vfiprintf_r+0x156>
 801dc48:	9105      	str	r1, [sp, #20]
 801dc4a:	e7c4      	b.n	801dbd6 <_vfiprintf_r+0x156>
 801dc4c:	fb0c 2101 	mla	r1, ip, r1, r2
 801dc50:	4604      	mov	r4, r0
 801dc52:	2301      	movs	r3, #1
 801dc54:	e7f0      	b.n	801dc38 <_vfiprintf_r+0x1b8>
 801dc56:	ab03      	add	r3, sp, #12
 801dc58:	9300      	str	r3, [sp, #0]
 801dc5a:	462a      	mov	r2, r5
 801dc5c:	4b13      	ldr	r3, [pc, #76]	@ (801dcac <_vfiprintf_r+0x22c>)
 801dc5e:	a904      	add	r1, sp, #16
 801dc60:	4630      	mov	r0, r6
 801dc62:	f7fd fda9 	bl	801b7b8 <_printf_float>
 801dc66:	4607      	mov	r7, r0
 801dc68:	1c78      	adds	r0, r7, #1
 801dc6a:	d1d6      	bne.n	801dc1a <_vfiprintf_r+0x19a>
 801dc6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dc6e:	07d9      	lsls	r1, r3, #31
 801dc70:	d405      	bmi.n	801dc7e <_vfiprintf_r+0x1fe>
 801dc72:	89ab      	ldrh	r3, [r5, #12]
 801dc74:	059a      	lsls	r2, r3, #22
 801dc76:	d402      	bmi.n	801dc7e <_vfiprintf_r+0x1fe>
 801dc78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dc7a:	f7fe fad5 	bl	801c228 <__retarget_lock_release_recursive>
 801dc7e:	89ab      	ldrh	r3, [r5, #12]
 801dc80:	065b      	lsls	r3, r3, #25
 801dc82:	f53f af1f 	bmi.w	801dac4 <_vfiprintf_r+0x44>
 801dc86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dc88:	e71e      	b.n	801dac8 <_vfiprintf_r+0x48>
 801dc8a:	ab03      	add	r3, sp, #12
 801dc8c:	9300      	str	r3, [sp, #0]
 801dc8e:	462a      	mov	r2, r5
 801dc90:	4b06      	ldr	r3, [pc, #24]	@ (801dcac <_vfiprintf_r+0x22c>)
 801dc92:	a904      	add	r1, sp, #16
 801dc94:	4630      	mov	r0, r6
 801dc96:	f7fe f829 	bl	801bcec <_printf_i>
 801dc9a:	e7e4      	b.n	801dc66 <_vfiprintf_r+0x1e6>
 801dc9c:	0801efbf 	.word	0x0801efbf
 801dca0:	0801efc5 	.word	0x0801efc5
 801dca4:	0801efc9 	.word	0x0801efc9
 801dca8:	0801b7b9 	.word	0x0801b7b9
 801dcac:	0801da5d 	.word	0x0801da5d

0801dcb0 <__swbuf_r>:
 801dcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcb2:	460e      	mov	r6, r1
 801dcb4:	4614      	mov	r4, r2
 801dcb6:	4605      	mov	r5, r0
 801dcb8:	b118      	cbz	r0, 801dcc2 <__swbuf_r+0x12>
 801dcba:	6a03      	ldr	r3, [r0, #32]
 801dcbc:	b90b      	cbnz	r3, 801dcc2 <__swbuf_r+0x12>
 801dcbe:	f7fe f9c1 	bl	801c044 <__sinit>
 801dcc2:	69a3      	ldr	r3, [r4, #24]
 801dcc4:	60a3      	str	r3, [r4, #8]
 801dcc6:	89a3      	ldrh	r3, [r4, #12]
 801dcc8:	071a      	lsls	r2, r3, #28
 801dcca:	d501      	bpl.n	801dcd0 <__swbuf_r+0x20>
 801dccc:	6923      	ldr	r3, [r4, #16]
 801dcce:	b943      	cbnz	r3, 801dce2 <__swbuf_r+0x32>
 801dcd0:	4621      	mov	r1, r4
 801dcd2:	4628      	mov	r0, r5
 801dcd4:	f000 f82a 	bl	801dd2c <__swsetup_r>
 801dcd8:	b118      	cbz	r0, 801dce2 <__swbuf_r+0x32>
 801dcda:	f04f 37ff 	mov.w	r7, #4294967295
 801dcde:	4638      	mov	r0, r7
 801dce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dce2:	6823      	ldr	r3, [r4, #0]
 801dce4:	6922      	ldr	r2, [r4, #16]
 801dce6:	1a98      	subs	r0, r3, r2
 801dce8:	6963      	ldr	r3, [r4, #20]
 801dcea:	b2f6      	uxtb	r6, r6
 801dcec:	4283      	cmp	r3, r0
 801dcee:	4637      	mov	r7, r6
 801dcf0:	dc05      	bgt.n	801dcfe <__swbuf_r+0x4e>
 801dcf2:	4621      	mov	r1, r4
 801dcf4:	4628      	mov	r0, r5
 801dcf6:	f7ff fdeb 	bl	801d8d0 <_fflush_r>
 801dcfa:	2800      	cmp	r0, #0
 801dcfc:	d1ed      	bne.n	801dcda <__swbuf_r+0x2a>
 801dcfe:	68a3      	ldr	r3, [r4, #8]
 801dd00:	3b01      	subs	r3, #1
 801dd02:	60a3      	str	r3, [r4, #8]
 801dd04:	6823      	ldr	r3, [r4, #0]
 801dd06:	1c5a      	adds	r2, r3, #1
 801dd08:	6022      	str	r2, [r4, #0]
 801dd0a:	701e      	strb	r6, [r3, #0]
 801dd0c:	6962      	ldr	r2, [r4, #20]
 801dd0e:	1c43      	adds	r3, r0, #1
 801dd10:	429a      	cmp	r2, r3
 801dd12:	d004      	beq.n	801dd1e <__swbuf_r+0x6e>
 801dd14:	89a3      	ldrh	r3, [r4, #12]
 801dd16:	07db      	lsls	r3, r3, #31
 801dd18:	d5e1      	bpl.n	801dcde <__swbuf_r+0x2e>
 801dd1a:	2e0a      	cmp	r6, #10
 801dd1c:	d1df      	bne.n	801dcde <__swbuf_r+0x2e>
 801dd1e:	4621      	mov	r1, r4
 801dd20:	4628      	mov	r0, r5
 801dd22:	f7ff fdd5 	bl	801d8d0 <_fflush_r>
 801dd26:	2800      	cmp	r0, #0
 801dd28:	d0d9      	beq.n	801dcde <__swbuf_r+0x2e>
 801dd2a:	e7d6      	b.n	801dcda <__swbuf_r+0x2a>

0801dd2c <__swsetup_r>:
 801dd2c:	b538      	push	{r3, r4, r5, lr}
 801dd2e:	4b29      	ldr	r3, [pc, #164]	@ (801ddd4 <__swsetup_r+0xa8>)
 801dd30:	4605      	mov	r5, r0
 801dd32:	6818      	ldr	r0, [r3, #0]
 801dd34:	460c      	mov	r4, r1
 801dd36:	b118      	cbz	r0, 801dd40 <__swsetup_r+0x14>
 801dd38:	6a03      	ldr	r3, [r0, #32]
 801dd3a:	b90b      	cbnz	r3, 801dd40 <__swsetup_r+0x14>
 801dd3c:	f7fe f982 	bl	801c044 <__sinit>
 801dd40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd44:	0719      	lsls	r1, r3, #28
 801dd46:	d422      	bmi.n	801dd8e <__swsetup_r+0x62>
 801dd48:	06da      	lsls	r2, r3, #27
 801dd4a:	d407      	bmi.n	801dd5c <__swsetup_r+0x30>
 801dd4c:	2209      	movs	r2, #9
 801dd4e:	602a      	str	r2, [r5, #0]
 801dd50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd54:	81a3      	strh	r3, [r4, #12]
 801dd56:	f04f 30ff 	mov.w	r0, #4294967295
 801dd5a:	e033      	b.n	801ddc4 <__swsetup_r+0x98>
 801dd5c:	0758      	lsls	r0, r3, #29
 801dd5e:	d512      	bpl.n	801dd86 <__swsetup_r+0x5a>
 801dd60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dd62:	b141      	cbz	r1, 801dd76 <__swsetup_r+0x4a>
 801dd64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dd68:	4299      	cmp	r1, r3
 801dd6a:	d002      	beq.n	801dd72 <__swsetup_r+0x46>
 801dd6c:	4628      	mov	r0, r5
 801dd6e:	f7ff f8af 	bl	801ced0 <_free_r>
 801dd72:	2300      	movs	r3, #0
 801dd74:	6363      	str	r3, [r4, #52]	@ 0x34
 801dd76:	89a3      	ldrh	r3, [r4, #12]
 801dd78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801dd7c:	81a3      	strh	r3, [r4, #12]
 801dd7e:	2300      	movs	r3, #0
 801dd80:	6063      	str	r3, [r4, #4]
 801dd82:	6923      	ldr	r3, [r4, #16]
 801dd84:	6023      	str	r3, [r4, #0]
 801dd86:	89a3      	ldrh	r3, [r4, #12]
 801dd88:	f043 0308 	orr.w	r3, r3, #8
 801dd8c:	81a3      	strh	r3, [r4, #12]
 801dd8e:	6923      	ldr	r3, [r4, #16]
 801dd90:	b94b      	cbnz	r3, 801dda6 <__swsetup_r+0x7a>
 801dd92:	89a3      	ldrh	r3, [r4, #12]
 801dd94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801dd98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dd9c:	d003      	beq.n	801dda6 <__swsetup_r+0x7a>
 801dd9e:	4621      	mov	r1, r4
 801dda0:	4628      	mov	r0, r5
 801dda2:	f000 f883 	bl	801deac <__smakebuf_r>
 801dda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ddaa:	f013 0201 	ands.w	r2, r3, #1
 801ddae:	d00a      	beq.n	801ddc6 <__swsetup_r+0x9a>
 801ddb0:	2200      	movs	r2, #0
 801ddb2:	60a2      	str	r2, [r4, #8]
 801ddb4:	6962      	ldr	r2, [r4, #20]
 801ddb6:	4252      	negs	r2, r2
 801ddb8:	61a2      	str	r2, [r4, #24]
 801ddba:	6922      	ldr	r2, [r4, #16]
 801ddbc:	b942      	cbnz	r2, 801ddd0 <__swsetup_r+0xa4>
 801ddbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ddc2:	d1c5      	bne.n	801dd50 <__swsetup_r+0x24>
 801ddc4:	bd38      	pop	{r3, r4, r5, pc}
 801ddc6:	0799      	lsls	r1, r3, #30
 801ddc8:	bf58      	it	pl
 801ddca:	6962      	ldrpl	r2, [r4, #20]
 801ddcc:	60a2      	str	r2, [r4, #8]
 801ddce:	e7f4      	b.n	801ddba <__swsetup_r+0x8e>
 801ddd0:	2000      	movs	r0, #0
 801ddd2:	e7f7      	b.n	801ddc4 <__swsetup_r+0x98>
 801ddd4:	20000144 	.word	0x20000144

0801ddd8 <_raise_r>:
 801ddd8:	291f      	cmp	r1, #31
 801ddda:	b538      	push	{r3, r4, r5, lr}
 801dddc:	4605      	mov	r5, r0
 801ddde:	460c      	mov	r4, r1
 801dde0:	d904      	bls.n	801ddec <_raise_r+0x14>
 801dde2:	2316      	movs	r3, #22
 801dde4:	6003      	str	r3, [r0, #0]
 801dde6:	f04f 30ff 	mov.w	r0, #4294967295
 801ddea:	bd38      	pop	{r3, r4, r5, pc}
 801ddec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ddee:	b112      	cbz	r2, 801ddf6 <_raise_r+0x1e>
 801ddf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ddf4:	b94b      	cbnz	r3, 801de0a <_raise_r+0x32>
 801ddf6:	4628      	mov	r0, r5
 801ddf8:	f000 f830 	bl	801de5c <_getpid_r>
 801ddfc:	4622      	mov	r2, r4
 801ddfe:	4601      	mov	r1, r0
 801de00:	4628      	mov	r0, r5
 801de02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801de06:	f000 b817 	b.w	801de38 <_kill_r>
 801de0a:	2b01      	cmp	r3, #1
 801de0c:	d00a      	beq.n	801de24 <_raise_r+0x4c>
 801de0e:	1c59      	adds	r1, r3, #1
 801de10:	d103      	bne.n	801de1a <_raise_r+0x42>
 801de12:	2316      	movs	r3, #22
 801de14:	6003      	str	r3, [r0, #0]
 801de16:	2001      	movs	r0, #1
 801de18:	e7e7      	b.n	801ddea <_raise_r+0x12>
 801de1a:	2100      	movs	r1, #0
 801de1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801de20:	4620      	mov	r0, r4
 801de22:	4798      	blx	r3
 801de24:	2000      	movs	r0, #0
 801de26:	e7e0      	b.n	801ddea <_raise_r+0x12>

0801de28 <raise>:
 801de28:	4b02      	ldr	r3, [pc, #8]	@ (801de34 <raise+0xc>)
 801de2a:	4601      	mov	r1, r0
 801de2c:	6818      	ldr	r0, [r3, #0]
 801de2e:	f7ff bfd3 	b.w	801ddd8 <_raise_r>
 801de32:	bf00      	nop
 801de34:	20000144 	.word	0x20000144

0801de38 <_kill_r>:
 801de38:	b538      	push	{r3, r4, r5, lr}
 801de3a:	4d07      	ldr	r5, [pc, #28]	@ (801de58 <_kill_r+0x20>)
 801de3c:	2300      	movs	r3, #0
 801de3e:	4604      	mov	r4, r0
 801de40:	4608      	mov	r0, r1
 801de42:	4611      	mov	r1, r2
 801de44:	602b      	str	r3, [r5, #0]
 801de46:	f000 f92f 	bl	801e0a8 <_kill>
 801de4a:	1c43      	adds	r3, r0, #1
 801de4c:	d102      	bne.n	801de54 <_kill_r+0x1c>
 801de4e:	682b      	ldr	r3, [r5, #0]
 801de50:	b103      	cbz	r3, 801de54 <_kill_r+0x1c>
 801de52:	6023      	str	r3, [r4, #0]
 801de54:	bd38      	pop	{r3, r4, r5, pc}
 801de56:	bf00      	nop
 801de58:	20001ed8 	.word	0x20001ed8

0801de5c <_getpid_r>:
 801de5c:	f000 b914 	b.w	801e088 <_getpid>

0801de60 <__swhatbuf_r>:
 801de60:	b570      	push	{r4, r5, r6, lr}
 801de62:	460c      	mov	r4, r1
 801de64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de68:	2900      	cmp	r1, #0
 801de6a:	b096      	sub	sp, #88	@ 0x58
 801de6c:	4615      	mov	r5, r2
 801de6e:	461e      	mov	r6, r3
 801de70:	da0d      	bge.n	801de8e <__swhatbuf_r+0x2e>
 801de72:	89a3      	ldrh	r3, [r4, #12]
 801de74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801de78:	f04f 0100 	mov.w	r1, #0
 801de7c:	bf14      	ite	ne
 801de7e:	2340      	movne	r3, #64	@ 0x40
 801de80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801de84:	2000      	movs	r0, #0
 801de86:	6031      	str	r1, [r6, #0]
 801de88:	602b      	str	r3, [r5, #0]
 801de8a:	b016      	add	sp, #88	@ 0x58
 801de8c:	bd70      	pop	{r4, r5, r6, pc}
 801de8e:	466a      	mov	r2, sp
 801de90:	f000 f848 	bl	801df24 <_fstat_r>
 801de94:	2800      	cmp	r0, #0
 801de96:	dbec      	blt.n	801de72 <__swhatbuf_r+0x12>
 801de98:	9901      	ldr	r1, [sp, #4]
 801de9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801de9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801dea2:	4259      	negs	r1, r3
 801dea4:	4159      	adcs	r1, r3
 801dea6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801deaa:	e7eb      	b.n	801de84 <__swhatbuf_r+0x24>

0801deac <__smakebuf_r>:
 801deac:	898b      	ldrh	r3, [r1, #12]
 801deae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801deb0:	079d      	lsls	r5, r3, #30
 801deb2:	4606      	mov	r6, r0
 801deb4:	460c      	mov	r4, r1
 801deb6:	d507      	bpl.n	801dec8 <__smakebuf_r+0x1c>
 801deb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801debc:	6023      	str	r3, [r4, #0]
 801debe:	6123      	str	r3, [r4, #16]
 801dec0:	2301      	movs	r3, #1
 801dec2:	6163      	str	r3, [r4, #20]
 801dec4:	b003      	add	sp, #12
 801dec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dec8:	ab01      	add	r3, sp, #4
 801deca:	466a      	mov	r2, sp
 801decc:	f7ff ffc8 	bl	801de60 <__swhatbuf_r>
 801ded0:	9f00      	ldr	r7, [sp, #0]
 801ded2:	4605      	mov	r5, r0
 801ded4:	4639      	mov	r1, r7
 801ded6:	4630      	mov	r0, r6
 801ded8:	f7ff f86e 	bl	801cfb8 <_malloc_r>
 801dedc:	b948      	cbnz	r0, 801def2 <__smakebuf_r+0x46>
 801dede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dee2:	059a      	lsls	r2, r3, #22
 801dee4:	d4ee      	bmi.n	801dec4 <__smakebuf_r+0x18>
 801dee6:	f023 0303 	bic.w	r3, r3, #3
 801deea:	f043 0302 	orr.w	r3, r3, #2
 801deee:	81a3      	strh	r3, [r4, #12]
 801def0:	e7e2      	b.n	801deb8 <__smakebuf_r+0xc>
 801def2:	89a3      	ldrh	r3, [r4, #12]
 801def4:	6020      	str	r0, [r4, #0]
 801def6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801defa:	81a3      	strh	r3, [r4, #12]
 801defc:	9b01      	ldr	r3, [sp, #4]
 801defe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801df02:	b15b      	cbz	r3, 801df1c <__smakebuf_r+0x70>
 801df04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df08:	4630      	mov	r0, r6
 801df0a:	f000 f81d 	bl	801df48 <_isatty_r>
 801df0e:	b128      	cbz	r0, 801df1c <__smakebuf_r+0x70>
 801df10:	89a3      	ldrh	r3, [r4, #12]
 801df12:	f023 0303 	bic.w	r3, r3, #3
 801df16:	f043 0301 	orr.w	r3, r3, #1
 801df1a:	81a3      	strh	r3, [r4, #12]
 801df1c:	89a3      	ldrh	r3, [r4, #12]
 801df1e:	431d      	orrs	r5, r3
 801df20:	81a5      	strh	r5, [r4, #12]
 801df22:	e7cf      	b.n	801dec4 <__smakebuf_r+0x18>

0801df24 <_fstat_r>:
 801df24:	b538      	push	{r3, r4, r5, lr}
 801df26:	4d07      	ldr	r5, [pc, #28]	@ (801df44 <_fstat_r+0x20>)
 801df28:	2300      	movs	r3, #0
 801df2a:	4604      	mov	r4, r0
 801df2c:	4608      	mov	r0, r1
 801df2e:	4611      	mov	r1, r2
 801df30:	602b      	str	r3, [r5, #0]
 801df32:	f000 f8a1 	bl	801e078 <_fstat>
 801df36:	1c43      	adds	r3, r0, #1
 801df38:	d102      	bne.n	801df40 <_fstat_r+0x1c>
 801df3a:	682b      	ldr	r3, [r5, #0]
 801df3c:	b103      	cbz	r3, 801df40 <_fstat_r+0x1c>
 801df3e:	6023      	str	r3, [r4, #0]
 801df40:	bd38      	pop	{r3, r4, r5, pc}
 801df42:	bf00      	nop
 801df44:	20001ed8 	.word	0x20001ed8

0801df48 <_isatty_r>:
 801df48:	b538      	push	{r3, r4, r5, lr}
 801df4a:	4d06      	ldr	r5, [pc, #24]	@ (801df64 <_isatty_r+0x1c>)
 801df4c:	2300      	movs	r3, #0
 801df4e:	4604      	mov	r4, r0
 801df50:	4608      	mov	r0, r1
 801df52:	602b      	str	r3, [r5, #0]
 801df54:	f000 f8a0 	bl	801e098 <_isatty>
 801df58:	1c43      	adds	r3, r0, #1
 801df5a:	d102      	bne.n	801df62 <_isatty_r+0x1a>
 801df5c:	682b      	ldr	r3, [r5, #0]
 801df5e:	b103      	cbz	r3, 801df62 <_isatty_r+0x1a>
 801df60:	6023      	str	r3, [r4, #0]
 801df62:	bd38      	pop	{r3, r4, r5, pc}
 801df64:	20001ed8 	.word	0x20001ed8

0801df68 <floor>:
 801df68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df6c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801df70:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801df74:	2e13      	cmp	r6, #19
 801df76:	4602      	mov	r2, r0
 801df78:	460b      	mov	r3, r1
 801df7a:	460c      	mov	r4, r1
 801df7c:	4605      	mov	r5, r0
 801df7e:	4680      	mov	r8, r0
 801df80:	dc35      	bgt.n	801dfee <floor+0x86>
 801df82:	2e00      	cmp	r6, #0
 801df84:	da17      	bge.n	801dfb6 <floor+0x4e>
 801df86:	a334      	add	r3, pc, #208	@ (adr r3, 801e058 <floor+0xf0>)
 801df88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df8c:	f7e2 f956 	bl	800023c <__adddf3>
 801df90:	2200      	movs	r2, #0
 801df92:	2300      	movs	r3, #0
 801df94:	f7e2 fd98 	bl	8000ac8 <__aeabi_dcmpgt>
 801df98:	b150      	cbz	r0, 801dfb0 <floor+0x48>
 801df9a:	2c00      	cmp	r4, #0
 801df9c:	da57      	bge.n	801e04e <floor+0xe6>
 801df9e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801dfa2:	432c      	orrs	r4, r5
 801dfa4:	2500      	movs	r5, #0
 801dfa6:	42ac      	cmp	r4, r5
 801dfa8:	4c2d      	ldr	r4, [pc, #180]	@ (801e060 <floor+0xf8>)
 801dfaa:	bf08      	it	eq
 801dfac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801dfb0:	4623      	mov	r3, r4
 801dfb2:	462a      	mov	r2, r5
 801dfb4:	e024      	b.n	801e000 <floor+0x98>
 801dfb6:	4f2b      	ldr	r7, [pc, #172]	@ (801e064 <floor+0xfc>)
 801dfb8:	4137      	asrs	r7, r6
 801dfba:	ea01 0c07 	and.w	ip, r1, r7
 801dfbe:	ea5c 0c00 	orrs.w	ip, ip, r0
 801dfc2:	d01d      	beq.n	801e000 <floor+0x98>
 801dfc4:	a324      	add	r3, pc, #144	@ (adr r3, 801e058 <floor+0xf0>)
 801dfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfca:	f7e2 f937 	bl	800023c <__adddf3>
 801dfce:	2200      	movs	r2, #0
 801dfd0:	2300      	movs	r3, #0
 801dfd2:	f7e2 fd79 	bl	8000ac8 <__aeabi_dcmpgt>
 801dfd6:	2800      	cmp	r0, #0
 801dfd8:	d0ea      	beq.n	801dfb0 <floor+0x48>
 801dfda:	2c00      	cmp	r4, #0
 801dfdc:	bfbe      	ittt	lt
 801dfde:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801dfe2:	4133      	asrlt	r3, r6
 801dfe4:	18e4      	addlt	r4, r4, r3
 801dfe6:	ea24 0407 	bic.w	r4, r4, r7
 801dfea:	2500      	movs	r5, #0
 801dfec:	e7e0      	b.n	801dfb0 <floor+0x48>
 801dfee:	2e33      	cmp	r6, #51	@ 0x33
 801dff0:	dd0a      	ble.n	801e008 <floor+0xa0>
 801dff2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801dff6:	d103      	bne.n	801e000 <floor+0x98>
 801dff8:	f7e2 f920 	bl	800023c <__adddf3>
 801dffc:	4602      	mov	r2, r0
 801dffe:	460b      	mov	r3, r1
 801e000:	4610      	mov	r0, r2
 801e002:	4619      	mov	r1, r3
 801e004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e008:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801e00c:	f04f 3cff 	mov.w	ip, #4294967295
 801e010:	fa2c f707 	lsr.w	r7, ip, r7
 801e014:	4207      	tst	r7, r0
 801e016:	d0f3      	beq.n	801e000 <floor+0x98>
 801e018:	a30f      	add	r3, pc, #60	@ (adr r3, 801e058 <floor+0xf0>)
 801e01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e01e:	f7e2 f90d 	bl	800023c <__adddf3>
 801e022:	2200      	movs	r2, #0
 801e024:	2300      	movs	r3, #0
 801e026:	f7e2 fd4f 	bl	8000ac8 <__aeabi_dcmpgt>
 801e02a:	2800      	cmp	r0, #0
 801e02c:	d0c0      	beq.n	801dfb0 <floor+0x48>
 801e02e:	2c00      	cmp	r4, #0
 801e030:	da0a      	bge.n	801e048 <floor+0xe0>
 801e032:	2e14      	cmp	r6, #20
 801e034:	d101      	bne.n	801e03a <floor+0xd2>
 801e036:	3401      	adds	r4, #1
 801e038:	e006      	b.n	801e048 <floor+0xe0>
 801e03a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e03e:	2301      	movs	r3, #1
 801e040:	40b3      	lsls	r3, r6
 801e042:	441d      	add	r5, r3
 801e044:	4545      	cmp	r5, r8
 801e046:	d3f6      	bcc.n	801e036 <floor+0xce>
 801e048:	ea25 0507 	bic.w	r5, r5, r7
 801e04c:	e7b0      	b.n	801dfb0 <floor+0x48>
 801e04e:	2500      	movs	r5, #0
 801e050:	462c      	mov	r4, r5
 801e052:	e7ad      	b.n	801dfb0 <floor+0x48>
 801e054:	f3af 8000 	nop.w
 801e058:	8800759c 	.word	0x8800759c
 801e05c:	7e37e43c 	.word	0x7e37e43c
 801e060:	bff00000 	.word	0xbff00000
 801e064:	000fffff 	.word	0x000fffff

0801e068 <_close>:
 801e068:	4b02      	ldr	r3, [pc, #8]	@ (801e074 <_close+0xc>)
 801e06a:	2258      	movs	r2, #88	@ 0x58
 801e06c:	601a      	str	r2, [r3, #0]
 801e06e:	f04f 30ff 	mov.w	r0, #4294967295
 801e072:	4770      	bx	lr
 801e074:	20001ed8 	.word	0x20001ed8

0801e078 <_fstat>:
 801e078:	4b02      	ldr	r3, [pc, #8]	@ (801e084 <_fstat+0xc>)
 801e07a:	2258      	movs	r2, #88	@ 0x58
 801e07c:	601a      	str	r2, [r3, #0]
 801e07e:	f04f 30ff 	mov.w	r0, #4294967295
 801e082:	4770      	bx	lr
 801e084:	20001ed8 	.word	0x20001ed8

0801e088 <_getpid>:
 801e088:	4b02      	ldr	r3, [pc, #8]	@ (801e094 <_getpid+0xc>)
 801e08a:	2258      	movs	r2, #88	@ 0x58
 801e08c:	601a      	str	r2, [r3, #0]
 801e08e:	f04f 30ff 	mov.w	r0, #4294967295
 801e092:	4770      	bx	lr
 801e094:	20001ed8 	.word	0x20001ed8

0801e098 <_isatty>:
 801e098:	4b02      	ldr	r3, [pc, #8]	@ (801e0a4 <_isatty+0xc>)
 801e09a:	2258      	movs	r2, #88	@ 0x58
 801e09c:	601a      	str	r2, [r3, #0]
 801e09e:	2000      	movs	r0, #0
 801e0a0:	4770      	bx	lr
 801e0a2:	bf00      	nop
 801e0a4:	20001ed8 	.word	0x20001ed8

0801e0a8 <_kill>:
 801e0a8:	4b02      	ldr	r3, [pc, #8]	@ (801e0b4 <_kill+0xc>)
 801e0aa:	2258      	movs	r2, #88	@ 0x58
 801e0ac:	601a      	str	r2, [r3, #0]
 801e0ae:	f04f 30ff 	mov.w	r0, #4294967295
 801e0b2:	4770      	bx	lr
 801e0b4:	20001ed8 	.word	0x20001ed8

0801e0b8 <_lseek>:
 801e0b8:	4b02      	ldr	r3, [pc, #8]	@ (801e0c4 <_lseek+0xc>)
 801e0ba:	2258      	movs	r2, #88	@ 0x58
 801e0bc:	601a      	str	r2, [r3, #0]
 801e0be:	f04f 30ff 	mov.w	r0, #4294967295
 801e0c2:	4770      	bx	lr
 801e0c4:	20001ed8 	.word	0x20001ed8

0801e0c8 <_read>:
 801e0c8:	4b02      	ldr	r3, [pc, #8]	@ (801e0d4 <_read+0xc>)
 801e0ca:	2258      	movs	r2, #88	@ 0x58
 801e0cc:	601a      	str	r2, [r3, #0]
 801e0ce:	f04f 30ff 	mov.w	r0, #4294967295
 801e0d2:	4770      	bx	lr
 801e0d4:	20001ed8 	.word	0x20001ed8

0801e0d8 <_sbrk>:
 801e0d8:	4a04      	ldr	r2, [pc, #16]	@ (801e0ec <_sbrk+0x14>)
 801e0da:	6811      	ldr	r1, [r2, #0]
 801e0dc:	4603      	mov	r3, r0
 801e0de:	b909      	cbnz	r1, 801e0e4 <_sbrk+0xc>
 801e0e0:	4903      	ldr	r1, [pc, #12]	@ (801e0f0 <_sbrk+0x18>)
 801e0e2:	6011      	str	r1, [r2, #0]
 801e0e4:	6810      	ldr	r0, [r2, #0]
 801e0e6:	4403      	add	r3, r0
 801e0e8:	6013      	str	r3, [r2, #0]
 801e0ea:	4770      	bx	lr
 801e0ec:	20001ee8 	.word	0x20001ee8
 801e0f0:	20001ef0 	.word	0x20001ef0

0801e0f4 <_write>:
 801e0f4:	4b02      	ldr	r3, [pc, #8]	@ (801e100 <_write+0xc>)
 801e0f6:	2258      	movs	r2, #88	@ 0x58
 801e0f8:	601a      	str	r2, [r3, #0]
 801e0fa:	f04f 30ff 	mov.w	r0, #4294967295
 801e0fe:	4770      	bx	lr
 801e100:	20001ed8 	.word	0x20001ed8

0801e104 <_exit>:
 801e104:	e7fe      	b.n	801e104 <_exit>
	...

0801e108 <_init>:
 801e108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e10a:	bf00      	nop
 801e10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e10e:	bc08      	pop	{r3}
 801e110:	469e      	mov	lr, r3
 801e112:	4770      	bx	lr

0801e114 <_fini>:
 801e114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e116:	bf00      	nop
 801e118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e11a:	bc08      	pop	{r3}
 801e11c:	469e      	mov	lr, r3
 801e11e:	4770      	bx	lr
