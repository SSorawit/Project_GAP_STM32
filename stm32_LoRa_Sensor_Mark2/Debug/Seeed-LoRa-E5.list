
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ee10  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001448  0801ef50  0801ef50  0001ff50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  08020398  08020398  00021398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08020458  08020458  00022320  2**0
                  CONTENTS
  5 .ARM          00000008  08020458  08020458  00021458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08020460  08020460  00022320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08020460  08020460  00021460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08020464  08020464  00021464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000320  20000000  08020468  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002250  20000320  08020788  00022320  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002570  08020788  00022570  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00022320  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004008a  00000000  00000000  0002234a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a612  00000000  00000000  000623d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003340  00000000  00000000  0006c9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000026e7  00000000  00000000  0006fd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b11  00000000  00000000  0007240f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f75f  00000000  00000000  0009af20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb5c1  00000000  00000000  000da67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a5c40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e030  00000000  00000000  001a5c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001b3cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000320 	.word	0x20000320
 800015c:	00000000 	.word	0x00000000
 8000160:	0801ef38 	.word	0x0801ef38

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000324 	.word	0x20000324
 800017c:	0801ef38 	.word	0x0801ef38

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_f2iz>:
 8001014:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001018:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800101c:	d30f      	bcc.n	800103e <__aeabi_f2iz+0x2a>
 800101e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001022:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001026:	d90d      	bls.n	8001044 <__aeabi_f2iz+0x30>
 8001028:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800102c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001030:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001034:	fa23 f002 	lsr.w	r0, r3, r2
 8001038:	bf18      	it	ne
 800103a:	4240      	negne	r0, r0
 800103c:	4770      	bx	lr
 800103e:	f04f 0000 	mov.w	r0, #0
 8001042:	4770      	bx	lr
 8001044:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001048:	d101      	bne.n	800104e <__aeabi_f2iz+0x3a>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	d105      	bne.n	800105a <__aeabi_f2iz+0x46>
 800104e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001052:	bf08      	it	eq
 8001054:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr

08001060 <__aeabi_f2uiz>:
 8001060:	0042      	lsls	r2, r0, #1
 8001062:	d20e      	bcs.n	8001082 <__aeabi_f2uiz+0x22>
 8001064:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001068:	d30b      	bcc.n	8001082 <__aeabi_f2uiz+0x22>
 800106a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001072:	d409      	bmi.n	8001088 <__aeabi_f2uiz+0x28>
 8001074:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001078:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	4770      	bx	lr
 8001082:	f04f 0000 	mov.w	r0, #0
 8001086:	4770      	bx	lr
 8001088:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800108c:	d101      	bne.n	8001092 <__aeabi_f2uiz+0x32>
 800108e:	0242      	lsls	r2, r0, #9
 8001090:	d102      	bne.n	8001098 <__aeabi_f2uiz+0x38>
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	4770      	bx	lr
 8001098:	f04f 0000 	mov.w	r0, #0
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_uldivmod>:
 80010a0:	b953      	cbnz	r3, 80010b8 <__aeabi_uldivmod+0x18>
 80010a2:	b94a      	cbnz	r2, 80010b8 <__aeabi_uldivmod+0x18>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bf08      	it	eq
 80010a8:	2800      	cmpeq	r0, #0
 80010aa:	bf1c      	itt	ne
 80010ac:	f04f 31ff 	movne.w	r1, #4294967295
 80010b0:	f04f 30ff 	movne.w	r0, #4294967295
 80010b4:	f000 b96a 	b.w	800138c <__aeabi_idiv0>
 80010b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c0:	f000 f806 	bl	80010d0 <__udivmoddi4>
 80010c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010cc:	b004      	add	sp, #16
 80010ce:	4770      	bx	lr

080010d0 <__udivmoddi4>:
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d4:	9d08      	ldr	r5, [sp, #32]
 80010d6:	460c      	mov	r4, r1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d14e      	bne.n	800117a <__udivmoddi4+0xaa>
 80010dc:	4694      	mov	ip, r2
 80010de:	458c      	cmp	ip, r1
 80010e0:	4686      	mov	lr, r0
 80010e2:	fab2 f282 	clz	r2, r2
 80010e6:	d962      	bls.n	80011ae <__udivmoddi4+0xde>
 80010e8:	b14a      	cbz	r2, 80010fe <__udivmoddi4+0x2e>
 80010ea:	f1c2 0320 	rsb	r3, r2, #32
 80010ee:	4091      	lsls	r1, r2
 80010f0:	fa20 f303 	lsr.w	r3, r0, r3
 80010f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f8:	4319      	orrs	r1, r3
 80010fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80010fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001102:	fa1f f68c 	uxth.w	r6, ip
 8001106:	fbb1 f4f7 	udiv	r4, r1, r7
 800110a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800110e:	fb07 1114 	mls	r1, r7, r4, r1
 8001112:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001116:	fb04 f106 	mul.w	r1, r4, r6
 800111a:	4299      	cmp	r1, r3
 800111c:	d90a      	bls.n	8001134 <__udivmoddi4+0x64>
 800111e:	eb1c 0303 	adds.w	r3, ip, r3
 8001122:	f104 30ff 	add.w	r0, r4, #4294967295
 8001126:	f080 8112 	bcs.w	800134e <__udivmoddi4+0x27e>
 800112a:	4299      	cmp	r1, r3
 800112c:	f240 810f 	bls.w	800134e <__udivmoddi4+0x27e>
 8001130:	3c02      	subs	r4, #2
 8001132:	4463      	add	r3, ip
 8001134:	1a59      	subs	r1, r3, r1
 8001136:	fa1f f38e 	uxth.w	r3, lr
 800113a:	fbb1 f0f7 	udiv	r0, r1, r7
 800113e:	fb07 1110 	mls	r1, r7, r0, r1
 8001142:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001146:	fb00 f606 	mul.w	r6, r0, r6
 800114a:	429e      	cmp	r6, r3
 800114c:	d90a      	bls.n	8001164 <__udivmoddi4+0x94>
 800114e:	eb1c 0303 	adds.w	r3, ip, r3
 8001152:	f100 31ff 	add.w	r1, r0, #4294967295
 8001156:	f080 80fc 	bcs.w	8001352 <__udivmoddi4+0x282>
 800115a:	429e      	cmp	r6, r3
 800115c:	f240 80f9 	bls.w	8001352 <__udivmoddi4+0x282>
 8001160:	4463      	add	r3, ip
 8001162:	3802      	subs	r0, #2
 8001164:	1b9b      	subs	r3, r3, r6
 8001166:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800116a:	2100      	movs	r1, #0
 800116c:	b11d      	cbz	r5, 8001176 <__udivmoddi4+0xa6>
 800116e:	40d3      	lsrs	r3, r2
 8001170:	2200      	movs	r2, #0
 8001172:	e9c5 3200 	strd	r3, r2, [r5]
 8001176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117a:	428b      	cmp	r3, r1
 800117c:	d905      	bls.n	800118a <__udivmoddi4+0xba>
 800117e:	b10d      	cbz	r5, 8001184 <__udivmoddi4+0xb4>
 8001180:	e9c5 0100 	strd	r0, r1, [r5]
 8001184:	2100      	movs	r1, #0
 8001186:	4608      	mov	r0, r1
 8001188:	e7f5      	b.n	8001176 <__udivmoddi4+0xa6>
 800118a:	fab3 f183 	clz	r1, r3
 800118e:	2900      	cmp	r1, #0
 8001190:	d146      	bne.n	8001220 <__udivmoddi4+0x150>
 8001192:	42a3      	cmp	r3, r4
 8001194:	d302      	bcc.n	800119c <__udivmoddi4+0xcc>
 8001196:	4290      	cmp	r0, r2
 8001198:	f0c0 80f0 	bcc.w	800137c <__udivmoddi4+0x2ac>
 800119c:	1a86      	subs	r6, r0, r2
 800119e:	eb64 0303 	sbc.w	r3, r4, r3
 80011a2:	2001      	movs	r0, #1
 80011a4:	2d00      	cmp	r5, #0
 80011a6:	d0e6      	beq.n	8001176 <__udivmoddi4+0xa6>
 80011a8:	e9c5 6300 	strd	r6, r3, [r5]
 80011ac:	e7e3      	b.n	8001176 <__udivmoddi4+0xa6>
 80011ae:	2a00      	cmp	r2, #0
 80011b0:	f040 8090 	bne.w	80012d4 <__udivmoddi4+0x204>
 80011b4:	eba1 040c 	sub.w	r4, r1, ip
 80011b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011bc:	fa1f f78c 	uxth.w	r7, ip
 80011c0:	2101      	movs	r1, #1
 80011c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80011c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ca:	fb08 4416 	mls	r4, r8, r6, r4
 80011ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011d2:	fb07 f006 	mul.w	r0, r7, r6
 80011d6:	4298      	cmp	r0, r3
 80011d8:	d908      	bls.n	80011ec <__udivmoddi4+0x11c>
 80011da:	eb1c 0303 	adds.w	r3, ip, r3
 80011de:	f106 34ff 	add.w	r4, r6, #4294967295
 80011e2:	d202      	bcs.n	80011ea <__udivmoddi4+0x11a>
 80011e4:	4298      	cmp	r0, r3
 80011e6:	f200 80cd 	bhi.w	8001384 <__udivmoddi4+0x2b4>
 80011ea:	4626      	mov	r6, r4
 80011ec:	1a1c      	subs	r4, r3, r0
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80011f6:	fb08 4410 	mls	r4, r8, r0, r4
 80011fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011fe:	fb00 f707 	mul.w	r7, r0, r7
 8001202:	429f      	cmp	r7, r3
 8001204:	d908      	bls.n	8001218 <__udivmoddi4+0x148>
 8001206:	eb1c 0303 	adds.w	r3, ip, r3
 800120a:	f100 34ff 	add.w	r4, r0, #4294967295
 800120e:	d202      	bcs.n	8001216 <__udivmoddi4+0x146>
 8001210:	429f      	cmp	r7, r3
 8001212:	f200 80b0 	bhi.w	8001376 <__udivmoddi4+0x2a6>
 8001216:	4620      	mov	r0, r4
 8001218:	1bdb      	subs	r3, r3, r7
 800121a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800121e:	e7a5      	b.n	800116c <__udivmoddi4+0x9c>
 8001220:	f1c1 0620 	rsb	r6, r1, #32
 8001224:	408b      	lsls	r3, r1
 8001226:	fa22 f706 	lsr.w	r7, r2, r6
 800122a:	431f      	orrs	r7, r3
 800122c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001230:	fa04 f301 	lsl.w	r3, r4, r1
 8001234:	ea43 030c 	orr.w	r3, r3, ip
 8001238:	40f4      	lsrs	r4, r6
 800123a:	fa00 f801 	lsl.w	r8, r0, r1
 800123e:	0c38      	lsrs	r0, r7, #16
 8001240:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001244:	fbb4 fef0 	udiv	lr, r4, r0
 8001248:	fa1f fc87 	uxth.w	ip, r7
 800124c:	fb00 441e 	mls	r4, r0, lr, r4
 8001250:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001254:	fb0e f90c 	mul.w	r9, lr, ip
 8001258:	45a1      	cmp	r9, r4
 800125a:	fa02 f201 	lsl.w	r2, r2, r1
 800125e:	d90a      	bls.n	8001276 <__udivmoddi4+0x1a6>
 8001260:	193c      	adds	r4, r7, r4
 8001262:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001266:	f080 8084 	bcs.w	8001372 <__udivmoddi4+0x2a2>
 800126a:	45a1      	cmp	r9, r4
 800126c:	f240 8081 	bls.w	8001372 <__udivmoddi4+0x2a2>
 8001270:	f1ae 0e02 	sub.w	lr, lr, #2
 8001274:	443c      	add	r4, r7
 8001276:	eba4 0409 	sub.w	r4, r4, r9
 800127a:	fa1f f983 	uxth.w	r9, r3
 800127e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001282:	fb00 4413 	mls	r4, r0, r3, r4
 8001286:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800128a:	fb03 fc0c 	mul.w	ip, r3, ip
 800128e:	45a4      	cmp	ip, r4
 8001290:	d907      	bls.n	80012a2 <__udivmoddi4+0x1d2>
 8001292:	193c      	adds	r4, r7, r4
 8001294:	f103 30ff 	add.w	r0, r3, #4294967295
 8001298:	d267      	bcs.n	800136a <__udivmoddi4+0x29a>
 800129a:	45a4      	cmp	ip, r4
 800129c:	d965      	bls.n	800136a <__udivmoddi4+0x29a>
 800129e:	3b02      	subs	r3, #2
 80012a0:	443c      	add	r4, r7
 80012a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80012a6:	fba0 9302 	umull	r9, r3, r0, r2
 80012aa:	eba4 040c 	sub.w	r4, r4, ip
 80012ae:	429c      	cmp	r4, r3
 80012b0:	46ce      	mov	lr, r9
 80012b2:	469c      	mov	ip, r3
 80012b4:	d351      	bcc.n	800135a <__udivmoddi4+0x28a>
 80012b6:	d04e      	beq.n	8001356 <__udivmoddi4+0x286>
 80012b8:	b155      	cbz	r5, 80012d0 <__udivmoddi4+0x200>
 80012ba:	ebb8 030e 	subs.w	r3, r8, lr
 80012be:	eb64 040c 	sbc.w	r4, r4, ip
 80012c2:	fa04 f606 	lsl.w	r6, r4, r6
 80012c6:	40cb      	lsrs	r3, r1
 80012c8:	431e      	orrs	r6, r3
 80012ca:	40cc      	lsrs	r4, r1
 80012cc:	e9c5 6400 	strd	r6, r4, [r5]
 80012d0:	2100      	movs	r1, #0
 80012d2:	e750      	b.n	8001176 <__udivmoddi4+0xa6>
 80012d4:	f1c2 0320 	rsb	r3, r2, #32
 80012d8:	fa20 f103 	lsr.w	r1, r0, r3
 80012dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80012e0:	fa24 f303 	lsr.w	r3, r4, r3
 80012e4:	4094      	lsls	r4, r2
 80012e6:	430c      	orrs	r4, r1
 80012e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80012f0:	fa1f f78c 	uxth.w	r7, ip
 80012f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80012f8:	fb08 3110 	mls	r1, r8, r0, r3
 80012fc:	0c23      	lsrs	r3, r4, #16
 80012fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001302:	fb00 f107 	mul.w	r1, r0, r7
 8001306:	4299      	cmp	r1, r3
 8001308:	d908      	bls.n	800131c <__udivmoddi4+0x24c>
 800130a:	eb1c 0303 	adds.w	r3, ip, r3
 800130e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001312:	d22c      	bcs.n	800136e <__udivmoddi4+0x29e>
 8001314:	4299      	cmp	r1, r3
 8001316:	d92a      	bls.n	800136e <__udivmoddi4+0x29e>
 8001318:	3802      	subs	r0, #2
 800131a:	4463      	add	r3, ip
 800131c:	1a5b      	subs	r3, r3, r1
 800131e:	b2a4      	uxth	r4, r4
 8001320:	fbb3 f1f8 	udiv	r1, r3, r8
 8001324:	fb08 3311 	mls	r3, r8, r1, r3
 8001328:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800132c:	fb01 f307 	mul.w	r3, r1, r7
 8001330:	42a3      	cmp	r3, r4
 8001332:	d908      	bls.n	8001346 <__udivmoddi4+0x276>
 8001334:	eb1c 0404 	adds.w	r4, ip, r4
 8001338:	f101 36ff 	add.w	r6, r1, #4294967295
 800133c:	d213      	bcs.n	8001366 <__udivmoddi4+0x296>
 800133e:	42a3      	cmp	r3, r4
 8001340:	d911      	bls.n	8001366 <__udivmoddi4+0x296>
 8001342:	3902      	subs	r1, #2
 8001344:	4464      	add	r4, ip
 8001346:	1ae4      	subs	r4, r4, r3
 8001348:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800134c:	e739      	b.n	80011c2 <__udivmoddi4+0xf2>
 800134e:	4604      	mov	r4, r0
 8001350:	e6f0      	b.n	8001134 <__udivmoddi4+0x64>
 8001352:	4608      	mov	r0, r1
 8001354:	e706      	b.n	8001164 <__udivmoddi4+0x94>
 8001356:	45c8      	cmp	r8, r9
 8001358:	d2ae      	bcs.n	80012b8 <__udivmoddi4+0x1e8>
 800135a:	ebb9 0e02 	subs.w	lr, r9, r2
 800135e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001362:	3801      	subs	r0, #1
 8001364:	e7a8      	b.n	80012b8 <__udivmoddi4+0x1e8>
 8001366:	4631      	mov	r1, r6
 8001368:	e7ed      	b.n	8001346 <__udivmoddi4+0x276>
 800136a:	4603      	mov	r3, r0
 800136c:	e799      	b.n	80012a2 <__udivmoddi4+0x1d2>
 800136e:	4630      	mov	r0, r6
 8001370:	e7d4      	b.n	800131c <__udivmoddi4+0x24c>
 8001372:	46d6      	mov	lr, sl
 8001374:	e77f      	b.n	8001276 <__udivmoddi4+0x1a6>
 8001376:	4463      	add	r3, ip
 8001378:	3802      	subs	r0, #2
 800137a:	e74d      	b.n	8001218 <__udivmoddi4+0x148>
 800137c:	4606      	mov	r6, r0
 800137e:	4623      	mov	r3, r4
 8001380:	4608      	mov	r0, r1
 8001382:	e70f      	b.n	80011a4 <__udivmoddi4+0xd4>
 8001384:	3e02      	subs	r6, #2
 8001386:	4463      	add	r3, ip
 8001388:	e730      	b.n	80011ec <__udivmoddi4+0x11c>
 800138a:	bf00      	nop

0800138c <__aeabi_idiv0>:
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800139c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800139e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013d6:	4013      	ands	r3, r2
 80013d8:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80013e8:	4b23      	ldr	r3, [pc, #140]	@ (8001478 <MX_ADC_Init+0x94>)
 80013ea:	4a24      	ldr	r2, [pc, #144]	@ (800147c <MX_ADC_Init+0x98>)
 80013ec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013ee:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <MX_ADC_Init+0x94>)
 80013f0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013f4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013f6:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <MX_ADC_Init+0x94>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <MX_ADC_Init+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001402:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <MX_ADC_Init+0x94>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <MX_ADC_Init+0x94>)
 800140a:	2204      	movs	r2, #4
 800140c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_ADC_Init+0x94>)
 8001410:	2200      	movs	r2, #0
 8001412:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_ADC_Init+0x94>)
 8001416:	2200      	movs	r2, #0
 8001418:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800141a:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <MX_ADC_Init+0x94>)
 800141c:	2200      	movs	r2, #0
 800141e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <MX_ADC_Init+0x94>)
 8001422:	2201      	movs	r2, #1
 8001424:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <MX_ADC_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <MX_ADC_Init+0x94>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001434:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <MX_ADC_Init+0x94>)
 8001436:	2200      	movs	r2, #0
 8001438:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <MX_ADC_Init+0x94>)
 800143c:	2200      	movs	r2, #0
 800143e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001442:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <MX_ADC_Init+0x94>)
 8001444:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001448:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800144a:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <MX_ADC_Init+0x94>)
 800144c:	2207      	movs	r2, #7
 800144e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001450:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <MX_ADC_Init+0x94>)
 8001452:	2207      	movs	r2, #7
 8001454:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001456:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <MX_ADC_Init+0x94>)
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <MX_ADC_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	@ (8001478 <MX_ADC_Init+0x94>)
 8001466:	f002 f9d5 	bl	8003814 <HAL_ADC_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001470:	f000 fb82 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	2000033c 	.word	0x2000033c
 800147c:	40012400 	.word	0x40012400

08001480 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <HAL_ADC_MspInit+0x24>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d103      	bne.n	800149a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001492:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001496:	f7ff ff7b 	bl	8001390 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40012400 	.word	0x40012400

080014a8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <HAL_ADC_MspDeInit+0x24>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d103      	bne.n	80014c2 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80014ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014be:	f7ff ff7f 	bl	80013c0 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40012400 	.word	0x40012400

080014d0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <SYS_InitMeasurement+0x14>)
 80014d6:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <SYS_InitMeasurement+0x18>)
 80014d8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	2000033c 	.word	0x2000033c
 80014e8:	40012400 	.word	0x40012400

080014ec <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80014fa:	4813      	ldr	r0, [pc, #76]	@ (8001548 <SYS_GetBatteryLevel+0x5c>)
 80014fc:	f000 f82a 	bl	8001554 <ADC_ReadChannels>
 8001500:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	80fb      	strh	r3, [r7, #6]
 800150c:	e016      	b.n	800153c <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800150e:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <SYS_GetBatteryLevel+0x60>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001516:	4293      	cmp	r3, r2
 8001518:	d00b      	beq.n	8001532 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <SYS_GetBatteryLevel+0x60>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001524:	fb03 f202 	mul.w	r2, r3, r2
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	80fb      	strh	r3, [r7, #6]
 8001530:	e004      	b.n	800153c <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001532:	4a07      	ldr	r2, [pc, #28]	@ (8001550 <SYS_GetBatteryLevel+0x64>)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 800153c:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	b4002000 	.word	0xb4002000
 800154c:	1fff75aa 	.word	0x1fff75aa
 8001550:	004c08d8 	.word	0x004c08d8

08001554 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 800156c:	f7ff ff3a 	bl	80013e4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001570:	481a      	ldr	r0, [pc, #104]	@ (80015dc <ADC_ReadChannels+0x88>)
 8001572:	f002 ff7e 	bl	8004472 <HAL_ADCEx_Calibration_Start>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 800157c:	f000 fafc 	bl	8001b78 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	4619      	mov	r1, r3
 8001592:	4812      	ldr	r0, [pc, #72]	@ (80015dc <ADC_ReadChannels+0x88>)
 8001594:	f002 fc8a 	bl	8003eac <HAL_ADC_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800159e:	f000 faeb 	bl	8001b78 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80015a2:	480e      	ldr	r0, [pc, #56]	@ (80015dc <ADC_ReadChannels+0x88>)
 80015a4:	f002 fb66 	bl	8003c74 <HAL_ADC_Start>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80015ae:	f000 fae3 	bl	8001b78 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80015b2:	f04f 31ff 	mov.w	r1, #4294967295
 80015b6:	4809      	ldr	r0, [pc, #36]	@ (80015dc <ADC_ReadChannels+0x88>)
 80015b8:	f002 fbd4 	bl	8003d64 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80015bc:	4807      	ldr	r0, [pc, #28]	@ (80015dc <ADC_ReadChannels+0x88>)
 80015be:	f002 fb9f 	bl	8003d00 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80015c2:	4806      	ldr	r0, [pc, #24]	@ (80015dc <ADC_ReadChannels+0x88>)
 80015c4:	f002 fc65 	bl	8003e92 <HAL_ADC_GetValue>
 80015c8:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80015ca:	4804      	ldr	r0, [pc, #16]	@ (80015dc <ADC_ReadChannels+0x88>)
 80015cc:	f002 fad6 	bl	8003b7c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80015d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000033c 	.word	0x2000033c

080015e0 <LL_AHB1_GRP1_EnableClock>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4013      	ands	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001604:	68fb      	ldr	r3, [r7, #12]
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001614:	2004      	movs	r0, #4
 8001616:	f7ff ffe3 	bl	80015e0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff ffe0 	bl	80015e0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2102      	movs	r1, #2
 8001624:	200b      	movs	r0, #11
 8001626:	f003 f8ca 	bl	80047be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800162a:	200b      	movs	r0, #11
 800162c:	f003 f8e1 	bl	80047f2 <HAL_NVIC_EnableIRQ>

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001640:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001644:	d101      	bne.n	800164a <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 800164a:	2300      	movs	r3, #0
#endif
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	58004000 	.word	0x58004000

08001658 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	@ 0x30
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t page_start_index = PAGE(address);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001670:	4b56      	ldr	r3, [pc, #344]	@ (80017cc <FLASH_IF_Write+0x174>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0299      	lsls	r1, r3, #10
 8001676:	4b56      	ldr	r3, [pc, #344]	@ (80017d0 <FLASH_IF_Write+0x178>)
 8001678:	400b      	ands	r3, r1
 800167a:	fbb2 f1f3 	udiv	r1, r2, r3
 800167e:	fb01 f303 	mul.w	r3, r1, r3
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	0adb      	lsrs	r3, r3, #11
 8001686:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001692:	3b01      	subs	r3, #1
 8001694:	4a4d      	ldr	r2, [pc, #308]	@ (80017cc <FLASH_IF_Write+0x174>)
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	0291      	lsls	r1, r2, #10
 800169a:	4a4d      	ldr	r2, [pc, #308]	@ (80017d0 <FLASH_IF_Write+0x178>)
 800169c:	400a      	ands	r2, r1
 800169e:	fbb3 f1f2 	udiv	r1, r3, r2
 80016a2:	fb01 f202 	mul.w	r2, r1, r2
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	0adb      	lsrs	r3, r3, #11
 80016aa:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t curr_dest_addr = address;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d009      	beq.n	80016d2 <FLASH_IF_Write+0x7a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d104      	bne.n	80016d2 <FLASH_IF_Write+0x7a>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 80016d2:	f06f 0304 	mvn.w	r3, #4
 80016d6:	e074      	b.n	80017c2 <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80016d8:	4b3e      	ldr	r3, [pc, #248]	@ (80017d4 <FLASH_IF_Write+0x17c>)
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	da02      	bge.n	80016e6 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 80016e0:	f06f 0303 	mvn.w	r3, #3
 80016e4:	e06d      	b.n	80017c2 <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d005      	beq.n	80016fa <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016f4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80016f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	e05b      	b.n	80017b8 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001704:	4618      	mov	r0, r3
 8001706:	f000 f8f8 	bl	80018fa <FLASH_IF_IsEmpty>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d037      	beq.n	8001780 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001716:	f06f 0304 	mvn.w	r3, #4
 800171a:	e052      	b.n	80017c2 <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001722:	02db      	lsls	r3, r3, #11
 8001724:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001728:	4619      	mov	r1, r3
 800172a:	6838      	ldr	r0, [r7, #0]
 800172c:	f019 fc44 	bl	801afb8 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	4413      	add	r3, r2
 800173a:	6a39      	ldr	r1, [r7, #32]
 800173c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800173e:	b292      	uxth	r2, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f019 fc39 	bl	801afb8 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001746:	2200      	movs	r2, #0
 8001748:	2101      	movs	r1, #1
 800174a:	69f8      	ldr	r0, [r7, #28]
 800174c:	f000 f865 	bl	800181a <FLASH_IF_EraseByPages>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 8001756:	f06f 0301 	mvn.w	r3, #1
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 800175c:	e030      	b.n	80017c0 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001764:	02db      	lsls	r3, r3, #11
 8001766:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800176a:	6839      	ldr	r1, [r7, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f88a 	bl	8001886 <FLASH_IF_Write_Buffer>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d010      	beq.n	800179a <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001778:	f06f 0302 	mvn.w	r3, #2
 800177c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break; /* exit for loop */
 800177e:	e01f      	b.n	80017c0 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001784:	4619      	mov	r1, r3
 8001786:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001788:	f000 f87d 	bl	8001886 <FLASH_IF_Write_Buffer>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 8001792:	f06f 0302 	mvn.w	r3, #2
 8001796:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 8001798:	e012      	b.n	80017c0 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 800179a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179e:	4413      	add	r3, r2
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
    curr_src_addr += curr_size;
 80017a2:	6a3a      	ldr	r2, [r7, #32]
 80017a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a6:	4413      	add	r3, r2
 80017a8:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3301      	adds	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d99f      	bls.n	8001700 <FLASH_IF_Write+0xa8>
  }

  return status;
 80017c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3730      	adds	r7, #48	@ 0x30
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	1fff75e0 	.word	0x1fff75e0
 80017d0:	03fffc00 	.word	0x03fffc00
 80017d4:	58004000 	.word	0x58004000

080017d8 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 80017e4:	e00b      	b.n	80017fe <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 80017e6:	bf00      	nop
 80017e8:	f7ff ff24 	bl	8001634 <LL_FLASH_IsActiveFlag_OperationSuspended>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1fa      	bne.n	80017e8 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80017f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017f6:	68f9      	ldr	r1, [r7, #12]
 80017f8:	2001      	movs	r0, #1
 80017fa:	f003 fc01 	bl	8005000 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001808:	4299      	cmp	r1, r3
 800180a:	bf08      	it	eq
 800180c:	4290      	cmpeq	r0, r2
 800180e:	d1ea      	bne.n	80017e6 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001810:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b08a      	sub	sp, #40	@ 0x28
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	460b      	mov	r3, r1
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001828:	2302      	movs	r3, #2
 800182a:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001830:	897b      	ldrh	r3, [r7, #10]
 8001832:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800183a:	f107 0318 	add.w	r3, r7, #24
 800183e:	4618      	mov	r0, r3
 8001840:	f003 fd7c 	bl	800533c <HAL_FLASHEx_Erase_IT>
 8001844:	4603      	mov	r3, r0
 8001846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800184a:	e00a      	b.n	8001862 <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 800184c:	f107 0214 	add.w	r2, r7, #20
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fd18 	bl	800528c <HAL_FLASHEx_Erase>
 800185c:	4603      	mov	r3, r0
 800185e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001862:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <FLASH_IF_EraseByPages+0x62>
 800186a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800186e:	2b02      	cmp	r3, #2
 8001870:	d101      	bne.n	8001876 <FLASH_IF_EraseByPages+0x5c>
 8001872:	2301      	movs	r3, #1
 8001874:	e003      	b.n	800187e <FLASH_IF_EraseByPages+0x64>
 8001876:	f06f 0301 	mvn.w	r3, #1
 800187a:	e000      	b.n	800187e <FLASH_IF_EraseByPages+0x64>
 800187c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 800187e:	4618      	mov	r0, r3
 8001880:	3728      	adds	r7, #40	@ 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b08a      	sub	sp, #40	@ 0x28
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	e020      	b.n	80018e2 <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	2208      	movs	r2, #8
 80018a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018a8:	4618      	mov	r0, r3
 80018aa:	f019 fb85 	bl	801afb8 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80018ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b6:	bf08      	it	eq
 80018b8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80018bc:	d005      	beq.n	80018ca <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80018be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f7ff ff88 	bl	80017d8 <FLASH_IF_Write64>
 80018c8:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3308      	adds	r3, #8
 80018ce:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	3308      	adds	r3, #8
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (status != FLASH_OK)
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d108      	bne.n	80018ee <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	3301      	adds	r3, #1
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d3d9      	bcc.n	80018a0 <FLASH_IF_Write_Buffer+0x1a>
 80018ec:	e000      	b.n	80018f0 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 80018ee:	bf00      	nop
    }
  }

  return status;
 80018f0:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3728      	adds	r7, #40	@ 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001904:	e00a      	b.n	800191c <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2bff      	cmp	r3, #255	@ 0xff
 8001910:	d001      	beq.n	8001916 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001912:	2301      	movs	r3, #1
 8001914:	e039      	b.n	800198a <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	3b01      	subs	r3, #1
 800191a:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ef      	bne.n	8001906 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	e010      	b.n	8001952 <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f103 0208 	add.w	r2, r3, #8
 8001936:	60fa      	str	r2, [r7, #12]
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	bf08      	it	eq
 8001942:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001946:	d001      	beq.n	800194c <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001948:	2301      	movs	r3, #1
 800194a:	e01e      	b.n	800198a <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3301      	adds	r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	429a      	cmp	r2, r3
 800195a:	d3e9      	bcc.n	8001930 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	607b      	str	r3, [r7, #4]
  while (size != 0)
 800196a:	e00a      	b.n	8001982 <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2bff      	cmp	r3, #255	@ 0xff
 8001976:	d001      	beq.n	800197c <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001978:	2301      	movs	r3, #1
 800197a:	e006      	b.n	800198a <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	3b01      	subs	r3, #1
 8001980:	603b      	str	r3, [r7, #0]
  while (size != 0)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f1      	bne.n	800196c <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8001988:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <LL_AHB2_GRP1_EnableClock>:
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800199c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019b8:	68fb      	ldr	r3, [r7, #12]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d8:	2004      	movs	r0, #4
 80019da:	f7ff ffdb 	bl	8001994 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	2002      	movs	r0, #2
 80019e0:	f7ff ffd8 	bl	8001994 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff ffd5 	bl	8001994 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 6183 	mov.w	r1, #1048	@ 0x418
 80019f0:	4821      	ldr	r0, [pc, #132]	@ (8001a78 <MX_GPIO_Init+0xb4>)
 80019f2:	f003 ff95 	bl	8005920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	2120      	movs	r1, #32
 80019fa:	481f      	ldr	r0, [pc, #124]	@ (8001a78 <MX_GPIO_Init+0xb4>)
 80019fc:	f003 ff90 	bl	8005920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2131      	movs	r1, #49	@ 0x31
 8001a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a08:	f003 ff8a 	bl	8005920 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001a0c:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8001a10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	4815      	ldr	r0, [pc, #84]	@ (8001a78 <MX_GPIO_Init+0xb4>)
 8001a24:	f003 fd4e 	bl	80054c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001a28:	2331      	movs	r3, #49	@ 0x31
 8001a2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a40:	f003 fd40 	bl	80054c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001a44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a4a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	4619      	mov	r1, r3
 8001a58:	4807      	ldr	r0, [pc, #28]	@ (8001a78 <MX_GPIO_Init+0xb4>)
 8001a5a:	f003 fd33 	bl	80054c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	2029      	movs	r0, #41	@ 0x29
 8001a64:	f002 feab 	bl	80047be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a68:	2029      	movs	r0, #41	@ 0x29
 8001a6a:	f002 fec2 	bl	80047f2 <HAL_NVIC_EnableIRQ>

}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	48000400 	.word	0x48000400

08001a7c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8c:	f023 0218 	bic.w	r2, r3, #24
 8001a90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aaa:	f001 fcc5 	bl	8003438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aae:	f000 f809 	bl	8001ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab2:	f7ff ff87 	bl	80019c4 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001ab6:	f008 fd91 	bl	800a5dc <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001aba:	f001 f979 	bl	8002db0 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001abe:	f008 fd95 	bl	800a5ec <MX_LoRaWAN_Process>
 8001ac2:	e7fc      	b.n	8001abe <main+0x18>

08001ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b09a      	sub	sp, #104	@ 0x68
 8001ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aca:	f107 0320 	add.w	r3, r7, #32
 8001ace:	2248      	movs	r2, #72	@ 0x48
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f01b fb24 	bl	801d120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad8:	f107 0308 	add.w	r3, r7, #8
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
 8001ae8:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001aea:	f003 ff49 	bl	8005980 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7ff ffc4 	bl	8001a7c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b74 <SystemClock_Config+0xb0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001afc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b74 <SystemClock_Config+0xb0>)
 8001afe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <SystemClock_Config+0xb0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b10:	2324      	movs	r3, #36	@ 0x24
 8001b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b14:	2381      	movs	r3, #129	@ 0x81
 8001b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001b20:	23b0      	movs	r3, #176	@ 0xb0
 8001b22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b28:	f107 0320 	add.w	r3, r7, #32
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f004 fa73 	bl	8006018 <HAL_RCC_OscConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001b38:	f000 f81e 	bl	8001b78 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001b3c:	234f      	movs	r3, #79	@ 0x4f
 8001b3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	2102      	movs	r1, #2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f004 fdf8 	bl	8006750 <HAL_RCC_ClockConfig>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b66:	f000 f807 	bl	8001b78 <Error_Handler>
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3768      	adds	r7, #104	@ 0x68
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	58000400 	.word	0x58000400

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
}
 8001b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <Error_Handler+0x8>

08001b84 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <LL_APB1_GRP1_EnableClock>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	@ 0x30
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	222c      	movs	r2, #44	@ 0x2c
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f01b fa9d 	bl	801d120 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001be6:	4b22      	ldr	r3, [pc, #136]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001be8:	4a22      	ldr	r2, [pc, #136]	@ (8001c74 <MX_RTC_Init+0xa0>)
 8001bea:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001bec:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001bee:	221f      	movs	r2, #31
 8001bf0:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001c06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c0a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001c12:	4b17      	ldr	r3, [pc, #92]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001c14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c1a:	4815      	ldr	r0, [pc, #84]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001c1c:	f005 fa54 	bl	80070c8 <HAL_RTC_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001c26:	f7ff ffa7 	bl	8001b78 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001c2a:	4811      	ldr	r0, [pc, #68]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001c2c:	f005 fd42 	bl	80076b4 <HAL_RTCEx_SetSSRU_IT>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001c36:	f7ff ff9f 	bl	8001b78 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c46:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c4a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	2200      	movs	r2, #0
 8001c56:	4619      	mov	r1, r3
 8001c58:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001c5a:	f005 faaf 	bl	80071bc <HAL_RTC_SetAlarm_IT>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001c64:	f7ff ff88 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	3730      	adds	r7, #48	@ 0x30
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200003a0 	.word	0x200003a0
 8001c74:	40002800 	.word	0x40002800

08001c78 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b090      	sub	sp, #64	@ 0x40
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	2238      	movs	r2, #56	@ 0x38
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f01b fa49 	bl	801d120 <memset>
  if(rtcHandle->Instance==RTC)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a16      	ldr	r2, [pc, #88]	@ (8001cec <HAL_RTC_MspInit+0x74>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d125      	bne.n	8001ce4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c9c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f005 f8f3 	bl	8006e94 <HAL_RCCEx_PeriphCLKConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001cb4:	f7ff ff60 	bl	8001b78 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cb8:	f7ff ff64 	bl	8001b84 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001cbc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001cc0:	f7ff ff70 	bl	8001ba4 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2002      	movs	r0, #2
 8001cca:	f002 fd78 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f002 fd8f 	bl	80047f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	202a      	movs	r0, #42	@ 0x2a
 8001cda:	f002 fd70 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001cde:	202a      	movs	r0, #42	@ 0x2a
 8001ce0:	f002 fd87 	bl	80047f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3740      	adds	r7, #64	@ 0x40
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40002800 	.word	0x40002800

08001cf0 <SensorApp_Init>:

static void Build_Modbus_Request(uint8_t slave_addr, uint16_t start_reg, uint16_t quantity);
static uint16_t Modbus_CRC16(uint8_t *buf, uint8_t len);
static void Decode_TempHumi(uint8_t *rx_buf);

void SensorApp_Init(void) {
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
    sensor_status = SENSOR_IDLE;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <SensorApp_Init+0x14>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	200003d8 	.word	0x200003d8

08001d08 <SensorApp_StartRead>:

void SensorApp_StartRead(void) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
    if (sensor_status == SENSOR_IDLE) {
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <SensorApp_StartRead+0x38>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d113      	bne.n	8001d3c <SensorApp_StartRead+0x34>
        Build_Modbus_Request(0x01, 0x0000, 0x0004);  // Ex: temp/humi sensor
 8001d14:	2204      	movs	r2, #4
 8001d16:	2100      	movs	r1, #0
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f000 f8c9 	bl	8001eb0 <Build_Modbus_Request>
        HAL_UART_Transmit(&huart2, modbus_frame, 8, 1000);
 8001d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d22:	2208      	movs	r2, #8
 8001d24:	4907      	ldr	r1, [pc, #28]	@ (8001d44 <SensorApp_StartRead+0x3c>)
 8001d26:	4808      	ldr	r0, [pc, #32]	@ (8001d48 <SensorApp_StartRead+0x40>)
 8001d28:	f006 fa6f 	bl	800820a <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart2, rx_buffer, 16);  // non-blocking
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	4907      	ldr	r1, [pc, #28]	@ (8001d4c <SensorApp_StartRead+0x44>)
 8001d30:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <SensorApp_StartRead+0x40>)
 8001d32:	f006 fb01 	bl	8008338 <HAL_UART_Receive_IT>
        sensor_status = SENSOR_READING;
 8001d36:	4b02      	ldr	r3, [pc, #8]	@ (8001d40 <SensorApp_StartRead+0x38>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
    }
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	200003d8 	.word	0x200003d8
 8001d44:	20000408 	.word	0x20000408
 8001d48:	200004bc 	.word	0x200004bc
 8001d4c:	200003f8 	.word	0x200003f8

08001d50 <SensorApp_IsReady>:

bool SensorApp_IsReady(void) {
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
    return (sensor_status == SENSOR_READY);
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <SensorApp_IsReady+0x1c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	bf0c      	ite	eq
 8001d5c:	2301      	moveq	r3, #1
 8001d5e:	2300      	movne	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	200003d8 	.word	0x200003d8

08001d70 <SensorApp_GetData>:

void SensorApp_GetData(SensorData_t *data_out) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
    if (data_out && sensor_status == SENSOR_READY) {
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <SensorApp_GetData+0x26>
 8001d7e:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <SensorApp_GetData+0x30>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d107      	bne.n	8001d96 <SensorApp_GetData+0x26>
        memcpy(data_out, &sensor_data, sizeof(SensorData_t));
 8001d86:	221c      	movs	r2, #28
 8001d88:	4906      	ldr	r1, [pc, #24]	@ (8001da4 <SensorApp_GetData+0x34>)
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f01b fa47 	bl	801d21e <memcpy>
        sensor_status = SENSOR_IDLE;
 8001d90:	4b03      	ldr	r3, [pc, #12]	@ (8001da0 <SensorApp_GetData+0x30>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
    }
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200003d8 	.word	0x200003d8
 8001da4:	200003dc 	.word	0x200003dc

08001da8 <SensorApp_UART_RxCallback>:

void SensorApp_UART_RxCallback(void) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
    if (sensor_status == SENSOR_READING) {
 8001dac:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <SensorApp_UART_RxCallback+0x1c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d105      	bne.n	8001dc0 <SensorApp_UART_RxCallback+0x18>
        Decode_TempHumi(rx_buffer);
 8001db4:	4804      	ldr	r0, [pc, #16]	@ (8001dc8 <SensorApp_UART_RxCallback+0x20>)
 8001db6:	f000 f809 	bl	8001dcc <Decode_TempHumi>
        sensor_status = SENSOR_READY;
 8001dba:	4b02      	ldr	r3, [pc, #8]	@ (8001dc4 <SensorApp_UART_RxCallback+0x1c>)
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	701a      	strb	r2, [r3, #0]
    }
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200003d8 	.word	0x200003d8
 8001dc8:	200003f8 	.word	0x200003f8

08001dcc <Decode_TempHumi>:

static void Decode_TempHumi(uint8_t *rx_buf) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
    int16_t temp_raw = (rx_buf[3] << 8) | rx_buf[4];
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3303      	adds	r3, #3
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	b21a      	sxth	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3304      	adds	r3, #4
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	4313      	orrs	r3, r2
 8001de8:	81fb      	strh	r3, [r7, #14]
    uint16_t humi_raw = (rx_buf[5] << 8) | rx_buf[6];
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3305      	adds	r3, #5
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	b21a      	sxth	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3306      	adds	r3, #6
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	b21b      	sxth	r3, r3
 8001e00:	81bb      	strh	r3, [r7, #12]
    int16_t dew_raw = (rx_buf[7] << 8) | rx_buf[8];
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3307      	adds	r3, #7
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	b21a      	sxth	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3308      	adds	r3, #8
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	4313      	orrs	r3, r2
 8001e16:	817b      	strh	r3, [r7, #10]
    uint16_t press_raw = (rx_buf[9] << 8) | rx_buf[10];
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3309      	adds	r3, #9
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	b21a      	sxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	330a      	adds	r3, #10
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	b21b      	sxth	r3, r3
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	813b      	strh	r3, [r7, #8]

    sensor_data.temperature = temp_raw / 100.0f;
 8001e30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe ff49 	bl	8000ccc <__aeabi_i2f>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4919      	ldr	r1, [pc, #100]	@ (8001ea4 <Decode_TempHumi+0xd8>)
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f84c 	bl	8000edc <__aeabi_fdiv>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b17      	ldr	r3, [pc, #92]	@ (8001ea8 <Decode_TempHumi+0xdc>)
 8001e4a:	601a      	str	r2, [r3, #0]
    sensor_data.humidity = humi_raw / 100.0f;
 8001e4c:	89bb      	ldrh	r3, [r7, #12]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe ff3c 	bl	8000ccc <__aeabi_i2f>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4913      	ldr	r1, [pc, #76]	@ (8001ea4 <Decode_TempHumi+0xd8>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff f83f 	bl	8000edc <__aeabi_fdiv>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <Decode_TempHumi+0xdc>)
 8001e64:	605a      	str	r2, [r3, #4]
    sensor_data.dew_point = dew_raw / 100.0f;
 8001e66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe ff2e 	bl	8000ccc <__aeabi_i2f>
 8001e70:	4603      	mov	r3, r0
 8001e72:	490c      	ldr	r1, [pc, #48]	@ (8001ea4 <Decode_TempHumi+0xd8>)
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff f831 	bl	8000edc <__aeabi_fdiv>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <Decode_TempHumi+0xdc>)
 8001e80:	609a      	str	r2, [r3, #8]
    sensor_data.pressure = press_raw / 10.0f;
 8001e82:	893b      	ldrh	r3, [r7, #8]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe ff21 	bl	8000ccc <__aeabi_i2f>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4907      	ldr	r1, [pc, #28]	@ (8001eac <Decode_TempHumi+0xe0>)
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f824 	bl	8000edc <__aeabi_fdiv>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <Decode_TempHumi+0xdc>)
 8001e9a:	60da      	str	r2, [r3, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	42c80000 	.word	0x42c80000
 8001ea8:	200003dc 	.word	0x200003dc
 8001eac:	41200000 	.word	0x41200000

08001eb0 <Build_Modbus_Request>:

static void Build_Modbus_Request(uint8_t slave_addr, uint16_t start_reg, uint16_t quantity) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	80bb      	strh	r3, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	807b      	strh	r3, [r7, #2]
    modbus_frame[0] = slave_addr;
 8001ec2:	4a17      	ldr	r2, [pc, #92]	@ (8001f20 <Build_Modbus_Request+0x70>)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	7013      	strb	r3, [r2, #0]
    modbus_frame[1] = 0x03;
 8001ec8:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <Build_Modbus_Request+0x70>)
 8001eca:	2203      	movs	r2, #3
 8001ecc:	705a      	strb	r2, [r3, #1]
    modbus_frame[2] = (start_reg >> 8) & 0xFF;
 8001ece:	88bb      	ldrh	r3, [r7, #4]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <Build_Modbus_Request+0x70>)
 8001ed8:	709a      	strb	r2, [r3, #2]
    modbus_frame[3] = start_reg & 0xFF;
 8001eda:	88bb      	ldrh	r3, [r7, #4]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <Build_Modbus_Request+0x70>)
 8001ee0:	70da      	strb	r2, [r3, #3]
    modbus_frame[4] = (quantity >> 8) & 0xFF;
 8001ee2:	887b      	ldrh	r3, [r7, #2]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <Build_Modbus_Request+0x70>)
 8001eec:	711a      	strb	r2, [r3, #4]
    modbus_frame[5] = quantity & 0xFF;
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <Build_Modbus_Request+0x70>)
 8001ef4:	715a      	strb	r2, [r3, #5]

    uint16_t crc = Modbus_CRC16(modbus_frame, 6);
 8001ef6:	2106      	movs	r1, #6
 8001ef8:	4809      	ldr	r0, [pc, #36]	@ (8001f20 <Build_Modbus_Request+0x70>)
 8001efa:	f000 f813 	bl	8001f24 <Modbus_CRC16>
 8001efe:	4603      	mov	r3, r0
 8001f00:	81fb      	strh	r3, [r7, #14]
    modbus_frame[6] = crc & 0xFF;
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <Build_Modbus_Request+0x70>)
 8001f08:	719a      	strb	r2, [r3, #6]
    modbus_frame[7] = (crc >> 8) & 0xFF;
 8001f0a:	89fb      	ldrh	r3, [r7, #14]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4b03      	ldr	r3, [pc, #12]	@ (8001f20 <Build_Modbus_Request+0x70>)
 8001f14:	71da      	strb	r2, [r3, #7]
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000408 	.word	0x20000408

08001f24 <Modbus_CRC16>:

static uint16_t Modbus_CRC16(uint8_t *buf, uint8_t len) {
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	70fb      	strb	r3, [r7, #3]
    uint16_t crc = 0xFFFF;
 8001f30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f34:	81fb      	strh	r3, [r7, #14]
    for (uint8_t pos = 0; pos < len; pos++) {
 8001f36:	2300      	movs	r3, #0
 8001f38:	737b      	strb	r3, [r7, #13]
 8001f3a:	e022      	b.n	8001f82 <Modbus_CRC16+0x5e>
        crc ^= buf[pos];
 8001f3c:	7b7b      	ldrb	r3, [r7, #13]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	89fb      	ldrh	r3, [r7, #14]
 8001f48:	4053      	eors	r3, r2
 8001f4a:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	e011      	b.n	8001f76 <Modbus_CRC16+0x52>
            if (crc & 1) crc = (crc >> 1) ^ 0xA001;
 8001f52:	89fb      	ldrh	r3, [r7, #14]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <Modbus_CRC16+0x46>
 8001f5c:	89fb      	ldrh	r3, [r7, #14]
 8001f5e:	085b      	lsrs	r3, r3, #1
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	4b0d      	ldr	r3, [pc, #52]	@ (8001f98 <Modbus_CRC16+0x74>)
 8001f64:	4053      	eors	r3, r2
 8001f66:	81fb      	strh	r3, [r7, #14]
 8001f68:	e002      	b.n	8001f70 <Modbus_CRC16+0x4c>
            else crc >>= 1;
 8001f6a:	89fb      	ldrh	r3, [r7, #14]
 8001f6c:	085b      	lsrs	r3, r3, #1
 8001f6e:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	3301      	adds	r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b07      	cmp	r3, #7
 8001f7a:	ddea      	ble.n	8001f52 <Modbus_CRC16+0x2e>
    for (uint8_t pos = 0; pos < len; pos++) {
 8001f7c:	7b7b      	ldrb	r3, [r7, #13]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	737b      	strb	r3, [r7, #13]
 8001f82:	7b7a      	ldrb	r2, [r7, #13]
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d3d8      	bcc.n	8001f3c <Modbus_CRC16+0x18>
        }
    }
    return crc;
 8001f8a:	89fb      	ldrh	r3, [r7, #14]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	ffffa001 	.word	0xffffa001

08001f9c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001fa0:	4b03      	ldr	r3, [pc, #12]	@ (8001fb0 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	58000400 	.word	0x58000400

08001fb4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001fd0:	f001 fa52 	bl	8003478 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001fd4:	f7ff ffe2 	bl	8001f9c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f003 fd63 	bl	8005aa4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001fe6:	f001 fa55 	bl	8003494 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001fea:	f001 f8cb 	bl	8003184 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001ff6:	f001 fa3f 	bl	8003478 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f003 fccd 	bl	800599c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}

08002006 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800200a:	f001 fa43 	bl	8003494 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002022:	bf00      	nop
 8002024:	e7fd      	b.n	8002022 <NMI_Handler+0x4>

08002026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202a:	bf00      	nop
 800202c:	e7fd      	b.n	800202a <HardFault_Handler+0x4>

0800202e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002032:	bf00      	nop
 8002034:	e7fd      	b.n	8002032 <MemManage_Handler+0x4>

08002036 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203a:	bf00      	nop
 800203c:	e7fd      	b.n	800203a <BusFault_Handler+0x4>

0800203e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002042:	bf00      	nop
 8002044:	e7fd      	b.n	8002042 <UsageFault_Handler+0x4>

08002046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr

0800206a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
	...

08002078 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800207e:	f005 fb55 	bl	800772c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200003a0 	.word	0x200003a0

0800208c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002090:	4802      	ldr	r0, [pc, #8]	@ (800209c <DMA1_Channel1_IRQHandler+0x10>)
 8002092:	f002 fe45 	bl	8004d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000054c 	.word	0x2000054c

080020a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020a4:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <USART1_IRQHandler+0x10>)
 80020a6:	f006 fa2f 	bl	8008508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2000042c 	.word	0x2000042c

080020b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020b8:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <USART2_IRQHandler+0x10>)
 80020ba:	f006 fa25 	bl	8008508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200004bc 	.word	0x200004bc

080020c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80020cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020d0:	f003 fc3e 	bl	8005950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80020dc:	4802      	ldr	r0, [pc, #8]	@ (80020e8 <RTC_Alarm_IRQHandler+0x10>)
 80020de:	f005 f9d5 	bl	800748c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200003a0 	.word	0x200003a0

080020ec <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80020f0:	4802      	ldr	r0, [pc, #8]	@ (80020fc <SUBGHZ_Radio_IRQHandler+0x10>)
 80020f2:	f005 fe83 	bl	8007dfc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000410 	.word	0x20000410

08002100 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800210c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800210e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4313      	orrs	r3, r2
 8002116:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800211c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4013      	ands	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002124:	68fb      	ldr	r3, [r7, #12]
}
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002134:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <MX_SUBGHZ_Init+0x20>)
 8002136:	2208      	movs	r2, #8
 8002138:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800213a:	4805      	ldr	r0, [pc, #20]	@ (8002150 <MX_SUBGHZ_Init+0x20>)
 800213c:	f005 fbe2 	bl	8007904 <HAL_SUBGHZ_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002146:	f7ff fd17 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000410 	.word	0x20000410

08002154 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800215c:	2001      	movs	r0, #1
 800215e:	f7ff ffcf 	bl	8002100 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	2032      	movs	r0, #50	@ 0x32
 8002168:	f002 fb29 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800216c:	2032      	movs	r0, #50	@ 0x32
 800216e:	f002 fb40 	bl	80047f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <LL_RCC_SetClkAfterWakeFromStop>:
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800218c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80021a4:	4b02      	ldr	r3, [pc, #8]	@ (80021b0 <LL_FLASH_GetUDN+0x10>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	1fff7580 	.word	0x1fff7580

080021b4 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80021b8:	4b03      	ldr	r3, [pc, #12]	@ (80021c8 <LL_FLASH_GetDeviceID+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	b2db      	uxtb	r3, r3
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	1fff7584 	.word	0x1fff7584

080021cc <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80021d0:	4b03      	ldr	r3, [pc, #12]	@ (80021e0 <LL_FLASH_GetSTCompanyID+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0a1b      	lsrs	r3, r3, #8
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	1fff7584 	.word	0x1fff7584

080021e4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80021e8:	2000      	movs	r0, #0
 80021ea:	f7ff ffc6 	bl	800217a <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80021ee:	f019 fc6f 	bl	801bad0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80021f2:	4b10      	ldr	r3, [pc, #64]	@ (8002234 <SystemApp_Init+0x50>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 80021f8:	f000 f98c 	bl	8002514 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 80021fc:	f019 fef8 	bl	801bff0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002200:	480d      	ldr	r0, [pc, #52]	@ (8002238 <SystemApp_Init+0x54>)
 8002202:	f019 ffa3 	bl	801c14c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002206:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <SystemApp_Init+0x58>)
 8002208:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800220c:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800220e:	2002      	movs	r0, #2
 8002210:	f019 ffaa 	bl	801c168 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002214:	f7ff f95c 	bl	80014d0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002218:	f000 fa02 	bl	8002620 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800221c:	f018 fe26 	bl	801ae6c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002220:	2101      	movs	r1, #1
 8002222:	2001      	movs	r0, #1
 8002224:	f018 fe62 	bl	801aeec <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002228:	2101      	movs	r1, #1
 800222a:	2001      	movs	r0, #1
 800222c:	f018 fe2e 	bl	801ae8c <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	2000041c 	.word	0x2000041c
 8002238:	08002405 	.word	0x08002405
 800223c:	58004000 	.word	0x58004000

08002240 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002244:	f018 fe82 	bl	801af4c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}

0800224c <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002256:	f7ff f949 	bl	80014ec <SYS_GetBatteryLevel>
 800225a:	4603      	mov	r3, r0
 800225c:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800225e:	88bb      	ldrh	r3, [r7, #4]
 8002260:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002264:	4293      	cmp	r3, r2
 8002266:	d902      	bls.n	800226e <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002268:	23fe      	movs	r3, #254	@ 0xfe
 800226a:	71fb      	strb	r3, [r7, #7]
 800226c:	e014      	b.n	8002298 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800226e:	88bb      	ldrh	r3, [r7, #4]
 8002270:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8002274:	d202      	bcs.n	800227c <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	71fb      	strb	r3, [r7, #7]
 800227a:	e00d      	b.n	8002298 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800227c:	88bb      	ldrh	r3, [r7, #4]
 800227e:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8002282:	461a      	mov	r2, r3
 8002284:	4613      	mov	r3, r2
 8002286:	01db      	lsls	r3, r3, #7
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	461a      	mov	r2, r3
 800228e:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <GetBatteryLevel+0x58>)
 8002290:	fba3 2302 	umull	r2, r3, r3, r2
 8002294:	09db      	lsrs	r3, r3, #7
 8002296:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002298:	79fb      	ldrb	r3, [r7, #7]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	1b4e81b5 	.word	0x1b4e81b5

080022a8 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f989 	bl	80025cc <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fea9 	bl	8001014 <__aeabi_f2iz>
 80022c2:	4603      	mov	r3, r0
 80022c4:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80022c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80022d2:	b590      	push	{r4, r7, lr}
 80022d4:	b087      	sub	sp, #28
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80022de:	f7ff ff5f 	bl	80021a0 <LL_FLASH_GetUDN>
 80022e2:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ea:	d138      	bne.n	800235e <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80022ec:	f001 f8e0 	bl	80034b0 <HAL_GetUIDw0>
 80022f0:	4604      	mov	r4, r0
 80022f2:	f001 f8f1 	bl	80034d8 <HAL_GetUIDw2>
 80022f6:	4603      	mov	r3, r0
 80022f8:	4423      	add	r3, r4
 80022fa:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 80022fc:	f001 f8e2 	bl	80034c4 <HAL_GetUIDw1>
 8002300:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	0e1a      	lsrs	r2, r3, #24
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3307      	adds	r3, #7
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	0c1a      	lsrs	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3306      	adds	r3, #6
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	0a1a      	lsrs	r2, r3, #8
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3305      	adds	r3, #5
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3304      	adds	r3, #4
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	0e1a      	lsrs	r2, r3, #24
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3303      	adds	r3, #3
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	0c1a      	lsrs	r2, r3, #16
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3302      	adds	r3, #2
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	0a1a      	lsrs	r2, r3, #8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3301      	adds	r3, #1
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 800235c:	e031      	b.n	80023c2 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3307      	adds	r3, #7
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	0a1a      	lsrs	r2, r3, #8
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3306      	adds	r3, #6
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	0c1a      	lsrs	r2, r3, #16
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3305      	adds	r3, #5
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	0e1a      	lsrs	r2, r3, #24
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3304      	adds	r3, #4
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 800238c:	f7ff ff12 	bl	80021b4 <LL_FLASH_GetDeviceID>
 8002390:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3303      	adds	r3, #3
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 800239c:	f7ff ff16 	bl	80021cc <LL_FLASH_GetSTCompanyID>
 80023a0:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3302      	adds	r3, #2
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	0a1a      	lsrs	r2, r3, #8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3301      	adds	r3, #1
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	0c1b      	lsrs	r3, r3, #16
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	701a      	strb	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	371c      	adds	r7, #28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd90      	pop	{r4, r7, pc}

080023ca <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 80023ca:	b590      	push	{r4, r7, lr}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 80023d4:	f7ff fee4 	bl	80021a0 <LL_FLASH_GetUDN>
 80023d8:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d10b      	bne.n	80023fa <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80023e2:	f001 f865 	bl	80034b0 <HAL_GetUIDw0>
 80023e6:	4604      	mov	r4, r0
 80023e8:	f001 f86c 	bl	80034c4 <HAL_GetUIDw1>
 80023ec:	4603      	mov	r3, r0
 80023ee:	405c      	eors	r4, r3
 80023f0:	f001 f872 	bl	80034d8 <HAL_GetUIDw2>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4063      	eors	r3, r4
 80023f8:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 80023fa:	687b      	ldr	r3, [r7, #4]

}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}

08002404 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af02      	add	r7, sp, #8
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800240e:	f107 0308 	add.w	r3, r7, #8
 8002412:	4618      	mov	r0, r3
 8002414:	f018 feaa 	bl	801b16c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800241e:	9200      	str	r2, [sp, #0]
 8002420:	4a07      	ldr	r2, [pc, #28]	@ (8002440 <TimestampNow+0x3c>)
 8002422:	2110      	movs	r1, #16
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f81d 	bl	8002464 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fd fef8 	bl	8000220 <strlen>
 8002430:	4603      	mov	r3, r0
 8002432:	b29a      	uxth	r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	0801ef50 	.word	0x0801ef50

08002444 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002448:	2101      	movs	r1, #1
 800244a:	2002      	movs	r0, #2
 800244c:	f018 fd1e 	bl	801ae8c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002458:	2100      	movs	r1, #0
 800245a:	2002      	movs	r0, #2
 800245c:	f018 fd16 	bl	801ae8c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}

08002464 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002464:	b40c      	push	{r2, r3}
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002470:	f107 031c 	add.w	r3, r7, #28
 8002474:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002476:	6839      	ldr	r1, [r7, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f019 f847 	bl	801b510 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800248c:	b002      	add	sp, #8
 800248e:	4770      	bx	lr

08002490 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80024ae:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <HAL_GetTick+0x24>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80024b6:	f000 fa41 	bl	800293c <TIMER_IF_GetTimerValue>
 80024ba:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80024bc:	687b      	ldr	r3, [r7, #4]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2000041c 	.word	0x2000041c

080024cc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fab7 	bl	8002a4a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <LL_AHB2_GRP1_EnableClock>:
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80024fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002500:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002508:	68fb      	ldr	r3, [r7, #12]
}
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800251a:	f000 ffe7 	bl	80034ec <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 800251e:	f000 ffeb 	bl	80034f8 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002522:	f000 ffef 	bl	8003504 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002534:	2301      	movs	r3, #1
 8002536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002540:	2001      	movs	r0, #1
 8002542:	f7ff ffcf 	bl	80024e4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8002546:	2002      	movs	r0, #2
 8002548:	f7ff ffcc 	bl	80024e4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 800254c:	2002      	movs	r0, #2
 800254e:	f7ff ffc9 	bl	80024e4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8002552:	2002      	movs	r0, #2
 8002554:	f7ff ffc6 	bl	80024e4 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002558:	2301      	movs	r3, #1
 800255a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	4619      	mov	r1, r3
 8002560:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002564:	f002 ffae 	bl	80054c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800256c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	4619      	mov	r1, r3
 8002572:	4815      	ldr	r0, [pc, #84]	@ (80025c8 <DBG_Init+0xb4>)
 8002574:	f002 ffa6 	bl	80054c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002578:	2308      	movs	r3, #8
 800257a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	4619      	mov	r1, r3
 8002580:	4811      	ldr	r0, [pc, #68]	@ (80025c8 <DBG_Init+0xb4>)
 8002582:	f002 ff9f 	bl	80054c4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8002586:	2310      	movs	r3, #16
 8002588:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	4619      	mov	r1, r3
 800258e:	480e      	ldr	r0, [pc, #56]	@ (80025c8 <DBG_Init+0xb4>)
 8002590:	f002 ff98 	bl	80054c4 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002594:	2200      	movs	r2, #0
 8002596:	2101      	movs	r1, #1
 8002598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800259c:	f003 f9c0 	bl	8005920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80025a0:	2200      	movs	r2, #0
 80025a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025a6:	4808      	ldr	r0, [pc, #32]	@ (80025c8 <DBG_Init+0xb4>)
 80025a8:	f003 f9ba 	bl	8005920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2108      	movs	r1, #8
 80025b0:	4805      	ldr	r0, [pc, #20]	@ (80025c8 <DBG_Init+0xb4>)
 80025b2:	f003 f9b5 	bl	8005920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2110      	movs	r1, #16
 80025ba:	4803      	ldr	r0, [pc, #12]	@ (80025c8 <DBG_Init+0xb4>)
 80025bc:	f003 f9b0 	bl	8005920 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80025c0:	bf00      	nop
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	48000400 	.word	0x48000400

080025cc <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80025d4:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <EnvSensors_Read+0x40>)
 80025d6:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80025d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002610 <EnvSensors_Read+0x44>)
 80025da:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80025dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <EnvSensors_Read+0x48>)
 80025de:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a08      	ldr	r2, [pc, #32]	@ (8002618 <EnvSensors_Read+0x4c>)
 80025f6:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a08      	ldr	r2, [pc, #32]	@ (800261c <EnvSensors_Read+0x50>)
 80025fc:	611a      	str	r2, [r3, #16]

  return 0;
 80025fe:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002600:	4618      	mov	r0, r3
 8002602:	371c      	adds	r7, #28
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	42480000 	.word	0x42480000
 8002610:	41900000 	.word	0x41900000
 8002614:	447a0000 	.word	0x447a0000
 8002618:	003e090d 	.word	0x003e090d
 800261c:	000503ab 	.word	0x000503ab

08002620 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8002626:	2300      	movs	r3, #0
 8002628:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 800262a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
	return 1;
 800263a:	2301      	movs	r3, #1
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <_kill>:

int _kill(int pid, int sig)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800264e:	f01a fdb9 	bl	801d1c4 <__errno>
 8002652:	4603      	mov	r3, r0
 8002654:	2216      	movs	r2, #22
 8002656:	601a      	str	r2, [r3, #0]
	return -1;
 8002658:	f04f 33ff 	mov.w	r3, #4294967295
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <_exit>:

void _exit (int status)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800266c:	f04f 31ff 	mov.w	r1, #4294967295
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ffe7 	bl	8002644 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002676:	bf00      	nop
 8002678:	e7fd      	b.n	8002676 <_exit+0x12>

0800267a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b086      	sub	sp, #24
 800267e:	af00      	add	r7, sp, #0
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	e00a      	b.n	80026a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800268c:	f3af 8000 	nop.w
 8002690:	4601      	mov	r1, r0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	60ba      	str	r2, [r7, #8]
 8002698:	b2ca      	uxtb	r2, r1
 800269a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3301      	adds	r3, #1
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	dbf0      	blt.n	800268c <_read+0x12>
	}

return len;
 80026aa:	687b      	ldr	r3, [r7, #4]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	e009      	b.n	80026da <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	60ba      	str	r2, [r7, #8]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	3301      	adds	r3, #1
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	429a      	cmp	r2, r3
 80026e0:	dbf1      	blt.n	80026c6 <_write+0x12>
	}
	return len;
 80026e2:	687b      	ldr	r3, [r7, #4]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <_close>:

int _close(int file)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	return -1;
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002712:	605a      	str	r2, [r3, #4]
	return 0;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <_isatty>:

int _isatty(int file)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	return 1;
 8002728:	2301      	movs	r3, #1
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
	return 0;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002754:	4a14      	ldr	r2, [pc, #80]	@ (80027a8 <_sbrk+0x5c>)
 8002756:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <_sbrk+0x60>)
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002760:	4b13      	ldr	r3, [pc, #76]	@ (80027b0 <_sbrk+0x64>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002768:	4b11      	ldr	r3, [pc, #68]	@ (80027b0 <_sbrk+0x64>)
 800276a:	4a12      	ldr	r2, [pc, #72]	@ (80027b4 <_sbrk+0x68>)
 800276c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800276e:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <_sbrk+0x64>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	429a      	cmp	r2, r3
 800277a:	d207      	bcs.n	800278c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800277c:	f01a fd22 	bl	801d1c4 <__errno>
 8002780:	4603      	mov	r3, r0
 8002782:	220c      	movs	r2, #12
 8002784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
 800278a:	e009      	b.n	80027a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800278c:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <_sbrk+0x64>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002792:	4b07      	ldr	r3, [pc, #28]	@ (80027b0 <_sbrk+0x64>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	4a05      	ldr	r2, [pc, #20]	@ (80027b0 <_sbrk+0x64>)
 800279c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20010000 	.word	0x20010000
 80027ac:	00000400 	.word	0x00000400
 80027b0:	20000420 	.word	0x20000420
 80027b4:	20002570 	.word	0x20002570

080027b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
	...

080027dc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80027e6:	4b14      	ldr	r3, [pc, #80]	@ (8002838 <TIMER_IF_Init+0x5c>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	f083 0301 	eor.w	r3, r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01b      	beq.n	800282c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80027f4:	4b11      	ldr	r3, [pc, #68]	@ (800283c <TIMER_IF_Init+0x60>)
 80027f6:	f04f 32ff 	mov.w	r2, #4294967295
 80027fa:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 80027fc:	f7ff f9ea 	bl	8001bd4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002800:	f000 f856 	bl	80028b0 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002804:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002808:	480c      	ldr	r0, [pc, #48]	@ (800283c <TIMER_IF_Init+0x60>)
 800280a:	f004 fde3 	bl	80073d4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800280e:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <TIMER_IF_Init+0x60>)
 8002810:	f04f 32ff 	mov.w	r2, #4294967295
 8002814:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002816:	4809      	ldr	r0, [pc, #36]	@ (800283c <TIMER_IF_Init+0x60>)
 8002818:	f004 ff1a 	bl	8007650 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 800281c:	2000      	movs	r0, #0
 800281e:	f000 f9d3 	bl	8002bc8 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002822:	f000 f85f 	bl	80028e4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002826:	4b04      	ldr	r3, [pc, #16]	@ (8002838 <TIMER_IF_Init+0x5c>)
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 800282c:	79fb      	ldrb	r3, [r7, #7]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000424 	.word	0x20000424
 800283c:	200003a0 	.word	0x200003a0

08002840 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08e      	sub	sp, #56	@ 0x38
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800284e:	f107 0308 	add.w	r3, r7, #8
 8002852:	222c      	movs	r2, #44	@ 0x2c
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f01a fc62 	bl	801d120 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 800285c:	f000 f828 	bl	80028b0 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <TIMER_IF_StartTimer+0x68>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	4413      	add	r3, r2
 8002868:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	43db      	mvns	r3, r3
 8002872:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002878:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800287c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800287e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002882:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002884:	f107 0308 	add.w	r3, r7, #8
 8002888:	2201      	movs	r2, #1
 800288a:	4619      	mov	r1, r3
 800288c:	4807      	ldr	r0, [pc, #28]	@ (80028ac <TIMER_IF_StartTimer+0x6c>)
 800288e:	f004 fc95 	bl	80071bc <HAL_RTC_SetAlarm_IT>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002898:	f7ff f96e 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 800289c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3738      	adds	r7, #56	@ 0x38
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000428 	.word	0x20000428
 80028ac:	200003a0 	.word	0x200003a0

080028b0 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80028ba:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <TIMER_IF_StopTimer+0x2c>)
 80028bc:	2201      	movs	r2, #1
 80028be:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80028c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028c4:	4806      	ldr	r0, [pc, #24]	@ (80028e0 <TIMER_IF_StopTimer+0x30>)
 80028c6:	f004 fd85 	bl	80073d4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80028ca:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <TIMER_IF_StopTimer+0x30>)
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80028d2:	79fb      	ldrb	r3, [r7, #7]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40002800 	.word	0x40002800
 80028e0:	200003a0 	.word	0x200003a0

080028e4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80028e8:	f000 f98e 	bl	8002c08 <GetTimerTicks>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4a03      	ldr	r2, [pc, #12]	@ (80028fc <TIMER_IF_SetTimerContext+0x18>)
 80028f0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80028f2:	4b02      	ldr	r3, [pc, #8]	@ (80028fc <TIMER_IF_SetTimerContext+0x18>)
 80028f4:	681b      	ldr	r3, [r3, #0]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000428 	.word	0x20000428

08002900 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002904:	4b02      	ldr	r3, [pc, #8]	@ (8002910 <TIMER_IF_GetTimerContext+0x10>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	20000428 	.word	0x20000428

08002914 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800291e:	f000 f973 	bl	8002c08 <GetTimerTicks>
 8002922:	4602      	mov	r2, r0
 8002924:	4b04      	ldr	r3, [pc, #16]	@ (8002938 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 800292c:	687b      	ldr	r3, [r7, #4]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000428 	.word	0x20000428

0800293c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <TIMER_IF_GetTimerValue+0x24>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800294e:	f000 f95b 	bl	8002c08 <GetTimerTicks>
 8002952:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002954:	687b      	ldr	r3, [r7, #4]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000424 	.word	0x20000424

08002964 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800296e:	2303      	movs	r3, #3
 8002970:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002972:	687b      	ldr	r3, [r7, #4]
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800297e:	b5b0      	push	{r4, r5, r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002986:	2100      	movs	r1, #0
 8002988:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	2000      	movs	r0, #0
 800298e:	460a      	mov	r2, r1
 8002990:	4603      	mov	r3, r0
 8002992:	0d95      	lsrs	r5, r2, #22
 8002994:	0294      	lsls	r4, r2, #10
 8002996:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	4620      	mov	r0, r4
 80029a0:	4629      	mov	r1, r5
 80029a2:	f7fe fb7d 	bl	80010a0 <__aeabi_uldivmod>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4613      	mov	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80029ae:	68fb      	ldr	r3, [r7, #12]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bdb0      	pop	{r4, r5, r7, pc}

080029b8 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80029b8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80029c2:	2100      	movs	r1, #0
 80029c4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	2000      	movs	r0, #0
 80029ca:	460c      	mov	r4, r1
 80029cc:	4605      	mov	r5, r0
 80029ce:	4620      	mov	r0, r4
 80029d0:	4629      	mov	r1, r5
 80029d2:	f04f 0a00 	mov.w	sl, #0
 80029d6:	f04f 0b00 	mov.w	fp, #0
 80029da:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80029de:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80029e2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80029e6:	4650      	mov	r0, sl
 80029e8:	4659      	mov	r1, fp
 80029ea:	1b02      	subs	r2, r0, r4
 80029ec:	eb61 0305 	sbc.w	r3, r1, r5
 80029f0:	f04f 0000 	mov.w	r0, #0
 80029f4:	f04f 0100 	mov.w	r1, #0
 80029f8:	0099      	lsls	r1, r3, #2
 80029fa:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80029fe:	0090      	lsls	r0, r2, #2
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	eb12 0804 	adds.w	r8, r2, r4
 8002a08:	eb43 0905 	adc.w	r9, r3, r5
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a20:	4690      	mov	r8, r2
 8002a22:	4699      	mov	r9, r3
 8002a24:	4640      	mov	r0, r8
 8002a26:	4649      	mov	r1, r9
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	0a82      	lsrs	r2, r0, #10
 8002a32:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002a36:	0a8b      	lsrs	r3, r1, #10
 8002a38:	4613      	mov	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002a48:	4770      	bx	lr

08002a4a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ff93 	bl	800297e <TIMER_IF_Convert_ms2Tick>
 8002a58:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002a5a:	f000 f8d5 	bl	8002c08 <GetTimerTicks>
 8002a5e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002a60:	e000      	b.n	8002a64 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002a62:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002a64:	f000 f8d0 	bl	8002c08 <GetTimerTicks>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d8f6      	bhi.n	8002a62 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002a86:	f019 f971 	bl	801bd6c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002a9a:	f000 f8a5 	bl	8002be8 <TIMER_IF_BkUp_Read_MSBticks>
 8002a9e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 f88f 	bl	8002bc8 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002ab2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab6:	b08c      	sub	sp, #48	@ 0x30
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002ac0:	f000 f8a2 	bl	8002c08 <GetTimerTicks>
 8002ac4:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002ac6:	f000 f88f 	bl	8002be8 <TIMER_IF_BkUp_Read_MSBticks>
 8002aca:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	60fa      	str	r2, [r7, #12]
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	000b      	movs	r3, r1
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	460c      	mov	r4, r1
 8002ae8:	4605      	mov	r5, r0
 8002aea:	eb12 0804 	adds.w	r8, r2, r4
 8002aee:	eb43 0905 	adc.w	r9, r3, r5
 8002af2:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002af6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	0a82      	lsrs	r2, r0, #10
 8002b04:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002b08:	0a8b      	lsrs	r3, r1, #10
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2200      	movs	r2, #0
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002b1c:	f04f 0b00 	mov.w	fp, #0
 8002b20:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ff46 	bl	80029b8 <TIMER_IF_Convert_Tick2ms>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3730      	adds	r7, #48	@ 0x30
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002b40 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4803      	ldr	r0, [pc, #12]	@ (8002b5c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002b4e:	f004 fe11 	bl	8007774 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200003a0 	.word	0x200003a0

08002b60 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4803      	ldr	r0, [pc, #12]	@ (8002b7c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002b6e:	f004 fe01 	bl	8007774 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	200003a0 	.word	0x200003a0

08002b80 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4804      	ldr	r0, [pc, #16]	@ (8002ba0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002b8e:	f004 fe09 	bl	80077a4 <HAL_RTCEx_BKUPRead>
 8002b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002b94:	687b      	ldr	r3, [r7, #4]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200003a0 	.word	0x200003a0

08002ba4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002bae:	2101      	movs	r1, #1
 8002bb0:	4804      	ldr	r0, [pc, #16]	@ (8002bc4 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002bb2:	f004 fdf7 	bl	80077a4 <HAL_RTCEx_BKUPRead>
 8002bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002bb8:	687b      	ldr	r3, [r7, #4]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200003a0 	.word	0x200003a0

08002bc8 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	4803      	ldr	r0, [pc, #12]	@ (8002be4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002bd6:	f004 fdcd 	bl	8007774 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200003a0 	.word	0x200003a0

08002be8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002bee:	2102      	movs	r1, #2
 8002bf0:	4804      	ldr	r0, [pc, #16]	@ (8002c04 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002bf2:	f004 fdd7 	bl	80077a4 <HAL_RTCEx_BKUPRead>
 8002bf6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002bf8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	200003a0 	.word	0x200003a0

08002c08 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002c0e:	480b      	ldr	r0, [pc, #44]	@ (8002c3c <GetTimerTicks+0x34>)
 8002c10:	f7ff fdd8 	bl	80027c4 <LL_RTC_TIME_GetSubSecond>
 8002c14:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002c16:	e003      	b.n	8002c20 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002c18:	4808      	ldr	r0, [pc, #32]	@ (8002c3c <GetTimerTicks+0x34>)
 8002c1a:	f7ff fdd3 	bl	80027c4 <LL_RTC_TIME_GetSubSecond>
 8002c1e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002c20:	4806      	ldr	r0, [pc, #24]	@ (8002c3c <GetTimerTicks+0x34>)
 8002c22:	f7ff fdcf 	bl	80027c4 <LL_RTC_TIME_GetSubSecond>
 8002c26:	4602      	mov	r2, r0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d1f4      	bne.n	8002c18 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40002800 	.word	0x40002800

08002c40 <LL_AHB2_GRP1_EnableClock>:
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4013      	ands	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c64:	68fb      	ldr	r3, [r7, #12]
}
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <LL_APB1_GRP1_EnableClock>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002c7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c94:	68fb      	ldr	r3, [r7, #12]
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <LL_APB1_GRP1_DisableClock>:
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <LL_APB2_GRP1_EnableClock>:
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
}
 8002cea:	bf00      	nop
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <LL_APB2_GRP1_DisableClock>:
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	43db      	mvns	r3, r3
 8002d06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d1c:	4b22      	ldr	r3, [pc, #136]	@ (8002da8 <MX_USART1_UART_Init+0x90>)
 8002d1e:	4a23      	ldr	r2, [pc, #140]	@ (8002dac <MX_USART1_UART_Init+0x94>)
 8002d20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d22:	4b21      	ldr	r3, [pc, #132]	@ (8002da8 <MX_USART1_UART_Init+0x90>)
 8002d24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002da8 <MX_USART1_UART_Init+0x90>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d30:	4b1d      	ldr	r3, [pc, #116]	@ (8002da8 <MX_USART1_UART_Init+0x90>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d36:	4b1c      	ldr	r3, [pc, #112]	@ (8002da8 <MX_USART1_UART_Init+0x90>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002da8 <MX_USART1_UART_Init+0x90>)
 8002d3e:	220c      	movs	r2, #12
 8002d40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d42:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <MX_USART1_UART_Init+0x90>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d48:	4b17      	ldr	r3, [pc, #92]	@ (8002da8 <MX_USART1_UART_Init+0x90>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d4e:	4b16      	ldr	r3, [pc, #88]	@ (8002da8 <MX_USART1_UART_Init+0x90>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d54:	4b14      	ldr	r3, [pc, #80]	@ (8002da8 <MX_USART1_UART_Init+0x90>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d5a:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <MX_USART1_UART_Init+0x90>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d60:	4811      	ldr	r0, [pc, #68]	@ (8002da8 <MX_USART1_UART_Init+0x90>)
 8002d62:	f005 fa02 	bl	800816a <HAL_UART_Init>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d6c:	f7fe ff04 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d70:	2100      	movs	r1, #0
 8002d72:	480d      	ldr	r0, [pc, #52]	@ (8002da8 <MX_USART1_UART_Init+0x90>)
 8002d74:	f007 fb47 	bl	800a406 <HAL_UARTEx_SetTxFifoThreshold>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d7e:	f7fe fefb 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d82:	2100      	movs	r1, #0
 8002d84:	4808      	ldr	r0, [pc, #32]	@ (8002da8 <MX_USART1_UART_Init+0x90>)
 8002d86:	f007 fb7c 	bl	800a482 <HAL_UARTEx_SetRxFifoThreshold>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d90:	f7fe fef2 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002d94:	4804      	ldr	r0, [pc, #16]	@ (8002da8 <MX_USART1_UART_Init+0x90>)
 8002d96:	f007 fac3 	bl	800a320 <HAL_UARTEx_EnableFifoMode>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002da0:	f7fe feea 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	2000042c 	.word	0x2000042c
 8002dac:	40013800 	.word	0x40013800

08002db0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002db4:	4b22      	ldr	r3, [pc, #136]	@ (8002e40 <MX_USART2_UART_Init+0x90>)
 8002db6:	4a23      	ldr	r2, [pc, #140]	@ (8002e44 <MX_USART2_UART_Init+0x94>)
 8002db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002dba:	4b21      	ldr	r3, [pc, #132]	@ (8002e40 <MX_USART2_UART_Init+0x90>)
 8002dbc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002e40 <MX_USART2_UART_Init+0x90>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e40 <MX_USART2_UART_Init+0x90>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dce:	4b1c      	ldr	r3, [pc, #112]	@ (8002e40 <MX_USART2_UART_Init+0x90>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e40 <MX_USART2_UART_Init+0x90>)
 8002dd6:	220c      	movs	r2, #12
 8002dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dda:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <MX_USART2_UART_Init+0x90>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de0:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <MX_USART2_UART_Init+0x90>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002de6:	4b16      	ldr	r3, [pc, #88]	@ (8002e40 <MX_USART2_UART_Init+0x90>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dec:	4b14      	ldr	r3, [pc, #80]	@ (8002e40 <MX_USART2_UART_Init+0x90>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002df2:	4b13      	ldr	r3, [pc, #76]	@ (8002e40 <MX_USART2_UART_Init+0x90>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002df8:	4811      	ldr	r0, [pc, #68]	@ (8002e40 <MX_USART2_UART_Init+0x90>)
 8002dfa:	f005 f9b6 	bl	800816a <HAL_UART_Init>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002e04:	f7fe feb8 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e08:	2100      	movs	r1, #0
 8002e0a:	480d      	ldr	r0, [pc, #52]	@ (8002e40 <MX_USART2_UART_Init+0x90>)
 8002e0c:	f007 fafb 	bl	800a406 <HAL_UARTEx_SetTxFifoThreshold>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002e16:	f7fe feaf 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4808      	ldr	r0, [pc, #32]	@ (8002e40 <MX_USART2_UART_Init+0x90>)
 8002e1e:	f007 fb30 	bl	800a482 <HAL_UARTEx_SetRxFifoThreshold>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002e28:	f7fe fea6 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002e2c:	4804      	ldr	r0, [pc, #16]	@ (8002e40 <MX_USART2_UART_Init+0x90>)
 8002e2e:	f007 fab2 	bl	800a396 <HAL_UARTEx_DisableFifoMode>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002e38:	f7fe fe9e 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	200004bc 	.word	0x200004bc
 8002e44:	40004400 	.word	0x40004400

08002e48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b096      	sub	sp, #88	@ 0x58
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e60:	f107 030c 	add.w	r3, r7, #12
 8002e64:	2238      	movs	r2, #56	@ 0x38
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f01a f959 	bl	801d120 <memset>
  if(uartHandle->Instance==USART1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a49      	ldr	r2, [pc, #292]	@ (8002f98 <HAL_UART_MspInit+0x150>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d157      	bne.n	8002f28 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e7c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002e80:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e82:	f107 030c 	add.w	r3, r7, #12
 8002e86:	4618      	mov	r0, r3
 8002e88:	f004 f804 	bl	8006e94 <HAL_RCCEx_PeriphCLKConfig>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e92:	f7fe fe71 	bl	8001b78 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e96:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002e9a:	f7ff ff13 	bl	8002cc4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9e:	2002      	movs	r0, #2
 8002ea0:	f7ff fece 	bl	8002c40 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002ea4:	23c0      	movs	r3, #192	@ 0xc0
 8002ea6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002eb4:	2307      	movs	r3, #7
 8002eb6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4837      	ldr	r0, [pc, #220]	@ (8002f9c <HAL_UART_MspInit+0x154>)
 8002ec0:	f002 fb00 	bl	80054c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002ec4:	4b36      	ldr	r3, [pc, #216]	@ (8002fa0 <HAL_UART_MspInit+0x158>)
 8002ec6:	4a37      	ldr	r2, [pc, #220]	@ (8002fa4 <HAL_UART_MspInit+0x15c>)
 8002ec8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002eca:	4b35      	ldr	r3, [pc, #212]	@ (8002fa0 <HAL_UART_MspInit+0x158>)
 8002ecc:	2212      	movs	r2, #18
 8002ece:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ed0:	4b33      	ldr	r3, [pc, #204]	@ (8002fa0 <HAL_UART_MspInit+0x158>)
 8002ed2:	2210      	movs	r2, #16
 8002ed4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed6:	4b32      	ldr	r3, [pc, #200]	@ (8002fa0 <HAL_UART_MspInit+0x158>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002edc:	4b30      	ldr	r3, [pc, #192]	@ (8002fa0 <HAL_UART_MspInit+0x158>)
 8002ede:	2280      	movs	r2, #128	@ 0x80
 8002ee0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8002fa0 <HAL_UART_MspInit+0x158>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa0 <HAL_UART_MspInit+0x158>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002eee:	4b2c      	ldr	r3, [pc, #176]	@ (8002fa0 <HAL_UART_MspInit+0x158>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa0 <HAL_UART_MspInit+0x158>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002efa:	4829      	ldr	r0, [pc, #164]	@ (8002fa0 <HAL_UART_MspInit+0x158>)
 8002efc:	f001 fc96 	bl	800482c <HAL_DMA_Init>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002f06:	f7fe fe37 	bl	8001b78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a24      	ldr	r2, [pc, #144]	@ (8002fa0 <HAL_UART_MspInit+0x158>)
 8002f0e:	679a      	str	r2, [r3, #120]	@ 0x78
 8002f10:	4a23      	ldr	r2, [pc, #140]	@ (8002fa0 <HAL_UART_MspInit+0x158>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2102      	movs	r1, #2
 8002f1a:	2024      	movs	r0, #36	@ 0x24
 8002f1c:	f001 fc4f 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f20:	2024      	movs	r0, #36	@ 0x24
 8002f22:	f001 fc66 	bl	80047f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f26:	e033      	b.n	8002f90 <HAL_UART_MspInit+0x148>
  else if(uartHandle->Instance==USART2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8002fa8 <HAL_UART_MspInit+0x160>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d12e      	bne.n	8002f90 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f32:	2302      	movs	r3, #2
 8002f34:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f36:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002f3a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f3c:	f107 030c 	add.w	r3, r7, #12
 8002f40:	4618      	mov	r0, r3
 8002f42:	f003 ffa7 	bl	8006e94 <HAL_RCCEx_PeriphCLKConfig>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8002f4c:	f7fe fe14 	bl	8001b78 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f50:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002f54:	f7ff fe8c 	bl	8002c70 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f58:	2001      	movs	r0, #1
 8002f5a:	f7ff fe71 	bl	8002c40 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002f5e:	230c      	movs	r3, #12
 8002f60:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f62:	2302      	movs	r3, #2
 8002f64:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f6e:	2307      	movs	r3, #7
 8002f70:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f72:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002f76:	4619      	mov	r1, r3
 8002f78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f7c:	f002 faa2 	bl	80054c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2100      	movs	r1, #0
 8002f84:	2025      	movs	r0, #37	@ 0x25
 8002f86:	f001 fc1a 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f8a:	2025      	movs	r0, #37	@ 0x25
 8002f8c:	f001 fc31 	bl	80047f2 <HAL_NVIC_EnableIRQ>
}
 8002f90:	bf00      	nop
 8002f92:	3758      	adds	r7, #88	@ 0x58
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40013800 	.word	0x40013800
 8002f9c:	48000400 	.word	0x48000400
 8002fa0:	2000054c 	.word	0x2000054c
 8002fa4:	40020008 	.word	0x40020008
 8002fa8:	40004400 	.word	0x40004400

08002fac <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a14      	ldr	r2, [pc, #80]	@ (800300c <HAL_UART_MspDeInit+0x60>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d110      	bne.n	8002fe0 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002fbe:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002fc2:	f7ff fe97 	bl	8002cf4 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002fc6:	21c0      	movs	r1, #192	@ 0xc0
 8002fc8:	4811      	ldr	r0, [pc, #68]	@ (8003010 <HAL_UART_MspDeInit+0x64>)
 8002fca:	f002 fbdb 	bl	8005784 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 fcd2 	bl	800497c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002fd8:	2024      	movs	r0, #36	@ 0x24
 8002fda:	f001 fc18 	bl	800480e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002fde:	e010      	b.n	8003002 <HAL_UART_MspDeInit+0x56>
  else if(uartHandle->Instance==USART2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8003014 <HAL_UART_MspDeInit+0x68>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d10b      	bne.n	8003002 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002fea:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002fee:	f7ff fe57 	bl	8002ca0 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002ff2:	210c      	movs	r1, #12
 8002ff4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ff8:	f002 fbc4 	bl	8005784 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002ffc:	2025      	movs	r0, #37	@ 0x25
 8002ffe:	f001 fc06 	bl	800480e <HAL_NVIC_DisableIRQ>
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40013800 	.word	0x40013800
 8003010:	48000400 	.word	0x48000400
 8003014:	40004400 	.word	0x40004400

08003018 <LL_APB2_GRP1_ForceReset>:
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003024:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003026:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4313      	orrs	r3, r2
 800302e:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <LL_APB2_GRP1_ReleaseReset>:
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	43db      	mvns	r3, r3
 800304c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003050:	4013      	ands	r3, r2
 8003052:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr
	...

08003060 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003068:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <LL_EXTI_EnableIT_0_31+0x24>)
 800306a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800306e:	4905      	ldr	r1, [pc, #20]	@ (8003084 <LL_EXTI_EnableIT_0_31+0x24>)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	58000800 	.word	0x58000800

08003088 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003090:	4a07      	ldr	r2, [pc, #28]	@ (80030b0 <vcom_Init+0x28>)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8003096:	f7fe fabb 	bl	8001610 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800309a:	f7ff fe3d 	bl	8002d18 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800309e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80030a2:	f7ff ffdd 	bl	8003060 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80030a6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	200005b0 	.word	0x200005b0

080030b4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80030b8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80030bc:	f7ff ffac 	bl	8003018 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80030c0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80030c4:	f7ff ffb9 	bl	800303a <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80030c8:	4804      	ldr	r0, [pc, #16]	@ (80030dc <vcom_DeInit+0x28>)
 80030ca:	f7ff ff6f 	bl	8002fac <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80030ce:	200f      	movs	r0, #15
 80030d0:	f001 fb9d 	bl	800480e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80030d4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	2000042c 	.word	0x2000042c

080030e0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80030ec:	887b      	ldrh	r3, [r7, #2]
 80030ee:	461a      	mov	r2, r3
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4804      	ldr	r0, [pc, #16]	@ (8003104 <vcom_Trace_DMA+0x24>)
 80030f4:	f005 f976 	bl	80083e4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80030f8:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	2000042c 	.word	0x2000042c

08003108 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003110:	4a19      	ldr	r2, [pc, #100]	@ (8003178 <vcom_ReceiveInit+0x70>)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003116:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800311a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 800311c:	f107 0308 	add.w	r3, r7, #8
 8003120:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003124:	4815      	ldr	r0, [pc, #84]	@ (800317c <vcom_ReceiveInit+0x74>)
 8003126:	f007 f86e 	bl	800a206 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800312a:	bf00      	nop
 800312c:	4b13      	ldr	r3, [pc, #76]	@ (800317c <vcom_ReceiveInit+0x74>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800313a:	d0f7      	beq.n	800312c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 800313c:	bf00      	nop
 800313e:	4b0f      	ldr	r3, [pc, #60]	@ (800317c <vcom_ReceiveInit+0x74>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003148:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800314c:	d1f7      	bne.n	800313e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800314e:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <vcom_ReceiveInit+0x74>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	4b09      	ldr	r3, [pc, #36]	@ (800317c <vcom_ReceiveInit+0x74>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800315c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800315e:	4807      	ldr	r0, [pc, #28]	@ (800317c <vcom_ReceiveInit+0x74>)
 8003160:	f007 f8ac 	bl	800a2bc <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003164:	2201      	movs	r2, #1
 8003166:	4906      	ldr	r1, [pc, #24]	@ (8003180 <vcom_ReceiveInit+0x78>)
 8003168:	4804      	ldr	r0, [pc, #16]	@ (800317c <vcom_ReceiveInit+0x74>)
 800316a:	f005 f8e5 	bl	8008338 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800316e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	200005b4 	.word	0x200005b4
 800317c:	2000042c 	.word	0x2000042c
 8003180:	200005ac 	.word	0x200005ac

08003184 <vcom_Resume>:

void vcom_Resume(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003188:	4808      	ldr	r0, [pc, #32]	@ (80031ac <vcom_Resume+0x28>)
 800318a:	f004 ffee 	bl	800816a <HAL_UART_Init>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <vcom_Resume+0x14>
  {
    Error_Handler();
 8003194:	f7fe fcf0 	bl	8001b78 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003198:	4805      	ldr	r0, [pc, #20]	@ (80031b0 <vcom_Resume+0x2c>)
 800319a:	f001 fb47 	bl	800482c <HAL_DMA_Init>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <vcom_Resume+0x24>
  {
    Error_Handler();
 80031a4:	f7fe fce8 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	2000042c 	.word	0x2000042c
 80031b0:	2000054c 	.word	0x2000054c

080031b4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a05      	ldr	r2, [pc, #20]	@ (80031d8 <HAL_UART_TxCpltCallback+0x24>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d103      	bne.n	80031ce <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80031c6:	4b05      	ldr	r3, [pc, #20]	@ (80031dc <HAL_UART_TxCpltCallback+0x28>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2000      	movs	r0, #0
 80031cc:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40013800 	.word	0x40013800
 80031dc:	200005b0 	.word	0x200005b0

080031e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a11      	ldr	r2, [pc, #68]	@ (8003234 <HAL_UART_RxCpltCallback+0x54>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d114      	bne.n	800321c <HAL_UART_RxCpltCallback+0x3c>
    {
        if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80031f2:	4b11      	ldr	r3, [pc, #68]	@ (8003238 <HAL_UART_RxCpltCallback+0x58>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_UART_RxCpltCallback+0x30>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <HAL_UART_RxCpltCallback+0x30>
        {
            RxCpltCallback(&charRx, 1, 0);
 8003204:	4b0c      	ldr	r3, [pc, #48]	@ (8003238 <HAL_UART_RxCpltCallback+0x58>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2200      	movs	r2, #0
 800320a:	2101      	movs	r1, #1
 800320c:	480b      	ldr	r0, [pc, #44]	@ (800323c <HAL_UART_RxCpltCallback+0x5c>)
 800320e:	4798      	blx	r3
        }
        HAL_UART_Receive_IT(huart, &charRx, 1);
 8003210:	2201      	movs	r2, #1
 8003212:	490a      	ldr	r1, [pc, #40]	@ (800323c <HAL_UART_RxCpltCallback+0x5c>)
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f005 f88f 	bl	8008338 <HAL_UART_Receive_IT>
    }
    else if (huart->Instance == USART2)
    {
        SensorApp_UART_RxCallback();
    }
}
 800321a:	e006      	b.n	800322a <HAL_UART_RxCpltCallback+0x4a>
    else if (huart->Instance == USART2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a07      	ldr	r2, [pc, #28]	@ (8003240 <HAL_UART_RxCpltCallback+0x60>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <HAL_UART_RxCpltCallback+0x4a>
        SensorApp_UART_RxCallback();
 8003226:	f7fe fdbf 	bl	8001da8 <SensorApp_UART_RxCallback>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40013800 	.word	0x40013800
 8003238:	200005b4 	.word	0x200005b4
 800323c:	200005ac 	.word	0x200005ac
 8003240:	40004400 	.word	0x40004400

08003244 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003244:	480d      	ldr	r0, [pc, #52]	@ (800327c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003246:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003248:	f7ff fab6 	bl	80027b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800324c:	480c      	ldr	r0, [pc, #48]	@ (8003280 <LoopForever+0x6>)
  ldr r1, =_edata
 800324e:	490d      	ldr	r1, [pc, #52]	@ (8003284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003250:	4a0d      	ldr	r2, [pc, #52]	@ (8003288 <LoopForever+0xe>)
  movs r3, #0
 8003252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003254:	e002      	b.n	800325c <LoopCopyDataInit>

08003256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325a:	3304      	adds	r3, #4

0800325c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800325c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800325e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003260:	d3f9      	bcc.n	8003256 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003262:	4a0a      	ldr	r2, [pc, #40]	@ (800328c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003264:	4c0a      	ldr	r4, [pc, #40]	@ (8003290 <LoopForever+0x16>)
  movs r3, #0
 8003266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003268:	e001      	b.n	800326e <LoopFillZerobss>

0800326a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800326c:	3204      	adds	r2, #4

0800326e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800326e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003270:	d3fb      	bcc.n	800326a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003272:	f019 ffad 	bl	801d1d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003276:	f7fe fc16 	bl	8001aa6 <main>

0800327a <LoopForever>:

LoopForever:
    b LoopForever
 800327a:	e7fe      	b.n	800327a <LoopForever>
  ldr   r0, =_estack
 800327c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003284:	20000320 	.word	0x20000320
  ldr r2, =_sidata
 8003288:	08020468 	.word	0x08020468
  ldr r2, =_sbss
 800328c:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8003290:	20002570 	.word	0x20002570

08003294 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003294:	e7fe      	b.n	8003294 <ADC_IRQHandler>

08003296 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800329c:	1d3b      	adds	r3, r7, #4
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	605a      	str	r2, [r3, #4]
 80032a4:	609a      	str	r2, [r3, #8]
 80032a6:	60da      	str	r2, [r3, #12]
 80032a8:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80032aa:	2310      	movs	r3, #16
 80032ac:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80032ae:	2301      	movs	r3, #1
 80032b0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b6:	2303      	movs	r3, #3
 80032b8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80032ba:	1d3b      	adds	r3, r7, #4
 80032bc:	4619      	mov	r1, r3
 80032be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032c2:	f002 f8ff 	bl	80054c4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80032c6:	2320      	movs	r3, #32
 80032c8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	4619      	mov	r1, r3
 80032ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032d2:	f002 f8f7 	bl	80054c4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80032d6:	2200      	movs	r2, #0
 80032d8:	2120      	movs	r1, #32
 80032da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032de:	f002 fb1f 	bl	8005920 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80032e2:	2200      	movs	r2, #0
 80032e4:	2110      	movs	r1, #16
 80032e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032ea:	f002 fb19 	bl	8005920 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d83f      	bhi.n	8003388 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003308:	a201      	add	r2, pc, #4	@ (adr r2, 8003310 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	08003321 	.word	0x08003321
 8003314:	0800333b 	.word	0x0800333b
 8003318:	08003355 	.word	0x08003355
 800331c:	0800336f 	.word	0x0800336f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003320:	2200      	movs	r2, #0
 8003322:	2110      	movs	r1, #16
 8003324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003328:	f002 fafa 	bl	8005920 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800332c:	2200      	movs	r2, #0
 800332e:	2120      	movs	r1, #32
 8003330:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003334:	f002 faf4 	bl	8005920 <HAL_GPIO_WritePin>
      break;      
 8003338:	e027      	b.n	800338a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800333a:	2201      	movs	r2, #1
 800333c:	2110      	movs	r1, #16
 800333e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003342:	f002 faed 	bl	8005920 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003346:	2200      	movs	r2, #0
 8003348:	2120      	movs	r1, #32
 800334a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800334e:	f002 fae7 	bl	8005920 <HAL_GPIO_WritePin>
      break;
 8003352:	e01a      	b.n	800338a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003354:	2201      	movs	r2, #1
 8003356:	2110      	movs	r1, #16
 8003358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800335c:	f002 fae0 	bl	8005920 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003360:	2201      	movs	r2, #1
 8003362:	2120      	movs	r1, #32
 8003364:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003368:	f002 fada 	bl	8005920 <HAL_GPIO_WritePin>
      break;
 800336c:	e00d      	b.n	800338a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800336e:	2200      	movs	r2, #0
 8003370:	2110      	movs	r1, #16
 8003372:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003376:	f002 fad3 	bl	8005920 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800337a:	2201      	movs	r2, #1
 800337c:	2120      	movs	r1, #32
 800337e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003382:	f002 facd 	bl	8005920 <HAL_GPIO_WritePin>
      break;
 8003386:	e000      	b.n	800338a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003388:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003398:	2302      	movs	r3, #2
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80033a6:	2301      	movs	r3, #1
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80033b4:	2301      	movs	r3, #1
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr

080033be <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d102      	bne.n	80033d4 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80033ce:	230f      	movs	r3, #15
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	e001      	b.n	80033d8 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80033d4:	2316      	movs	r3, #22
 80033d6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80033d8:	68fb      	ldr	r3, [r7, #12]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <LL_DBGMCU_DisableDBGSleepMode>:
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80033e8:	4b04      	ldr	r3, [pc, #16]	@ (80033fc <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a03      	ldr	r2, [pc, #12]	@ (80033fc <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	6053      	str	r3, [r2, #4]
}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	e0042000 	.word	0xe0042000

08003400 <LL_DBGMCU_DisableDBGStopMode>:
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003404:	4b04      	ldr	r3, [pc, #16]	@ (8003418 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4a03      	ldr	r2, [pc, #12]	@ (8003418 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800340a:	f023 0302 	bic.w	r3, r3, #2
 800340e:	6053      	str	r3, [r2, #4]
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	e0042000 	.word	0xe0042000

0800341c <LL_DBGMCU_DisableDBGStandbyMode>:
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003420:	4b04      	ldr	r3, [pc, #16]	@ (8003434 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a03      	ldr	r2, [pc, #12]	@ (8003434 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003426:	f023 0304 	bic.w	r3, r3, #4
 800342a:	6053      	str	r3, [r2, #4]
}
 800342c:	bf00      	nop
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	e0042000 	.word	0xe0042000

08003438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003442:	2003      	movs	r0, #3
 8003444:	f001 f9b0 	bl	80047a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003448:	f003 fb46 	bl	8006ad8 <HAL_RCC_GetHCLKFreq>
 800344c:	4603      	mov	r3, r0
 800344e:	4a09      	ldr	r2, [pc, #36]	@ (8003474 <HAL_Init+0x3c>)
 8003450:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003452:	200f      	movs	r0, #15
 8003454:	f7ff f81c 	bl	8002490 <HAL_InitTick>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	71fb      	strb	r3, [r7, #7]
 8003462:	e001      	b.n	8003468 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003464:	f7fe fdd5 	bl	8002012 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003468:	79fb      	ldrb	r3, [r7, #7]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000000 	.word	0x20000000

08003478 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800347c:	4b04      	ldr	r3, [pc, #16]	@ (8003490 <HAL_SuspendTick+0x18>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a03      	ldr	r2, [pc, #12]	@ (8003490 <HAL_SuspendTick+0x18>)
 8003482:	f023 0302 	bic.w	r3, r3, #2
 8003486:	6013      	str	r3, [r2, #0]
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	e000e010 	.word	0xe000e010

08003494 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003498:	4b04      	ldr	r3, [pc, #16]	@ (80034ac <HAL_ResumeTick+0x18>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a03      	ldr	r2, [pc, #12]	@ (80034ac <HAL_ResumeTick+0x18>)
 800349e:	f043 0302 	orr.w	r3, r3, #2
 80034a2:	6013      	str	r3, [r2, #0]
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	e000e010 	.word	0xe000e010

080034b0 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80034b4:	4b02      	ldr	r3, [pc, #8]	@ (80034c0 <HAL_GetUIDw0+0x10>)
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr
 80034c0:	1fff7590 	.word	0x1fff7590

080034c4 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80034c8:	4b02      	ldr	r3, [pc, #8]	@ (80034d4 <HAL_GetUIDw1+0x10>)
 80034ca:	681b      	ldr	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	1fff7594 	.word	0x1fff7594

080034d8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80034dc:	4b02      	ldr	r3, [pc, #8]	@ (80034e8 <HAL_GetUIDw2+0x10>)
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	1fff7598 	.word	0x1fff7598

080034ec <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80034f0:	f7ff ff78 	bl	80033e4 <LL_DBGMCU_DisableDBGSleepMode>
}
 80034f4:	bf00      	nop
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80034fc:	f7ff ff80 	bl	8003400 <LL_DBGMCU_DisableDBGStopMode>
}
 8003500:	bf00      	nop
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003508:	f7ff ff88 	bl	800341c <LL_DBGMCU_DisableDBGStandbyMode>
}
 800350c:	bf00      	nop
 800350e:	bd80      	pop	{r7, pc}

08003510 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	601a      	str	r2, [r3, #0]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2107      	movs	r1, #7
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	401a      	ands	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	431a      	orrs	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr

0800358a <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2107      	movs	r1, #7
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr

080035de <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035de:	b480      	push	{r7}
 80035e0:	b085      	sub	sp, #20
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	210f      	movs	r1, #15
 80035f6:	fa01 f303 	lsl.w	r3, r1, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	401a      	ands	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	0e9b      	lsrs	r3, r3, #26
 8003602:	f003 010f 	and.w	r1, r3, #15
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	431a      	orrs	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003658:	43db      	mvns	r3, r3
 800365a:	401a      	ands	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr

0800366a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800366a:	b480      	push	{r7}
 800366c:	b085      	sub	sp, #20
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	43db      	mvns	r3, r3
 8003680:	401a      	ands	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	0219      	lsls	r1, r3, #8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	400b      	ands	r3, r1
 800368a:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800368e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003692:	431a      	orrs	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80036b2:	f023 0317 	bic.w	r3, r3, #23
 80036b6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80036d8:	f023 0317 	bic.w	r3, r3, #23
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6093      	str	r3, [r2, #8]
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr

080036ea <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036fe:	d101      	bne.n	8003704 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003720:	f023 0317 	bic.w	r3, r3, #23
 8003724:	f043 0201 	orr.w	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr

08003736 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003746:	f023 0317 	bic.w	r3, r3, #23
 800374a:	f043 0202 	orr.w	r2, r3, #2
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr

0800375c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <LL_ADC_IsEnabled+0x18>
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <LL_ADC_IsEnabled+0x1a>
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b02      	cmp	r3, #2
 8003792:	d101      	bne.n	8003798 <LL_ADC_IsDisableOngoing+0x18>
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <LL_ADC_IsDisableOngoing+0x1a>
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr

080037a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037b4:	f023 0317 	bic.w	r3, r3, #23
 80037b8:	f043 0204 	orr.w	r2, r3, #4
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr

080037ca <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037da:	f023 0317 	bic.w	r3, r3, #23
 80037de:	f043 0210 	orr.w	r2, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b04      	cmp	r3, #4
 8003802:	d101      	bne.n	8003808 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003820:	2300      	movs	r3, #0
 8003822:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003828:	2300      	movs	r3, #0
 800382a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e19e      	b.n	8003b74 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003840:	2b00      	cmp	r3, #0
 8003842:	d109      	bne.n	8003858 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7fd fe1b 	bl	8001480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff44 	bl	80036ea <LL_ADC_IsInternalRegulatorEnabled>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d115      	bne.n	8003894 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff18 	bl	80036a2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003872:	4b99      	ldr	r3, [pc, #612]	@ (8003ad8 <HAL_ADC_Init+0x2c4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	099b      	lsrs	r3, r3, #6
 8003878:	4a98      	ldr	r2, [pc, #608]	@ (8003adc <HAL_ADC_Init+0x2c8>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	099b      	lsrs	r3, r3, #6
 8003880:	3301      	adds	r3, #1
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003886:	e002      	b.n	800388e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	3b01      	subs	r3, #1
 800388c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f9      	bne.n	8003888 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff ff26 	bl	80036ea <LL_ADC_IsInternalRegulatorEnabled>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10d      	bne.n	80038c0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a8:	f043 0210 	orr.w	r2, r3, #16
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ff93 	bl	80037f0 <LL_ADC_REG_IsConversionOngoing>
 80038ca:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f040 8144 	bne.w	8003b62 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f040 8140 	bne.w	8003b62 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80038ea:	f043 0202 	orr.w	r2, r3, #2
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ff30 	bl	800375c <LL_ADC_IsEnabled>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f040 80a7 	bne.w	8003a52 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	7e1b      	ldrb	r3, [r3, #24]
 800390c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800390e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7e5b      	ldrb	r3, [r3, #25]
 8003914:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003916:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	7e9b      	ldrb	r3, [r3, #26]
 800391c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800391e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003924:	2a00      	cmp	r2, #0
 8003926:	d002      	beq.n	800392e <HAL_ADC_Init+0x11a>
 8003928:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800392c:	e000      	b.n	8003930 <HAL_ADC_Init+0x11c>
 800392e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003930:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003936:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	da04      	bge.n	800394a <HAL_ADC_Init+0x136>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003948:	e001      	b.n	800394e <HAL_ADC_Init+0x13a>
 800394a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 800394e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003956:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003958:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d114      	bne.n	8003994 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	7e9b      	ldrb	r3, [r3, #26]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d104      	bne.n	800397c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	e00b      	b.n	8003994 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003980:	f043 0220 	orr.w	r2, r3, #32
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398c:	f043 0201 	orr.w	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d009      	beq.n	80039b0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80039a8:	4313      	orrs	r3, r2
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 80039ba:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	69b9      	ldr	r1, [r7, #24]
 80039c4:	430b      	orrs	r3, r1
 80039c6:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80039d4:	4313      	orrs	r3, r2
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d111      	bne.n	8003a0a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80039f2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80039f8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80039fe:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	4b33      	ldr	r3, [pc, #204]	@ (8003ae0 <HAL_ADC_Init+0x2cc>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	6979      	ldr	r1, [r7, #20]
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003a26:	d014      	beq.n	8003a52 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a30:	d00f      	beq.n	8003a52 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003a36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a3a:	d00a      	beq.n	8003a52 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003a3c:	4b29      	ldr	r3, [pc, #164]	@ (8003ae4 <HAL_ADC_Init+0x2d0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003a4c:	4925      	ldr	r1, [pc, #148]	@ (8003ae4 <HAL_ADC_Init+0x2d0>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	f7ff fd76 	bl	800354e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	491e      	ldr	r1, [pc, #120]	@ (8003ae8 <HAL_ADC_Init+0x2d4>)
 8003a6e:	f7ff fd6e 	bl	800354e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d108      	bne.n	8003a8c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f062 020f 	orn	r2, r2, #15
 8003a88:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a8a:	e042      	b.n	8003b12 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a94:	d13d      	bne.n	8003b12 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	e00c      	b.n	8003ab6 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa8:	f003 030f 	and.w	r3, r3, #15
 8003aac:	2b0f      	cmp	r3, #15
 8003aae:	d006      	beq.n	8003abe <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b07      	cmp	r3, #7
 8003aba:	d9ef      	bls.n	8003a9c <HAL_ADC_Init+0x288>
 8003abc:	e000      	b.n	8003ac0 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8003abe:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d112      	bne.n	8003aec <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f062 020f 	orn	r2, r2, #15
 8003ad4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ad6:	e01c      	b.n	8003b12 <HAL_ADC_Init+0x2fe>
 8003ad8:	20000000 	.word	0x20000000
 8003adc:	053e2d63 	.word	0x053e2d63
 8003ae0:	1ffffc02 	.word	0x1ffffc02
 8003ae4:	40012708 	.word	0x40012708
 8003ae8:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	f003 031c 	and.w	r3, r3, #28
 8003afe:	f06f 020f 	mvn.w	r2, #15
 8003b02:	fa02 f103 	lsl.w	r1, r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2100      	movs	r1, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff fd36 	bl	800358a <LL_ADC_GetSamplingTimeCommonChannels>
 8003b1e:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d10b      	bne.n	8003b40 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b32:	f023 0303 	bic.w	r3, r3, #3
 8003b36:	f043 0201 	orr.w	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003b3e:	e018      	b.n	8003b72 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b44:	f023 0312 	bic.w	r3, r3, #18
 8003b48:	f043 0210 	orr.w	r2, r3, #16
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b54:	f043 0201 	orr.w	r2, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003b60:	e007      	b.n	8003b72 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b66:	f043 0210 	orr.w	r2, r3, #16
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003b72:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3720      	adds	r7, #32
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e06a      	b.n	8003c64 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b92:	f043 0202 	orr.w	r2, r3, #2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fabe 	bl	800411c <ADC_ConversionStop>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10f      	bne.n	8003bca <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fb82 	bl	80042b4 <ADC_Disable>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d102      	bne.n	8003bc0 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fd7f 	bl	80036c8 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003bd8:	f023 0303 	bic.w	r3, r3, #3
 8003bdc:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f240 329f 	movw	r2, #927	@ 0x39f
 8003be6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68d9      	ldr	r1, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c6c <HAL_ADC_DeInit+0xf0>)
 8003bf4:	400b      	ands	r3, r1
 8003bf6:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003c06:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0207 	bic.w	r2, r2, #7
 8003c16:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003c26:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2200      	movs	r2, #0
 8003c34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003c36:	4b0e      	ldr	r3, [pc, #56]	@ (8003c70 <HAL_ADC_DeInit+0xf4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8003c70 <HAL_ADC_DeInit+0xf4>)
 8003c3c:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003c40:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fd fc30 	bl	80014a8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	833e0200 	.word	0x833e0200
 8003c70:	40012708 	.word	0x40012708

08003c74 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fdb5 	bl	80037f0 <LL_ADC_REG_IsConversionOngoing>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d132      	bne.n	8003cf2 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <HAL_ADC_Start+0x26>
 8003c96:	2302      	movs	r3, #2
 8003c98:	e02e      	b.n	8003cf8 <HAL_ADC_Start+0x84>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fa80 	bl	80041a8 <ADC_Enable>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d11a      	bne.n	8003ce8 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	221c      	movs	r2, #28
 8003cd2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fd5f 	bl	80037a4 <LL_ADC_REG_StartConversion>
 8003ce6:	e006      	b.n	8003cf6 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003cf0:	e001      	b.n	8003cf6 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_ADC_Stop+0x16>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e022      	b.n	8003d5c <HAL_ADC_Stop+0x5c>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f9fc 	bl	800411c <ADC_ConversionStop>
 8003d24:	4603      	mov	r3, r0
 8003d26:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d111      	bne.n	8003d52 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fac0 	bl	80042b4 <ADC_Disable>
 8003d34:	4603      	mov	r3, r0
 8003d36:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	f043 0201 	orr.w	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d102      	bne.n	8003d7c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003d76:	2308      	movs	r3, #8
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	e010      	b.n	8003d9e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8e:	f043 0220 	orr.w	r2, r3, #32
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e077      	b.n	8003e8a <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003d9a:	2304      	movs	r3, #4
 8003d9c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003d9e:	f7fe fb81 	bl	80024a4 <HAL_GetTick>
 8003da2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003da4:	e021      	b.n	8003dea <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dac:	d01d      	beq.n	8003dea <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003dae:	f7fe fb79 	bl	80024a4 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <HAL_ADC_PollForConversion+0x60>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d112      	bne.n	8003dea <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd6:	f043 0204 	orr.w	r2, r3, #4
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e04f      	b.n	8003e8a <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0d6      	beq.n	8003da6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fbd6 	bl	80035ba <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d031      	beq.n	8003e78 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	7e9b      	ldrb	r3, [r3, #26]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d12d      	bne.n	8003e78 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d126      	bne.n	8003e78 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fcde 	bl	80037f0 <LL_ADC_REG_IsConversionOngoing>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d112      	bne.n	8003e60 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 020c 	bic.w	r2, r2, #12
 8003e48:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	f043 0201 	orr.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e5e:	e00b      	b.n	8003e78 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e64:	f043 0220 	orr.w	r2, r3, #32
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e70:	f043 0201 	orr.w	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	7e1b      	ldrb	r3, [r3, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	220c      	movs	r2, #12
 8003e86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr
	...

08003eac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x28>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e110      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x24a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fc85 	bl	80037f0 <LL_ADC_REG_IsConversionOngoing>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f040 80f7 	bne.w	80040dc <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	f000 80b1 	beq.w	800405a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f00:	d004      	beq.n	8003f0c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003f06:	4a7e      	ldr	r2, [pc, #504]	@ (8004100 <HAL_ADC_ConfigChannel+0x254>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d108      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4619      	mov	r1, r3
 8003f16:	4610      	mov	r0, r2
 8003f18:	f7ff fb82 	bl	8003620 <LL_ADC_REG_SetSequencerChAdd>
 8003f1c:	e041      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	210f      	movs	r1, #15
 8003f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	401a      	ands	r2, r3
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d105      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0xa0>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	0e9b      	lsrs	r3, r3, #26
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	e011      	b.n	8003f70 <HAL_ADC_ConfigChannel+0xc4>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003f64:	2320      	movs	r3, #32
 8003f66:	e003      	b.n	8003f70 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	fab3 f383 	clz	r3, r3
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	6839      	ldr	r1, [r7, #0]
 8003f72:	6849      	ldr	r1, [r1, #4]
 8003f74:	f001 011f 	and.w	r1, r1, #31
 8003f78:	408b      	lsls	r3, r1
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	089b      	lsrs	r3, r3, #2
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d808      	bhi.n	8003fa2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	6859      	ldr	r1, [r3, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f7ff fb1e 	bl	80035de <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6819      	ldr	r1, [r3, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f7ff fb5b 	bl	800366a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f280 8097 	bge.w	80040ec <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fbe:	4851      	ldr	r0, [pc, #324]	@ (8004104 <HAL_ADC_ConfigChannel+0x258>)
 8003fc0:	f7ff fab8 	bl	8003534 <LL_ADC_GetCommonPathInternalCh>
 8003fc4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a4f      	ldr	r2, [pc, #316]	@ (8004108 <HAL_ADC_ConfigChannel+0x25c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d120      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11b      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4848      	ldr	r0, [pc, #288]	@ (8004104 <HAL_ADC_ConfigChannel+0x258>)
 8003fe4:	f7ff fa94 	bl	8003510 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fe8:	4b48      	ldr	r3, [pc, #288]	@ (800410c <HAL_ADC_ConfigChannel+0x260>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	099b      	lsrs	r3, r3, #6
 8003fee:	4a48      	ldr	r2, [pc, #288]	@ (8004110 <HAL_ADC_ConfigChannel+0x264>)
 8003ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff4:	099b      	lsrs	r3, r3, #6
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004002:	e002      	b.n	800400a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	3b01      	subs	r3, #1
 8004008:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f9      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004010:	e06c      	b.n	80040ec <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a3f      	ldr	r2, [pc, #252]	@ (8004114 <HAL_ADC_ConfigChannel+0x268>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d10c      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x18a>
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d107      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800402c:	4619      	mov	r1, r3
 800402e:	4835      	ldr	r0, [pc, #212]	@ (8004104 <HAL_ADC_ConfigChannel+0x258>)
 8004030:	f7ff fa6e 	bl	8003510 <LL_ADC_SetCommonPathInternalCh>
 8004034:	e05a      	b.n	80040ec <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a37      	ldr	r2, [pc, #220]	@ (8004118 <HAL_ADC_ConfigChannel+0x26c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d155      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004046:	2b00      	cmp	r3, #0
 8004048:	d150      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004050:	4619      	mov	r1, r3
 8004052:	482c      	ldr	r0, [pc, #176]	@ (8004104 <HAL_ADC_ConfigChannel+0x258>)
 8004054:	f7ff fa5c 	bl	8003510 <LL_ADC_SetCommonPathInternalCh>
 8004058:	e048      	b.n	80040ec <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004062:	d004      	beq.n	800406e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004068:	4a25      	ldr	r2, [pc, #148]	@ (8004100 <HAL_ADC_ConfigChannel+0x254>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d107      	bne.n	800407e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4619      	mov	r1, r3
 8004078:	4610      	mov	r0, r2
 800407a:	f7ff fae3 	bl	8003644 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	da32      	bge.n	80040ec <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004086:	481f      	ldr	r0, [pc, #124]	@ (8004104 <HAL_ADC_ConfigChannel+0x258>)
 8004088:	f7ff fa54 	bl	8003534 <LL_ADC_GetCommonPathInternalCh>
 800408c:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a1d      	ldr	r2, [pc, #116]	@ (8004108 <HAL_ADC_ConfigChannel+0x25c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d107      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800409e:	4619      	mov	r1, r3
 80040a0:	4818      	ldr	r0, [pc, #96]	@ (8004104 <HAL_ADC_ConfigChannel+0x258>)
 80040a2:	f7ff fa35 	bl	8003510 <LL_ADC_SetCommonPathInternalCh>
 80040a6:	e021      	b.n	80040ec <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a19      	ldr	r2, [pc, #100]	@ (8004114 <HAL_ADC_ConfigChannel+0x268>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d107      	bne.n	80040c2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040b8:	4619      	mov	r1, r3
 80040ba:	4812      	ldr	r0, [pc, #72]	@ (8004104 <HAL_ADC_ConfigChannel+0x258>)
 80040bc:	f7ff fa28 	bl	8003510 <LL_ADC_SetCommonPathInternalCh>
 80040c0:	e014      	b.n	80040ec <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a14      	ldr	r2, [pc, #80]	@ (8004118 <HAL_ADC_ConfigChannel+0x26c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d10f      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80040d2:	4619      	mov	r1, r3
 80040d4:	480b      	ldr	r0, [pc, #44]	@ (8004104 <HAL_ADC_ConfigChannel+0x258>)
 80040d6:	f7ff fa1b 	bl	8003510 <LL_ADC_SetCommonPathInternalCh>
 80040da:	e007      	b.n	80040ec <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e0:	f043 0220 	orr.w	r2, r3, #32
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80040f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	80000004 	.word	0x80000004
 8004104:	40012708 	.word	0x40012708
 8004108:	b0001000 	.word	0xb0001000
 800410c:	20000000 	.word	0x20000000
 8004110:	053e2d63 	.word	0x053e2d63
 8004114:	b8004000 	.word	0xb8004000
 8004118:	b4002000 	.word	0xb4002000

0800411c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff fb61 	bl	80037f0 <LL_ADC_REG_IsConversionOngoing>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d033      	beq.n	800419c <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fb21 	bl	8003780 <LL_ADC_IsDisableOngoing>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d104      	bne.n	800414e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fb3e 	bl	80037ca <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800414e:	f7fe f9a9 	bl	80024a4 <HAL_GetTick>
 8004152:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004154:	e01b      	b.n	800418e <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004156:	f7fe f9a5 	bl	80024a4 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d914      	bls.n	800418e <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00d      	beq.n	800418e <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004176:	f043 0210 	orr.w	r2, r3, #16
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004182:	f043 0201 	orr.w	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e007      	b.n	800419e <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1dc      	bne.n	8004156 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff facf 	bl	800375c <LL_ADC_IsEnabled>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d169      	bne.n	8004298 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	4b36      	ldr	r3, [pc, #216]	@ (80042a4 <ADC_Enable+0xfc>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00d      	beq.n	80041ee <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d6:	f043 0210 	orr.w	r2, r3, #16
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e2:	f043 0201 	orr.w	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e055      	b.n	800429a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff fa8c 	bl	8003710 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80041f8:	482b      	ldr	r0, [pc, #172]	@ (80042a8 <ADC_Enable+0x100>)
 80041fa:	f7ff f99b 	bl	8003534 <LL_ADC_GetCommonPathInternalCh>
 80041fe:	4603      	mov	r3, r0
 8004200:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00f      	beq.n	8004228 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004208:	4b28      	ldr	r3, [pc, #160]	@ (80042ac <ADC_Enable+0x104>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	099b      	lsrs	r3, r3, #6
 800420e:	4a28      	ldr	r2, [pc, #160]	@ (80042b0 <ADC_Enable+0x108>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	099b      	lsrs	r3, r3, #6
 8004216:	3301      	adds	r3, #1
 8004218:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800421a:	e002      	b.n	8004222 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	3b01      	subs	r3, #1
 8004220:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f9      	bne.n	800421c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	7e5b      	ldrb	r3, [r3, #25]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d033      	beq.n	8004298 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004230:	f7fe f938 	bl	80024a4 <HAL_GetTick>
 8004234:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004236:	e028      	b.n	800428a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fa8d 	bl	800375c <LL_ADC_IsEnabled>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d104      	bne.n	8004252 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fa5f 	bl	8003710 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004252:	f7fe f927 	bl	80024a4 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d914      	bls.n	800428a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b01      	cmp	r3, #1
 800426c:	d00d      	beq.n	800428a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004272:	f043 0210 	orr.w	r2, r3, #16
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427e:	f043 0201 	orr.w	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e007      	b.n	800429a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b01      	cmp	r3, #1
 8004296:	d1cf      	bne.n	8004238 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	80000017 	.word	0x80000017
 80042a8:	40012708 	.word	0x40012708
 80042ac:	20000000 	.word	0x20000000
 80042b0:	053e2d63 	.word	0x053e2d63

080042b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff fa5d 	bl	8003780 <LL_ADC_IsDisableOngoing>
 80042c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fa45 	bl	800375c <LL_ADC_IsEnabled>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d047      	beq.n	8004368 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d144      	bne.n	8004368 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 0305 	and.w	r3, r3, #5
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d10c      	bne.n	8004306 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fa20 	bl	8003736 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2203      	movs	r2, #3
 80042fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80042fe:	f7fe f8d1 	bl	80024a4 <HAL_GetTick>
 8004302:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004304:	e029      	b.n	800435a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430a:	f043 0210 	orr.w	r2, r3, #16
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004316:	f043 0201 	orr.w	r2, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e023      	b.n	800436a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004322:	f7fe f8bf 	bl	80024a4 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d914      	bls.n	800435a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00d      	beq.n	800435a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004342:	f043 0210 	orr.w	r2, r3, #16
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434e:	f043 0201 	orr.w	r2, r3, #1
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e007      	b.n	800436a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1dc      	bne.n	8004322 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <LL_ADC_SetCalibrationFactor>:
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004382:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <LL_ADC_GetCalibrationFactor>:
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <LL_ADC_Enable>:
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043c6:	f023 0317 	bic.w	r3, r3, #23
 80043ca:	f043 0201 	orr.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	609a      	str	r2, [r3, #8]
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr

080043dc <LL_ADC_Disable>:
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043ec:	f023 0317 	bic.w	r3, r3, #23
 80043f0:	f043 0202 	orr.w	r2, r3, #2
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	609a      	str	r2, [r3, #8]
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr

08004402 <LL_ADC_IsEnabled>:
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <LL_ADC_IsEnabled+0x18>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <LL_ADC_IsEnabled+0x1a>
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr

08004426 <LL_ADC_StartCalibration>:
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004436:	f023 0317 	bic.w	r3, r3, #23
 800443a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	609a      	str	r2, [r3, #8]
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <LL_ADC_IsCalibrationOnGoing>:
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800445c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004460:	d101      	bne.n	8004466 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b088      	sub	sp, #32
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800447a:	2300      	movs	r3, #0
 800447c:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800447e:	2300      	movs	r3, #0
 8004480:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_ADCEx_Calibration_Start+0x1e>
 800448c:	2302      	movs	r3, #2
 800448e:	e0b9      	b.n	8004604 <HAL_ADCEx_Calibration_Start+0x192>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff ff0b 	bl	80042b4 <ADC_Disable>
 800449e:	4603      	mov	r3, r0
 80044a0:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff ffab 	bl	8004402 <LL_ADC_IsEnabled>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f040 809d 	bne.w	80045ee <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80044bc:	f043 0202 	orr.w	r2, r3, #2
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	f248 0303 	movw	r3, #32771	@ 0x8003
 80044ce:	4013      	ands	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044e0:	f023 0303 	bic.w	r3, r3, #3
 80044e4:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80044e6:	2300      	movs	r3, #0
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	e02e      	b.n	800454a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff ff98 	bl	8004426 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80044f6:	e014      	b.n	8004522 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	3301      	adds	r3, #1
 80044fc:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8004504:	d30d      	bcc.n	8004522 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450a:	f023 0312 	bic.w	r3, r3, #18
 800450e:	f043 0210 	orr.w	r2, r3, #16
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e070      	b.n	8004604 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff ff90 	bl	800444c <LL_ADC_IsCalibrationOnGoing>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e2      	bne.n	80044f8 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ff2f 	bl	800439a <LL_ADC_GetCalibrationFactor>
 800453c:	4602      	mov	r2, r0
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	4413      	add	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	3301      	adds	r3, #1
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	2b07      	cmp	r3, #7
 800454e:	d9cd      	bls.n	80044ec <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff ff29 	bl	80043b6 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69b9      	ldr	r1, [r7, #24]
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff ff01 	bl	8004372 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff ff31 	bl	80043dc <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800457a:	f7fd ff93 	bl	80024a4 <HAL_GetTick>
 800457e:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004580:	e01c      	b.n	80045bc <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004582:	f7fd ff8f 	bl	80024a4 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d915      	bls.n	80045bc <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff ff34 	bl	8004402 <LL_ADC_IsEnabled>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00d      	beq.n	80045bc <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a4:	f043 0210 	orr.w	r2, r3, #16
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b0:	f043 0201 	orr.w	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e023      	b.n	8004604 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff ff1e 	bl	8004402 <LL_ADC_IsEnabled>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1da      	bne.n	8004582 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68d9      	ldr	r1, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	430a      	orrs	r2, r1
 80045da:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e0:	f023 0303 	bic.w	r3, r3, #3
 80045e4:	f043 0201 	orr.w	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80045ec:	e005      	b.n	80045fa <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f2:	f043 0210 	orr.w	r2, r3, #16
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004602:	7dfb      	ldrb	r3, [r7, #23]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3720      	adds	r7, #32
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800461c:	4b0c      	ldr	r3, [pc, #48]	@ (8004650 <__NVIC_SetPriorityGrouping+0x44>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004628:	4013      	ands	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800463c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800463e:	4a04      	ldr	r2, [pc, #16]	@ (8004650 <__NVIC_SetPriorityGrouping+0x44>)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	60d3      	str	r3, [r2, #12]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004658:	4b04      	ldr	r3, [pc, #16]	@ (800466c <__NVIC_GetPriorityGrouping+0x18>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	0a1b      	lsrs	r3, r3, #8
 800465e:	f003 0307 	and.w	r3, r3, #7
}
 8004662:	4618      	mov	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	2b00      	cmp	r3, #0
 8004680:	db0b      	blt.n	800469a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	f003 021f 	and.w	r2, r3, #31
 8004688:	4906      	ldr	r1, [pc, #24]	@ (80046a4 <__NVIC_EnableIRQ+0x34>)
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	2001      	movs	r0, #1
 8004692:	fa00 f202 	lsl.w	r2, r0, r2
 8004696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr
 80046a4:	e000e100 	.word	0xe000e100

080046a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	db12      	blt.n	80046e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	f003 021f 	and.w	r2, r3, #31
 80046c0:	490a      	ldr	r1, [pc, #40]	@ (80046ec <__NVIC_DisableIRQ+0x44>)
 80046c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	2001      	movs	r0, #1
 80046ca:	fa00 f202 	lsl.w	r2, r0, r2
 80046ce:	3320      	adds	r3, #32
 80046d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80046d4:	f3bf 8f4f 	dsb	sy
}
 80046d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80046da:	f3bf 8f6f 	isb	sy
}
 80046de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	e000e100 	.word	0xe000e100

080046f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	6039      	str	r1, [r7, #0]
 80046fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004700:	2b00      	cmp	r3, #0
 8004702:	db0a      	blt.n	800471a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	b2da      	uxtb	r2, r3
 8004708:	490c      	ldr	r1, [pc, #48]	@ (800473c <__NVIC_SetPriority+0x4c>)
 800470a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470e:	0112      	lsls	r2, r2, #4
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	440b      	add	r3, r1
 8004714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004718:	e00a      	b.n	8004730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4908      	ldr	r1, [pc, #32]	@ (8004740 <__NVIC_SetPriority+0x50>)
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	3b04      	subs	r3, #4
 8004728:	0112      	lsls	r2, r2, #4
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	440b      	add	r3, r1
 800472e:	761a      	strb	r2, [r3, #24]
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	e000e100 	.word	0xe000e100
 8004740:	e000ed00 	.word	0xe000ed00

08004744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004744:	b480      	push	{r7}
 8004746:	b089      	sub	sp, #36	@ 0x24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f1c3 0307 	rsb	r3, r3, #7
 800475e:	2b04      	cmp	r3, #4
 8004760:	bf28      	it	cs
 8004762:	2304      	movcs	r3, #4
 8004764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3304      	adds	r3, #4
 800476a:	2b06      	cmp	r3, #6
 800476c:	d902      	bls.n	8004774 <NVIC_EncodePriority+0x30>
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3b03      	subs	r3, #3
 8004772:	e000      	b.n	8004776 <NVIC_EncodePriority+0x32>
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004778:	f04f 32ff 	mov.w	r2, #4294967295
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43da      	mvns	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	401a      	ands	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800478c:	f04f 31ff 	mov.w	r1, #4294967295
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	fa01 f303 	lsl.w	r3, r1, r3
 8004796:	43d9      	mvns	r1, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800479c:	4313      	orrs	r3, r2
         );
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3724      	adds	r7, #36	@ 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff2b 	bl	800460c <__NVIC_SetPriorityGrouping>
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b086      	sub	sp, #24
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	4603      	mov	r3, r0
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
 80047ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047cc:	f7ff ff42 	bl	8004654 <__NVIC_GetPriorityGrouping>
 80047d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	6978      	ldr	r0, [r7, #20]
 80047d8:	f7ff ffb4 	bl	8004744 <NVIC_EncodePriority>
 80047dc:	4602      	mov	r2, r0
 80047de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e2:	4611      	mov	r1, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff ff83 	bl	80046f0 <__NVIC_SetPriority>
}
 80047ea:	bf00      	nop
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	4603      	mov	r3, r0
 80047fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff35 	bl	8004670 <__NVIC_EnableIRQ>
}
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	4603      	mov	r3, r0
 8004816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff ff43 	bl	80046a8 <__NVIC_DisableIRQ>
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e08e      	b.n	800495c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	4b47      	ldr	r3, [pc, #284]	@ (8004964 <HAL_DMA_Init+0x138>)
 8004846:	429a      	cmp	r2, r3
 8004848:	d80f      	bhi.n	800486a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	4b45      	ldr	r3, [pc, #276]	@ (8004968 <HAL_DMA_Init+0x13c>)
 8004852:	4413      	add	r3, r2
 8004854:	4a45      	ldr	r2, [pc, #276]	@ (800496c <HAL_DMA_Init+0x140>)
 8004856:	fba2 2303 	umull	r2, r3, r2, r3
 800485a:	091b      	lsrs	r3, r3, #4
 800485c:	009a      	lsls	r2, r3, #2
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a42      	ldr	r2, [pc, #264]	@ (8004970 <HAL_DMA_Init+0x144>)
 8004866:	641a      	str	r2, [r3, #64]	@ 0x40
 8004868:	e00e      	b.n	8004888 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	4b40      	ldr	r3, [pc, #256]	@ (8004974 <HAL_DMA_Init+0x148>)
 8004872:	4413      	add	r3, r2
 8004874:	4a3d      	ldr	r2, [pc, #244]	@ (800496c <HAL_DMA_Init+0x140>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	091b      	lsrs	r3, r3, #4
 800487c:	009a      	lsls	r2, r3, #2
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a3c      	ldr	r2, [pc, #240]	@ (8004978 <HAL_DMA_Init+0x14c>)
 8004886:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6812      	ldr	r2, [r2, #0]
 800489a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800489e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6819      	ldr	r1, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fb24 	bl	8004f28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048e8:	d102      	bne.n	80048f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048fc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004906:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d010      	beq.n	8004932 <HAL_DMA_Init+0x106>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b04      	cmp	r3, #4
 8004916:	d80c      	bhi.n	8004932 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fb4d 	bl	8004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800492e:	605a      	str	r2, [r3, #4]
 8004930:	e008      	b.n	8004944 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40020407 	.word	0x40020407
 8004968:	bffdfff8 	.word	0xbffdfff8
 800496c:	cccccccd 	.word	0xcccccccd
 8004970:	40020000 	.word	0x40020000
 8004974:	bffdfbf8 	.word	0xbffdfbf8
 8004978:	40020400 	.word	0x40020400

0800497c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e07b      	b.n	8004a86 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0201 	bic.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004a90 <HAL_DMA_DeInit+0x114>)
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d80f      	bhi.n	80049ca <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	4b38      	ldr	r3, [pc, #224]	@ (8004a94 <HAL_DMA_DeInit+0x118>)
 80049b2:	4413      	add	r3, r2
 80049b4:	4a38      	ldr	r2, [pc, #224]	@ (8004a98 <HAL_DMA_DeInit+0x11c>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	009a      	lsls	r2, r3, #2
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a35      	ldr	r2, [pc, #212]	@ (8004a9c <HAL_DMA_DeInit+0x120>)
 80049c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80049c8:	e00e      	b.n	80049e8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	4b33      	ldr	r3, [pc, #204]	@ (8004aa0 <HAL_DMA_DeInit+0x124>)
 80049d2:	4413      	add	r3, r2
 80049d4:	4a30      	ldr	r2, [pc, #192]	@ (8004a98 <HAL_DMA_DeInit+0x11c>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	091b      	lsrs	r3, r3, #4
 80049dc:	009a      	lsls	r2, r3, #2
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2f      	ldr	r2, [pc, #188]	@ (8004aa4 <HAL_DMA_DeInit+0x128>)
 80049e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f4:	f003 021c 	and.w	r2, r3, #28
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fc:	2101      	movs	r1, #1
 80049fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004a02:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fa8f 	bl	8004f28 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a1a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00f      	beq.n	8004a44 <HAL_DMA_DeInit+0xc8>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d80b      	bhi.n	8004a44 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fac3 	bl	8004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a42:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40020407 	.word	0x40020407
 8004a94:	bffdfff8 	.word	0xbffdfff8
 8004a98:	cccccccd 	.word	0xcccccccd
 8004a9c:	40020000 	.word	0x40020000
 8004aa0:	bffdfbf8 	.word	0xbffdfbf8
 8004aa4:	40020400 	.word	0x40020400

08004aa8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_DMA_Start_IT+0x20>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e069      	b.n	8004b9c <HAL_DMA_Start_IT+0xf4>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d155      	bne.n	8004b88 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f9d3 	bl	8004eac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d008      	beq.n	8004b20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 020e 	orr.w	r2, r2, #14
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	e00f      	b.n	8004b40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0204 	bic.w	r2, r2, #4
 8004b2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 020a 	orr.w	r2, r2, #10
 8004b3e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b5c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b74:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0201 	orr.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	e008      	b.n	8004b9a <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2280      	movs	r2, #128	@ 0x80
 8004b8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e04f      	b.n	8004c56 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d008      	beq.n	8004bd4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e040      	b.n	8004c56 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 020e 	bic.w	r2, r2, #14
 8004be2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bf2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0201 	bic.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c08:	f003 021c 	and.w	r2, r3, #28
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c10:	2101      	movs	r1, #1
 8004c12:	fa01 f202 	lsl.w	r2, r1, r2
 8004c16:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c20:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00c      	beq.n	8004c44 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c42:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr

08004c60 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d005      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
 8004c82:	e047      	b.n	8004d14 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 020e 	bic.w	r2, r2, #14
 8004c92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0201 	bic.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb8:	f003 021c 	and.w	r2, r3, #28
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004cd0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00c      	beq.n	8004cf4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ce8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004cf2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	4798      	blx	r3
    }
  }
  return status;
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3c:	f003 031c 	and.w	r3, r3, #28
 8004d40:	2204      	movs	r2, #4
 8004d42:	409a      	lsls	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d027      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x7c>
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d022      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d107      	bne.n	8004d74 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0204 	bic.w	r2, r2, #4
 8004d72:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d78:	f003 021c 	and.w	r2, r3, #28
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d80:	2104      	movs	r1, #4
 8004d82:	fa01 f202 	lsl.w	r2, r1, r2
 8004d86:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8081 	beq.w	8004e94 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004d9a:	e07b      	b.n	8004e94 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da0:	f003 031c 	and.w	r3, r3, #28
 8004da4:	2202      	movs	r2, #2
 8004da6:	409a      	lsls	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d03d      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x10c>
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d038      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10b      	bne.n	8004de0 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 020a 	bic.w	r2, r2, #10
 8004dd6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	4b2e      	ldr	r3, [pc, #184]	@ (8004ea0 <HAL_DMA_IRQHandler+0x180>)
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d909      	bls.n	8004e00 <HAL_DMA_IRQHandler+0xe0>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df0:	f003 031c 	and.w	r3, r3, #28
 8004df4:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea4 <HAL_DMA_IRQHandler+0x184>)
 8004df6:	2102      	movs	r1, #2
 8004df8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfc:	6053      	str	r3, [r2, #4]
 8004dfe:	e008      	b.n	8004e12 <HAL_DMA_IRQHandler+0xf2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e04:	f003 031c 	and.w	r3, r3, #28
 8004e08:	4a27      	ldr	r2, [pc, #156]	@ (8004ea8 <HAL_DMA_IRQHandler+0x188>)
 8004e0a:	2102      	movs	r1, #2
 8004e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e10:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d038      	beq.n	8004e94 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004e2a:	e033      	b.n	8004e94 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e30:	f003 031c 	and.w	r3, r3, #28
 8004e34:	2208      	movs	r2, #8
 8004e36:	409a      	lsls	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d02a      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x176>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d025      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 020e 	bic.w	r2, r2, #14
 8004e58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5e:	f003 021c 	and.w	r2, r3, #28
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	2101      	movs	r1, #1
 8004e68:	fa01 f202 	lsl.w	r2, r1, r2
 8004e6c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
}
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40020080 	.word	0x40020080
 8004ea4:	40020400 	.word	0x40020400
 8004ea8:	40020000 	.word	0x40020000

08004eac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ec2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d004      	beq.n	8004ed6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ed4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eda:	f003 021c 	and.w	r2, r3, #28
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b10      	cmp	r3, #16
 8004ef8:	d108      	bne.n	8004f0c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f0a:	e007      	b.n	8004f1c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	60da      	str	r2, [r3, #12]
}
 8004f1c:	bf00      	nop
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr
	...

08004f28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	4b1c      	ldr	r3, [pc, #112]	@ (8004fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d813      	bhi.n	8004f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f40:	089b      	lsrs	r3, r3, #2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f48:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	3b08      	subs	r3, #8
 8004f58:	4a14      	ldr	r2, [pc, #80]	@ (8004fac <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	091b      	lsrs	r3, r3, #4
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e011      	b.n	8004f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f68:	089b      	lsrs	r3, r3, #2
 8004f6a:	009a      	lsls	r2, r3, #2
 8004f6c:	4b10      	ldr	r3, [pc, #64]	@ (8004fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004f6e:	4413      	add	r3, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	3b08      	subs	r3, #8
 8004f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8004fac <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	091b      	lsrs	r3, r3, #4
 8004f84:	3307      	adds	r3, #7
 8004f86:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004f8c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	2201      	movs	r2, #1
 8004f96:	409a      	lsls	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004f9c:	bf00      	nop
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bc80      	pop	{r7}
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40020407 	.word	0x40020407
 8004fac:	cccccccd 	.word	0xcccccccd
 8004fb0:	4002081c 	.word	0x4002081c
 8004fb4:	40020880 	.word	0x40020880

08004fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a08      	ldr	r2, [pc, #32]	@ (8004ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004fdc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr
 8004ff8:	1000823f 	.word	0x1000823f
 8004ffc:	40020940 	.word	0x40020940

08005000 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800500e:	4b1c      	ldr	r3, [pc, #112]	@ (8005080 <HAL_FLASH_Program+0x80>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_FLASH_Program+0x1a>
 8005016:	2302      	movs	r3, #2
 8005018:	e02d      	b.n	8005076 <HAL_FLASH_Program+0x76>
 800501a:	4b19      	ldr	r3, [pc, #100]	@ (8005080 <HAL_FLASH_Program+0x80>)
 800501c:	2201      	movs	r2, #1
 800501e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005020:	4b17      	ldr	r3, [pc, #92]	@ (8005080 <HAL_FLASH_Program+0x80>)
 8005022:	2200      	movs	r2, #0
 8005024:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005026:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800502a:	f000 f869 	bl	8005100 <FLASH_WaitForLastOperation>
 800502e:	4603      	mov	r3, r0
 8005030:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005032:	7dfb      	ldrb	r3, [r7, #23]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d11a      	bne.n	800506e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d105      	bne.n	800504a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800503e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005042:	68b8      	ldr	r0, [r7, #8]
 8005044:	f000 f8be 	bl	80051c4 <FLASH_Program_DoubleWord>
 8005048:	e004      	b.n	8005054 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	4619      	mov	r1, r3
 800504e:	68b8      	ldr	r0, [r7, #8]
 8005050:	f000 f8de 	bl	8005210 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005054:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005058:	f000 f852 	bl	8005100 <FLASH_WaitForLastOperation>
 800505c:	4603      	mov	r3, r0
 800505e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005060:	4b08      	ldr	r3, [pc, #32]	@ (8005084 <HAL_FLASH_Program+0x84>)
 8005062:	695a      	ldr	r2, [r3, #20]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	43db      	mvns	r3, r3
 8005068:	4906      	ldr	r1, [pc, #24]	@ (8005084 <HAL_FLASH_Program+0x84>)
 800506a:	4013      	ands	r3, r2
 800506c:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800506e:	4b04      	ldr	r3, [pc, #16]	@ (8005080 <HAL_FLASH_Program+0x80>)
 8005070:	2200      	movs	r2, #0
 8005072:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005074:	7dfb      	ldrb	r3, [r7, #23]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	200005b8 	.word	0x200005b8
 8005084:	58004000 	.word	0x58004000

08005088 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005092:	4b0b      	ldr	r3, [pc, #44]	@ (80050c0 <HAL_FLASH_Unlock+0x38>)
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	da0b      	bge.n	80050b2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800509a:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <HAL_FLASH_Unlock+0x38>)
 800509c:	4a09      	ldr	r2, [pc, #36]	@ (80050c4 <HAL_FLASH_Unlock+0x3c>)
 800509e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80050a0:	4b07      	ldr	r3, [pc, #28]	@ (80050c0 <HAL_FLASH_Unlock+0x38>)
 80050a2:	4a09      	ldr	r2, [pc, #36]	@ (80050c8 <HAL_FLASH_Unlock+0x40>)
 80050a4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80050a6:	4b06      	ldr	r3, [pc, #24]	@ (80050c0 <HAL_FLASH_Unlock+0x38>)
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	da01      	bge.n	80050b2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80050b2:	79fb      	ldrb	r3, [r7, #7]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	58004000 	.word	0x58004000
 80050c4:	45670123 	.word	0x45670123
 80050c8:	cdef89ab 	.word	0xcdef89ab

080050cc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80050d6:	4b09      	ldr	r3, [pc, #36]	@ (80050fc <HAL_FLASH_Lock+0x30>)
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	4a08      	ldr	r2, [pc, #32]	@ (80050fc <HAL_FLASH_Lock+0x30>)
 80050dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80050e0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80050e2:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <HAL_FLASH_Lock+0x30>)
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	db01      	blt.n	80050ee <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80050ee:	79fb      	ldrb	r3, [r7, #7]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	58004000 	.word	0x58004000

08005100 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005108:	f7fd f9cc 	bl	80024a4 <HAL_GetTick>
 800510c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800510e:	e009      	b.n	8005124 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005110:	f7fd f9c8 	bl	80024a4 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	429a      	cmp	r2, r3
 800511e:	d801      	bhi.n	8005124 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e046      	b.n	80051b2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005124:	4b25      	ldr	r3, [pc, #148]	@ (80051bc <FLASH_WaitForLastOperation+0xbc>)
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800512c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005130:	d0ee      	beq.n	8005110 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005132:	4b22      	ldr	r3, [pc, #136]	@ (80051bc <FLASH_WaitForLastOperation+0xbc>)
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005142:	4b1e      	ldr	r3, [pc, #120]	@ (80051bc <FLASH_WaitForLastOperation+0xbc>)
 8005144:	2201      	movs	r2, #1
 8005146:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800514e:	4013      	ands	r3, r2
 8005150:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005158:	d307      	bcc.n	800516a <FLASH_WaitForLastOperation+0x6a>
 800515a:	4b18      	ldr	r3, [pc, #96]	@ (80051bc <FLASH_WaitForLastOperation+0xbc>)
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005164:	4915      	ldr	r1, [pc, #84]	@ (80051bc <FLASH_WaitForLastOperation+0xbc>)
 8005166:	4313      	orrs	r3, r2
 8005168:	618b      	str	r3, [r1, #24]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d004      	beq.n	800517e <FLASH_WaitForLastOperation+0x7e>
 8005174:	4a11      	ldr	r2, [pc, #68]	@ (80051bc <FLASH_WaitForLastOperation+0xbc>)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800517c:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00e      	beq.n	80051a2 <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005184:	4a0e      	ldr	r2, [pc, #56]	@ (80051c0 <FLASH_WaitForLastOperation+0xc0>)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e011      	b.n	80051b2 <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800518e:	f7fd f989 	bl	80024a4 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	429a      	cmp	r2, r3
 800519c:	d801      	bhi.n	80051a2 <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e007      	b.n	80051b2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80051a2:	4b06      	ldr	r3, [pc, #24]	@ (80051bc <FLASH_WaitForLastOperation+0xbc>)
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051ae:	d0ee      	beq.n	800518e <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	58004000 	.word	0x58004000
 80051c0:	200005b8 	.word	0x200005b8

080051c4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80051d0:	4b0e      	ldr	r3, [pc, #56]	@ (800520c <FLASH_Program_DoubleWord+0x48>)
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	4a0d      	ldr	r2, [pc, #52]	@ (800520c <FLASH_Program_DoubleWord+0x48>)
 80051d6:	f043 0301 	orr.w	r3, r3, #1
 80051da:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80051e2:	f3bf 8f6f 	isb	sy
}
 80051e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80051e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	000a      	movs	r2, r1
 80051f6:	2300      	movs	r3, #0
 80051f8:	68f9      	ldr	r1, [r7, #12]
 80051fa:	3104      	adds	r1, #4
 80051fc:	4613      	mov	r3, r2
 80051fe:	600b      	str	r3, [r1, #0]
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	58004000 	.word	0x58004000

08005210 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005210:	b480      	push	{r7}
 8005212:	b089      	sub	sp, #36	@ 0x24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800521a:	2340      	movs	r3, #64	@ 0x40
 800521c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005226:	4b18      	ldr	r3, [pc, #96]	@ (8005288 <FLASH_Program_Fast+0x78>)
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	4a17      	ldr	r2, [pc, #92]	@ (8005288 <FLASH_Program_Fast+0x78>)
 800522c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005230:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005232:	f3ef 8310 	mrs	r3, PRIMASK
 8005236:	60fb      	str	r3, [r7, #12]
  return(result);
 8005238:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800523a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800523c:	b672      	cpsid	i
}
 800523e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	3304      	adds	r3, #4
 800524c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	3304      	adds	r3, #4
 8005252:	617b      	str	r3, [r7, #20]
    row_index--;
 8005254:	7ffb      	ldrb	r3, [r7, #31]
 8005256:	3b01      	subs	r3, #1
 8005258:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800525a:	7ffb      	ldrb	r3, [r7, #31]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1ef      	bne.n	8005240 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005260:	bf00      	nop
 8005262:	4b09      	ldr	r3, [pc, #36]	@ (8005288 <FLASH_Program_Fast+0x78>)
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800526a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526e:	d0f8      	beq.n	8005262 <FLASH_Program_Fast+0x52>
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f383 8810 	msr	PRIMASK, r3
}
 800527a:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800527c:	bf00      	nop
 800527e:	3724      	adds	r7, #36	@ 0x24
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	58004000 	.word	0x58004000

0800528c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005296:	4b28      	ldr	r3, [pc, #160]	@ (8005338 <HAL_FLASHEx_Erase+0xac>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_FLASHEx_Erase+0x16>
 800529e:	2302      	movs	r3, #2
 80052a0:	e046      	b.n	8005330 <HAL_FLASHEx_Erase+0xa4>
 80052a2:	4b25      	ldr	r3, [pc, #148]	@ (8005338 <HAL_FLASHEx_Erase+0xac>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80052a8:	4b23      	ldr	r3, [pc, #140]	@ (8005338 <HAL_FLASHEx_Erase+0xac>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80052ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052b2:	f7ff ff25 	bl	8005100 <FLASH_WaitForLastOperation>
 80052b6:	4603      	mov	r3, r0
 80052b8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d133      	bne.n	8005328 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d108      	bne.n	80052da <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80052c8:	f000 f880 	bl	80053cc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80052cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052d0:	f7ff ff16 	bl	8005100 <FLASH_WaitForLastOperation>
 80052d4:	4603      	mov	r3, r0
 80052d6:	73fb      	strb	r3, [r7, #15]
 80052d8:	e024      	b.n	8005324 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f04f 32ff 	mov.w	r2, #4294967295
 80052e0:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	60bb      	str	r3, [r7, #8]
 80052e8:	e012      	b.n	8005310 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80052ea:	68b8      	ldr	r0, [r7, #8]
 80052ec:	f000 f87e 	bl	80053ec <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80052f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052f4:	f7ff ff04 	bl	8005100 <FLASH_WaitForLastOperation>
 80052f8:	4603      	mov	r3, r0
 80052fa:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	601a      	str	r2, [r3, #0]
          break;
 8005308:	e00a      	b.n	8005320 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	3301      	adds	r3, #1
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4413      	add	r3, r2
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	429a      	cmp	r2, r3
 800531e:	d3e4      	bcc.n	80052ea <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005320:	f000 f8c0 	bl	80054a4 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005324:	f000 f87a 	bl	800541c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005328:	4b03      	ldr	r3, [pc, #12]	@ (8005338 <HAL_FLASHEx_Erase+0xac>)
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]

  return status;
 800532e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	200005b8 	.word	0x200005b8

0800533c <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005344:	4b1f      	ldr	r3, [pc, #124]	@ (80053c4 <HAL_FLASHEx_Erase_IT+0x88>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_FLASHEx_Erase_IT+0x14>
 800534c:	2302      	movs	r3, #2
 800534e:	e034      	b.n	80053ba <HAL_FLASHEx_Erase_IT+0x7e>
 8005350:	4b1c      	ldr	r3, [pc, #112]	@ (80053c4 <HAL_FLASHEx_Erase_IT+0x88>)
 8005352:	2201      	movs	r2, #1
 8005354:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005356:	4b1b      	ldr	r3, [pc, #108]	@ (80053c4 <HAL_FLASHEx_Erase_IT+0x88>)
 8005358:	2200      	movs	r2, #0
 800535a:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a18      	ldr	r2, [pc, #96]	@ (80053c4 <HAL_FLASHEx_Erase_IT+0x88>)
 8005362:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005364:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005368:	f7ff feca 	bl	8005100 <FLASH_WaitForLastOperation>
 800536c:	4603      	mov	r3, r0
 800536e:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005376:	4b13      	ldr	r3, [pc, #76]	@ (80053c4 <HAL_FLASHEx_Erase_IT+0x88>)
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	e01c      	b.n	80053b8 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800537e:	4b12      	ldr	r3, [pc, #72]	@ (80053c8 <HAL_FLASHEx_Erase_IT+0x8c>)
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	4a11      	ldr	r2, [pc, #68]	@ (80053c8 <HAL_FLASHEx_Erase_IT+0x8c>)
 8005384:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8005388:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b04      	cmp	r3, #4
 8005390:	d105      	bne.n	800539e <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8005392:	4b0c      	ldr	r3, [pc, #48]	@ (80053c4 <HAL_FLASHEx_Erase_IT+0x88>)
 8005394:	2200      	movs	r2, #0
 8005396:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8005398:	f000 f818 	bl	80053cc <FLASH_MassErase>
 800539c:	e00c      	b.n	80053b8 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	4a08      	ldr	r2, [pc, #32]	@ (80053c4 <HAL_FLASHEx_Erase_IT+0x88>)
 80053a4:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	4a06      	ldr	r2, [pc, #24]	@ (80053c4 <HAL_FLASHEx_Erase_IT+0x88>)
 80053ac:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f81a 	bl	80053ec <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	200005b8 	.word	0x200005b8
 80053c8:	58004000 	.word	0x58004000

080053cc <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80053d0:	4b05      	ldr	r3, [pc, #20]	@ (80053e8 <FLASH_MassErase+0x1c>)
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	4a04      	ldr	r2, [pc, #16]	@ (80053e8 <FLASH_MassErase+0x1c>)
 80053d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053da:	f043 0304 	orr.w	r3, r3, #4
 80053de:	6153      	str	r3, [r2, #20]
#endif
}
 80053e0:	bf00      	nop
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr
 80053e8:	58004000 	.word	0x58004000

080053ec <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80053f4:	4b08      	ldr	r3, [pc, #32]	@ (8005418 <FLASH_PageErase+0x2c>)
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	4313      	orrs	r3, r2
 8005402:	4a05      	ldr	r2, [pc, #20]	@ (8005418 <FLASH_PageErase+0x2c>)
 8005404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005408:	f043 0302 	orr.w	r3, r3, #2
 800540c:	6153      	str	r3, [r2, #20]
#endif
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr
 8005418:	58004000 	.word	0x58004000

0800541c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005420:	4b1f      	ldr	r3, [pc, #124]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005428:	2b01      	cmp	r3, #1
 800542a:	d117      	bne.n	800545c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800542c:	4b1c      	ldr	r3, [pc, #112]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1b      	ldr	r2, [pc, #108]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 8005432:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005436:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005438:	4b19      	ldr	r3, [pc, #100]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a18      	ldr	r2, [pc, #96]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 800543e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	4b16      	ldr	r3, [pc, #88]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a15      	ldr	r2, [pc, #84]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 800544a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800544e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005450:	4b13      	ldr	r3, [pc, #76]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a12      	ldr	r2, [pc, #72]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 8005456:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800545a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800545c:	4b10      	ldr	r3, [pc, #64]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005464:	2b01      	cmp	r3, #1
 8005466:	d117      	bne.n	8005498 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005468:	4b0d      	ldr	r3, [pc, #52]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a0c      	ldr	r2, [pc, #48]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 800546e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005472:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005474:	4b0a      	ldr	r3, [pc, #40]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a09      	ldr	r2, [pc, #36]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 800547a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	4b07      	ldr	r3, [pc, #28]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a06      	ldr	r2, [pc, #24]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 8005486:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800548a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800548c:	4b04      	ldr	r3, [pc, #16]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a03      	ldr	r2, [pc, #12]	@ (80054a0 <FLASH_FlushCaches+0x84>)
 8005492:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005496:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005498:	bf00      	nop
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr
 80054a0:	58004000 	.word	0x58004000

080054a4 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80054a8:	4b05      	ldr	r3, [pc, #20]	@ (80054c0 <FLASH_AcknowledgePageErase+0x1c>)
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	4a04      	ldr	r2, [pc, #16]	@ (80054c0 <FLASH_AcknowledgePageErase+0x1c>)
 80054ae:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 80054b2:	f023 0302 	bic.w	r3, r3, #2
 80054b6:	6153      	str	r3, [r2, #20]
#endif
}
 80054b8:	bf00      	nop
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr
 80054c0:	58004000 	.word	0x58004000

080054c4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054d2:	e140      	b.n	8005756 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	2101      	movs	r1, #1
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	fa01 f303 	lsl.w	r3, r1, r3
 80054e0:	4013      	ands	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 8132 	beq.w	8005750 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f003 0303 	and.w	r3, r3, #3
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d005      	beq.n	8005504 <HAL_GPIO_Init+0x40>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f003 0303 	and.w	r3, r3, #3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d130      	bne.n	8005566 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	2203      	movs	r2, #3
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	43db      	mvns	r3, r3
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4013      	ands	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800553a:	2201      	movs	r2, #1
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	43db      	mvns	r3, r3
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4013      	ands	r3, r2
 8005548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	091b      	lsrs	r3, r3, #4
 8005550:	f003 0201 	and.w	r2, r3, #1
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b03      	cmp	r3, #3
 8005570:	d017      	beq.n	80055a2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	2203      	movs	r2, #3
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	43db      	mvns	r3, r3
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4013      	ands	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d123      	bne.n	80055f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	08da      	lsrs	r2, r3, #3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3208      	adds	r2, #8
 80055b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	220f      	movs	r2, #15
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	43db      	mvns	r3, r3
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4013      	ands	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	691a      	ldr	r2, [r3, #16]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	08da      	lsrs	r2, r3, #3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3208      	adds	r2, #8
 80055f0:	6939      	ldr	r1, [r7, #16]
 80055f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	2203      	movs	r2, #3
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	43db      	mvns	r3, r3
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4013      	ands	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 0203 	and.w	r2, r3, #3
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 808c 	beq.w	8005750 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005638:	4a4e      	ldr	r2, [pc, #312]	@ (8005774 <HAL_GPIO_Init+0x2b0>)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	089b      	lsrs	r3, r3, #2
 800563e:	3302      	adds	r3, #2
 8005640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005644:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	2207      	movs	r2, #7
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	43db      	mvns	r3, r3
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4013      	ands	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005662:	d00d      	beq.n	8005680 <HAL_GPIO_Init+0x1bc>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a44      	ldr	r2, [pc, #272]	@ (8005778 <HAL_GPIO_Init+0x2b4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d007      	beq.n	800567c <HAL_GPIO_Init+0x1b8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a43      	ldr	r2, [pc, #268]	@ (800577c <HAL_GPIO_Init+0x2b8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d101      	bne.n	8005678 <HAL_GPIO_Init+0x1b4>
 8005674:	2302      	movs	r3, #2
 8005676:	e004      	b.n	8005682 <HAL_GPIO_Init+0x1be>
 8005678:	2307      	movs	r3, #7
 800567a:	e002      	b.n	8005682 <HAL_GPIO_Init+0x1be>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <HAL_GPIO_Init+0x1be>
 8005680:	2300      	movs	r3, #0
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	f002 0203 	and.w	r2, r2, #3
 8005688:	0092      	lsls	r2, r2, #2
 800568a:	4093      	lsls	r3, r2
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005692:	4938      	ldr	r1, [pc, #224]	@ (8005774 <HAL_GPIO_Init+0x2b0>)
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	089b      	lsrs	r3, r3, #2
 8005698:	3302      	adds	r3, #2
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056a0:	4b37      	ldr	r3, [pc, #220]	@ (8005780 <HAL_GPIO_Init+0x2bc>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	43db      	mvns	r3, r3
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	4013      	ands	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80056c4:	4a2e      	ldr	r2, [pc, #184]	@ (8005780 <HAL_GPIO_Init+0x2bc>)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80056ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005780 <HAL_GPIO_Init+0x2bc>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	43db      	mvns	r3, r3
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4013      	ands	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056ee:	4a24      	ldr	r2, [pc, #144]	@ (8005780 <HAL_GPIO_Init+0x2bc>)
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80056f4:	4b22      	ldr	r3, [pc, #136]	@ (8005780 <HAL_GPIO_Init+0x2bc>)
 80056f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056fa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	43db      	mvns	r3, r3
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4013      	ands	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800571a:	4a19      	ldr	r2, [pc, #100]	@ (8005780 <HAL_GPIO_Init+0x2bc>)
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005722:	4b17      	ldr	r3, [pc, #92]	@ (8005780 <HAL_GPIO_Init+0x2bc>)
 8005724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005728:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	43db      	mvns	r3, r3
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4013      	ands	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005748:	4a0d      	ldr	r2, [pc, #52]	@ (8005780 <HAL_GPIO_Init+0x2bc>)
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	3301      	adds	r3, #1
 8005754:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	f47f aeb7 	bne.w	80054d4 <HAL_GPIO_Init+0x10>
  }
}
 8005766:	bf00      	nop
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40010000 	.word	0x40010000
 8005778:	48000400 	.word	0x48000400
 800577c:	48000800 	.word	0x48000800
 8005780:	58000800 	.word	0x58000800

08005784 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005792:	e0af      	b.n	80058f4 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005794:	2201      	movs	r2, #1
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	4013      	ands	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80a2 	beq.w	80058ee <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80057aa:	4a59      	ldr	r2, [pc, #356]	@ (8005910 <HAL_GPIO_DeInit+0x18c>)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	089b      	lsrs	r3, r3, #2
 80057b0:	3302      	adds	r3, #2
 80057b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057b6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	2207      	movs	r2, #7
 80057c2:	fa02 f303 	lsl.w	r3, r2, r3
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4013      	ands	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80057d2:	d00d      	beq.n	80057f0 <HAL_GPIO_DeInit+0x6c>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a4f      	ldr	r2, [pc, #316]	@ (8005914 <HAL_GPIO_DeInit+0x190>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d007      	beq.n	80057ec <HAL_GPIO_DeInit+0x68>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a4e      	ldr	r2, [pc, #312]	@ (8005918 <HAL_GPIO_DeInit+0x194>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d101      	bne.n	80057e8 <HAL_GPIO_DeInit+0x64>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e004      	b.n	80057f2 <HAL_GPIO_DeInit+0x6e>
 80057e8:	2307      	movs	r3, #7
 80057ea:	e002      	b.n	80057f2 <HAL_GPIO_DeInit+0x6e>
 80057ec:	2301      	movs	r3, #1
 80057ee:	e000      	b.n	80057f2 <HAL_GPIO_DeInit+0x6e>
 80057f0:	2300      	movs	r3, #0
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	f002 0203 	and.w	r2, r2, #3
 80057f8:	0092      	lsls	r2, r2, #2
 80057fa:	4093      	lsls	r3, r2
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d136      	bne.n	8005870 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005802:	4b46      	ldr	r3, [pc, #280]	@ (800591c <HAL_GPIO_DeInit+0x198>)
 8005804:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	43db      	mvns	r3, r3
 800580c:	4943      	ldr	r1, [pc, #268]	@ (800591c <HAL_GPIO_DeInit+0x198>)
 800580e:	4013      	ands	r3, r2
 8005810:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005814:	4b41      	ldr	r3, [pc, #260]	@ (800591c <HAL_GPIO_DeInit+0x198>)
 8005816:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	43db      	mvns	r3, r3
 800581e:	493f      	ldr	r1, [pc, #252]	@ (800591c <HAL_GPIO_DeInit+0x198>)
 8005820:	4013      	ands	r3, r2
 8005822:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005826:	4b3d      	ldr	r3, [pc, #244]	@ (800591c <HAL_GPIO_DeInit+0x198>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	43db      	mvns	r3, r3
 800582e:	493b      	ldr	r1, [pc, #236]	@ (800591c <HAL_GPIO_DeInit+0x198>)
 8005830:	4013      	ands	r3, r2
 8005832:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005834:	4b39      	ldr	r3, [pc, #228]	@ (800591c <HAL_GPIO_DeInit+0x198>)
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	43db      	mvns	r3, r3
 800583c:	4937      	ldr	r1, [pc, #220]	@ (800591c <HAL_GPIO_DeInit+0x198>)
 800583e:	4013      	ands	r3, r2
 8005840:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f003 0303 	and.w	r3, r3, #3
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	2207      	movs	r2, #7
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005852:	4a2f      	ldr	r2, [pc, #188]	@ (8005910 <HAL_GPIO_DeInit+0x18c>)
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	089b      	lsrs	r3, r3, #2
 8005858:	3302      	adds	r3, #2
 800585a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	43da      	mvns	r2, r3
 8005862:	482b      	ldr	r0, [pc, #172]	@ (8005910 <HAL_GPIO_DeInit+0x18c>)
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	089b      	lsrs	r3, r3, #2
 8005868:	400a      	ands	r2, r1
 800586a:	3302      	adds	r3, #2
 800586c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	2103      	movs	r1, #3
 800587a:	fa01 f303 	lsl.w	r3, r1, r3
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	08da      	lsrs	r2, r3, #3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3208      	adds	r2, #8
 800588c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	220f      	movs	r2, #15
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	43db      	mvns	r3, r3
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	08d2      	lsrs	r2, r2, #3
 80058a4:	4019      	ands	r1, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3208      	adds	r2, #8
 80058aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	2103      	movs	r1, #3
 80058b8:	fa01 f303 	lsl.w	r3, r1, r3
 80058bc:	43db      	mvns	r3, r3
 80058be:	401a      	ands	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	2101      	movs	r1, #1
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	43db      	mvns	r3, r3
 80058d2:	401a      	ands	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	2103      	movs	r1, #3
 80058e2:	fa01 f303 	lsl.w	r3, r1, r3
 80058e6:	43db      	mvns	r3, r3
 80058e8:	401a      	ands	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	60da      	str	r2, [r3, #12]
    }

    position++;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	3301      	adds	r3, #1
 80058f2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	fa22 f303 	lsr.w	r3, r2, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f47f af49 	bne.w	8005794 <HAL_GPIO_DeInit+0x10>
  }
}
 8005902:	bf00      	nop
 8005904:	bf00      	nop
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	bc80      	pop	{r7}
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40010000 	.word	0x40010000
 8005914:	48000400 	.word	0x48000400
 8005918:	48000800 	.word	0x48000800
 800591c:	58000800 	.word	0x58000800

08005920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	807b      	strh	r3, [r7, #2]
 800592c:	4613      	mov	r3, r2
 800592e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005930:	787b      	ldrb	r3, [r7, #1]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005936:	887a      	ldrh	r2, [r7, #2]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800593c:	e002      	b.n	8005944 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800593e:	887a      	ldrh	r2, [r7, #2]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr
	...

08005950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800595a:	4b08      	ldr	r3, [pc, #32]	@ (800597c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	4013      	ands	r3, r2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d006      	beq.n	8005974 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005966:	4a05      	ldr	r2, [pc, #20]	@ (800597c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005968:	88fb      	ldrh	r3, [r7, #6]
 800596a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	4618      	mov	r0, r3
 8005970:	f004 ff66 	bl	800a840 <HAL_GPIO_EXTI_Callback>
  }
}
 8005974:	bf00      	nop
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	58000800 	.word	0x58000800

08005980 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005984:	4b04      	ldr	r3, [pc, #16]	@ (8005998 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a03      	ldr	r2, [pc, #12]	@ (8005998 <HAL_PWR_EnableBkUpAccess+0x18>)
 800598a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800598e:	6013      	str	r3, [r2, #0]
}
 8005990:	bf00      	nop
 8005992:	46bd      	mov	sp, r7
 8005994:	bc80      	pop	{r7}
 8005996:	4770      	bx	lr
 8005998:	58000400 	.word	0x58000400

0800599c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10c      	bne.n	80059c8 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80059ae:	4b13      	ldr	r3, [pc, #76]	@ (80059fc <HAL_PWR_EnterSLEEPMode+0x60>)
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059ba:	d10d      	bne.n	80059d8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80059bc:	f000 f83c 	bl	8005a38 <HAL_PWREx_DisableLowPowerRunMode>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d008      	beq.n	80059d8 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80059c6:	e015      	b.n	80059f4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80059c8:	4b0c      	ldr	r3, [pc, #48]	@ (80059fc <HAL_PWR_EnterSLEEPMode+0x60>)
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80059d4:	f000 f822 	bl	8005a1c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80059d8:	4b09      	ldr	r3, [pc, #36]	@ (8005a00 <HAL_PWR_EnterSLEEPMode+0x64>)
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	4a08      	ldr	r2, [pc, #32]	@ (8005a00 <HAL_PWR_EnterSLEEPMode+0x64>)
 80059de:	f023 0304 	bic.w	r3, r3, #4
 80059e2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80059ea:	bf30      	wfi
 80059ec:	e002      	b.n	80059f4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80059ee:	bf40      	sev
    __WFE();
 80059f0:	bf20      	wfe
    __WFE();
 80059f2:	bf20      	wfe
  }
}
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	58000400 	.word	0x58000400
 8005a00:	e000ed00 	.word	0xe000ed00

08005a04 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005a08:	4b03      	ldr	r3, [pc, #12]	@ (8005a18 <HAL_PWREx_GetVoltageRange+0x14>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	4770      	bx	lr
 8005a18:	58000400 	.word	0x58000400

08005a1c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005a20:	4b04      	ldr	r3, [pc, #16]	@ (8005a34 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a03      	ldr	r2, [pc, #12]	@ (8005a34 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005a26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a2a:	6013      	str	r3, [r2, #0]
}
 8005a2c:	bf00      	nop
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr
 8005a34:	58000400 	.word	0x58000400

08005a38 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005a3e:	4b16      	ldr	r3, [pc, #88]	@ (8005a98 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a15      	ldr	r2, [pc, #84]	@ (8005a98 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a48:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005a4a:	4b14      	ldr	r3, [pc, #80]	@ (8005a9c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2232      	movs	r2, #50	@ 0x32
 8005a50:	fb02 f303 	mul.w	r3, r2, r3
 8005a54:	4a12      	ldr	r2, [pc, #72]	@ (8005aa0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005a56:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5a:	0c9b      	lsrs	r3, r3, #18
 8005a5c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005a5e:	e002      	b.n	8005a66 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005a66:	4b0c      	ldr	r3, [pc, #48]	@ (8005a98 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a72:	d102      	bne.n	8005a7a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f2      	bne.n	8005a60 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005a7a:	4b07      	ldr	r3, [pc, #28]	@ (8005a98 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a86:	d101      	bne.n	8005a8c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e000      	b.n	8005a8e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr
 8005a98:	58000400 	.word	0x58000400
 8005a9c:	20000000 	.word	0x20000000
 8005aa0:	431bde83 	.word	0x431bde83

08005aa4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005aae:	4b10      	ldr	r3, [pc, #64]	@ (8005af0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f023 0307 	bic.w	r3, r3, #7
 8005ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8005af0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005ab8:	f043 0302 	orr.w	r3, r3, #2
 8005abc:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005abe:	4b0d      	ldr	r3, [pc, #52]	@ (8005af4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8005af4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005ac4:	f043 0304 	orr.w	r3, r3, #4
 8005ac8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005ad0:	bf30      	wfi
 8005ad2:	e002      	b.n	8005ada <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005ad4:	bf40      	sev
    __WFE();
 8005ad6:	bf20      	wfe
    __WFE();
 8005ad8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005ada:	4b06      	ldr	r3, [pc, #24]	@ (8005af4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	4a05      	ldr	r2, [pc, #20]	@ (8005af4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005ae0:	f023 0304 	bic.w	r3, r3, #4
 8005ae4:	6113      	str	r3, [r2, #16]
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr
 8005af0:	58000400 	.word	0x58000400
 8005af4:	e000ed00 	.word	0xe000ed00

08005af8 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005afc:	4b06      	ldr	r3, [pc, #24]	@ (8005b18 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b08:	d101      	bne.n	8005b0e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e000      	b.n	8005b10 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr
 8005b18:	58000400 	.word	0x58000400

08005b1c <LL_RCC_HSE_EnableTcxo>:
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b2e:	6013      	str	r3, [r2, #0]
}
 8005b30:	bf00      	nop
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr

08005b38 <LL_RCC_HSE_DisableTcxo>:
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b4a:	6013      	str	r3, [r2, #0]
}
 8005b4c:	bf00      	nop
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr

08005b54 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b66:	d101      	bne.n	8005b6c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e000      	b.n	8005b6e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr

08005b76 <LL_RCC_HSE_Enable>:
{
 8005b76:	b480      	push	{r7}
 8005b78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b88:	6013      	str	r3, [r2, #0]
}
 8005b8a:	bf00      	nop
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bc80      	pop	{r7}
 8005b90:	4770      	bx	lr

08005b92 <LL_RCC_HSE_Disable>:
{
 8005b92:	b480      	push	{r7}
 8005b94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ba0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ba4:	6013      	str	r3, [r2, #0]
}
 8005ba6:	bf00      	nop
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr

08005bae <LL_RCC_HSE_IsReady>:
{
 8005bae:	b480      	push	{r7}
 8005bb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bc0:	d101      	bne.n	8005bc6 <LL_RCC_HSE_IsReady+0x18>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <LL_RCC_HSE_IsReady+0x1a>
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr

08005bd0 <LL_RCC_HSI_Enable>:
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005be2:	6013      	str	r3, [r2, #0]
}
 8005be4:	bf00      	nop
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr

08005bec <LL_RCC_HSI_Disable>:
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bfe:	6013      	str	r3, [r2, #0]
}
 8005c00:	bf00      	nop
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr

08005c08 <LL_RCC_HSI_IsReady>:
{
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c1a:	d101      	bne.n	8005c20 <LL_RCC_HSI_IsReady+0x18>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e000      	b.n	8005c22 <LL_RCC_HSI_IsReady+0x1a>
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <LL_RCC_HSI_SetCalibTrimming>:
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	061b      	lsls	r3, r3, #24
 8005c40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c44:	4313      	orrs	r3, r2
 8005c46:	604b      	str	r3, [r1, #4]
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bc80      	pop	{r7}
 8005c50:	4770      	bx	lr

08005c52 <LL_RCC_LSE_IsReady>:
{
 8005c52:	b480      	push	{r7}
 8005c54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d101      	bne.n	8005c6a <LL_RCC_LSE_IsReady+0x18>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <LL_RCC_LSE_IsReady+0x1a>
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <LL_RCC_LSI_Enable>:
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c84:	f043 0301 	orr.w	r3, r3, #1
 8005c88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005c8c:	bf00      	nop
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr

08005c94 <LL_RCC_LSI_Disable>:
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ca0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
 8005ca8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005cac:	bf00      	nop
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bc80      	pop	{r7}
 8005cb2:	4770      	bx	lr

08005cb4 <LL_RCC_LSI_IsReady>:
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d101      	bne.n	8005ccc <LL_RCC_LSI_IsReady+0x18>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <LL_RCC_LSI_IsReady+0x1a>
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bc80      	pop	{r7}
 8005cd4:	4770      	bx	lr

08005cd6 <LL_RCC_MSI_Enable>:
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ce4:	f043 0301 	orr.w	r3, r3, #1
 8005ce8:	6013      	str	r3, [r2, #0]
}
 8005cea:	bf00      	nop
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bc80      	pop	{r7}
 8005cf0:	4770      	bx	lr

08005cf2 <LL_RCC_MSI_Disable>:
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d00:	f023 0301 	bic.w	r3, r3, #1
 8005d04:	6013      	str	r3, [r2, #0]
}
 8005d06:	bf00      	nop
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr

08005d0e <LL_RCC_MSI_IsReady>:
{
 8005d0e:	b480      	push	{r7}
 8005d10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d101      	bne.n	8005d24 <LL_RCC_MSI_IsReady+0x16>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <LL_RCC_MSI_IsReady+0x18>
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr

08005d2e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005d2e:	b480      	push	{r7}
 8005d30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d101      	bne.n	8005d44 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr

08005d4e <LL_RCC_MSI_GetRange>:
{
 8005d4e:	b480      	push	{r7}
 8005d50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bc80      	pop	{r7}
 8005d62:	4770      	bx	lr

08005d64 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005d64:	b480      	push	{r7}
 8005d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d70:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr

08005d7c <LL_RCC_MSI_SetCalibTrimming>:
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d96:	4313      	orrs	r3, r2
 8005d98:	604b      	str	r3, [r1, #4]
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bc80      	pop	{r7}
 8005da2:	4770      	bx	lr

08005da4 <LL_RCC_SetSysClkSource>:
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f023 0203 	bic.w	r2, r3, #3
 8005db6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	608b      	str	r3, [r1, #8]
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr

08005dca <LL_RCC_GetSysClkSource>:
{
 8005dca:	b480      	push	{r7}
 8005dcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 030c 	and.w	r3, r3, #12
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <LL_RCC_SetAHBPrescaler>:
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005df2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	608b      	str	r3, [r1, #8]
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bc80      	pop	{r7}
 8005e04:	4770      	bx	lr

08005e06 <LL_RCC_SetAHB3Prescaler>:
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e12:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005e16:	f023 020f 	bic.w	r2, r3, #15
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	091b      	lsrs	r3, r3, #4
 8005e1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bc80      	pop	{r7}
 8005e30:	4770      	bx	lr

08005e32 <LL_RCC_SetAPB1Prescaler>:
{
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	608b      	str	r3, [r1, #8]
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bc80      	pop	{r7}
 8005e56:	4770      	bx	lr

08005e58 <LL_RCC_SetAPB2Prescaler>:
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	608b      	str	r3, [r1, #8]
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bc80      	pop	{r7}
 8005e7c:	4770      	bx	lr

08005e7e <LL_RCC_GetAHBPrescaler>:
{
 8005e7e:	b480      	push	{r7}
 8005e80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bc80      	pop	{r7}
 8005e92:	4770      	bx	lr

08005e94 <LL_RCC_GetAHB3Prescaler>:
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e9c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr

08005eae <LL_RCC_GetAPB1Prescaler>:
{
 8005eae:	b480      	push	{r7}
 8005eb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr

08005ec4 <LL_RCC_GetAPB2Prescaler>:
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bc80      	pop	{r7}
 8005ed8:	4770      	bx	lr

08005eda <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005eda:	b480      	push	{r7}
 8005edc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ee8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005eec:	6013      	str	r3, [r2, #0]
}
 8005eee:	bf00      	nop
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr

08005ef6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f08:	6013      	str	r3, [r2, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr

08005f12 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005f12:	b480      	push	{r7}
 8005f14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f24:	d101      	bne.n	8005f2a <LL_RCC_PLL_IsReady+0x18>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <LL_RCC_PLL_IsReady+0x1a>
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr

08005f34 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	0a1b      	lsrs	r3, r3, #8
 8005f40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr

08005f4c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr

08005f62 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005f62:	b480      	push	{r7}
 8005f64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bc80      	pop	{r7}
 8005f76:	4770      	bx	lr

08005f78 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f003 0303 	and.w	r3, r3, #3
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bc80      	pop	{r7}
 8005f8c:	4770      	bx	lr

08005f8e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fa0:	d101      	bne.n	8005fa6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr

08005fb0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fb8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc4:	d101      	bne.n	8005fca <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr

08005fd4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fe6:	d101      	bne.n	8005fec <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e000      	b.n	8005fee <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bc80      	pop	{r7}
 8005ff4:	4770      	bx	lr

08005ff6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006004:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006008:	d101      	bne.n	800600e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	bc80      	pop	{r7}
 8006016:	4770      	bx	lr

08006018 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e38b      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800602a:	f7ff fece 	bl	8005dca <LL_RCC_GetSysClkSource>
 800602e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006030:	f7ff ffa2 	bl	8005f78 <LL_RCC_PLL_GetMainSource>
 8006034:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 80c9 	beq.w	80061d6 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <HAL_RCC_OscConfig+0x3e>
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	2b0c      	cmp	r3, #12
 800604e:	d17b      	bne.n	8006148 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d178      	bne.n	8006148 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006056:	f7ff fe5a 	bl	8005d0e <LL_RCC_MSI_IsReady>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <HAL_RCC_OscConfig+0x54>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e36a      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <HAL_RCC_OscConfig+0x72>
 800607e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006088:	e006      	b.n	8006098 <HAL_RCC_OscConfig+0x80>
 800608a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800608e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006092:	091b      	lsrs	r3, r3, #4
 8006094:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006098:	4293      	cmp	r3, r2
 800609a:	d222      	bcs.n	80060e2 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fd51 	bl	8006b48 <RCC_SetFlashLatencyFromMSIRange>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e348      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060ba:	f043 0308 	orr.w	r3, r3, #8
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060d2:	4313      	orrs	r3, r2
 80060d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fe4e 	bl	8005d7c <LL_RCC_MSI_SetCalibTrimming>
 80060e0:	e021      	b.n	8006126 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060ec:	f043 0308 	orr.w	r3, r3, #8
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006100:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006104:	4313      	orrs	r3, r2
 8006106:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff fe35 	bl	8005d7c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fd16 	bl	8006b48 <RCC_SetFlashLatencyFromMSIRange>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e30d      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006126:	f000 fcd7 	bl	8006ad8 <HAL_RCC_GetHCLKFreq>
 800612a:	4603      	mov	r3, r0
 800612c:	4aa1      	ldr	r2, [pc, #644]	@ (80063b4 <HAL_RCC_OscConfig+0x39c>)
 800612e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006130:	4ba1      	ldr	r3, [pc, #644]	@ (80063b8 <HAL_RCC_OscConfig+0x3a0>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4618      	mov	r0, r3
 8006136:	f7fc f9ab 	bl	8002490 <HAL_InitTick>
 800613a:	4603      	mov	r3, r0
 800613c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800613e:	7cfb      	ldrb	r3, [r7, #19]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d047      	beq.n	80061d4 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8006144:	7cfb      	ldrb	r3, [r7, #19]
 8006146:	e2fc      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d02c      	beq.n	80061aa <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006150:	f7ff fdc1 	bl	8005cd6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006154:	f7fc f9a6 	bl	80024a4 <HAL_GetTick>
 8006158:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800615c:	f7fc f9a2 	bl	80024a4 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e2e9      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800616e:	f7ff fdce 	bl	8005d0e <LL_RCC_MSI_IsReady>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0f1      	beq.n	800615c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006182:	f043 0308 	orr.w	r3, r3, #8
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006196:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800619a:	4313      	orrs	r3, r2
 800619c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff fdea 	bl	8005d7c <LL_RCC_MSI_SetCalibTrimming>
 80061a8:	e015      	b.n	80061d6 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061aa:	f7ff fda2 	bl	8005cf2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061ae:	f7fc f979 	bl	80024a4 <HAL_GetTick>
 80061b2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80061b4:	e008      	b.n	80061c8 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061b6:	f7fc f975 	bl	80024a4 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e2bc      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80061c8:	f7ff fda1 	bl	8005d0e <LL_RCC_MSI_IsReady>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f1      	bne.n	80061b6 <HAL_RCC_OscConfig+0x19e>
 80061d2:	e000      	b.n	80061d6 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061d4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d05f      	beq.n	80062a2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d005      	beq.n	80061f4 <HAL_RCC_OscConfig+0x1dc>
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	2b0c      	cmp	r3, #12
 80061ec:	d10d      	bne.n	800620a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d10a      	bne.n	800620a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061f4:	f7ff fcdb 	bl	8005bae <LL_RCC_HSE_IsReady>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d050      	beq.n	80062a0 <HAL_RCC_OscConfig+0x288>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d14c      	bne.n	80062a0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e29b      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800620a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800621c:	4313      	orrs	r3, r2
 800621e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006228:	d102      	bne.n	8006230 <HAL_RCC_OscConfig+0x218>
 800622a:	f7ff fca4 	bl	8005b76 <LL_RCC_HSE_Enable>
 800622e:	e00d      	b.n	800624c <HAL_RCC_OscConfig+0x234>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8006238:	d104      	bne.n	8006244 <HAL_RCC_OscConfig+0x22c>
 800623a:	f7ff fc6f 	bl	8005b1c <LL_RCC_HSE_EnableTcxo>
 800623e:	f7ff fc9a 	bl	8005b76 <LL_RCC_HSE_Enable>
 8006242:	e003      	b.n	800624c <HAL_RCC_OscConfig+0x234>
 8006244:	f7ff fca5 	bl	8005b92 <LL_RCC_HSE_Disable>
 8006248:	f7ff fc76 	bl	8005b38 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d012      	beq.n	800627a <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006254:	f7fc f926 	bl	80024a4 <HAL_GetTick>
 8006258:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800625c:	f7fc f922 	bl	80024a4 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b64      	cmp	r3, #100	@ 0x64
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e269      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800626e:	f7ff fc9e 	bl	8005bae <LL_RCC_HSE_IsReady>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f1      	beq.n	800625c <HAL_RCC_OscConfig+0x244>
 8006278:	e013      	b.n	80062a2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627a:	f7fc f913 	bl	80024a4 <HAL_GetTick>
 800627e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006280:	e008      	b.n	8006294 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006282:	f7fc f90f 	bl	80024a4 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b64      	cmp	r3, #100	@ 0x64
 800628e:	d901      	bls.n	8006294 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e256      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006294:	f7ff fc8b 	bl	8005bae <LL_RCC_HSE_IsReady>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1f1      	bne.n	8006282 <HAL_RCC_OscConfig+0x26a>
 800629e:	e000      	b.n	80062a2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d04b      	beq.n	8006346 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d005      	beq.n	80062c0 <HAL_RCC_OscConfig+0x2a8>
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	2b0c      	cmp	r3, #12
 80062b8:	d113      	bne.n	80062e2 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d110      	bne.n	80062e2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062c0:	f7ff fca2 	bl	8005c08 <LL_RCC_HSI_IsReady>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <HAL_RCC_OscConfig+0x2be>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e235      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff fca5 	bl	8005c2a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062e0:	e031      	b.n	8006346 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d019      	beq.n	800631e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062ea:	f7ff fc71 	bl	8005bd0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ee:	f7fc f8d9 	bl	80024a4 <HAL_GetTick>
 80062f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062f6:	f7fc f8d5 	bl	80024a4 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e21c      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006308:	f7ff fc7e 	bl	8005c08 <LL_RCC_HSI_IsReady>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0f1      	beq.n	80062f6 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	4618      	mov	r0, r3
 8006318:	f7ff fc87 	bl	8005c2a <LL_RCC_HSI_SetCalibTrimming>
 800631c:	e013      	b.n	8006346 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800631e:	f7ff fc65 	bl	8005bec <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006322:	f7fc f8bf 	bl	80024a4 <HAL_GetTick>
 8006326:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800632a:	f7fc f8bb 	bl	80024a4 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e202      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 800633c:	f7ff fc64 	bl	8005c08 <LL_RCC_HSI_IsReady>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f1      	bne.n	800632a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d06f      	beq.n	8006432 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d057      	beq.n	800640a <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800635a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800635e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006362:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	69da      	ldr	r2, [r3, #28]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f003 0310 	and.w	r3, r3, #16
 800636e:	429a      	cmp	r2, r3
 8006370:	d036      	beq.n	80063e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d006      	beq.n	800638a <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e1db      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d018      	beq.n	80063c6 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8006394:	f7ff fc7e 	bl	8005c94 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006398:	f7fc f884 	bl	80024a4 <HAL_GetTick>
 800639c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800639e:	e00d      	b.n	80063bc <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063a0:	f7fc f880 	bl	80024a4 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b11      	cmp	r3, #17
 80063ac:	d906      	bls.n	80063bc <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e1c7      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
 80063b2:	bf00      	nop
 80063b4:	20000000 	.word	0x20000000
 80063b8:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80063bc:	f7ff fc7a 	bl	8005cb4 <LL_RCC_LSI_IsReady>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1ec      	bne.n	80063a0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80063c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063ce:	f023 0210 	bic.w	r2, r3, #16
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063e0:	f7ff fc48 	bl	8005c74 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e4:	f7fc f85e 	bl	80024a4 <HAL_GetTick>
 80063e8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ec:	f7fc f85a 	bl	80024a4 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b11      	cmp	r3, #17
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e1a1      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80063fe:	f7ff fc59 	bl	8005cb4 <LL_RCC_LSI_IsReady>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0f1      	beq.n	80063ec <HAL_RCC_OscConfig+0x3d4>
 8006408:	e013      	b.n	8006432 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800640a:	f7ff fc43 	bl	8005c94 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800640e:	f7fc f849 	bl	80024a4 <HAL_GetTick>
 8006412:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006414:	e008      	b.n	8006428 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006416:	f7fc f845 	bl	80024a4 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b11      	cmp	r3, #17
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e18c      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006428:	f7ff fc44 	bl	8005cb4 <LL_RCC_LSI_IsReady>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f1      	bne.n	8006416 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 80d8 	beq.w	80065f0 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006440:	f7ff fb5a 	bl	8005af8 <LL_PWR_IsEnabledBkUpAccess>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d113      	bne.n	8006472 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800644a:	f7ff fa99 	bl	8005980 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800644e:	f7fc f829 	bl	80024a4 <HAL_GetTick>
 8006452:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006454:	e008      	b.n	8006468 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006456:	f7fc f825 	bl	80024a4 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e16c      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006468:	f7ff fb46 	bl	8005af8 <LL_PWR_IsEnabledBkUpAccess>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0f1      	beq.n	8006456 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d07b      	beq.n	8006572 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	2b85      	cmp	r3, #133	@ 0x85
 8006480:	d003      	beq.n	800648a <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	2b05      	cmp	r3, #5
 8006488:	d109      	bne.n	800649e <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800648a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006492:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006496:	f043 0304 	orr.w	r3, r3, #4
 800649a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800649e:	f7fc f801 	bl	80024a4 <HAL_GetTick>
 80064a2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80064a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064b0:	f043 0301 	orr.w	r3, r3, #1
 80064b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80064b8:	e00a      	b.n	80064d0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ba:	f7fb fff3 	bl	80024a4 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e138      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80064d0:	f7ff fbbf 	bl	8005c52 <LL_RCC_LSE_IsReady>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0ef      	beq.n	80064ba <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	2b81      	cmp	r3, #129	@ 0x81
 80064e0:	d003      	beq.n	80064ea <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	2b85      	cmp	r3, #133	@ 0x85
 80064e8:	d121      	bne.n	800652e <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ea:	f7fb ffdb 	bl	80024a4 <HAL_GetTick>
 80064ee:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80064f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006500:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006504:	e00a      	b.n	800651c <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006506:	f7fb ffcd 	bl	80024a4 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006514:	4293      	cmp	r3, r2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e112      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800651c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0ec      	beq.n	8006506 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800652c:	e060      	b.n	80065f0 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652e:	f7fb ffb9 	bl	80024a4 <HAL_GetTick>
 8006532:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800653c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006540:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006548:	e00a      	b.n	8006560 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800654a:	f7fb ffab 	bl	80024a4 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006558:	4293      	cmp	r3, r2
 800655a:	d901      	bls.n	8006560 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e0f0      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1ec      	bne.n	800654a <HAL_RCC_OscConfig+0x532>
 8006570:	e03e      	b.n	80065f0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006572:	f7fb ff97 	bl	80024a4 <HAL_GetTick>
 8006576:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800657c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006580:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006584:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006588:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800658c:	e00a      	b.n	80065a4 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800658e:	f7fb ff89 	bl	80024a4 <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800659c:	4293      	cmp	r3, r2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e0ce      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80065a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1ec      	bne.n	800658e <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b4:	f7fb ff76 	bl	80024a4 <HAL_GetTick>
 80065b8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80065ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065c6:	f023 0301 	bic.w	r3, r3, #1
 80065ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80065ce:	e00a      	b.n	80065e6 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065d0:	f7fb ff68 	bl	80024a4 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065de:	4293      	cmp	r3, r2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e0ad      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80065e6:	f7ff fb34 	bl	8005c52 <LL_RCC_LSE_IsReady>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1ef      	bne.n	80065d0 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 80a3 	beq.w	8006740 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	2b0c      	cmp	r3, #12
 80065fe:	d076      	beq.n	80066ee <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006604:	2b02      	cmp	r3, #2
 8006606:	d14b      	bne.n	80066a0 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006608:	f7ff fc75 	bl	8005ef6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660c:	f7fb ff4a 	bl	80024a4 <HAL_GetTick>
 8006610:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006614:	f7fb ff46 	bl	80024a4 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b0a      	cmp	r3, #10
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e08d      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006626:	f7ff fc74 	bl	8005f12 <LL_RCC_PLL_IsReady>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1f1      	bne.n	8006614 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	4b45      	ldr	r3, [pc, #276]	@ (800674c <HAL_RCC_OscConfig+0x734>)
 8006638:	4013      	ands	r3, r2
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006642:	4311      	orrs	r1, r2
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006648:	0212      	lsls	r2, r2, #8
 800664a:	4311      	orrs	r1, r2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006650:	4311      	orrs	r1, r2
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006656:	4311      	orrs	r1, r2
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800665c:	430a      	orrs	r2, r1
 800665e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006662:	4313      	orrs	r3, r2
 8006664:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006666:	f7ff fc38 	bl	8005eda <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800666a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006678:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667a:	f7fb ff13 	bl	80024a4 <HAL_GetTick>
 800667e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006680:	e008      	b.n	8006694 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006682:	f7fb ff0f 	bl	80024a4 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b0a      	cmp	r3, #10
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e056      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006694:	f7ff fc3d 	bl	8005f12 <LL_RCC_PLL_IsReady>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0f1      	beq.n	8006682 <HAL_RCC_OscConfig+0x66a>
 800669e:	e04f      	b.n	8006740 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066a0:	f7ff fc29 	bl	8005ef6 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80066a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066ae:	f023 0303 	bic.w	r3, r3, #3
 80066b2:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80066b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066be:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 80066c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066c6:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c8:	f7fb feec 	bl	80024a4 <HAL_GetTick>
 80066cc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d0:	f7fb fee8 	bl	80024a4 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b0a      	cmp	r3, #10
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e02f      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80066e2:	f7ff fc16 	bl	8005f12 <LL_RCC_PLL_IsReady>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f1      	bne.n	80066d0 <HAL_RCC_OscConfig+0x6b8>
 80066ec:	e028      	b.n	8006740 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d101      	bne.n	80066fa <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e023      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	f003 0203 	and.w	r2, r3, #3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800670c:	429a      	cmp	r2, r3
 800670e:	d115      	bne.n	800673c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800671a:	429a      	cmp	r2, r3
 800671c:	d10e      	bne.n	800673c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	429a      	cmp	r2, r3
 800672c:	d106      	bne.n	800673c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006738:	429a      	cmp	r2, r3
 800673a:	d001      	beq.n	8006740 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3720      	adds	r7, #32
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	11c1808c 	.word	0x11c1808c

08006750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e10f      	b.n	8006984 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006764:	4b89      	ldr	r3, [pc, #548]	@ (800698c <HAL_RCC_ClockConfig+0x23c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d91b      	bls.n	80067aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006772:	4b86      	ldr	r3, [pc, #536]	@ (800698c <HAL_RCC_ClockConfig+0x23c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f023 0207 	bic.w	r2, r3, #7
 800677a:	4984      	ldr	r1, [pc, #528]	@ (800698c <HAL_RCC_ClockConfig+0x23c>)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	4313      	orrs	r3, r2
 8006780:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006782:	f7fb fe8f 	bl	80024a4 <HAL_GetTick>
 8006786:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006788:	e008      	b.n	800679c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800678a:	f7fb fe8b 	bl	80024a4 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d901      	bls.n	800679c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e0f3      	b.n	8006984 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800679c:	4b7b      	ldr	r3, [pc, #492]	@ (800698c <HAL_RCC_ClockConfig+0x23c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d1ef      	bne.n	800678a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d016      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff fb10 	bl	8005de0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80067c0:	f7fb fe70 	bl	80024a4 <HAL_GetTick>
 80067c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80067c6:	e008      	b.n	80067da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80067c8:	f7fb fe6c 	bl	80024a4 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e0d4      	b.n	8006984 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80067da:	f7ff fbd8 	bl	8005f8e <LL_RCC_IsActiveFlag_HPRE>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0f1      	beq.n	80067c8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d016      	beq.n	800681e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff fb06 	bl	8005e06 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80067fa:	f7fb fe53 	bl	80024a4 <HAL_GetTick>
 80067fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006800:	e008      	b.n	8006814 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006802:	f7fb fe4f 	bl	80024a4 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e0b7      	b.n	8006984 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006814:	f7ff fbcc 	bl	8005fb0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0f1      	beq.n	8006802 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b00      	cmp	r3, #0
 8006828:	d016      	beq.n	8006858 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff faff 	bl	8005e32 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006834:	f7fb fe36 	bl	80024a4 <HAL_GetTick>
 8006838:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800683a:	e008      	b.n	800684e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800683c:	f7fb fe32 	bl	80024a4 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d901      	bls.n	800684e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e09a      	b.n	8006984 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800684e:	f7ff fbc1 	bl	8005fd4 <LL_RCC_IsActiveFlag_PPRE1>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0f1      	beq.n	800683c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0308 	and.w	r3, r3, #8
 8006860:	2b00      	cmp	r3, #0
 8006862:	d017      	beq.n	8006894 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff faf4 	bl	8005e58 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006870:	f7fb fe18 	bl	80024a4 <HAL_GetTick>
 8006874:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006876:	e008      	b.n	800688a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006878:	f7fb fe14 	bl	80024a4 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e07c      	b.n	8006984 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800688a:	f7ff fbb4 	bl	8005ff6 <LL_RCC_IsActiveFlag_PPRE2>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0f1      	beq.n	8006878 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d043      	beq.n	8006928 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d106      	bne.n	80068b6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80068a8:	f7ff f981 	bl	8005bae <LL_RCC_HSE_IsReady>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d11e      	bne.n	80068f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e066      	b.n	8006984 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d106      	bne.n	80068cc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80068be:	f7ff fb28 	bl	8005f12 <LL_RCC_PLL_IsReady>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d113      	bne.n	80068f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e05b      	b.n	8006984 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d106      	bne.n	80068e2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80068d4:	f7ff fa1b 	bl	8005d0e <LL_RCC_MSI_IsReady>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d108      	bne.n	80068f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e050      	b.n	8006984 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80068e2:	f7ff f991 	bl	8005c08 <LL_RCC_HSI_IsReady>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e049      	b.n	8006984 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff fa55 	bl	8005da4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068fa:	f7fb fdd3 	bl	80024a4 <HAL_GetTick>
 80068fe:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006900:	e00a      	b.n	8006918 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006902:	f7fb fdcf 	bl	80024a4 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006910:	4293      	cmp	r3, r2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e035      	b.n	8006984 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006918:	f7ff fa57 	bl	8005dca <LL_RCC_GetSysClkSource>
 800691c:	4602      	mov	r2, r0
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	429a      	cmp	r2, r3
 8006926:	d1ec      	bne.n	8006902 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006928:	4b18      	ldr	r3, [pc, #96]	@ (800698c <HAL_RCC_ClockConfig+0x23c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0307 	and.w	r3, r3, #7
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d21b      	bcs.n	800696e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006936:	4b15      	ldr	r3, [pc, #84]	@ (800698c <HAL_RCC_ClockConfig+0x23c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f023 0207 	bic.w	r2, r3, #7
 800693e:	4913      	ldr	r1, [pc, #76]	@ (800698c <HAL_RCC_ClockConfig+0x23c>)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	4313      	orrs	r3, r2
 8006944:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006946:	f7fb fdad 	bl	80024a4 <HAL_GetTick>
 800694a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800694c:	e008      	b.n	8006960 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800694e:	f7fb fda9 	bl	80024a4 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e011      	b.n	8006984 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006960:	4b0a      	ldr	r3, [pc, #40]	@ (800698c <HAL_RCC_ClockConfig+0x23c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0307 	and.w	r3, r3, #7
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d1ef      	bne.n	800694e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800696e:	f000 f8b3 	bl	8006ad8 <HAL_RCC_GetHCLKFreq>
 8006972:	4603      	mov	r3, r0
 8006974:	4a06      	ldr	r2, [pc, #24]	@ (8006990 <HAL_RCC_ClockConfig+0x240>)
 8006976:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006978:	4b06      	ldr	r3, [pc, #24]	@ (8006994 <HAL_RCC_ClockConfig+0x244>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f7fb fd87 	bl	8002490 <HAL_InitTick>
 8006982:	4603      	mov	r3, r0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	58004000 	.word	0x58004000
 8006990:	20000000 	.word	0x20000000
 8006994:	20000004 	.word	0x20000004

08006998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006998:	b590      	push	{r4, r7, lr}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069a6:	f7ff fa10 	bl	8005dca <LL_RCC_GetSysClkSource>
 80069aa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069ac:	f7ff fae4 	bl	8005f78 <LL_RCC_PLL_GetMainSource>
 80069b0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d005      	beq.n	80069c4 <HAL_RCC_GetSysClockFreq+0x2c>
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2b0c      	cmp	r3, #12
 80069bc:	d139      	bne.n	8006a32 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d136      	bne.n	8006a32 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80069c4:	f7ff f9b3 	bl	8005d2e <LL_RCC_MSI_IsEnabledRangeSelect>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d115      	bne.n	80069fa <HAL_RCC_GetSysClockFreq+0x62>
 80069ce:	f7ff f9ae 	bl	8005d2e <LL_RCC_MSI_IsEnabledRangeSelect>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d106      	bne.n	80069e6 <HAL_RCC_GetSysClockFreq+0x4e>
 80069d8:	f7ff f9b9 	bl	8005d4e <LL_RCC_MSI_GetRange>
 80069dc:	4603      	mov	r3, r0
 80069de:	0a1b      	lsrs	r3, r3, #8
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	e005      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x5a>
 80069e6:	f7ff f9bd 	bl	8005d64 <LL_RCC_MSI_GetRangeAfterStandby>
 80069ea:	4603      	mov	r3, r0
 80069ec:	0a1b      	lsrs	r3, r3, #8
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	4a36      	ldr	r2, [pc, #216]	@ (8006acc <HAL_RCC_GetSysClockFreq+0x134>)
 80069f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069f8:	e014      	b.n	8006a24 <HAL_RCC_GetSysClockFreq+0x8c>
 80069fa:	f7ff f998 	bl	8005d2e <LL_RCC_MSI_IsEnabledRangeSelect>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d106      	bne.n	8006a12 <HAL_RCC_GetSysClockFreq+0x7a>
 8006a04:	f7ff f9a3 	bl	8005d4e <LL_RCC_MSI_GetRange>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	091b      	lsrs	r3, r3, #4
 8006a0c:	f003 030f 	and.w	r3, r3, #15
 8006a10:	e005      	b.n	8006a1e <HAL_RCC_GetSysClockFreq+0x86>
 8006a12:	f7ff f9a7 	bl	8005d64 <LL_RCC_MSI_GetRangeAfterStandby>
 8006a16:	4603      	mov	r3, r0
 8006a18:	091b      	lsrs	r3, r3, #4
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	4a2b      	ldr	r2, [pc, #172]	@ (8006acc <HAL_RCC_GetSysClockFreq+0x134>)
 8006a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a24:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d115      	bne.n	8006a58 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a30:	e012      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d102      	bne.n	8006a3e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a38:	4b25      	ldr	r3, [pc, #148]	@ (8006ad0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	e00c      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d109      	bne.n	8006a58 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006a44:	f7ff f886 	bl	8005b54 <LL_RCC_HSE_IsEnabledDiv2>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d102      	bne.n	8006a54 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006a4e:	4b20      	ldr	r3, [pc, #128]	@ (8006ad0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	e001      	b.n	8006a58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006a54:	4b1f      	ldr	r3, [pc, #124]	@ (8006ad4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006a56:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a58:	f7ff f9b7 	bl	8005dca <LL_RCC_GetSysClkSource>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b0c      	cmp	r3, #12
 8006a60:	d12f      	bne.n	8006ac2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006a62:	f7ff fa89 	bl	8005f78 <LL_RCC_PLL_GetMainSource>
 8006a66:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d003      	beq.n	8006a76 <HAL_RCC_GetSysClockFreq+0xde>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	d003      	beq.n	8006a7c <HAL_RCC_GetSysClockFreq+0xe4>
 8006a74:	e00d      	b.n	8006a92 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006a76:	4b16      	ldr	r3, [pc, #88]	@ (8006ad0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006a78:	60fb      	str	r3, [r7, #12]
        break;
 8006a7a:	e00d      	b.n	8006a98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006a7c:	f7ff f86a 	bl	8005b54 <LL_RCC_HSE_IsEnabledDiv2>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d102      	bne.n	8006a8c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006a86:	4b12      	ldr	r3, [pc, #72]	@ (8006ad0 <HAL_RCC_GetSysClockFreq+0x138>)
 8006a88:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006a8a:	e005      	b.n	8006a98 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006a8c:	4b11      	ldr	r3, [pc, #68]	@ (8006ad4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006a8e:	60fb      	str	r3, [r7, #12]
        break;
 8006a90:	e002      	b.n	8006a98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	60fb      	str	r3, [r7, #12]
        break;
 8006a96:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006a98:	f7ff fa4c 	bl	8005f34 <LL_RCC_PLL_GetN>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	fb03 f402 	mul.w	r4, r3, r2
 8006aa4:	f7ff fa5d 	bl	8005f62 <LL_RCC_PLL_GetDivider>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	091b      	lsrs	r3, r3, #4
 8006aac:	3301      	adds	r3, #1
 8006aae:	fbb4 f4f3 	udiv	r4, r4, r3
 8006ab2:	f7ff fa4b 	bl	8005f4c <LL_RCC_PLL_GetR>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	0f5b      	lsrs	r3, r3, #29
 8006aba:	3301      	adds	r3, #1
 8006abc:	fbb4 f3f3 	udiv	r3, r4, r3
 8006ac0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006ac2:	697b      	ldr	r3, [r7, #20]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd90      	pop	{r4, r7, pc}
 8006acc:	0801fa54 	.word	0x0801fa54
 8006ad0:	00f42400 	.word	0x00f42400
 8006ad4:	01e84800 	.word	0x01e84800

08006ad8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ad8:	b598      	push	{r3, r4, r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006adc:	f7ff ff5c 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	f7ff f9cc 	bl	8005e7e <LL_RCC_GetAHBPrescaler>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	091b      	lsrs	r3, r3, #4
 8006aea:	f003 030f 	and.w	r3, r3, #15
 8006aee:	4a03      	ldr	r2, [pc, #12]	@ (8006afc <HAL_RCC_GetHCLKFreq+0x24>)
 8006af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006af4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	bd98      	pop	{r3, r4, r7, pc}
 8006afc:	0801f9f4 	.word	0x0801f9f4

08006b00 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b00:	b598      	push	{r3, r4, r7, lr}
 8006b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006b04:	f7ff ffe8 	bl	8006ad8 <HAL_RCC_GetHCLKFreq>
 8006b08:	4604      	mov	r4, r0
 8006b0a:	f7ff f9d0 	bl	8005eae <LL_RCC_GetAPB1Prescaler>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	0a1b      	lsrs	r3, r3, #8
 8006b12:	4a03      	ldr	r2, [pc, #12]	@ (8006b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b18:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	bd98      	pop	{r3, r4, r7, pc}
 8006b20:	0801fa34 	.word	0x0801fa34

08006b24 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b24:	b598      	push	{r3, r4, r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006b28:	f7ff ffd6 	bl	8006ad8 <HAL_RCC_GetHCLKFreq>
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	f7ff f9c9 	bl	8005ec4 <LL_RCC_GetAPB2Prescaler>
 8006b32:	4603      	mov	r3, r0
 8006b34:	0adb      	lsrs	r3, r3, #11
 8006b36:	4a03      	ldr	r2, [pc, #12]	@ (8006b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	bd98      	pop	{r3, r4, r7, pc}
 8006b44:	0801fa34 	.word	0x0801fa34

08006b48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006b48:	b590      	push	{r4, r7, lr}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	091b      	lsrs	r3, r3, #4
 8006b54:	f003 030f 	and.w	r3, r3, #15
 8006b58:	4a10      	ldr	r2, [pc, #64]	@ (8006b9c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b5e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006b60:	f7ff f998 	bl	8005e94 <LL_RCC_GetAHB3Prescaler>
 8006b64:	4603      	mov	r3, r0
 8006b66:	091b      	lsrs	r3, r3, #4
 8006b68:	f003 030f 	and.w	r3, r3, #15
 8006b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8006ba0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b78:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	4a09      	ldr	r2, [pc, #36]	@ (8006ba4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b82:	0c9c      	lsrs	r4, r3, #18
 8006b84:	f7fe ff3e 	bl	8005a04 <HAL_PWREx_GetVoltageRange>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 f80b 	bl	8006ba8 <RCC_SetFlashLatency>
 8006b92:	4603      	mov	r3, r0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd90      	pop	{r4, r7, pc}
 8006b9c:	0801fa54 	.word	0x0801fa54
 8006ba0:	0801f9f4 	.word	0x0801f9f4
 8006ba4:	431bde83 	.word	0x431bde83

08006ba8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08e      	sub	sp, #56	@ 0x38
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006bb2:	4a3a      	ldr	r2, [pc, #232]	@ (8006c9c <RCC_SetFlashLatency+0xf4>)
 8006bb4:	f107 0320 	add.w	r3, r7, #32
 8006bb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bbc:	6018      	str	r0, [r3, #0]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006bc2:	4a37      	ldr	r2, [pc, #220]	@ (8006ca0 <RCC_SetFlashLatency+0xf8>)
 8006bc4:	f107 0318 	add.w	r3, r7, #24
 8006bc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bcc:	6018      	str	r0, [r3, #0]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006bd2:	4a34      	ldr	r2, [pc, #208]	@ (8006ca4 <RCC_SetFlashLatency+0xfc>)
 8006bd4:	f107 030c 	add.w	r3, r7, #12
 8006bd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8006bda:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006bde:	2300      	movs	r3, #0
 8006be0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006be8:	d11b      	bne.n	8006c22 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006bea:	2300      	movs	r3, #0
 8006bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bee:	e014      	b.n	8006c1a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	3338      	adds	r3, #56	@ 0x38
 8006bf6:	443b      	add	r3, r7
 8006bf8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d807      	bhi.n	8006c14 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	3338      	adds	r3, #56	@ 0x38
 8006c0a:	443b      	add	r3, r7
 8006c0c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006c10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c12:	e021      	b.n	8006c58 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	3301      	adds	r3, #1
 8006c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d9e7      	bls.n	8006bf0 <RCC_SetFlashLatency+0x48>
 8006c20:	e01a      	b.n	8006c58 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006c22:	2300      	movs	r3, #0
 8006c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c26:	e014      	b.n	8006c52 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	3338      	adds	r3, #56	@ 0x38
 8006c2e:	443b      	add	r3, r7
 8006c30:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006c34:	461a      	mov	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d807      	bhi.n	8006c4c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	3338      	adds	r3, #56	@ 0x38
 8006c42:	443b      	add	r3, r7
 8006c44:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006c48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c4a:	e005      	b.n	8006c58 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4e:	3301      	adds	r3, #1
 8006c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d9e7      	bls.n	8006c28 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c58:	4b13      	ldr	r3, [pc, #76]	@ (8006ca8 <RCC_SetFlashLatency+0x100>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f023 0207 	bic.w	r2, r3, #7
 8006c60:	4911      	ldr	r1, [pc, #68]	@ (8006ca8 <RCC_SetFlashLatency+0x100>)
 8006c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c64:	4313      	orrs	r3, r2
 8006c66:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c68:	f7fb fc1c 	bl	80024a4 <HAL_GetTick>
 8006c6c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006c6e:	e008      	b.n	8006c82 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006c70:	f7fb fc18 	bl	80024a4 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d901      	bls.n	8006c82 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e007      	b.n	8006c92 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006c82:	4b09      	ldr	r3, [pc, #36]	@ (8006ca8 <RCC_SetFlashLatency+0x100>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d1ef      	bne.n	8006c70 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3738      	adds	r7, #56	@ 0x38
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	0801ef5c 	.word	0x0801ef5c
 8006ca0:	0801ef64 	.word	0x0801ef64
 8006ca4:	0801ef6c 	.word	0x0801ef6c
 8006ca8:	58004000 	.word	0x58004000

08006cac <LL_RCC_LSE_IsReady>:
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d101      	bne.n	8006cc4 <LL_RCC_LSE_IsReady+0x18>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e000      	b.n	8006cc6 <LL_RCC_LSE_IsReady+0x1a>
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr

08006cce <LL_RCC_SetUSARTClockSource>:
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cda:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	0c1b      	lsrs	r3, r3, #16
 8006ce2:	43db      	mvns	r3, r3
 8006ce4:	401a      	ands	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr

08006cfe <LL_RCC_SetI2SClockSource>:
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d0e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bc80      	pop	{r7}
 8006d26:	4770      	bx	lr

08006d28 <LL_RCC_SetLPUARTClockSource>:
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d38:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr

08006d52 <LL_RCC_SetI2CClockSource>:
{
 8006d52:	b480      	push	{r7}
 8006d54:	b083      	sub	sp, #12
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	091b      	lsrs	r3, r3, #4
 8006d66:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006d6a:	43db      	mvns	r3, r3
 8006d6c:	401a      	ands	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006d76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr

08006d8a <LL_RCC_SetLPTIMClockSource>:
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d96:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	0c1b      	lsrs	r3, r3, #16
 8006d9e:	041b      	lsls	r3, r3, #16
 8006da0:	43db      	mvns	r3, r3
 8006da2:	401a      	ands	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	041b      	lsls	r3, r3, #16
 8006da8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dac:	4313      	orrs	r3, r2
 8006dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bc80      	pop	{r7}
 8006dba:	4770      	bx	lr

08006dbc <LL_RCC_SetRNGClockSource>:
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dcc:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006dd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bc80      	pop	{r7}
 8006de4:	4770      	bx	lr

08006de6 <LL_RCC_SetADCClockSource>:
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006dfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bc80      	pop	{r7}
 8006e0e:	4770      	bx	lr

08006e10 <LL_RCC_SetRTCClockSource>:
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr

08006e3a <LL_RCC_GetRTCClockSource>:
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006e3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bc80      	pop	{r7}
 8006e50:	4770      	bx	lr

08006e52 <LL_RCC_ForceBackupDomainReset>:
{
 8006e52:	b480      	push	{r7}
 8006e54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006e6a:	bf00      	nop
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr

08006e72 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006e72:	b480      	push	{r7}
 8006e74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006e8a:	bf00      	nop
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bc80      	pop	{r7}
 8006e90:	4770      	bx	lr
	...

08006e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d058      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006eb4:	f7fe fd64 	bl	8005980 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006eb8:	f7fb faf4 	bl	80024a4 <HAL_GetTick>
 8006ebc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006ebe:	e009      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ec0:	f7fb faf0 	bl	80024a4 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d902      	bls.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	74fb      	strb	r3, [r7, #19]
        break;
 8006ed2:	e006      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006ed4:	4b7b      	ldr	r3, [pc, #492]	@ (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ee0:	d1ee      	bne.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006ee2:	7cfb      	ldrb	r3, [r7, #19]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d13c      	bne.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006ee8:	f7ff ffa7 	bl	8006e3a <LL_RCC_GetRTCClockSource>
 8006eec:	4602      	mov	r2, r0
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d00f      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f02:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f04:	f7ff ffa5 	bl	8006e52 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f08:	f7ff ffb3 	bl	8006e72 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d014      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f20:	f7fb fac0 	bl	80024a4 <HAL_GetTick>
 8006f24:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006f26:	e00b      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f28:	f7fb fabc 	bl	80024a4 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d902      	bls.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	74fb      	strb	r3, [r7, #19]
            break;
 8006f3e:	e004      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006f40:	f7ff feb4 	bl	8006cac <LL_RCC_LSE_IsReady>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d1ee      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006f4a:	7cfb      	ldrb	r3, [r7, #19]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d105      	bne.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7ff ff5b 	bl	8006e10 <LL_RCC_SetRTCClockSource>
 8006f5a:	e004      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f5c:	7cfb      	ldrb	r3, [r7, #19]
 8006f5e:	74bb      	strb	r3, [r7, #18]
 8006f60:	e001      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f62:	7cfb      	ldrb	r3, [r7, #19]
 8006f64:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d004      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7ff fea9 	bl	8006cce <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d004      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff fe9e 	bl	8006cce <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0320 	and.w	r3, r3, #32
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d004      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff fec0 	bl	8006d28 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d004      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff fee6 	bl	8006d8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d004      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff fedb 	bl	8006d8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d004      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff fed0 	bl	8006d8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d004      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7ff fea9 	bl	8006d52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007008:	2b00      	cmp	r3, #0
 800700a:	d004      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff fe9e 	bl	8006d52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800701e:	2b00      	cmp	r3, #0
 8007020:	d004      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff fe93 	bl	8006d52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0310 	and.w	r3, r3, #16
 8007034:	2b00      	cmp	r3, #0
 8007036:	d011      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff fe5e 	bl	8006cfe <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800704a:	d107      	bne.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800704c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007056:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800705a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d010      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff fea5 	bl	8006dbc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007076:	2b00      	cmp	r3, #0
 8007078:	d107      	bne.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800707a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007084:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007088:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d011      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff fea3 	bl	8006de6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070a8:	d107      	bne.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070b8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80070ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	58000400 	.word	0x58000400

080070c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d068      	beq.n	80071ac <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d106      	bne.n	80070f4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7fa fdc2 	bl	8001c78 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070fc:	4b2e      	ldr	r3, [pc, #184]	@ (80071b8 <HAL_RTC_Init+0xf0>)
 80070fe:	22ca      	movs	r2, #202	@ 0xca
 8007100:	625a      	str	r2, [r3, #36]	@ 0x24
 8007102:	4b2d      	ldr	r3, [pc, #180]	@ (80071b8 <HAL_RTC_Init+0xf0>)
 8007104:	2253      	movs	r2, #83	@ 0x53
 8007106:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fa0f 	bl	800752c <RTC_EnterInitMode>
 800710e:	4603      	mov	r3, r0
 8007110:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d13f      	bne.n	8007198 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007118:	4b27      	ldr	r3, [pc, #156]	@ (80071b8 <HAL_RTC_Init+0xf0>)
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	4a26      	ldr	r2, [pc, #152]	@ (80071b8 <HAL_RTC_Init+0xf0>)
 800711e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8007122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007126:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007128:	4b23      	ldr	r3, [pc, #140]	@ (80071b8 <HAL_RTC_Init+0xf0>)
 800712a:	699a      	ldr	r2, [r3, #24]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6859      	ldr	r1, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	4319      	orrs	r1, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	430b      	orrs	r3, r1
 800713c:	491e      	ldr	r1, [pc, #120]	@ (80071b8 <HAL_RTC_Init+0xf0>)
 800713e:	4313      	orrs	r3, r2
 8007140:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	041b      	lsls	r3, r3, #16
 800714c:	491a      	ldr	r1, [pc, #104]	@ (80071b8 <HAL_RTC_Init+0xf0>)
 800714e:	4313      	orrs	r3, r2
 8007150:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007152:	4b19      	ldr	r3, [pc, #100]	@ (80071b8 <HAL_RTC_Init+0xf0>)
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007162:	430b      	orrs	r3, r1
 8007164:	4914      	ldr	r1, [pc, #80]	@ (80071b8 <HAL_RTC_Init+0xf0>)
 8007166:	4313      	orrs	r3, r2
 8007168:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fa12 	bl	8007594 <RTC_ExitInitMode>
 8007170:	4603      	mov	r3, r0
 8007172:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007174:	7bfb      	ldrb	r3, [r7, #15]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10e      	bne.n	8007198 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800717a:	4b0f      	ldr	r3, [pc, #60]	@ (80071b8 <HAL_RTC_Init+0xf0>)
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a19      	ldr	r1, [r3, #32]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	4319      	orrs	r1, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	430b      	orrs	r3, r1
 8007192:	4909      	ldr	r1, [pc, #36]	@ (80071b8 <HAL_RTC_Init+0xf0>)
 8007194:	4313      	orrs	r3, r2
 8007196:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007198:	4b07      	ldr	r3, [pc, #28]	@ (80071b8 <HAL_RTC_Init+0xf0>)
 800719a:	22ff      	movs	r2, #255	@ 0xff
 800719c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (status == HAL_OK)
 800719e:	7bfb      	ldrb	r3, [r7, #15]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d103      	bne.n	80071ac <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	40002800 	.word	0x40002800

080071bc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80071bc:	b590      	push	{r4, r7, lr}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_RTC_SetAlarm_IT+0x1e>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e0f3      	b.n	80073c2 <HAL_RTC_SetAlarm_IT+0x206>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2202      	movs	r2, #2
 80071e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80071ea:	4b78      	ldr	r3, [pc, #480]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071f2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071fa:	d06a      	beq.n	80072d2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d13a      	bne.n	8007278 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007202:	4b72      	ldr	r3, [pc, #456]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d102      	bne.n	8007214 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2200      	movs	r2, #0
 8007212:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	4618      	mov	r0, r3
 8007222:	f000 f9f5 	bl	8007610 <RTC_ByteToBcd2>
 8007226:	4603      	mov	r3, r0
 8007228:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	785b      	ldrb	r3, [r3, #1]
 800722e:	4618      	mov	r0, r3
 8007230:	f000 f9ee 	bl	8007610 <RTC_ByteToBcd2>
 8007234:	4603      	mov	r3, r0
 8007236:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007238:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	789b      	ldrb	r3, [r3, #2]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 f9e6 	bl	8007610 <RTC_ByteToBcd2>
 8007244:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007246:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	78db      	ldrb	r3, [r3, #3]
 800724e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007250:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800725a:	4618      	mov	r0, r3
 800725c:	f000 f9d8 	bl	8007610 <RTC_ByteToBcd2>
 8007260:	4603      	mov	r3, r0
 8007262:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007264:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800726c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	e02c      	b.n	80072d2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8007280:	d00d      	beq.n	800729e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800728a:	d008      	beq.n	800729e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800728c:	4b4f      	ldr	r3, [pc, #316]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007294:	2b00      	cmp	r3, #0
 8007296:	d102      	bne.n	800729e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2200      	movs	r2, #0
 800729c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	785b      	ldrb	r3, [r3, #1]
 80072a8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80072aa:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80072b0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	78db      	ldrb	r3, [r3, #3]
 80072b6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80072b8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80072c0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80072c2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80072c8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80072ce:	4313      	orrs	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072d2:	4b3e      	ldr	r3, [pc, #248]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 80072d4:	22ca      	movs	r2, #202	@ 0xca
 80072d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80072d8:	4b3c      	ldr	r3, [pc, #240]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 80072da:	2253      	movs	r2, #83	@ 0x53
 80072dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072e6:	d12c      	bne.n	8007342 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80072e8:	4b38      	ldr	r3, [pc, #224]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	4a37      	ldr	r2, [pc, #220]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 80072ee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80072f2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80072f4:	4b35      	ldr	r3, [pc, #212]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 80072f6:	2201      	movs	r2, #1
 80072f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007300:	d107      	bne.n	8007312 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	699a      	ldr	r2, [r3, #24]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	4930      	ldr	r1, [pc, #192]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 800730c:	4313      	orrs	r3, r2
 800730e:	644b      	str	r3, [r1, #68]	@ 0x44
 8007310:	e006      	b.n	8007320 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8007312:	4a2e      	ldr	r2, [pc, #184]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007318:	4a2c      	ldr	r2, [pc, #176]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007320:	4a2a      	ldr	r2, [pc, #168]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732c:	f043 0201 	orr.w	r2, r3, #1
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007334:	4b25      	ldr	r3, [pc, #148]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	4a24      	ldr	r2, [pc, #144]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 800733a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800733e:	6193      	str	r3, [r2, #24]
 8007340:	e02b      	b.n	800739a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007342:	4b22      	ldr	r3, [pc, #136]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	4a21      	ldr	r2, [pc, #132]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007348:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800734c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800734e:	4b1f      	ldr	r3, [pc, #124]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007350:	2202      	movs	r2, #2
 8007352:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800735a:	d107      	bne.n	800736c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	699a      	ldr	r2, [r3, #24]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	4919      	ldr	r1, [pc, #100]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007366:	4313      	orrs	r3, r2
 8007368:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800736a:	e006      	b.n	800737a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800736c:	4a17      	ldr	r2, [pc, #92]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007372:	4a16      	ldr	r2, [pc, #88]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800737a:	4a14      	ldr	r2, [pc, #80]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007386:	f043 0202 	orr.w	r2, r3, #2
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800738e:	4b0f      	ldr	r3, [pc, #60]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	4a0e      	ldr	r2, [pc, #56]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 8007394:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8007398:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800739a:	4b0d      	ldr	r3, [pc, #52]	@ (80073d0 <HAL_RTC_SetAlarm_IT+0x214>)
 800739c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073a0:	4a0b      	ldr	r2, [pc, #44]	@ (80073d0 <HAL_RTC_SetAlarm_IT+0x214>)
 80073a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073a6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073aa:	4b08      	ldr	r3, [pc, #32]	@ (80073cc <HAL_RTC_SetAlarm_IT+0x210>)
 80073ac:	22ff      	movs	r2, #255	@ 0xff
 80073ae:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd90      	pop	{r4, r7, pc}
 80073ca:	bf00      	nop
 80073cc:	40002800 	.word	0x40002800
 80073d0:	58000800 	.word	0x58000800

080073d4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d101      	bne.n	80073ec <HAL_RTC_DeactivateAlarm+0x18>
 80073e8:	2302      	movs	r3, #2
 80073ea:	e048      	b.n	800747e <HAL_RTC_DeactivateAlarm+0xaa>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2202      	movs	r2, #2
 80073f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073fc:	4b22      	ldr	r3, [pc, #136]	@ (8007488 <HAL_RTC_DeactivateAlarm+0xb4>)
 80073fe:	22ca      	movs	r2, #202	@ 0xca
 8007400:	625a      	str	r2, [r3, #36]	@ 0x24
 8007402:	4b21      	ldr	r3, [pc, #132]	@ (8007488 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007404:	2253      	movs	r2, #83	@ 0x53
 8007406:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800740e:	d115      	bne.n	800743c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007410:	4b1d      	ldr	r3, [pc, #116]	@ (8007488 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	4a1c      	ldr	r2, [pc, #112]	@ (8007488 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007416:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800741a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800741c:	4b1a      	ldr	r3, [pc, #104]	@ (8007488 <HAL_RTC_DeactivateAlarm+0xb4>)
 800741e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007420:	4a19      	ldr	r2, [pc, #100]	@ (8007488 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007422:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007426:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742c:	f023 0201 	bic.w	r2, r3, #1
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007434:	4b14      	ldr	r3, [pc, #80]	@ (8007488 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007436:	2201      	movs	r2, #1
 8007438:	65da      	str	r2, [r3, #92]	@ 0x5c
 800743a:	e014      	b.n	8007466 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800743c:	4b12      	ldr	r3, [pc, #72]	@ (8007488 <HAL_RTC_DeactivateAlarm+0xb4>)
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	4a11      	ldr	r2, [pc, #68]	@ (8007488 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007442:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007446:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007448:	4b0f      	ldr	r3, [pc, #60]	@ (8007488 <HAL_RTC_DeactivateAlarm+0xb4>)
 800744a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800744c:	4a0e      	ldr	r2, [pc, #56]	@ (8007488 <HAL_RTC_DeactivateAlarm+0xb4>)
 800744e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007452:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007458:	f023 0202 	bic.w	r2, r3, #2
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007460:	4b09      	ldr	r3, [pc, #36]	@ (8007488 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007462:	2202      	movs	r2, #2
 8007464:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007466:	4b08      	ldr	r3, [pc, #32]	@ (8007488 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007468:	22ff      	movs	r2, #255	@ 0xff
 800746a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	bc80      	pop	{r7}
 8007486:	4770      	bx	lr
 8007488:	40002800 	.word	0x40002800

0800748c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007494:	4b11      	ldr	r3, [pc, #68]	@ (80074dc <HAL_RTC_AlarmIRQHandler+0x50>)
 8007496:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749c:	4013      	ands	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d005      	beq.n	80074b6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80074aa:	4b0c      	ldr	r3, [pc, #48]	@ (80074dc <HAL_RTC_AlarmIRQHandler+0x50>)
 80074ac:	2201      	movs	r2, #1
 80074ae:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7fb fae4 	bl	8002a7e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d005      	beq.n	80074cc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80074c0:	4b06      	ldr	r3, [pc, #24]	@ (80074dc <HAL_RTC_AlarmIRQHandler+0x50>)
 80074c2:	2202      	movs	r2, #2
 80074c4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f94a 	bl	8007760 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80074d4:	bf00      	nop
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	40002800 	.word	0x40002800

080074e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80074e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007528 <HAL_RTC_WaitForSynchro+0x48>)
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	4a0e      	ldr	r2, [pc, #56]	@ (8007528 <HAL_RTC_WaitForSynchro+0x48>)
 80074ee:	f023 0320 	bic.w	r3, r3, #32
 80074f2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80074f4:	f7fa ffd6 	bl	80024a4 <HAL_GetTick>
 80074f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80074fa:	e009      	b.n	8007510 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074fc:	f7fa ffd2 	bl	80024a4 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800750a:	d901      	bls.n	8007510 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e006      	b.n	800751e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007510:	4b05      	ldr	r3, [pc, #20]	@ (8007528 <HAL_RTC_WaitForSynchro+0x48>)
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f003 0320 	and.w	r3, r3, #32
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0ef      	beq.n	80074fc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	40002800 	.word	0x40002800

0800752c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007538:	4b15      	ldr	r3, [pc, #84]	@ (8007590 <RTC_EnterInitMode+0x64>)
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007540:	2b00      	cmp	r3, #0
 8007542:	d120      	bne.n	8007586 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007544:	4b12      	ldr	r3, [pc, #72]	@ (8007590 <RTC_EnterInitMode+0x64>)
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	4a11      	ldr	r2, [pc, #68]	@ (8007590 <RTC_EnterInitMode+0x64>)
 800754a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800754e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007550:	f7fa ffa8 	bl	80024a4 <HAL_GetTick>
 8007554:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007556:	e00d      	b.n	8007574 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007558:	f7fa ffa4 	bl	80024a4 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007566:	d905      	bls.n	8007574 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2203      	movs	r2, #3
 8007570:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007574:	4b06      	ldr	r3, [pc, #24]	@ (8007590 <RTC_EnterInitMode+0x64>)
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d102      	bne.n	8007586 <RTC_EnterInitMode+0x5a>
 8007580:	7bfb      	ldrb	r3, [r7, #15]
 8007582:	2b03      	cmp	r3, #3
 8007584:	d1e8      	bne.n	8007558 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007586:	7bfb      	ldrb	r3, [r7, #15]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	40002800 	.word	0x40002800

08007594 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80075a0:	4b1a      	ldr	r3, [pc, #104]	@ (800760c <RTC_ExitInitMode+0x78>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	4a19      	ldr	r2, [pc, #100]	@ (800760c <RTC_ExitInitMode+0x78>)
 80075a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075aa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80075ac:	4b17      	ldr	r3, [pc, #92]	@ (800760c <RTC_ExitInitMode+0x78>)
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10c      	bne.n	80075d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff ff91 	bl	80074e0 <HAL_RTC_WaitForSynchro>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01e      	beq.n	8007602 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2203      	movs	r2, #3
 80075c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	73fb      	strb	r3, [r7, #15]
 80075d0:	e017      	b.n	8007602 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80075d2:	4b0e      	ldr	r3, [pc, #56]	@ (800760c <RTC_ExitInitMode+0x78>)
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	4a0d      	ldr	r2, [pc, #52]	@ (800760c <RTC_ExitInitMode+0x78>)
 80075d8:	f023 0320 	bic.w	r3, r3, #32
 80075dc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7ff ff7e 	bl	80074e0 <HAL_RTC_WaitForSynchro>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2203      	movs	r2, #3
 80075ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80075f6:	4b05      	ldr	r3, [pc, #20]	@ (800760c <RTC_ExitInitMode+0x78>)
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	4a04      	ldr	r2, [pc, #16]	@ (800760c <RTC_ExitInitMode+0x78>)
 80075fc:	f043 0320 	orr.w	r3, r3, #32
 8007600:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007602:	7bfb      	ldrb	r3, [r7, #15]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	40002800 	.word	0x40002800

08007610 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800761e:	79fb      	ldrb	r3, [r7, #7]
 8007620:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007622:	e005      	b.n	8007630 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3301      	adds	r3, #1
 8007628:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800762a:	7afb      	ldrb	r3, [r7, #11]
 800762c:	3b0a      	subs	r3, #10
 800762e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007630:	7afb      	ldrb	r3, [r7, #11]
 8007632:	2b09      	cmp	r3, #9
 8007634:	d8f6      	bhi.n	8007624 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	011b      	lsls	r3, r3, #4
 800763c:	b2da      	uxtb	r2, r3
 800763e:	7afb      	ldrb	r3, [r7, #11]
 8007640:	4313      	orrs	r3, r2
 8007642:	b2db      	uxtb	r3, r3
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	bc80      	pop	{r7}
 800764c:	4770      	bx	lr
	...

08007650 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007662:	2302      	movs	r3, #2
 8007664:	e01f      	b.n	80076a6 <HAL_RTCEx_EnableBypassShadow+0x56>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2202      	movs	r2, #2
 8007672:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007676:	4b0e      	ldr	r3, [pc, #56]	@ (80076b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007678:	22ca      	movs	r2, #202	@ 0xca
 800767a:	625a      	str	r2, [r3, #36]	@ 0x24
 800767c:	4b0c      	ldr	r3, [pc, #48]	@ (80076b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800767e:	2253      	movs	r2, #83	@ 0x53
 8007680:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007682:	4b0b      	ldr	r3, [pc, #44]	@ (80076b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	4a0a      	ldr	r2, [pc, #40]	@ (80076b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007688:	f043 0320 	orr.w	r3, r3, #32
 800768c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800768e:	4b08      	ldr	r3, [pc, #32]	@ (80076b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007690:	22ff      	movs	r2, #255	@ 0xff
 8007692:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bc80      	pop	{r7}
 80076ae:	4770      	bx	lr
 80076b0:	40002800 	.word	0x40002800

080076b4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d101      	bne.n	80076ca <HAL_RTCEx_SetSSRU_IT+0x16>
 80076c6:	2302      	movs	r3, #2
 80076c8:	e027      	b.n	800771a <HAL_RTCEx_SetSSRU_IT+0x66>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2202      	movs	r2, #2
 80076d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076da:	4b12      	ldr	r3, [pc, #72]	@ (8007724 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80076dc:	22ca      	movs	r2, #202	@ 0xca
 80076de:	625a      	str	r2, [r3, #36]	@ 0x24
 80076e0:	4b10      	ldr	r3, [pc, #64]	@ (8007724 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80076e2:	2253      	movs	r2, #83	@ 0x53
 80076e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80076e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007724 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	4a0e      	ldr	r2, [pc, #56]	@ (8007724 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80076ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076f0:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80076f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007728 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80076f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076f8:	4a0b      	ldr	r2, [pc, #44]	@ (8007728 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80076fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076fe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007702:	4b08      	ldr	r3, [pc, #32]	@ (8007724 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007704:	22ff      	movs	r2, #255	@ 0xff
 8007706:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	bc80      	pop	{r7}
 8007722:	4770      	bx	lr
 8007724:	40002800 	.word	0x40002800
 8007728:	58000800 	.word	0x58000800

0800772c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007734:	4b09      	ldr	r3, [pc, #36]	@ (800775c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d005      	beq.n	800774c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007740:	4b06      	ldr	r3, [pc, #24]	@ (800775c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007742:	2240      	movs	r2, #64	@ 0x40
 8007744:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7fb f9a3 	bl	8002a92 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007754:	bf00      	nop
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	40002800 	.word	0x40002800

08007760 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	bc80      	pop	{r7}
 8007770:	4770      	bx	lr
	...

08007774 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007774:	b480      	push	{r7}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007780:	4b07      	ldr	r3, [pc, #28]	@ (80077a0 <HAL_RTCEx_BKUPWrite+0x2c>)
 8007782:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	4413      	add	r3, r2
 800778c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	601a      	str	r2, [r3, #0]
}
 8007794:	bf00      	nop
 8007796:	371c      	adds	r7, #28
 8007798:	46bd      	mov	sp, r7
 800779a:	bc80      	pop	{r7}
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	4000b100 	.word	0x4000b100

080077a4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80077ae:	4b07      	ldr	r3, [pc, #28]	@ (80077cc <HAL_RTCEx_BKUPRead+0x28>)
 80077b0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	4413      	add	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bc80      	pop	{r7}
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	4000b100 	.word	0x4000b100

080077d0 <LL_PWR_SetRadioBusyTrigger>:
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80077d8:	4b06      	ldr	r3, [pc, #24]	@ (80077f4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80077e0:	4904      	ldr	r1, [pc, #16]	@ (80077f4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	608b      	str	r3, [r1, #8]
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	58000400 	.word	0x58000400

080077f8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80077f8:	b480      	push	{r7}
 80077fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80077fc:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80077fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007802:	4a04      	ldr	r2, [pc, #16]	@ (8007814 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007804:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800780c:	bf00      	nop
 800780e:	46bd      	mov	sp, r7
 8007810:	bc80      	pop	{r7}
 8007812:	4770      	bx	lr
 8007814:	58000400 	.word	0x58000400

08007818 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007818:	b480      	push	{r7}
 800781a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800781c:	4b05      	ldr	r3, [pc, #20]	@ (8007834 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800781e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007822:	4a04      	ldr	r2, [pc, #16]	@ (8007834 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007824:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800782c:	bf00      	nop
 800782e:	46bd      	mov	sp, r7
 8007830:	bc80      	pop	{r7}
 8007832:	4770      	bx	lr
 8007834:	58000400 	.word	0x58000400

08007838 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800783c:	4b03      	ldr	r3, [pc, #12]	@ (800784c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800783e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007842:	619a      	str	r2, [r3, #24]
}
 8007844:	bf00      	nop
 8007846:	46bd      	mov	sp, r7
 8007848:	bc80      	pop	{r7}
 800784a:	4770      	bx	lr
 800784c:	58000400 	.word	0x58000400

08007850 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007850:	b480      	push	{r7}
 8007852:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007854:	4b06      	ldr	r3, [pc, #24]	@ (8007870 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b02      	cmp	r3, #2
 800785e:	d101      	bne.n	8007864 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007860:	2301      	movs	r3, #1
 8007862:	e000      	b.n	8007866 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	46bd      	mov	sp, r7
 800786a:	bc80      	pop	{r7}
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	58000400 	.word	0x58000400

08007874 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007878:	4b06      	ldr	r3, [pc, #24]	@ (8007894 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b04      	cmp	r3, #4
 8007882:	d101      	bne.n	8007888 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007884:	2301      	movs	r3, #1
 8007886:	e000      	b.n	800788a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	46bd      	mov	sp, r7
 800788e:	bc80      	pop	{r7}
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	58000400 	.word	0x58000400

08007898 <LL_RCC_RF_DisableReset>:
{
 8007898:	b480      	push	{r7}
 800789a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800789c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80078a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80078ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80078b0:	bf00      	nop
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bc80      	pop	{r7}
 80078b6:	4770      	bx	lr

080078b8 <LL_RCC_IsRFUnderReset>:
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80078bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078cc:	d101      	bne.n	80078d2 <LL_RCC_IsRFUnderReset+0x1a>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e000      	b.n	80078d4 <LL_RCC_IsRFUnderReset+0x1c>
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bc80      	pop	{r7}
 80078da:	4770      	bx	lr

080078dc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80078e4:	4b06      	ldr	r3, [pc, #24]	@ (8007900 <LL_EXTI_EnableIT_32_63+0x24>)
 80078e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80078ea:	4905      	ldr	r1, [pc, #20]	@ (8007900 <LL_EXTI_EnableIT_32_63+0x24>)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bc80      	pop	{r7}
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	58000800 	.word	0x58000800

08007904 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d103      	bne.n	800791a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	73fb      	strb	r3, [r7, #15]
    return status;
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	e04b      	b.n	80079b2 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	799b      	ldrb	r3, [r3, #6]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d105      	bne.n	8007934 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fa fc10 	bl	8002154 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2202      	movs	r2, #2
 8007938:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800793a:	f7ff ffad 	bl	8007898 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800793e:	4b1f      	ldr	r3, [pc, #124]	@ (80079bc <HAL_SUBGHZ_Init+0xb8>)
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	4613      	mov	r3, r2
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	1a9b      	subs	r3, r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	0cdb      	lsrs	r3, r3, #19
 800794c:	2264      	movs	r2, #100	@ 0x64
 800794e:	fb02 f303 	mul.w	r3, r2, r3
 8007952:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d105      	bne.n	8007966 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	609a      	str	r2, [r3, #8]
      break;
 8007964:	e007      	b.n	8007976 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	3b01      	subs	r3, #1
 800796a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 800796c:	f7ff ffa4 	bl	80078b8 <LL_RCC_IsRFUnderReset>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1ee      	bne.n	8007954 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8007976:	f7ff ff3f 	bl	80077f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800797a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800797e:	f7ff ffad 	bl	80078dc <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007982:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007986:	f7ff ff23 	bl	80077d0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800798a:	f7ff ff55 	bl	8007838 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4618      	mov	r0, r3
 800799a:	f000 faa5 	bl	8007ee8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	719a      	strb	r2, [r3, #6]

  return status;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000000 	.word	0x20000000

080079c0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	607a      	str	r2, [r7, #4]
 80079ca:	461a      	mov	r2, r3
 80079cc:	460b      	mov	r3, r1
 80079ce:	817b      	strh	r3, [r7, #10]
 80079d0:	4613      	mov	r3, r2
 80079d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	799b      	ldrb	r3, [r3, #6]
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d14a      	bne.n	8007a74 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	795b      	ldrb	r3, [r3, #5]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d101      	bne.n	80079ea <HAL_SUBGHZ_WriteRegisters+0x2a>
 80079e6:	2302      	movs	r3, #2
 80079e8:	e045      	b.n	8007a76 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2201      	movs	r2, #1
 80079ee:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2202      	movs	r2, #2
 80079f4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 fb44 	bl	8008084 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80079fc:	f7ff ff0c 	bl	8007818 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007a00:	210d      	movs	r1, #13
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 fa90 	bl	8007f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007a08:	897b      	ldrh	r3, [r7, #10]
 8007a0a:	0a1b      	lsrs	r3, r3, #8
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	4619      	mov	r1, r3
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 fa88 	bl	8007f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007a18:	897b      	ldrh	r3, [r7, #10]
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 fa82 	bl	8007f28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a24:	2300      	movs	r3, #0
 8007a26:	82bb      	strh	r3, [r7, #20]
 8007a28:	e00a      	b.n	8007a40 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007a2a:	8abb      	ldrh	r3, [r7, #20]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	4413      	add	r3, r2
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	4619      	mov	r1, r3
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 fa77 	bl	8007f28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007a3a:	8abb      	ldrh	r3, [r7, #20]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	82bb      	strh	r3, [r7, #20]
 8007a40:	8aba      	ldrh	r2, [r7, #20]
 8007a42:	893b      	ldrh	r3, [r7, #8]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d3f0      	bcc.n	8007a2a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a48:	f7ff fed6 	bl	80077f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 fb3d 	bl	80080cc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	75fb      	strb	r3, [r7, #23]
 8007a5e:	e001      	b.n	8007a64 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2201      	movs	r2, #1
 8007a68:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	715a      	strb	r2, [r3, #5]

    return status;
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
 8007a72:	e000      	b.n	8007a76 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007a74:	2302      	movs	r3, #2
  }
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b088      	sub	sp, #32
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	817b      	strh	r3, [r7, #10]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	799b      	ldrb	r3, [r3, #6]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d14a      	bne.n	8007b36 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	795b      	ldrb	r3, [r3, #5]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d101      	bne.n	8007aac <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e045      	b.n	8007b38 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 fae6 	bl	8008084 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ab8:	f7ff feae 	bl	8007818 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007abc:	211d      	movs	r1, #29
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 fa32 	bl	8007f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007ac4:	897b      	ldrh	r3, [r7, #10]
 8007ac6:	0a1b      	lsrs	r3, r3, #8
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	4619      	mov	r1, r3
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 fa2a 	bl	8007f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007ad4:	897b      	ldrh	r3, [r7, #10]
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	4619      	mov	r1, r3
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 fa24 	bl	8007f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 fa20 	bl	8007f28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	82fb      	strh	r3, [r7, #22]
 8007aec:	e009      	b.n	8007b02 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007aee:	69b9      	ldr	r1, [r7, #24]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 fa6f 	bl	8007fd4 <SUBGHZSPI_Receive>
      pData++;
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	3301      	adds	r3, #1
 8007afa:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007afc:	8afb      	ldrh	r3, [r7, #22]
 8007afe:	3301      	adds	r3, #1
 8007b00:	82fb      	strh	r3, [r7, #22]
 8007b02:	8afa      	ldrh	r2, [r7, #22]
 8007b04:	893b      	ldrh	r3, [r7, #8]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d3f1      	bcc.n	8007aee <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007b0a:	f7ff fe75 	bl	80077f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 fadc 	bl	80080cc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	77fb      	strb	r3, [r7, #31]
 8007b20:	e001      	b.n	8007b26 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	715a      	strb	r2, [r3, #5]

    return status;
 8007b32:	7ffb      	ldrb	r3, [r7, #31]
 8007b34:	e000      	b.n	8007b38 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007b36:	2302      	movs	r3, #2
  }
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3720      	adds	r7, #32
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	607a      	str	r2, [r7, #4]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	72fb      	strb	r3, [r7, #11]
 8007b50:	4613      	mov	r3, r2
 8007b52:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	799b      	ldrb	r3, [r3, #6]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d14a      	bne.n	8007bf4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	795b      	ldrb	r3, [r3, #5]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007b66:	2302      	movs	r3, #2
 8007b68:	e045      	b.n	8007bf6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 fa87 	bl	8008084 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007b76:	7afb      	ldrb	r3, [r7, #11]
 8007b78:	2b84      	cmp	r3, #132	@ 0x84
 8007b7a:	d002      	beq.n	8007b82 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007b7c:	7afb      	ldrb	r3, [r7, #11]
 8007b7e:	2b94      	cmp	r3, #148	@ 0x94
 8007b80:	d103      	bne.n	8007b8a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	711a      	strb	r2, [r3, #4]
 8007b88:	e002      	b.n	8007b90 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007b90:	f7ff fe42 	bl	8007818 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007b94:	7afb      	ldrb	r3, [r7, #11]
 8007b96:	4619      	mov	r1, r3
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 f9c5 	bl	8007f28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	82bb      	strh	r3, [r7, #20]
 8007ba2:	e00a      	b.n	8007bba <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007ba4:	8abb      	ldrh	r3, [r7, #20]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	4413      	add	r3, r2
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	4619      	mov	r1, r3
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 f9ba 	bl	8007f28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007bb4:	8abb      	ldrh	r3, [r7, #20]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	82bb      	strh	r3, [r7, #20]
 8007bba:	8aba      	ldrh	r2, [r7, #20]
 8007bbc:	893b      	ldrh	r3, [r7, #8]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d3f0      	bcc.n	8007ba4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007bc2:	f7ff fe19 	bl	80077f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007bc6:	7afb      	ldrb	r3, [r7, #11]
 8007bc8:	2b84      	cmp	r3, #132	@ 0x84
 8007bca:	d002      	beq.n	8007bd2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 fa7d 	bl	80080cc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	75fb      	strb	r3, [r7, #23]
 8007bde:	e001      	b.n	8007be4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2201      	movs	r2, #1
 8007be8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	715a      	strb	r2, [r3, #5]

    return status;
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	e000      	b.n	8007bf6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007bf4:	2302      	movs	r3, #2
  }
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b088      	sub	sp, #32
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	72fb      	strb	r3, [r7, #11]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	799b      	ldrb	r3, [r3, #6]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d13d      	bne.n	8007c9c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	795b      	ldrb	r3, [r3, #5]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d101      	bne.n	8007c2c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e038      	b.n	8007c9e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fa26 	bl	8008084 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007c38:	f7ff fdee 	bl	8007818 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 f971 	bl	8007f28 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007c46:	2100      	movs	r1, #0
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 f96d 	bl	8007f28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007c4e:	2300      	movs	r3, #0
 8007c50:	82fb      	strh	r3, [r7, #22]
 8007c52:	e009      	b.n	8007c68 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007c54:	69b9      	ldr	r1, [r7, #24]
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f000 f9bc 	bl	8007fd4 <SUBGHZSPI_Receive>
      pData++;
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007c62:	8afb      	ldrh	r3, [r7, #22]
 8007c64:	3301      	adds	r3, #1
 8007c66:	82fb      	strh	r3, [r7, #22]
 8007c68:	8afa      	ldrh	r2, [r7, #22]
 8007c6a:	893b      	ldrh	r3, [r7, #8]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d3f1      	bcc.n	8007c54 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007c70:	f7ff fdc2 	bl	80077f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 fa29 	bl	80080cc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	77fb      	strb	r3, [r7, #31]
 8007c86:	e001      	b.n	8007c8c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	715a      	strb	r2, [r3, #5]

    return status;
 8007c98:	7ffb      	ldrb	r3, [r7, #31]
 8007c9a:	e000      	b.n	8007c9e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007c9c:	2302      	movs	r3, #2
  }
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3720      	adds	r7, #32
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b086      	sub	sp, #24
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	60f8      	str	r0, [r7, #12]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	72fb      	strb	r3, [r7, #11]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	799b      	ldrb	r3, [r3, #6]
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d13e      	bne.n	8007d42 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	795b      	ldrb	r3, [r3, #5]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e039      	b.n	8007d44 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 f9d4 	bl	8008084 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007cdc:	f7ff fd9c 	bl	8007818 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007ce0:	210e      	movs	r1, #14
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 f920 	bl	8007f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	4619      	mov	r1, r3
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 f91b 	bl	8007f28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	82bb      	strh	r3, [r7, #20]
 8007cf6:	e00a      	b.n	8007d0e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007cf8:	8abb      	ldrh	r3, [r7, #20]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	4619      	mov	r1, r3
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 f910 	bl	8007f28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007d08:	8abb      	ldrh	r3, [r7, #20]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	82bb      	strh	r3, [r7, #20]
 8007d0e:	8aba      	ldrh	r2, [r7, #20]
 8007d10:	893b      	ldrh	r3, [r7, #8]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d3f0      	bcc.n	8007cf8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007d16:	f7ff fd6f 	bl	80077f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f9d6 	bl	80080cc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	75fb      	strb	r3, [r7, #23]
 8007d2c:	e001      	b.n	8007d32 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	715a      	strb	r2, [r3, #5]

    return status;
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
 8007d40:	e000      	b.n	8007d44 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007d42:	2302      	movs	r3, #2
  }
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	607a      	str	r2, [r7, #4]
 8007d56:	461a      	mov	r2, r3
 8007d58:	460b      	mov	r3, r1
 8007d5a:	72fb      	strb	r3, [r7, #11]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	799b      	ldrb	r3, [r3, #6]
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d141      	bne.n	8007df2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	795b      	ldrb	r3, [r3, #5]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d101      	bne.n	8007d7a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007d76:	2302      	movs	r3, #2
 8007d78:	e03c      	b.n	8007df4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 f97f 	bl	8008084 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007d86:	f7ff fd47 	bl	8007818 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007d8a:	211e      	movs	r1, #30
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 f8cb 	bl	8007f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	4619      	mov	r1, r3
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f000 f8c6 	bl	8007f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 f8c2 	bl	8007f28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007da4:	2300      	movs	r3, #0
 8007da6:	82fb      	strh	r3, [r7, #22]
 8007da8:	e009      	b.n	8007dbe <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007daa:	69b9      	ldr	r1, [r7, #24]
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f911 	bl	8007fd4 <SUBGHZSPI_Receive>
      pData++;
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	3301      	adds	r3, #1
 8007db6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007db8:	8afb      	ldrh	r3, [r7, #22]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	82fb      	strh	r3, [r7, #22]
 8007dbe:	8afa      	ldrh	r2, [r7, #22]
 8007dc0:	893b      	ldrh	r3, [r7, #8]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d3f1      	bcc.n	8007daa <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007dc6:	f7ff fd17 	bl	80077f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f000 f97e 	bl	80080cc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	77fb      	strb	r3, [r7, #31]
 8007ddc:	e001      	b.n	8007de2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	715a      	strb	r2, [r3, #5]

    return status;
 8007dee:	7ffb      	ldrb	r3, [r7, #31]
 8007df0:	e000      	b.n	8007df4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007df2:	2302      	movs	r3, #2
  }
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3720      	adds	r7, #32
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007e04:	2300      	movs	r3, #0
 8007e06:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007e08:	f107 020c 	add.w	r2, r7, #12
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	2112      	movs	r1, #18
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7ff fef4 	bl	8007bfe <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007e16:	7b3b      	ldrb	r3, [r7, #12]
 8007e18:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007e1a:	89fb      	ldrh	r3, [r7, #14]
 8007e1c:	021b      	lsls	r3, r3, #8
 8007e1e:	b21a      	sxth	r2, r3
 8007e20:	7b7b      	ldrb	r3, [r7, #13]
 8007e22:	b21b      	sxth	r3, r3
 8007e24:	4313      	orrs	r3, r2
 8007e26:	b21b      	sxth	r3, r3
 8007e28:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007e2a:	89fb      	ldrh	r3, [r7, #14]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f012 fe4d 	bl	801aad4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007e3a:	89fb      	ldrh	r3, [r7, #14]
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f012 fe53 	bl	801aaf0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007e4a:	89fb      	ldrh	r3, [r7, #14]
 8007e4c:	f003 0304 	and.w	r3, r3, #4
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f012 fea3 	bl	801aba0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007e5a:	89fb      	ldrh	r3, [r7, #14]
 8007e5c:	f003 0308 	and.w	r3, r3, #8
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <HAL_SUBGHZ_IRQHandler+0x6e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f012 fea9 	bl	801abbc <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007e6a:	89fb      	ldrh	r3, [r7, #14]
 8007e6c:	f003 0310 	and.w	r3, r3, #16
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f012 feaf 	bl	801abd8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007e7a:	89fb      	ldrh	r3, [r7, #14]
 8007e7c:	f003 0320 	and.w	r3, r3, #32
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <HAL_SUBGHZ_IRQHandler+0x8e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f012 fe7d 	bl	801ab84 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007e8a:	89fb      	ldrh	r3, [r7, #14]
 8007e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <HAL_SUBGHZ_IRQHandler+0x9e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f012 fe39 	bl	801ab0c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007e9a:	89fb      	ldrh	r3, [r7, #14]
 8007e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00d      	beq.n	8007ec0 <HAL_SUBGHZ_IRQHandler+0xc4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007ea4:	89fb      	ldrh	r3, [r7, #14]
 8007ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d004      	beq.n	8007eb8 <HAL_SUBGHZ_IRQHandler+0xbc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007eae:	2101      	movs	r1, #1
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f012 fe39 	bl	801ab28 <HAL_SUBGHZ_CADStatusCallback>
 8007eb6:	e003      	b.n	8007ec0 <HAL_SUBGHZ_IRQHandler+0xc4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007eb8:	2100      	movs	r1, #0
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f012 fe34 	bl	801ab28 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007ec0:	89fb      	ldrh	r3, [r7, #14]
 8007ec2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <HAL_SUBGHZ_IRQHandler+0xd4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f012 fe4a 	bl	801ab64 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007ed0:	f107 020c 	add.w	r2, r7, #12
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	2102      	movs	r1, #2
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff fe31 	bl	8007b40 <HAL_SUBGHZ_ExecSetCmd>
}
 8007ede:	bf00      	nop
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8007f24 <SUBGHZSPI_Init+0x3c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8007f24 <SUBGHZSPI_Init+0x3c>)
 8007ef6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007efa:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007efc:	4a09      	ldr	r2, [pc, #36]	@ (8007f24 <SUBGHZSPI_Init+0x3c>)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007f04:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007f06:	4b07      	ldr	r3, [pc, #28]	@ (8007f24 <SUBGHZSPI_Init+0x3c>)
 8007f08:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007f0c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007f0e:	4b05      	ldr	r3, [pc, #20]	@ (8007f24 <SUBGHZSPI_Init+0x3c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a04      	ldr	r2, [pc, #16]	@ (8007f24 <SUBGHZSPI_Init+0x3c>)
 8007f14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f18:	6013      	str	r3, [r2, #0]
}
 8007f1a:	bf00      	nop
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bc80      	pop	{r7}
 8007f22:	4770      	bx	lr
 8007f24:	58010000 	.word	0x58010000

08007f28 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007f38:	4b23      	ldr	r3, [pc, #140]	@ (8007fc8 <SUBGHZSPI_Transmit+0xa0>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	1a9b      	subs	r3, r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	0cdb      	lsrs	r3, r3, #19
 8007f46:	2264      	movs	r2, #100	@ 0x64
 8007f48:	fb02 f303 	mul.w	r3, r2, r3
 8007f4c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d105      	bne.n	8007f60 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	609a      	str	r2, [r3, #8]
      break;
 8007f5e:	e008      	b.n	8007f72 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007f66:	4b19      	ldr	r3, [pc, #100]	@ (8007fcc <SUBGHZSPI_Transmit+0xa4>)
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d1ed      	bne.n	8007f4e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007f72:	4b17      	ldr	r3, [pc, #92]	@ (8007fd0 <SUBGHZSPI_Transmit+0xa8>)
 8007f74:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	78fa      	ldrb	r2, [r7, #3]
 8007f7a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007f7c:	4b12      	ldr	r3, [pc, #72]	@ (8007fc8 <SUBGHZSPI_Transmit+0xa0>)
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	4613      	mov	r3, r2
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	1a9b      	subs	r3, r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	0cdb      	lsrs	r3, r3, #19
 8007f8a:	2264      	movs	r2, #100	@ 0x64
 8007f8c:	fb02 f303 	mul.w	r3, r2, r3
 8007f90:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d105      	bne.n	8007fa4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	609a      	str	r2, [r3, #8]
      break;
 8007fa2:	e008      	b.n	8007fb6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007faa:	4b08      	ldr	r3, [pc, #32]	@ (8007fcc <SUBGHZSPI_Transmit+0xa4>)
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d1ed      	bne.n	8007f92 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007fb6:	4b05      	ldr	r3, [pc, #20]	@ (8007fcc <SUBGHZSPI_Transmit+0xa4>)
 8007fb8:	68db      	ldr	r3, [r3, #12]

  return status;
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	371c      	adds	r7, #28
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bc80      	pop	{r7}
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	20000000 	.word	0x20000000
 8007fcc:	58010000 	.word	0x58010000
 8007fd0:	5801000c 	.word	0x5801000c

08007fd4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007fe2:	4b25      	ldr	r3, [pc, #148]	@ (8008078 <SUBGHZSPI_Receive+0xa4>)
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	00db      	lsls	r3, r3, #3
 8007fea:	1a9b      	subs	r3, r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	0cdb      	lsrs	r3, r3, #19
 8007ff0:	2264      	movs	r2, #100	@ 0x64
 8007ff2:	fb02 f303 	mul.w	r3, r2, r3
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d105      	bne.n	800800a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	609a      	str	r2, [r3, #8]
      break;
 8008008:	e008      	b.n	800801c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3b01      	subs	r3, #1
 800800e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008010:	4b1a      	ldr	r3, [pc, #104]	@ (800807c <SUBGHZSPI_Receive+0xa8>)
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f003 0302 	and.w	r3, r3, #2
 8008018:	2b02      	cmp	r3, #2
 800801a:	d1ed      	bne.n	8007ff8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800801c:	4b18      	ldr	r3, [pc, #96]	@ (8008080 <SUBGHZSPI_Receive+0xac>)
 800801e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	22ff      	movs	r2, #255	@ 0xff
 8008024:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008026:	4b14      	ldr	r3, [pc, #80]	@ (8008078 <SUBGHZSPI_Receive+0xa4>)
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	4613      	mov	r3, r2
 800802c:	00db      	lsls	r3, r3, #3
 800802e:	1a9b      	subs	r3, r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	0cdb      	lsrs	r3, r3, #19
 8008034:	2264      	movs	r2, #100	@ 0x64
 8008036:	fb02 f303 	mul.w	r3, r2, r3
 800803a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d105      	bne.n	800804e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	609a      	str	r2, [r3, #8]
      break;
 800804c:	e008      	b.n	8008060 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	3b01      	subs	r3, #1
 8008052:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008054:	4b09      	ldr	r3, [pc, #36]	@ (800807c <SUBGHZSPI_Receive+0xa8>)
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b01      	cmp	r3, #1
 800805e:	d1ed      	bne.n	800803c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8008060:	4b06      	ldr	r3, [pc, #24]	@ (800807c <SUBGHZSPI_Receive+0xa8>)
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	b2da      	uxtb	r2, r3
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	701a      	strb	r2, [r3, #0]

  return status;
 800806a:	7dfb      	ldrb	r3, [r7, #23]
}
 800806c:	4618      	mov	r0, r3
 800806e:	371c      	adds	r7, #28
 8008070:	46bd      	mov	sp, r7
 8008072:	bc80      	pop	{r7}
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	20000000 	.word	0x20000000
 800807c:	58010000 	.word	0x58010000
 8008080:	5801000c 	.word	0x5801000c

08008084 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	791b      	ldrb	r3, [r3, #4]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d111      	bne.n	80080b8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008094:	4b0c      	ldr	r3, [pc, #48]	@ (80080c8 <SUBGHZ_CheckDeviceReady+0x44>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	4613      	mov	r3, r2
 800809a:	005b      	lsls	r3, r3, #1
 800809c:	4413      	add	r3, r2
 800809e:	00db      	lsls	r3, r3, #3
 80080a0:	0c1b      	lsrs	r3, r3, #16
 80080a2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80080a4:	f7ff fbb8 	bl	8007818 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1f9      	bne.n	80080a8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80080b4:	f7ff fba0 	bl	80077f8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f807 	bl	80080cc <SUBGHZ_WaitOnBusy>
 80080be:	4603      	mov	r3, r0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	20000000 	.word	0x20000000

080080cc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80080d8:	4b12      	ldr	r3, [pc, #72]	@ (8008124 <SUBGHZ_WaitOnBusy+0x58>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	4613      	mov	r3, r2
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	4413      	add	r3, r2
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	0d1b      	lsrs	r3, r3, #20
 80080e6:	2264      	movs	r2, #100	@ 0x64
 80080e8:	fb02 f303 	mul.w	r3, r2, r3
 80080ec:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80080ee:	f7ff fbc1 	bl	8007874 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80080f2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d105      	bne.n	8008106 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2202      	movs	r2, #2
 8008102:	609a      	str	r2, [r3, #8]
      break;
 8008104:	e009      	b.n	800811a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3b01      	subs	r3, #1
 800810a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800810c:	f7ff fba0 	bl	8007850 <LL_PWR_IsActiveFlag_RFBUSYS>
 8008110:	4602      	mov	r2, r0
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	4013      	ands	r3, r2
 8008116:	2b01      	cmp	r3, #1
 8008118:	d0e9      	beq.n	80080ee <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800811a:	7dfb      	ldrb	r3, [r7, #23]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3718      	adds	r7, #24
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	20000000 	.word	0x20000000

08008128 <LL_RCC_GetUSARTClockSource>:
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008134:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	401a      	ands	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	041b      	lsls	r3, r3, #16
 8008140:	4313      	orrs	r3, r2
}
 8008142:	4618      	mov	r0, r3
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	bc80      	pop	{r7}
 800814a:	4770      	bx	lr

0800814c <LL_RCC_GetLPUARTClockSource>:
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008158:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4013      	ands	r3, r2
}
 8008160:	4618      	mov	r0, r3
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	bc80      	pop	{r7}
 8008168:	4770      	bx	lr

0800816a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e042      	b.n	8008202 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008182:	2b00      	cmp	r3, #0
 8008184:	d106      	bne.n	8008194 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7fa fe5a 	bl	8002e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2224      	movs	r2, #36	@ 0x24
 8008198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0201 	bic.w	r2, r2, #1
 80081aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fce1 	bl	8008b74 <UART_SetConfig>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d101      	bne.n	80081bc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e022      	b.n	8008202 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 ff49 	bl	800905c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80081d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80081e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f042 0201 	orr.w	r2, r2, #1
 80081f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 ffcf 	bl	800919e <UART_CheckIdleState>
 8008200:	4603      	mov	r3, r0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b08a      	sub	sp, #40	@ 0x28
 800820e:	af02      	add	r7, sp, #8
 8008210:	60f8      	str	r0, [r7, #12]
 8008212:	60b9      	str	r1, [r7, #8]
 8008214:	603b      	str	r3, [r7, #0]
 8008216:	4613      	mov	r3, r2
 8008218:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008220:	2b20      	cmp	r3, #32
 8008222:	f040 8083 	bne.w	800832c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <HAL_UART_Transmit+0x28>
 800822c:	88fb      	ldrh	r3, [r7, #6]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e07b      	b.n	800832e <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800823c:	2b01      	cmp	r3, #1
 800823e:	d101      	bne.n	8008244 <HAL_UART_Transmit+0x3a>
 8008240:	2302      	movs	r3, #2
 8008242:	e074      	b.n	800832e <HAL_UART_Transmit+0x124>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2221      	movs	r2, #33	@ 0x21
 8008258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800825c:	f7fa f922 	bl	80024a4 <HAL_GetTick>
 8008260:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	88fa      	ldrh	r2, [r7, #6]
 8008266:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	88fa      	ldrh	r2, [r7, #6]
 800826e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800827a:	d108      	bne.n	800828e <HAL_UART_Transmit+0x84>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d104      	bne.n	800828e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008284:	2300      	movs	r3, #0
 8008286:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	61bb      	str	r3, [r7, #24]
 800828c:	e003      	b.n	8008296 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008292:	2300      	movs	r3, #0
 8008294:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 800829e:	e02c      	b.n	80082fa <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	2200      	movs	r2, #0
 80082a8:	2180      	movs	r1, #128	@ 0x80
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 ffc2 	bl	8009234 <UART_WaitOnFlagUntilTimeout>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e039      	b.n	800832e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10b      	bne.n	80082d8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	461a      	mov	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	3302      	adds	r3, #2
 80082d4:	61bb      	str	r3, [r7, #24]
 80082d6:	e007      	b.n	80082e8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	3301      	adds	r3, #1
 80082e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	3b01      	subs	r3, #1
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008300:	b29b      	uxth	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1cc      	bne.n	80082a0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2200      	movs	r2, #0
 800830e:	2140      	movs	r1, #64	@ 0x40
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 ff8f 	bl	8009234 <UART_WaitOnFlagUntilTimeout>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e006      	b.n	800832e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2220      	movs	r2, #32
 8008324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	e000      	b.n	800832e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800832c:	2302      	movs	r3, #2
  }
}
 800832e:	4618      	mov	r0, r3
 8008330:	3720      	adds	r7, #32
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08a      	sub	sp, #40	@ 0x28
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	4613      	mov	r3, r2
 8008344:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800834c:	2b20      	cmp	r3, #32
 800834e:	d142      	bne.n	80083d6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d002      	beq.n	800835c <HAL_UART_Receive_IT+0x24>
 8008356:	88fb      	ldrh	r3, [r7, #6]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e03b      	b.n	80083d8 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008366:	2b01      	cmp	r3, #1
 8008368:	d101      	bne.n	800836e <HAL_UART_Receive_IT+0x36>
 800836a:	2302      	movs	r3, #2
 800836c:	e034      	b.n	80083d8 <HAL_UART_Receive_IT+0xa0>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a17      	ldr	r2, [pc, #92]	@ (80083e0 <HAL_UART_Receive_IT+0xa8>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d01f      	beq.n	80083c6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d018      	beq.n	80083c6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	613b      	str	r3, [r7, #16]
   return(result);
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80083a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b2:	623b      	str	r3, [r7, #32]
 80083b4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b6:	69f9      	ldr	r1, [r7, #28]
 80083b8:	6a3a      	ldr	r2, [r7, #32]
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	61bb      	str	r3, [r7, #24]
   return(result);
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1e6      	bne.n	8008394 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80083c6:	88fb      	ldrh	r3, [r7, #6]
 80083c8:	461a      	mov	r2, r3
 80083ca:	68b9      	ldr	r1, [r7, #8]
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 fff9 	bl	80093c4 <UART_Start_Receive_IT>
 80083d2:	4603      	mov	r3, r0
 80083d4:	e000      	b.n	80083d8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80083d6:	2302      	movs	r3, #2
  }
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3728      	adds	r7, #40	@ 0x28
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	40008000 	.word	0x40008000

080083e4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08a      	sub	sp, #40	@ 0x28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083f8:	2b20      	cmp	r3, #32
 80083fa:	d17a      	bne.n	80084f2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <HAL_UART_Transmit_DMA+0x24>
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e073      	b.n	80084f4 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008412:	2b01      	cmp	r3, #1
 8008414:	d101      	bne.n	800841a <HAL_UART_Transmit_DMA+0x36>
 8008416:	2302      	movs	r3, #2
 8008418:	e06c      	b.n	80084f4 <HAL_UART_Transmit_DMA+0x110>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	88fa      	ldrh	r2, [r7, #6]
 800842c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	88fa      	ldrh	r2, [r7, #6]
 8008434:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2221      	movs	r2, #33	@ 0x21
 8008444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    if (huart->hdmatx != NULL)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800844c:	2b00      	cmp	r3, #0
 800844e:	d02c      	beq.n	80084aa <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008454:	4a29      	ldr	r2, [pc, #164]	@ (80084fc <HAL_UART_Transmit_DMA+0x118>)
 8008456:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800845c:	4a28      	ldr	r2, [pc, #160]	@ (8008500 <HAL_UART_Transmit_DMA+0x11c>)
 800845e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008464:	4a27      	ldr	r2, [pc, #156]	@ (8008504 <HAL_UART_Transmit_DMA+0x120>)
 8008466:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800846c:	2200      	movs	r2, #0
 800846e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008478:	4619      	mov	r1, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3328      	adds	r3, #40	@ 0x28
 8008480:	461a      	mov	r2, r3
 8008482:	88fb      	ldrh	r3, [r7, #6]
 8008484:	f7fc fb10 	bl	8004aa8 <HAL_DMA_Start_IT>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00d      	beq.n	80084aa <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2210      	movs	r2, #16
 8008492:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2220      	movs	r2, #32
 80084a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e024      	b.n	80084f4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2240      	movs	r2, #64	@ 0x40
 80084b0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	3308      	adds	r3, #8
 80084c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	e853 3f00 	ldrex	r3, [r3]
 80084c8:	613b      	str	r3, [r7, #16]
   return(result);
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3308      	adds	r3, #8
 80084d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084da:	623a      	str	r2, [r7, #32]
 80084dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084de:	69f9      	ldr	r1, [r7, #28]
 80084e0:	6a3a      	ldr	r2, [r7, #32]
 80084e2:	e841 2300 	strex	r3, r2, [r1]
 80084e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1e5      	bne.n	80084ba <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	e000      	b.n	80084f4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80084f2:	2302      	movs	r3, #2
  }
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3728      	adds	r7, #40	@ 0x28
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	0800975f 	.word	0x0800975f
 8008500:	080097f9 	.word	0x080097f9
 8008504:	08009815 	.word	0x08009815

08008508 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b0ba      	sub	sp, #232	@ 0xe8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800852e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008532:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008536:	4013      	ands	r3, r2
 8008538:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800853c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008540:	2b00      	cmp	r3, #0
 8008542:	d11b      	bne.n	800857c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008548:	f003 0320 	and.w	r3, r3, #32
 800854c:	2b00      	cmp	r3, #0
 800854e:	d015      	beq.n	800857c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008554:	f003 0320 	and.w	r3, r3, #32
 8008558:	2b00      	cmp	r3, #0
 800855a:	d105      	bne.n	8008568 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800855c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d009      	beq.n	800857c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 82d6 	beq.w	8008b1e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	4798      	blx	r3
      }
      return;
 800857a:	e2d0      	b.n	8008b1e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800857c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 811f 	beq.w	80087c4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008586:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800858a:	4b8b      	ldr	r3, [pc, #556]	@ (80087b8 <HAL_UART_IRQHandler+0x2b0>)
 800858c:	4013      	ands	r3, r2
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008592:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008596:	4b89      	ldr	r3, [pc, #548]	@ (80087bc <HAL_UART_IRQHandler+0x2b4>)
 8008598:	4013      	ands	r3, r2
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 8112 	beq.w	80087c4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d011      	beq.n	80085d0 <HAL_UART_IRQHandler+0xc8>
 80085ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00b      	beq.n	80085d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2201      	movs	r2, #1
 80085be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085c6:	f043 0201 	orr.w	r2, r3, #1
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d4:	f003 0302 	and.w	r3, r3, #2
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d011      	beq.n	8008600 <HAL_UART_IRQHandler+0xf8>
 80085dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085e0:	f003 0301 	and.w	r3, r3, #1
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00b      	beq.n	8008600 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2202      	movs	r2, #2
 80085ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085f6:	f043 0204 	orr.w	r2, r3, #4
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b00      	cmp	r3, #0
 800860a:	d011      	beq.n	8008630 <HAL_UART_IRQHandler+0x128>
 800860c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2204      	movs	r2, #4
 800861e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008626:	f043 0202 	orr.w	r2, r3, #2
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008634:	f003 0308 	and.w	r3, r3, #8
 8008638:	2b00      	cmp	r3, #0
 800863a:	d017      	beq.n	800866c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800863c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008640:	f003 0320 	and.w	r3, r3, #32
 8008644:	2b00      	cmp	r3, #0
 8008646:	d105      	bne.n	8008654 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008648:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800864c:	4b5a      	ldr	r3, [pc, #360]	@ (80087b8 <HAL_UART_IRQHandler+0x2b0>)
 800864e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00b      	beq.n	800866c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2208      	movs	r2, #8
 800865a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008662:	f043 0208 	orr.w	r2, r3, #8
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800866c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008674:	2b00      	cmp	r3, #0
 8008676:	d012      	beq.n	800869e <HAL_UART_IRQHandler+0x196>
 8008678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800867c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00c      	beq.n	800869e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800868c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008694:	f043 0220 	orr.w	r2, r3, #32
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 823c 	beq.w	8008b22 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086ae:	f003 0320 	and.w	r3, r3, #32
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d013      	beq.n	80086de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d105      	bne.n	80086ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d007      	beq.n	80086de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f2:	2b40      	cmp	r3, #64	@ 0x40
 80086f4:	d005      	beq.n	8008702 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d04f      	beq.n	80087a2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 ffc6 	bl	8009694 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008712:	2b40      	cmp	r3, #64	@ 0x40
 8008714:	d141      	bne.n	800879a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3308      	adds	r3, #8
 800871c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008720:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800872c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008730:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008734:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3308      	adds	r3, #8
 800873e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008742:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008746:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800874e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008752:	e841 2300 	strex	r3, r2, [r1]
 8008756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800875a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1d9      	bne.n	8008716 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008766:	2b00      	cmp	r3, #0
 8008768:	d013      	beq.n	8008792 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800876e:	4a14      	ldr	r2, [pc, #80]	@ (80087c0 <HAL_UART_IRQHandler+0x2b8>)
 8008770:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008776:	4618      	mov	r0, r3
 8008778:	f7fc fa72 	bl	8004c60 <HAL_DMA_Abort_IT>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d017      	beq.n	80087b2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 800878c:	4610      	mov	r0, r2
 800878e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008790:	e00f      	b.n	80087b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f9d9 	bl	8008b4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008798:	e00b      	b.n	80087b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f9d5 	bl	8008b4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a0:	e007      	b.n	80087b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f9d1 	bl	8008b4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 80087b0:	e1b7      	b.n	8008b22 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b2:	bf00      	nop
    return;
 80087b4:	e1b5      	b.n	8008b22 <HAL_UART_IRQHandler+0x61a>
 80087b6:	bf00      	nop
 80087b8:	10000001 	.word	0x10000001
 80087bc:	04000120 	.word	0x04000120
 80087c0:	08009895 	.word	0x08009895

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	f040 814a 	bne.w	8008a62 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80087ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d2:	f003 0310 	and.w	r3, r3, #16
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 8143 	beq.w	8008a62 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80087dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087e0:	f003 0310 	and.w	r3, r3, #16
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 813c 	beq.w	8008a62 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2210      	movs	r2, #16
 80087f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087fc:	2b40      	cmp	r3, #64	@ 0x40
 80087fe:	f040 80b5 	bne.w	800896c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800880e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 8187 	beq.w	8008b26 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800881e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008822:	429a      	cmp	r2, r3
 8008824:	f080 817f 	bcs.w	8008b26 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800882e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0320 	and.w	r3, r3, #32
 800883e:	2b00      	cmp	r3, #0
 8008840:	f040 8086 	bne.w	8008950 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008850:	e853 3f00 	ldrex	r3, [r3]
 8008854:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008858:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800885c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008860:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	461a      	mov	r2, r3
 800886a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800886e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008872:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008876:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800887a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800887e:	e841 2300 	strex	r3, r2, [r1]
 8008882:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008886:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1da      	bne.n	8008844 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3308      	adds	r3, #8
 8008894:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800889e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088a0:	f023 0301 	bic.w	r3, r3, #1
 80088a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3308      	adds	r3, #8
 80088ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80088b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80088b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80088ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80088be:	e841 2300 	strex	r3, r2, [r1]
 80088c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80088c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1e1      	bne.n	800888e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	3308      	adds	r3, #8
 80088d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088d4:	e853 3f00 	ldrex	r3, [r3]
 80088d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80088da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3308      	adds	r3, #8
 80088ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80088ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80088f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80088f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80088f6:	e841 2300 	strex	r3, r2, [r1]
 80088fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80088fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1e3      	bne.n	80088ca <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2220      	movs	r2, #32
 8008906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800891e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008920:	f023 0310 	bic.w	r3, r3, #16
 8008924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	461a      	mov	r2, r3
 800892e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008932:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008934:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008936:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008938:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800893a:	e841 2300 	strex	r3, r2, [r1]
 800893e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008940:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1e4      	bne.n	8008910 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800894a:	4618      	mov	r0, r3
 800894c:	f7fc f92a 	bl	8004ba4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800895c:	b29b      	uxth	r3, r3
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	b29b      	uxth	r3, r3
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f8f9 	bl	8008b5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800896a:	e0dc      	b.n	8008b26 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008978:	b29b      	uxth	r3, r3
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if (  (huart->RxXferCount > 0U)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008986:	b29b      	uxth	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 80ce 	beq.w	8008b2a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800898e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 80c9 	beq.w	8008b2a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a0:	e853 3f00 	ldrex	r3, [r3]
 80089a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80089ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80089bc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089c2:	e841 2300 	strex	r3, r2, [r1]
 80089c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1e4      	bne.n	8008998 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	3308      	adds	r3, #8
 80089d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d8:	e853 3f00 	ldrex	r3, [r3]
 80089dc:	623b      	str	r3, [r7, #32]
   return(result);
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089e4:	f023 0301 	bic.w	r3, r3, #1
 80089e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	3308      	adds	r3, #8
 80089f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80089f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089fe:	e841 2300 	strex	r3, r2, [r1]
 8008a02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e1      	bne.n	80089ce <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	e853 3f00 	ldrex	r3, [r3]
 8008a2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f023 0310 	bic.w	r3, r3, #16
 8008a32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a40:	61fb      	str	r3, [r7, #28]
 8008a42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	69b9      	ldr	r1, [r7, #24]
 8008a46:	69fa      	ldr	r2, [r7, #28]
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	617b      	str	r3, [r7, #20]
   return(result);
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e4      	bne.n	8008a1e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f87e 	bl	8008b5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008a60:	e063      	b.n	8008b2a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00e      	beq.n	8008a8c <HAL_UART_IRQHandler+0x584>
 8008a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d008      	beq.n	8008a8c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008a82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f001 fba3 	bl	800a1d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a8a:	e051      	b.n	8008b30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d014      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d105      	bne.n	8008ab0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d008      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d03a      	beq.n	8008b2e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	4798      	blx	r3
    }
    return;
 8008ac0:	e035      	b.n	8008b2e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d009      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x5da>
 8008ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fef0 	bl	80098c0 <UART_EndTransmit_IT>
    return;
 8008ae0:	e026      	b.n	8008b30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d009      	beq.n	8008b02 <HAL_UART_IRQHandler+0x5fa>
 8008aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008af2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f001 fb7a 	bl	800a1f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b00:	e016      	b.n	8008b30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d010      	beq.n	8008b30 <HAL_UART_IRQHandler+0x628>
 8008b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	da0c      	bge.n	8008b30 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 fb63 	bl	800a1e2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b1c:	e008      	b.n	8008b30 <HAL_UART_IRQHandler+0x628>
      return;
 8008b1e:	bf00      	nop
 8008b20:	e006      	b.n	8008b30 <HAL_UART_IRQHandler+0x628>
    return;
 8008b22:	bf00      	nop
 8008b24:	e004      	b.n	8008b30 <HAL_UART_IRQHandler+0x628>
      return;
 8008b26:	bf00      	nop
 8008b28:	e002      	b.n	8008b30 <HAL_UART_IRQHandler+0x628>
      return;
 8008b2a:	bf00      	nop
 8008b2c:	e000      	b.n	8008b30 <HAL_UART_IRQHandler+0x628>
    return;
 8008b2e:	bf00      	nop
  }
}
 8008b30:	37e8      	adds	r7, #232	@ 0xe8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop

08008b38 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bc80      	pop	{r7}
 8008b48:	4770      	bx	lr

08008b4a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b52:	bf00      	nop
 8008b54:	370c      	adds	r7, #12
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bc80      	pop	{r7}
 8008b5a:	4770      	bx	lr

08008b5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bc80      	pop	{r7}
 8008b70:	4770      	bx	lr
	...

08008b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b78:	b08c      	sub	sp, #48	@ 0x30
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	689a      	ldr	r2, [r3, #8]
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	431a      	orrs	r2, r3
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	4b94      	ldr	r3, [pc, #592]	@ (8008df4 <UART_SetConfig+0x280>)
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	6812      	ldr	r2, [r2, #0]
 8008baa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bac:	430b      	orrs	r3, r1
 8008bae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	68da      	ldr	r2, [r3, #12]
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a89      	ldr	r2, [pc, #548]	@ (8008df8 <UART_SetConfig+0x284>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d004      	beq.n	8008be0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008bea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	6812      	ldr	r2, [r2, #0]
 8008bf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bf4:	430b      	orrs	r3, r1
 8008bf6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfe:	f023 010f 	bic.w	r1, r3, #15
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a7a      	ldr	r2, [pc, #488]	@ (8008dfc <UART_SetConfig+0x288>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d127      	bne.n	8008c68 <UART_SetConfig+0xf4>
 8008c18:	2003      	movs	r0, #3
 8008c1a:	f7ff fa85 	bl	8008128 <LL_RCC_GetUSARTClockSource>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	d81b      	bhi.n	8008c60 <UART_SetConfig+0xec>
 8008c28:	a201      	add	r2, pc, #4	@ (adr r2, 8008c30 <UART_SetConfig+0xbc>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008c41 	.word	0x08008c41
 8008c34:	08008c51 	.word	0x08008c51
 8008c38:	08008c49 	.word	0x08008c49
 8008c3c:	08008c59 	.word	0x08008c59
 8008c40:	2301      	movs	r3, #1
 8008c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c46:	e080      	b.n	8008d4a <UART_SetConfig+0x1d6>
 8008c48:	2302      	movs	r3, #2
 8008c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c4e:	e07c      	b.n	8008d4a <UART_SetConfig+0x1d6>
 8008c50:	2304      	movs	r3, #4
 8008c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c56:	e078      	b.n	8008d4a <UART_SetConfig+0x1d6>
 8008c58:	2308      	movs	r3, #8
 8008c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c5e:	e074      	b.n	8008d4a <UART_SetConfig+0x1d6>
 8008c60:	2310      	movs	r3, #16
 8008c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c66:	e070      	b.n	8008d4a <UART_SetConfig+0x1d6>
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a64      	ldr	r2, [pc, #400]	@ (8008e00 <UART_SetConfig+0x28c>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d138      	bne.n	8008ce4 <UART_SetConfig+0x170>
 8008c72:	200c      	movs	r0, #12
 8008c74:	f7ff fa58 	bl	8008128 <LL_RCC_GetUSARTClockSource>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8008c7e:	2b0c      	cmp	r3, #12
 8008c80:	d82c      	bhi.n	8008cdc <UART_SetConfig+0x168>
 8008c82:	a201      	add	r2, pc, #4	@ (adr r2, 8008c88 <UART_SetConfig+0x114>)
 8008c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c88:	08008cbd 	.word	0x08008cbd
 8008c8c:	08008cdd 	.word	0x08008cdd
 8008c90:	08008cdd 	.word	0x08008cdd
 8008c94:	08008cdd 	.word	0x08008cdd
 8008c98:	08008ccd 	.word	0x08008ccd
 8008c9c:	08008cdd 	.word	0x08008cdd
 8008ca0:	08008cdd 	.word	0x08008cdd
 8008ca4:	08008cdd 	.word	0x08008cdd
 8008ca8:	08008cc5 	.word	0x08008cc5
 8008cac:	08008cdd 	.word	0x08008cdd
 8008cb0:	08008cdd 	.word	0x08008cdd
 8008cb4:	08008cdd 	.word	0x08008cdd
 8008cb8:	08008cd5 	.word	0x08008cd5
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cc2:	e042      	b.n	8008d4a <UART_SetConfig+0x1d6>
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cca:	e03e      	b.n	8008d4a <UART_SetConfig+0x1d6>
 8008ccc:	2304      	movs	r3, #4
 8008cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cd2:	e03a      	b.n	8008d4a <UART_SetConfig+0x1d6>
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cda:	e036      	b.n	8008d4a <UART_SetConfig+0x1d6>
 8008cdc:	2310      	movs	r3, #16
 8008cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ce2:	e032      	b.n	8008d4a <UART_SetConfig+0x1d6>
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a43      	ldr	r2, [pc, #268]	@ (8008df8 <UART_SetConfig+0x284>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d12a      	bne.n	8008d44 <UART_SetConfig+0x1d0>
 8008cee:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008cf2:	f7ff fa2b 	bl	800814c <LL_RCC_GetLPUARTClockSource>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008cfc:	d01a      	beq.n	8008d34 <UART_SetConfig+0x1c0>
 8008cfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d02:	d81b      	bhi.n	8008d3c <UART_SetConfig+0x1c8>
 8008d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d08:	d00c      	beq.n	8008d24 <UART_SetConfig+0x1b0>
 8008d0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d0e:	d815      	bhi.n	8008d3c <UART_SetConfig+0x1c8>
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d003      	beq.n	8008d1c <UART_SetConfig+0x1a8>
 8008d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d18:	d008      	beq.n	8008d2c <UART_SetConfig+0x1b8>
 8008d1a:	e00f      	b.n	8008d3c <UART_SetConfig+0x1c8>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d22:	e012      	b.n	8008d4a <UART_SetConfig+0x1d6>
 8008d24:	2302      	movs	r3, #2
 8008d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d2a:	e00e      	b.n	8008d4a <UART_SetConfig+0x1d6>
 8008d2c:	2304      	movs	r3, #4
 8008d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d32:	e00a      	b.n	8008d4a <UART_SetConfig+0x1d6>
 8008d34:	2308      	movs	r3, #8
 8008d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d3a:	e006      	b.n	8008d4a <UART_SetConfig+0x1d6>
 8008d3c:	2310      	movs	r3, #16
 8008d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d42:	e002      	b.n	8008d4a <UART_SetConfig+0x1d6>
 8008d44:	2310      	movs	r3, #16
 8008d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8008df8 <UART_SetConfig+0x284>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	f040 80a4 	bne.w	8008e9e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d5a:	2b08      	cmp	r3, #8
 8008d5c:	d823      	bhi.n	8008da6 <UART_SetConfig+0x232>
 8008d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d64 <UART_SetConfig+0x1f0>)
 8008d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d64:	08008d89 	.word	0x08008d89
 8008d68:	08008da7 	.word	0x08008da7
 8008d6c:	08008d91 	.word	0x08008d91
 8008d70:	08008da7 	.word	0x08008da7
 8008d74:	08008d97 	.word	0x08008d97
 8008d78:	08008da7 	.word	0x08008da7
 8008d7c:	08008da7 	.word	0x08008da7
 8008d80:	08008da7 	.word	0x08008da7
 8008d84:	08008d9f 	.word	0x08008d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d88:	f7fd feba 	bl	8006b00 <HAL_RCC_GetPCLK1Freq>
 8008d8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d8e:	e010      	b.n	8008db2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d90:	4b1c      	ldr	r3, [pc, #112]	@ (8008e04 <UART_SetConfig+0x290>)
 8008d92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d94:	e00d      	b.n	8008db2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d96:	f7fd fdff 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8008d9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d9c:	e009      	b.n	8008db2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008da2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008da4:	e005      	b.n	8008db2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008db0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 8137 	beq.w	8009028 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dbe:	4a12      	ldr	r2, [pc, #72]	@ (8008e08 <UART_SetConfig+0x294>)
 8008dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dcc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	005b      	lsls	r3, r3, #1
 8008dd6:	4413      	add	r3, r2
 8008dd8:	69ba      	ldr	r2, [r7, #24]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d305      	bcc.n	8008dea <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d910      	bls.n	8008e0c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008df0:	e11a      	b.n	8009028 <UART_SetConfig+0x4b4>
 8008df2:	bf00      	nop
 8008df4:	cfff69f3 	.word	0xcfff69f3
 8008df8:	40008000 	.word	0x40008000
 8008dfc:	40013800 	.word	0x40013800
 8008e00:	40004400 	.word	0x40004400
 8008e04:	00f42400 	.word	0x00f42400
 8008e08:	0801fae4 	.word	0x0801fae4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0e:	2200      	movs	r2, #0
 8008e10:	60bb      	str	r3, [r7, #8]
 8008e12:	60fa      	str	r2, [r7, #12]
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e18:	4a8e      	ldr	r2, [pc, #568]	@ (8009054 <UART_SetConfig+0x4e0>)
 8008e1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	2200      	movs	r2, #0
 8008e22:	603b      	str	r3, [r7, #0]
 8008e24:	607a      	str	r2, [r7, #4]
 8008e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e2e:	f7f8 f937 	bl	80010a0 <__aeabi_uldivmod>
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	4610      	mov	r0, r2
 8008e38:	4619      	mov	r1, r3
 8008e3a:	f04f 0200 	mov.w	r2, #0
 8008e3e:	f04f 0300 	mov.w	r3, #0
 8008e42:	020b      	lsls	r3, r1, #8
 8008e44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e48:	0202      	lsls	r2, r0, #8
 8008e4a:	6979      	ldr	r1, [r7, #20]
 8008e4c:	6849      	ldr	r1, [r1, #4]
 8008e4e:	0849      	lsrs	r1, r1, #1
 8008e50:	2000      	movs	r0, #0
 8008e52:	460c      	mov	r4, r1
 8008e54:	4605      	mov	r5, r0
 8008e56:	eb12 0804 	adds.w	r8, r2, r4
 8008e5a:	eb43 0905 	adc.w	r9, r3, r5
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	469a      	mov	sl, r3
 8008e66:	4693      	mov	fp, r2
 8008e68:	4652      	mov	r2, sl
 8008e6a:	465b      	mov	r3, fp
 8008e6c:	4640      	mov	r0, r8
 8008e6e:	4649      	mov	r1, r9
 8008e70:	f7f8 f916 	bl	80010a0 <__aeabi_uldivmod>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4613      	mov	r3, r2
 8008e7a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e82:	d308      	bcc.n	8008e96 <UART_SetConfig+0x322>
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e8a:	d204      	bcs.n	8008e96 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6a3a      	ldr	r2, [r7, #32]
 8008e92:	60da      	str	r2, [r3, #12]
 8008e94:	e0c8      	b.n	8009028 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e9c:	e0c4      	b.n	8009028 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ea6:	d168      	bne.n	8008f7a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008ea8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008eac:	2b08      	cmp	r3, #8
 8008eae:	d828      	bhi.n	8008f02 <UART_SetConfig+0x38e>
 8008eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb8 <UART_SetConfig+0x344>)
 8008eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb6:	bf00      	nop
 8008eb8:	08008edd 	.word	0x08008edd
 8008ebc:	08008ee5 	.word	0x08008ee5
 8008ec0:	08008eed 	.word	0x08008eed
 8008ec4:	08008f03 	.word	0x08008f03
 8008ec8:	08008ef3 	.word	0x08008ef3
 8008ecc:	08008f03 	.word	0x08008f03
 8008ed0:	08008f03 	.word	0x08008f03
 8008ed4:	08008f03 	.word	0x08008f03
 8008ed8:	08008efb 	.word	0x08008efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008edc:	f7fd fe10 	bl	8006b00 <HAL_RCC_GetPCLK1Freq>
 8008ee0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ee2:	e014      	b.n	8008f0e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ee4:	f7fd fe1e 	bl	8006b24 <HAL_RCC_GetPCLK2Freq>
 8008ee8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008eea:	e010      	b.n	8008f0e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008eec:	4b5a      	ldr	r3, [pc, #360]	@ (8009058 <UART_SetConfig+0x4e4>)
 8008eee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ef0:	e00d      	b.n	8008f0e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ef2:	f7fd fd51 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8008ef6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ef8:	e009      	b.n	8008f0e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008efe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f00:	e005      	b.n	8008f0e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008f0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 8089 	beq.w	8009028 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f1a:	4a4e      	ldr	r2, [pc, #312]	@ (8009054 <UART_SetConfig+0x4e0>)
 8008f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f20:	461a      	mov	r2, r3
 8008f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f28:	005a      	lsls	r2, r3, #1
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	085b      	lsrs	r3, r3, #1
 8008f30:	441a      	add	r2, r3
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	2b0f      	cmp	r3, #15
 8008f42:	d916      	bls.n	8008f72 <UART_SetConfig+0x3fe>
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f4a:	d212      	bcs.n	8008f72 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	f023 030f 	bic.w	r3, r3, #15
 8008f54:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f56:	6a3b      	ldr	r3, [r7, #32]
 8008f58:	085b      	lsrs	r3, r3, #1
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	f003 0307 	and.w	r3, r3, #7
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	8bfb      	ldrh	r3, [r7, #30]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	8bfa      	ldrh	r2, [r7, #30]
 8008f6e:	60da      	str	r2, [r3, #12]
 8008f70:	e05a      	b.n	8009028 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008f78:	e056      	b.n	8009028 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f7e:	2b08      	cmp	r3, #8
 8008f80:	d827      	bhi.n	8008fd2 <UART_SetConfig+0x45e>
 8008f82:	a201      	add	r2, pc, #4	@ (adr r2, 8008f88 <UART_SetConfig+0x414>)
 8008f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f88:	08008fad 	.word	0x08008fad
 8008f8c:	08008fb5 	.word	0x08008fb5
 8008f90:	08008fbd 	.word	0x08008fbd
 8008f94:	08008fd3 	.word	0x08008fd3
 8008f98:	08008fc3 	.word	0x08008fc3
 8008f9c:	08008fd3 	.word	0x08008fd3
 8008fa0:	08008fd3 	.word	0x08008fd3
 8008fa4:	08008fd3 	.word	0x08008fd3
 8008fa8:	08008fcb 	.word	0x08008fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fac:	f7fd fda8 	bl	8006b00 <HAL_RCC_GetPCLK1Freq>
 8008fb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fb2:	e014      	b.n	8008fde <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fb4:	f7fd fdb6 	bl	8006b24 <HAL_RCC_GetPCLK2Freq>
 8008fb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fba:	e010      	b.n	8008fde <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fbc:	4b26      	ldr	r3, [pc, #152]	@ (8009058 <UART_SetConfig+0x4e4>)
 8008fbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fc0:	e00d      	b.n	8008fde <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fc2:	f7fd fce9 	bl	8006998 <HAL_RCC_GetSysClockFreq>
 8008fc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fc8:	e009      	b.n	8008fde <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fd0:	e005      	b.n	8008fde <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008fdc:	bf00      	nop
    }

    if (pclk != 0U)
 8008fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d021      	beq.n	8009028 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8009054 <UART_SetConfig+0x4e0>)
 8008fea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	085b      	lsrs	r3, r3, #1
 8008ffc:	441a      	add	r2, r3
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	fbb2 f3f3 	udiv	r3, r2, r3
 8009006:	b29b      	uxth	r3, r3
 8009008:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	2b0f      	cmp	r3, #15
 800900e:	d908      	bls.n	8009022 <UART_SetConfig+0x4ae>
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009016:	d204      	bcs.n	8009022 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6a3a      	ldr	r2, [r7, #32]
 800901e:	60da      	str	r2, [r3, #12]
 8009020:	e002      	b.n	8009028 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	2201      	movs	r2, #1
 800902c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	2201      	movs	r2, #1
 8009034:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	2200      	movs	r2, #0
 800903c:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	2200      	movs	r2, #0
 8009042:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8009044:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009048:	4618      	mov	r0, r3
 800904a:	3730      	adds	r7, #48	@ 0x30
 800904c:	46bd      	mov	sp, r7
 800904e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009052:	bf00      	nop
 8009054:	0801fae4 	.word	0x0801fae4
 8009058:	00f42400 	.word	0x00f42400

0800905c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00a      	beq.n	8009086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	430a      	orrs	r2, r1
 8009084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00a      	beq.n	80090a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	430a      	orrs	r2, r1
 80090a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ac:	f003 0304 	and.w	r3, r3, #4
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00a      	beq.n	80090ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ce:	f003 0308 	and.w	r3, r3, #8
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00a      	beq.n	80090ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f0:	f003 0310 	and.w	r3, r3, #16
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00a      	beq.n	800910e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	430a      	orrs	r2, r1
 800910c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009112:	f003 0320 	and.w	r3, r3, #32
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00a      	beq.n	8009130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	430a      	orrs	r2, r1
 800912e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009138:	2b00      	cmp	r3, #0
 800913a:	d01a      	beq.n	8009172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	430a      	orrs	r2, r1
 8009150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009156:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800915a:	d10a      	bne.n	8009172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	430a      	orrs	r2, r1
 8009192:	605a      	str	r2, [r3, #4]
  }
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	bc80      	pop	{r7}
 800919c:	4770      	bx	lr

0800919e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b086      	sub	sp, #24
 80091a2:	af02      	add	r7, sp, #8
 80091a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091ae:	f7f9 f979 	bl	80024a4 <HAL_GetTick>
 80091b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0308 	and.w	r3, r3, #8
 80091be:	2b08      	cmp	r3, #8
 80091c0:	d10e      	bne.n	80091e0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f82f 	bl	8009234 <UART_WaitOnFlagUntilTimeout>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e025      	b.n	800922c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0304 	and.w	r3, r3, #4
 80091ea:	2b04      	cmp	r3, #4
 80091ec:	d10e      	bne.n	800920c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f819 	bl	8009234 <UART_WaitOnFlagUntilTimeout>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009208:	2303      	movs	r3, #3
 800920a:	e00f      	b.n	800922c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2220      	movs	r2, #32
 8009210:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2220      	movs	r2, #32
 8009218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b09c      	sub	sp, #112	@ 0x70
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	603b      	str	r3, [r7, #0]
 8009240:	4613      	mov	r3, r2
 8009242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009244:	e0a9      	b.n	800939a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009246:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924c:	f000 80a5 	beq.w	800939a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009250:	f7f9 f928 	bl	80024a4 <HAL_GetTick>
 8009254:	4602      	mov	r2, r0
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800925c:	429a      	cmp	r2, r3
 800925e:	d302      	bcc.n	8009266 <UART_WaitOnFlagUntilTimeout+0x32>
 8009260:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009262:	2b00      	cmp	r3, #0
 8009264:	d140      	bne.n	80092e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009276:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800927a:	667b      	str	r3, [r7, #100]	@ 0x64
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	461a      	mov	r2, r3
 8009282:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009284:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009286:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800928a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e6      	bne.n	8009266 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3308      	adds	r3, #8
 800929e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092a2:	e853 3f00 	ldrex	r3, [r3]
 80092a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092aa:	f023 0301 	bic.w	r3, r3, #1
 80092ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	3308      	adds	r3, #8
 80092b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80092b8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80092ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092c0:	e841 2300 	strex	r3, r2, [r1]
 80092c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80092c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1e5      	bne.n	8009298 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2220      	movs	r2, #32
 80092d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2220      	movs	r2, #32
 80092d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e069      	b.n	80093bc <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0304 	and.w	r3, r3, #4
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d051      	beq.n	800939a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	69db      	ldr	r3, [r3, #28]
 80092fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009304:	d149      	bne.n	800939a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800930e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800931e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009320:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009324:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800932e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009330:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009334:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800933c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e6      	bne.n	8009310 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3308      	adds	r3, #8
 8009348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	613b      	str	r3, [r7, #16]
   return(result);
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	f023 0301 	bic.w	r3, r3, #1
 8009358:	66bb      	str	r3, [r7, #104]	@ 0x68
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3308      	adds	r3, #8
 8009360:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009362:	623a      	str	r2, [r7, #32]
 8009364:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009366:	69f9      	ldr	r1, [r7, #28]
 8009368:	6a3a      	ldr	r2, [r7, #32]
 800936a:	e841 2300 	strex	r3, r2, [r1]
 800936e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e5      	bne.n	8009342 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2220      	movs	r2, #32
 800937a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2220      	movs	r2, #32
 8009382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2220      	movs	r2, #32
 800938a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009396:	2303      	movs	r3, #3
 8009398:	e010      	b.n	80093bc <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	69da      	ldr	r2, [r3, #28]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	4013      	ands	r3, r2
 80093a4:	68ba      	ldr	r2, [r7, #8]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	bf0c      	ite	eq
 80093aa:	2301      	moveq	r3, #1
 80093ac:	2300      	movne	r3, #0
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	461a      	mov	r2, r3
 80093b2:	79fb      	ldrb	r3, [r7, #7]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	f43f af46 	beq.w	8009246 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3770      	adds	r7, #112	@ 0x70
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b0a3      	sub	sp, #140	@ 0x8c
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	4613      	mov	r3, r2
 80093d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	88fa      	ldrh	r2, [r7, #6]
 80093dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	88fa      	ldrh	r2, [r7, #6]
 80093e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093f6:	d10e      	bne.n	8009416 <UART_Start_Receive_IT+0x52>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d105      	bne.n	800940c <UART_Start_Receive_IT+0x48>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009406:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800940a:	e02d      	b.n	8009468 <UART_Start_Receive_IT+0xa4>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	22ff      	movs	r2, #255	@ 0xff
 8009410:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009414:	e028      	b.n	8009468 <UART_Start_Receive_IT+0xa4>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10d      	bne.n	800943a <UART_Start_Receive_IT+0x76>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d104      	bne.n	8009430 <UART_Start_Receive_IT+0x6c>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	22ff      	movs	r2, #255	@ 0xff
 800942a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800942e:	e01b      	b.n	8009468 <UART_Start_Receive_IT+0xa4>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	227f      	movs	r2, #127	@ 0x7f
 8009434:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009438:	e016      	b.n	8009468 <UART_Start_Receive_IT+0xa4>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009442:	d10d      	bne.n	8009460 <UART_Start_Receive_IT+0x9c>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d104      	bne.n	8009456 <UART_Start_Receive_IT+0x92>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	227f      	movs	r2, #127	@ 0x7f
 8009450:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009454:	e008      	b.n	8009468 <UART_Start_Receive_IT+0xa4>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	223f      	movs	r2, #63	@ 0x3f
 800945a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800945e:	e003      	b.n	8009468 <UART_Start_Receive_IT+0xa4>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2222      	movs	r2, #34	@ 0x22
 8009474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3308      	adds	r3, #8
 800947e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009482:	e853 3f00 	ldrex	r3, [r3]
 8009486:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009488:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800948a:	f043 0301 	orr.w	r3, r3, #1
 800948e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3308      	adds	r3, #8
 8009498:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800949c:	673a      	str	r2, [r7, #112]	@ 0x70
 800949e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80094a2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80094a4:	e841 2300 	strex	r3, r2, [r1]
 80094a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80094aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1e3      	bne.n	8009478 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094b8:	d153      	bne.n	8009562 <UART_Start_Receive_IT+0x19e>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80094c0:	88fa      	ldrh	r2, [r7, #6]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d34d      	bcc.n	8009562 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094ce:	d107      	bne.n	80094e0 <UART_Start_Receive_IT+0x11c>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d103      	bne.n	80094e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	4a4a      	ldr	r2, [pc, #296]	@ (8009604 <UART_Start_Receive_IT+0x240>)
 80094dc:	671a      	str	r2, [r3, #112]	@ 0x70
 80094de:	e002      	b.n	80094e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4a49      	ldr	r2, [pc, #292]	@ (8009608 <UART_Start_Receive_IT+0x244>)
 80094e4:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d01a      	beq.n	800952c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094fe:	e853 3f00 	ldrex	r3, [r3]
 8009502:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800950a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	461a      	mov	r2, r3
 8009514:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009518:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800951a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800951e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009520:	e841 2300 	strex	r3, r2, [r1]
 8009524:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1e4      	bne.n	80094f6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3308      	adds	r3, #8
 8009532:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800953c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009542:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3308      	adds	r3, #8
 800954a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800954c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800954e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009552:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800955a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e5      	bne.n	800952c <UART_Start_Receive_IT+0x168>
 8009560:	e04a      	b.n	80095f8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800956a:	d107      	bne.n	800957c <UART_Start_Receive_IT+0x1b8>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d103      	bne.n	800957c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4a25      	ldr	r2, [pc, #148]	@ (800960c <UART_Start_Receive_IT+0x248>)
 8009578:	671a      	str	r2, [r3, #112]	@ 0x70
 800957a:	e002      	b.n	8009582 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4a24      	ldr	r2, [pc, #144]	@ (8009610 <UART_Start_Receive_IT+0x24c>)
 8009580:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d019      	beq.n	80095c6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959a:	e853 3f00 	ldrex	r3, [r3]
 800959e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80095a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	461a      	mov	r2, r3
 80095ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095b2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80095b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095b8:	e841 2300 	strex	r3, r2, [r1]
 80095bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80095be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1e6      	bne.n	8009592 <UART_Start_Receive_IT+0x1ce>
 80095c4:	e018      	b.n	80095f8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	e853 3f00 	ldrex	r3, [r3]
 80095d2:	613b      	str	r3, [r7, #16]
   return(result);
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f043 0320 	orr.w	r3, r3, #32
 80095da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	461a      	mov	r2, r3
 80095e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095e4:	623b      	str	r3, [r7, #32]
 80095e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e8:	69f9      	ldr	r1, [r7, #28]
 80095ea:	6a3a      	ldr	r2, [r7, #32]
 80095ec:	e841 2300 	strex	r3, r2, [r1]
 80095f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1e6      	bne.n	80095c6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	378c      	adds	r7, #140	@ 0x8c
 80095fe:	46bd      	mov	sp, r7
 8009600:	bc80      	pop	{r7}
 8009602:	4770      	bx	lr
 8009604:	08009ed1 	.word	0x08009ed1
 8009608:	08009bd9 	.word	0x08009bd9
 800960c:	08009a77 	.word	0x08009a77
 8009610:	08009917 	.word	0x08009917

08009614 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009614:	b480      	push	{r7}
 8009616:	b08f      	sub	sp, #60	@ 0x3c
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009622:	6a3b      	ldr	r3, [r7, #32]
 8009624:	e853 3f00 	ldrex	r3, [r3]
 8009628:	61fb      	str	r3, [r7, #28]
   return(result);
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009630:	637b      	str	r3, [r7, #52]	@ 0x34
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800963a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800963c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009642:	e841 2300 	strex	r3, r2, [r1]
 8009646:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1e6      	bne.n	800961c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3308      	adds	r3, #8
 8009654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	e853 3f00 	ldrex	r3, [r3]
 800965c:	60bb      	str	r3, [r7, #8]
   return(result);
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009664:	633b      	str	r3, [r7, #48]	@ 0x30
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3308      	adds	r3, #8
 800966c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800966e:	61ba      	str	r2, [r7, #24]
 8009670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009672:	6979      	ldr	r1, [r7, #20]
 8009674:	69ba      	ldr	r2, [r7, #24]
 8009676:	e841 2300 	strex	r3, r2, [r1]
 800967a:	613b      	str	r3, [r7, #16]
   return(result);
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1e5      	bne.n	800964e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2220      	movs	r2, #32
 8009686:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 800968a:	bf00      	nop
 800968c:	373c      	adds	r7, #60	@ 0x3c
 800968e:	46bd      	mov	sp, r7
 8009690:	bc80      	pop	{r7}
 8009692:	4770      	bx	lr

08009694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009694:	b480      	push	{r7}
 8009696:	b095      	sub	sp, #84	@ 0x54
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096a4:	e853 3f00 	ldrex	r3, [r3]
 80096a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80096bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096c2:	e841 2300 	strex	r3, r2, [r1]
 80096c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1e6      	bne.n	800969c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3308      	adds	r3, #8
 80096d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	e853 3f00 	ldrex	r3, [r3]
 80096dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096e4:	f023 0301 	bic.w	r3, r3, #1
 80096e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3308      	adds	r3, #8
 80096f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096fa:	e841 2300 	strex	r3, r2, [r1]
 80096fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1e3      	bne.n	80096ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800970a:	2b01      	cmp	r3, #1
 800970c:	d118      	bne.n	8009740 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	e853 3f00 	ldrex	r3, [r3]
 800971a:	60bb      	str	r3, [r7, #8]
   return(result);
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	f023 0310 	bic.w	r3, r3, #16
 8009722:	647b      	str	r3, [r7, #68]	@ 0x44
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	461a      	mov	r2, r3
 800972a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800972c:	61bb      	str	r3, [r7, #24]
 800972e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009730:	6979      	ldr	r1, [r7, #20]
 8009732:	69ba      	ldr	r2, [r7, #24]
 8009734:	e841 2300 	strex	r3, r2, [r1]
 8009738:	613b      	str	r3, [r7, #16]
   return(result);
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1e6      	bne.n	800970e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2220      	movs	r2, #32
 8009744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8009754:	bf00      	nop
 8009756:	3754      	adds	r7, #84	@ 0x54
 8009758:	46bd      	mov	sp, r7
 800975a:	bc80      	pop	{r7}
 800975c:	4770      	bx	lr

0800975e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b090      	sub	sp, #64	@ 0x40
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 0320 	and.w	r3, r3, #32
 8009776:	2b00      	cmp	r3, #0
 8009778:	d137      	bne.n	80097ea <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800977a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800977c:	2200      	movs	r2, #0
 800977e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3308      	adds	r3, #8
 8009788:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978c:	e853 3f00 	ldrex	r3, [r3]
 8009790:	623b      	str	r3, [r7, #32]
   return(result);
 8009792:	6a3b      	ldr	r3, [r7, #32]
 8009794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009798:	63bb      	str	r3, [r7, #56]	@ 0x38
 800979a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3308      	adds	r3, #8
 80097a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80097a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097aa:	e841 2300 	strex	r3, r2, [r1]
 80097ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1e5      	bne.n	8009782 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	e853 3f00 	ldrex	r3, [r3]
 80097c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80097cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	461a      	mov	r2, r3
 80097d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d4:	61fb      	str	r3, [r7, #28]
 80097d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d8:	69b9      	ldr	r1, [r7, #24]
 80097da:	69fa      	ldr	r2, [r7, #28]
 80097dc:	e841 2300 	strex	r3, r2, [r1]
 80097e0:	617b      	str	r3, [r7, #20]
   return(result);
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1e6      	bne.n	80097b6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097e8:	e002      	b.n	80097f0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80097ea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80097ec:	f7f9 fce2 	bl	80031b4 <HAL_UART_TxCpltCallback>
}
 80097f0:	bf00      	nop
 80097f2:	3740      	adds	r7, #64	@ 0x40
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009804:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f7ff f996 	bl	8008b38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800980c:	bf00      	nop
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009820:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009828:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009830:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800983c:	2b80      	cmp	r3, #128	@ 0x80
 800983e:	d109      	bne.n	8009854 <UART_DMAError+0x40>
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	2b21      	cmp	r3, #33	@ 0x21
 8009844:	d106      	bne.n	8009854 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	2200      	movs	r2, #0
 800984a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800984e:	6978      	ldr	r0, [r7, #20]
 8009850:	f7ff fee0 	bl	8009614 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800985e:	2b40      	cmp	r3, #64	@ 0x40
 8009860:	d109      	bne.n	8009876 <UART_DMAError+0x62>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2b22      	cmp	r3, #34	@ 0x22
 8009866:	d106      	bne.n	8009876 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	2200      	movs	r2, #0
 800986c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009870:	6978      	ldr	r0, [r7, #20]
 8009872:	f7ff ff0f 	bl	8009694 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800987c:	f043 0210 	orr.w	r2, r3, #16
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009886:	6978      	ldr	r0, [r7, #20]
 8009888:	f7ff f95f 	bl	8008b4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800988c:	bf00      	nop
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f7ff f949 	bl	8008b4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098b8:	bf00      	nop
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b088      	sub	sp, #32
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	e853 3f00 	ldrex	r3, [r3]
 80098d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098dc:	61fb      	str	r3, [r7, #28]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	461a      	mov	r2, r3
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	61bb      	str	r3, [r7, #24]
 80098e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ea:	6979      	ldr	r1, [r7, #20]
 80098ec:	69ba      	ldr	r2, [r7, #24]
 80098ee:	e841 2300 	strex	r3, r2, [r1]
 80098f2:	613b      	str	r3, [r7, #16]
   return(result);
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1e6      	bne.n	80098c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2220      	movs	r2, #32
 80098fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7f9 fc53 	bl	80031b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800990e:	bf00      	nop
 8009910:	3720      	adds	r7, #32
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b096      	sub	sp, #88	@ 0x58
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009924:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800992e:	2b22      	cmp	r3, #34	@ 0x22
 8009930:	f040 8095 	bne.w	8009a5e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800993a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800993e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8009942:	b2d9      	uxtb	r1, r3
 8009944:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009948:	b2da      	uxtb	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800994e:	400a      	ands	r2, r1
 8009950:	b2d2      	uxtb	r2, r2
 8009952:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009958:	1c5a      	adds	r2, r3, #1
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009964:	b29b      	uxth	r3, r3
 8009966:	3b01      	subs	r3, #1
 8009968:	b29a      	uxth	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009976:	b29b      	uxth	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d178      	bne.n	8009a6e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009984:	e853 3f00 	ldrex	r3, [r3]
 8009988:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800998a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800998c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009990:	653b      	str	r3, [r7, #80]	@ 0x50
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800999a:	647b      	str	r3, [r7, #68]	@ 0x44
 800999c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099a2:	e841 2300 	strex	r3, r2, [r1]
 80099a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1e6      	bne.n	800997c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3308      	adds	r3, #8
 80099b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b8:	e853 3f00 	ldrex	r3, [r3]
 80099bc:	623b      	str	r3, [r7, #32]
   return(result);
 80099be:	6a3b      	ldr	r3, [r7, #32]
 80099c0:	f023 0301 	bic.w	r3, r3, #1
 80099c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3308      	adds	r3, #8
 80099cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80099ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80099d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099d6:	e841 2300 	strex	r3, r2, [r1]
 80099da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1e5      	bne.n	80099ae <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2220      	movs	r2, #32
 80099e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d12e      	bne.n	8009a56 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	e853 3f00 	ldrex	r3, [r3]
 8009a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f023 0310 	bic.w	r3, r3, #16
 8009a12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a1c:	61fb      	str	r3, [r7, #28]
 8009a1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a20:	69b9      	ldr	r1, [r7, #24]
 8009a22:	69fa      	ldr	r2, [r7, #28]
 8009a24:	e841 2300 	strex	r3, r2, [r1]
 8009a28:	617b      	str	r3, [r7, #20]
   return(result);
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1e6      	bne.n	80099fe <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	69db      	ldr	r3, [r3, #28]
 8009a36:	f003 0310 	and.w	r3, r3, #16
 8009a3a:	2b10      	cmp	r3, #16
 8009a3c:	d103      	bne.n	8009a46 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2210      	movs	r2, #16
 8009a44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7ff f884 	bl	8008b5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a54:	e00b      	b.n	8009a6e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7f9 fbc2 	bl	80031e0 <HAL_UART_RxCpltCallback>
}
 8009a5c:	e007      	b.n	8009a6e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	699a      	ldr	r2, [r3, #24]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f042 0208 	orr.w	r2, r2, #8
 8009a6c:	619a      	str	r2, [r3, #24]
}
 8009a6e:	bf00      	nop
 8009a70:	3758      	adds	r7, #88	@ 0x58
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b096      	sub	sp, #88	@ 0x58
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a84:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a8e:	2b22      	cmp	r3, #34	@ 0x22
 8009a90:	f040 8095 	bne.w	8009bbe <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a9a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aa2:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009aa4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8009aa8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009aac:	4013      	ands	r3, r2
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ab2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ab8:	1c9a      	adds	r2, r3, #2
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d178      	bne.n	8009bce <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ae4:	e853 3f00 	ldrex	r3, [r3]
 8009ae8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009afa:	643b      	str	r3, [r7, #64]	@ 0x40
 8009afc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b02:	e841 2300 	strex	r3, r2, [r1]
 8009b06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1e6      	bne.n	8009adc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3308      	adds	r3, #8
 8009b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	e853 3f00 	ldrex	r3, [r3]
 8009b1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	f023 0301 	bic.w	r3, r3, #1
 8009b24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	3308      	adds	r3, #8
 8009b2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b36:	e841 2300 	strex	r3, r2, [r1]
 8009b3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1e5      	bne.n	8009b0e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2220      	movs	r2, #32
 8009b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d12e      	bne.n	8009bb6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	e853 3f00 	ldrex	r3, [r3]
 8009b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	f023 0310 	bic.w	r3, r3, #16
 8009b72:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b7c:	61bb      	str	r3, [r7, #24]
 8009b7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b80:	6979      	ldr	r1, [r7, #20]
 8009b82:	69ba      	ldr	r2, [r7, #24]
 8009b84:	e841 2300 	strex	r3, r2, [r1]
 8009b88:	613b      	str	r3, [r7, #16]
   return(result);
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1e6      	bne.n	8009b5e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	69db      	ldr	r3, [r3, #28]
 8009b96:	f003 0310 	and.w	r3, r3, #16
 8009b9a:	2b10      	cmp	r3, #16
 8009b9c:	d103      	bne.n	8009ba6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2210      	movs	r2, #16
 8009ba4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7fe ffd4 	bl	8008b5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bb4:	e00b      	b.n	8009bce <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7f9 fb12 	bl	80031e0 <HAL_UART_RxCpltCallback>
}
 8009bbc:	e007      	b.n	8009bce <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	699a      	ldr	r2, [r3, #24]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f042 0208 	orr.w	r2, r2, #8
 8009bcc:	619a      	str	r2, [r3, #24]
}
 8009bce:	bf00      	nop
 8009bd0:	3758      	adds	r7, #88	@ 0x58
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
	...

08009bd8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b0a6      	sub	sp, #152	@ 0x98
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009be6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	69db      	ldr	r3, [r3, #28]
 8009bf0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c0e:	2b22      	cmp	r3, #34	@ 0x22
 8009c10:	f040 814f 	bne.w	8009eb2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009c1a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c1e:	e0f6      	b.n	8009e0e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c26:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c2a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009c2e:	b2d9      	uxtb	r1, r3
 8009c30:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c3a:	400a      	ands	r2, r1
 8009c3c:	b2d2      	uxtb	r2, r2
 8009c3e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	3b01      	subs	r3, #1
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009c6a:	f003 0307 	and.w	r3, r3, #7
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d053      	beq.n	8009d1a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d011      	beq.n	8009ca2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00b      	beq.n	8009ca2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c98:	f043 0201 	orr.w	r2, r3, #1
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ca2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009ca6:	f003 0302 	and.w	r3, r3, #2
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d011      	beq.n	8009cd2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009cae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00b      	beq.n	8009cd2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cc8:	f043 0204 	orr.w	r2, r3, #4
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009cd6:	f003 0304 	and.w	r3, r3, #4
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d011      	beq.n	8009d02 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00b      	beq.n	8009d02 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2204      	movs	r2, #4
 8009cf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cf8:	f043 0202 	orr.w	r2, r3, #2
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d006      	beq.n	8009d1a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7fe ff1c 	bl	8008b4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d173      	bne.n	8009e0e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d2e:	e853 3f00 	ldrex	r3, [r3]
 8009d32:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009d34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d4a:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009d4e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009d50:	e841 2300 	strex	r3, r2, [r1]
 8009d54:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009d56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1e4      	bne.n	8009d26 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	3308      	adds	r3, #8
 8009d62:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d66:	e853 3f00 	ldrex	r3, [r3]
 8009d6a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d72:	f023 0301 	bic.w	r3, r3, #1
 8009d76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	3308      	adds	r3, #8
 8009d7e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009d80:	657a      	str	r2, [r7, #84]	@ 0x54
 8009d82:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d84:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009d86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009d88:	e841 2300 	strex	r3, r2, [r1]
 8009d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1e3      	bne.n	8009d5c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2220      	movs	r2, #32
 8009d98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d12e      	bne.n	8009e08 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009db8:	e853 3f00 	ldrex	r3, [r3]
 8009dbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc0:	f023 0310 	bic.w	r3, r3, #16
 8009dc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dce:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009dd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009dd6:	e841 2300 	strex	r3, r2, [r1]
 8009dda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1e6      	bne.n	8009db0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	69db      	ldr	r3, [r3, #28]
 8009de8:	f003 0310 	and.w	r3, r3, #16
 8009dec:	2b10      	cmp	r3, #16
 8009dee:	d103      	bne.n	8009df8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2210      	movs	r2, #16
 8009df6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7fe feab 	bl	8008b5c <HAL_UARTEx_RxEventCallback>
 8009e06:	e002      	b.n	8009e0e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f7f9 f9e9 	bl	80031e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d006      	beq.n	8009e24 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009e16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e1a:	f003 0320 	and.w	r3, r3, #32
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f47f aefe 	bne.w	8009c20 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e2a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e2e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d045      	beq.n	8009ec2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009e3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d23e      	bcs.n	8009ec2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3308      	adds	r3, #8
 8009e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	e853 3f00 	ldrex	r3, [r3]
 8009e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3308      	adds	r3, #8
 8009e62:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009e64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e6c:	e841 2300 	strex	r3, r2, [r1]
 8009e70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e5      	bne.n	8009e44 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a14      	ldr	r2, [pc, #80]	@ (8009ecc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009e7c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	e853 3f00 	ldrex	r3, [r3]
 8009e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	f043 0320 	orr.w	r3, r3, #32
 8009e92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	461a      	mov	r2, r3
 8009e9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e9c:	61bb      	str	r3, [r7, #24]
 8009e9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea0:	6979      	ldr	r1, [r7, #20]
 8009ea2:	69ba      	ldr	r2, [r7, #24]
 8009ea4:	e841 2300 	strex	r3, r2, [r1]
 8009ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1e6      	bne.n	8009e7e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009eb0:	e007      	b.n	8009ec2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	699a      	ldr	r2, [r3, #24]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f042 0208 	orr.w	r2, r2, #8
 8009ec0:	619a      	str	r2, [r3, #24]
}
 8009ec2:	bf00      	nop
 8009ec4:	3798      	adds	r7, #152	@ 0x98
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	08009917 	.word	0x08009917

08009ed0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b0a8      	sub	sp, #160	@ 0xa0
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ede:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	69db      	ldr	r3, [r3, #28]
 8009ee8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f06:	2b22      	cmp	r3, #34	@ 0x22
 8009f08:	f040 8153 	bne.w	800a1b2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009f12:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f16:	e0fa      	b.n	800a10e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f1e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009f2a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8009f2e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009f32:	4013      	ands	r3, r2
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009f3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f40:	1c9a      	adds	r2, r3, #2
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f66:	f003 0307 	and.w	r3, r3, #7
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d053      	beq.n	800a016 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d011      	beq.n	8009f9e <UART_RxISR_16BIT_FIFOEN+0xce>
 8009f7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00b      	beq.n	8009f9e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f94:	f043 0201 	orr.w	r2, r3, #1
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009fa2:	f003 0302 	and.w	r3, r3, #2
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d011      	beq.n	8009fce <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00b      	beq.n	8009fce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009fc4:	f043 0204 	orr.w	r2, r3, #4
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009fd2:	f003 0304 	and.w	r3, r3, #4
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d011      	beq.n	8009ffe <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009fda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009fde:	f003 0301 	and.w	r3, r3, #1
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00b      	beq.n	8009ffe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2204      	movs	r2, #4
 8009fec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ff4:	f043 0202 	orr.w	r2, r3, #2
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a004:	2b00      	cmp	r3, #0
 800a006:	d006      	beq.n	800a016 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7fe fd9e 	bl	8008b4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d175      	bne.n	800a10e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a028:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a02a:	e853 3f00 	ldrex	r3, [r3]
 800a02e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a030:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a032:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a036:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a044:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a046:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a048:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a04a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a04c:	e841 2300 	strex	r3, r2, [r1]
 800a050:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a052:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1e4      	bne.n	800a022 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	3308      	adds	r3, #8
 800a05e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a062:	e853 3f00 	ldrex	r3, [r3]
 800a066:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a068:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a06a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a06e:	f023 0301 	bic.w	r3, r3, #1
 800a072:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3308      	adds	r3, #8
 800a07c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a080:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a082:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a084:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a086:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a088:	e841 2300 	strex	r3, r2, [r1]
 800a08c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a08e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1e1      	bne.n	800a058 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2220      	movs	r2, #32
 800a098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d12e      	bne.n	800a108 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b8:	e853 3f00 	ldrex	r3, [r3]
 800a0bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c0:	f023 0310 	bic.w	r3, r3, #16
 800a0c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a0ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0d0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0d6:	e841 2300 	strex	r3, r2, [r1]
 800a0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1e6      	bne.n	800a0b0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	69db      	ldr	r3, [r3, #28]
 800a0e8:	f003 0310 	and.w	r3, r3, #16
 800a0ec:	2b10      	cmp	r3, #16
 800a0ee:	d103      	bne.n	800a0f8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2210      	movs	r2, #16
 800a0f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7fe fd2b 	bl	8008b5c <HAL_UARTEx_RxEventCallback>
 800a106:	e002      	b.n	800a10e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f7f9 f869 	bl	80031e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a10e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a112:	2b00      	cmp	r3, #0
 800a114:	d006      	beq.n	800a124 <UART_RxISR_16BIT_FIFOEN+0x254>
 800a116:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a11a:	f003 0320 	and.w	r3, r3, #32
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f47f aefa 	bne.w	8009f18 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a12a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a12e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a132:	2b00      	cmp	r3, #0
 800a134:	d045      	beq.n	800a1c2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a13c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 800a140:	429a      	cmp	r2, r3
 800a142:	d23e      	bcs.n	800a1c2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	3308      	adds	r3, #8
 800a14a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14e:	e853 3f00 	ldrex	r3, [r3]
 800a152:	623b      	str	r3, [r7, #32]
   return(result);
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a15a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	3308      	adds	r3, #8
 800a162:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a164:	633a      	str	r2, [r7, #48]	@ 0x30
 800a166:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a168:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a16a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a16c:	e841 2300 	strex	r3, r2, [r1]
 800a170:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1e5      	bne.n	800a144 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a14      	ldr	r2, [pc, #80]	@ (800a1cc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a17c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	e853 3f00 	ldrex	r3, [r3]
 800a18a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f043 0320 	orr.w	r3, r3, #32
 800a192:	673b      	str	r3, [r7, #112]	@ 0x70
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	461a      	mov	r2, r3
 800a19a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a19c:	61fb      	str	r3, [r7, #28]
 800a19e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a0:	69b9      	ldr	r1, [r7, #24]
 800a1a2:	69fa      	ldr	r2, [r7, #28]
 800a1a4:	e841 2300 	strex	r3, r2, [r1]
 800a1a8:	617b      	str	r3, [r7, #20]
   return(result);
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1e6      	bne.n	800a17e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a1b0:	e007      	b.n	800a1c2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	699a      	ldr	r2, [r3, #24]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f042 0208 	orr.w	r2, r2, #8
 800a1c0:	619a      	str	r2, [r3, #24]
}
 800a1c2:	bf00      	nop
 800a1c4:	37a0      	adds	r7, #160	@ 0xa0
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	08009a77 	.word	0x08009a77

0800a1d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bc80      	pop	{r7}
 800a1e0:	4770      	bx	lr

0800a1e2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b083      	sub	sp, #12
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a1ea:	bf00      	nop
 800a1ec:	370c      	adds	r7, #12
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bc80      	pop	{r7}
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	bc80      	pop	{r7}
 800a204:	4770      	bx	lr

0800a206 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b088      	sub	sp, #32
 800a20a:	af02      	add	r7, sp, #8
 800a20c:	60f8      	str	r0, [r7, #12]
 800a20e:	1d3b      	adds	r3, r7, #4
 800a210:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d101      	bne.n	800a226 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800a222:	2302      	movs	r3, #2
 800a224:	e046      	b.n	800a2b4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2224      	movs	r2, #36	@ 0x24
 800a232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f022 0201 	bic.w	r2, r2, #1
 800a244:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	430a      	orrs	r2, r1
 800a258:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d105      	bne.n	800a26c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800a260:	1d3b      	adds	r3, r7, #4
 800a262:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f000 f949 	bl	800a4fe <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f042 0201 	orr.w	r2, r2, #1
 800a27a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a27c:	f7f8 f912 	bl	80024a4 <HAL_GetTick>
 800a280:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a282:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f7fe ffcf 	bl	8009234 <UART_WaitOnFlagUntilTimeout>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d002      	beq.n	800a2a2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800a29c:	2303      	movs	r3, #3
 800a29e:	75fb      	strb	r3, [r7, #23]
 800a2a0:	e003      	b.n	800a2aa <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2220      	movs	r2, #32
 800a2a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return status;
 800a2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b089      	sub	sp, #36	@ 0x24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d101      	bne.n	800a2d2 <HAL_UARTEx_EnableStopMode+0x16>
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	e021      	b.n	800a316 <HAL_UARTEx_EnableStopMode+0x5a>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	f043 0302 	orr.w	r3, r3, #2
 800a2ee:	61fb      	str	r3, [r7, #28]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	61bb      	str	r3, [r7, #24]
 800a2fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fc:	6979      	ldr	r1, [r7, #20]
 800a2fe:	69ba      	ldr	r2, [r7, #24]
 800a300:	e841 2300 	strex	r3, r2, [r1]
 800a304:	613b      	str	r3, [r7, #16]
   return(result);
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1e6      	bne.n	800a2da <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3724      	adds	r7, #36	@ 0x24
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bc80      	pop	{r7}
 800a31e:	4770      	bx	lr

0800a320 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d101      	bne.n	800a336 <HAL_UARTEx_EnableFifoMode+0x16>
 800a332:	2302      	movs	r3, #2
 800a334:	e02b      	b.n	800a38e <HAL_UARTEx_EnableFifoMode+0x6e>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2224      	movs	r2, #36	@ 0x24
 800a342:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f022 0201 	bic.w	r2, r2, #1
 800a35c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a364:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800a36c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f8e4 	bl	800a544 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2220      	movs	r2, #32
 800a380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a396:	b480      	push	{r7}
 800a398:	b085      	sub	sp, #20
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d101      	bne.n	800a3ac <HAL_UARTEx_DisableFifoMode+0x16>
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	e027      	b.n	800a3fc <HAL_UARTEx_DisableFifoMode+0x66>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2224      	movs	r2, #36	@ 0x24
 800a3b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f022 0201 	bic.w	r2, r2, #1
 800a3d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a3da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2220      	movs	r2, #32
 800a3ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	bc80      	pop	{r7}
 800a404:	4770      	bx	lr

0800a406 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a416:	2b01      	cmp	r3, #1
 800a418:	d101      	bne.n	800a41e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a41a:	2302      	movs	r3, #2
 800a41c:	e02d      	b.n	800a47a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2224      	movs	r2, #36	@ 0x24
 800a42a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f022 0201 	bic.w	r2, r2, #1
 800a444:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f872 	bl	800a544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2220      	movs	r2, #32
 800a46c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b084      	sub	sp, #16
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a492:	2b01      	cmp	r3, #1
 800a494:	d101      	bne.n	800a49a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a496:	2302      	movs	r3, #2
 800a498:	e02d      	b.n	800a4f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2224      	movs	r2, #36	@ 0x24
 800a4a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f022 0201 	bic.w	r2, r2, #1
 800a4c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f834 	bl	800a544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2220      	movs	r2, #32
 800a4e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b085      	sub	sp, #20
 800a502:	af00      	add	r7, sp, #0
 800a504:	60f8      	str	r0, [r7, #12]
 800a506:	1d3b      	adds	r3, r7, #4
 800a508:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f023 0210 	bic.w	r2, r3, #16
 800a516:	893b      	ldrh	r3, [r7, #8]
 800a518:	4619      	mov	r1, r3
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	430a      	orrs	r2, r1
 800a520:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800a52c:	7abb      	ldrb	r3, [r7, #10]
 800a52e:	061a      	lsls	r2, r3, #24
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	430a      	orrs	r2, r1
 800a536:	605a      	str	r2, [r3, #4]
}
 800a538:	bf00      	nop
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bc80      	pop	{r7}
 800a540:	4770      	bx	lr
	...

0800a544 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a550:	2b00      	cmp	r3, #0
 800a552:	d108      	bne.n	800a566 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a564:	e031      	b.n	800a5ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a566:	2308      	movs	r3, #8
 800a568:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a56a:	2308      	movs	r3, #8
 800a56c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	0e5b      	lsrs	r3, r3, #25
 800a576:	b2db      	uxtb	r3, r3
 800a578:	f003 0307 	and.w	r3, r3, #7
 800a57c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	0f5b      	lsrs	r3, r3, #29
 800a586:	b2db      	uxtb	r3, r3
 800a588:	f003 0307 	and.w	r3, r3, #7
 800a58c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a58e:	7bbb      	ldrb	r3, [r7, #14]
 800a590:	7b3a      	ldrb	r2, [r7, #12]
 800a592:	4910      	ldr	r1, [pc, #64]	@ (800a5d4 <UARTEx_SetNbDataToProcess+0x90>)
 800a594:	5c8a      	ldrb	r2, [r1, r2]
 800a596:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a59a:	7b3a      	ldrb	r2, [r7, #12]
 800a59c:	490e      	ldr	r1, [pc, #56]	@ (800a5d8 <UARTEx_SetNbDataToProcess+0x94>)
 800a59e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
 800a5ae:	7b7a      	ldrb	r2, [r7, #13]
 800a5b0:	4908      	ldr	r1, [pc, #32]	@ (800a5d4 <UARTEx_SetNbDataToProcess+0x90>)
 800a5b2:	5c8a      	ldrb	r2, [r1, r2]
 800a5b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5b8:	7b7a      	ldrb	r2, [r7, #13]
 800a5ba:	4907      	ldr	r1, [pc, #28]	@ (800a5d8 <UARTEx_SetNbDataToProcess+0x94>)
 800a5bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5be:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a5ca:	bf00      	nop
 800a5cc:	3714      	adds	r7, #20
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bc80      	pop	{r7}
 800a5d2:	4770      	bx	lr
 800a5d4:	0801fafc 	.word	0x0801fafc
 800a5d8:	0801fb04 	.word	0x0801fb04

0800a5dc <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a5e0:	f7f7 fe00 	bl	80021e4 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a5e4:	f000 f838 	bl	800a658 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a5e8:	bf00      	nop
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f4:	f011 f8de 	bl	801b7b4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a5f8:	bf00      	nop
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a600:	f3bf 8f4f 	dsb	sy
}
 800a604:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a606:	4b06      	ldr	r3, [pc, #24]	@ (800a620 <__NVIC_SystemReset+0x24>)
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a60e:	4904      	ldr	r1, [pc, #16]	@ (800a620 <__NVIC_SystemReset+0x24>)
 800a610:	4b04      	ldr	r3, [pc, #16]	@ (800a624 <__NVIC_SystemReset+0x28>)
 800a612:	4313      	orrs	r3, r2
 800a614:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a616:	f3bf 8f4f 	dsb	sy
}
 800a61a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a61c:	bf00      	nop
 800a61e:	e7fd      	b.n	800a61c <__NVIC_SystemReset+0x20>
 800a620:	e000ed00 	.word	0xe000ed00
 800a624:	05fa0004 	.word	0x05fa0004

0800a628 <LedAutoOffCallback>:
  */
static void OnSystemReset(void);

/* USER CODE BEGIN PFP */
void LedAutoOffCallback(void *context)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800a630:	2200      	movs	r2, #0
 800a632:	2120      	movs	r1, #32
 800a634:	4806      	ldr	r0, [pc, #24]	@ (800a650 <LedAutoOffCallback+0x28>)
 800a636:	f7fb f973 	bl	8005920 <HAL_GPIO_WritePin>
  APP_LOG(TS_OFF, VLEVEL_M, "[AUTO] LED turned OFF automatically\r\n");
 800a63a:	4b06      	ldr	r3, [pc, #24]	@ (800a654 <LedAutoOffCallback+0x2c>)
 800a63c:	2200      	movs	r2, #0
 800a63e:	2100      	movs	r1, #0
 800a640:	2002      	movs	r0, #2
 800a642:	f011 fd03 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
}
 800a646:	bf00      	nop
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	48000400 	.word	0x48000400
 800a654:	0801ef98 	.word	0x0801ef98

0800a658 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800a65e:	2300      	movs	r3, #0
 800a660:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */
  SensorApp_Init();
 800a662:	f7f7 fb45 	bl	8001cf0 <SensorApp_Init>
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a666:	2300      	movs	r3, #0
 800a668:	9302      	str	r3, [sp, #8]
 800a66a:	2302      	movs	r3, #2
 800a66c:	9301      	str	r3, [sp, #4]
 800a66e:	2301      	movs	r3, #1
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	4b5a      	ldr	r3, [pc, #360]	@ (800a7dc <LoRaWAN_Init+0x184>)
 800a674:	2200      	movs	r2, #0
 800a676:	2100      	movs	r1, #0
 800a678:	2002      	movs	r0, #2
 800a67a:	f011 fce7 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800a67e:	2300      	movs	r3, #0
 800a680:	9302      	str	r3, [sp, #8]
 800a682:	2304      	movs	r3, #4
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	2302      	movs	r3, #2
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	4b55      	ldr	r3, [pc, #340]	@ (800a7e0 <LoRaWAN_Init+0x188>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	2100      	movs	r1, #0
 800a690:	2002      	movs	r0, #2
 800a692:	f011 fcdb 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a696:	2300      	movs	r3, #0
 800a698:	9302      	str	r3, [sp, #8]
 800a69a:	2302      	movs	r3, #2
 800a69c:	9301      	str	r3, [sp, #4]
 800a69e:	2301      	movs	r3, #1
 800a6a0:	9300      	str	r3, [sp, #0]
 800a6a2:	4b50      	ldr	r3, [pc, #320]	@ (800a7e4 <LoRaWAN_Init+0x18c>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	2002      	movs	r0, #2
 800a6aa:	f011 fccf 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800a6ae:	1d3b      	adds	r3, r7, #4
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	2000      	movs	r0, #0
 800a6b4:	f003 facc 	bl	800dc50 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	0e1b      	lsrs	r3, r3, #24
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	461a      	mov	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	0c1b      	lsrs	r3, r3, #16
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	0a1b      	lsrs	r3, r3, #8
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	9302      	str	r3, [sp, #8]
 800a6d0:	9101      	str	r1, [sp, #4]
 800a6d2:	9200      	str	r2, [sp, #0]
 800a6d4:	4b44      	ldr	r3, [pc, #272]	@ (800a7e8 <LoRaWAN_Init+0x190>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2100      	movs	r1, #0
 800a6da:	2002      	movs	r0, #2
 800a6dc:	f011 fcb6 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800a6e0:	1d3b      	adds	r3, r7, #4
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	2001      	movs	r0, #1
 800a6e6:	f003 fab3 	bl	800dc50 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	0e1b      	lsrs	r3, r3, #24
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	0c1b      	lsrs	r3, r3, #16
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	0a1b      	lsrs	r3, r3, #8
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	b2c0      	uxtb	r0, r0
 800a704:	9003      	str	r0, [sp, #12]
 800a706:	9302      	str	r3, [sp, #8]
 800a708:	9101      	str	r1, [sp, #4]
 800a70a:	9200      	str	r2, [sp, #0]
 800a70c:	4b37      	ldr	r3, [pc, #220]	@ (800a7ec <LoRaWAN_Init+0x194>)
 800a70e:	2200      	movs	r2, #0
 800a710:	2100      	movs	r1, #0
 800a712:	2002      	movs	r0, #2
 800a714:	f011 fc9a 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a718:	2300      	movs	r3, #0
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	4b34      	ldr	r3, [pc, #208]	@ (800a7f0 <LoRaWAN_Init+0x198>)
 800a71e:	2200      	movs	r2, #0
 800a720:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a724:	4833      	ldr	r0, [pc, #204]	@ (800a7f4 <LoRaWAN_Init+0x19c>)
 800a726:	f011 f9e3 	bl	801baf0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a72a:	2300      	movs	r3, #0
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	4b32      	ldr	r3, [pc, #200]	@ (800a7f8 <LoRaWAN_Init+0x1a0>)
 800a730:	2200      	movs	r2, #0
 800a732:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a736:	4831      	ldr	r0, [pc, #196]	@ (800a7fc <LoRaWAN_Init+0x1a4>)
 800a738:	f011 f9da 	bl	801baf0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a73c:	2300      	movs	r3, #0
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	4b2f      	ldr	r3, [pc, #188]	@ (800a800 <LoRaWAN_Init+0x1a8>)
 800a742:	2201      	movs	r2, #1
 800a744:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a748:	482e      	ldr	r0, [pc, #184]	@ (800a804 <LoRaWAN_Init+0x1ac>)
 800a74a:	f011 f9d1 	bl	801baf0 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a74e:	2300      	movs	r3, #0
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	4b2d      	ldr	r3, [pc, #180]	@ (800a808 <LoRaWAN_Init+0x1b0>)
 800a754:	2200      	movs	r2, #0
 800a756:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a75a:	482c      	ldr	r0, [pc, #176]	@ (800a80c <LoRaWAN_Init+0x1b4>)
 800a75c:	f011 f9c8 	bl	801baf0 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a760:	4a2b      	ldr	r2, [pc, #172]	@ (800a810 <LoRaWAN_Init+0x1b8>)
 800a762:	2100      	movs	r1, #0
 800a764:	2001      	movs	r0, #1
 800a766:	f011 f921 	bl	801b9ac <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a76a:	4a2a      	ldr	r2, [pc, #168]	@ (800a814 <LoRaWAN_Init+0x1bc>)
 800a76c:	2100      	movs	r1, #0
 800a76e:	2002      	movs	r0, #2
 800a770:	f011 f91c 	bl	801b9ac <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a774:	4a28      	ldr	r2, [pc, #160]	@ (800a818 <LoRaWAN_Init+0x1c0>)
 800a776:	2100      	movs	r1, #0
 800a778:	2004      	movs	r0, #4
 800a77a:	f011 f917 	bl	801b9ac <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a77e:	4a27      	ldr	r2, [pc, #156]	@ (800a81c <LoRaWAN_Init+0x1c4>)
 800a780:	2100      	movs	r1, #0
 800a782:	2008      	movs	r0, #8
 800a784:	f011 f912 	bl	801b9ac <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a788:	f000 fe8e 	bl	800b4a8 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a78c:	f04f 7181 	mov.w	r1, #16908288	@ 0x1020000
 800a790:	4823      	ldr	r0, [pc, #140]	@ (800a820 <LoRaWAN_Init+0x1c8>)
 800a792:	f002 fb43 	bl	800ce1c <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a796:	4823      	ldr	r0, [pc, #140]	@ (800a824 <LoRaWAN_Init+0x1cc>)
 800a798:	f002 fb9e 	bl	800ced8 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a79c:	4819      	ldr	r0, [pc, #100]	@ (800a804 <LoRaWAN_Init+0x1ac>)
 800a79e:	f011 f9dd 	bl	801bb5c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a7a2:	4b21      	ldr	r3, [pc, #132]	@ (800a828 <LoRaWAN_Init+0x1d0>)
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	4a21      	ldr	r2, [pc, #132]	@ (800a82c <LoRaWAN_Init+0x1d4>)
 800a7a8:	7812      	ldrb	r2, [r2, #0]
 800a7aa:	4611      	mov	r1, r2
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f002 fd0f 	bl	800d1d0 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a7b2:	4b1f      	ldr	r3, [pc, #124]	@ (800a830 <LoRaWAN_Init+0x1d8>)
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10b      	bne.n	800a7d2 <LoRaWAN_Init+0x17a>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a7ba:	4b1e      	ldr	r3, [pc, #120]	@ (800a834 <LoRaWAN_Init+0x1dc>)
 800a7bc:	6819      	ldr	r1, [r3, #0]
 800a7be:	2300      	movs	r3, #0
 800a7c0:	9300      	str	r3, [sp, #0]
 800a7c2:	4b1d      	ldr	r3, [pc, #116]	@ (800a838 <LoRaWAN_Init+0x1e0>)
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	481d      	ldr	r0, [pc, #116]	@ (800a83c <LoRaWAN_Init+0x1e4>)
 800a7c8:	f011 f992 	bl	801baf0 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a7cc:	481b      	ldr	r0, [pc, #108]	@ (800a83c <LoRaWAN_Init+0x1e4>)
 800a7ce:	f011 f9c5 	bl	801bb5c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a7d2:	bf00      	nop
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	0801efc0 	.word	0x0801efc0
 800a7e0:	0801efe4 	.word	0x0801efe4
 800a7e4:	0801f008 	.word	0x0801f008
 800a7e8:	0801f02c 	.word	0x0801f02c
 800a7ec:	0801f050 	.word	0x0801f050
 800a7f0:	0800af71 	.word	0x0800af71
 800a7f4:	20000714 	.word	0x20000714
 800a7f8:	0800af83 	.word	0x0800af83
 800a7fc:	2000072c 	.word	0x2000072c
 800a800:	0800af95 	.word	0x0800af95
 800a804:	20000744 	.word	0x20000744
 800a808:	0800b371 	.word	0x0800b371
 800a80c:	20000608 	.word	0x20000608
 800a810:	0800d165 	.word	0x0800d165
 800a814:	0800ab85 	.word	0x0800ab85
 800a818:	0800b395 	.word	0x0800b395
 800a81c:	0800b2f1 	.word	0x0800b2f1
 800a820:	20000024 	.word	0x20000024
 800a824:	20000070 	.word	0x20000070
 800a828:	20000020 	.word	0x20000020
 800a82c:	20000021 	.word	0x20000021
 800a830:	200005ec 	.word	0x200005ec
 800a834:	20000084 	.word	0x20000084
 800a838:	0800af4d 	.word	0x0800af4d
 800a83c:	200005f0 	.word	0x200005f0

0800a840 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	4603      	mov	r3, r0
 800a848:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a84a:	88fb      	ldrh	r3, [r7, #6]
 800a84c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a850:	d104      	bne.n	800a85c <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a852:	2100      	movs	r1, #0
 800a854:	2002      	movs	r0, #2
 800a856:	f011 f8cb 	bl	801b9f0 <UTIL_SEQ_SetTask>
      }
      break;
 800a85a:	e000      	b.n	800a85e <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800a85c:	bf00      	nop
  }
}
 800a85e:	bf00      	nop
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
	...

0800a868 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a86c:	b08f      	sub	sp, #60	@ 0x3c
 800a86e:	af06      	add	r7, sp, #24
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	6039      	str	r1, [r7, #0]
  uint8_t RxPort = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	773b      	strb	r3, [r7, #28]

  if (params != NULL && appData != NULL && appData->Buffer != NULL)
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f000 8179 	beq.w	800ab72 <OnRxData+0x30a>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	f000 8175 	beq.w	800ab72 <OnRxData+0x30a>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f000 8170 	beq.w	800ab72 <OnRxData+0x30a>
  {
    UTIL_TIMER_Start(&RxLedTimer);
 800a892:	4896      	ldr	r0, [pc, #600]	@ (800aaec <OnRxData+0x284>)
 800a894:	f011 f962 	bl	801bb5c <UTIL_TIMER_Start>

    APP_LOG(TS_OFF, VLEVEL_M, ">>> LoRa RX: Received %d bytes on Port %d\r\n", appData->BufferSize, appData->Port);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	785b      	ldrb	r3, [r3, #1]
 800a89c:	461a      	mov	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	9301      	str	r3, [sp, #4]
 800a8a4:	9200      	str	r2, [sp, #0]
 800a8a6:	4b92      	ldr	r3, [pc, #584]	@ (800aaf0 <OnRxData+0x288>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	2002      	movs	r0, #2
 800a8ae:	f011 fbcd 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
    for (uint8_t i = 0; i < appData->BufferSize; i++)
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	77fb      	strb	r3, [r7, #31]
 800a8b6:	e00e      	b.n	800a8d6 <OnRxData+0x6e>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "0x%02X ", appData->Buffer[i]);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	7ffb      	ldrb	r3, [r7, #31]
 800a8be:	4413      	add	r3, r2
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	4b8b      	ldr	r3, [pc, #556]	@ (800aaf4 <OnRxData+0x28c>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	2002      	movs	r0, #2
 800a8cc:	f011 fbbe 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
    for (uint8_t i = 0; i < appData->BufferSize; i++)
 800a8d0:	7ffb      	ldrb	r3, [r7, #31]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	77fb      	strb	r3, [r7, #31]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	785b      	ldrb	r3, [r3, #1]
 800a8da:	7ffa      	ldrb	r2, [r7, #31]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d3eb      	bcc.n	800a8b8 <OnRxData+0x50>
    }
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n");
 800a8e0:	4b85      	ldr	r3, [pc, #532]	@ (800aaf8 <OnRxData+0x290>)
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	2002      	movs	r0, #2
 800a8e8:	f011 fbb0 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>

    bool isAscii = true;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	77bb      	strb	r3, [r7, #30]
    for (uint8_t i = 0; i < appData->BufferSize; i++) {
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	777b      	strb	r3, [r7, #29]
 800a8f4:	e013      	b.n	800a91e <OnRxData+0xb6>
      if (appData->Buffer[i] < 32 || appData->Buffer[i] > 126) {
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685a      	ldr	r2, [r3, #4]
 800a8fa:	7f7b      	ldrb	r3, [r7, #29]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	2b1f      	cmp	r3, #31
 800a902:	d906      	bls.n	800a912 <OnRxData+0xaa>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	685a      	ldr	r2, [r3, #4]
 800a908:	7f7b      	ldrb	r3, [r7, #29]
 800a90a:	4413      	add	r3, r2
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	2b7e      	cmp	r3, #126	@ 0x7e
 800a910:	d902      	bls.n	800a918 <OnRxData+0xb0>
        isAscii = false;
 800a912:	2300      	movs	r3, #0
 800a914:	77bb      	strb	r3, [r7, #30]
        break;
 800a916:	e007      	b.n	800a928 <OnRxData+0xc0>
    for (uint8_t i = 0; i < appData->BufferSize; i++) {
 800a918:	7f7b      	ldrb	r3, [r7, #29]
 800a91a:	3301      	adds	r3, #1
 800a91c:	777b      	strb	r3, [r7, #29]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	785b      	ldrb	r3, [r3, #1]
 800a922:	7f7a      	ldrb	r2, [r7, #29]
 800a924:	429a      	cmp	r2, r3
 800a926:	d3e6      	bcc.n	800a8f6 <OnRxData+0x8e>
      }
    }
    if (isAscii)
 800a928:	7fbb      	ldrb	r3, [r7, #30]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d040      	beq.n	800a9b0 <OnRxData+0x148>
    {
 800a92e:	466b      	mov	r3, sp
 800a930:	461e      	mov	r6, r3
      char msg[appData->BufferSize + 1];
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	785b      	ldrb	r3, [r3, #1]
 800a936:	1c59      	adds	r1, r3, #1
 800a938:	1e4b      	subs	r3, r1, #1
 800a93a:	61bb      	str	r3, [r7, #24]
 800a93c:	460a      	mov	r2, r1
 800a93e:	2300      	movs	r3, #0
 800a940:	4690      	mov	r8, r2
 800a942:	4699      	mov	r9, r3
 800a944:	f04f 0200 	mov.w	r2, #0
 800a948:	f04f 0300 	mov.w	r3, #0
 800a94c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a950:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a954:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a958:	460a      	mov	r2, r1
 800a95a:	2300      	movs	r3, #0
 800a95c:	4614      	mov	r4, r2
 800a95e:	461d      	mov	r5, r3
 800a960:	f04f 0200 	mov.w	r2, #0
 800a964:	f04f 0300 	mov.w	r3, #0
 800a968:	00eb      	lsls	r3, r5, #3
 800a96a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a96e:	00e2      	lsls	r2, r4, #3
 800a970:	460b      	mov	r3, r1
 800a972:	3307      	adds	r3, #7
 800a974:	08db      	lsrs	r3, r3, #3
 800a976:	00db      	lsls	r3, r3, #3
 800a978:	ebad 0d03 	sub.w	sp, sp, r3
 800a97c:	ab06      	add	r3, sp, #24
 800a97e:	3300      	adds	r3, #0
 800a980:	617b      	str	r3, [r7, #20]
      memcpy(msg, appData->Buffer, appData->BufferSize);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6859      	ldr	r1, [r3, #4]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	785b      	ldrb	r3, [r3, #1]
 800a98a:	461a      	mov	r2, r3
 800a98c:	6978      	ldr	r0, [r7, #20]
 800a98e:	f012 fc46 	bl	801d21e <memcpy>
      msg[appData->BufferSize] = '\0';
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	785b      	ldrb	r3, [r3, #1]
 800a996:	461a      	mov	r2, r3
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	2100      	movs	r1, #0
 800a99c:	5499      	strb	r1, [r3, r2]
      APP_LOG(TS_OFF, VLEVEL_M, ">>> ASCII: %s\r\n", msg);
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	4b56      	ldr	r3, [pc, #344]	@ (800aafc <OnRxData+0x294>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	2002      	movs	r0, #2
 800a9aa:	f011 fb4f 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
 800a9ae:	46b5      	mov	sp, r6
    }

    RxPort = appData->Port;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	773b      	strb	r3, [r7, #28]

    if (params->IsMcpsIndication)
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f000 80b5 	beq.w	800ab2a <OnRxData+0x2c2>
    {
      switch (appData->Port)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	d021      	beq.n	800aa0c <OnRxData+0x1a4>
 800a9c8:	2b03      	cmp	r3, #3
 800a9ca:	f040 808c 	bne.w	800aae6 <OnRxData+0x27e>
      {
        case LORAWAN_SWITCH_CLASS_PORT:
          if (appData->BufferSize == 1)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	785b      	ldrb	r3, [r3, #1]
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	f040 80a8 	bne.w	800ab28 <OnRxData+0x2c0>
          {
            switch (appData->Buffer[0])
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d00e      	beq.n	800aa00 <OnRxData+0x198>
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	dc10      	bgt.n	800aa08 <OnRxData+0x1a0>
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d002      	beq.n	800a9f0 <OnRxData+0x188>
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d004      	beq.n	800a9f8 <OnRxData+0x190>
            {
              case 0: LmHandlerRequestClass(CLASS_A); break;
              case 1: LmHandlerRequestClass(CLASS_B); break;
              case 2: LmHandlerRequestClass(CLASS_C); break;
              default: break;
 800a9ee:	e00b      	b.n	800aa08 <OnRxData+0x1a0>
              case 0: LmHandlerRequestClass(CLASS_A); break;
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	f002 fd79 	bl	800d4e8 <LmHandlerRequestClass>
 800a9f6:	e008      	b.n	800aa0a <OnRxData+0x1a2>
              case 1: LmHandlerRequestClass(CLASS_B); break;
 800a9f8:	2001      	movs	r0, #1
 800a9fa:	f002 fd75 	bl	800d4e8 <LmHandlerRequestClass>
 800a9fe:	e004      	b.n	800aa0a <OnRxData+0x1a2>
              case 2: LmHandlerRequestClass(CLASS_C); break;
 800aa00:	2002      	movs	r0, #2
 800aa02:	f002 fd71 	bl	800d4e8 <LmHandlerRequestClass>
 800aa06:	e000      	b.n	800aa0a <OnRxData+0x1a2>
              default: break;
 800aa08:	bf00      	nop
            }
          }
          break;
 800aa0a:	e08d      	b.n	800ab28 <OnRxData+0x2c0>

        case LORAWAN_USER_APP_PORT:
        {
          if (appData->BufferSize == 1)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	785b      	ldrb	r3, [r3, #1]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d12a      	bne.n	800aa6a <OnRxData+0x202>
          {
            switch (appData->Buffer[0])
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d002      	beq.n	800aa24 <OnRxData+0x1bc>
 800aa1e:	2b03      	cmp	r3, #3
 800aa20:	d00c      	beq.n	800aa3c <OnRxData+0x1d4>
 800aa22:	e017      	b.n	800aa54 <OnRxData+0x1ec>
            {
              case 0x01:
                HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800aa24:	2201      	movs	r2, #1
 800aa26:	2120      	movs	r1, #32
 800aa28:	4835      	ldr	r0, [pc, #212]	@ (800ab00 <OnRxData+0x298>)
 800aa2a:	f7fa ff79 	bl	8005920 <HAL_GPIO_WritePin>
                APP_LOG(TS_OFF, VLEVEL_M, "[CMD] LED turned ON (Manual)\r\n");
 800aa2e:	4b35      	ldr	r3, [pc, #212]	@ (800ab04 <OnRxData+0x29c>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	2100      	movs	r1, #0
 800aa34:	2002      	movs	r0, #2
 800aa36:	f011 fb09 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
                break;
 800aa3a:	e053      	b.n	800aae4 <OnRxData+0x27c>

              case 0x03:
                HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	2120      	movs	r1, #32
 800aa40:	482f      	ldr	r0, [pc, #188]	@ (800ab00 <OnRxData+0x298>)
 800aa42:	f7fa ff6d 	bl	8005920 <HAL_GPIO_WritePin>
                APP_LOG(TS_OFF, VLEVEL_M, "[CMD] LED turned OFF (Immediately)\r\n");
 800aa46:	4b30      	ldr	r3, [pc, #192]	@ (800ab08 <OnRxData+0x2a0>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	2002      	movs	r0, #2
 800aa4e:	f011 fafd 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
                break;
 800aa52:	e047      	b.n	800aae4 <OnRxData+0x27c>

              default:
                APP_LOG(TS_OFF, VLEVEL_M, "[WARN] Unknown 1-byte command: 0x%02X\r\n", appData->Buffer[0]);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	4b2b      	ldr	r3, [pc, #172]	@ (800ab0c <OnRxData+0x2a4>)
 800aa5e:	2200      	movs	r2, #0
 800aa60:	2100      	movs	r1, #0
 800aa62:	2002      	movs	r0, #2
 800aa64:	f011 faf2 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
                break;
 800aa68:	e03c      	b.n	800aae4 <OnRxData+0x27c>
            }
          }
          else if (appData->BufferSize == 2 && appData->Buffer[0] == 0x02)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	785b      	ldrb	r3, [r3, #1]
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d12e      	bne.n	800aad0 <OnRxData+0x268>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d129      	bne.n	800aad0 <OnRxData+0x268>
          {
            uint8_t duration_min = appData->Buffer[1];
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	785b      	ldrb	r3, [r3, #1]
 800aa82:	74fb      	strb	r3, [r7, #19]
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800aa84:	2201      	movs	r2, #1
 800aa86:	2120      	movs	r1, #32
 800aa88:	481d      	ldr	r0, [pc, #116]	@ (800ab00 <OnRxData+0x298>)
 800aa8a:	f7fa ff49 	bl	8005920 <HAL_GPIO_WritePin>
            APP_LOG(TS_OFF, VLEVEL_M, "[CMD] LED turned ON (Auto %d minute%s)\r\n",
 800aa8e:	7cfb      	ldrb	r3, [r7, #19]
 800aa90:	7cfa      	ldrb	r2, [r7, #19]
 800aa92:	2a01      	cmp	r2, #1
 800aa94:	d901      	bls.n	800aa9a <OnRxData+0x232>
 800aa96:	4a1e      	ldr	r2, [pc, #120]	@ (800ab10 <OnRxData+0x2a8>)
 800aa98:	e000      	b.n	800aa9c <OnRxData+0x234>
 800aa9a:	4a1e      	ldr	r2, [pc, #120]	@ (800ab14 <OnRxData+0x2ac>)
 800aa9c:	9201      	str	r2, [sp, #4]
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	4b1d      	ldr	r3, [pc, #116]	@ (800ab18 <OnRxData+0x2b0>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	2002      	movs	r0, #2
 800aaa8:	f011 fad0 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
                    duration_min, duration_min > 1 ? "s" : "");

            uint32_t duration_ms = duration_min * 60 * 1000;
 800aaac:	7cfb      	ldrb	r3, [r7, #19]
 800aaae:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800aab2:	fb02 f303 	mul.w	r3, r2, r3
 800aab6:	60fb      	str	r3, [r7, #12]

            static UTIL_TIMER_Object_t LedAutoOffTimer;
            UTIL_TIMER_Create(&LedAutoOffTimer, duration_ms, UTIL_TIMER_ONESHOT, LedAutoOffCallback, NULL);
 800aab8:	2300      	movs	r3, #0
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	4b17      	ldr	r3, [pc, #92]	@ (800ab1c <OnRxData+0x2b4>)
 800aabe:	2200      	movs	r2, #0
 800aac0:	68f9      	ldr	r1, [r7, #12]
 800aac2:	4817      	ldr	r0, [pc, #92]	@ (800ab20 <OnRxData+0x2b8>)
 800aac4:	f011 f814 	bl	801baf0 <UTIL_TIMER_Create>
            UTIL_TIMER_Start(&LedAutoOffTimer);
 800aac8:	4815      	ldr	r0, [pc, #84]	@ (800ab20 <OnRxData+0x2b8>)
 800aaca:	f011 f847 	bl	801bb5c <UTIL_TIMER_Start>
          {
 800aace:	e009      	b.n	800aae4 <OnRxData+0x27c>
          }
          else
          {
            APP_LOG(TS_OFF, VLEVEL_M, "[ERROR] Invalid payload format (size = %d)\r\n", appData->BufferSize);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	785b      	ldrb	r3, [r3, #1]
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	4b13      	ldr	r3, [pc, #76]	@ (800ab24 <OnRxData+0x2bc>)
 800aad8:	2200      	movs	r2, #0
 800aada:	2100      	movs	r1, #0
 800aadc:	2002      	movs	r0, #2
 800aade:	f011 fab5 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
          }
          break;
 800aae2:	e022      	b.n	800ab2a <OnRxData+0x2c2>
 800aae4:	e021      	b.n	800ab2a <OnRxData+0x2c2>
        }

        default:
          break;
 800aae6:	bf00      	nop
 800aae8:	e01f      	b.n	800ab2a <OnRxData+0x2c2>
 800aaea:	bf00      	nop
 800aaec:	2000072c 	.word	0x2000072c
 800aaf0:	0801f074 	.word	0x0801f074
 800aaf4:	0801f0a0 	.word	0x0801f0a0
 800aaf8:	0801f0a8 	.word	0x0801f0a8
 800aafc:	0801f0ac 	.word	0x0801f0ac
 800ab00:	48000400 	.word	0x48000400
 800ab04:	0801f0bc 	.word	0x0801f0bc
 800ab08:	0801f0dc 	.word	0x0801f0dc
 800ab0c:	0801f104 	.word	0x0801f104
 800ab10:	0801f12c 	.word	0x0801f12c
 800ab14:	0801f130 	.word	0x0801f130
 800ab18:	0801f134 	.word	0x0801f134
 800ab1c:	0800a629 	.word	0x0800a629
 800ab20:	2000075c 	.word	0x2000075c
 800ab24:	0801f160 	.word	0x0801f160
          break;
 800ab28:	bf00      	nop
      }
    }

    if (params->RxSlot < RX_SLOT_NONE)
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	7c1b      	ldrb	r3, [r3, #16]
 800ab2e:	2b05      	cmp	r3, #5
 800ab30:	d81f      	bhi.n	800ab72 <OnRxData+0x30a>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	7f3a      	ldrb	r2, [r7, #28]
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800ab3e:	460c      	mov	r4, r1
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	7c09      	ldrb	r1, [r1, #16]
 800ab44:	4608      	mov	r0, r1
 800ab46:	490d      	ldr	r1, [pc, #52]	@ (800ab7c <OnRxData+0x314>)
 800ab48:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ab4c:	6838      	ldr	r0, [r7, #0]
 800ab4e:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800ab52:	4605      	mov	r5, r0
 800ab54:	6838      	ldr	r0, [r7, #0]
 800ab56:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800ab5a:	9005      	str	r0, [sp, #20]
 800ab5c:	9504      	str	r5, [sp, #16]
 800ab5e:	9103      	str	r1, [sp, #12]
 800ab60:	9402      	str	r4, [sp, #8]
 800ab62:	9201      	str	r2, [sp, #4]
 800ab64:	9300      	str	r3, [sp, #0]
 800ab66:	4b06      	ldr	r3, [pc, #24]	@ (800ab80 <OnRxData+0x318>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	2003      	movs	r0, #3
 800ab6e:	f011 fa6d 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
}
 800ab72:	bf00      	nop
 800ab74:	3724      	adds	r7, #36	@ 0x24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab7c:	20000008 	.word	0x20000008
 800ab80:	0801f190 	.word	0x0801f190

0800ab84 <SendTxData>:



static void SendTxData(void)
{
 800ab84:	b590      	push	{r4, r7, lr}
 800ab86:	b08b      	sub	sp, #44	@ 0x2c
 800ab88:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800ab8a:	23ff      	movs	r3, #255	@ 0xff
 800ab8c:	75fb      	strb	r3, [r7, #23]
  uint8_t batteryLevel = GetBatteryLevel();
 800ab8e:	f7f7 fb5d 	bl	800224c <GetBatteryLevel>
 800ab92:	4603      	mov	r3, r0
 800ab94:	75bb      	strb	r3, [r7, #22]
  uint8_t i = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	77fb      	strb	r3, [r7, #31]
  //sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	61bb      	str	r3, [r7, #24]

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	82bb      	strh	r3, [r7, #20]
  int16_t temperature = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	827b      	strh	r3, [r7, #18]
  uint16_t humidity = 0;
 800aba6:	2300      	movs	r3, #0
 800aba8:	823b      	strh	r3, [r7, #16]
  int32_t latitude = 0;
 800abaa:	2300      	movs	r3, #0
 800abac:	60fb      	str	r3, [r7, #12]
  int32_t longitude = 0;
 800abae:	2300      	movs	r3, #0
 800abb0:	60bb      	str	r3, [r7, #8]
  uint16_t altitudeGps = 0;
 800abb2:	2300      	movs	r3, #0
 800abb4:	80fb      	strh	r3, [r7, #6]
#endif /* CAYENNE_LPP */

  SensorApp_StartRead();
 800abb6:	f7f7 f8a7 	bl	8001d08 <SensorApp_StartRead>
  HAL_Delay(300);  // รอ sensor ตอบกลับ ถ้ายังไม่ใช้ interrupt จริง 100% (ปรับได้ตาม latency)
 800abba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800abbe:	f7f7 fc85 	bl	80024cc <HAL_Delay>

  if (SensorApp_IsReady()) {
 800abc2:	f7f7 f8c5 	bl	8001d50 <SensorApp_IsReady>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	f000 80c5 	beq.w	800ad58 <SendTxData+0x1d4>
      SensorApp_GetData(&g_sensor_data);
 800abce:	487a      	ldr	r0, [pc, #488]	@ (800adb8 <SendTxData+0x234>)
 800abd0:	f7f7 f8ce 	bl	8001d70 <SensorApp_GetData>
  } else {
      APP_LOG(TS_OFF, VLEVEL_M, "[WARN] Sensor not ready!\r\n");
      return;
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800abd4:	7dbb      	ldrb	r3, [r7, #22]
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	4b78      	ldr	r3, [pc, #480]	@ (800adbc <SendTxData+0x238>)
 800abda:	2201      	movs	r2, #1
 800abdc:	2100      	movs	r1, #0
 800abde:	2002      	movs	r0, #2
 800abe0:	f011 fa34 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
  //APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));

  AppData.Port = LORAWAN_USER_APP_PORT;
 800abe4:	4b76      	ldr	r3, [pc, #472]	@ (800adc0 <SendTxData+0x23c>)
 800abe6:	2202      	movs	r2, #2
 800abe8:	701a      	strb	r2, [r3, #0]
  //humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
  //temperature = (int16_t)(sensor_data.temperature);
  //pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */


  AppData.Buffer[i++] = (int16_t)(g_sensor_data.temperature * 100) >> 8;
 800abea:	4b73      	ldr	r3, [pc, #460]	@ (800adb8 <SendTxData+0x234>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4975      	ldr	r1, [pc, #468]	@ (800adc4 <SendTxData+0x240>)
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7f6 f8bf 	bl	8000d74 <__aeabi_fmul>
 800abf6:	4603      	mov	r3, r0
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7f6 fa0b 	bl	8001014 <__aeabi_f2iz>
 800abfe:	4603      	mov	r3, r0
 800ac00:	b21b      	sxth	r3, r3
 800ac02:	121b      	asrs	r3, r3, #8
 800ac04:	b219      	sxth	r1, r3
 800ac06:	4b6e      	ldr	r3, [pc, #440]	@ (800adc0 <SendTxData+0x23c>)
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	7ffb      	ldrb	r3, [r7, #31]
 800ac0c:	1c58      	adds	r0, r3, #1
 800ac0e:	77f8      	strb	r0, [r7, #31]
 800ac10:	4413      	add	r3, r2
 800ac12:	b2ca      	uxtb	r2, r1
 800ac14:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (int16_t)(g_sensor_data.temperature * 100) & 0xFF;
 800ac16:	4b68      	ldr	r3, [pc, #416]	@ (800adb8 <SendTxData+0x234>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	496a      	ldr	r1, [pc, #424]	@ (800adc4 <SendTxData+0x240>)
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7f6 f8a9 	bl	8000d74 <__aeabi_fmul>
 800ac22:	4603      	mov	r3, r0
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7f6 f9f5 	bl	8001014 <__aeabi_f2iz>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	b219      	sxth	r1, r3
 800ac2e:	4b64      	ldr	r3, [pc, #400]	@ (800adc0 <SendTxData+0x23c>)
 800ac30:	685a      	ldr	r2, [r3, #4]
 800ac32:	7ffb      	ldrb	r3, [r7, #31]
 800ac34:	1c58      	adds	r0, r3, #1
 800ac36:	77f8      	strb	r0, [r7, #31]
 800ac38:	4413      	add	r3, r2
 800ac3a:	b2ca      	uxtb	r2, r1
 800ac3c:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = (uint16_t)(g_sensor_data.humidity * 100) >> 8;
 800ac3e:	4b5e      	ldr	r3, [pc, #376]	@ (800adb8 <SendTxData+0x234>)
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	4960      	ldr	r1, [pc, #384]	@ (800adc4 <SendTxData+0x240>)
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7f6 f895 	bl	8000d74 <__aeabi_fmul>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7f6 fa07 	bl	8001060 <__aeabi_f2uiz>
 800ac52:	4603      	mov	r3, r0
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	0a1b      	lsrs	r3, r3, #8
 800ac58:	b299      	uxth	r1, r3
 800ac5a:	4b59      	ldr	r3, [pc, #356]	@ (800adc0 <SendTxData+0x23c>)
 800ac5c:	685a      	ldr	r2, [r3, #4]
 800ac5e:	7ffb      	ldrb	r3, [r7, #31]
 800ac60:	1c58      	adds	r0, r3, #1
 800ac62:	77f8      	strb	r0, [r7, #31]
 800ac64:	4413      	add	r3, r2
 800ac66:	b2ca      	uxtb	r2, r1
 800ac68:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint16_t)(g_sensor_data.humidity * 100) & 0xFF;
 800ac6a:	4b53      	ldr	r3, [pc, #332]	@ (800adb8 <SendTxData+0x234>)
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	4955      	ldr	r1, [pc, #340]	@ (800adc4 <SendTxData+0x240>)
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7f6 f87f 	bl	8000d74 <__aeabi_fmul>
 800ac76:	4603      	mov	r3, r0
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7f6 f9f1 	bl	8001060 <__aeabi_f2uiz>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	b299      	uxth	r1, r3
 800ac82:	4b4f      	ldr	r3, [pc, #316]	@ (800adc0 <SendTxData+0x23c>)
 800ac84:	685a      	ldr	r2, [r3, #4]
 800ac86:	7ffb      	ldrb	r3, [r7, #31]
 800ac88:	1c58      	adds	r0, r3, #1
 800ac8a:	77f8      	strb	r0, [r7, #31]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	b2ca      	uxtb	r2, r1
 800ac90:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = (uint16_t)(g_sensor_data.pressure * 10) >> 8;
 800ac92:	4b49      	ldr	r3, [pc, #292]	@ (800adb8 <SendTxData+0x234>)
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	494c      	ldr	r1, [pc, #304]	@ (800adc8 <SendTxData+0x244>)
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7f6 f86b 	bl	8000d74 <__aeabi_fmul>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7f6 f9dd 	bl	8001060 <__aeabi_f2uiz>
 800aca6:	4603      	mov	r3, r0
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	0a1b      	lsrs	r3, r3, #8
 800acac:	b299      	uxth	r1, r3
 800acae:	4b44      	ldr	r3, [pc, #272]	@ (800adc0 <SendTxData+0x23c>)
 800acb0:	685a      	ldr	r2, [r3, #4]
 800acb2:	7ffb      	ldrb	r3, [r7, #31]
 800acb4:	1c58      	adds	r0, r3, #1
 800acb6:	77f8      	strb	r0, [r7, #31]
 800acb8:	4413      	add	r3, r2
 800acba:	b2ca      	uxtb	r2, r1
 800acbc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint16_t)(g_sensor_data.pressure * 10) & 0xFF;
 800acbe:	4b3e      	ldr	r3, [pc, #248]	@ (800adb8 <SendTxData+0x234>)
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	4941      	ldr	r1, [pc, #260]	@ (800adc8 <SendTxData+0x244>)
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7f6 f855 	bl	8000d74 <__aeabi_fmul>
 800acca:	4603      	mov	r3, r0
 800accc:	4618      	mov	r0, r3
 800acce:	f7f6 f9c7 	bl	8001060 <__aeabi_f2uiz>
 800acd2:	4603      	mov	r3, r0
 800acd4:	b299      	uxth	r1, r3
 800acd6:	4b3a      	ldr	r3, [pc, #232]	@ (800adc0 <SendTxData+0x23c>)
 800acd8:	685a      	ldr	r2, [r3, #4]
 800acda:	7ffb      	ldrb	r3, [r7, #31]
 800acdc:	1c58      	adds	r0, r3, #1
 800acde:	77f8      	strb	r0, [r7, #31]
 800ace0:	4413      	add	r3, r2
 800ace2:	b2ca      	uxtb	r2, r1
 800ace4:	701a      	strb	r2, [r3, #0]

  AppData.BufferSize = i;
 800ace6:	4a36      	ldr	r2, [pc, #216]	@ (800adc0 <SendTxData+0x23c>)
 800ace8:	7ffb      	ldrb	r3, [r7, #31]
 800acea:	7053      	strb	r3, [r2, #1]

  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800acec:	8abb      	ldrh	r3, [r7, #20]
 800acee:	0a1b      	lsrs	r3, r3, #8
 800acf0:	b299      	uxth	r1, r3
 800acf2:	4b33      	ldr	r3, [pc, #204]	@ (800adc0 <SendTxData+0x23c>)
 800acf4:	685a      	ldr	r2, [r3, #4]
 800acf6:	7ffb      	ldrb	r3, [r7, #31]
 800acf8:	1c58      	adds	r0, r3, #1
 800acfa:	77f8      	strb	r0, [r7, #31]
 800acfc:	4413      	add	r3, r2
 800acfe:	b2ca      	uxtb	r2, r1
 800ad00:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800ad02:	4b2f      	ldr	r3, [pc, #188]	@ (800adc0 <SendTxData+0x23c>)
 800ad04:	685a      	ldr	r2, [r3, #4]
 800ad06:	7ffb      	ldrb	r3, [r7, #31]
 800ad08:	1c59      	adds	r1, r3, #1
 800ad0a:	77f9      	strb	r1, [r7, #31]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	8aba      	ldrh	r2, [r7, #20]
 800ad10:	b2d2      	uxtb	r2, r2
 800ad12:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800ad14:	4b2a      	ldr	r3, [pc, #168]	@ (800adc0 <SendTxData+0x23c>)
 800ad16:	685a      	ldr	r2, [r3, #4]
 800ad18:	7ffb      	ldrb	r3, [r7, #31]
 800ad1a:	1c59      	adds	r1, r3, #1
 800ad1c:	77f9      	strb	r1, [r7, #31]
 800ad1e:	4413      	add	r3, r2
 800ad20:	8a7a      	ldrh	r2, [r7, #18]
 800ad22:	b2d2      	uxtb	r2, r2
 800ad24:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800ad26:	8a3b      	ldrh	r3, [r7, #16]
 800ad28:	0a1b      	lsrs	r3, r3, #8
 800ad2a:	b299      	uxth	r1, r3
 800ad2c:	4b24      	ldr	r3, [pc, #144]	@ (800adc0 <SendTxData+0x23c>)
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	7ffb      	ldrb	r3, [r7, #31]
 800ad32:	1c58      	adds	r0, r3, #1
 800ad34:	77f8      	strb	r0, [r7, #31]
 800ad36:	4413      	add	r3, r2
 800ad38:	b2ca      	uxtb	r2, r1
 800ad3a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800ad3c:	4b20      	ldr	r3, [pc, #128]	@ (800adc0 <SendTxData+0x23c>)
 800ad3e:	685a      	ldr	r2, [r3, #4]
 800ad40:	7ffb      	ldrb	r3, [r7, #31]
 800ad42:	1c59      	adds	r1, r3, #1
 800ad44:	77f9      	strb	r1, [r7, #31]
 800ad46:	4413      	add	r3, r2
 800ad48:	8a3a      	ldrh	r2, [r7, #16]
 800ad4a:	b2d2      	uxtb	r2, r2
 800ad4c:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800ad4e:	4b1f      	ldr	r3, [pc, #124]	@ (800adcc <SendTxData+0x248>)
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	2b08      	cmp	r3, #8
 800ad54:	d00f      	beq.n	800ad76 <SendTxData+0x1f2>
 800ad56:	e006      	b.n	800ad66 <SendTxData+0x1e2>
      APP_LOG(TS_OFF, VLEVEL_M, "[WARN] Sensor not ready!\r\n");
 800ad58:	4b1d      	ldr	r3, [pc, #116]	@ (800add0 <SendTxData+0x24c>)
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	2002      	movs	r0, #2
 800ad60:	f011 f974 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
      return;
 800ad64:	e0dc      	b.n	800af20 <SendTxData+0x39c>
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800ad66:	4b19      	ldr	r3, [pc, #100]	@ (800adcc <SendTxData+0x248>)
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d003      	beq.n	800ad76 <SendTxData+0x1f2>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800ad6e:	4b17      	ldr	r3, [pc, #92]	@ (800adcc <SendTxData+0x248>)
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d12e      	bne.n	800add4 <SendTxData+0x250>
  {
    AppData.Buffer[i++] = 0;
 800ad76:	4b12      	ldr	r3, [pc, #72]	@ (800adc0 <SendTxData+0x23c>)
 800ad78:	685a      	ldr	r2, [r3, #4]
 800ad7a:	7ffb      	ldrb	r3, [r7, #31]
 800ad7c:	1c59      	adds	r1, r3, #1
 800ad7e:	77f9      	strb	r1, [r7, #31]
 800ad80:	4413      	add	r3, r2
 800ad82:	2200      	movs	r2, #0
 800ad84:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800ad86:	4b0e      	ldr	r3, [pc, #56]	@ (800adc0 <SendTxData+0x23c>)
 800ad88:	685a      	ldr	r2, [r3, #4]
 800ad8a:	7ffb      	ldrb	r3, [r7, #31]
 800ad8c:	1c59      	adds	r1, r3, #1
 800ad8e:	77f9      	strb	r1, [r7, #31]
 800ad90:	4413      	add	r3, r2
 800ad92:	2200      	movs	r2, #0
 800ad94:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800ad96:	4b0a      	ldr	r3, [pc, #40]	@ (800adc0 <SendTxData+0x23c>)
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	7ffb      	ldrb	r3, [r7, #31]
 800ad9c:	1c59      	adds	r1, r3, #1
 800ad9e:	77f9      	strb	r1, [r7, #31]
 800ada0:	4413      	add	r3, r2
 800ada2:	2200      	movs	r2, #0
 800ada4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800ada6:	4b06      	ldr	r3, [pc, #24]	@ (800adc0 <SendTxData+0x23c>)
 800ada8:	685a      	ldr	r2, [r3, #4]
 800adaa:	7ffb      	ldrb	r3, [r7, #31]
 800adac:	1c59      	adds	r1, r3, #1
 800adae:	77f9      	strb	r1, [r7, #31]
 800adb0:	4413      	add	r3, r2
 800adb2:	2200      	movs	r2, #0
 800adb4:	701a      	strb	r2, [r3, #0]
 800adb6:	e065      	b.n	800ae84 <SendTxData+0x300>
 800adb8:	200005d0 	.word	0x200005d0
 800adbc:	0801f1f4 	.word	0x0801f1f4
 800adc0:	20000088 	.word	0x20000088
 800adc4:	42c80000 	.word	0x42c80000
 800adc8:	41200000 	.word	0x41200000
 800adcc:	20000070 	.word	0x20000070
 800add0:	0801f1d8 	.word	0x0801f1d8
  else
  {
    //latitude = sensor_data.latitude;
    //longitude = sensor_data.longitude;

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800add4:	4b54      	ldr	r3, [pc, #336]	@ (800af28 <SendTxData+0x3a4>)
 800add6:	685a      	ldr	r2, [r3, #4]
 800add8:	7ffb      	ldrb	r3, [r7, #31]
 800adda:	1c59      	adds	r1, r3, #1
 800addc:	77f9      	strb	r1, [r7, #31]
 800adde:	18d4      	adds	r4, r2, r3
 800ade0:	f7f7 fa34 	bl	800224c <GetBatteryLevel>
 800ade4:	4603      	mov	r3, r0
 800ade6:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	1419      	asrs	r1, r3, #16
 800adec:	4b4e      	ldr	r3, [pc, #312]	@ (800af28 <SendTxData+0x3a4>)
 800adee:	685a      	ldr	r2, [r3, #4]
 800adf0:	7ffb      	ldrb	r3, [r7, #31]
 800adf2:	1c58      	adds	r0, r3, #1
 800adf4:	77f8      	strb	r0, [r7, #31]
 800adf6:	4413      	add	r3, r2
 800adf8:	b2ca      	uxtb	r2, r1
 800adfa:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	1219      	asrs	r1, r3, #8
 800ae00:	4b49      	ldr	r3, [pc, #292]	@ (800af28 <SendTxData+0x3a4>)
 800ae02:	685a      	ldr	r2, [r3, #4]
 800ae04:	7ffb      	ldrb	r3, [r7, #31]
 800ae06:	1c58      	adds	r0, r3, #1
 800ae08:	77f8      	strb	r0, [r7, #31]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	b2ca      	uxtb	r2, r1
 800ae0e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800ae10:	4b45      	ldr	r3, [pc, #276]	@ (800af28 <SendTxData+0x3a4>)
 800ae12:	685a      	ldr	r2, [r3, #4]
 800ae14:	7ffb      	ldrb	r3, [r7, #31]
 800ae16:	1c59      	adds	r1, r3, #1
 800ae18:	77f9      	strb	r1, [r7, #31]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	b2d2      	uxtb	r2, r2
 800ae20:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	1419      	asrs	r1, r3, #16
 800ae26:	4b40      	ldr	r3, [pc, #256]	@ (800af28 <SendTxData+0x3a4>)
 800ae28:	685a      	ldr	r2, [r3, #4]
 800ae2a:	7ffb      	ldrb	r3, [r7, #31]
 800ae2c:	1c58      	adds	r0, r3, #1
 800ae2e:	77f8      	strb	r0, [r7, #31]
 800ae30:	4413      	add	r3, r2
 800ae32:	b2ca      	uxtb	r2, r1
 800ae34:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	1219      	asrs	r1, r3, #8
 800ae3a:	4b3b      	ldr	r3, [pc, #236]	@ (800af28 <SendTxData+0x3a4>)
 800ae3c:	685a      	ldr	r2, [r3, #4]
 800ae3e:	7ffb      	ldrb	r3, [r7, #31]
 800ae40:	1c58      	adds	r0, r3, #1
 800ae42:	77f8      	strb	r0, [r7, #31]
 800ae44:	4413      	add	r3, r2
 800ae46:	b2ca      	uxtb	r2, r1
 800ae48:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800ae4a:	4b37      	ldr	r3, [pc, #220]	@ (800af28 <SendTxData+0x3a4>)
 800ae4c:	685a      	ldr	r2, [r3, #4]
 800ae4e:	7ffb      	ldrb	r3, [r7, #31]
 800ae50:	1c59      	adds	r1, r3, #1
 800ae52:	77f9      	strb	r1, [r7, #31]
 800ae54:	4413      	add	r3, r2
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	b2d2      	uxtb	r2, r2
 800ae5a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800ae5c:	88fb      	ldrh	r3, [r7, #6]
 800ae5e:	0a1b      	lsrs	r3, r3, #8
 800ae60:	b299      	uxth	r1, r3
 800ae62:	4b31      	ldr	r3, [pc, #196]	@ (800af28 <SendTxData+0x3a4>)
 800ae64:	685a      	ldr	r2, [r3, #4]
 800ae66:	7ffb      	ldrb	r3, [r7, #31]
 800ae68:	1c58      	adds	r0, r3, #1
 800ae6a:	77f8      	strb	r0, [r7, #31]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	b2ca      	uxtb	r2, r1
 800ae70:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800ae72:	4b2d      	ldr	r3, [pc, #180]	@ (800af28 <SendTxData+0x3a4>)
 800ae74:	685a      	ldr	r2, [r3, #4]
 800ae76:	7ffb      	ldrb	r3, [r7, #31]
 800ae78:	1c59      	adds	r1, r3, #1
 800ae7a:	77f9      	strb	r1, [r7, #31]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	88fa      	ldrh	r2, [r7, #6]
 800ae80:	b2d2      	uxtb	r2, r2
 800ae82:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800ae84:	4a28      	ldr	r2, [pc, #160]	@ (800af28 <SendTxData+0x3a4>)
 800ae86:	7ffb      	ldrb	r3, [r7, #31]
 800ae88:	7053      	strb	r3, [r2, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800ae8a:	4b28      	ldr	r3, [pc, #160]	@ (800af2c <SendTxData+0x3a8>)
 800ae8c:	7a5b      	ldrb	r3, [r3, #9]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d007      	beq.n	800aea2 <SendTxData+0x31e>
 800ae92:	f002 fa1f 	bl	800d2d4 <LmHandlerJoinStatus>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d102      	bne.n	800aea2 <SendTxData+0x31e>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800ae9c:	4823      	ldr	r0, [pc, #140]	@ (800af2c <SendTxData+0x3a8>)
 800ae9e:	f010 fecb 	bl	801bc38 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800aea2:	4b23      	ldr	r3, [pc, #140]	@ (800af30 <SendTxData+0x3ac>)
 800aea4:	78db      	ldrb	r3, [r3, #3]
 800aea6:	2200      	movs	r2, #0
 800aea8:	4619      	mov	r1, r3
 800aeaa:	481f      	ldr	r0, [pc, #124]	@ (800af28 <SendTxData+0x3a4>)
 800aeac:	f002 fa2e 	bl	800d30c <LmHandlerSend>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	75fb      	strb	r3, [r7, #23]
  if (LORAMAC_HANDLER_SUCCESS == status)
 800aeb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d106      	bne.n	800aeca <SendTxData+0x346>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800aebc:	4b1d      	ldr	r3, [pc, #116]	@ (800af34 <SendTxData+0x3b0>)
 800aebe:	2201      	movs	r2, #1
 800aec0:	2100      	movs	r1, #0
 800aec2:	2001      	movs	r0, #1
 800aec4:	f011 f8c2 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
 800aec8:	e016      	b.n	800aef8 <SendTxData+0x374>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800aeca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aece:	f113 0f06 	cmn.w	r3, #6
 800aed2:	d111      	bne.n	800aef8 <SendTxData+0x374>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800aed4:	f002 f972 	bl	800d1bc <LmHandlerGetDutyCycleWaitTime>
 800aed8:	61b8      	str	r0, [r7, #24]
    if (nextTxIn > 0)
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00b      	beq.n	800aef8 <SendTxData+0x374>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	4a15      	ldr	r2, [pc, #84]	@ (800af38 <SendTxData+0x3b4>)
 800aee4:	fba2 2303 	umull	r2, r3, r2, r3
 800aee8:	099b      	lsrs	r3, r3, #6
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	4b13      	ldr	r3, [pc, #76]	@ (800af3c <SendTxData+0x3b8>)
 800aeee:	2201      	movs	r2, #1
 800aef0:	2100      	movs	r1, #0
 800aef2:	2001      	movs	r0, #1
 800aef4:	f011 f8aa 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800aef8:	4b11      	ldr	r3, [pc, #68]	@ (800af40 <SendTxData+0x3bc>)
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10f      	bne.n	800af20 <SendTxData+0x39c>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800af00:	4810      	ldr	r0, [pc, #64]	@ (800af44 <SendTxData+0x3c0>)
 800af02:	f010 fe99 	bl	801bc38 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800af06:	4b10      	ldr	r3, [pc, #64]	@ (800af48 <SendTxData+0x3c4>)
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	4293      	cmp	r3, r2
 800af0e:	bf38      	it	cc
 800af10:	4613      	movcc	r3, r2
 800af12:	4619      	mov	r1, r3
 800af14:	480b      	ldr	r0, [pc, #44]	@ (800af44 <SendTxData+0x3c0>)
 800af16:	f010 feff 	bl	801bd18 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800af1a:	480a      	ldr	r0, [pc, #40]	@ (800af44 <SendTxData+0x3c0>)
 800af1c:	f010 fe1e 	bl	801bb5c <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800af20:	3724      	adds	r7, #36	@ 0x24
 800af22:	46bd      	mov	sp, r7
 800af24:	bd90      	pop	{r4, r7, pc}
 800af26:	bf00      	nop
 800af28:	20000088 	.word	0x20000088
 800af2c:	20000744 	.word	0x20000744
 800af30:	20000070 	.word	0x20000070
 800af34:	0801f200 	.word	0x0801f200
 800af38:	10624dd3 	.word	0x10624dd3
 800af3c:	0801f210 	.word	0x0801f210
 800af40:	200005ec 	.word	0x200005ec
 800af44:	200005f0 	.word	0x200005f0
 800af48:	20000084 	.word	0x20000084

0800af4c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800af54:	2100      	movs	r1, #0
 800af56:	2002      	movs	r0, #2
 800af58:	f010 fd4a 	bl	801b9f0 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800af5c:	4803      	ldr	r0, [pc, #12]	@ (800af6c <OnTxTimerEvent+0x20>)
 800af5e:	f010 fdfd 	bl	801bb5c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800af62:	bf00      	nop
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	200005f0 	.word	0x200005f0

0800af70 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bc80      	pop	{r7}
 800af80:	4770      	bx	lr

0800af82 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800af82:	b480      	push	{r7}
 800af84:	b083      	sub	sp, #12
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800af8a:	bf00      	nop
 800af8c:	370c      	adds	r7, #12
 800af8e:	46bd      	mov	sp, r7
 800af90:	bc80      	pop	{r7}
 800af92:	4770      	bx	lr

0800af94 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800af9c:	bf00      	nop
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bc80      	pop	{r7}
 800afa4:	4770      	bx	lr
	...

0800afa8 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b086      	sub	sp, #24
 800afac:	af04      	add	r7, sp, #16
 800afae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d041      	beq.n	800b03a <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d03d      	beq.n	800b03a <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800afbe:	4821      	ldr	r0, [pc, #132]	@ (800b044 <OnTxData+0x9c>)
 800afc0:	f010 fdcc 	bl	801bb5c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800afc4:	4b20      	ldr	r3, [pc, #128]	@ (800b048 <OnTxData+0xa0>)
 800afc6:	2200      	movs	r2, #0
 800afc8:	2100      	movs	r1, #0
 800afca:	2002      	movs	r0, #2
 800afcc:	f011 f83e 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	7c12      	ldrb	r2, [r2, #16]
 800afd8:	4611      	mov	r1, r2
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800afe0:	4610      	mov	r0, r2
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800afe8:	9203      	str	r2, [sp, #12]
 800afea:	9002      	str	r0, [sp, #8]
 800afec:	9101      	str	r1, [sp, #4]
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	4b16      	ldr	r3, [pc, #88]	@ (800b04c <OnTxData+0xa4>)
 800aff2:	2200      	movs	r2, #0
 800aff4:	2100      	movs	r1, #0
 800aff6:	2003      	movs	r0, #3
 800aff8:	f011 f828 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800affc:	4b14      	ldr	r3, [pc, #80]	@ (800b050 <OnTxData+0xa8>)
 800affe:	2200      	movs	r2, #0
 800b000:	2100      	movs	r1, #0
 800b002:	2003      	movs	r0, #3
 800b004:	f011 f822 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	7a1b      	ldrb	r3, [r3, #8]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d10e      	bne.n	800b02e <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	7a5b      	ldrb	r3, [r3, #9]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <OnTxData+0x74>
 800b018:	4b0e      	ldr	r3, [pc, #56]	@ (800b054 <OnTxData+0xac>)
 800b01a:	e000      	b.n	800b01e <OnTxData+0x76>
 800b01c:	4b0e      	ldr	r3, [pc, #56]	@ (800b058 <OnTxData+0xb0>)
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	4b0e      	ldr	r3, [pc, #56]	@ (800b05c <OnTxData+0xb4>)
 800b022:	2200      	movs	r2, #0
 800b024:	2100      	movs	r1, #0
 800b026:	2003      	movs	r0, #3
 800b028:	f011 f810 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800b02c:	e005      	b.n	800b03a <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800b02e:	4b0c      	ldr	r3, [pc, #48]	@ (800b060 <OnTxData+0xb8>)
 800b030:	2200      	movs	r2, #0
 800b032:	2100      	movs	r1, #0
 800b034:	2003      	movs	r0, #3
 800b036:	f011 f809 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
}
 800b03a:	bf00      	nop
 800b03c:	3708      	adds	r7, #8
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	20000714 	.word	0x20000714
 800b048:	0801f230 	.word	0x0801f230
 800b04c:	0801f264 	.word	0x0801f264
 800b050:	0801f298 	.word	0x0801f298
 800b054:	0801f2a8 	.word	0x0801f2a8
 800b058:	0801f2ac 	.word	0x0801f2ac
 800b05c:	0801f2b4 	.word	0x0801f2b4
 800b060:	0801f2c8 	.word	0x0801f2c8

0800b064 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  if (joinParams != NULL)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d04c      	beq.n	800b10c <OnJoinRequest+0xa8>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d131      	bne.n	800b0e0 <OnJoinRequest+0x7c>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800b07c:	2100      	movs	r1, #0
 800b07e:	2004      	movs	r0, #4
 800b080:	f010 fcb6 	bl	801b9f0 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800b084:	4823      	ldr	r0, [pc, #140]	@ (800b114 <OnJoinRequest+0xb0>)
 800b086:	f010 fdd7 	bl	801bc38 <UTIL_TIMER_Stop>
#if 0   // XXX: ถ้ามี LED
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800b08a:	4b23      	ldr	r3, [pc, #140]	@ (800b118 <OnJoinRequest+0xb4>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	2100      	movs	r1, #0
 800b090:	2002      	movs	r0, #2
 800b092:	f010 ffdb 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	799b      	ldrb	r3, [r3, #6]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d106      	bne.n	800b0ac <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800b09e:	4b1f      	ldr	r3, [pc, #124]	@ (800b11c <OnJoinRequest+0xb8>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	2002      	movs	r0, #2
 800b0a6:	f010 ffd1 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
 800b0aa:	e005      	b.n	800b0b8 <OnJoinRequest+0x54>
      }
      else
      {
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800b0ac:	4b1c      	ldr	r3, [pc, #112]	@ (800b120 <OnJoinRequest+0xbc>)
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	2002      	movs	r0, #2
 800b0b4:	f010 ffca 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
      }

      // ✅ เปลี่ยนไปใช้ Class C ทันทีหลังจาก join สำเร็จ
      if (LmHandlerRequestClass(CLASS_C) == LORAMAC_HANDLER_SUCCESS)
 800b0b8:	2002      	movs	r0, #2
 800b0ba:	f002 fa15 	bl	800d4e8 <LmHandlerRequestClass>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d106      	bne.n	800b0d2 <OnJoinRequest+0x6e>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "CLASS C ACTIVATED\r\n");
 800b0c4:	4b17      	ldr	r3, [pc, #92]	@ (800b124 <OnJoinRequest+0xc0>)
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	2002      	movs	r0, #2
 800b0cc:	f010 ffbe 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
        LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
}
 800b0d0:	e01c      	b.n	800b10c <OnJoinRequest+0xa8>
        APP_LOG(TS_OFF, VLEVEL_M, "FAILED TO SWITCH TO CLASS C\r\n");
 800b0d2:	4b15      	ldr	r3, [pc, #84]	@ (800b128 <OnJoinRequest+0xc4>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	2002      	movs	r0, #2
 800b0da:	f010 ffb7 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
}
 800b0de:	e015      	b.n	800b10c <OnJoinRequest+0xa8>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800b0e0:	4b12      	ldr	r3, [pc, #72]	@ (800b12c <OnJoinRequest+0xc8>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	2002      	movs	r0, #2
 800b0e8:	f010 ffb0 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	799b      	ldrb	r3, [r3, #6]
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	d10b      	bne.n	800b10c <OnJoinRequest+0xa8>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800b0f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b130 <OnJoinRequest+0xcc>)
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	2002      	movs	r0, #2
 800b0fc:	f010 ffa6 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
        LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800b100:	4b0c      	ldr	r3, [pc, #48]	@ (800b134 <OnJoinRequest+0xd0>)
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	2101      	movs	r1, #1
 800b106:	4618      	mov	r0, r3
 800b108:	f002 f862 	bl	800d1d0 <LmHandlerJoin>
}
 800b10c:	bf00      	nop
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	20000744 	.word	0x20000744
 800b118:	0801f2d8 	.word	0x0801f2d8
 800b11c:	0801f2f0 	.word	0x0801f2f0
 800b120:	0801f310 	.word	0x0801f310
 800b124:	0801f330 	.word	0x0801f330
 800b128:	0801f344 	.word	0x0801f344
 800b12c:	0801f364 	.word	0x0801f364
 800b130:	0801f380 	.word	0x0801f380
 800b134:	20000020 	.word	0x20000020

0800b138 <OnBeaconStatusChange>:


static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800b138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b13a:	b093      	sub	sp, #76	@ 0x4c
 800b13c:	af0c      	add	r7, sp, #48	@ 0x30
 800b13e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d056      	beq.n	800b1f4 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	785b      	ldrb	r3, [r3, #1]
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d008      	beq.n	800b160 <OnBeaconStatusChange+0x28>
 800b14e:	2b03      	cmp	r3, #3
 800b150:	d049      	beq.n	800b1e6 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800b152:	4b2a      	ldr	r3, [pc, #168]	@ (800b1fc <OnBeaconStatusChange+0xc4>)
 800b154:	2200      	movs	r2, #0
 800b156:	2100      	movs	r1, #0
 800b158:	2002      	movs	r0, #2
 800b15a:	f010 ff77 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800b15e:	e049      	b.n	800b1f4 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	7c1b      	ldrb	r3, [r3, #16]
 800b164:	4618      	mov	r0, r3
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b16c:	461c      	mov	r4, r3
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800b174:	461d      	mov	r5, r3
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	6852      	ldr	r2, [r2, #4]
 800b17e:	6979      	ldr	r1, [r7, #20]
 800b180:	7d89      	ldrb	r1, [r1, #22]
 800b182:	460e      	mov	r6, r1
 800b184:	6979      	ldr	r1, [r7, #20]
 800b186:	7dc9      	ldrb	r1, [r1, #23]
 800b188:	6139      	str	r1, [r7, #16]
 800b18a:	6979      	ldr	r1, [r7, #20]
 800b18c:	7e09      	ldrb	r1, [r1, #24]
 800b18e:	60f9      	str	r1, [r7, #12]
 800b190:	6979      	ldr	r1, [r7, #20]
 800b192:	7e49      	ldrb	r1, [r1, #25]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	6979      	ldr	r1, [r7, #20]
 800b198:	7e89      	ldrb	r1, [r1, #26]
 800b19a:	6079      	str	r1, [r7, #4]
 800b19c:	6979      	ldr	r1, [r7, #20]
 800b19e:	7ec9      	ldrb	r1, [r1, #27]
 800b1a0:	6039      	str	r1, [r7, #0]
 800b1a2:	6979      	ldr	r1, [r7, #20]
 800b1a4:	7f09      	ldrb	r1, [r1, #28]
 800b1a6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b1a8:	f8d7 c000 	ldr.w	ip, [r7]
 800b1ac:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800b1b0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800b1b4:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800b1b8:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800b1bc:	f8cd c020 	str.w	ip, [sp, #32]
 800b1c0:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800b1c4:	f8cd c01c 	str.w	ip, [sp, #28]
 800b1c8:	6939      	ldr	r1, [r7, #16]
 800b1ca:	9106      	str	r1, [sp, #24]
 800b1cc:	9605      	str	r6, [sp, #20]
 800b1ce:	9204      	str	r2, [sp, #16]
 800b1d0:	9303      	str	r3, [sp, #12]
 800b1d2:	9502      	str	r5, [sp, #8]
 800b1d4:	9401      	str	r4, [sp, #4]
 800b1d6:	9000      	str	r0, [sp, #0]
 800b1d8:	4b09      	ldr	r3, [pc, #36]	@ (800b200 <OnBeaconStatusChange+0xc8>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	2100      	movs	r1, #0
 800b1de:	2002      	movs	r0, #2
 800b1e0:	f010 ff34 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800b1e4:	e006      	b.n	800b1f4 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800b1e6:	4b07      	ldr	r3, [pc, #28]	@ (800b204 <OnBeaconStatusChange+0xcc>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	2002      	movs	r0, #2
 800b1ee:	f010 ff2d 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800b1f2:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800b1f4:	bf00      	nop
 800b1f6:	371c      	adds	r7, #28
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1fc:	0801f3a4 	.word	0x0801f3a4
 800b200:	0801f3bc 	.word	0x0801f3bc
 800b204:	0801f430 	.word	0x0801f430

0800b208 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af02      	add	r7, sp, #8
 800b20e:	4603      	mov	r3, r0
 800b210:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800b212:	79fb      	ldrb	r3, [r7, #7]
 800b214:	4a06      	ldr	r2, [pc, #24]	@ (800b230 <OnClassChange+0x28>)
 800b216:	5cd3      	ldrb	r3, [r2, r3]
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	4b06      	ldr	r3, [pc, #24]	@ (800b234 <OnClassChange+0x2c>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	2100      	movs	r1, #0
 800b220:	2002      	movs	r0, #2
 800b222:	f010 ff13 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800b226:	bf00      	nop
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	0801f46c 	.word	0x0801f46c
 800b234:	0801f450 	.word	0x0801f450

0800b238 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800b23c:	2100      	movs	r1, #0
 800b23e:	2001      	movs	r0, #1
 800b240:	f010 fbd6 	bl	801b9f0 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800b244:	bf00      	nop
 800b246:	bd80      	pop	{r7, pc}

0800b248 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800b250:	4a0d      	ldr	r2, [pc, #52]	@ (800b288 <OnTxPeriodicityChanged+0x40>)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800b256:	4b0c      	ldr	r3, [pc, #48]	@ (800b288 <OnTxPeriodicityChanged+0x40>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d103      	bne.n	800b266 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800b25e:	4b0a      	ldr	r3, [pc, #40]	@ (800b288 <OnTxPeriodicityChanged+0x40>)
 800b260:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b264:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800b266:	4809      	ldr	r0, [pc, #36]	@ (800b28c <OnTxPeriodicityChanged+0x44>)
 800b268:	f010 fce6 	bl	801bc38 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800b26c:	4b06      	ldr	r3, [pc, #24]	@ (800b288 <OnTxPeriodicityChanged+0x40>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4619      	mov	r1, r3
 800b272:	4806      	ldr	r0, [pc, #24]	@ (800b28c <OnTxPeriodicityChanged+0x44>)
 800b274:	f010 fd50 	bl	801bd18 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800b278:	4804      	ldr	r0, [pc, #16]	@ (800b28c <OnTxPeriodicityChanged+0x44>)
 800b27a:	f010 fc6f 	bl	801bb5c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800b27e:	bf00      	nop
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	20000084 	.word	0x20000084
 800b28c:	200005f0 	.word	0x200005f0

0800b290 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	4603      	mov	r3, r0
 800b298:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800b29a:	4a04      	ldr	r2, [pc, #16]	@ (800b2ac <OnTxFrameCtrlChanged+0x1c>)
 800b29c:	79fb      	ldrb	r3, [r7, #7]
 800b29e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bc80      	pop	{r7}
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	20000070 	.word	0x20000070

0800b2b0 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800b2ba:	4a04      	ldr	r2, [pc, #16]	@ (800b2cc <OnPingSlotPeriodicityChanged+0x1c>)
 800b2bc:	79fb      	ldrb	r3, [r7, #7]
 800b2be:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800b2c0:	bf00      	nop
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bc80      	pop	{r7}
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	20000070 	.word	0x20000070

0800b2d0 <OnSystemReset>:

static void OnSystemReset(void)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b2d4:	f002 fced 	bl	800dcb2 <LmHandlerHalt>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d106      	bne.n	800b2ec <OnSystemReset+0x1c>
 800b2de:	f001 fff9 	bl	800d2d4 <LmHandlerJoinStatus>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d101      	bne.n	800b2ec <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800b2e8:	f7ff f988 	bl	800a5fc <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800b2ec:	bf00      	nop
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <StopJoin>:

static void StopJoin(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800b2f4:	4817      	ldr	r0, [pc, #92]	@ (800b354 <StopJoin+0x64>)
 800b2f6:	f010 fc9f 	bl	801bc38 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800b2fa:	f002 fccd 	bl	800dc98 <LmHandlerStop>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d006      	beq.n	800b312 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800b304:	4b14      	ldr	r3, [pc, #80]	@ (800b358 <StopJoin+0x68>)
 800b306:	2200      	movs	r2, #0
 800b308:	2100      	movs	r1, #0
 800b30a:	2002      	movs	r0, #2
 800b30c:	f010 fe9e 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
 800b310:	e01a      	b.n	800b348 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800b312:	4b12      	ldr	r3, [pc, #72]	@ (800b35c <StopJoin+0x6c>)
 800b314:	2200      	movs	r2, #0
 800b316:	2100      	movs	r1, #0
 800b318:	2002      	movs	r0, #2
 800b31a:	f010 fe97 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800b31e:	4b10      	ldr	r3, [pc, #64]	@ (800b360 <StopJoin+0x70>)
 800b320:	2201      	movs	r2, #1
 800b322:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800b324:	4b0f      	ldr	r3, [pc, #60]	@ (800b364 <StopJoin+0x74>)
 800b326:	2200      	movs	r2, #0
 800b328:	2100      	movs	r1, #0
 800b32a:	2002      	movs	r0, #2
 800b32c:	f010 fe8e 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800b330:	480d      	ldr	r0, [pc, #52]	@ (800b368 <StopJoin+0x78>)
 800b332:	f001 fdd1 	bl	800ced8 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800b336:	4b0a      	ldr	r3, [pc, #40]	@ (800b360 <StopJoin+0x70>)
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	2101      	movs	r1, #1
 800b33c:	4618      	mov	r0, r3
 800b33e:	f001 ff47 	bl	800d1d0 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800b342:	4804      	ldr	r0, [pc, #16]	@ (800b354 <StopJoin+0x64>)
 800b344:	f010 fc0a 	bl	801bb5c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800b348:	4808      	ldr	r0, [pc, #32]	@ (800b36c <StopJoin+0x7c>)
 800b34a:	f010 fc07 	bl	801bb5c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800b34e:	bf00      	nop
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	200005f0 	.word	0x200005f0
 800b358:	0801f470 	.word	0x0801f470
 800b35c:	0801f490 	.word	0x0801f490
 800b360:	20000020 	.word	0x20000020
 800b364:	0801f4a4 	.word	0x0801f4a4
 800b368:	20000070 	.word	0x20000070
 800b36c:	20000608 	.word	0x20000608

0800b370 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800b378:	4b05      	ldr	r3, [pc, #20]	@ (800b390 <OnStopJoinTimerEvent+0x20>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d103      	bne.n	800b388 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800b380:	2100      	movs	r1, #0
 800b382:	2008      	movs	r0, #8
 800b384:	f010 fb34 	bl	801b9f0 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	20000020 	.word	0x20000020

0800b394 <StoreContext>:

static void StoreContext(void)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b39a:	23ff      	movs	r3, #255	@ 0xff
 800b39c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800b39e:	f002 fc95 	bl	800dccc <LmHandlerNvmDataStore>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800b3a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3aa:	f113 0f08 	cmn.w	r3, #8
 800b3ae:	d106      	bne.n	800b3be <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800b3b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b3dc <StoreContext+0x48>)
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	2002      	movs	r0, #2
 800b3b8:	f010 fe48 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800b3bc:	e00a      	b.n	800b3d4 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800b3be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c6:	d105      	bne.n	800b3d4 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800b3c8:	4b05      	ldr	r3, [pc, #20]	@ (800b3e0 <StoreContext+0x4c>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	2002      	movs	r0, #2
 800b3d0:	f010 fe3c 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
}
 800b3d4:	bf00      	nop
 800b3d6:	3708      	adds	r7, #8
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	0801f4c4 	.word	0x0801f4c4
 800b3e0:	0801f4dc 	.word	0x0801f4dc

0800b3e4 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800b3ee:	79fb      	ldrb	r3, [r7, #7]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d106      	bne.n	800b402 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800b3f4:	4b08      	ldr	r3, [pc, #32]	@ (800b418 <OnNvmDataChange+0x34>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	2002      	movs	r0, #2
 800b3fc:	f010 fe26 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800b400:	e005      	b.n	800b40e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800b402:	4b06      	ldr	r3, [pc, #24]	@ (800b41c <OnNvmDataChange+0x38>)
 800b404:	2200      	movs	r2, #0
 800b406:	2100      	movs	r1, #0
 800b408:	2002      	movs	r0, #2
 800b40a:	f010 fe1f 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
}
 800b40e:	bf00      	nop
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	0801f4f4 	.word	0x0801f4f4
 800b41c:	0801f508 	.word	0x0801f508

0800b420 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800b42a:	f7f9 fe2d 	bl	8005088 <HAL_FLASH_Unlock>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d11c      	bne.n	800b46e <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800b434:	4b10      	ldr	r3, [pc, #64]	@ (800b478 <OnStoreContextRequest+0x58>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	029a      	lsls	r2, r3, #10
 800b43a:	4b10      	ldr	r3, [pc, #64]	@ (800b47c <OnStoreContextRequest+0x5c>)
 800b43c:	4013      	ands	r3, r2
 800b43e:	f44f 327c 	mov.w	r2, #258048	@ 0x3f000
 800b442:	fbb2 f1f3 	udiv	r1, r2, r3
 800b446:	fb01 f303 	mul.w	r3, r1, r3
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	0adb      	lsrs	r3, r3, #11
 800b44e:	2200      	movs	r2, #0
 800b450:	2101      	movs	r1, #1
 800b452:	4618      	mov	r0, r3
 800b454:	f7f6 f9e1 	bl	800181a <FLASH_IF_EraseByPages>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d105      	bne.n	800b46a <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800b45e:	2300      	movs	r3, #0
 800b460:	683a      	ldr	r2, [r7, #0]
 800b462:	6879      	ldr	r1, [r7, #4]
 800b464:	4806      	ldr	r0, [pc, #24]	@ (800b480 <OnStoreContextRequest+0x60>)
 800b466:	f7f6 f8f7 	bl	8001658 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800b46a:	f7f9 fe2f 	bl	80050cc <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800b46e:	bf00      	nop
 800b470:	3708      	adds	r7, #8
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	1fff75e0 	.word	0x1fff75e0
 800b47c:	03fffc00 	.word	0x03fffc00
 800b480:	0803f000 	.word	0x0803f000

0800b484 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	b29b      	uxth	r3, r3
 800b492:	461a      	mov	r2, r3
 800b494:	4903      	ldr	r1, [pc, #12]	@ (800b4a4 <OnRestoreContextRequest+0x20>)
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f00f fd8e 	bl	801afb8 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800b49c:	bf00      	nop
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	0803f000 	.word	0x0803f000

0800b4a8 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800b4ac:	4b15      	ldr	r3, [pc, #84]	@ (800b504 <LoraInfo_Init+0x5c>)
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800b4b2:	4b14      	ldr	r3, [pc, #80]	@ (800b504 <LoraInfo_Init+0x5c>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800b4b8:	4b12      	ldr	r3, [pc, #72]	@ (800b504 <LoraInfo_Init+0x5c>)
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800b4be:	4b11      	ldr	r3, [pc, #68]	@ (800b504 <LoraInfo_Init+0x5c>)
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 800b4c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b504 <LoraInfo_Init+0x5c>)
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	f043 0301 	orr.w	r3, r3, #1
 800b4cc:	4a0d      	ldr	r2, [pc, #52]	@ (800b504 <LoraInfo_Init+0x5c>)
 800b4ce:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800b4d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b504 <LoraInfo_Init+0x5c>)
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10d      	bne.n	800b4f4 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800b4d8:	4b0b      	ldr	r3, [pc, #44]	@ (800b508 <LoraInfo_Init+0x60>)
 800b4da:	2200      	movs	r2, #0
 800b4dc:	2100      	movs	r1, #0
 800b4de:	2000      	movs	r0, #0
 800b4e0:	f010 fdb4 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800b4e4:	bf00      	nop
 800b4e6:	f010 fd9f 	bl	801c028 <UTIL_ADV_TRACE_IsBufferEmpty>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d1fa      	bne.n	800b4e6 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800b4f0:	bf00      	nop
 800b4f2:	e7fd      	b.n	800b4f0 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800b4f4:	4b03      	ldr	r3, [pc, #12]	@ (800b504 <LoraInfo_Init+0x5c>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800b4fa:	4b02      	ldr	r3, [pc, #8]	@ (800b504 <LoraInfo_Init+0x5c>)
 800b4fc:	2203      	movs	r2, #3
 800b4fe:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800b500:	bf00      	nop
 800b502:	bd80      	pop	{r7, pc}
 800b504:	20000774 	.word	0x20000774
 800b508:	0801f51c 	.word	0x0801f51c

0800b50c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800b50c:	b480      	push	{r7}
 800b50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800b510:	4b02      	ldr	r3, [pc, #8]	@ (800b51c <LoraInfo_GetPtr+0x10>)
}
 800b512:	4618      	mov	r0, r3
 800b514:	46bd      	mov	sp, r7
 800b516:	bc80      	pop	{r7}
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	20000774 	.word	0x20000774

0800b520 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800b524:	f7f7 feb7 	bl	8003296 <BSP_RADIO_Init>
 800b528:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b082      	sub	sp, #8
 800b532:	af00      	add	r7, sp, #0
 800b534:	4603      	mov	r3, r0
 800b536:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800b538:	79fb      	ldrb	r3, [r7, #7]
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7f7 fedc 	bl	80032f8 <BSP_RADIO_ConfigRFSwitch>
 800b540:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b542:	4618      	mov	r0, r3
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800b54e:	f7f7 ff21 	bl	8003394 <BSP_RADIO_GetTxConfig>
 800b552:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b554:	4618      	mov	r0, r3
 800b556:	bd80      	pop	{r7, pc}

0800b558 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800b55c:	f7f7 ff21 	bl	80033a2 <BSP_RADIO_IsTCXO>
 800b560:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b562:	4618      	mov	r0, r3
 800b564:	bd80      	pop	{r7, pc}

0800b566 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800b56a:	f7f7 ff21 	bl	80033b0 <BSP_RADIO_IsDCDC>
 800b56e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b570:	4618      	mov	r0, r3
 800b572:	bd80      	pop	{r7, pc}

0800b574 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800b57e:	79fb      	ldrb	r3, [r7, #7]
 800b580:	4618      	mov	r0, r3
 800b582:	f7f7 ff1c 	bl	80033be <BSP_RADIO_GetRFOMaxPowerConfig>
 800b586:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	33f1      	adds	r3, #241	@ 0xf1
 800b59c:	2210      	movs	r2, #16
 800b59e:	2100      	movs	r1, #0
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f00c fa3f 	bl	8017a24 <memset1>
    ctx->M_n = 0;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	22f0      	movs	r2, #240	@ 0xf0
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f00c fa35 	bl	8017a24 <memset1>
}
 800b5ba:	bf00      	nop
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b082      	sub	sp, #8
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	2110      	movs	r1, #16
 800b5d2:	6838      	ldr	r0, [r7, #0]
 800b5d4:	f000 fe5c 	bl	800c290 <lorawan_aes_set_key>
}
 800b5d8:	bf00      	nop
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b08c      	sub	sp, #48	@ 0x30
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f000 80a1 	beq.w	800b73a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b5fe:	f1c3 0310 	rsb	r3, r3, #16
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	4293      	cmp	r3, r2
 800b606:	bf28      	it	cs
 800b608:	4613      	movcs	r3, r2
 800b60a:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b618:	4413      	add	r3, r2
 800b61a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b61c:	b292      	uxth	r2, r2
 800b61e:	68b9      	ldr	r1, [r7, #8]
 800b620:	4618      	mov	r0, r3
 800b622:	f00c f9c4 	bl	80179ae <memcpy1>
        ctx->M_n += mlen;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800b62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62e:	441a      	add	r2, r3
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b63c:	2b0f      	cmp	r3, #15
 800b63e:	f240 808d 	bls.w	800b75c <AES_CMAC_Update+0x17c>
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b646:	429a      	cmp	r2, r3
 800b648:	f000 8088 	beq.w	800b75c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800b64c:	2300      	movs	r3, #0
 800b64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b650:	e015      	b.n	800b67e <AES_CMAC_Update+0x9e>
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b656:	4413      	add	r3, r2
 800b658:	33f1      	adds	r3, #241	@ 0xf1
 800b65a:	781a      	ldrb	r2, [r3, #0]
 800b65c:	68f9      	ldr	r1, [r7, #12]
 800b65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b660:	440b      	add	r3, r1
 800b662:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	4053      	eors	r3, r2
 800b66a:	b2d9      	uxtb	r1, r3
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b670:	4413      	add	r3, r2
 800b672:	33f1      	adds	r3, #241	@ 0xf1
 800b674:	460a      	mov	r2, r1
 800b676:	701a      	strb	r2, [r3, #0]
 800b678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b67a:	3301      	adds	r3, #1
 800b67c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b680:	2b0f      	cmp	r3, #15
 800b682:	dde6      	ble.n	800b652 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b68a:	f107 0314 	add.w	r3, r7, #20
 800b68e:	2210      	movs	r2, #16
 800b690:	4618      	mov	r0, r3
 800b692:	f00c f98c 	bl	80179ae <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	f107 0114 	add.w	r1, r7, #20
 800b69c:	f107 0314 	add.w	r3, r7, #20
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f000 fed3 	bl	800c44c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	33f1      	adds	r3, #241	@ 0xf1
 800b6aa:	f107 0114 	add.w	r1, r7, #20
 800b6ae:	2210      	movs	r2, #16
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f00c f97c 	bl	80179ae <memcpy1>

        data += mlen;
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ba:	4413      	add	r3, r2
 800b6bc:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800b6c6:	e038      	b.n	800b73a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b6cc:	e013      	b.n	800b6f6 <AES_CMAC_Update+0x116>
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d2:	4413      	add	r3, r2
 800b6d4:	33f1      	adds	r3, #241	@ 0xf1
 800b6d6:	781a      	ldrb	r2, [r3, #0]
 800b6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6da:	68b9      	ldr	r1, [r7, #8]
 800b6dc:	440b      	add	r3, r1
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	4053      	eors	r3, r2
 800b6e2:	b2d9      	uxtb	r1, r3
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e8:	4413      	add	r3, r2
 800b6ea:	33f1      	adds	r3, #241	@ 0xf1
 800b6ec:	460a      	mov	r2, r1
 800b6ee:	701a      	strb	r2, [r3, #0]
 800b6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f8:	2b0f      	cmp	r3, #15
 800b6fa:	dde8      	ble.n	800b6ce <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b702:	f107 0314 	add.w	r3, r7, #20
 800b706:	2210      	movs	r2, #16
 800b708:	4618      	mov	r0, r3
 800b70a:	f00c f950 	bl	80179ae <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b70e:	68fa      	ldr	r2, [r7, #12]
 800b710:	f107 0114 	add.w	r1, r7, #20
 800b714:	f107 0314 	add.w	r3, r7, #20
 800b718:	4618      	mov	r0, r3
 800b71a:	f000 fe97 	bl	800c44c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	33f1      	adds	r3, #241	@ 0xf1
 800b722:	f107 0114 	add.w	r1, r7, #20
 800b726:	2210      	movs	r2, #16
 800b728:	4618      	mov	r0, r3
 800b72a:	f00c f940 	bl	80179ae <memcpy1>

        data += 16;
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	3310      	adds	r3, #16
 800b732:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	3b10      	subs	r3, #16
 800b738:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2b10      	cmp	r3, #16
 800b73e:	d8c3      	bhi.n	800b6c8 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	b292      	uxth	r2, r2
 800b74a:	68b9      	ldr	r1, [r7, #8]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f00c f92e 	bl	80179ae <memcpy1>
    ctx->M_n = len;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800b75a:	e000      	b.n	800b75e <AES_CMAC_Update+0x17e>
            return;
 800b75c:	bf00      	nop
}
 800b75e:	3730      	adds	r7, #48	@ 0x30
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b092      	sub	sp, #72	@ 0x48
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800b76e:	f107 031c 	add.w	r3, r7, #28
 800b772:	2210      	movs	r2, #16
 800b774:	2100      	movs	r1, #0
 800b776:	4618      	mov	r0, r3
 800b778:	f00c f954 	bl	8017a24 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800b77c:	683a      	ldr	r2, [r7, #0]
 800b77e:	f107 011c 	add.w	r1, r7, #28
 800b782:	f107 031c 	add.w	r3, r7, #28
 800b786:	4618      	mov	r0, r3
 800b788:	f000 fe60 	bl	800c44c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800b78c:	7f3b      	ldrb	r3, [r7, #28]
 800b78e:	b25b      	sxtb	r3, r3
 800b790:	2b00      	cmp	r3, #0
 800b792:	da30      	bge.n	800b7f6 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800b794:	2300      	movs	r3, #0
 800b796:	647b      	str	r3, [r7, #68]	@ 0x44
 800b798:	e01b      	b.n	800b7d2 <AES_CMAC_Final+0x6e>
 800b79a:	f107 021c 	add.w	r2, r7, #28
 800b79e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7a0:	4413      	add	r3, r2
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	005b      	lsls	r3, r3, #1
 800b7a6:	b25a      	sxtb	r2, r3
 800b7a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	3348      	adds	r3, #72	@ 0x48
 800b7ae:	443b      	add	r3, r7
 800b7b0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b7b4:	09db      	lsrs	r3, r3, #7
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	b25b      	sxtb	r3, r3
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	b25b      	sxtb	r3, r3
 800b7be:	b2d9      	uxtb	r1, r3
 800b7c0:	f107 021c 	add.w	r2, r7, #28
 800b7c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7c6:	4413      	add	r3, r2
 800b7c8:	460a      	mov	r2, r1
 800b7ca:	701a      	strb	r2, [r3, #0]
 800b7cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7d4:	2b0e      	cmp	r3, #14
 800b7d6:	dde0      	ble.n	800b79a <AES_CMAC_Final+0x36>
 800b7d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b7dc:	005b      	lsls	r3, r3, #1
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800b7e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b7e8:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800b7ec:	43db      	mvns	r3, r3
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b7f4:	e027      	b.n	800b846 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7fa:	e01b      	b.n	800b834 <AES_CMAC_Final+0xd0>
 800b7fc:	f107 021c 	add.w	r2, r7, #28
 800b800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b802:	4413      	add	r3, r2
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	005b      	lsls	r3, r3, #1
 800b808:	b25a      	sxtb	r2, r3
 800b80a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b80c:	3301      	adds	r3, #1
 800b80e:	3348      	adds	r3, #72	@ 0x48
 800b810:	443b      	add	r3, r7
 800b812:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b816:	09db      	lsrs	r3, r3, #7
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	b25b      	sxtb	r3, r3
 800b81c:	4313      	orrs	r3, r2
 800b81e:	b25b      	sxtb	r3, r3
 800b820:	b2d9      	uxtb	r1, r3
 800b822:	f107 021c 	add.w	r2, r7, #28
 800b826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b828:	4413      	add	r3, r2
 800b82a:	460a      	mov	r2, r1
 800b82c:	701a      	strb	r2, [r3, #0]
 800b82e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b830:	3301      	adds	r3, #1
 800b832:	643b      	str	r3, [r7, #64]	@ 0x40
 800b834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b836:	2b0e      	cmp	r3, #14
 800b838:	dde0      	ble.n	800b7fc <AES_CMAC_Final+0x98>
 800b83a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b83e:	005b      	lsls	r3, r3, #1
 800b840:	b2db      	uxtb	r3, r3
 800b842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b84c:	2b10      	cmp	r3, #16
 800b84e:	d11d      	bne.n	800b88c <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800b850:	2300      	movs	r3, #0
 800b852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b854:	e016      	b.n	800b884 <AES_CMAC_Final+0x120>
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b85a:	4413      	add	r3, r2
 800b85c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b860:	781a      	ldrb	r2, [r3, #0]
 800b862:	f107 011c 	add.w	r1, r7, #28
 800b866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b868:	440b      	add	r3, r1
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	4053      	eors	r3, r2
 800b86e:	b2d9      	uxtb	r1, r3
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b874:	4413      	add	r3, r2
 800b876:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b87a:	460a      	mov	r2, r1
 800b87c:	701a      	strb	r2, [r3, #0]
 800b87e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b880:	3301      	adds	r3, #1
 800b882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b886:	2b0f      	cmp	r3, #15
 800b888:	dde5      	ble.n	800b856 <AES_CMAC_Final+0xf2>
 800b88a:	e096      	b.n	800b9ba <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800b88c:	7f3b      	ldrb	r3, [r7, #28]
 800b88e:	b25b      	sxtb	r3, r3
 800b890:	2b00      	cmp	r3, #0
 800b892:	da30      	bge.n	800b8f6 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800b894:	2300      	movs	r3, #0
 800b896:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b898:	e01b      	b.n	800b8d2 <AES_CMAC_Final+0x16e>
 800b89a:	f107 021c 	add.w	r2, r7, #28
 800b89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a0:	4413      	add	r3, r2
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	005b      	lsls	r3, r3, #1
 800b8a6:	b25a      	sxtb	r2, r3
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	3348      	adds	r3, #72	@ 0x48
 800b8ae:	443b      	add	r3, r7
 800b8b0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b8b4:	09db      	lsrs	r3, r3, #7
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	b25b      	sxtb	r3, r3
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	b25b      	sxtb	r3, r3
 800b8be:	b2d9      	uxtb	r1, r3
 800b8c0:	f107 021c 	add.w	r2, r7, #28
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c6:	4413      	add	r3, r2
 800b8c8:	460a      	mov	r2, r1
 800b8ca:	701a      	strb	r2, [r3, #0]
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d4:	2b0e      	cmp	r3, #14
 800b8d6:	dde0      	ble.n	800b89a <AES_CMAC_Final+0x136>
 800b8d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b8dc:	005b      	lsls	r3, r3, #1
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800b8e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b8e8:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800b8ec:	43db      	mvns	r3, r3
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8f4:	e027      	b.n	800b946 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8fa:	e01b      	b.n	800b934 <AES_CMAC_Final+0x1d0>
 800b8fc:	f107 021c 	add.w	r2, r7, #28
 800b900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b902:	4413      	add	r3, r2
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	005b      	lsls	r3, r3, #1
 800b908:	b25a      	sxtb	r2, r3
 800b90a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b90c:	3301      	adds	r3, #1
 800b90e:	3348      	adds	r3, #72	@ 0x48
 800b910:	443b      	add	r3, r7
 800b912:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b916:	09db      	lsrs	r3, r3, #7
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	b25b      	sxtb	r3, r3
 800b91c:	4313      	orrs	r3, r2
 800b91e:	b25b      	sxtb	r3, r3
 800b920:	b2d9      	uxtb	r1, r3
 800b922:	f107 021c 	add.w	r2, r7, #28
 800b926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b928:	4413      	add	r3, r2
 800b92a:	460a      	mov	r2, r1
 800b92c:	701a      	strb	r2, [r3, #0]
 800b92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b930:	3301      	adds	r3, #1
 800b932:	637b      	str	r3, [r7, #52]	@ 0x34
 800b934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b936:	2b0e      	cmp	r3, #14
 800b938:	dde0      	ble.n	800b8fc <AES_CMAC_Final+0x198>
 800b93a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b93e:	005b      	lsls	r3, r3, #1
 800b940:	b2db      	uxtb	r3, r3
 800b942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	4413      	add	r3, r2
 800b950:	2280      	movs	r2, #128	@ 0x80
 800b952:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800b956:	e007      	b.n	800b968 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b95e:	683a      	ldr	r2, [r7, #0]
 800b960:	4413      	add	r3, r2
 800b962:	2200      	movs	r2, #0
 800b964:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b96e:	1c5a      	adds	r2, r3, #1
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b97c:	2b0f      	cmp	r3, #15
 800b97e:	d9eb      	bls.n	800b958 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800b980:	2300      	movs	r3, #0
 800b982:	633b      	str	r3, [r7, #48]	@ 0x30
 800b984:	e016      	b.n	800b9b4 <AES_CMAC_Final+0x250>
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b98a:	4413      	add	r3, r2
 800b98c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b990:	781a      	ldrb	r2, [r3, #0]
 800b992:	f107 011c 	add.w	r1, r7, #28
 800b996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b998:	440b      	add	r3, r1
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	4053      	eors	r3, r2
 800b99e:	b2d9      	uxtb	r1, r3
 800b9a0:	683a      	ldr	r2, [r7, #0]
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a4:	4413      	add	r3, r2
 800b9a6:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b9aa:	460a      	mov	r2, r1
 800b9ac:	701a      	strb	r2, [r3, #0]
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b6:	2b0f      	cmp	r3, #15
 800b9b8:	dde5      	ble.n	800b986 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9be:	e015      	b.n	800b9ec <AES_CMAC_Final+0x288>
 800b9c0:	683a      	ldr	r2, [r7, #0]
 800b9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c4:	4413      	add	r3, r2
 800b9c6:	33f1      	adds	r3, #241	@ 0xf1
 800b9c8:	781a      	ldrb	r2, [r3, #0]
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ce:	440b      	add	r3, r1
 800b9d0:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	4053      	eors	r3, r2
 800b9d8:	b2d9      	uxtb	r1, r3
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9de:	4413      	add	r3, r2
 800b9e0:	33f1      	adds	r3, #241	@ 0xf1
 800b9e2:	460a      	mov	r2, r1
 800b9e4:	701a      	strb	r2, [r3, #0]
 800b9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ee:	2b0f      	cmp	r3, #15
 800b9f0:	dde6      	ble.n	800b9c0 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b9f8:	f107 030c 	add.w	r3, r7, #12
 800b9fc:	2210      	movs	r2, #16
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f00b ffd5 	bl	80179ae <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	f107 030c 	add.w	r3, r7, #12
 800ba0a:	6879      	ldr	r1, [r7, #4]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f000 fd1d 	bl	800c44c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800ba12:	f107 031c 	add.w	r3, r7, #28
 800ba16:	2210      	movs	r2, #16
 800ba18:	2100      	movs	r1, #0
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f00c f802 	bl	8017a24 <memset1>
}
 800ba20:	bf00      	nop
 800ba22:	3748      	adds	r7, #72	@ 0x48
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	781a      	ldrb	r2, [r3, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	7852      	ldrb	r2, [r2, #1]
 800ba42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	3302      	adds	r3, #2
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	7892      	ldrb	r2, [r2, #2]
 800ba4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	3303      	adds	r3, #3
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	78d2      	ldrb	r2, [r2, #3]
 800ba56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	3304      	adds	r3, #4
 800ba5c:	683a      	ldr	r2, [r7, #0]
 800ba5e:	7912      	ldrb	r2, [r2, #4]
 800ba60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	3305      	adds	r3, #5
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	7952      	ldrb	r2, [r2, #5]
 800ba6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	3306      	adds	r3, #6
 800ba70:	683a      	ldr	r2, [r7, #0]
 800ba72:	7992      	ldrb	r2, [r2, #6]
 800ba74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	3307      	adds	r3, #7
 800ba7a:	683a      	ldr	r2, [r7, #0]
 800ba7c:	79d2      	ldrb	r2, [r2, #7]
 800ba7e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	3308      	adds	r3, #8
 800ba84:	683a      	ldr	r2, [r7, #0]
 800ba86:	7a12      	ldrb	r2, [r2, #8]
 800ba88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	3309      	adds	r3, #9
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	7a52      	ldrb	r2, [r2, #9]
 800ba92:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	330a      	adds	r3, #10
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	7a92      	ldrb	r2, [r2, #10]
 800ba9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	330b      	adds	r3, #11
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	7ad2      	ldrb	r2, [r2, #11]
 800baa6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	330c      	adds	r3, #12
 800baac:	683a      	ldr	r2, [r7, #0]
 800baae:	7b12      	ldrb	r2, [r2, #12]
 800bab0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	330d      	adds	r3, #13
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	7b52      	ldrb	r2, [r2, #13]
 800baba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	330e      	adds	r3, #14
 800bac0:	683a      	ldr	r2, [r7, #0]
 800bac2:	7b92      	ldrb	r2, [r2, #14]
 800bac4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	330f      	adds	r3, #15
 800baca:	683a      	ldr	r2, [r7, #0]
 800bacc:	7bd2      	ldrb	r2, [r2, #15]
 800bace:	701a      	strb	r2, [r3, #0]
#endif
}
 800bad0:	bf00      	nop
 800bad2:	370c      	adds	r7, #12
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bc80      	pop	{r7}
 800bad8:	4770      	bx	lr

0800bada <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800bada:	b480      	push	{r7}
 800badc:	b085      	sub	sp, #20
 800bade:	af00      	add	r7, sp, #0
 800bae0:	60f8      	str	r0, [r7, #12]
 800bae2:	60b9      	str	r1, [r7, #8]
 800bae4:	4613      	mov	r3, r2
 800bae6:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800bae8:	e007      	b.n	800bafa <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	1c53      	adds	r3, r2, #1
 800baee:	60bb      	str	r3, [r7, #8]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	1c59      	adds	r1, r3, #1
 800baf4:	60f9      	str	r1, [r7, #12]
 800baf6:	7812      	ldrb	r2, [r2, #0]
 800baf8:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800bafa:	79fb      	ldrb	r3, [r7, #7]
 800bafc:	1e5a      	subs	r2, r3, #1
 800bafe:	71fa      	strb	r2, [r7, #7]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1f2      	bne.n	800baea <copy_block_nn+0x10>
}
 800bb04:	bf00      	nop
 800bb06:	bf00      	nop
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bc80      	pop	{r7}
 800bb0e:	4770      	bx	lr

0800bb10 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	781a      	ldrb	r2, [r3, #0]
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	4053      	eors	r3, r2
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	7819      	ldrb	r1, [r3, #0]
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	3301      	adds	r3, #1
 800bb34:	781a      	ldrb	r2, [r3, #0]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	404a      	eors	r2, r1
 800bb3c:	b2d2      	uxtb	r2, r2
 800bb3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	3302      	adds	r3, #2
 800bb44:	7819      	ldrb	r1, [r3, #0]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	3302      	adds	r3, #2
 800bb4a:	781a      	ldrb	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	3302      	adds	r3, #2
 800bb50:	404a      	eors	r2, r1
 800bb52:	b2d2      	uxtb	r2, r2
 800bb54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	3303      	adds	r3, #3
 800bb5a:	7819      	ldrb	r1, [r3, #0]
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	3303      	adds	r3, #3
 800bb60:	781a      	ldrb	r2, [r3, #0]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	3303      	adds	r3, #3
 800bb66:	404a      	eors	r2, r1
 800bb68:	b2d2      	uxtb	r2, r2
 800bb6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	3304      	adds	r3, #4
 800bb70:	7819      	ldrb	r1, [r3, #0]
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	3304      	adds	r3, #4
 800bb76:	781a      	ldrb	r2, [r3, #0]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	3304      	adds	r3, #4
 800bb7c:	404a      	eors	r2, r1
 800bb7e:	b2d2      	uxtb	r2, r2
 800bb80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	3305      	adds	r3, #5
 800bb86:	7819      	ldrb	r1, [r3, #0]
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	3305      	adds	r3, #5
 800bb8c:	781a      	ldrb	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	3305      	adds	r3, #5
 800bb92:	404a      	eors	r2, r1
 800bb94:	b2d2      	uxtb	r2, r2
 800bb96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	3306      	adds	r3, #6
 800bb9c:	7819      	ldrb	r1, [r3, #0]
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	3306      	adds	r3, #6
 800bba2:	781a      	ldrb	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	3306      	adds	r3, #6
 800bba8:	404a      	eors	r2, r1
 800bbaa:	b2d2      	uxtb	r2, r2
 800bbac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	3307      	adds	r3, #7
 800bbb2:	7819      	ldrb	r1, [r3, #0]
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	3307      	adds	r3, #7
 800bbb8:	781a      	ldrb	r2, [r3, #0]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	3307      	adds	r3, #7
 800bbbe:	404a      	eors	r2, r1
 800bbc0:	b2d2      	uxtb	r2, r2
 800bbc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	3308      	adds	r3, #8
 800bbc8:	7819      	ldrb	r1, [r3, #0]
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	3308      	adds	r3, #8
 800bbce:	781a      	ldrb	r2, [r3, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	3308      	adds	r3, #8
 800bbd4:	404a      	eors	r2, r1
 800bbd6:	b2d2      	uxtb	r2, r2
 800bbd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	3309      	adds	r3, #9
 800bbde:	7819      	ldrb	r1, [r3, #0]
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	3309      	adds	r3, #9
 800bbe4:	781a      	ldrb	r2, [r3, #0]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	3309      	adds	r3, #9
 800bbea:	404a      	eors	r2, r1
 800bbec:	b2d2      	uxtb	r2, r2
 800bbee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	330a      	adds	r3, #10
 800bbf4:	7819      	ldrb	r1, [r3, #0]
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	330a      	adds	r3, #10
 800bbfa:	781a      	ldrb	r2, [r3, #0]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	330a      	adds	r3, #10
 800bc00:	404a      	eors	r2, r1
 800bc02:	b2d2      	uxtb	r2, r2
 800bc04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	330b      	adds	r3, #11
 800bc0a:	7819      	ldrb	r1, [r3, #0]
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	330b      	adds	r3, #11
 800bc10:	781a      	ldrb	r2, [r3, #0]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	330b      	adds	r3, #11
 800bc16:	404a      	eors	r2, r1
 800bc18:	b2d2      	uxtb	r2, r2
 800bc1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	330c      	adds	r3, #12
 800bc20:	7819      	ldrb	r1, [r3, #0]
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	330c      	adds	r3, #12
 800bc26:	781a      	ldrb	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	330c      	adds	r3, #12
 800bc2c:	404a      	eors	r2, r1
 800bc2e:	b2d2      	uxtb	r2, r2
 800bc30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	330d      	adds	r3, #13
 800bc36:	7819      	ldrb	r1, [r3, #0]
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	330d      	adds	r3, #13
 800bc3c:	781a      	ldrb	r2, [r3, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	330d      	adds	r3, #13
 800bc42:	404a      	eors	r2, r1
 800bc44:	b2d2      	uxtb	r2, r2
 800bc46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	330e      	adds	r3, #14
 800bc4c:	7819      	ldrb	r1, [r3, #0]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	330e      	adds	r3, #14
 800bc52:	781a      	ldrb	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	330e      	adds	r3, #14
 800bc58:	404a      	eors	r2, r1
 800bc5a:	b2d2      	uxtb	r2, r2
 800bc5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	330f      	adds	r3, #15
 800bc62:	7819      	ldrb	r1, [r3, #0]
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	330f      	adds	r3, #15
 800bc68:	781a      	ldrb	r2, [r3, #0]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	330f      	adds	r3, #15
 800bc6e:	404a      	eors	r2, r1
 800bc70:	b2d2      	uxtb	r2, r2
 800bc72:	701a      	strb	r2, [r3, #0]
#endif
}
 800bc74:	bf00      	nop
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bc80      	pop	{r7}
 800bc7c:	4770      	bx	lr

0800bc7e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b085      	sub	sp, #20
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	60f8      	str	r0, [r7, #12]
 800bc86:	60b9      	str	r1, [r7, #8]
 800bc88:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	781a      	ldrb	r2, [r3, #0]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	4053      	eors	r3, r2
 800bc94:	b2da      	uxtb	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	7819      	ldrb	r1, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	3301      	adds	r3, #1
 800bca4:	781a      	ldrb	r2, [r3, #0]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	404a      	eors	r2, r1
 800bcac:	b2d2      	uxtb	r2, r2
 800bcae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	3302      	adds	r3, #2
 800bcb4:	7819      	ldrb	r1, [r3, #0]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	3302      	adds	r3, #2
 800bcba:	781a      	ldrb	r2, [r3, #0]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	3302      	adds	r3, #2
 800bcc0:	404a      	eors	r2, r1
 800bcc2:	b2d2      	uxtb	r2, r2
 800bcc4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	3303      	adds	r3, #3
 800bcca:	7819      	ldrb	r1, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	3303      	adds	r3, #3
 800bcd0:	781a      	ldrb	r2, [r3, #0]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	3303      	adds	r3, #3
 800bcd6:	404a      	eors	r2, r1
 800bcd8:	b2d2      	uxtb	r2, r2
 800bcda:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	3304      	adds	r3, #4
 800bce0:	7819      	ldrb	r1, [r3, #0]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	3304      	adds	r3, #4
 800bce6:	781a      	ldrb	r2, [r3, #0]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	3304      	adds	r3, #4
 800bcec:	404a      	eors	r2, r1
 800bcee:	b2d2      	uxtb	r2, r2
 800bcf0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	3305      	adds	r3, #5
 800bcf6:	7819      	ldrb	r1, [r3, #0]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	3305      	adds	r3, #5
 800bcfc:	781a      	ldrb	r2, [r3, #0]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	3305      	adds	r3, #5
 800bd02:	404a      	eors	r2, r1
 800bd04:	b2d2      	uxtb	r2, r2
 800bd06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	3306      	adds	r3, #6
 800bd0c:	7819      	ldrb	r1, [r3, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	3306      	adds	r3, #6
 800bd12:	781a      	ldrb	r2, [r3, #0]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	3306      	adds	r3, #6
 800bd18:	404a      	eors	r2, r1
 800bd1a:	b2d2      	uxtb	r2, r2
 800bd1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	3307      	adds	r3, #7
 800bd22:	7819      	ldrb	r1, [r3, #0]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	3307      	adds	r3, #7
 800bd28:	781a      	ldrb	r2, [r3, #0]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	3307      	adds	r3, #7
 800bd2e:	404a      	eors	r2, r1
 800bd30:	b2d2      	uxtb	r2, r2
 800bd32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	3308      	adds	r3, #8
 800bd38:	7819      	ldrb	r1, [r3, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	3308      	adds	r3, #8
 800bd3e:	781a      	ldrb	r2, [r3, #0]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	3308      	adds	r3, #8
 800bd44:	404a      	eors	r2, r1
 800bd46:	b2d2      	uxtb	r2, r2
 800bd48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	3309      	adds	r3, #9
 800bd4e:	7819      	ldrb	r1, [r3, #0]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	3309      	adds	r3, #9
 800bd54:	781a      	ldrb	r2, [r3, #0]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	3309      	adds	r3, #9
 800bd5a:	404a      	eors	r2, r1
 800bd5c:	b2d2      	uxtb	r2, r2
 800bd5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	330a      	adds	r3, #10
 800bd64:	7819      	ldrb	r1, [r3, #0]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	330a      	adds	r3, #10
 800bd6a:	781a      	ldrb	r2, [r3, #0]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	330a      	adds	r3, #10
 800bd70:	404a      	eors	r2, r1
 800bd72:	b2d2      	uxtb	r2, r2
 800bd74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	330b      	adds	r3, #11
 800bd7a:	7819      	ldrb	r1, [r3, #0]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	330b      	adds	r3, #11
 800bd80:	781a      	ldrb	r2, [r3, #0]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	330b      	adds	r3, #11
 800bd86:	404a      	eors	r2, r1
 800bd88:	b2d2      	uxtb	r2, r2
 800bd8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	330c      	adds	r3, #12
 800bd90:	7819      	ldrb	r1, [r3, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	330c      	adds	r3, #12
 800bd96:	781a      	ldrb	r2, [r3, #0]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	330c      	adds	r3, #12
 800bd9c:	404a      	eors	r2, r1
 800bd9e:	b2d2      	uxtb	r2, r2
 800bda0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	330d      	adds	r3, #13
 800bda6:	7819      	ldrb	r1, [r3, #0]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	330d      	adds	r3, #13
 800bdac:	781a      	ldrb	r2, [r3, #0]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	330d      	adds	r3, #13
 800bdb2:	404a      	eors	r2, r1
 800bdb4:	b2d2      	uxtb	r2, r2
 800bdb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	330e      	adds	r3, #14
 800bdbc:	7819      	ldrb	r1, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	330e      	adds	r3, #14
 800bdc2:	781a      	ldrb	r2, [r3, #0]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	330e      	adds	r3, #14
 800bdc8:	404a      	eors	r2, r1
 800bdca:	b2d2      	uxtb	r2, r2
 800bdcc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	330f      	adds	r3, #15
 800bdd2:	7819      	ldrb	r1, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	330f      	adds	r3, #15
 800bdd8:	781a      	ldrb	r2, [r3, #0]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	330f      	adds	r3, #15
 800bdde:	404a      	eors	r2, r1
 800bde0:	b2d2      	uxtb	r2, r2
 800bde2:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800bde4:	bf00      	nop
 800bde6:	3714      	adds	r7, #20
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bc80      	pop	{r7}
 800bdec:	4770      	bx	lr

0800bdee <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b082      	sub	sp, #8
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff fe88 	bl	800bb10 <xor_block>
}
 800be00:	bf00      	nop
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800be08:	b480      	push	{r7}
 800be0a:	b085      	sub	sp, #20
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	461a      	mov	r2, r3
 800be16:	4b48      	ldr	r3, [pc, #288]	@ (800bf38 <shift_sub_rows+0x130>)
 800be18:	5c9a      	ldrb	r2, [r3, r2]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	701a      	strb	r2, [r3, #0]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	3304      	adds	r3, #4
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	4619      	mov	r1, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	3304      	adds	r3, #4
 800be2a:	4a43      	ldr	r2, [pc, #268]	@ (800bf38 <shift_sub_rows+0x130>)
 800be2c:	5c52      	ldrb	r2, [r2, r1]
 800be2e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	3308      	adds	r3, #8
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	4619      	mov	r1, r3
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	3308      	adds	r3, #8
 800be3c:	4a3e      	ldr	r2, [pc, #248]	@ (800bf38 <shift_sub_rows+0x130>)
 800be3e:	5c52      	ldrb	r2, [r2, r1]
 800be40:	701a      	strb	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	330c      	adds	r3, #12
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	4619      	mov	r1, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	330c      	adds	r3, #12
 800be4e:	4a3a      	ldr	r2, [pc, #232]	@ (800bf38 <shift_sub_rows+0x130>)
 800be50:	5c52      	ldrb	r2, [r2, r1]
 800be52:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	785b      	ldrb	r3, [r3, #1]
 800be58:	73fb      	strb	r3, [r7, #15]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	3305      	adds	r3, #5
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	4619      	mov	r1, r3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	3301      	adds	r3, #1
 800be66:	4a34      	ldr	r2, [pc, #208]	@ (800bf38 <shift_sub_rows+0x130>)
 800be68:	5c52      	ldrb	r2, [r2, r1]
 800be6a:	701a      	strb	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	3309      	adds	r3, #9
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	4619      	mov	r1, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	3305      	adds	r3, #5
 800be78:	4a2f      	ldr	r2, [pc, #188]	@ (800bf38 <shift_sub_rows+0x130>)
 800be7a:	5c52      	ldrb	r2, [r2, r1]
 800be7c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	330d      	adds	r3, #13
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	4619      	mov	r1, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	3309      	adds	r3, #9
 800be8a:	4a2b      	ldr	r2, [pc, #172]	@ (800bf38 <shift_sub_rows+0x130>)
 800be8c:	5c52      	ldrb	r2, [r2, r1]
 800be8e:	701a      	strb	r2, [r3, #0]
 800be90:	7bfa      	ldrb	r2, [r7, #15]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	330d      	adds	r3, #13
 800be96:	4928      	ldr	r1, [pc, #160]	@ (800bf38 <shift_sub_rows+0x130>)
 800be98:	5c8a      	ldrb	r2, [r1, r2]
 800be9a:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	789b      	ldrb	r3, [r3, #2]
 800bea0:	73fb      	strb	r3, [r7, #15]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	330a      	adds	r3, #10
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	4619      	mov	r1, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	3302      	adds	r3, #2
 800beae:	4a22      	ldr	r2, [pc, #136]	@ (800bf38 <shift_sub_rows+0x130>)
 800beb0:	5c52      	ldrb	r2, [r2, r1]
 800beb2:	701a      	strb	r2, [r3, #0]
 800beb4:	7bfa      	ldrb	r2, [r7, #15]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	330a      	adds	r3, #10
 800beba:	491f      	ldr	r1, [pc, #124]	@ (800bf38 <shift_sub_rows+0x130>)
 800bebc:	5c8a      	ldrb	r2, [r1, r2]
 800bebe:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	799b      	ldrb	r3, [r3, #6]
 800bec4:	73fb      	strb	r3, [r7, #15]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	330e      	adds	r3, #14
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	4619      	mov	r1, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	3306      	adds	r3, #6
 800bed2:	4a19      	ldr	r2, [pc, #100]	@ (800bf38 <shift_sub_rows+0x130>)
 800bed4:	5c52      	ldrb	r2, [r2, r1]
 800bed6:	701a      	strb	r2, [r3, #0]
 800bed8:	7bfa      	ldrb	r2, [r7, #15]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	330e      	adds	r3, #14
 800bede:	4916      	ldr	r1, [pc, #88]	@ (800bf38 <shift_sub_rows+0x130>)
 800bee0:	5c8a      	ldrb	r2, [r1, r2]
 800bee2:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	7bdb      	ldrb	r3, [r3, #15]
 800bee8:	73fb      	strb	r3, [r7, #15]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	330b      	adds	r3, #11
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	4619      	mov	r1, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	330f      	adds	r3, #15
 800bef6:	4a10      	ldr	r2, [pc, #64]	@ (800bf38 <shift_sub_rows+0x130>)
 800bef8:	5c52      	ldrb	r2, [r2, r1]
 800befa:	701a      	strb	r2, [r3, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	3307      	adds	r3, #7
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	4619      	mov	r1, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	330b      	adds	r3, #11
 800bf08:	4a0b      	ldr	r2, [pc, #44]	@ (800bf38 <shift_sub_rows+0x130>)
 800bf0a:	5c52      	ldrb	r2, [r2, r1]
 800bf0c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	3303      	adds	r3, #3
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	4619      	mov	r1, r3
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	3307      	adds	r3, #7
 800bf1a:	4a07      	ldr	r2, [pc, #28]	@ (800bf38 <shift_sub_rows+0x130>)
 800bf1c:	5c52      	ldrb	r2, [r2, r1]
 800bf1e:	701a      	strb	r2, [r3, #0]
 800bf20:	7bfa      	ldrb	r2, [r7, #15]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	3303      	adds	r3, #3
 800bf26:	4904      	ldr	r1, [pc, #16]	@ (800bf38 <shift_sub_rows+0x130>)
 800bf28:	5c8a      	ldrb	r2, [r1, r2]
 800bf2a:	701a      	strb	r2, [r3, #0]
}
 800bf2c:	bf00      	nop
 800bf2e:	3714      	adds	r7, #20
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bc80      	pop	{r7}
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	0801fb0c 	.word	0x0801fb0c

0800bf3c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800bf44:	f107 0308 	add.w	r3, r7, #8
 800bf48:	6879      	ldr	r1, [r7, #4]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7ff fd6c 	bl	800ba28 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800bf50:	7a3b      	ldrb	r3, [r7, #8]
 800bf52:	461a      	mov	r2, r3
 800bf54:	4b9a      	ldr	r3, [pc, #616]	@ (800c1c0 <mix_sub_columns+0x284>)
 800bf56:	5c9a      	ldrb	r2, [r3, r2]
 800bf58:	7b7b      	ldrb	r3, [r7, #13]
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	4b99      	ldr	r3, [pc, #612]	@ (800c1c4 <mix_sub_columns+0x288>)
 800bf5e:	5c5b      	ldrb	r3, [r3, r1]
 800bf60:	4053      	eors	r3, r2
 800bf62:	b2da      	uxtb	r2, r3
 800bf64:	7cbb      	ldrb	r3, [r7, #18]
 800bf66:	4619      	mov	r1, r3
 800bf68:	4b97      	ldr	r3, [pc, #604]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800bf6a:	5c5b      	ldrb	r3, [r3, r1]
 800bf6c:	4053      	eors	r3, r2
 800bf6e:	b2da      	uxtb	r2, r3
 800bf70:	7dfb      	ldrb	r3, [r7, #23]
 800bf72:	4619      	mov	r1, r3
 800bf74:	4b94      	ldr	r3, [pc, #592]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800bf76:	5c5b      	ldrb	r3, [r3, r1]
 800bf78:	4053      	eors	r3, r2
 800bf7a:	b2da      	uxtb	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800bf80:	7a3b      	ldrb	r3, [r7, #8]
 800bf82:	461a      	mov	r2, r3
 800bf84:	4b90      	ldr	r3, [pc, #576]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800bf86:	5c9a      	ldrb	r2, [r3, r2]
 800bf88:	7b7b      	ldrb	r3, [r7, #13]
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	4b8c      	ldr	r3, [pc, #560]	@ (800c1c0 <mix_sub_columns+0x284>)
 800bf8e:	5c5b      	ldrb	r3, [r3, r1]
 800bf90:	4053      	eors	r3, r2
 800bf92:	b2da      	uxtb	r2, r3
 800bf94:	7cbb      	ldrb	r3, [r7, #18]
 800bf96:	4619      	mov	r1, r3
 800bf98:	4b8a      	ldr	r3, [pc, #552]	@ (800c1c4 <mix_sub_columns+0x288>)
 800bf9a:	5c5b      	ldrb	r3, [r3, r1]
 800bf9c:	4053      	eors	r3, r2
 800bf9e:	b2d9      	uxtb	r1, r3
 800bfa0:	7dfb      	ldrb	r3, [r7, #23]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	4b88      	ldr	r3, [pc, #544]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800bfa6:	5c9a      	ldrb	r2, [r3, r2]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	404a      	eors	r2, r1
 800bfae:	b2d2      	uxtb	r2, r2
 800bfb0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800bfb2:	7a3b      	ldrb	r3, [r7, #8]
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	4b84      	ldr	r3, [pc, #528]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800bfb8:	5c9a      	ldrb	r2, [r3, r2]
 800bfba:	7b7b      	ldrb	r3, [r7, #13]
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	4b82      	ldr	r3, [pc, #520]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800bfc0:	5c5b      	ldrb	r3, [r3, r1]
 800bfc2:	4053      	eors	r3, r2
 800bfc4:	b2da      	uxtb	r2, r3
 800bfc6:	7cbb      	ldrb	r3, [r7, #18]
 800bfc8:	4619      	mov	r1, r3
 800bfca:	4b7d      	ldr	r3, [pc, #500]	@ (800c1c0 <mix_sub_columns+0x284>)
 800bfcc:	5c5b      	ldrb	r3, [r3, r1]
 800bfce:	4053      	eors	r3, r2
 800bfd0:	b2d9      	uxtb	r1, r3
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	4b7b      	ldr	r3, [pc, #492]	@ (800c1c4 <mix_sub_columns+0x288>)
 800bfd8:	5c9a      	ldrb	r2, [r3, r2]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	3302      	adds	r3, #2
 800bfde:	404a      	eors	r2, r1
 800bfe0:	b2d2      	uxtb	r2, r2
 800bfe2:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800bfe4:	7a3b      	ldrb	r3, [r7, #8]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	4b76      	ldr	r3, [pc, #472]	@ (800c1c4 <mix_sub_columns+0x288>)
 800bfea:	5c9a      	ldrb	r2, [r3, r2]
 800bfec:	7b7b      	ldrb	r3, [r7, #13]
 800bfee:	4619      	mov	r1, r3
 800bff0:	4b75      	ldr	r3, [pc, #468]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800bff2:	5c5b      	ldrb	r3, [r3, r1]
 800bff4:	4053      	eors	r3, r2
 800bff6:	b2da      	uxtb	r2, r3
 800bff8:	7cbb      	ldrb	r3, [r7, #18]
 800bffa:	4619      	mov	r1, r3
 800bffc:	4b72      	ldr	r3, [pc, #456]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800bffe:	5c5b      	ldrb	r3, [r3, r1]
 800c000:	4053      	eors	r3, r2
 800c002:	b2d9      	uxtb	r1, r3
 800c004:	7dfb      	ldrb	r3, [r7, #23]
 800c006:	461a      	mov	r2, r3
 800c008:	4b6d      	ldr	r3, [pc, #436]	@ (800c1c0 <mix_sub_columns+0x284>)
 800c00a:	5c9a      	ldrb	r2, [r3, r2]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	3303      	adds	r3, #3
 800c010:	404a      	eors	r2, r1
 800c012:	b2d2      	uxtb	r2, r2
 800c014:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c016:	7b3b      	ldrb	r3, [r7, #12]
 800c018:	461a      	mov	r2, r3
 800c01a:	4b69      	ldr	r3, [pc, #420]	@ (800c1c0 <mix_sub_columns+0x284>)
 800c01c:	5c9a      	ldrb	r2, [r3, r2]
 800c01e:	7c7b      	ldrb	r3, [r7, #17]
 800c020:	4619      	mov	r1, r3
 800c022:	4b68      	ldr	r3, [pc, #416]	@ (800c1c4 <mix_sub_columns+0x288>)
 800c024:	5c5b      	ldrb	r3, [r3, r1]
 800c026:	4053      	eors	r3, r2
 800c028:	b2da      	uxtb	r2, r3
 800c02a:	7dbb      	ldrb	r3, [r7, #22]
 800c02c:	4619      	mov	r1, r3
 800c02e:	4b66      	ldr	r3, [pc, #408]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c030:	5c5b      	ldrb	r3, [r3, r1]
 800c032:	4053      	eors	r3, r2
 800c034:	b2d9      	uxtb	r1, r3
 800c036:	7afb      	ldrb	r3, [r7, #11]
 800c038:	461a      	mov	r2, r3
 800c03a:	4b63      	ldr	r3, [pc, #396]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c03c:	5c9a      	ldrb	r2, [r3, r2]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	3304      	adds	r3, #4
 800c042:	404a      	eors	r2, r1
 800c044:	b2d2      	uxtb	r2, r2
 800c046:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c048:	7b3b      	ldrb	r3, [r7, #12]
 800c04a:	461a      	mov	r2, r3
 800c04c:	4b5e      	ldr	r3, [pc, #376]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c04e:	5c9a      	ldrb	r2, [r3, r2]
 800c050:	7c7b      	ldrb	r3, [r7, #17]
 800c052:	4619      	mov	r1, r3
 800c054:	4b5a      	ldr	r3, [pc, #360]	@ (800c1c0 <mix_sub_columns+0x284>)
 800c056:	5c5b      	ldrb	r3, [r3, r1]
 800c058:	4053      	eors	r3, r2
 800c05a:	b2da      	uxtb	r2, r3
 800c05c:	7dbb      	ldrb	r3, [r7, #22]
 800c05e:	4619      	mov	r1, r3
 800c060:	4b58      	ldr	r3, [pc, #352]	@ (800c1c4 <mix_sub_columns+0x288>)
 800c062:	5c5b      	ldrb	r3, [r3, r1]
 800c064:	4053      	eors	r3, r2
 800c066:	b2d9      	uxtb	r1, r3
 800c068:	7afb      	ldrb	r3, [r7, #11]
 800c06a:	461a      	mov	r2, r3
 800c06c:	4b56      	ldr	r3, [pc, #344]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c06e:	5c9a      	ldrb	r2, [r3, r2]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	3305      	adds	r3, #5
 800c074:	404a      	eors	r2, r1
 800c076:	b2d2      	uxtb	r2, r2
 800c078:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c07a:	7b3b      	ldrb	r3, [r7, #12]
 800c07c:	461a      	mov	r2, r3
 800c07e:	4b52      	ldr	r3, [pc, #328]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c080:	5c9a      	ldrb	r2, [r3, r2]
 800c082:	7c7b      	ldrb	r3, [r7, #17]
 800c084:	4619      	mov	r1, r3
 800c086:	4b50      	ldr	r3, [pc, #320]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c088:	5c5b      	ldrb	r3, [r3, r1]
 800c08a:	4053      	eors	r3, r2
 800c08c:	b2da      	uxtb	r2, r3
 800c08e:	7dbb      	ldrb	r3, [r7, #22]
 800c090:	4619      	mov	r1, r3
 800c092:	4b4b      	ldr	r3, [pc, #300]	@ (800c1c0 <mix_sub_columns+0x284>)
 800c094:	5c5b      	ldrb	r3, [r3, r1]
 800c096:	4053      	eors	r3, r2
 800c098:	b2d9      	uxtb	r1, r3
 800c09a:	7afb      	ldrb	r3, [r7, #11]
 800c09c:	461a      	mov	r2, r3
 800c09e:	4b49      	ldr	r3, [pc, #292]	@ (800c1c4 <mix_sub_columns+0x288>)
 800c0a0:	5c9a      	ldrb	r2, [r3, r2]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	3306      	adds	r3, #6
 800c0a6:	404a      	eors	r2, r1
 800c0a8:	b2d2      	uxtb	r2, r2
 800c0aa:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c0ac:	7b3b      	ldrb	r3, [r7, #12]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	4b44      	ldr	r3, [pc, #272]	@ (800c1c4 <mix_sub_columns+0x288>)
 800c0b2:	5c9a      	ldrb	r2, [r3, r2]
 800c0b4:	7c7b      	ldrb	r3, [r7, #17]
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4b43      	ldr	r3, [pc, #268]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c0ba:	5c5b      	ldrb	r3, [r3, r1]
 800c0bc:	4053      	eors	r3, r2
 800c0be:	b2da      	uxtb	r2, r3
 800c0c0:	7dbb      	ldrb	r3, [r7, #22]
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	4b40      	ldr	r3, [pc, #256]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c0c6:	5c5b      	ldrb	r3, [r3, r1]
 800c0c8:	4053      	eors	r3, r2
 800c0ca:	b2d9      	uxtb	r1, r3
 800c0cc:	7afb      	ldrb	r3, [r7, #11]
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	4b3b      	ldr	r3, [pc, #236]	@ (800c1c0 <mix_sub_columns+0x284>)
 800c0d2:	5c9a      	ldrb	r2, [r3, r2]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	3307      	adds	r3, #7
 800c0d8:	404a      	eors	r2, r1
 800c0da:	b2d2      	uxtb	r2, r2
 800c0dc:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c0de:	7c3b      	ldrb	r3, [r7, #16]
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	4b37      	ldr	r3, [pc, #220]	@ (800c1c0 <mix_sub_columns+0x284>)
 800c0e4:	5c9a      	ldrb	r2, [r3, r2]
 800c0e6:	7d7b      	ldrb	r3, [r7, #21]
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	4b36      	ldr	r3, [pc, #216]	@ (800c1c4 <mix_sub_columns+0x288>)
 800c0ec:	5c5b      	ldrb	r3, [r3, r1]
 800c0ee:	4053      	eors	r3, r2
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	7abb      	ldrb	r3, [r7, #10]
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	4b34      	ldr	r3, [pc, #208]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c0f8:	5c5b      	ldrb	r3, [r3, r1]
 800c0fa:	4053      	eors	r3, r2
 800c0fc:	b2d9      	uxtb	r1, r3
 800c0fe:	7bfb      	ldrb	r3, [r7, #15]
 800c100:	461a      	mov	r2, r3
 800c102:	4b31      	ldr	r3, [pc, #196]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c104:	5c9a      	ldrb	r2, [r3, r2]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	3308      	adds	r3, #8
 800c10a:	404a      	eors	r2, r1
 800c10c:	b2d2      	uxtb	r2, r2
 800c10e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c110:	7c3b      	ldrb	r3, [r7, #16]
 800c112:	461a      	mov	r2, r3
 800c114:	4b2c      	ldr	r3, [pc, #176]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c116:	5c9a      	ldrb	r2, [r3, r2]
 800c118:	7d7b      	ldrb	r3, [r7, #21]
 800c11a:	4619      	mov	r1, r3
 800c11c:	4b28      	ldr	r3, [pc, #160]	@ (800c1c0 <mix_sub_columns+0x284>)
 800c11e:	5c5b      	ldrb	r3, [r3, r1]
 800c120:	4053      	eors	r3, r2
 800c122:	b2da      	uxtb	r2, r3
 800c124:	7abb      	ldrb	r3, [r7, #10]
 800c126:	4619      	mov	r1, r3
 800c128:	4b26      	ldr	r3, [pc, #152]	@ (800c1c4 <mix_sub_columns+0x288>)
 800c12a:	5c5b      	ldrb	r3, [r3, r1]
 800c12c:	4053      	eors	r3, r2
 800c12e:	b2d9      	uxtb	r1, r3
 800c130:	7bfb      	ldrb	r3, [r7, #15]
 800c132:	461a      	mov	r2, r3
 800c134:	4b24      	ldr	r3, [pc, #144]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c136:	5c9a      	ldrb	r2, [r3, r2]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	3309      	adds	r3, #9
 800c13c:	404a      	eors	r2, r1
 800c13e:	b2d2      	uxtb	r2, r2
 800c140:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c142:	7c3b      	ldrb	r3, [r7, #16]
 800c144:	461a      	mov	r2, r3
 800c146:	4b20      	ldr	r3, [pc, #128]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c148:	5c9a      	ldrb	r2, [r3, r2]
 800c14a:	7d7b      	ldrb	r3, [r7, #21]
 800c14c:	4619      	mov	r1, r3
 800c14e:	4b1e      	ldr	r3, [pc, #120]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c150:	5c5b      	ldrb	r3, [r3, r1]
 800c152:	4053      	eors	r3, r2
 800c154:	b2da      	uxtb	r2, r3
 800c156:	7abb      	ldrb	r3, [r7, #10]
 800c158:	4619      	mov	r1, r3
 800c15a:	4b19      	ldr	r3, [pc, #100]	@ (800c1c0 <mix_sub_columns+0x284>)
 800c15c:	5c5b      	ldrb	r3, [r3, r1]
 800c15e:	4053      	eors	r3, r2
 800c160:	b2d9      	uxtb	r1, r3
 800c162:	7bfb      	ldrb	r3, [r7, #15]
 800c164:	461a      	mov	r2, r3
 800c166:	4b17      	ldr	r3, [pc, #92]	@ (800c1c4 <mix_sub_columns+0x288>)
 800c168:	5c9a      	ldrb	r2, [r3, r2]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	330a      	adds	r3, #10
 800c16e:	404a      	eors	r2, r1
 800c170:	b2d2      	uxtb	r2, r2
 800c172:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c174:	7c3b      	ldrb	r3, [r7, #16]
 800c176:	461a      	mov	r2, r3
 800c178:	4b12      	ldr	r3, [pc, #72]	@ (800c1c4 <mix_sub_columns+0x288>)
 800c17a:	5c9a      	ldrb	r2, [r3, r2]
 800c17c:	7d7b      	ldrb	r3, [r7, #21]
 800c17e:	4619      	mov	r1, r3
 800c180:	4b11      	ldr	r3, [pc, #68]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c182:	5c5b      	ldrb	r3, [r3, r1]
 800c184:	4053      	eors	r3, r2
 800c186:	b2da      	uxtb	r2, r3
 800c188:	7abb      	ldrb	r3, [r7, #10]
 800c18a:	4619      	mov	r1, r3
 800c18c:	4b0e      	ldr	r3, [pc, #56]	@ (800c1c8 <mix_sub_columns+0x28c>)
 800c18e:	5c5b      	ldrb	r3, [r3, r1]
 800c190:	4053      	eors	r3, r2
 800c192:	b2d9      	uxtb	r1, r3
 800c194:	7bfb      	ldrb	r3, [r7, #15]
 800c196:	461a      	mov	r2, r3
 800c198:	4b09      	ldr	r3, [pc, #36]	@ (800c1c0 <mix_sub_columns+0x284>)
 800c19a:	5c9a      	ldrb	r2, [r3, r2]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	330b      	adds	r3, #11
 800c1a0:	404a      	eors	r2, r1
 800c1a2:	b2d2      	uxtb	r2, r2
 800c1a4:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c1a6:	7d3b      	ldrb	r3, [r7, #20]
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	4b05      	ldr	r3, [pc, #20]	@ (800c1c0 <mix_sub_columns+0x284>)
 800c1ac:	5c9a      	ldrb	r2, [r3, r2]
 800c1ae:	7a7b      	ldrb	r3, [r7, #9]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	4b04      	ldr	r3, [pc, #16]	@ (800c1c4 <mix_sub_columns+0x288>)
 800c1b4:	5c5b      	ldrb	r3, [r3, r1]
 800c1b6:	4053      	eors	r3, r2
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	7bbb      	ldrb	r3, [r7, #14]
 800c1bc:	4619      	mov	r1, r3
 800c1be:	e005      	b.n	800c1cc <mix_sub_columns+0x290>
 800c1c0:	0801fc0c 	.word	0x0801fc0c
 800c1c4:	0801fd0c 	.word	0x0801fd0c
 800c1c8:	0801fb0c 	.word	0x0801fb0c
 800c1cc:	4b2d      	ldr	r3, [pc, #180]	@ (800c284 <mix_sub_columns+0x348>)
 800c1ce:	5c5b      	ldrb	r3, [r3, r1]
 800c1d0:	4053      	eors	r3, r2
 800c1d2:	b2d9      	uxtb	r1, r3
 800c1d4:	7cfb      	ldrb	r3, [r7, #19]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	4b2a      	ldr	r3, [pc, #168]	@ (800c284 <mix_sub_columns+0x348>)
 800c1da:	5c9a      	ldrb	r2, [r3, r2]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	330c      	adds	r3, #12
 800c1e0:	404a      	eors	r2, r1
 800c1e2:	b2d2      	uxtb	r2, r2
 800c1e4:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c1e6:	7d3b      	ldrb	r3, [r7, #20]
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	4b26      	ldr	r3, [pc, #152]	@ (800c284 <mix_sub_columns+0x348>)
 800c1ec:	5c9a      	ldrb	r2, [r3, r2]
 800c1ee:	7a7b      	ldrb	r3, [r7, #9]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	4b25      	ldr	r3, [pc, #148]	@ (800c288 <mix_sub_columns+0x34c>)
 800c1f4:	5c5b      	ldrb	r3, [r3, r1]
 800c1f6:	4053      	eors	r3, r2
 800c1f8:	b2da      	uxtb	r2, r3
 800c1fa:	7bbb      	ldrb	r3, [r7, #14]
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	4b23      	ldr	r3, [pc, #140]	@ (800c28c <mix_sub_columns+0x350>)
 800c200:	5c5b      	ldrb	r3, [r3, r1]
 800c202:	4053      	eors	r3, r2
 800c204:	b2d9      	uxtb	r1, r3
 800c206:	7cfb      	ldrb	r3, [r7, #19]
 800c208:	461a      	mov	r2, r3
 800c20a:	4b1e      	ldr	r3, [pc, #120]	@ (800c284 <mix_sub_columns+0x348>)
 800c20c:	5c9a      	ldrb	r2, [r3, r2]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	330d      	adds	r3, #13
 800c212:	404a      	eors	r2, r1
 800c214:	b2d2      	uxtb	r2, r2
 800c216:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c218:	7d3b      	ldrb	r3, [r7, #20]
 800c21a:	461a      	mov	r2, r3
 800c21c:	4b19      	ldr	r3, [pc, #100]	@ (800c284 <mix_sub_columns+0x348>)
 800c21e:	5c9a      	ldrb	r2, [r3, r2]
 800c220:	7a7b      	ldrb	r3, [r7, #9]
 800c222:	4619      	mov	r1, r3
 800c224:	4b17      	ldr	r3, [pc, #92]	@ (800c284 <mix_sub_columns+0x348>)
 800c226:	5c5b      	ldrb	r3, [r3, r1]
 800c228:	4053      	eors	r3, r2
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	7bbb      	ldrb	r3, [r7, #14]
 800c22e:	4619      	mov	r1, r3
 800c230:	4b15      	ldr	r3, [pc, #84]	@ (800c288 <mix_sub_columns+0x34c>)
 800c232:	5c5b      	ldrb	r3, [r3, r1]
 800c234:	4053      	eors	r3, r2
 800c236:	b2d9      	uxtb	r1, r3
 800c238:	7cfb      	ldrb	r3, [r7, #19]
 800c23a:	461a      	mov	r2, r3
 800c23c:	4b13      	ldr	r3, [pc, #76]	@ (800c28c <mix_sub_columns+0x350>)
 800c23e:	5c9a      	ldrb	r2, [r3, r2]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	330e      	adds	r3, #14
 800c244:	404a      	eors	r2, r1
 800c246:	b2d2      	uxtb	r2, r2
 800c248:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c24a:	7d3b      	ldrb	r3, [r7, #20]
 800c24c:	461a      	mov	r2, r3
 800c24e:	4b0f      	ldr	r3, [pc, #60]	@ (800c28c <mix_sub_columns+0x350>)
 800c250:	5c9a      	ldrb	r2, [r3, r2]
 800c252:	7a7b      	ldrb	r3, [r7, #9]
 800c254:	4619      	mov	r1, r3
 800c256:	4b0b      	ldr	r3, [pc, #44]	@ (800c284 <mix_sub_columns+0x348>)
 800c258:	5c5b      	ldrb	r3, [r3, r1]
 800c25a:	4053      	eors	r3, r2
 800c25c:	b2da      	uxtb	r2, r3
 800c25e:	7bbb      	ldrb	r3, [r7, #14]
 800c260:	4619      	mov	r1, r3
 800c262:	4b08      	ldr	r3, [pc, #32]	@ (800c284 <mix_sub_columns+0x348>)
 800c264:	5c5b      	ldrb	r3, [r3, r1]
 800c266:	4053      	eors	r3, r2
 800c268:	b2d9      	uxtb	r1, r3
 800c26a:	7cfb      	ldrb	r3, [r7, #19]
 800c26c:	461a      	mov	r2, r3
 800c26e:	4b06      	ldr	r3, [pc, #24]	@ (800c288 <mix_sub_columns+0x34c>)
 800c270:	5c9a      	ldrb	r2, [r3, r2]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	330f      	adds	r3, #15
 800c276:	404a      	eors	r2, r1
 800c278:	b2d2      	uxtb	r2, r2
 800c27a:	701a      	strb	r2, [r3, #0]
  }
 800c27c:	bf00      	nop
 800c27e:	3718      	adds	r7, #24
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	0801fb0c 	.word	0x0801fb0c
 800c288:	0801fc0c 	.word	0x0801fc0c
 800c28c:	0801fd0c 	.word	0x0801fd0c

0800c290 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	460b      	mov	r3, r1
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c29e:	7afb      	ldrb	r3, [r7, #11]
 800c2a0:	3b10      	subs	r3, #16
 800c2a2:	2b10      	cmp	r3, #16
 800c2a4:	bf8c      	ite	hi
 800c2a6:	2201      	movhi	r2, #1
 800c2a8:	2200      	movls	r2, #0
 800c2aa:	b2d2      	uxtb	r2, r2
 800c2ac:	2a00      	cmp	r2, #0
 800c2ae:	d10b      	bne.n	800c2c8 <lorawan_aes_set_key+0x38>
 800c2b0:	4a64      	ldr	r2, [pc, #400]	@ (800c444 <lorawan_aes_set_key+0x1b4>)
 800c2b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c2b6:	f003 0301 	and.w	r3, r3, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	bf14      	ite	ne
 800c2be:	2301      	movne	r3, #1
 800c2c0:	2300      	moveq	r3, #0
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d105      	bne.n	800c2d4 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800c2d0:	23ff      	movs	r3, #255	@ 0xff
 800c2d2:	e0b2      	b.n	800c43a <lorawan_aes_set_key+0x1aa>
        break;
 800c2d4:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	7afa      	ldrb	r2, [r7, #11]
 800c2da:	68f9      	ldr	r1, [r7, #12]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7ff fbfc 	bl	800bada <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c2e2:	7afb      	ldrb	r3, [r7, #11]
 800c2e4:	331c      	adds	r3, #28
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800c2ec:	7c7b      	ldrb	r3, [r7, #17]
 800c2ee:	091b      	lsrs	r3, r3, #4
 800c2f0:	b2db      	uxtb	r3, r3
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	b2da      	uxtb	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c2fc:	7afb      	ldrb	r3, [r7, #11]
 800c2fe:	75fb      	strb	r3, [r7, #23]
 800c300:	2301      	movs	r3, #1
 800c302:	75bb      	strb	r3, [r7, #22]
 800c304:	e093      	b.n	800c42e <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800c306:	7dfb      	ldrb	r3, [r7, #23]
 800c308:	3b04      	subs	r3, #4
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	5cd3      	ldrb	r3, [r2, r3]
 800c30e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800c310:	7dfb      	ldrb	r3, [r7, #23]
 800c312:	3b03      	subs	r3, #3
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	5cd3      	ldrb	r3, [r2, r3]
 800c318:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800c31a:	7dfb      	ldrb	r3, [r7, #23]
 800c31c:	3b02      	subs	r3, #2
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	5cd3      	ldrb	r3, [r2, r3]
 800c322:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800c324:	7dfb      	ldrb	r3, [r7, #23]
 800c326:	3b01      	subs	r3, #1
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	5cd3      	ldrb	r3, [r2, r3]
 800c32c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800c32e:	7dfb      	ldrb	r3, [r7, #23]
 800c330:	7afa      	ldrb	r2, [r7, #11]
 800c332:	fbb3 f1f2 	udiv	r1, r3, r2
 800c336:	fb01 f202 	mul.w	r2, r1, r2
 800c33a:	1a9b      	subs	r3, r3, r2
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d127      	bne.n	800c392 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800c342:	7d7b      	ldrb	r3, [r7, #21]
 800c344:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800c346:	7d3b      	ldrb	r3, [r7, #20]
 800c348:	4a3f      	ldr	r2, [pc, #252]	@ (800c448 <lorawan_aes_set_key+0x1b8>)
 800c34a:	5cd2      	ldrb	r2, [r2, r3]
 800c34c:	7dbb      	ldrb	r3, [r7, #22]
 800c34e:	4053      	eors	r3, r2
 800c350:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800c352:	7cfb      	ldrb	r3, [r7, #19]
 800c354:	4a3c      	ldr	r2, [pc, #240]	@ (800c448 <lorawan_aes_set_key+0x1b8>)
 800c356:	5cd3      	ldrb	r3, [r2, r3]
 800c358:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800c35a:	7cbb      	ldrb	r3, [r7, #18]
 800c35c:	4a3a      	ldr	r2, [pc, #232]	@ (800c448 <lorawan_aes_set_key+0x1b8>)
 800c35e:	5cd3      	ldrb	r3, [r2, r3]
 800c360:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800c362:	7c3b      	ldrb	r3, [r7, #16]
 800c364:	4a38      	ldr	r2, [pc, #224]	@ (800c448 <lorawan_aes_set_key+0x1b8>)
 800c366:	5cd3      	ldrb	r3, [r2, r3]
 800c368:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800c36a:	7dbb      	ldrb	r3, [r7, #22]
 800c36c:	005b      	lsls	r3, r3, #1
 800c36e:	b25a      	sxtb	r2, r3
 800c370:	7dbb      	ldrb	r3, [r7, #22]
 800c372:	09db      	lsrs	r3, r3, #7
 800c374:	b2db      	uxtb	r3, r3
 800c376:	4619      	mov	r1, r3
 800c378:	0049      	lsls	r1, r1, #1
 800c37a:	440b      	add	r3, r1
 800c37c:	4619      	mov	r1, r3
 800c37e:	00c8      	lsls	r0, r1, #3
 800c380:	4619      	mov	r1, r3
 800c382:	4603      	mov	r3, r0
 800c384:	440b      	add	r3, r1
 800c386:	b2db      	uxtb	r3, r3
 800c388:	b25b      	sxtb	r3, r3
 800c38a:	4053      	eors	r3, r2
 800c38c:	b25b      	sxtb	r3, r3
 800c38e:	75bb      	strb	r3, [r7, #22]
 800c390:	e01c      	b.n	800c3cc <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800c392:	7afb      	ldrb	r3, [r7, #11]
 800c394:	2b18      	cmp	r3, #24
 800c396:	d919      	bls.n	800c3cc <lorawan_aes_set_key+0x13c>
 800c398:	7dfb      	ldrb	r3, [r7, #23]
 800c39a:	7afa      	ldrb	r2, [r7, #11]
 800c39c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3a0:	fb01 f202 	mul.w	r2, r1, r2
 800c3a4:	1a9b      	subs	r3, r3, r2
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	2b10      	cmp	r3, #16
 800c3aa:	d10f      	bne.n	800c3cc <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800c3ac:	7d7b      	ldrb	r3, [r7, #21]
 800c3ae:	4a26      	ldr	r2, [pc, #152]	@ (800c448 <lorawan_aes_set_key+0x1b8>)
 800c3b0:	5cd3      	ldrb	r3, [r2, r3]
 800c3b2:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800c3b4:	7d3b      	ldrb	r3, [r7, #20]
 800c3b6:	4a24      	ldr	r2, [pc, #144]	@ (800c448 <lorawan_aes_set_key+0x1b8>)
 800c3b8:	5cd3      	ldrb	r3, [r2, r3]
 800c3ba:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800c3bc:	7cfb      	ldrb	r3, [r7, #19]
 800c3be:	4a22      	ldr	r2, [pc, #136]	@ (800c448 <lorawan_aes_set_key+0x1b8>)
 800c3c0:	5cd3      	ldrb	r3, [r2, r3]
 800c3c2:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800c3c4:	7cbb      	ldrb	r3, [r7, #18]
 800c3c6:	4a20      	ldr	r2, [pc, #128]	@ (800c448 <lorawan_aes_set_key+0x1b8>)
 800c3c8:	5cd3      	ldrb	r3, [r2, r3]
 800c3ca:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800c3cc:	7dfa      	ldrb	r2, [r7, #23]
 800c3ce:	7afb      	ldrb	r3, [r7, #11]
 800c3d0:	1ad3      	subs	r3, r2, r3
 800c3d2:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800c3d4:	7c3b      	ldrb	r3, [r7, #16]
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	5cd1      	ldrb	r1, [r2, r3]
 800c3da:	7dfb      	ldrb	r3, [r7, #23]
 800c3dc:	7d7a      	ldrb	r2, [r7, #21]
 800c3de:	404a      	eors	r2, r1
 800c3e0:	b2d1      	uxtb	r1, r2
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800c3e6:	7c3b      	ldrb	r3, [r7, #16]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	5cd1      	ldrb	r1, [r2, r3]
 800c3ee:	7dfb      	ldrb	r3, [r7, #23]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	7d3a      	ldrb	r2, [r7, #20]
 800c3f4:	404a      	eors	r2, r1
 800c3f6:	b2d1      	uxtb	r1, r2
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800c3fc:	7c3b      	ldrb	r3, [r7, #16]
 800c3fe:	3302      	adds	r3, #2
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	5cd1      	ldrb	r1, [r2, r3]
 800c404:	7dfb      	ldrb	r3, [r7, #23]
 800c406:	3302      	adds	r3, #2
 800c408:	7cfa      	ldrb	r2, [r7, #19]
 800c40a:	404a      	eors	r2, r1
 800c40c:	b2d1      	uxtb	r1, r2
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800c412:	7c3b      	ldrb	r3, [r7, #16]
 800c414:	3303      	adds	r3, #3
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	5cd1      	ldrb	r1, [r2, r3]
 800c41a:	7dfb      	ldrb	r3, [r7, #23]
 800c41c:	3303      	adds	r3, #3
 800c41e:	7cba      	ldrb	r2, [r7, #18]
 800c420:	404a      	eors	r2, r1
 800c422:	b2d1      	uxtb	r1, r2
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c428:	7dfb      	ldrb	r3, [r7, #23]
 800c42a:	3304      	adds	r3, #4
 800c42c:	75fb      	strb	r3, [r7, #23]
 800c42e:	7dfa      	ldrb	r2, [r7, #23]
 800c430:	7c7b      	ldrb	r3, [r7, #17]
 800c432:	429a      	cmp	r2, r3
 800c434:	f4ff af67 	bcc.w	800c306 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3718      	adds	r7, #24
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	00010101 	.word	0x00010101
 800c448:	0801fb0c 	.word	0x0801fb0c

0800c44c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b08a      	sub	sp, #40	@ 0x28
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d038      	beq.n	800c4d4 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	f107 0314 	add.w	r3, r7, #20
 800c468:	68f9      	ldr	r1, [r7, #12]
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7ff fc07 	bl	800bc7e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800c470:	2301      	movs	r3, #1
 800c472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c476:	e014      	b.n	800c4a2 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800c478:	f107 0314 	add.w	r3, r7, #20
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7ff fd5d 	bl	800bf3c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c488:	0112      	lsls	r2, r2, #4
 800c48a:	441a      	add	r2, r3
 800c48c:	f107 0314 	add.w	r3, r7, #20
 800c490:	4611      	mov	r1, r2
 800c492:	4618      	mov	r0, r3
 800c494:	f7ff fcab 	bl	800bdee <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800c498:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c49c:	3301      	adds	r3, #1
 800c49e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c4a8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d3e3      	bcc.n	800c478 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800c4b0:	f107 0314 	add.w	r3, r7, #20
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f7ff fca7 	bl	800be08 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c4c0:	0112      	lsls	r2, r2, #4
 800c4c2:	441a      	add	r2, r3
 800c4c4:	f107 0314 	add.w	r3, r7, #20
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	68b8      	ldr	r0, [r7, #8]
 800c4cc:	f7ff fbd7 	bl	800bc7e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	e000      	b.n	800c4d6 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800c4d4:	23ff      	movs	r3, #255	@ 0xff
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3728      	adds	r7, #40	@ 0x28
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
	...

0800c4e0 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800c4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4e2:	b09d      	sub	sp, #116	@ 0x74
 800c4e4:	af10      	add	r7, sp, #64	@ 0x40
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c4ec:	2306      	movs	r3, #6
 800c4ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800c4f2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800c4f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4fa:	4611      	mov	r1, r2
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f000 f9a7 	bl	800c850 <SecureElementGetKeyByID>
 800c502:	4603      	mov	r3, r0
 800c504:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800c508:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f040 80b0 	bne.w	800c672 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800c512:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c516:	2b00      	cmp	r3, #0
 800c518:	d106      	bne.n	800c528 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800c51a:	4b58      	ldr	r3, [pc, #352]	@ (800c67c <PrintKey+0x19c>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	2100      	movs	r1, #0
 800c520:	2002      	movs	r0, #2
 800c522:	f00f fd93 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
 800c526:	e056      	b.n	800c5d6 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800c528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d106      	bne.n	800c53e <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800c530:	4b53      	ldr	r3, [pc, #332]	@ (800c680 <PrintKey+0x1a0>)
 800c532:	2200      	movs	r2, #0
 800c534:	2100      	movs	r1, #0
 800c536:	2002      	movs	r0, #2
 800c538:	f00f fd88 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
 800c53c:	e04b      	b.n	800c5d6 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800c53e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c542:	2b03      	cmp	r3, #3
 800c544:	d106      	bne.n	800c554 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800c546:	4b4f      	ldr	r3, [pc, #316]	@ (800c684 <PrintKey+0x1a4>)
 800c548:	2200      	movs	r2, #0
 800c54a:	2100      	movs	r1, #0
 800c54c:	2002      	movs	r0, #2
 800c54e:	f00f fd7d 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
 800c552:	e040      	b.n	800c5d6 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800c554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c558:	2b02      	cmp	r3, #2
 800c55a:	d106      	bne.n	800c56a <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800c55c:	4b4a      	ldr	r3, [pc, #296]	@ (800c688 <PrintKey+0x1a8>)
 800c55e:	2200      	movs	r2, #0
 800c560:	2100      	movs	r1, #0
 800c562:	2002      	movs	r0, #2
 800c564:	f00f fd72 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
 800c568:	e035      	b.n	800c5d6 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800c56a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c56e:	2b04      	cmp	r3, #4
 800c570:	d106      	bne.n	800c580 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800c572:	4b46      	ldr	r3, [pc, #280]	@ (800c68c <PrintKey+0x1ac>)
 800c574:	2200      	movs	r2, #0
 800c576:	2100      	movs	r1, #0
 800c578:	2002      	movs	r0, #2
 800c57a:	f00f fd67 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
 800c57e:	e02a      	b.n	800c5d6 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800c580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c584:	2b7f      	cmp	r3, #127	@ 0x7f
 800c586:	d106      	bne.n	800c596 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800c588:	4b41      	ldr	r3, [pc, #260]	@ (800c690 <PrintKey+0x1b0>)
 800c58a:	2200      	movs	r2, #0
 800c58c:	2100      	movs	r1, #0
 800c58e:	2002      	movs	r0, #2
 800c590:	f00f fd5c 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
 800c594:	e01f      	b.n	800c5d6 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800c596:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c59a:	2b80      	cmp	r3, #128	@ 0x80
 800c59c:	d106      	bne.n	800c5ac <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800c59e:	4b3d      	ldr	r3, [pc, #244]	@ (800c694 <PrintKey+0x1b4>)
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	2002      	movs	r0, #2
 800c5a6:	f00f fd51 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
 800c5aa:	e014      	b.n	800c5d6 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800c5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5b0:	2b81      	cmp	r3, #129	@ 0x81
 800c5b2:	d106      	bne.n	800c5c2 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800c5b4:	4b38      	ldr	r3, [pc, #224]	@ (800c698 <PrintKey+0x1b8>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	2002      	movs	r0, #2
 800c5bc:	f00f fd46 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
 800c5c0:	e009      	b.n	800c5d6 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800c5c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5c6:	2b82      	cmp	r3, #130	@ 0x82
 800c5c8:	d105      	bne.n	800c5d6 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800c5ca:	4b34      	ldr	r3, [pc, #208]	@ (800c69c <PrintKey+0x1bc>)
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	2002      	movs	r0, #2
 800c5d2:	f00f fd3b 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d8:	785b      	ldrb	r3, [r3, #1]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5de:	789b      	ldrb	r3, [r3, #2]
 800c5e0:	461c      	mov	r4, r3
 800c5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e4:	78db      	ldrb	r3, [r3, #3]
 800c5e6:	461d      	mov	r5, r3
 800c5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ea:	791b      	ldrb	r3, [r3, #4]
 800c5ec:	461e      	mov	r6, r3
 800c5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f0:	795b      	ldrb	r3, [r3, #5]
 800c5f2:	623b      	str	r3, [r7, #32]
 800c5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f6:	799b      	ldrb	r3, [r3, #6]
 800c5f8:	61fb      	str	r3, [r7, #28]
 800c5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5fc:	79db      	ldrb	r3, [r3, #7]
 800c5fe:	61bb      	str	r3, [r7, #24]
 800c600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c602:	7a1b      	ldrb	r3, [r3, #8]
 800c604:	617b      	str	r3, [r7, #20]
 800c606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c608:	7a5b      	ldrb	r3, [r3, #9]
 800c60a:	613b      	str	r3, [r7, #16]
 800c60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60e:	7a9b      	ldrb	r3, [r3, #10]
 800c610:	60fb      	str	r3, [r7, #12]
 800c612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c614:	7adb      	ldrb	r3, [r3, #11]
 800c616:	60bb      	str	r3, [r7, #8]
 800c618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c61a:	7b1b      	ldrb	r3, [r3, #12]
 800c61c:	607b      	str	r3, [r7, #4]
 800c61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c620:	7b5b      	ldrb	r3, [r3, #13]
 800c622:	603b      	str	r3, [r7, #0]
 800c624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c626:	7b9b      	ldrb	r3, [r3, #14]
 800c628:	4619      	mov	r1, r3
 800c62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c62c:	7bdb      	ldrb	r3, [r3, #15]
 800c62e:	461a      	mov	r2, r3
 800c630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c632:	7c1b      	ldrb	r3, [r3, #16]
 800c634:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c636:	920e      	str	r2, [sp, #56]	@ 0x38
 800c638:	910d      	str	r1, [sp, #52]	@ 0x34
 800c63a:	683a      	ldr	r2, [r7, #0]
 800c63c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	920a      	str	r2, [sp, #40]	@ 0x28
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	9209      	str	r2, [sp, #36]	@ 0x24
 800c64a:	693a      	ldr	r2, [r7, #16]
 800c64c:	9208      	str	r2, [sp, #32]
 800c64e:	697a      	ldr	r2, [r7, #20]
 800c650:	9207      	str	r2, [sp, #28]
 800c652:	69ba      	ldr	r2, [r7, #24]
 800c654:	9206      	str	r2, [sp, #24]
 800c656:	69fa      	ldr	r2, [r7, #28]
 800c658:	9205      	str	r2, [sp, #20]
 800c65a:	6a3b      	ldr	r3, [r7, #32]
 800c65c:	9304      	str	r3, [sp, #16]
 800c65e:	9603      	str	r6, [sp, #12]
 800c660:	9502      	str	r5, [sp, #8]
 800c662:	9401      	str	r4, [sp, #4]
 800c664:	9000      	str	r0, [sp, #0]
 800c666:	4b0e      	ldr	r3, [pc, #56]	@ (800c6a0 <PrintKey+0x1c0>)
 800c668:	2200      	movs	r2, #0
 800c66a:	2100      	movs	r1, #0
 800c66c:	2002      	movs	r0, #2
 800c66e:	f00f fced 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800c672:	bf00      	nop
 800c674:	3734      	adds	r7, #52	@ 0x34
 800c676:	46bd      	mov	sp, r7
 800c678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c67a:	bf00      	nop
 800c67c:	0801f56c 	.word	0x0801f56c
 800c680:	0801f584 	.word	0x0801f584
 800c684:	0801f59c 	.word	0x0801f59c
 800c688:	0801f5b4 	.word	0x0801f5b4
 800c68c:	0801f5cc 	.word	0x0801f5cc
 800c690:	0801f5e4 	.word	0x0801f5e4
 800c694:	0801f5fc 	.word	0x0801f5fc
 800c698:	0801f614 	.word	0x0801f614
 800c69c:	0801f62c 	.word	0x0801f62c
 800c6a0:	0801f644 	.word	0x0801f644

0800c6a4 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	6039      	str	r1, [r7, #0]
 800c6ae:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	73fb      	strb	r3, [r7, #15]
 800c6b4:	e01a      	b.n	800c6ec <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c6b6:	4b12      	ldr	r3, [pc, #72]	@ (800c700 <GetKeyByID+0x5c>)
 800c6b8:	6819      	ldr	r1, [r3, #0]
 800c6ba:	7bfa      	ldrb	r2, [r7, #15]
 800c6bc:	4613      	mov	r3, r2
 800c6be:	011b      	lsls	r3, r3, #4
 800c6c0:	4413      	add	r3, r2
 800c6c2:	440b      	add	r3, r1
 800c6c4:	3310      	adds	r3, #16
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	79fa      	ldrb	r2, [r7, #7]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d10b      	bne.n	800c6e6 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c6ce:	4b0c      	ldr	r3, [pc, #48]	@ (800c700 <GetKeyByID+0x5c>)
 800c6d0:	6819      	ldr	r1, [r3, #0]
 800c6d2:	7bfa      	ldrb	r2, [r7, #15]
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	011b      	lsls	r3, r3, #4
 800c6d8:	4413      	add	r3, r2
 800c6da:	3310      	adds	r3, #16
 800c6dc:	18ca      	adds	r2, r1, r3
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	e006      	b.n	800c6f4 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c6e6:	7bfb      	ldrb	r3, [r7, #15]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	73fb      	strb	r3, [r7, #15]
 800c6ec:	7bfb      	ldrb	r3, [r7, #15]
 800c6ee:	2b09      	cmp	r3, #9
 800c6f0:	d9e1      	bls.n	800c6b6 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c6f2:	2303      	movs	r3, #3
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3714      	adds	r7, #20
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bc80      	pop	{r7}
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	20000784 	.word	0x20000784

0800c704 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800c704:	b590      	push	{r4, r7, lr}
 800c706:	b0d1      	sub	sp, #324	@ 0x144
 800c708:	af00      	add	r7, sp, #0
 800c70a:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800c70e:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800c712:	6020      	str	r0, [r4, #0]
 800c714:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800c718:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800c71c:	6001      	str	r1, [r0, #0]
 800c71e:	4619      	mov	r1, r3
 800c720:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c724:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800c728:	801a      	strh	r2, [r3, #0]
 800c72a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c72e:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800c732:	460a      	mov	r2, r1
 800c734:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800c736:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c73a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d003      	beq.n	800c74c <ComputeCmac+0x48>
 800c744:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d101      	bne.n	800c750 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c74c:	2302      	movs	r3, #2
 800c74e:	e05c      	b.n	800c80a <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800c750:	f107 0314 	add.w	r3, r7, #20
 800c754:	4618      	mov	r0, r3
 800c756:	f7fe ff1b 	bl	800b590 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800c75a:	f107 0210 	add.w	r2, r7, #16
 800c75e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c762:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	4611      	mov	r1, r2
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7ff ff9a 	bl	800c6a4 <GetKeyByID>
 800c770:	4603      	mov	r3, r0
 800c772:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c776:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d143      	bne.n	800c806 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800c77e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c782:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	1c5a      	adds	r2, r3, #1
 800c78a:	f107 0314 	add.w	r3, r7, #20
 800c78e:	4611      	mov	r1, r2
 800c790:	4618      	mov	r0, r3
 800c792:	f7fe ff16 	bl	800b5c2 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800c796:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c79a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d009      	beq.n	800c7b8 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800c7a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c7a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c7ac:	f107 0014 	add.w	r0, r7, #20
 800c7b0:	2210      	movs	r2, #16
 800c7b2:	6819      	ldr	r1, [r3, #0]
 800c7b4:	f7fe ff14 	bl	800b5e0 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800c7b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c7bc:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800c7c0:	881a      	ldrh	r2, [r3, #0]
 800c7c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c7c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c7ca:	f107 0014 	add.w	r0, r7, #20
 800c7ce:	6819      	ldr	r1, [r3, #0]
 800c7d0:	f7fe ff06 	bl	800b5e0 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800c7d4:	f107 0214 	add.w	r2, r7, #20
 800c7d8:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800c7dc:	4611      	mov	r1, r2
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7fe ffc0 	bl	800b764 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800c7e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c7e8:	061a      	lsls	r2, r3, #24
 800c7ea:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800c7ee:	041b      	lsls	r3, r3, #16
 800c7f0:	431a      	orrs	r2, r3
 800c7f2:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c7f6:	021b      	lsls	r3, r3, #8
 800c7f8:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800c7fa:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800c7fe:	431a      	orrs	r2, r3
 800c800:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800c804:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800c806:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800c810:	46bd      	mov	sp, r7
 800c812:	bd90      	pop	{r4, r7, pc}

0800c814 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d101      	bne.n	800c828 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c824:	2302      	movs	r3, #2
 800c826:	e00a      	b.n	800c83e <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800c828:	4a07      	ldr	r2, [pc, #28]	@ (800c848 <SecureElementInit+0x34>)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800c82e:	4b06      	ldr	r3, [pc, #24]	@ (800c848 <SecureElementInit+0x34>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	22c0      	movs	r2, #192	@ 0xc0
 800c834:	4905      	ldr	r1, [pc, #20]	@ (800c84c <SecureElementInit+0x38>)
 800c836:	4618      	mov	r0, r3
 800c838:	f00b f8b9 	bl	80179ae <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	20000784 	.word	0x20000784
 800c84c:	08020398 	.word	0x08020398

0800c850 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800c850:	b480      	push	{r7}
 800c852:	b085      	sub	sp, #20
 800c854:	af00      	add	r7, sp, #0
 800c856:	4603      	mov	r3, r0
 800c858:	6039      	str	r1, [r7, #0]
 800c85a:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c85c:	2300      	movs	r3, #0
 800c85e:	73fb      	strb	r3, [r7, #15]
 800c860:	e01a      	b.n	800c898 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800c862:	4b12      	ldr	r3, [pc, #72]	@ (800c8ac <SecureElementGetKeyByID+0x5c>)
 800c864:	6819      	ldr	r1, [r3, #0]
 800c866:	7bfa      	ldrb	r2, [r7, #15]
 800c868:	4613      	mov	r3, r2
 800c86a:	011b      	lsls	r3, r3, #4
 800c86c:	4413      	add	r3, r2
 800c86e:	440b      	add	r3, r1
 800c870:	3310      	adds	r3, #16
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	79fa      	ldrb	r2, [r7, #7]
 800c876:	429a      	cmp	r2, r3
 800c878:	d10b      	bne.n	800c892 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800c87a:	4b0c      	ldr	r3, [pc, #48]	@ (800c8ac <SecureElementGetKeyByID+0x5c>)
 800c87c:	6819      	ldr	r1, [r3, #0]
 800c87e:	7bfa      	ldrb	r2, [r7, #15]
 800c880:	4613      	mov	r3, r2
 800c882:	011b      	lsls	r3, r3, #4
 800c884:	4413      	add	r3, r2
 800c886:	3310      	adds	r3, #16
 800c888:	18ca      	adds	r2, r1, r3
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c88e:	2300      	movs	r3, #0
 800c890:	e006      	b.n	800c8a0 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c892:	7bfb      	ldrb	r3, [r7, #15]
 800c894:	3301      	adds	r3, #1
 800c896:	73fb      	strb	r3, [r7, #15]
 800c898:	7bfb      	ldrb	r3, [r7, #15]
 800c89a:	2b09      	cmp	r3, #9
 800c89c:	d9e1      	bls.n	800c862 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c89e:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3714      	adds	r7, #20
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bc80      	pop	{r7}
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	20000784 	.word	0x20000784

0800c8b0 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800c8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8b2:	b08b      	sub	sp, #44	@ 0x2c
 800c8b4:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800c8b6:	4b3f      	ldr	r3, [pc, #252]	@ (800c9b4 <SecureElementPrintKeys+0x104>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	2002      	movs	r0, #2
 800c8be:	f00f fbc5 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	f7ff fe0c 	bl	800c4e0 <PrintKey>
    PrintKey(NWK_KEY);
 800c8c8:	2001      	movs	r0, #1
 800c8ca:	f7ff fe09 	bl	800c4e0 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800c8ce:	4b3a      	ldr	r3, [pc, #232]	@ (800c9b8 <SecureElementPrintKeys+0x108>)
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	2100      	movs	r1, #0
 800c8d4:	2002      	movs	r0, #2
 800c8d6:	f00f fbb9 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800c8da:	2003      	movs	r0, #3
 800c8dc:	f7ff fe00 	bl	800c4e0 <PrintKey>
    PrintKey(NWK_S_KEY);
 800c8e0:	2002      	movs	r0, #2
 800c8e2:	f7ff fdfd 	bl	800c4e0 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800c8e6:	4b35      	ldr	r3, [pc, #212]	@ (800c9bc <SecureElementPrintKeys+0x10c>)
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	2002      	movs	r0, #2
 800c8ee:	f00f fbad 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c8f2:	4b33      	ldr	r3, [pc, #204]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	4b31      	ldr	r3, [pc, #196]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	785b      	ldrb	r3, [r3, #1]
 800c900:	4619      	mov	r1, r3
 800c902:	4b2f      	ldr	r3, [pc, #188]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	789b      	ldrb	r3, [r3, #2]
 800c908:	4618      	mov	r0, r3
 800c90a:	4b2d      	ldr	r3, [pc, #180]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	78db      	ldrb	r3, [r3, #3]
 800c910:	461c      	mov	r4, r3
 800c912:	4b2b      	ldr	r3, [pc, #172]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	791b      	ldrb	r3, [r3, #4]
 800c918:	461d      	mov	r5, r3
 800c91a:	4b29      	ldr	r3, [pc, #164]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	795b      	ldrb	r3, [r3, #5]
 800c920:	461e      	mov	r6, r3
 800c922:	4b27      	ldr	r3, [pc, #156]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	799b      	ldrb	r3, [r3, #6]
 800c928:	607b      	str	r3, [r7, #4]
 800c92a:	4b25      	ldr	r3, [pc, #148]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	79db      	ldrb	r3, [r3, #7]
 800c930:	9307      	str	r3, [sp, #28]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	9306      	str	r3, [sp, #24]
 800c936:	9605      	str	r6, [sp, #20]
 800c938:	9504      	str	r5, [sp, #16]
 800c93a:	9403      	str	r4, [sp, #12]
 800c93c:	9002      	str	r0, [sp, #8]
 800c93e:	9101      	str	r1, [sp, #4]
 800c940:	9200      	str	r2, [sp, #0]
 800c942:	4b20      	ldr	r3, [pc, #128]	@ (800c9c4 <SecureElementPrintKeys+0x114>)
 800c944:	2200      	movs	r2, #0
 800c946:	2100      	movs	r1, #0
 800c948:	2002      	movs	r0, #2
 800c94a:	f00f fb7f 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c94e:	4b1c      	ldr	r3, [pc, #112]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	7a1b      	ldrb	r3, [r3, #8]
 800c954:	461a      	mov	r2, r3
 800c956:	4b1a      	ldr	r3, [pc, #104]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	7a5b      	ldrb	r3, [r3, #9]
 800c95c:	4619      	mov	r1, r3
 800c95e:	4b18      	ldr	r3, [pc, #96]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	7a9b      	ldrb	r3, [r3, #10]
 800c964:	4618      	mov	r0, r3
 800c966:	4b16      	ldr	r3, [pc, #88]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	7adb      	ldrb	r3, [r3, #11]
 800c96c:	461c      	mov	r4, r3
 800c96e:	4b14      	ldr	r3, [pc, #80]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	7b1b      	ldrb	r3, [r3, #12]
 800c974:	461d      	mov	r5, r3
 800c976:	4b12      	ldr	r3, [pc, #72]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	7b5b      	ldrb	r3, [r3, #13]
 800c97c:	461e      	mov	r6, r3
 800c97e:	4b10      	ldr	r3, [pc, #64]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	7b9b      	ldrb	r3, [r3, #14]
 800c984:	607b      	str	r3, [r7, #4]
 800c986:	4b0e      	ldr	r3, [pc, #56]	@ (800c9c0 <SecureElementPrintKeys+0x110>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	7bdb      	ldrb	r3, [r3, #15]
 800c98c:	9307      	str	r3, [sp, #28]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	9306      	str	r3, [sp, #24]
 800c992:	9605      	str	r6, [sp, #20]
 800c994:	9504      	str	r5, [sp, #16]
 800c996:	9403      	str	r4, [sp, #12]
 800c998:	9002      	str	r0, [sp, #8]
 800c99a:	9101      	str	r1, [sp, #4]
 800c99c:	9200      	str	r2, [sp, #0]
 800c99e:	4b0a      	ldr	r3, [pc, #40]	@ (800c9c8 <SecureElementPrintKeys+0x118>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	2002      	movs	r0, #2
 800c9a6:	f00f fb51 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	370c      	adds	r7, #12
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9b4:	0801f698 	.word	0x0801f698
 800c9b8:	0801f6b0 	.word	0x0801f6b0
 800c9bc:	0801f6c8 	.word	0x0801f6c8
 800c9c0:	20000784 	.word	0x20000784
 800c9c4:	0801f6e0 	.word	0x0801f6e0
 800c9c8:	0801f720 	.word	0x0801f720

0800c9cc <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800c9d0:	2004      	movs	r0, #4
 800c9d2:	f7ff fd85 	bl	800c4e0 <PrintKey>
    PrintKey(MC_KE_KEY);
 800c9d6:	207f      	movs	r0, #127	@ 0x7f
 800c9d8:	f7ff fd82 	bl	800c4e0 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800c9dc:	2002      	movs	r0, #2
 800c9de:	f7ff fd7f 	bl	800c4e0 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800c9e2:	2003      	movs	r0, #3
 800c9e4:	f7ff fd7c 	bl	800c4e0 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	bd80      	pop	{r7, pc}
	...

0800c9f0 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b088      	sub	sp, #32
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	6039      	str	r1, [r7, #0]
 800c9fa:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d101      	bne.n	800ca06 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ca02:	2302      	movs	r3, #2
 800ca04:	e04c      	b.n	800caa0 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ca06:	2300      	movs	r3, #0
 800ca08:	77fb      	strb	r3, [r7, #31]
 800ca0a:	e045      	b.n	800ca98 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ca0c:	4b26      	ldr	r3, [pc, #152]	@ (800caa8 <SecureElementSetKey+0xb8>)
 800ca0e:	6819      	ldr	r1, [r3, #0]
 800ca10:	7ffa      	ldrb	r2, [r7, #31]
 800ca12:	4613      	mov	r3, r2
 800ca14:	011b      	lsls	r3, r3, #4
 800ca16:	4413      	add	r3, r2
 800ca18:	440b      	add	r3, r1
 800ca1a:	3310      	adds	r3, #16
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	79fa      	ldrb	r2, [r7, #7]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d136      	bne.n	800ca92 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800ca24:	79fb      	ldrb	r3, [r7, #7]
 800ca26:	2b80      	cmp	r3, #128	@ 0x80
 800ca28:	d123      	bne.n	800ca72 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800ca2a:	2306      	movs	r3, #6
 800ca2c:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60fb      	str	r3, [r7, #12]
 800ca32:	f107 0310 	add.w	r3, r7, #16
 800ca36:	2200      	movs	r2, #0
 800ca38:	601a      	str	r2, [r3, #0]
 800ca3a:	605a      	str	r2, [r3, #4]
 800ca3c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800ca3e:	f107 030c 	add.w	r3, r7, #12
 800ca42:	227f      	movs	r2, #127	@ 0x7f
 800ca44:	2110      	movs	r1, #16
 800ca46:	6838      	ldr	r0, [r7, #0]
 800ca48:	f000 f87d 	bl	800cb46 <SecureElementAesEncrypt>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800ca50:	4b15      	ldr	r3, [pc, #84]	@ (800caa8 <SecureElementSetKey+0xb8>)
 800ca52:	6819      	ldr	r1, [r3, #0]
 800ca54:	7ffa      	ldrb	r2, [r7, #31]
 800ca56:	4613      	mov	r3, r2
 800ca58:	011b      	lsls	r3, r3, #4
 800ca5a:	4413      	add	r3, r2
 800ca5c:	3310      	adds	r3, #16
 800ca5e:	440b      	add	r3, r1
 800ca60:	3301      	adds	r3, #1
 800ca62:	f107 010c 	add.w	r1, r7, #12
 800ca66:	2210      	movs	r2, #16
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f00a ffa0 	bl	80179ae <memcpy1>
                return retval;
 800ca6e:	7fbb      	ldrb	r3, [r7, #30]
 800ca70:	e016      	b.n	800caa0 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800ca72:	4b0d      	ldr	r3, [pc, #52]	@ (800caa8 <SecureElementSetKey+0xb8>)
 800ca74:	6819      	ldr	r1, [r3, #0]
 800ca76:	7ffa      	ldrb	r2, [r7, #31]
 800ca78:	4613      	mov	r3, r2
 800ca7a:	011b      	lsls	r3, r3, #4
 800ca7c:	4413      	add	r3, r2
 800ca7e:	3310      	adds	r3, #16
 800ca80:	440b      	add	r3, r1
 800ca82:	3301      	adds	r3, #1
 800ca84:	2210      	movs	r2, #16
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f00a ff90 	bl	80179ae <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	e006      	b.n	800caa0 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ca92:	7ffb      	ldrb	r3, [r7, #31]
 800ca94:	3301      	adds	r3, #1
 800ca96:	77fb      	strb	r3, [r7, #31]
 800ca98:	7ffb      	ldrb	r3, [r7, #31]
 800ca9a:	2b09      	cmp	r3, #9
 800ca9c:	d9b6      	bls.n	800ca0c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ca9e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3720      	adds	r7, #32
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	20000784 	.word	0x20000784

0800caac <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b086      	sub	sp, #24
 800cab0:	af02      	add	r7, sp, #8
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	4611      	mov	r1, r2
 800cab8:	461a      	mov	r2, r3
 800caba:	460b      	mov	r3, r1
 800cabc:	80fb      	strh	r3, [r7, #6]
 800cabe:	4613      	mov	r3, r2
 800cac0:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800cac2:	797b      	ldrb	r3, [r7, #5]
 800cac4:	2b7e      	cmp	r3, #126	@ 0x7e
 800cac6:	d901      	bls.n	800cacc <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cac8:	2303      	movs	r3, #3
 800caca:	e009      	b.n	800cae0 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800cacc:	7979      	ldrb	r1, [r7, #5]
 800cace:	88fa      	ldrh	r2, [r7, #6]
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	9300      	str	r3, [sp, #0]
 800cad4:	460b      	mov	r3, r1
 800cad6:	68b9      	ldr	r1, [r7, #8]
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f7ff fe13 	bl	800c704 <ComputeCmac>
 800cade:	4603      	mov	r3, r0
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3710      	adds	r7, #16
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b088      	sub	sp, #32
 800caec:	af02      	add	r7, sp, #8
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	607a      	str	r2, [r7, #4]
 800caf2:	461a      	mov	r2, r3
 800caf4:	460b      	mov	r3, r1
 800caf6:	817b      	strh	r3, [r7, #10]
 800caf8:	4613      	mov	r3, r2
 800cafa:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d101      	bne.n	800cb06 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cb02:	2302      	movs	r3, #2
 800cb04:	e01b      	b.n	800cb3e <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800cb06:	2306      	movs	r3, #6
 800cb08:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800cb0e:	7a79      	ldrb	r1, [r7, #9]
 800cb10:	897a      	ldrh	r2, [r7, #10]
 800cb12:	f107 0310 	add.w	r3, r7, #16
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	68f9      	ldr	r1, [r7, #12]
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	f7ff fdf1 	bl	800c704 <ComputeCmac>
 800cb22:	4603      	mov	r3, r0
 800cb24:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800cb26:	7dfb      	ldrb	r3, [r7, #23]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d001      	beq.n	800cb30 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800cb2c:	7dfb      	ldrb	r3, [r7, #23]
 800cb2e:	e006      	b.n	800cb3e <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d001      	beq.n	800cb3c <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800cb3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3718      	adds	r7, #24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b0c2      	sub	sp, #264	@ 0x108
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	60f8      	str	r0, [r7, #12]
 800cb4e:	4608      	mov	r0, r1
 800cb50:	4611      	mov	r1, r2
 800cb52:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800cb56:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800cb5a:	6013      	str	r3, [r2, #0]
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	817b      	strh	r3, [r7, #10]
 800cb60:	460b      	mov	r3, r1
 800cb62:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d006      	beq.n	800cb78 <SecureElementAesEncrypt+0x32>
 800cb6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d101      	bne.n	800cb7c <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cb78:	2302      	movs	r3, #2
 800cb7a:	e046      	b.n	800cc0a <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800cb7c:	897b      	ldrh	r3, [r7, #10]
 800cb7e:	f003 030f 	and.w	r3, r3, #15
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d001      	beq.n	800cb8c <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800cb88:	2305      	movs	r3, #5
 800cb8a:	e03e      	b.n	800cc0a <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800cb8c:	f107 0314 	add.w	r3, r7, #20
 800cb90:	22f0      	movs	r2, #240	@ 0xf0
 800cb92:	2100      	movs	r1, #0
 800cb94:	4618      	mov	r0, r3
 800cb96:	f00a ff45 	bl	8017a24 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800cb9a:	f107 0210 	add.w	r2, r7, #16
 800cb9e:	7a7b      	ldrb	r3, [r7, #9]
 800cba0:	4611      	mov	r1, r2
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7ff fd7e 	bl	800c6a4 <GetKeyByID>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800cbae:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d127      	bne.n	800cc06 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	f107 0214 	add.w	r2, r7, #20
 800cbbe:	2110      	movs	r1, #16
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7ff fb65 	bl	800c290 <lorawan_aes_set_key>

        uint8_t block = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800cbcc:	e018      	b.n	800cc00 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800cbce:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	18d0      	adds	r0, r2, r3
 800cbd6:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800cbda:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800cbde:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800cbe2:	6812      	ldr	r2, [r2, #0]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	f107 0214 	add.w	r2, r7, #20
 800cbea:	4619      	mov	r1, r3
 800cbec:	f7ff fc2e 	bl	800c44c <lorawan_aes_encrypt>
            block = block + 16;
 800cbf0:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800cbf4:	3310      	adds	r3, #16
 800cbf6:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800cbfa:	897b      	ldrh	r3, [r7, #10]
 800cbfc:	3b10      	subs	r3, #16
 800cbfe:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800cc00:	897b      	ldrh	r3, [r7, #10]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1e3      	bne.n	800cbce <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800cc06:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b088      	sub	sp, #32
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	70fb      	strb	r3, [r7, #3]
 800cc20:	4613      	mov	r3, r2
 800cc22:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d101      	bne.n	800cc2e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cc2a:	2302      	movs	r3, #2
 800cc2c:	e02e      	b.n	800cc8c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800cc2e:	2306      	movs	r3, #6
 800cc30:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800cc32:	78bb      	ldrb	r3, [r7, #2]
 800cc34:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc36:	d104      	bne.n	800cc42 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800cc38:	78fb      	ldrb	r3, [r7, #3]
 800cc3a:	2b04      	cmp	r3, #4
 800cc3c:	d001      	beq.n	800cc42 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cc3e:	2303      	movs	r3, #3
 800cc40:	e024      	b.n	800cc8c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800cc42:	2300      	movs	r3, #0
 800cc44:	60fb      	str	r3, [r7, #12]
 800cc46:	f107 0310 	add.w	r3, r7, #16
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	601a      	str	r2, [r3, #0]
 800cc4e:	605a      	str	r2, [r3, #4]
 800cc50:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800cc52:	f107 030c 	add.w	r3, r7, #12
 800cc56:	78fa      	ldrb	r2, [r7, #3]
 800cc58:	2110      	movs	r1, #16
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f7ff ff73 	bl	800cb46 <SecureElementAesEncrypt>
 800cc60:	4603      	mov	r3, r0
 800cc62:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800cc64:	7ffb      	ldrb	r3, [r7, #31]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d001      	beq.n	800cc6e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800cc6a:	7ffb      	ldrb	r3, [r7, #31]
 800cc6c:	e00e      	b.n	800cc8c <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800cc6e:	f107 020c 	add.w	r2, r7, #12
 800cc72:	78bb      	ldrb	r3, [r7, #2]
 800cc74:	4611      	mov	r1, r2
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7ff feba 	bl	800c9f0 <SecureElementSetKey>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800cc80:	7ffb      	ldrb	r3, [r7, #31]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800cc86:	7ffb      	ldrb	r3, [r7, #31]
 800cc88:	e000      	b.n	800cc8c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800cc8a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3720      	adds	r7, #32
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60b9      	str	r1, [r7, #8]
 800cc9c:	607b      	str	r3, [r7, #4]
 800cc9e:	4603      	mov	r3, r0
 800cca0:	73fb      	strb	r3, [r7, #15]
 800cca2:	4613      	mov	r3, r2
 800cca4:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d005      	beq.n	800ccb8 <SecureElementProcessJoinAccept+0x24>
 800ccac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d002      	beq.n	800ccb8 <SecureElementProcessJoinAccept+0x24>
 800ccb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d101      	bne.n	800ccbc <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ccb8:	2302      	movs	r3, #2
 800ccba:	e064      	b.n	800cd86 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800ccbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ccc0:	2b21      	cmp	r3, #33	@ 0x21
 800ccc2:	d901      	bls.n	800ccc8 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ccc4:	2305      	movs	r3, #5
 800ccc6:	e05e      	b.n	800cd86 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800cccc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	6879      	ldr	r1, [r7, #4]
 800ccd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ccd8:	f00a fe69 	bl	80179ae <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	1c58      	adds	r0, r3, #1
 800cce0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	3b01      	subs	r3, #1
 800cce8:	b299      	uxth	r1, r3
 800ccea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccec:	3301      	adds	r3, #1
 800ccee:	7dfa      	ldrb	r2, [r7, #23]
 800ccf0:	f7ff ff29 	bl	800cb46 <SecureElementAesEncrypt>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d001      	beq.n	800ccfe <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800ccfa:	2307      	movs	r3, #7
 800ccfc:	e043      	b.n	800cd86 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd00:	330b      	adds	r3, #11
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	09db      	lsrs	r3, r3, #7
 800cd06:	b2da      	uxtb	r2, r3
 800cd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0a:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800cd10:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd14:	3b04      	subs	r3, #4
 800cd16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd18:	4413      	add	r3, r2
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800cd1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd22:	3b03      	subs	r3, #3
 800cd24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd26:	4413      	add	r3, r2
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	021b      	lsls	r3, r3, #8
 800cd2c:	693a      	ldr	r2, [r7, #16]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800cd32:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd36:	3b02      	subs	r3, #2
 800cd38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd3a:	4413      	add	r3, r2
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	041b      	lsls	r3, r3, #16
 800cd40:	693a      	ldr	r2, [r7, #16]
 800cd42:	4313      	orrs	r3, r2
 800cd44:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800cd46:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd4e:	4413      	add	r3, r2
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	061b      	lsls	r3, r3, #24
 800cd54:	693a      	ldr	r2, [r7, #16]
 800cd56:	4313      	orrs	r3, r2
 800cd58:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800cd5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d10e      	bne.n	800cd80 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800cd62:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	3b04      	subs	r3, #4
 800cd6a:	b299      	uxth	r1, r3
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	693a      	ldr	r2, [r7, #16]
 800cd70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd72:	f7ff feb9 	bl	800cae8 <SecureElementVerifyAesCmac>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d003      	beq.n	800cd84 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e002      	b.n	800cd86 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800cd80:	2304      	movs	r3, #4
 800cd82:	e000      	b.n	800cd86 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3718      	adds	r7, #24
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
	...

0800cd90 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d101      	bne.n	800cda2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cd9e:	2302      	movs	r3, #2
 800cda0:	e007      	b.n	800cdb2 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800cda2:	4b06      	ldr	r3, [pc, #24]	@ (800cdbc <SecureElementSetDevEui+0x2c>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2208      	movs	r2, #8
 800cda8:	6879      	ldr	r1, [r7, #4]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f00a fdff 	bl	80179ae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800cdb0:	2300      	movs	r3, #0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	20000784 	.word	0x20000784

0800cdc0 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800cdc4:	4b02      	ldr	r3, [pc, #8]	@ (800cdd0 <SecureElementGetDevEui+0x10>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bc80      	pop	{r7}
 800cdce:	4770      	bx	lr
 800cdd0:	20000784 	.word	0x20000784

0800cdd4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d101      	bne.n	800cde6 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cde2:	2302      	movs	r3, #2
 800cde4:	e008      	b.n	800cdf8 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800cde6:	4b06      	ldr	r3, [pc, #24]	@ (800ce00 <SecureElementSetJoinEui+0x2c>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	3308      	adds	r3, #8
 800cdec:	2208      	movs	r2, #8
 800cdee:	6879      	ldr	r1, [r7, #4]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f00a fddc 	bl	80179ae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3708      	adds	r7, #8
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	20000784 	.word	0x20000784

0800ce04 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800ce04:	b480      	push	{r7}
 800ce06:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800ce08:	4b03      	ldr	r3, [pc, #12]	@ (800ce18 <SecureElementGetJoinEui+0x14>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	3308      	adds	r3, #8
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bc80      	pop	{r7}
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	20000784 	.word	0x20000784

0800ce1c <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800ce26:	4a23      	ldr	r2, [pc, #140]	@ (800ceb4 <LmHandlerInit+0x98>)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800ce2c:	4b22      	ldr	r3, [pc, #136]	@ (800ceb8 <LmHandlerInit+0x9c>)
 800ce2e:	4a23      	ldr	r2, [pc, #140]	@ (800cebc <LmHandlerInit+0xa0>)
 800ce30:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800ce32:	4b21      	ldr	r3, [pc, #132]	@ (800ceb8 <LmHandlerInit+0x9c>)
 800ce34:	4a22      	ldr	r2, [pc, #136]	@ (800cec0 <LmHandlerInit+0xa4>)
 800ce36:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800ce38:	4b1f      	ldr	r3, [pc, #124]	@ (800ceb8 <LmHandlerInit+0x9c>)
 800ce3a:	4a22      	ldr	r2, [pc, #136]	@ (800cec4 <LmHandlerInit+0xa8>)
 800ce3c:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800ce3e:	4b1e      	ldr	r3, [pc, #120]	@ (800ceb8 <LmHandlerInit+0x9c>)
 800ce40:	4a21      	ldr	r2, [pc, #132]	@ (800cec8 <LmHandlerInit+0xac>)
 800ce42:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800ce44:	4b1b      	ldr	r3, [pc, #108]	@ (800ceb4 <LmHandlerInit+0x98>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a20      	ldr	r2, [pc, #128]	@ (800cecc <LmHandlerInit+0xb0>)
 800ce4c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800ce4e:	4b19      	ldr	r3, [pc, #100]	@ (800ceb4 <LmHandlerInit+0x98>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	4a1d      	ldr	r2, [pc, #116]	@ (800cecc <LmHandlerInit+0xb0>)
 800ce56:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800ce58:	4b16      	ldr	r3, [pc, #88]	@ (800ceb4 <LmHandlerInit+0x98>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	4a1b      	ldr	r2, [pc, #108]	@ (800cecc <LmHandlerInit+0xb0>)
 800ce60:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800ce62:	4b1a      	ldr	r3, [pc, #104]	@ (800cecc <LmHandlerInit+0xb0>)
 800ce64:	4a1a      	ldr	r2, [pc, #104]	@ (800ced0 <LmHandlerInit+0xb4>)
 800ce66:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800ce68:	4b12      	ldr	r3, [pc, #72]	@ (800ceb4 <LmHandlerInit+0x98>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	699b      	ldr	r3, [r3, #24]
 800ce6e:	4a17      	ldr	r2, [pc, #92]	@ (800cecc <LmHandlerInit+0xb0>)
 800ce70:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800ce72:	4a18      	ldr	r2, [pc, #96]	@ (800ced4 <LmHandlerInit+0xb8>)
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800ce78:	4b0e      	ldr	r3, [pc, #56]	@ (800ceb4 <LmHandlerInit+0x98>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce7e:	4a15      	ldr	r2, [pc, #84]	@ (800ced4 <LmHandlerInit+0xb8>)
 800ce80:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800ce82:	4b0c      	ldr	r3, [pc, #48]	@ (800ceb4 <LmHandlerInit+0x98>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce88:	4a12      	ldr	r2, [pc, #72]	@ (800ced4 <LmHandlerInit+0xb8>)
 800ce8a:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800ce8c:	4b09      	ldr	r3, [pc, #36]	@ (800ceb4 <LmHandlerInit+0x98>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce92:	4a10      	ldr	r2, [pc, #64]	@ (800ced4 <LmHandlerInit+0xb8>)
 800ce94:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800ce96:	490f      	ldr	r1, [pc, #60]	@ (800ced4 <LmHandlerInit+0xb8>)
 800ce98:	2000      	movs	r0, #0
 800ce9a:	f000 fd87 	bl	800d9ac <LmHandlerPackageRegister>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d002      	beq.n	800ceaa <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cea4:	f04f 33ff 	mov.w	r3, #4294967295
 800cea8:	e000      	b.n	800ceac <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	200007c0 	.word	0x200007c0
 800ceb8:	200007c4 	.word	0x200007c4
 800cebc:	0800d6b9 	.word	0x0800d6b9
 800cec0:	0800d721 	.word	0x0800d721
 800cec4:	0800d7ed 	.word	0x0800d7ed
 800cec8:	0800d905 	.word	0x0800d905
 800cecc:	200007d4 	.word	0x200007d4
 800ced0:	0800dd7d 	.word	0x0800dd7d
 800ced4:	20000788 	.word	0x20000788

0800ced8 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b094      	sub	sp, #80	@ 0x50
 800cedc:	af04      	add	r7, sp, #16
 800cede:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800cee0:	2214      	movs	r2, #20
 800cee2:	6879      	ldr	r1, [r7, #4]
 800cee4:	4891      	ldr	r0, [pc, #580]	@ (800d12c <LmHandlerConfigure+0x254>)
 800cee6:	f00e f867 	bl	801afb8 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800ceea:	4b91      	ldr	r3, [pc, #580]	@ (800d130 <LmHandlerConfigure+0x258>)
 800ceec:	2200      	movs	r2, #0
 800ceee:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800cef0:	f7fe fb0c 	bl	800b50c <LoraInfo_GetPtr>
 800cef4:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800cef6:	4b8d      	ldr	r3, [pc, #564]	@ (800d12c <LmHandlerConfigure+0x254>)
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	461a      	mov	r2, r3
 800cefc:	2301      	movs	r3, #1
 800cefe:	4093      	lsls	r3, r2
 800cf00:	461a      	mov	r2, r3
 800cf02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	4013      	ands	r3, r2
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d107      	bne.n	800cf1c <LmHandlerConfigure+0x44>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800cf0c:	4b89      	ldr	r3, [pc, #548]	@ (800d134 <LmHandlerConfigure+0x25c>)
 800cf0e:	2201      	movs	r2, #1
 800cf10:	2100      	movs	r1, #0
 800cf12:	2000      	movs	r0, #0
 800cf14:	f00f f89a 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800cf18:	bf00      	nop
 800cf1a:	e7fd      	b.n	800cf18 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800cf1c:	4b83      	ldr	r3, [pc, #524]	@ (800d12c <LmHandlerConfigure+0x254>)
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	461a      	mov	r2, r3
 800cf22:	4985      	ldr	r1, [pc, #532]	@ (800d138 <LmHandlerConfigure+0x260>)
 800cf24:	4885      	ldr	r0, [pc, #532]	@ (800d13c <LmHandlerConfigure+0x264>)
 800cf26:	f004 fe95 	bl	8011c54 <LoRaMacInitialization>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d002      	beq.n	800cf36 <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cf30:	f04f 33ff 	mov.w	r3, #4294967295
 800cf34:	e0f5      	b.n	800d122 <LmHandlerConfigure+0x24a>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800cf36:	2327      	movs	r3, #39	@ 0x27
 800cf38:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800cf3a:	f107 0318 	add.w	r3, r7, #24
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f005 fbd8 	bl	80126f4 <LoRaMacMibSetRequestConfirm>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d103      	bne.n	800cf52 <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800cf4a:	4b7d      	ldr	r3, [pc, #500]	@ (800d140 <LmHandlerConfigure+0x268>)
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	701a      	strb	r2, [r3, #0]
 800cf50:	e02a      	b.n	800cfa8 <LmHandlerConfigure+0xd0>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800cf52:	2328      	movs	r3, #40	@ 0x28
 800cf54:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800cf56:	4b7b      	ldr	r3, [pc, #492]	@ (800d144 <LmHandlerConfigure+0x26c>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	691b      	ldr	r3, [r3, #16]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00c      	beq.n	800cf7a <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cf60:	f107 0318 	add.w	r3, r7, #24
 800cf64:	4618      	mov	r0, r3
 800cf66:	f005 fa1f 	bl	80123a8 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800cf6a:	4b76      	ldr	r3, [pc, #472]	@ (800d144 <LmHandlerConfigure+0x26c>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	691b      	ldr	r3, [r3, #16]
 800cf70:	69fa      	ldr	r2, [r7, #28]
 800cf72:	f240 517c 	movw	r1, #1404	@ 0x57c
 800cf76:	4610      	mov	r0, r2
 800cf78:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800cf7a:	2327      	movs	r3, #39	@ 0x27
 800cf7c:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800cf7e:	f107 0318 	add.w	r3, r7, #24
 800cf82:	4618      	mov	r0, r3
 800cf84:	f005 fbb6 	bl	80126f4 <LoRaMacMibSetRequestConfirm>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10c      	bne.n	800cfa8 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cf92:	f107 0318 	add.w	r3, r7, #24
 800cf96:	4618      	mov	r0, r3
 800cf98:	f005 fa06 	bl	80123a8 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800cf9c:	7f3b      	ldrb	r3, [r7, #28]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d002      	beq.n	800cfa8 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800cfa2:	4b67      	ldr	r3, [pc, #412]	@ (800d140 <LmHandlerConfigure+0x268>)
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800cfa8:	4b65      	ldr	r3, [pc, #404]	@ (800d140 <LmHandlerConfigure+0x268>)
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d02a      	beq.n	800d006 <LmHandlerConfigure+0x12e>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800cfb0:	4b64      	ldr	r3, [pc, #400]	@ (800d144 <LmHandlerConfigure+0x26c>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	69db      	ldr	r3, [r3, #28]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d004      	beq.n	800cfc4 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800cfba:	4b62      	ldr	r3, [pc, #392]	@ (800d144 <LmHandlerConfigure+0x26c>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	69db      	ldr	r3, [r3, #28]
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800cfc4:	2306      	movs	r3, #6
 800cfc6:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800cfc8:	f107 0318 	add.w	r3, r7, #24
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f005 f9eb 	bl	80123a8 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	4a5c      	ldr	r2, [pc, #368]	@ (800d148 <LmHandlerConfigure+0x270>)
 800cfd6:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800cfd8:	2327      	movs	r3, #39	@ 0x27
 800cfda:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800cfdc:	f107 0318 	add.w	r3, r7, #24
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f005 f9e1 	bl	80123a8 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800cfec:	4b4f      	ldr	r3, [pc, #316]	@ (800d12c <LmHandlerConfigure+0x254>)
 800cfee:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800cff6:	4b4d      	ldr	r3, [pc, #308]	@ (800d12c <LmHandlerConfigure+0x254>)
 800cff8:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800cffa:	69fb      	ldr	r3, [r7, #28]
 800cffc:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800d000:	4b4a      	ldr	r3, [pc, #296]	@ (800d12c <LmHandlerConfigure+0x254>)
 800d002:	709a      	strb	r2, [r3, #2]
 800d004:	e019      	b.n	800d03a <LmHandlerConfigure+0x162>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800d006:	2305      	movs	r3, #5
 800d008:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800d00a:	2300      	movs	r3, #0
 800d00c:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800d00e:	f107 0318 	add.w	r3, r7, #24
 800d012:	4618      	mov	r0, r3
 800d014:	f005 fb6e 	bl	80126f4 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800d018:	4b4a      	ldr	r3, [pc, #296]	@ (800d144 <LmHandlerConfigure+0x26c>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	4798      	blx	r3
 800d020:	4603      	mov	r3, r0
 800d022:	4a49      	ldr	r2, [pc, #292]	@ (800d148 <LmHandlerConfigure+0x270>)
 800d024:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800d026:	2306      	movs	r3, #6
 800d028:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800d02a:	4b47      	ldr	r3, [pc, #284]	@ (800d148 <LmHandlerConfigure+0x270>)
 800d02c:	695b      	ldr	r3, [r3, #20]
 800d02e:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800d030:	f107 0318 	add.w	r3, r7, #24
 800d034:	4618      	mov	r0, r3
 800d036:	f005 fb5d 	bl	80126f4 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800d03a:	2302      	movs	r3, #2
 800d03c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d03e:	f107 0318 	add.w	r3, r7, #24
 800d042:	4618      	mov	r0, r3
 800d044:	f005 f9b0 	bl	80123a8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	2208      	movs	r2, #8
 800d04c:	4619      	mov	r1, r3
 800d04e:	483e      	ldr	r0, [pc, #248]	@ (800d148 <LmHandlerConfigure+0x270>)
 800d050:	f00a fcad 	bl	80179ae <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800d054:	2303      	movs	r3, #3
 800d056:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d058:	f107 0318 	add.w	r3, r7, #24
 800d05c:	4618      	mov	r0, r3
 800d05e:	f005 f9a3 	bl	80123a8 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800d062:	69fb      	ldr	r3, [r7, #28]
 800d064:	2208      	movs	r2, #8
 800d066:	4619      	mov	r1, r3
 800d068:	4838      	ldr	r0, [pc, #224]	@ (800d14c <LmHandlerConfigure+0x274>)
 800d06a:	f00a fca0 	bl	80179ae <memcpy1>

    SecureElementPrintKeys();
 800d06e:	f7ff fc1f 	bl	800c8b0 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800d072:	4b37      	ldr	r3, [pc, #220]	@ (800d150 <LmHandlerConfigure+0x278>)
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	461a      	mov	r2, r3
 800d078:	4b36      	ldr	r3, [pc, #216]	@ (800d154 <LmHandlerConfigure+0x27c>)
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	4619      	mov	r1, r3
 800d07e:	4b36      	ldr	r3, [pc, #216]	@ (800d158 <LmHandlerConfigure+0x280>)
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	4618      	mov	r0, r3
 800d084:	4b35      	ldr	r3, [pc, #212]	@ (800d15c <LmHandlerConfigure+0x284>)
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	9303      	str	r3, [sp, #12]
 800d08a:	9002      	str	r0, [sp, #8]
 800d08c:	9101      	str	r1, [sp, #4]
 800d08e:	9200      	str	r2, [sp, #0]
 800d090:	4b33      	ldr	r3, [pc, #204]	@ (800d160 <LmHandlerConfigure+0x288>)
 800d092:	2200      	movs	r2, #0
 800d094:	2100      	movs	r1, #0
 800d096:	2002      	movs	r0, #2
 800d098:	f00e ffd8 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800d09c:	230f      	movs	r3, #15
 800d09e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d0a4:	f107 0318 	add.w	r3, r7, #24
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f005 fb23 	bl	80126f4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800d0ae:	2310      	movs	r3, #16
 800d0b0:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d0b6:	f107 0318 	add.w	r3, r7, #24
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f005 fb1a 	bl	80126f4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800d0c0:	2304      	movs	r3, #4
 800d0c2:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d0c4:	4b19      	ldr	r3, [pc, #100]	@ (800d12c <LmHandlerConfigure+0x254>)
 800d0c6:	789b      	ldrb	r3, [r3, #2]
 800d0c8:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d0ca:	f107 0318 	add.w	r3, r7, #24
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f005 fb10 	bl	80126f4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800d0d4:	2338      	movs	r3, #56	@ 0x38
 800d0d6:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800d0d8:	4b14      	ldr	r3, [pc, #80]	@ (800d12c <LmHandlerConfigure+0x254>)
 800d0da:	691b      	ldr	r3, [r3, #16]
 800d0dc:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d0de:	f107 0318 	add.w	r3, r7, #24
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f005 fb06 	bl	80126f4 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d0e8:	230f      	movs	r3, #15
 800d0ea:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800d0ec:	4b0f      	ldr	r3, [pc, #60]	@ (800d12c <LmHandlerConfigure+0x254>)
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	f107 0210 	add.w	r2, r7, #16
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f008 f9b8 	bl	801546c <RegionGetPhyParam>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2b00      	cmp	r3, #0
 800d104:	bf14      	ite	ne
 800d106:	2301      	movne	r3, #1
 800d108:	2300      	moveq	r3, #0
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	4b07      	ldr	r3, [pc, #28]	@ (800d12c <LmHandlerConfigure+0x254>)
 800d10e:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800d110:	2014      	movs	r0, #20
 800d112:	f000 fab9 	bl	800d688 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800d116:	4b05      	ldr	r3, [pc, #20]	@ (800d12c <LmHandlerConfigure+0x254>)
 800d118:	799b      	ldrb	r3, [r3, #6]
 800d11a:	4618      	mov	r0, r3
 800d11c:	f006 f918 	bl	8013350 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800d120:	2300      	movs	r3, #0
}
 800d122:	4618      	mov	r0, r3
 800d124:	3740      	adds	r7, #64	@ 0x40
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	200007ac 	.word	0x200007ac
 800d130:	200007ec 	.word	0x200007ec
 800d134:	0801f760 	.word	0x0801f760
 800d138:	200007d4 	.word	0x200007d4
 800d13c:	200007c4 	.word	0x200007c4
 800d140:	200008e2 	.word	0x200008e2
 800d144:	200007c0 	.word	0x200007c0
 800d148:	20000090 	.word	0x20000090
 800d14c:	20000098 	.word	0x20000098
 800d150:	200000a7 	.word	0x200000a7
 800d154:	200000a6 	.word	0x200000a6
 800d158:	200000a5 	.word	0x200000a5
 800d15c:	200000a4 	.word	0x200000a4
 800d160:	0801f7ac 	.word	0x0801f7ac

0800d164 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800d16a:	f002 fd45 	bl	800fbf8 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800d16e:	f000 fd3b 	bl	800dbe8 <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800d172:	f000 fd0f 	bl	800db94 <LmHandlerPackageIsTxPending>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d117      	bne.n	800d1ac <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800d17c:	4b0d      	ldr	r3, [pc, #52]	@ (800d1b4 <LmHandlerProcess+0x50>)
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d014      	beq.n	800d1ae <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800d184:	2300      	movs	r3, #0
 800d186:	703b      	strb	r3, [r7, #0]
 800d188:	2300      	movs	r3, #0
 800d18a:	707b      	strb	r3, [r7, #1]
 800d18c:	2300      	movs	r3, #0
 800d18e:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800d190:	4b09      	ldr	r3, [pc, #36]	@ (800d1b8 <LmHandlerProcess+0x54>)
 800d192:	78d9      	ldrb	r1, [r3, #3]
 800d194:	463b      	mov	r3, r7
 800d196:	2200      	movs	r2, #0
 800d198:	4618      	mov	r0, r3
 800d19a:	f000 f8b7 	bl	800d30c <LmHandlerSend>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d104      	bne.n	800d1ae <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800d1a4:	4b03      	ldr	r3, [pc, #12]	@ (800d1b4 <LmHandlerProcess+0x50>)
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	701a      	strb	r2, [r3, #0]
 800d1aa:	e000      	b.n	800d1ae <LmHandlerProcess+0x4a>
        return;
 800d1ac:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800d1ae:	3708      	adds	r7, #8
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}
 800d1b4:	200007ec 	.word	0x200007ec
 800d1b8:	200007ac 	.word	0x200007ac

0800d1bc <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800d1bc:	b480      	push	{r7}
 800d1be:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800d1c0:	4b02      	ldr	r3, [pc, #8]	@ (800d1cc <LmHandlerGetDutyCycleWaitTime+0x10>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bc80      	pop	{r7}
 800d1ca:	4770      	bx	lr
 800d1cc:	200007e8 	.word	0x200007e8

0800d1d0 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b090      	sub	sp, #64	@ 0x40
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	460a      	mov	r2, r1
 800d1da:	71fb      	strb	r3, [r7, #7]
 800d1dc:	4613      	mov	r3, r2
 800d1de:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d1e6:	4b36      	ldr	r3, [pc, #216]	@ (800d2c0 <LmHandlerJoin+0xf0>)
 800d1e8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d1ec:	b2db      	uxtb	r3, r3
 800d1ee:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800d1f2:	79fb      	ldrb	r3, [r7, #7]
 800d1f4:	2b02      	cmp	r3, #2
 800d1f6:	d10b      	bne.n	800d210 <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d1f8:	2302      	movs	r3, #2
 800d1fa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d1fe:	4b31      	ldr	r3, [pc, #196]	@ (800d2c4 <LmHandlerJoin+0xf4>)
 800d200:	2202      	movs	r2, #2
 800d202:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800d204:	4a2f      	ldr	r2, [pc, #188]	@ (800d2c4 <LmHandlerJoin+0xf4>)
 800d206:	79bb      	ldrb	r3, [r7, #6]
 800d208:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800d20a:	f004 ffdb 	bl	80121c4 <LoRaMacStart>
 800d20e:	e041      	b.n	800d294 <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d210:	2301      	movs	r3, #1
 800d212:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d216:	4b2b      	ldr	r3, [pc, #172]	@ (800d2c4 <LmHandlerJoin+0xf4>)
 800d218:	2201      	movs	r2, #1
 800d21a:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800d21c:	4b28      	ldr	r3, [pc, #160]	@ (800d2c0 <LmHandlerJoin+0xf0>)
 800d21e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d222:	4b28      	ldr	r3, [pc, #160]	@ (800d2c4 <LmHandlerJoin+0xf4>)
 800d224:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d226:	4b27      	ldr	r3, [pc, #156]	@ (800d2c4 <LmHandlerJoin+0xf4>)
 800d228:	2200      	movs	r2, #0
 800d22a:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800d22c:	4a25      	ldr	r2, [pc, #148]	@ (800d2c4 <LmHandlerJoin+0xf4>)
 800d22e:	79bb      	ldrb	r3, [r7, #6]
 800d230:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800d232:	4b25      	ldr	r3, [pc, #148]	@ (800d2c8 <LmHandlerJoin+0xf8>)
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	f083 0301 	eor.w	r3, r3, #1
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d01e      	beq.n	800d27e <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800d240:	231f      	movs	r3, #31
 800d242:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800d244:	4b1e      	ldr	r3, [pc, #120]	@ (800d2c0 <LmHandlerJoin+0xf0>)
 800d246:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d24a:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d24c:	f107 0308 	add.w	r3, r7, #8
 800d250:	4618      	mov	r0, r3
 800d252:	f005 fa4f 	bl	80126f4 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800d256:	2320      	movs	r3, #32
 800d258:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800d25a:	4b19      	ldr	r3, [pc, #100]	@ (800d2c0 <LmHandlerJoin+0xf0>)
 800d25c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d260:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d262:	f107 0308 	add.w	r3, r7, #8
 800d266:	4618      	mov	r0, r3
 800d268:	f005 fa44 	bl	80126f4 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d26c:	2329      	movs	r3, #41	@ 0x29
 800d26e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d270:	4b16      	ldr	r3, [pc, #88]	@ (800d2cc <LmHandlerJoin+0xfc>)
 800d272:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800d274:	f107 0308 	add.w	r3, r7, #8
 800d278:	4618      	mov	r0, r3
 800d27a:	f005 fa3b 	bl	80126f4 <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800d27e:	f004 ffa1 	bl	80121c4 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d282:	2301      	movs	r3, #1
 800d284:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d286:	2301      	movs	r3, #1
 800d288:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d28a:	f107 0308 	add.w	r3, r7, #8
 800d28e:	4618      	mov	r0, r3
 800d290:	f005 fa30 	bl	80126f4 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800d294:	4b0c      	ldr	r3, [pc, #48]	@ (800d2c8 <LmHandlerJoin+0xf8>)
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	f083 0301 	eor.w	r3, r3, #1
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d102      	bne.n	800d2a8 <LmHandlerJoin+0xd8>
 800d2a2:	79bb      	ldrb	r3, [r7, #6]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d004      	beq.n	800d2b2 <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800d2a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f005 fd91 	bl	8012dd4 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800d2b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2b4:	4a06      	ldr	r2, [pc, #24]	@ (800d2d0 <LmHandlerJoin+0x100>)
 800d2b6:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800d2b8:	bf00      	nop
 800d2ba:	3740      	adds	r7, #64	@ 0x40
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	200007ac 	.word	0x200007ac
 800d2c4:	200000a8 	.word	0x200000a8
 800d2c8:	200008e2 	.word	0x200008e2
 800d2cc:	01000400 	.word	0x01000400
 800d2d0:	200007e8 	.word	0x200007e8

0800d2d4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b08a      	sub	sp, #40	@ 0x28
 800d2d8:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800d2de:	463b      	mov	r3, r7
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f005 f861 	bl	80123a8 <LoRaMacMibGetRequestConfirm>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if( status == LORAMAC_STATUS_OK )
 800d2ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d106      	bne.n	800d302 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d2f4:	793b      	ldrb	r3, [r7, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d101      	bne.n	800d2fe <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	e002      	b.n	800d304 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800d2fe:	2301      	movs	r3, #1
 800d300:	e000      	b.n	800d304 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800d302:	2300      	movs	r3, #0
    }
}
 800d304:	4618      	mov	r0, r3
 800d306:	3728      	adds	r7, #40	@ 0x28
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b08a      	sub	sp, #40	@ 0x28
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	460b      	mov	r3, r1
 800d316:	70fb      	strb	r3, [r7, #3]
 800d318:	4613      	mov	r3, r2
 800d31a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d31c:	23ff      	movs	r3, #255	@ 0xff
 800d31e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800d322:	f002 f9c9 	bl	800f6b8 <LoRaMacIsBusy>
 800d326:	4603      	mov	r3, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d002      	beq.n	800d332 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d32c:	f06f 0301 	mvn.w	r3, #1
 800d330:	e0a3      	b.n	800d47a <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800d332:	f7ff ffcf 	bl	800d2d4 <LmHandlerJoinStatus>
 800d336:	4603      	mov	r3, r0
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d00a      	beq.n	800d352 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800d33c:	4b51      	ldr	r3, [pc, #324]	@ (800d484 <LmHandlerSend+0x178>)
 800d33e:	799b      	ldrb	r3, [r3, #6]
 800d340:	4a50      	ldr	r2, [pc, #320]	@ (800d484 <LmHandlerSend+0x178>)
 800d342:	79d2      	ldrb	r2, [r2, #7]
 800d344:	4611      	mov	r1, r2
 800d346:	4618      	mov	r0, r3
 800d348:	f7ff ff42 	bl	800d1d0 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d34c:	f06f 0302 	mvn.w	r3, #2
 800d350:	e093      	b.n	800d47a <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800d352:	4a4d      	ldr	r2, [pc, #308]	@ (800d488 <LmHandlerSend+0x17c>)
 800d354:	78fb      	ldrb	r3, [r7, #3]
 800d356:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800d358:	78fb      	ldrb	r3, [r7, #3]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	bf14      	ite	ne
 800d35e:	2301      	movne	r3, #1
 800d360:	2300      	moveq	r3, #0
 800d362:	b2db      	uxtb	r3, r3
 800d364:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800d366:	4b49      	ldr	r3, [pc, #292]	@ (800d48c <LmHandlerSend+0x180>)
 800d368:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d36c:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	785b      	ldrb	r3, [r3, #1]
 800d372:	f107 020c 	add.w	r2, r7, #12
 800d376:	4611      	mov	r1, r2
 800d378:	4618      	mov	r0, r3
 800d37a:	f004 ff85 	bl	8012288 <LoRaMacQueryTxPossible>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d009      	beq.n	800d398 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800d384:	2300      	movs	r3, #0
 800d386:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800d388:	2300      	movs	r3, #0
 800d38a:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800d38c:	2300      	movs	r3, #0
 800d38e:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800d390:	23f9      	movs	r3, #249	@ 0xf9
 800d392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d396:	e008      	b.n	800d3aa <LmHandlerSend+0x9e>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	785b      	ldrb	r3, [r3, #1]
 800d3a2:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800d3aa:	4b37      	ldr	r3, [pc, #220]	@ (800d488 <LmHandlerSend+0x17c>)
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	3310      	adds	r3, #16
 800d3b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d3b4:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800d3b8:	4b34      	ldr	r3, [pc, #208]	@ (800d48c <LmHandlerSend+0x180>)
 800d3ba:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d3be:	4b32      	ldr	r3, [pc, #200]	@ (800d488 <LmHandlerSend+0x17c>)
 800d3c0:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800d3c2:	78ba      	ldrb	r2, [r7, #2]
 800d3c4:	f107 0310 	add.w	r3, r7, #16
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f005 fe88 	bl	80130e0 <LoRaMacMcpsRequest>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800d3d6:	6a3b      	ldr	r3, [r7, #32]
 800d3d8:	4a2d      	ldr	r2, [pc, #180]	@ (800d490 <LmHandlerSend+0x184>)
 800d3da:	6013      	str	r3, [r2, #0]

    switch (status)
 800d3dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d3e0:	2b11      	cmp	r3, #17
 800d3e2:	d843      	bhi.n	800d46c <LmHandlerSend+0x160>
 800d3e4:	a201      	add	r2, pc, #4	@ (adr r2, 800d3ec <LmHandlerSend+0xe0>)
 800d3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ea:	bf00      	nop
 800d3ec:	0800d435 	.word	0x0800d435
 800d3f0:	0800d44d 	.word	0x0800d44d
 800d3f4:	0800d46d 	.word	0x0800d46d
 800d3f8:	0800d46d 	.word	0x0800d46d
 800d3fc:	0800d46d 	.word	0x0800d46d
 800d400:	0800d46d 	.word	0x0800d46d
 800d404:	0800d46d 	.word	0x0800d46d
 800d408:	0800d455 	.word	0x0800d455
 800d40c:	0800d46d 	.word	0x0800d46d
 800d410:	0800d46d 	.word	0x0800d46d
 800d414:	0800d46d 	.word	0x0800d46d
 800d418:	0800d465 	.word	0x0800d465
 800d41c:	0800d46d 	.word	0x0800d46d
 800d420:	0800d46d 	.word	0x0800d46d
 800d424:	0800d44d 	.word	0x0800d44d
 800d428:	0800d44d 	.word	0x0800d44d
 800d42c:	0800d44d 	.word	0x0800d44d
 800d430:	0800d45d 	.word	0x0800d45d
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800d434:	4b17      	ldr	r3, [pc, #92]	@ (800d494 <LmHandlerSend+0x188>)
 800d436:	2200      	movs	r2, #0
 800d438:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800d43a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d43e:	f113 0f07 	cmn.w	r3, #7
 800d442:	d017      	beq.n	800d474 <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d444:	2300      	movs	r3, #0
 800d446:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800d44a:	e013      	b.n	800d474 <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800d44c:	23fe      	movs	r3, #254	@ 0xfe
 800d44e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d452:	e010      	b.n	800d476 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d454:	23fd      	movs	r3, #253	@ 0xfd
 800d456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d45a:	e00c      	b.n	800d476 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800d45c:	23fb      	movs	r3, #251	@ 0xfb
 800d45e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d462:	e008      	b.n	800d476 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800d464:	23fa      	movs	r3, #250	@ 0xfa
 800d466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d46a:	e004      	b.n	800d476 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d46c:	23ff      	movs	r3, #255	@ 0xff
 800d46e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d472:	e000      	b.n	800d476 <LmHandlerSend+0x16a>
            break;
 800d474:	bf00      	nop
    }

    return lmhStatus;
 800d476:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3728      	adds	r7, #40	@ 0x28
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	200000a8 	.word	0x200000a8
 800d488:	200000b0 	.word	0x200000b0
 800d48c:	200007ac 	.word	0x200007ac
 800d490:	200007e8 	.word	0x200007e8
 800d494:	200007ec 	.word	0x200007ec

0800d498 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b086      	sub	sp, #24
 800d49c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800d49e:	2309      	movs	r3, #9
 800d4a0:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800d4a2:	463b      	mov	r3, r7
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f005 fc95 	bl	8012dd4 <LoRaMacMlmeRequest>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	4a06      	ldr	r2, [pc, #24]	@ (800d4cc <LmHandlerDeviceTimeReq+0x34>)
 800d4b2:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800d4b4:	7dfb      	ldrb	r3, [r7, #23]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d101      	bne.n	800d4be <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	e001      	b.n	800d4c2 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d4be:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3718      	adds	r7, #24
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	200007e8 	.word	0x200007e8

0800d4d0 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800d4da:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	370c      	adds	r7, #12
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bc80      	pop	{r7}
 800d4e6:	4770      	bx	lr

0800d4e8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b08c      	sub	sp, #48	@ 0x30
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (LoRaMacIsBusy() == true)
 800d4f8:	f002 f8de 	bl	800f6b8 <LoRaMacIsBusy>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d002      	beq.n	800d508 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d502:	f06f 0301 	mvn.w	r3, #1
 800d506:	e071      	b.n	800d5ec <LmHandlerRequestClass+0x104>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800d508:	f7ff fee4 	bl	800d2d4 <LmHandlerJoinStatus>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b01      	cmp	r3, #1
 800d510:	d002      	beq.n	800d518 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d512:	f06f 0302 	mvn.w	r3, #2
 800d516:	e069      	b.n	800d5ec <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d518:	2300      	movs	r3, #0
 800d51a:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d51c:	f107 0308 	add.w	r3, r7, #8
 800d520:	4618      	mov	r0, r3
 800d522:	f004 ff41 	bl	80123a8 <LoRaMacMibGetRequestConfirm>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d002      	beq.n	800d532 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d52c:	f04f 33ff 	mov.w	r3, #4294967295
 800d530:	e05c      	b.n	800d5ec <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800d532:	7b3b      	ldrb	r3, [r7, #12]
 800d534:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800d538:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800d53c:	79fb      	ldrb	r3, [r7, #7]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d052      	beq.n	800d5e8 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800d542:	79fb      	ldrb	r3, [r7, #7]
 800d544:	2b02      	cmp	r3, #2
 800d546:	d028      	beq.n	800d59a <LmHandlerRequestClass+0xb2>
 800d548:	2b02      	cmp	r3, #2
 800d54a:	dc48      	bgt.n	800d5de <LmHandlerRequestClass+0xf6>
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d002      	beq.n	800d556 <LmHandlerRequestClass+0x6e>
 800d550:	2b01      	cmp	r3, #1
 800d552:	d01e      	beq.n	800d592 <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800d554:	e043      	b.n	800d5de <LmHandlerRequestClass+0xf6>
                if( currentClass != CLASS_A )
 800d556:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d041      	beq.n	800d5e2 <LmHandlerRequestClass+0xfa>
                    mibReq.Param.Class = newClass;
 800d55e:	79fb      	ldrb	r3, [r7, #7]
 800d560:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d562:	f107 0308 	add.w	r3, r7, #8
 800d566:	4618      	mov	r0, r3
 800d568:	f005 f8c4 	bl	80126f4 <LoRaMacMibSetRequestConfirm>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d10b      	bne.n	800d58a <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800d572:	4b20      	ldr	r3, [pc, #128]	@ (800d5f4 <LmHandlerRequestClass+0x10c>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d032      	beq.n	800d5e2 <LmHandlerRequestClass+0xfa>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800d57c:	4b1d      	ldr	r3, [pc, #116]	@ (800d5f4 <LmHandlerRequestClass+0x10c>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d582:	79fa      	ldrb	r2, [r7, #7]
 800d584:	4610      	mov	r0, r2
 800d586:	4798      	blx	r3
            break;
 800d588:	e02b      	b.n	800d5e2 <LmHandlerRequestClass+0xfa>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d58a:	23ff      	movs	r3, #255	@ 0xff
 800d58c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d590:	e027      	b.n	800d5e2 <LmHandlerRequestClass+0xfa>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800d592:	23ff      	movs	r3, #255	@ 0xff
 800d594:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d598:	e026      	b.n	800d5e8 <LmHandlerRequestClass+0x100>
                if( currentClass != CLASS_A )
 800d59a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d003      	beq.n	800d5aa <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800d5a2:	23ff      	movs	r3, #255	@ 0xff
 800d5a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d5a8:	e01d      	b.n	800d5e6 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800d5aa:	79fb      	ldrb	r3, [r7, #7]
 800d5ac:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d5ae:	f107 0308 	add.w	r3, r7, #8
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f005 f89e 	bl	80126f4 <LoRaMacMibSetRequestConfirm>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d10b      	bne.n	800d5d6 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800d5be:	4b0d      	ldr	r3, [pc, #52]	@ (800d5f4 <LmHandlerRequestClass+0x10c>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d00e      	beq.n	800d5e6 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800d5c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d5f4 <LmHandlerRequestClass+0x10c>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5ce:	79fa      	ldrb	r2, [r7, #7]
 800d5d0:	4610      	mov	r0, r2
 800d5d2:	4798      	blx	r3
            break;
 800d5d4:	e007      	b.n	800d5e6 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d5d6:	23ff      	movs	r3, #255	@ 0xff
 800d5d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d5dc:	e003      	b.n	800d5e6 <LmHandlerRequestClass+0xfe>
            break;
 800d5de:	bf00      	nop
 800d5e0:	e002      	b.n	800d5e8 <LmHandlerRequestClass+0x100>
            break;
 800d5e2:	bf00      	nop
 800d5e4:	e000      	b.n	800d5e8 <LmHandlerRequestClass+0x100>
            break;
 800d5e6:	bf00      	nop
        }
    }
    return errorStatus;
 800d5e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3730      	adds	r7, #48	@ 0x30
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	200007c0 	.word	0x200007c0

0800d5f8 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b08c      	sub	sp, #48	@ 0x30
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d102      	bne.n	800d60c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d606:	f04f 33ff 	mov.w	r3, #4294967295
 800d60a:	e010      	b.n	800d62e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d60c:	2300      	movs	r3, #0
 800d60e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800d610:	f107 030c 	add.w	r3, r7, #12
 800d614:	4618      	mov	r0, r3
 800d616:	f004 fec7 	bl	80123a8 <LoRaMacMibGetRequestConfirm>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d002      	beq.n	800d626 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d620:	f04f 33ff 	mov.w	r3, #4294967295
 800d624:	e003      	b.n	800d62e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800d626:	7c3a      	ldrb	r2, [r7, #16]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800d62c:	2300      	movs	r3, #0
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3730      	adds	r7, #48	@ 0x30
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
	...

0800d638 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b08c      	sub	sp, #48	@ 0x30
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d102      	bne.n	800d64c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d646:	f04f 33ff 	mov.w	r3, #4294967295
 800d64a:	e016      	b.n	800d67a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800d64c:	2320      	movs	r3, #32
 800d64e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800d650:	f107 030c 	add.w	r3, r7, #12
 800d654:	4618      	mov	r0, r3
 800d656:	f004 fea7 	bl	80123a8 <LoRaMacMibGetRequestConfirm>
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d660:	f04f 33ff 	mov.w	r3, #4294967295
 800d664:	e009      	b.n	800d67a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800d666:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f993 2000 	ldrsb.w	r2, [r3]
 800d674:	4b03      	ldr	r3, [pc, #12]	@ (800d684 <LmHandlerGetTxDatarate+0x4c>)
 800d676:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800d678:	2300      	movs	r3, #0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3730      	adds	r7, #48	@ 0x30
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	200007ac 	.word	0x200007ac

0800d688 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b08c      	sub	sp, #48	@ 0x30
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d690:	2323      	movs	r3, #35	@ 0x23
 800d692:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d698:	f107 030c 	add.w	r3, r7, #12
 800d69c:	4618      	mov	r0, r3
 800d69e:	f005 f829 	bl	80126f4 <LoRaMacMibSetRequestConfirm>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800d6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ac:	e000      	b.n	800d6b0 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800d6ae:	2300      	movs	r3, #0
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3730      	adds	r7, #48	@ 0x30
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800d6c0:	4b15      	ldr	r3, [pc, #84]	@ (800d718 <McpsConfirm+0x60>)
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	785a      	ldrb	r2, [r3, #1]
 800d6ca:	4b13      	ldr	r3, [pc, #76]	@ (800d718 <McpsConfirm+0x60>)
 800d6cc:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	789b      	ldrb	r3, [r3, #2]
 800d6d2:	b25a      	sxtb	r2, r3
 800d6d4:	4b10      	ldr	r3, [pc, #64]	@ (800d718 <McpsConfirm+0x60>)
 800d6d6:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	4a0e      	ldr	r2, [pc, #56]	@ (800d718 <McpsConfirm+0x60>)
 800d6de:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d6e6:	4b0c      	ldr	r3, [pc, #48]	@ (800d718 <McpsConfirm+0x60>)
 800d6e8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	691b      	ldr	r3, [r3, #16]
 800d6ee:	b2da      	uxtb	r2, r3
 800d6f0:	4b09      	ldr	r3, [pc, #36]	@ (800d718 <McpsConfirm+0x60>)
 800d6f2:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	791b      	ldrb	r3, [r3, #4]
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	4b07      	ldr	r3, [pc, #28]	@ (800d718 <McpsConfirm+0x60>)
 800d6fc:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800d6fe:	4b07      	ldr	r3, [pc, #28]	@ (800d71c <McpsConfirm+0x64>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d704:	4804      	ldr	r0, [pc, #16]	@ (800d718 <McpsConfirm+0x60>)
 800d706:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800d708:	6879      	ldr	r1, [r7, #4]
 800d70a:	2000      	movs	r0, #0
 800d70c:	f000 f9c6 	bl	800da9c <LmHandlerPackagesNotify>
}
 800d710:	bf00      	nop
 800d712:	3708      	adds	r7, #8
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	200000b0 	.word	0x200000b0
 800d71c:	200007c0 	.word	0x200007c0

0800d720 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b086      	sub	sp, #24
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800d72a:	2300      	movs	r3, #0
 800d72c:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800d72e:	4b2c      	ldr	r3, [pc, #176]	@ (800d7e0 <McpsIndication+0xc0>)
 800d730:	2201      	movs	r2, #1
 800d732:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	785a      	ldrb	r2, [r3, #1]
 800d738:	4b29      	ldr	r3, [pc, #164]	@ (800d7e0 <McpsIndication+0xc0>)
 800d73a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800d73c:	4b28      	ldr	r3, [pc, #160]	@ (800d7e0 <McpsIndication+0xc0>)
 800d73e:	785b      	ldrb	r3, [r3, #1]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d149      	bne.n	800d7d8 <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	791b      	ldrb	r3, [r3, #4]
 800d748:	b25a      	sxtb	r2, r3
 800d74a:	4b25      	ldr	r3, [pc, #148]	@ (800d7e0 <McpsIndication+0xc0>)
 800d74c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d754:	b25a      	sxtb	r2, r3
 800d756:	4b22      	ldr	r3, [pc, #136]	@ (800d7e0 <McpsIndication+0xc0>)
 800d758:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d760:	4b1f      	ldr	r3, [pc, #124]	@ (800d7e0 <McpsIndication+0xc0>)
 800d762:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	78da      	ldrb	r2, [r3, #3]
 800d768:	4b1d      	ldr	r3, [pc, #116]	@ (800d7e0 <McpsIndication+0xc0>)
 800d76a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	691b      	ldr	r3, [r3, #16]
 800d770:	4a1b      	ldr	r2, [pc, #108]	@ (800d7e0 <McpsIndication+0xc0>)
 800d772:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	78db      	ldrb	r3, [r3, #3]
 800d778:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	7b1b      	ldrb	r3, [r3, #12]
 800d77e:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800d786:	4b17      	ldr	r3, [pc, #92]	@ (800d7e4 <McpsIndication+0xc4>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d78c:	f107 0210 	add.w	r2, r7, #16
 800d790:	4913      	ldr	r1, [pc, #76]	@ (800d7e0 <McpsIndication+0xc0>)
 800d792:	4610      	mov	r0, r2
 800d794:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800d796:	4b13      	ldr	r3, [pc, #76]	@ (800d7e4 <McpsIndication+0xc4>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d007      	beq.n	800d7b0 <McpsIndication+0x90>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	7e1b      	ldrb	r3, [r3, #24]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d003      	beq.n	800d7b0 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800d7a8:	4b0e      	ldr	r3, [pc, #56]	@ (800d7e4 <McpsIndication+0xc4>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ae:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800d7b0:	6879      	ldr	r1, [r7, #4]
 800d7b2:	2001      	movs	r0, #1
 800d7b4:	f000 f972 	bl	800da9c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800d7b8:	f107 030f 	add.w	r3, r7, #15
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7ff ff1b 	bl	800d5f8 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	795b      	ldrb	r3, [r3, #5]
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d107      	bne.n	800d7da <McpsIndication+0xba>
 800d7ca:	7bfb      	ldrb	r3, [r7, #15]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d104      	bne.n	800d7da <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800d7d0:	4b05      	ldr	r3, [pc, #20]	@ (800d7e8 <McpsIndication+0xc8>)
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	701a      	strb	r2, [r3, #0]
 800d7d6:	e000      	b.n	800d7da <McpsIndication+0xba>
        return;
 800d7d8:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800d7da:	3718      	adds	r7, #24
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	200000cc 	.word	0x200000cc
 800d7e4:	200007c0 	.word	0x200007c0
 800d7e8:	200007ec 	.word	0x200007ec

0800d7ec <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b08c      	sub	sp, #48	@ 0x30
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800d7f4:	4b3c      	ldr	r3, [pc, #240]	@ (800d8e8 <MlmeConfirm+0xfc>)
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	785a      	ldrb	r2, [r3, #1]
 800d7fe:	4b3a      	ldr	r3, [pc, #232]	@ (800d8e8 <MlmeConfirm+0xfc>)
 800d800:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800d802:	4b3a      	ldr	r3, [pc, #232]	@ (800d8ec <MlmeConfirm+0x100>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d808:	4837      	ldr	r0, [pc, #220]	@ (800d8e8 <MlmeConfirm+0xfc>)
 800d80a:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800d80c:	6879      	ldr	r1, [r7, #4]
 800d80e:	2002      	movs	r0, #2
 800d810:	f000 f944 	bl	800da9c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	3b01      	subs	r3, #1
 800d81a:	2b0b      	cmp	r3, #11
 800d81c:	d85c      	bhi.n	800d8d8 <MlmeConfirm+0xec>
 800d81e:	a201      	add	r2, pc, #4	@ (adr r2, 800d824 <MlmeConfirm+0x38>)
 800d820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d824:	0800d855 	.word	0x0800d855
 800d828:	0800d8d9 	.word	0x0800d8d9
 800d82c:	0800d8d9 	.word	0x0800d8d9
 800d830:	0800d8a7 	.word	0x0800d8a7
 800d834:	0800d8d9 	.word	0x0800d8d9
 800d838:	0800d8d9 	.word	0x0800d8d9
 800d83c:	0800d8d9 	.word	0x0800d8d9
 800d840:	0800d8d9 	.word	0x0800d8d9
 800d844:	0800d8d9 	.word	0x0800d8d9
 800d848:	0800d8d9 	.word	0x0800d8d9
 800d84c:	0800d8bf 	.word	0x0800d8bf
 800d850:	0800d8d9 	.word	0x0800d8d9
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800d854:	2306      	movs	r3, #6
 800d856:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d858:	f107 030c 	add.w	r3, r7, #12
 800d85c:	4618      	mov	r0, r3
 800d85e:	f004 fda3 	bl	80123a8 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	4a22      	ldr	r2, [pc, #136]	@ (800d8f0 <MlmeConfirm+0x104>)
 800d866:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800d868:	4822      	ldr	r0, [pc, #136]	@ (800d8f4 <MlmeConfirm+0x108>)
 800d86a:	f7ff fee5 	bl	800d638 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	785b      	ldrb	r3, [r3, #1]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d108      	bne.n	800d888 <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d876:	4b20      	ldr	r3, [pc, #128]	@ (800d8f8 <MlmeConfirm+0x10c>)
 800d878:	2200      	movs	r2, #0
 800d87a:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800d87c:	4b1f      	ldr	r3, [pc, #124]	@ (800d8fc <MlmeConfirm+0x110>)
 800d87e:	785b      	ldrb	r3, [r3, #1]
 800d880:	4618      	mov	r0, r3
 800d882:	f7ff fe31 	bl	800d4e8 <LmHandlerRequestClass>
 800d886:	e002      	b.n	800d88e <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800d888:	4b1b      	ldr	r3, [pc, #108]	@ (800d8f8 <MlmeConfirm+0x10c>)
 800d88a:	22ff      	movs	r2, #255	@ 0xff
 800d88c:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d88e:	4b17      	ldr	r3, [pc, #92]	@ (800d8ec <MlmeConfirm+0x100>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d894:	4818      	ldr	r0, [pc, #96]	@ (800d8f8 <MlmeConfirm+0x10c>)
 800d896:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	785b      	ldrb	r3, [r3, #1]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d11d      	bne.n	800d8dc <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800d8a0:	f7ff f894 	bl	800c9cc <SecureElementPrintSessionKeys>
            }
        }
        break;
 800d8a4:	e01a      	b.n	800d8dc <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800d8a6:	4b16      	ldr	r3, [pc, #88]	@ (800d900 <MlmeConfirm+0x114>)
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	7a1a      	ldrb	r2, [r3, #8]
 800d8b0:	4b13      	ldr	r3, [pc, #76]	@ (800d900 <MlmeConfirm+0x114>)
 800d8b2:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	7a5a      	ldrb	r2, [r3, #9]
 800d8b8:	4b11      	ldr	r3, [pc, #68]	@ (800d900 <MlmeConfirm+0x114>)
 800d8ba:	74da      	strb	r2, [r3, #19]
        }
        break;
 800d8bc:	e00f      	b.n	800d8de <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	785b      	ldrb	r3, [r3, #1]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d105      	bne.n	800d8d2 <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800d8c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d8fc <MlmeConfirm+0x110>)
 800d8c8:	7b1b      	ldrb	r3, [r3, #12]
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7ff fe00 	bl	800d4d0 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800d8d0:	e005      	b.n	800d8de <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800d8d2:	f7ff fde1 	bl	800d498 <LmHandlerDeviceTimeReq>
        break;
 800d8d6:	e002      	b.n	800d8de <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800d8d8:	bf00      	nop
 800d8da:	e000      	b.n	800d8de <MlmeConfirm+0xf2>
        break;
 800d8dc:	bf00      	nop
    }
}
 800d8de:	bf00      	nop
 800d8e0:	3730      	adds	r7, #48	@ 0x30
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	200000b0 	.word	0x200000b0
 800d8ec:	200007c0 	.word	0x200007c0
 800d8f0:	20000090 	.word	0x20000090
 800d8f4:	200000ac 	.word	0x200000ac
 800d8f8:	200000a8 	.word	0x200000a8
 800d8fc:	200007ac 	.word	0x200007ac
 800d900:	200000cc 	.word	0x200000cc

0800d904 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800d90e:	4b24      	ldr	r3, [pc, #144]	@ (800d9a0 <MlmeIndication+0x9c>)
 800d910:	2200      	movs	r2, #0
 800d912:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	785a      	ldrb	r2, [r3, #1]
 800d918:	4b21      	ldr	r3, [pc, #132]	@ (800d9a0 <MlmeIndication+0x9c>)
 800d91a:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	789b      	ldrb	r3, [r3, #2]
 800d920:	b25a      	sxtb	r2, r3
 800d922:	4b1f      	ldr	r3, [pc, #124]	@ (800d9a0 <MlmeIndication+0x9c>)
 800d924:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d92c:	b25a      	sxtb	r2, r3
 800d92e:	4b1c      	ldr	r3, [pc, #112]	@ (800d9a0 <MlmeIndication+0x9c>)
 800d930:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d938:	4b19      	ldr	r3, [pc, #100]	@ (800d9a0 <MlmeIndication+0x9c>)
 800d93a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	78da      	ldrb	r2, [r3, #3]
 800d940:	4b17      	ldr	r3, [pc, #92]	@ (800d9a0 <MlmeIndication+0x9c>)
 800d942:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	4a15      	ldr	r2, [pc, #84]	@ (800d9a0 <MlmeIndication+0x9c>)
 800d94a:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	2b0a      	cmp	r3, #10
 800d952:	d009      	beq.n	800d968 <MlmeIndication+0x64>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	2b0e      	cmp	r3, #14
 800d95a:	d005      	beq.n	800d968 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800d95c:	4b11      	ldr	r3, [pc, #68]	@ (800d9a4 <MlmeIndication+0xa0>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d962:	490f      	ldr	r1, [pc, #60]	@ (800d9a0 <MlmeIndication+0x9c>)
 800d964:	2000      	movs	r0, #0
 800d966:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800d968:	6879      	ldr	r1, [r7, #4]
 800d96a:	2003      	movs	r0, #3
 800d96c:	f000 f896 	bl	800da9c <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	2b0e      	cmp	r3, #14
 800d976:	d00a      	beq.n	800d98e <MlmeIndication+0x8a>
 800d978:	2b0e      	cmp	r3, #14
 800d97a:	dc0a      	bgt.n	800d992 <MlmeIndication+0x8e>
 800d97c:	2b06      	cmp	r3, #6
 800d97e:	d002      	beq.n	800d986 <MlmeIndication+0x82>
 800d980:	2b0a      	cmp	r3, #10
 800d982:	d008      	beq.n	800d996 <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800d984:	e005      	b.n	800d992 <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800d986:	4b08      	ldr	r3, [pc, #32]	@ (800d9a8 <MlmeIndication+0xa4>)
 800d988:	2201      	movs	r2, #1
 800d98a:	701a      	strb	r2, [r3, #0]
        break;
 800d98c:	e004      	b.n	800d998 <MlmeIndication+0x94>
        break;
 800d98e:	bf00      	nop
 800d990:	e002      	b.n	800d998 <MlmeIndication+0x94>
        break;
 800d992:	bf00      	nop
 800d994:	e000      	b.n	800d998 <MlmeIndication+0x94>
        break;
 800d996:	bf00      	nop
    }
}
 800d998:	bf00      	nop
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	200000cc 	.word	0x200000cc
 800d9a4:	200007c0 	.word	0x200007c0
 800d9a8:	200007ec 	.word	0x200007ec

0800d9ac <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	6039      	str	r1, [r7, #0]
 800d9b6:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	60fb      	str	r3, [r7, #12]
    switch( id )
 800d9bc:	79fb      	ldrb	r3, [r7, #7]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d103      	bne.n	800d9ca <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800d9c2:	f000 fa1d 	bl	800de00 <LmhpCompliancePackageFactory>
 800d9c6:	60f8      	str	r0, [r7, #12]
            break;
 800d9c8:	e000      	b.n	800d9cc <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800d9ca:	bf00      	nop
        }
    }
    if( package != NULL )
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d035      	beq.n	800da3e <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800d9d2:	79fb      	ldrb	r3, [r7, #7]
 800d9d4:	491d      	ldr	r1, [pc, #116]	@ (800da4c <LmHandlerPackageRegister+0xa0>)
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d9dc:	79fb      	ldrb	r3, [r7, #7]
 800d9de:	4a1b      	ldr	r2, [pc, #108]	@ (800da4c <LmHandlerPackageRegister+0xa0>)
 800d9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9e4:	4a1a      	ldr	r2, [pc, #104]	@ (800da50 <LmHandlerPackageRegister+0xa4>)
 800d9e6:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800d9e8:	4b1a      	ldr	r3, [pc, #104]	@ (800da54 <LmHandlerPackageRegister+0xa8>)
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	79fb      	ldrb	r3, [r7, #7]
 800d9ee:	4917      	ldr	r1, [pc, #92]	@ (800da4c <LmHandlerPackageRegister+0xa0>)
 800d9f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d9f4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d9f6:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800d9f8:	4b16      	ldr	r3, [pc, #88]	@ (800da54 <LmHandlerPackageRegister+0xa8>)
 800d9fa:	681a      	ldr	r2, [r3, #0]
 800d9fc:	79fb      	ldrb	r3, [r7, #7]
 800d9fe:	4913      	ldr	r1, [pc, #76]	@ (800da4c <LmHandlerPackageRegister+0xa0>)
 800da00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800da04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800da06:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800da08:	79fb      	ldrb	r3, [r7, #7]
 800da0a:	4a10      	ldr	r2, [pc, #64]	@ (800da4c <LmHandlerPackageRegister+0xa0>)
 800da0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da10:	4a11      	ldr	r2, [pc, #68]	@ (800da58 <LmHandlerPackageRegister+0xac>)
 800da12:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800da14:	4b0f      	ldr	r3, [pc, #60]	@ (800da54 <LmHandlerPackageRegister+0xa8>)
 800da16:	681a      	ldr	r2, [r3, #0]
 800da18:	79fb      	ldrb	r3, [r7, #7]
 800da1a:	490c      	ldr	r1, [pc, #48]	@ (800da4c <LmHandlerPackageRegister+0xa0>)
 800da1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800da20:	6992      	ldr	r2, [r2, #24]
 800da22:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800da24:	79fb      	ldrb	r3, [r7, #7]
 800da26:	4a09      	ldr	r2, [pc, #36]	@ (800da4c <LmHandlerPackageRegister+0xa0>)
 800da28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	4a0b      	ldr	r2, [pc, #44]	@ (800da5c <LmHandlerPackageRegister+0xb0>)
 800da30:	6851      	ldr	r1, [r2, #4]
 800da32:	4a0a      	ldr	r2, [pc, #40]	@ (800da5c <LmHandlerPackageRegister+0xb0>)
 800da34:	7852      	ldrb	r2, [r2, #1]
 800da36:	6838      	ldr	r0, [r7, #0]
 800da38:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800da3a:	2300      	movs	r3, #0
 800da3c:	e001      	b.n	800da42 <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800da3e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800da42:	4618      	mov	r0, r3
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	20000798 	.word	0x20000798
 800da50:	0800d1d1 	.word	0x0800d1d1
 800da54:	200007c0 	.word	0x200007c0
 800da58:	0800d499 	.word	0x0800d499
 800da5c:	200000e0 	.word	0x200000e0

0800da60 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	4603      	mov	r3, r0
 800da68:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800da6a:	79fb      	ldrb	r3, [r7, #7]
 800da6c:	2b04      	cmp	r3, #4
 800da6e:	d80e      	bhi.n	800da8e <LmHandlerPackageIsInitialized+0x2e>
 800da70:	79fb      	ldrb	r3, [r7, #7]
 800da72:	4a09      	ldr	r2, [pc, #36]	@ (800da98 <LmHandlerPackageIsInitialized+0x38>)
 800da74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d007      	beq.n	800da8e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800da7e:	79fb      	ldrb	r3, [r7, #7]
 800da80:	4a05      	ldr	r2, [pc, #20]	@ (800da98 <LmHandlerPackageIsInitialized+0x38>)
 800da82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	4798      	blx	r3
 800da8a:	4603      	mov	r3, r0
 800da8c:	e000      	b.n	800da90 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800da8e:	2300      	movs	r3, #0
    }
}
 800da90:	4618      	mov	r0, r3
 800da92:	3708      	adds	r7, #8
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	20000798 	.word	0x20000798

0800da9c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	4603      	mov	r3, r0
 800daa4:	6039      	str	r1, [r7, #0]
 800daa6:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800daa8:	2300      	movs	r3, #0
 800daaa:	73fb      	strb	r3, [r7, #15]
 800daac:	e067      	b.n	800db7e <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800daae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dab2:	4a37      	ldr	r2, [pc, #220]	@ (800db90 <LmHandlerPackagesNotify+0xf4>)
 800dab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d05a      	beq.n	800db72 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800dabc:	79fb      	ldrb	r3, [r7, #7]
 800dabe:	2b03      	cmp	r3, #3
 800dac0:	d84e      	bhi.n	800db60 <LmHandlerPackagesNotify+0xc4>
 800dac2:	a201      	add	r2, pc, #4	@ (adr r2, 800dac8 <LmHandlerPackagesNotify+0x2c>)
 800dac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac8:	0800dad9 	.word	0x0800dad9
 800dacc:	0800dafb 	.word	0x0800dafb
 800dad0:	0800db1d 	.word	0x0800db1d
 800dad4:	0800db3f 	.word	0x0800db3f
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800dad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dadc:	4a2c      	ldr	r2, [pc, #176]	@ (800db90 <LmHandlerPackagesNotify+0xf4>)
 800dade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dae2:	699b      	ldr	r3, [r3, #24]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d03d      	beq.n	800db64 <LmHandlerPackagesNotify+0xc8>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800dae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daec:	4a28      	ldr	r2, [pc, #160]	@ (800db90 <LmHandlerPackagesNotify+0xf4>)
 800daee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daf2:	699b      	ldr	r3, [r3, #24]
 800daf4:	6838      	ldr	r0, [r7, #0]
 800daf6:	4798      	blx	r3
                    }
                    break;
 800daf8:	e034      	b.n	800db64 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800dafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dafe:	4a24      	ldr	r2, [pc, #144]	@ (800db90 <LmHandlerPackagesNotify+0xf4>)
 800db00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db04:	69db      	ldr	r3, [r3, #28]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d02e      	beq.n	800db68 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800db0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db0e:	4a20      	ldr	r2, [pc, #128]	@ (800db90 <LmHandlerPackagesNotify+0xf4>)
 800db10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db14:	69db      	ldr	r3, [r3, #28]
 800db16:	6838      	ldr	r0, [r7, #0]
 800db18:	4798      	blx	r3
                    }
                    break;
 800db1a:	e025      	b.n	800db68 <LmHandlerPackagesNotify+0xcc>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800db1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db20:	4a1b      	ldr	r2, [pc, #108]	@ (800db90 <LmHandlerPackagesNotify+0xf4>)
 800db22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db26:	6a1b      	ldr	r3, [r3, #32]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d01f      	beq.n	800db6c <LmHandlerPackagesNotify+0xd0>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800db2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db30:	4a17      	ldr	r2, [pc, #92]	@ (800db90 <LmHandlerPackagesNotify+0xf4>)
 800db32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db36:	6a1b      	ldr	r3, [r3, #32]
 800db38:	6838      	ldr	r0, [r7, #0]
 800db3a:	4798      	blx	r3
                    }
                    break;
 800db3c:	e016      	b.n	800db6c <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800db3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db42:	4a13      	ldr	r2, [pc, #76]	@ (800db90 <LmHandlerPackagesNotify+0xf4>)
 800db44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d010      	beq.n	800db70 <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800db4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db52:	4a0f      	ldr	r2, [pc, #60]	@ (800db90 <LmHandlerPackagesNotify+0xf4>)
 800db54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db5a:	6838      	ldr	r0, [r7, #0]
 800db5c:	4798      	blx	r3
                    }
                    break;
 800db5e:	e007      	b.n	800db70 <LmHandlerPackagesNotify+0xd4>
                }
                default:
                {
                    break;
 800db60:	bf00      	nop
 800db62:	e006      	b.n	800db72 <LmHandlerPackagesNotify+0xd6>
                    break;
 800db64:	bf00      	nop
 800db66:	e004      	b.n	800db72 <LmHandlerPackagesNotify+0xd6>
                    break;
 800db68:	bf00      	nop
 800db6a:	e002      	b.n	800db72 <LmHandlerPackagesNotify+0xd6>
                    break;
 800db6c:	bf00      	nop
 800db6e:	e000      	b.n	800db72 <LmHandlerPackagesNotify+0xd6>
                    break;
 800db70:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800db72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db76:	b2db      	uxtb	r3, r3
 800db78:	3301      	adds	r3, #1
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	73fb      	strb	r3, [r7, #15]
 800db7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db82:	2b04      	cmp	r3, #4
 800db84:	dd93      	ble.n	800daae <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800db86:	bf00      	nop
 800db88:	bf00      	nop
 800db8a:	3710      	adds	r7, #16
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	20000798 	.word	0x20000798

0800db94 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800db9a:	2300      	movs	r3, #0
 800db9c:	71fb      	strb	r3, [r7, #7]
 800db9e:	e018      	b.n	800dbd2 <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800dba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dba4:	4a0f      	ldr	r2, [pc, #60]	@ (800dbe4 <LmHandlerPackageIsTxPending+0x50>)
 800dba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00b      	beq.n	800dbc6 <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800dbae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbb2:	4a0c      	ldr	r2, [pc, #48]	@ (800dbe4 <LmHandlerPackageIsTxPending+0x50>)
 800dbb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	4798      	blx	r3
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d001      	beq.n	800dbc6 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e00a      	b.n	800dbdc <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800dbc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbca:	b2db      	uxtb	r3, r3
 800dbcc:	3301      	adds	r3, #1
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	71fb      	strb	r3, [r7, #7]
 800dbd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbd6:	2b04      	cmp	r3, #4
 800dbd8:	dde2      	ble.n	800dba0 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800dbda:	2300      	movs	r3, #0
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	20000798 	.word	0x20000798

0800dbe8 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800dbee:	2300      	movs	r3, #0
 800dbf0:	71fb      	strb	r3, [r7, #7]
 800dbf2:	e022      	b.n	800dc3a <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800dbf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbf8:	4a14      	ldr	r2, [pc, #80]	@ (800dc4c <LmHandlerPackagesProcess+0x64>)
 800dbfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d015      	beq.n	800dc2e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800dc02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc06:	4a11      	ldr	r2, [pc, #68]	@ (800dc4c <LmHandlerPackagesProcess+0x64>)
 800dc08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc0c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d00d      	beq.n	800dc2e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800dc12:	79fb      	ldrb	r3, [r7, #7]
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7ff ff23 	bl	800da60 <LmHandlerPackageIsInitialized>
 800dc1a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d006      	beq.n	800dc2e <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800dc20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc24:	4a09      	ldr	r2, [pc, #36]	@ (800dc4c <LmHandlerPackagesProcess+0x64>)
 800dc26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc2a:	691b      	ldr	r3, [r3, #16]
 800dc2c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800dc2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	3301      	adds	r3, #1
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	71fb      	strb	r3, [r7, #7]
 800dc3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc3e:	2b04      	cmp	r3, #4
 800dc40:	ddd8      	ble.n	800dbf4 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800dc42:	bf00      	nop
 800dc44:	bf00      	nop
 800dc46:	3708      	adds	r7, #8
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}
 800dc4c:	20000798 	.word	0x20000798

0800dc50 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	4603      	mov	r3, r0
 800dc58:	6039      	str	r1, [r7, #0]
 800dc5a:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d102      	bne.n	800dc68 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800dc62:	f04f 33ff 	mov.w	r3, #4294967295
 800dc66:	e00e      	b.n	800dc86 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800dc68:	79fb      	ldrb	r3, [r7, #7]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d002      	beq.n	800dc74 <LmHandlerGetVersion+0x24>
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d004      	beq.n	800dc7c <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800dc72:	e007      	b.n	800dc84 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	4a06      	ldr	r2, [pc, #24]	@ (800dc90 <LmHandlerGetVersion+0x40>)
 800dc78:	601a      	str	r2, [r3, #0]
            break;
 800dc7a:	e003      	b.n	800dc84 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	4a05      	ldr	r2, [pc, #20]	@ (800dc94 <LmHandlerGetVersion+0x44>)
 800dc80:	601a      	str	r2, [r3, #0]
            break;
 800dc82:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	370c      	adds	r7, #12
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bc80      	pop	{r7}
 800dc8e:	4770      	bx	lr
 800dc90:	01000400 	.word	0x01000400
 800dc94:	02010001 	.word	0x02010001

0800dc98 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800dc9c:	f005 fb76 	bl	801338c <LoRaMacDeInitialization>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d101      	bne.n	800dcaa <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800dca6:	2300      	movs	r3, #0
 800dca8:	e001      	b.n	800dcae <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800dcaa:	f06f 0301 	mvn.w	r3, #1
    }
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800dcb6:	f004 faaf 	bl	8012218 <LoRaMacHalt>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d101      	bne.n	800dcc4 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	e001      	b.n	800dcc8 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800dcc4:	f06f 0301 	mvn.w	r3, #1
    }
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b08e      	sub	sp, #56	@ 0x38
 800dcd0:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800dcdc:	f7ff ffe9 	bl	800dcb2 <LmHandlerHalt>
 800dce0:	4603      	mov	r3, r0
 800dce2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800dce6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d12f      	bne.n	800dd4e <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800dcee:	f000 f859 	bl	800dda4 <NvmDataMgmtStoreBegin>
 800dcf2:	6338      	str	r0, [r7, #48]	@ 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800dcf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf6:	f113 0f02 	cmn.w	r3, #2
 800dcfa:	d103      	bne.n	800dd04 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800dcfc:	23f8      	movs	r3, #248	@ 0xf8
 800dcfe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dd02:	e01c      	b.n	800dd3e <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800dd04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d104      	bne.n	800dd14 <LmHandlerNvmDataStore+0x48>
 800dd0a:	4b1b      	ldr	r3, [pc, #108]	@ (800dd78 <LmHandlerNvmDataStore+0xac>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	695b      	ldr	r3, [r3, #20]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d103      	bne.n	800dd1c <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800dd14:	23ff      	movs	r3, #255	@ 0xff
 800dd16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800dd1a:	e010      	b.n	800dd3e <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800dd1c:	2327      	movs	r3, #39	@ 0x27
 800dd1e:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800dd20:	1d3b      	adds	r3, r7, #4
 800dd22:	4618      	mov	r0, r3
 800dd24:	f004 fb40 	bl	80123a8 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800dd2c:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 800dd30:	62bb      	str	r3, [r7, #40]	@ 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800dd32:	4b11      	ldr	r3, [pc, #68]	@ (800dd78 <LmHandlerNvmDataStore+0xac>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	695b      	ldr	r3, [r3, #20]
 800dd38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd3c:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800dd3e:	f000 f847 	bl	800ddd0 <NvmDataMgmtStoreEnd>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d002      	beq.n	800dd4e <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800dd48:	23ff      	movs	r3, #255	@ 0xff
 800dd4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800dd4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d109      	bne.n	800dd6a <LmHandlerNvmDataStore+0x9e>
 800dd56:	4b08      	ldr	r3, [pc, #32]	@ (800dd78 <LmHandlerNvmDataStore+0xac>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	69db      	ldr	r3, [r3, #28]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d004      	beq.n	800dd6a <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800dd60:	4b05      	ldr	r3, [pc, #20]	@ (800dd78 <LmHandlerNvmDataStore+0xac>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	69db      	ldr	r3, [r3, #28]
 800dd66:	2001      	movs	r0, #1
 800dd68:	4798      	blx	r3
    }

    return lmhStatus;
 800dd6a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3738      	adds	r7, #56	@ 0x38
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	200007c0 	.word	0x200007c0

0800dd7c <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	4603      	mov	r3, r0
 800dd84:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800dd86:	4b06      	ldr	r3, [pc, #24]	@ (800dda0 <NvmDataMgmtEvent+0x24>)
 800dd88:	881a      	ldrh	r2, [r3, #0]
 800dd8a:	88fb      	ldrh	r3, [r7, #6]
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	4b03      	ldr	r3, [pc, #12]	@ (800dda0 <NvmDataMgmtEvent+0x24>)
 800dd92:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800dd94:	bf00      	nop
 800dd96:	370c      	adds	r7, #12
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bc80      	pop	{r7}
 800dd9c:	4770      	bx	lr
 800dd9e:	bf00      	nop
 800dda0:	200008e4 	.word	0x200008e4

0800dda4 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800dda8:	4b08      	ldr	r3, [pc, #32]	@ (800ddcc <NvmDataMgmtStoreBegin+0x28>)
 800ddaa:	881b      	ldrh	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d102      	bne.n	800ddb6 <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800ddb0:	f06f 0301 	mvn.w	r3, #1
 800ddb4:	e008      	b.n	800ddc8 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800ddb6:	f004 fa13 	bl	80121e0 <LoRaMacStop>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d002      	beq.n	800ddc6 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800ddc0:	f06f 0302 	mvn.w	r3, #2
 800ddc4:	e000      	b.n	800ddc8 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800ddc6:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	200008e4 	.word	0x200008e4

0800ddd0 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800ddd4:	4b03      	ldr	r3, [pc, #12]	@ (800dde4 <NvmDataMgmtStoreEnd+0x14>)
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800ddda:	f004 f9f3 	bl	80121c4 <LoRaMacStart>
    return NVM_DATA_OK;
 800ddde:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	200008e4 	.word	0x200008e4

0800dde8 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800ddec:	2220      	movs	r2, #32
 800ddee:	2100      	movs	r1, #0
 800ddf0:	4802      	ldr	r0, [pc, #8]	@ (800ddfc <ClassBStatusReset+0x14>)
 800ddf2:	f009 fe17 	bl	8017a24 <memset1>
}
 800ddf6:	bf00      	nop
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	200008fc 	.word	0x200008fc

0800de00 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800de00:	b480      	push	{r7}
 800de02:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800de04:	4b02      	ldr	r3, [pc, #8]	@ (800de10 <LmhpCompliancePackageFactory+0x10>)
}
 800de06:	4618      	mov	r0, r3
 800de08:	46bd      	mov	sp, r7
 800de0a:	bc80      	pop	{r7}
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	200000e8 	.word	0x200000e8

0800de14 <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b086      	sub	sp, #24
 800de18:	af02      	add	r7, sp, #8
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	4613      	mov	r3, r2
 800de20:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d018      	beq.n	800de5a <LmhpComplianceInit+0x46>
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d015      	beq.n	800de5a <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800de2e:	4a19      	ldr	r2, [pc, #100]	@ (800de94 <LmhpComplianceInit+0x80>)
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800de34:	4a18      	ldr	r2, [pc, #96]	@ (800de98 <LmhpComplianceInit+0x84>)
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800de3a:	4a17      	ldr	r2, [pc, #92]	@ (800de98 <LmhpComplianceInit+0x84>)
 800de3c:	79fb      	ldrb	r3, [r7, #7]
 800de3e:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800de40:	4b15      	ldr	r3, [pc, #84]	@ (800de98 <LmhpComplianceInit+0x84>)
 800de42:	2201      	movs	r2, #1
 800de44:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800de46:	2300      	movs	r3, #0
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	4b14      	ldr	r3, [pc, #80]	@ (800de9c <LmhpComplianceInit+0x88>)
 800de4c:	2200      	movs	r2, #0
 800de4e:	f04f 31ff 	mov.w	r1, #4294967295
 800de52:	4813      	ldr	r0, [pc, #76]	@ (800dea0 <LmhpComplianceInit+0x8c>)
 800de54:	f00d fe4c 	bl	801baf0 <UTIL_TIMER_Create>
 800de58:	e005      	b.n	800de66 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800de5a:	4b0e      	ldr	r3, [pc, #56]	@ (800de94 <LmhpComplianceInit+0x80>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800de60:	4b0d      	ldr	r3, [pc, #52]	@ (800de98 <LmhpComplianceInit+0x84>)
 800de62:	2200      	movs	r2, #0
 800de64:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800de66:	4b0c      	ldr	r3, [pc, #48]	@ (800de98 <LmhpComplianceInit+0x84>)
 800de68:	2200      	movs	r2, #0
 800de6a:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800de6c:	f7ff ffbc 	bl	800dde8 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800de70:	4b09      	ldr	r3, [pc, #36]	@ (800de98 <LmhpComplianceInit+0x84>)
 800de72:	2200      	movs	r2, #0
 800de74:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800de76:	4b08      	ldr	r3, [pc, #32]	@ (800de98 <LmhpComplianceInit+0x84>)
 800de78:	2200      	movs	r2, #0
 800de7a:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800de7c:	4b06      	ldr	r3, [pc, #24]	@ (800de98 <LmhpComplianceInit+0x84>)
 800de7e:	2200      	movs	r2, #0
 800de80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800de84:	4b04      	ldr	r3, [pc, #16]	@ (800de98 <LmhpComplianceInit+0x84>)
 800de86:	2200      	movs	r2, #0
 800de88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800de8c:	bf00      	nop
 800de8e:	3710      	adds	r7, #16
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}
 800de94:	20000920 	.word	0x20000920
 800de98:	200008e8 	.word	0x200008e8
 800de9c:	0800e789 	.word	0x0800e789
 800dea0:	20000924 	.word	0x20000924

0800dea4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800dea4:	b480      	push	{r7}
 800dea6:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800dea8:	4b02      	ldr	r3, [pc, #8]	@ (800deb4 <LmhpComplianceIsInitialized+0x10>)
 800deaa:	781b      	ldrb	r3, [r3, #0]
}
 800deac:	4618      	mov	r0, r3
 800deae:	46bd      	mov	sp, r7
 800deb0:	bc80      	pop	{r7}
 800deb2:	4770      	bx	lr
 800deb4:	200008e8 	.word	0x200008e8

0800deb8 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800deb8:	b480      	push	{r7}
 800deba:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800debc:	4b02      	ldr	r3, [pc, #8]	@ (800dec8 <LmhpComplianceIsTxPending+0x10>)
 800debe:	785b      	ldrb	r3, [r3, #1]
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bc80      	pop	{r7}
 800dec6:	4770      	bx	lr
 800dec8:	200008e8 	.word	0x200008e8

0800decc <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800decc:	b590      	push	{r4, r7, lr}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800ded2:	4b33      	ldr	r3, [pc, #204]	@ (800dfa0 <LmhpComplianceProcess+0xd4>)
 800ded4:	785b      	ldrb	r3, [r3, #1]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d03f      	beq.n	800df5a <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800deda:	f00d ffc7 	bl	801be6c <UTIL_TIMER_GetCurrentTime>
 800dede:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800dee0:	4b2f      	ldr	r3, [pc, #188]	@ (800dfa0 <LmhpComplianceProcess+0xd4>)
 800dee2:	685c      	ldr	r4, [r3, #4]
 800dee4:	f7ff f96a 	bl	800d1bc <LmHandlerGetDutyCycleWaitTime>
 800dee8:	4603      	mov	r3, r0
 800deea:	4423      	add	r3, r4
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	429a      	cmp	r2, r3
 800def0:	d942      	bls.n	800df78 <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800def2:	4b2b      	ldr	r3, [pc, #172]	@ (800dfa0 <LmhpComplianceProcess+0xd4>)
 800def4:	7a9b      	ldrb	r3, [r3, #10]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d03e      	beq.n	800df78 <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800defa:	23e0      	movs	r3, #224	@ 0xe0
 800defc:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800defe:	4b28      	ldr	r3, [pc, #160]	@ (800dfa0 <LmhpComplianceProcess+0xd4>)
 800df00:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800df02:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800df04:	4b26      	ldr	r3, [pc, #152]	@ (800dfa0 <LmhpComplianceProcess+0xd4>)
 800df06:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800df08:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800df0a:	23ff      	movs	r3, #255	@ 0xff
 800df0c:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800df0e:	4b24      	ldr	r3, [pc, #144]	@ (800dfa0 <LmhpComplianceProcess+0xd4>)
 800df10:	7a19      	ldrb	r1, [r3, #8]
 800df12:	463b      	mov	r3, r7
 800df14:	2201      	movs	r2, #1
 800df16:	4618      	mov	r0, r3
 800df18:	f7ff f9f8 	bl	800d30c <LmHandlerSend>
 800df1c:	4603      	mov	r3, r0
 800df1e:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800df20:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800df24:	f113 0f02 	cmn.w	r3, #2
 800df28:	d004      	beq.n	800df34 <LmhpComplianceProcess+0x68>
 800df2a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800df2e:	f113 0f06 	cmn.w	r3, #6
 800df32:	d108      	bne.n	800df46 <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800df34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800df38:	481a      	ldr	r0, [pc, #104]	@ (800dfa4 <LmhpComplianceProcess+0xd8>)
 800df3a:	f00d feed 	bl	801bd18 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800df3e:	4819      	ldr	r0, [pc, #100]	@ (800dfa4 <LmhpComplianceProcess+0xd8>)
 800df40:	f00d fe0c 	bl	801bb5c <UTIL_TIMER_Start>
 800df44:	e005      	b.n	800df52 <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800df46:	4b16      	ldr	r3, [pc, #88]	@ (800dfa0 <LmhpComplianceProcess+0xd4>)
 800df48:	2200      	movs	r2, #0
 800df4a:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800df4c:	4b14      	ldr	r3, [pc, #80]	@ (800dfa0 <LmhpComplianceProcess+0xd4>)
 800df4e:	2200      	movs	r2, #0
 800df50:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800df52:	4a13      	ldr	r2, [pc, #76]	@ (800dfa0 <LmhpComplianceProcess+0xd4>)
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6053      	str	r3, [r2, #4]
 800df58:	e00e      	b.n	800df78 <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800df5a:	4b11      	ldr	r3, [pc, #68]	@ (800dfa0 <LmhpComplianceProcess+0xd4>)
 800df5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800df60:	2b00      	cmp	r3, #0
 800df62:	d009      	beq.n	800df78 <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800df64:	4b0e      	ldr	r3, [pc, #56]	@ (800dfa0 <LmhpComplianceProcess+0xd4>)
 800df66:	2200      	movs	r2, #0
 800df68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800df6c:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa0 <LmhpComplianceProcess+0xd4>)
 800df6e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800df72:	4618      	mov	r0, r3
 800df74:	f7ff fab8 	bl	800d4e8 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800df78:	4b09      	ldr	r3, [pc, #36]	@ (800dfa0 <LmhpComplianceProcess+0xd4>)
 800df7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d00a      	beq.n	800df98 <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800df82:	4b07      	ldr	r3, [pc, #28]	@ (800dfa0 <LmhpComplianceProcess+0xd4>)
 800df84:	2200      	movs	r2, #0
 800df86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800df8a:	4b07      	ldr	r3, [pc, #28]	@ (800dfa8 <LmhpComplianceProcess+0xdc>)
 800df8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d002      	beq.n	800df98 <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800df92:	4b05      	ldr	r3, [pc, #20]	@ (800dfa8 <LmhpComplianceProcess+0xdc>)
 800df94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df96:	4798      	blx	r3
        }
    }
}
 800df98:	bf00      	nop
 800df9a:	3714      	adds	r7, #20
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd90      	pop	{r4, r7, pc}
 800dfa0:	200008e8 	.word	0x200008e8
 800dfa4:	20000924 	.word	0x20000924
 800dfa8:	200000e8 	.word	0x200000e8

0800dfac <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800dfac:	b5b0      	push	{r4, r5, r7, lr}
 800dfae:	b0a4      	sub	sp, #144	@ 0x90
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800dfba:	4bce      	ldr	r3, [pc, #824]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	f083 0301 	eor.w	r3, r3, #1
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	f040 83b5 	bne.w	800e734 <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	78db      	ldrb	r3, [r3, #3]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d103      	bne.n	800dfda <LmhpComplianceOnMcpsIndication+0x2e>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	7b9b      	ldrb	r3, [r3, #14]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d005      	beq.n	800dfe6 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800dfda:	4bc6      	ldr	r3, [pc, #792]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800dfdc:	8a1b      	ldrh	r3, [r3, #16]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	b29a      	uxth	r2, r3
 800dfe2:	4bc4      	ldr	r3, [pc, #784]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800dfe4:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	7b5b      	ldrb	r3, [r3, #13]
 800dfea:	f083 0301 	eor.w	r3, r3, #1
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f040 83a1 	bne.w	800e738 <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	78db      	ldrb	r3, [r3, #3]
 800dffa:	2be0      	cmp	r3, #224	@ 0xe0
 800dffc:	f040 839e 	bne.w	800e73c <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800e000:	4bbc      	ldr	r3, [pc, #752]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800e002:	2200      	movs	r2, #0
 800e004:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	689a      	ldr	r2, [r3, #8]
 800e00a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e00e:	1c59      	adds	r1, r3, #1
 800e010:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e014:	4413      	add	r3, r2
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	2b7f      	cmp	r3, #127	@ 0x7f
 800e01a:	f200 836e 	bhi.w	800e6fa <LmhpComplianceOnMcpsIndication+0x74e>
 800e01e:	a201      	add	r2, pc, #4	@ (adr r2, 800e024 <LmhpComplianceOnMcpsIndication+0x78>)
 800e020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e024:	0800e225 	.word	0x0800e225
 800e028:	0800e269 	.word	0x0800e269
 800e02c:	0800e273 	.word	0x0800e273
 800e030:	0800e27f 	.word	0x0800e27f
 800e034:	0800e2a1 	.word	0x0800e2a1
 800e038:	0800e2cf 	.word	0x0800e2cf
 800e03c:	0800e2fd 	.word	0x0800e2fd
 800e040:	0800e35b 	.word	0x0800e35b
 800e044:	0800e3b3 	.word	0x0800e3b3
 800e048:	0800e41f 	.word	0x0800e41f
 800e04c:	0800e46f 	.word	0x0800e46f
 800e050:	0800e6fb 	.word	0x0800e6fb
 800e054:	0800e6fb 	.word	0x0800e6fb
 800e058:	0800e6fb 	.word	0x0800e6fb
 800e05c:	0800e6fb 	.word	0x0800e6fb
 800e060:	0800e6fb 	.word	0x0800e6fb
 800e064:	0800e6fb 	.word	0x0800e6fb
 800e068:	0800e6fb 	.word	0x0800e6fb
 800e06c:	0800e6fb 	.word	0x0800e6fb
 800e070:	0800e6fb 	.word	0x0800e6fb
 800e074:	0800e6fb 	.word	0x0800e6fb
 800e078:	0800e6fb 	.word	0x0800e6fb
 800e07c:	0800e6fb 	.word	0x0800e6fb
 800e080:	0800e6fb 	.word	0x0800e6fb
 800e084:	0800e6fb 	.word	0x0800e6fb
 800e088:	0800e6fb 	.word	0x0800e6fb
 800e08c:	0800e6fb 	.word	0x0800e6fb
 800e090:	0800e6fb 	.word	0x0800e6fb
 800e094:	0800e6fb 	.word	0x0800e6fb
 800e098:	0800e6fb 	.word	0x0800e6fb
 800e09c:	0800e6fb 	.word	0x0800e6fb
 800e0a0:	0800e6fb 	.word	0x0800e6fb
 800e0a4:	0800e477 	.word	0x0800e477
 800e0a8:	0800e489 	.word	0x0800e489
 800e0ac:	0800e491 	.word	0x0800e491
 800e0b0:	0800e6fb 	.word	0x0800e6fb
 800e0b4:	0800e6fb 	.word	0x0800e6fb
 800e0b8:	0800e6fb 	.word	0x0800e6fb
 800e0bc:	0800e6fb 	.word	0x0800e6fb
 800e0c0:	0800e6fb 	.word	0x0800e6fb
 800e0c4:	0800e6fb 	.word	0x0800e6fb
 800e0c8:	0800e6fb 	.word	0x0800e6fb
 800e0cc:	0800e6fb 	.word	0x0800e6fb
 800e0d0:	0800e6fb 	.word	0x0800e6fb
 800e0d4:	0800e6fb 	.word	0x0800e6fb
 800e0d8:	0800e6fb 	.word	0x0800e6fb
 800e0dc:	0800e6fb 	.word	0x0800e6fb
 800e0e0:	0800e6fb 	.word	0x0800e6fb
 800e0e4:	0800e6fb 	.word	0x0800e6fb
 800e0e8:	0800e6fb 	.word	0x0800e6fb
 800e0ec:	0800e6fb 	.word	0x0800e6fb
 800e0f0:	0800e6fb 	.word	0x0800e6fb
 800e0f4:	0800e6fb 	.word	0x0800e6fb
 800e0f8:	0800e6fb 	.word	0x0800e6fb
 800e0fc:	0800e6fb 	.word	0x0800e6fb
 800e100:	0800e6fb 	.word	0x0800e6fb
 800e104:	0800e6fb 	.word	0x0800e6fb
 800e108:	0800e6fb 	.word	0x0800e6fb
 800e10c:	0800e6fb 	.word	0x0800e6fb
 800e110:	0800e6fb 	.word	0x0800e6fb
 800e114:	0800e6fb 	.word	0x0800e6fb
 800e118:	0800e6fb 	.word	0x0800e6fb
 800e11c:	0800e6fb 	.word	0x0800e6fb
 800e120:	0800e6fb 	.word	0x0800e6fb
 800e124:	0800e6fb 	.word	0x0800e6fb
 800e128:	0800e6fb 	.word	0x0800e6fb
 800e12c:	0800e6fb 	.word	0x0800e6fb
 800e130:	0800e6fb 	.word	0x0800e6fb
 800e134:	0800e6fb 	.word	0x0800e6fb
 800e138:	0800e6fb 	.word	0x0800e6fb
 800e13c:	0800e6fb 	.word	0x0800e6fb
 800e140:	0800e6fb 	.word	0x0800e6fb
 800e144:	0800e6fb 	.word	0x0800e6fb
 800e148:	0800e6fb 	.word	0x0800e6fb
 800e14c:	0800e6fb 	.word	0x0800e6fb
 800e150:	0800e6fb 	.word	0x0800e6fb
 800e154:	0800e6fb 	.word	0x0800e6fb
 800e158:	0800e6fb 	.word	0x0800e6fb
 800e15c:	0800e6fb 	.word	0x0800e6fb
 800e160:	0800e6fb 	.word	0x0800e6fb
 800e164:	0800e6fb 	.word	0x0800e6fb
 800e168:	0800e6fb 	.word	0x0800e6fb
 800e16c:	0800e6fb 	.word	0x0800e6fb
 800e170:	0800e6fb 	.word	0x0800e6fb
 800e174:	0800e6fb 	.word	0x0800e6fb
 800e178:	0800e6fb 	.word	0x0800e6fb
 800e17c:	0800e6fb 	.word	0x0800e6fb
 800e180:	0800e6fb 	.word	0x0800e6fb
 800e184:	0800e6fb 	.word	0x0800e6fb
 800e188:	0800e6fb 	.word	0x0800e6fb
 800e18c:	0800e6fb 	.word	0x0800e6fb
 800e190:	0800e6fb 	.word	0x0800e6fb
 800e194:	0800e6fb 	.word	0x0800e6fb
 800e198:	0800e6fb 	.word	0x0800e6fb
 800e19c:	0800e6fb 	.word	0x0800e6fb
 800e1a0:	0800e6fb 	.word	0x0800e6fb
 800e1a4:	0800e6fb 	.word	0x0800e6fb
 800e1a8:	0800e6fb 	.word	0x0800e6fb
 800e1ac:	0800e6fb 	.word	0x0800e6fb
 800e1b0:	0800e6fb 	.word	0x0800e6fb
 800e1b4:	0800e6fb 	.word	0x0800e6fb
 800e1b8:	0800e6fb 	.word	0x0800e6fb
 800e1bc:	0800e6fb 	.word	0x0800e6fb
 800e1c0:	0800e6fb 	.word	0x0800e6fb
 800e1c4:	0800e6fb 	.word	0x0800e6fb
 800e1c8:	0800e6fb 	.word	0x0800e6fb
 800e1cc:	0800e6fb 	.word	0x0800e6fb
 800e1d0:	0800e6fb 	.word	0x0800e6fb
 800e1d4:	0800e6fb 	.word	0x0800e6fb
 800e1d8:	0800e6fb 	.word	0x0800e6fb
 800e1dc:	0800e6fb 	.word	0x0800e6fb
 800e1e0:	0800e6fb 	.word	0x0800e6fb
 800e1e4:	0800e6fb 	.word	0x0800e6fb
 800e1e8:	0800e6fb 	.word	0x0800e6fb
 800e1ec:	0800e6fb 	.word	0x0800e6fb
 800e1f0:	0800e6fb 	.word	0x0800e6fb
 800e1f4:	0800e6fb 	.word	0x0800e6fb
 800e1f8:	0800e6fb 	.word	0x0800e6fb
 800e1fc:	0800e6fb 	.word	0x0800e6fb
 800e200:	0800e6fb 	.word	0x0800e6fb
 800e204:	0800e6fb 	.word	0x0800e6fb
 800e208:	0800e6fb 	.word	0x0800e6fb
 800e20c:	0800e6fb 	.word	0x0800e6fb
 800e210:	0800e6fb 	.word	0x0800e6fb
 800e214:	0800e6fb 	.word	0x0800e6fb
 800e218:	0800e4c3 	.word	0x0800e4c3
 800e21c:	0800e573 	.word	0x0800e573
 800e220:	0800e5a5 	.word	0x0800e5a5
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800e224:	4b33      	ldr	r3, [pc, #204]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800e226:	68da      	ldr	r2, [r3, #12]
 800e228:	4b32      	ldr	r3, [pc, #200]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800e22a:	7a9b      	ldrb	r3, [r3, #10]
 800e22c:	1c59      	adds	r1, r3, #1
 800e22e:	b2c8      	uxtb	r0, r1
 800e230:	4930      	ldr	r1, [pc, #192]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800e232:	7288      	strb	r0, [r1, #10]
 800e234:	4413      	add	r3, r2
 800e236:	2200      	movs	r2, #0
 800e238:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800e23a:	4b2e      	ldr	r3, [pc, #184]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800e23c:	68da      	ldr	r2, [r3, #12]
 800e23e:	4b2d      	ldr	r3, [pc, #180]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800e240:	7a9b      	ldrb	r3, [r3, #10]
 800e242:	1c59      	adds	r1, r3, #1
 800e244:	b2c8      	uxtb	r0, r1
 800e246:	492b      	ldr	r1, [pc, #172]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800e248:	7288      	strb	r0, [r1, #10]
 800e24a:	4413      	add	r3, r2
 800e24c:	2206      	movs	r2, #6
 800e24e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800e250:	4b28      	ldr	r3, [pc, #160]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800e252:	68da      	ldr	r2, [r3, #12]
 800e254:	4b27      	ldr	r3, [pc, #156]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800e256:	7a9b      	ldrb	r3, [r3, #10]
 800e258:	1c59      	adds	r1, r3, #1
 800e25a:	b2c8      	uxtb	r0, r1
 800e25c:	4925      	ldr	r1, [pc, #148]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800e25e:	7288      	strb	r0, [r1, #10]
 800e260:	4413      	add	r3, r2
 800e262:	2201      	movs	r2, #1
 800e264:	701a      	strb	r2, [r3, #0]
        break;
 800e266:	e251      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800e268:	4b22      	ldr	r3, [pc, #136]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800e26a:	2201      	movs	r2, #1
 800e26c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800e270:	e24c      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800e272:	4b21      	ldr	r3, [pc, #132]	@ (800e2f8 <LmhpComplianceOnMcpsIndication+0x34c>)
 800e274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e276:	2101      	movs	r1, #1
 800e278:	2002      	movs	r0, #2
 800e27a:	4798      	blx	r3
        break;
 800e27c:	e246      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	689a      	ldr	r2, [r3, #8]
 800e282:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e286:	1c59      	adds	r1, r3, #1
 800e288:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e28c:	4413      	add	r3, r2
 800e28e:	781a      	ldrb	r2, [r3, #0]
 800e290:	4b18      	ldr	r3, [pc, #96]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800e292:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800e296:	4b17      	ldr	r3, [pc, #92]	@ (800e2f4 <LmhpComplianceOnMcpsIndication+0x348>)
 800e298:	2201      	movs	r2, #1
 800e29a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        break;
 800e29e:	e235      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800e2a0:	2304      	movs	r3, #4
 800e2a2:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	689a      	ldr	r2, [r3, #8]
 800e2a8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e2ac:	1c59      	adds	r1, r3, #1
 800e2ae:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e2b2:	4413      	add	r3, r2
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	bf14      	ite	ne
 800e2ba:	2301      	movne	r3, #1
 800e2bc:	2300      	moveq	r3, #0
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800e2c2:	f107 030c 	add.w	r3, r7, #12
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f004 fa14 	bl	80126f4 <LoRaMacMibSetRequestConfirm>
        break;
 800e2cc:	e21e      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	689a      	ldr	r2, [r3, #8]
 800e2d2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e2d6:	1c59      	adds	r1, r3, #1
 800e2d8:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e2dc:	4413      	add	r3, r2
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	bf14      	ite	ne
 800e2e4:	2301      	movne	r3, #1
 800e2e6:	2300      	moveq	r3, #0
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f005 f830 	bl	8013350 <LoRaMacTestSetDutyCycleOn>
        break;
 800e2f0:	e20c      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
 800e2f2:	bf00      	nop
 800e2f4:	200008e8 	.word	0x200008e8
 800e2f8:	200000e8 	.word	0x200000e8
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800e2fc:	4ba5      	ldr	r3, [pc, #660]	@ (800e594 <LmhpComplianceOnMcpsIndication+0x5e8>)
 800e2fe:	f107 040c 	add.w	r4, r7, #12
 800e302:	461d      	mov	r5, r3
 800e304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e30a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e30c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e310:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	689a      	ldr	r2, [r3, #8]
 800e318:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e31c:	1c59      	adds	r1, r3, #1
 800e31e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e322:	4413      	add	r3, r2
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800e32a:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800e32e:	2b0a      	cmp	r3, #10
 800e330:	f200 81e5 	bhi.w	800e6fe <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800e334:	4b98      	ldr	r3, [pc, #608]	@ (800e598 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	f000 81df 	beq.w	800e6fe <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800e340:	4b95      	ldr	r3, [pc, #596]	@ (800e598 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	685a      	ldr	r2, [r3, #4]
 800e346:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	3390      	adds	r3, #144	@ 0x90
 800e34e:	443b      	add	r3, r7
 800e350:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800e354:	4618      	mov	r0, r3
 800e356:	4790      	blx	r2
            }
        }
        break;
 800e358:	e1d1      	b.n	800e6fe <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	689a      	ldr	r2, [r3, #8]
 800e35e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e362:	1c59      	adds	r1, r3, #1
 800e364:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e368:	4413      	add	r3, r2
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800e370:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800e374:	2b01      	cmp	r3, #1
 800e376:	d004      	beq.n	800e382 <LmhpComplianceOnMcpsIndication+0x3d6>
 800e378:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	f040 81c0 	bne.w	800e702 <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800e382:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800e386:	2b01      	cmp	r3, #1
 800e388:	bf14      	ite	ne
 800e38a:	2301      	movne	r3, #1
 800e38c:	2300      	moveq	r3, #0
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	461a      	mov	r2, r3
 800e392:	4b82      	ldr	r3, [pc, #520]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e394:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800e396:	4b80      	ldr	r3, [pc, #512]	@ (800e598 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	689b      	ldr	r3, [r3, #8]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	f000 81b0 	beq.w	800e702 <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800e3a2:	4b7d      	ldr	r3, [pc, #500]	@ (800e598 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	689b      	ldr	r3, [r3, #8]
 800e3a8:	4a7c      	ldr	r2, [pc, #496]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e3aa:	7a12      	ldrb	r2, [r2, #8]
 800e3ac:	4610      	mov	r0, r2
 800e3ae:	4798      	blx	r3
            }
        }
        break;
 800e3b0:	e1a7      	b.n	800e702 <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800e3b2:	4b7a      	ldr	r3, [pc, #488]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e3b4:	68da      	ldr	r2, [r3, #12]
 800e3b6:	4b79      	ldr	r3, [pc, #484]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e3b8:	7a9b      	ldrb	r3, [r3, #10]
 800e3ba:	1c59      	adds	r1, r3, #1
 800e3bc:	b2c8      	uxtb	r0, r1
 800e3be:	4977      	ldr	r1, [pc, #476]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e3c0:	7288      	strb	r0, [r1, #10]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	2208      	movs	r2, #8
 800e3c6:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800e3ce:	e019      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	689a      	ldr	r2, [r3, #8]
 800e3d4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e3d8:	1c59      	adds	r1, r3, #1
 800e3da:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e3de:	4413      	add	r3, r2
 800e3e0:	781a      	ldrb	r2, [r3, #0]
 800e3e2:	4b6e      	ldr	r3, [pc, #440]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e3e4:	68d9      	ldr	r1, [r3, #12]
 800e3e6:	4b6d      	ldr	r3, [pc, #436]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e3e8:	7a9b      	ldrb	r3, [r3, #10]
 800e3ea:	1c58      	adds	r0, r3, #1
 800e3ec:	b2c4      	uxtb	r4, r0
 800e3ee:	486b      	ldr	r0, [pc, #428]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e3f0:	7284      	strb	r4, [r0, #10]
 800e3f2:	440b      	add	r3, r1
 800e3f4:	3201      	adds	r2, #1
 800e3f6:	b2d2      	uxtb	r2, r2
 800e3f8:	701a      	strb	r2, [r3, #0]
             i++ )
 800e3fa:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800e3fe:	3301      	adds	r3, #1
 800e400:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800e404:	4b65      	ldr	r3, [pc, #404]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e406:	7a5a      	ldrb	r2, [r3, #9]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	7b1b      	ldrb	r3, [r3, #12]
 800e40c:	4293      	cmp	r3, r2
 800e40e:	bf28      	it	cs
 800e410:	4613      	movcs	r3, r2
 800e412:	b2db      	uxtb	r3, r3
 800e414:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800e418:	429a      	cmp	r2, r3
 800e41a:	d3d9      	bcc.n	800e3d0 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800e41c:	e176      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800e41e:	4b5f      	ldr	r3, [pc, #380]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e420:	68da      	ldr	r2, [r3, #12]
 800e422:	4b5e      	ldr	r3, [pc, #376]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e424:	7a9b      	ldrb	r3, [r3, #10]
 800e426:	1c59      	adds	r1, r3, #1
 800e428:	b2c8      	uxtb	r0, r1
 800e42a:	495c      	ldr	r1, [pc, #368]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e42c:	7288      	strb	r0, [r1, #10]
 800e42e:	4413      	add	r3, r2
 800e430:	2209      	movs	r2, #9
 800e432:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800e434:	4b59      	ldr	r3, [pc, #356]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e436:	8a18      	ldrh	r0, [r3, #16]
 800e438:	4b58      	ldr	r3, [pc, #352]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e43a:	68da      	ldr	r2, [r3, #12]
 800e43c:	4b57      	ldr	r3, [pc, #348]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e43e:	7a9b      	ldrb	r3, [r3, #10]
 800e440:	1c59      	adds	r1, r3, #1
 800e442:	b2cc      	uxtb	r4, r1
 800e444:	4955      	ldr	r1, [pc, #340]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e446:	728c      	strb	r4, [r1, #10]
 800e448:	4413      	add	r3, r2
 800e44a:	b2c2      	uxtb	r2, r0
 800e44c:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800e44e:	4b53      	ldr	r3, [pc, #332]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e450:	8a1b      	ldrh	r3, [r3, #16]
 800e452:	0a1b      	lsrs	r3, r3, #8
 800e454:	b298      	uxth	r0, r3
 800e456:	4b51      	ldr	r3, [pc, #324]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e458:	68da      	ldr	r2, [r3, #12]
 800e45a:	4b50      	ldr	r3, [pc, #320]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e45c:	7a9b      	ldrb	r3, [r3, #10]
 800e45e:	1c59      	adds	r1, r3, #1
 800e460:	b2cc      	uxtb	r4, r1
 800e462:	494e      	ldr	r1, [pc, #312]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e464:	728c      	strb	r4, [r1, #10]
 800e466:	4413      	add	r3, r2
 800e468:	b2c2      	uxtb	r2, r0
 800e46a:	701a      	strb	r2, [r3, #0]
        break;
 800e46c:	e14e      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800e46e:	4b4b      	ldr	r3, [pc, #300]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e470:	2200      	movs	r2, #0
 800e472:	821a      	strh	r2, [r3, #16]
        break;
 800e474:	e14a      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800e476:	2304      	movs	r3, #4
 800e478:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800e47c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800e480:	4618      	mov	r0, r3
 800e482:	f004 fca7 	bl	8012dd4 <LoRaMacMlmeRequest>
        break;
 800e486:	e141      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800e488:	4b45      	ldr	r3, [pc, #276]	@ (800e5a0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800e48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e48c:	4798      	blx	r3
        break;
 800e48e:	e13d      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	689a      	ldr	r2, [r3, #8]
 800e494:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e498:	1c59      	adds	r1, r3, #1
 800e49a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e49e:	4413      	add	r3, r2
 800e4a0:	781a      	ldrb	r2, [r3, #0]
 800e4a2:	4b3e      	ldr	r3, [pc, #248]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e4a4:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800e4a6:	4b3c      	ldr	r3, [pc, #240]	@ (800e598 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	f000 812a 	beq.w	800e706 <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800e4b2:	4b39      	ldr	r3, [pc, #228]	@ (800e598 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	4a38      	ldr	r2, [pc, #224]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e4ba:	7d52      	ldrb	r2, [r2, #21]
 800e4bc:	4610      	mov	r0, r2
 800e4be:	4798      	blx	r3
        }
        break;
 800e4c0:	e121      	b.n	800e706 <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	7b1b      	ldrb	r3, [r3, #12]
 800e4c6:	2b07      	cmp	r3, #7
 800e4c8:	f040 811f 	bne.w	800e70a <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800e4cc:	2305      	movs	r3, #5
 800e4ce:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	689a      	ldr	r2, [r3, #8]
 800e4d6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e4da:	4413      	add	r3, r2
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	b21a      	sxth	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6899      	ldr	r1, [r3, #8]
 800e4e4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	440b      	add	r3, r1
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	021b      	lsls	r3, r3, #8
 800e4f0:	b21b      	sxth	r3, r3
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	b21b      	sxth	r3, r3
 800e4f6:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800e4f8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            cmdIndex += 2;
 800e4fc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e500:	3302      	adds	r3, #2
 800e502:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	689a      	ldr	r2, [r3, #8]
 800e50a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e50e:	4413      	add	r3, r2
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	4619      	mov	r1, r3
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	689a      	ldr	r2, [r3, #8]
 800e518:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e51c:	3301      	adds	r3, #1
 800e51e:	4413      	add	r3, r2
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	021b      	lsls	r3, r3, #8
 800e524:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6899      	ldr	r1, [r3, #8]
 800e52c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e530:	3302      	adds	r3, #2
 800e532:	440b      	add	r3, r1
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e538:	4313      	orrs	r3, r2
 800e53a:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e53c:	2364      	movs	r3, #100	@ 0x64
 800e53e:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800e542:	64bb      	str	r3, [r7, #72]	@ 0x48
                100;
            cmdIndex += 3;
 800e544:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e548:	3303      	adds	r3, #3
 800e54a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	689a      	ldr	r2, [r3, #8]
 800e552:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e556:	1c59      	adds	r1, r3, #1
 800e558:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800e55c:	4413      	add	r3, r2
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	b25b      	sxtb	r3, r3
 800e562:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800e566:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800e56a:	4618      	mov	r0, r3
 800e56c:	f004 fc32 	bl	8012dd4 <LoRaMacMlmeRequest>
        }
        break;
 800e570:	e0cb      	b.n	800e70a <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800e572:	2339      	movs	r3, #57	@ 0x39
 800e574:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
        mibReq.Param.IsCertPortOn = false;
 800e578:	2300      	movs	r3, #0
 800e57a:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e57e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800e582:	4618      	mov	r0, r3
 800e584:	f004 f8b6 	bl	80126f4 <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800e588:	4b04      	ldr	r3, [pc, #16]	@ (800e59c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e58a:	2201      	movs	r2, #1
 800e58c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800e590:	e0bc      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
 800e592:	bf00      	nop
 800e594:	0801f7d8 	.word	0x0801f7d8
 800e598:	20000920 	.word	0x20000920
 800e59c:	200008e8 	.word	0x200008e8
 800e5a0:	200000e8 	.word	0x200000e8
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800e5a4:	232a      	movs	r3, #42	@ 0x2a
 800e5a6:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800e5a8:	f107 030c 	add.w	r3, r7, #12
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f003 fefb 	bl	80123a8 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	63bb      	str	r3, [r7, #56]	@ 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800e5ba:	4b62      	ldr	r3, [pc, #392]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e5bc:	68da      	ldr	r2, [r3, #12]
 800e5be:	4b61      	ldr	r3, [pc, #388]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e5c0:	7a9b      	ldrb	r3, [r3, #10]
 800e5c2:	1c59      	adds	r1, r3, #1
 800e5c4:	b2c8      	uxtb	r0, r1
 800e5c6:	495f      	ldr	r1, [pc, #380]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e5c8:	7288      	strb	r0, [r1, #10]
 800e5ca:	4413      	add	r3, r2
 800e5cc:	227f      	movs	r2, #127	@ 0x7f
 800e5ce:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800e5d0:	4b5d      	ldr	r3, [pc, #372]	@ (800e748 <LmhpComplianceOnMcpsIndication+0x79c>)
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	4b5b      	ldr	r3, [pc, #364]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e5d6:	68d9      	ldr	r1, [r3, #12]
 800e5d8:	4b5a      	ldr	r3, [pc, #360]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e5da:	7a9b      	ldrb	r3, [r3, #10]
 800e5dc:	1c58      	adds	r0, r3, #1
 800e5de:	b2c4      	uxtb	r4, r0
 800e5e0:	4858      	ldr	r0, [pc, #352]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e5e2:	7284      	strb	r4, [r0, #10]
 800e5e4:	440b      	add	r3, r1
 800e5e6:	78d2      	ldrb	r2, [r2, #3]
 800e5e8:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800e5ea:	4b57      	ldr	r3, [pc, #348]	@ (800e748 <LmhpComplianceOnMcpsIndication+0x79c>)
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	4b55      	ldr	r3, [pc, #340]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e5f0:	68d9      	ldr	r1, [r3, #12]
 800e5f2:	4b54      	ldr	r3, [pc, #336]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e5f4:	7a9b      	ldrb	r3, [r3, #10]
 800e5f6:	1c58      	adds	r0, r3, #1
 800e5f8:	b2c4      	uxtb	r4, r0
 800e5fa:	4852      	ldr	r0, [pc, #328]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e5fc:	7284      	strb	r4, [r0, #10]
 800e5fe:	440b      	add	r3, r1
 800e600:	7892      	ldrb	r2, [r2, #2]
 800e602:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800e604:	4b50      	ldr	r3, [pc, #320]	@ (800e748 <LmhpComplianceOnMcpsIndication+0x79c>)
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	4b4e      	ldr	r3, [pc, #312]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e60a:	68d9      	ldr	r1, [r3, #12]
 800e60c:	4b4d      	ldr	r3, [pc, #308]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e60e:	7a9b      	ldrb	r3, [r3, #10]
 800e610:	1c58      	adds	r0, r3, #1
 800e612:	b2c4      	uxtb	r4, r0
 800e614:	484b      	ldr	r0, [pc, #300]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e616:	7284      	strb	r4, [r0, #10]
 800e618:	440b      	add	r3, r1
 800e61a:	7852      	ldrb	r2, [r2, #1]
 800e61c:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800e61e:	4b4a      	ldr	r3, [pc, #296]	@ (800e748 <LmhpComplianceOnMcpsIndication+0x79c>)
 800e620:	681a      	ldr	r2, [r3, #0]
 800e622:	4b48      	ldr	r3, [pc, #288]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e624:	68d9      	ldr	r1, [r3, #12]
 800e626:	4b47      	ldr	r3, [pc, #284]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e628:	7a9b      	ldrb	r3, [r3, #10]
 800e62a:	1c58      	adds	r0, r3, #1
 800e62c:	b2c4      	uxtb	r4, r0
 800e62e:	4845      	ldr	r0, [pc, #276]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e630:	7284      	strb	r4, [r0, #10]
 800e632:	440b      	add	r3, r1
 800e634:	7812      	ldrb	r2, [r2, #0]
 800e636:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800e638:	4b42      	ldr	r3, [pc, #264]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e63a:	68da      	ldr	r2, [r3, #12]
 800e63c:	4b41      	ldr	r3, [pc, #260]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e63e:	7a9b      	ldrb	r3, [r3, #10]
 800e640:	1c59      	adds	r1, r3, #1
 800e642:	b2c8      	uxtb	r0, r1
 800e644:	493f      	ldr	r1, [pc, #252]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e646:	7288      	strb	r0, [r1, #10]
 800e648:	4413      	add	r3, r2
 800e64a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e64e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800e650:	4b3c      	ldr	r3, [pc, #240]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e652:	68da      	ldr	r2, [r3, #12]
 800e654:	4b3b      	ldr	r3, [pc, #236]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e656:	7a9b      	ldrb	r3, [r3, #10]
 800e658:	1c59      	adds	r1, r3, #1
 800e65a:	b2c8      	uxtb	r0, r1
 800e65c:	4939      	ldr	r1, [pc, #228]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e65e:	7288      	strb	r0, [r1, #10]
 800e660:	4413      	add	r3, r2
 800e662:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800e666:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800e668:	4b36      	ldr	r3, [pc, #216]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e66a:	68da      	ldr	r2, [r3, #12]
 800e66c:	4b35      	ldr	r3, [pc, #212]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e66e:	7a9b      	ldrb	r3, [r3, #10]
 800e670:	1c59      	adds	r1, r3, #1
 800e672:	b2c8      	uxtb	r0, r1
 800e674:	4933      	ldr	r1, [pc, #204]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e676:	7288      	strb	r0, [r1, #10]
 800e678:	4413      	add	r3, r2
 800e67a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800e67e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800e680:	4b30      	ldr	r3, [pc, #192]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e682:	68da      	ldr	r2, [r3, #12]
 800e684:	4b2f      	ldr	r3, [pc, #188]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e686:	7a9b      	ldrb	r3, [r3, #10]
 800e688:	1c59      	adds	r1, r3, #1
 800e68a:	b2c8      	uxtb	r0, r1
 800e68c:	492d      	ldr	r1, [pc, #180]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e68e:	7288      	strb	r0, [r1, #10]
 800e690:	4413      	add	r3, r2
 800e692:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800e696:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800e698:	4b2a      	ldr	r3, [pc, #168]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e69a:	68da      	ldr	r2, [r3, #12]
 800e69c:	4b29      	ldr	r3, [pc, #164]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e69e:	7a9b      	ldrb	r3, [r3, #10]
 800e6a0:	1c59      	adds	r1, r3, #1
 800e6a2:	b2c8      	uxtb	r0, r1
 800e6a4:	4927      	ldr	r1, [pc, #156]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e6a6:	7288      	strb	r0, [r1, #10]
 800e6a8:	4413      	add	r3, r2
 800e6aa:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800e6ae:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800e6b0:	4b24      	ldr	r3, [pc, #144]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e6b2:	68da      	ldr	r2, [r3, #12]
 800e6b4:	4b23      	ldr	r3, [pc, #140]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e6b6:	7a9b      	ldrb	r3, [r3, #10]
 800e6b8:	1c59      	adds	r1, r3, #1
 800e6ba:	b2c8      	uxtb	r0, r1
 800e6bc:	4921      	ldr	r1, [pc, #132]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e6be:	7288      	strb	r0, [r1, #10]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800e6c6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800e6c8:	4b1e      	ldr	r3, [pc, #120]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e6ca:	68da      	ldr	r2, [r3, #12]
 800e6cc:	4b1d      	ldr	r3, [pc, #116]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e6ce:	7a9b      	ldrb	r3, [r3, #10]
 800e6d0:	1c59      	adds	r1, r3, #1
 800e6d2:	b2c8      	uxtb	r0, r1
 800e6d4:	491b      	ldr	r1, [pc, #108]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e6d6:	7288      	strb	r0, [r1, #10]
 800e6d8:	4413      	add	r3, r2
 800e6da:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800e6de:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800e6e0:	4b18      	ldr	r3, [pc, #96]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e6e2:	68da      	ldr	r2, [r3, #12]
 800e6e4:	4b17      	ldr	r3, [pc, #92]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e6e6:	7a9b      	ldrb	r3, [r3, #10]
 800e6e8:	1c59      	adds	r1, r3, #1
 800e6ea:	b2c8      	uxtb	r0, r1
 800e6ec:	4915      	ldr	r1, [pc, #84]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e6ee:	7288      	strb	r0, [r1, #10]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e6f6:	701a      	strb	r2, [r3, #0]
        break;
 800e6f8:	e008      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800e6fa:	bf00      	nop
 800e6fc:	e006      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e6fe:	bf00      	nop
 800e700:	e004      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e702:	bf00      	nop
 800e704:	e002      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e706:	bf00      	nop
 800e708:	e000      	b.n	800e70c <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e70a:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800e70c:	4b0d      	ldr	r3, [pc, #52]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e70e:	7a9b      	ldrb	r3, [r3, #10]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d008      	beq.n	800e726 <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800e714:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e718:	480c      	ldr	r0, [pc, #48]	@ (800e74c <LmhpComplianceOnMcpsIndication+0x7a0>)
 800e71a:	f00d fafd 	bl	801bd18 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800e71e:	480b      	ldr	r0, [pc, #44]	@ (800e74c <LmhpComplianceOnMcpsIndication+0x7a0>)
 800e720:	f00d fa1c 	bl	801bb5c <UTIL_TIMER_Start>
 800e724:	e00b      	b.n	800e73e <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800e726:	4809      	ldr	r0, [pc, #36]	@ (800e74c <LmhpComplianceOnMcpsIndication+0x7a0>)
 800e728:	f00d fa86 	bl	801bc38 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800e72c:	4b05      	ldr	r3, [pc, #20]	@ (800e744 <LmhpComplianceOnMcpsIndication+0x798>)
 800e72e:	2200      	movs	r2, #0
 800e730:	705a      	strb	r2, [r3, #1]
 800e732:	e004      	b.n	800e73e <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800e734:	bf00      	nop
 800e736:	e002      	b.n	800e73e <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800e738:	bf00      	nop
 800e73a:	e000      	b.n	800e73e <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800e73c:	bf00      	nop
    }
}
 800e73e:	3790      	adds	r7, #144	@ 0x90
 800e740:	46bd      	mov	sp, r7
 800e742:	bdb0      	pop	{r4, r5, r7, pc}
 800e744:	200008e8 	.word	0x200008e8
 800e748:	20000920 	.word	0x20000920
 800e74c:	20000924 	.word	0x20000924

0800e750 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800e758:	bf00      	nop
    }
}
 800e75a:	bf00      	nop
 800e75c:	370c      	adds	r7, #12
 800e75e:	46bd      	mov	sp, r7
 800e760:	bc80      	pop	{r7}
 800e762:	4770      	bx	lr

0800e764 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800e764:	b480      	push	{r7}
 800e766:	b083      	sub	sp, #12
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e76c:	4b05      	ldr	r3, [pc, #20]	@ (800e784 <LmhpComplianceOnMlmeIndication+0x20>)
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	f083 0301 	eor.w	r3, r3, #1
 800e774:	b2db      	uxtb	r3, r3
 800e776:	2b00      	cmp	r3, #0
    {
        return;
 800e778:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bc80      	pop	{r7}
 800e780:	4770      	bx	lr
 800e782:	bf00      	nop
 800e784:	200008e8 	.word	0x200008e8

0800e788 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800e790:	4b04      	ldr	r3, [pc, #16]	@ (800e7a4 <OnProcessTimer+0x1c>)
 800e792:	2201      	movs	r2, #1
 800e794:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800e796:	4b04      	ldr	r3, [pc, #16]	@ (800e7a8 <OnProcessTimer+0x20>)
 800e798:	695b      	ldr	r3, [r3, #20]
 800e79a:	4798      	blx	r3
}
 800e79c:	bf00      	nop
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	200008e8 	.word	0x200008e8
 800e7a8:	200000e8 	.word	0x200000e8

0800e7ac <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800e7ac:	b590      	push	{r4, r7, lr}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e7b2:	f00d fb5b 	bl	801be6c <UTIL_TIMER_GetCurrentTime>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	4a16      	ldr	r2, [pc, #88]	@ (800e814 <OnRadioTxDone+0x68>)
 800e7ba:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e7bc:	4c16      	ldr	r4, [pc, #88]	@ (800e818 <OnRadioTxDone+0x6c>)
 800e7be:	463b      	mov	r3, r7
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f00c fcd3 	bl	801b16c <SysTimeGet>
 800e7c6:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800e7ca:	463a      	mov	r2, r7
 800e7cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e7d0:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e7d4:	4a11      	ldr	r2, [pc, #68]	@ (800e81c <OnRadioTxDone+0x70>)
 800e7d6:	7813      	ldrb	r3, [r2, #0]
 800e7d8:	f043 0320 	orr.w	r3, r3, #32
 800e7dc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e7de:	4b0e      	ldr	r3, [pc, #56]	@ (800e818 <OnRadioTxDone+0x6c>)
 800e7e0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d00a      	beq.n	800e7fe <OnRadioTxDone+0x52>
 800e7e8:	4b0b      	ldr	r3, [pc, #44]	@ (800e818 <OnRadioTxDone+0x6c>)
 800e7ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e7ee:	691b      	ldr	r3, [r3, #16]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d004      	beq.n	800e7fe <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e7f4:	4b08      	ldr	r3, [pc, #32]	@ (800e818 <OnRadioTxDone+0x6c>)
 800e7f6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e7fa:	691b      	ldr	r3, [r3, #16]
 800e7fc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800e7fe:	4b08      	ldr	r3, [pc, #32]	@ (800e820 <OnRadioTxDone+0x74>)
 800e800:	2201      	movs	r2, #1
 800e802:	2100      	movs	r1, #0
 800e804:	2002      	movs	r0, #2
 800e806:	f00d fc21 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
}
 800e80a:	bf00      	nop
 800e80c:	370c      	adds	r7, #12
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd90      	pop	{r4, r7, pc}
 800e812:	bf00      	nop
 800e814:	200019e8 	.word	0x200019e8
 800e818:	2000093c 	.word	0x2000093c
 800e81c:	200019e4 	.word	0x200019e4
 800e820:	0801f804 	.word	0x0801f804

0800e824 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	4608      	mov	r0, r1
 800e82e:	4611      	mov	r1, r2
 800e830:	461a      	mov	r2, r3
 800e832:	4603      	mov	r3, r0
 800e834:	817b      	strh	r3, [r7, #10]
 800e836:	460b      	mov	r3, r1
 800e838:	813b      	strh	r3, [r7, #8]
 800e83a:	4613      	mov	r3, r2
 800e83c:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e83e:	f00d fb15 	bl	801be6c <UTIL_TIMER_GetCurrentTime>
 800e842:	4603      	mov	r3, r0
 800e844:	4a18      	ldr	r2, [pc, #96]	@ (800e8a8 <OnRadioRxDone+0x84>)
 800e846:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800e848:	4a17      	ldr	r2, [pc, #92]	@ (800e8a8 <OnRadioRxDone+0x84>)
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800e84e:	4a16      	ldr	r2, [pc, #88]	@ (800e8a8 <OnRadioRxDone+0x84>)
 800e850:	897b      	ldrh	r3, [r7, #10]
 800e852:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800e854:	4a14      	ldr	r2, [pc, #80]	@ (800e8a8 <OnRadioRxDone+0x84>)
 800e856:	893b      	ldrh	r3, [r7, #8]
 800e858:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800e85a:	4a13      	ldr	r2, [pc, #76]	@ (800e8a8 <OnRadioRxDone+0x84>)
 800e85c:	79fb      	ldrb	r3, [r7, #7]
 800e85e:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e860:	4a12      	ldr	r2, [pc, #72]	@ (800e8ac <OnRadioRxDone+0x88>)
 800e862:	7813      	ldrb	r3, [r2, #0]
 800e864:	f043 0310 	orr.w	r3, r3, #16
 800e868:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800e86a:	4a10      	ldr	r2, [pc, #64]	@ (800e8ac <OnRadioRxDone+0x88>)
 800e86c:	7813      	ldrb	r3, [r2, #0]
 800e86e:	f043 0301 	orr.w	r3, r3, #1
 800e872:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e874:	4b0e      	ldr	r3, [pc, #56]	@ (800e8b0 <OnRadioRxDone+0x8c>)
 800e876:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d00a      	beq.n	800e894 <OnRadioRxDone+0x70>
 800e87e:	4b0c      	ldr	r3, [pc, #48]	@ (800e8b0 <OnRadioRxDone+0x8c>)
 800e880:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e884:	691b      	ldr	r3, [r3, #16]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d004      	beq.n	800e894 <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e88a:	4b09      	ldr	r3, [pc, #36]	@ (800e8b0 <OnRadioRxDone+0x8c>)
 800e88c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e890:	691b      	ldr	r3, [r3, #16]
 800e892:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800e894:	4b07      	ldr	r3, [pc, #28]	@ (800e8b4 <OnRadioRxDone+0x90>)
 800e896:	2201      	movs	r2, #1
 800e898:	2100      	movs	r1, #0
 800e89a:	2002      	movs	r0, #2
 800e89c:	f00d fbd6 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
}
 800e8a0:	bf00      	nop
 800e8a2:	3710      	adds	r7, #16
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	200019ec 	.word	0x200019ec
 800e8ac:	200019e4 	.word	0x200019e4
 800e8b0:	2000093c 	.word	0x2000093c
 800e8b4:	0801f814 	.word	0x0801f814

0800e8b8 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e8bc:	4a0e      	ldr	r2, [pc, #56]	@ (800e8f8 <OnRadioTxTimeout+0x40>)
 800e8be:	7813      	ldrb	r3, [r2, #0]
 800e8c0:	f043 0308 	orr.w	r3, r3, #8
 800e8c4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e8c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e8fc <OnRadioTxTimeout+0x44>)
 800e8c8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00a      	beq.n	800e8e6 <OnRadioTxTimeout+0x2e>
 800e8d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e8fc <OnRadioTxTimeout+0x44>)
 800e8d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e8d6:	691b      	ldr	r3, [r3, #16]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d004      	beq.n	800e8e6 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e8dc:	4b07      	ldr	r3, [pc, #28]	@ (800e8fc <OnRadioTxTimeout+0x44>)
 800e8de:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e8e2:	691b      	ldr	r3, [r3, #16]
 800e8e4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800e8e6:	4b06      	ldr	r3, [pc, #24]	@ (800e900 <OnRadioTxTimeout+0x48>)
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	2002      	movs	r0, #2
 800e8ee:	f00d fbad 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
}
 800e8f2:	bf00      	nop
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	200019e4 	.word	0x200019e4
 800e8fc:	2000093c 	.word	0x2000093c
 800e900:	0801f824 	.word	0x0801f824

0800e904 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e904:	b580      	push	{r7, lr}
 800e906:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e908:	4a0b      	ldr	r2, [pc, #44]	@ (800e938 <OnRadioRxError+0x34>)
 800e90a:	7813      	ldrb	r3, [r2, #0]
 800e90c:	f043 0304 	orr.w	r3, r3, #4
 800e910:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e912:	4b0a      	ldr	r3, [pc, #40]	@ (800e93c <OnRadioRxError+0x38>)
 800e914:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d00a      	beq.n	800e932 <OnRadioRxError+0x2e>
 800e91c:	4b07      	ldr	r3, [pc, #28]	@ (800e93c <OnRadioRxError+0x38>)
 800e91e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d004      	beq.n	800e932 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e928:	4b04      	ldr	r3, [pc, #16]	@ (800e93c <OnRadioRxError+0x38>)
 800e92a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	4798      	blx	r3
    }
}
 800e932:	bf00      	nop
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	200019e4 	.word	0x200019e4
 800e93c:	2000093c 	.word	0x2000093c

0800e940 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e944:	4a0e      	ldr	r2, [pc, #56]	@ (800e980 <OnRadioRxTimeout+0x40>)
 800e946:	7813      	ldrb	r3, [r2, #0]
 800e948:	f043 0302 	orr.w	r3, r3, #2
 800e94c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e94e:	4b0d      	ldr	r3, [pc, #52]	@ (800e984 <OnRadioRxTimeout+0x44>)
 800e950:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e954:	2b00      	cmp	r3, #0
 800e956:	d00a      	beq.n	800e96e <OnRadioRxTimeout+0x2e>
 800e958:	4b0a      	ldr	r3, [pc, #40]	@ (800e984 <OnRadioRxTimeout+0x44>)
 800e95a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e95e:	691b      	ldr	r3, [r3, #16]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d004      	beq.n	800e96e <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e964:	4b07      	ldr	r3, [pc, #28]	@ (800e984 <OnRadioRxTimeout+0x44>)
 800e966:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e96a:	691b      	ldr	r3, [r3, #16]
 800e96c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800e96e:	4b06      	ldr	r3, [pc, #24]	@ (800e988 <OnRadioRxTimeout+0x48>)
 800e970:	2201      	movs	r2, #1
 800e972:	2100      	movs	r1, #0
 800e974:	2002      	movs	r0, #2
 800e976:	f00d fb69 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
}
 800e97a:	bf00      	nop
 800e97c:	bd80      	pop	{r7, pc}
 800e97e:	bf00      	nop
 800e980:	200019e4 	.word	0x200019e4
 800e984:	2000093c 	.word	0x2000093c
 800e988:	0801f834 	.word	0x0801f834

0800e98c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e98c:	b480      	push	{r7}
 800e98e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e990:	4b08      	ldr	r3, [pc, #32]	@ (800e9b4 <UpdateRxSlotIdleState+0x28>)
 800e992:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e996:	2b02      	cmp	r3, #2
 800e998:	d004      	beq.n	800e9a4 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e99a:	4b07      	ldr	r3, [pc, #28]	@ (800e9b8 <UpdateRxSlotIdleState+0x2c>)
 800e99c:	2206      	movs	r2, #6
 800e99e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e9a2:	e003      	b.n	800e9ac <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e9a4:	4b04      	ldr	r3, [pc, #16]	@ (800e9b8 <UpdateRxSlotIdleState+0x2c>)
 800e9a6:	2202      	movs	r2, #2
 800e9a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
}
 800e9ac:	bf00      	nop
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bc80      	pop	{r7}
 800e9b2:	4770      	bx	lr
 800e9b4:	20000e5c 	.word	0x20000e5c
 800e9b8:	2000093c 	.word	0x2000093c

0800e9bc <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b08e      	sub	sp, #56	@ 0x38
 800e9c0:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e9c2:	4b3e      	ldr	r3, [pc, #248]	@ (800eabc <ProcessRadioTxDone+0x100>)
 800e9c4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e9c8:	2b02      	cmp	r3, #2
 800e9ca:	d002      	beq.n	800e9d2 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800e9cc:	4b3c      	ldr	r3, [pc, #240]	@ (800eac0 <ProcessRadioTxDone+0x104>)
 800e9ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9d0:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800e9d2:	4b3c      	ldr	r3, [pc, #240]	@ (800eac4 <ProcessRadioTxDone+0x108>)
 800e9d4:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800e9d8:	4619      	mov	r1, r3
 800e9da:	483b      	ldr	r0, [pc, #236]	@ (800eac8 <ProcessRadioTxDone+0x10c>)
 800e9dc:	f00d f99c 	bl	801bd18 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e9e0:	4839      	ldr	r0, [pc, #228]	@ (800eac8 <ProcessRadioTxDone+0x10c>)
 800e9e2:	f00d f8bb 	bl	801bb5c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800e9e6:	4b37      	ldr	r3, [pc, #220]	@ (800eac4 <ProcessRadioTxDone+0x108>)
 800e9e8:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	4837      	ldr	r0, [pc, #220]	@ (800eacc <ProcessRadioTxDone+0x110>)
 800e9f0:	f00d f992 	bl	801bd18 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e9f4:	4835      	ldr	r0, [pc, #212]	@ (800eacc <ProcessRadioTxDone+0x110>)
 800e9f6:	f00d f8b1 	bl	801bb5c <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800e9fa:	4b32      	ldr	r3, [pc, #200]	@ (800eac4 <ProcessRadioTxDone+0x108>)
 800e9fc:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d01a      	beq.n	800ea3a <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800ea04:	2315      	movs	r3, #21
 800ea06:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ea0a:	4b2c      	ldr	r3, [pc, #176]	@ (800eabc <ProcessRadioTxDone+0x100>)
 800ea0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ea10:	f107 0220 	add.w	r2, r7, #32
 800ea14:	4611      	mov	r1, r2
 800ea16:	4618      	mov	r0, r3
 800ea18:	f006 fd28 	bl	801546c <RegionGetPhyParam>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800ea20:	4b28      	ldr	r3, [pc, #160]	@ (800eac4 <ProcessRadioTxDone+0x108>)
 800ea22:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	4413      	add	r3, r2
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	4828      	ldr	r0, [pc, #160]	@ (800ead0 <ProcessRadioTxDone+0x114>)
 800ea2e:	f00d f973 	bl	801bd18 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800ea32:	4827      	ldr	r0, [pc, #156]	@ (800ead0 <ProcessRadioTxDone+0x114>)
 800ea34:	f00d f892 	bl	801bb5c <UTIL_TIMER_Start>
 800ea38:	e003      	b.n	800ea42 <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ea3a:	4b22      	ldr	r3, [pc, #136]	@ (800eac4 <ProcessRadioTxDone+0x108>)
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800ea42:	4b24      	ldr	r3, [pc, #144]	@ (800ead4 <ProcessRadioTxDone+0x118>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4a1d      	ldr	r2, [pc, #116]	@ (800eabc <ProcessRadioTxDone+0x100>)
 800ea48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800ea4a:	4b1e      	ldr	r3, [pc, #120]	@ (800eac4 <ProcessRadioTxDone+0x108>)
 800ea4c:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800ea50:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800ea52:	4b20      	ldr	r3, [pc, #128]	@ (800ead4 <ProcessRadioTxDone+0x118>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800ea58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f00c fbbd 	bl	801b1dc <SysTimeGetMcuTime>
 800ea62:	4638      	mov	r0, r7
 800ea64:	4b15      	ldr	r3, [pc, #84]	@ (800eabc <ProcessRadioTxDone+0x100>)
 800ea66:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800ea6a:	9200      	str	r2, [sp, #0]
 800ea6c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800ea70:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800ea74:	ca06      	ldmia	r2, {r1, r2}
 800ea76:	f00c fb12 	bl	801b09e <SysTimeSub>
 800ea7a:	f107 0314 	add.w	r3, r7, #20
 800ea7e:	463a      	mov	r2, r7
 800ea80:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea84:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800ea88:	4b0e      	ldr	r3, [pc, #56]	@ (800eac4 <ProcessRadioTxDone+0x108>)
 800ea8a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800ea8e:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800ea90:	2301      	movs	r3, #1
 800ea92:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ea94:	4b09      	ldr	r3, [pc, #36]	@ (800eabc <ProcessRadioTxDone+0x100>)
 800ea96:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d101      	bne.n	800eaa2 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800eaa2:	4b06      	ldr	r3, [pc, #24]	@ (800eabc <ProcessRadioTxDone+0x100>)
 800eaa4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eaa8:	f107 0208 	add.w	r2, r7, #8
 800eaac:	4611      	mov	r1, r2
 800eaae:	4618      	mov	r0, r3
 800eab0:	f006 fcf4 	bl	801549c <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800eab4:	bf00      	nop
 800eab6:	3730      	adds	r7, #48	@ 0x30
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}
 800eabc:	20000e5c 	.word	0x20000e5c
 800eac0:	0801fedc 	.word	0x0801fedc
 800eac4:	2000093c 	.word	0x2000093c
 800eac8:	20000cbc 	.word	0x20000cbc
 800eacc:	20000cd4 	.word	0x20000cd4
 800ead0:	20000d40 	.word	0x20000d40
 800ead4:	200019e8 	.word	0x200019e8

0800ead8 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800eadc:	4b10      	ldr	r3, [pc, #64]	@ (800eb20 <PrepareRxDoneAbort+0x48>)
 800eade:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800eae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eae6:	4a0e      	ldr	r2, [pc, #56]	@ (800eb20 <PrepareRxDoneAbort+0x48>)
 800eae8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800eaec:	4b0c      	ldr	r3, [pc, #48]	@ (800eb20 <PrepareRxDoneAbort+0x48>)
 800eaee:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d002      	beq.n	800eafc <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800eaf6:	2000      	movs	r0, #0
 800eaf8:	f001 f99c 	bl	800fe34 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800eafc:	4a08      	ldr	r2, [pc, #32]	@ (800eb20 <PrepareRxDoneAbort+0x48>)
 800eafe:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eb02:	f043 0302 	orr.w	r3, r3, #2
 800eb06:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800eb0a:	4a05      	ldr	r2, [pc, #20]	@ (800eb20 <PrepareRxDoneAbort+0x48>)
 800eb0c:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eb10:	f043 0320 	orr.w	r3, r3, #32
 800eb14:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

    UpdateRxSlotIdleState( );
 800eb18:	f7ff ff38 	bl	800e98c <UpdateRxSlotIdleState>
}
 800eb1c:	bf00      	nop
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	2000093c 	.word	0x2000093c

0800eb24 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800eb24:	b590      	push	{r4, r7, lr}
 800eb26:	b0a7      	sub	sp, #156	@ 0x9c
 800eb28:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800eb2a:	2312      	movs	r3, #18
 800eb2c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800eb30:	4bbd      	ldr	r3, [pc, #756]	@ (800ee28 <ProcessRadioRxDone+0x304>)
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint16_t size = RxDoneParams.Size;
 800eb38:	4bbb      	ldr	r3, [pc, #748]	@ (800ee28 <ProcessRadioRxDone+0x304>)
 800eb3a:	891b      	ldrh	r3, [r3, #8]
 800eb3c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800eb40:	4bb9      	ldr	r3, [pc, #740]	@ (800ee28 <ProcessRadioRxDone+0x304>)
 800eb42:	895b      	ldrh	r3, [r3, #10]
 800eb44:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    int8_t snr = RxDoneParams.Snr;
 800eb48:	4bb7      	ldr	r3, [pc, #732]	@ (800ee28 <ProcessRadioRxDone+0x304>)
 800eb4a:	7b1b      	ldrb	r3, [r3, #12]
 800eb4c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    uint8_t pktHeaderLen = 0;
 800eb50:	2300      	movs	r3, #0
 800eb52:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

    uint32_t downLinkCounter = 0;
 800eb56:	2300      	movs	r3, #0
 800eb58:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800eb5a:	4bb4      	ldr	r3, [pc, #720]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800eb5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800eb60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint8_t multicast = 0;
 800eb64:	2300      	movs	r3, #0
 800eb66:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800eb70:	4aaf      	ldr	r2, [pc, #700]	@ (800ee30 <ProcessRadioRxDone+0x30c>)
 800eb72:	7813      	ldrb	r3, [r2, #0]
 800eb74:	f36f 0300 	bfc	r3, #0, #1
 800eb78:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800eb7a:	4bae      	ldr	r3, [pc, #696]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800eb82:	4aac      	ldr	r2, [pc, #688]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800eb84:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800eb88:	f8a2 3490 	strh.w	r3, [r2, #1168]	@ 0x490
    MacCtx.RxStatus.Snr = snr;
 800eb8c:	4aa9      	ldr	r2, [pc, #676]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800eb8e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eb92:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800eb96:	4ba7      	ldr	r3, [pc, #668]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800eb98:	f893 2494 	ldrb.w	r2, [r3, #1172]	@ 0x494
 800eb9c:	4ba5      	ldr	r3, [pc, #660]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800eb9e:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
    MacCtx.McpsIndication.Port = 0;
 800eba2:	4ba4      	ldr	r3, [pc, #656]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800eba4:	2200      	movs	r2, #0
 800eba6:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800ebaa:	4ba2      	ldr	r3, [pc, #648]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ebac:	2200      	movs	r2, #0
 800ebae:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800ebb2:	4ba0      	ldr	r3, [pc, #640]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800ebba:	4b9e      	ldr	r3, [pc, #632]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800ebc2:	4b9c      	ldr	r3, [pc, #624]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.RxData = false;
 800ebca:	4b9a      	ldr	r3, [pc, #616]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ebcc:	2200      	movs	r2, #0
 800ebce:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800ebd2:	4b98      	ldr	r3, [pc, #608]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800ebda:	4b96      	ldr	r3, [pc, #600]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ebdc:	2200      	movs	r2, #0
 800ebde:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ebe2:	4b94      	ldr	r3, [pc, #592]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800ebea:	4b92      	ldr	r3, [pc, #584]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ebec:	2200      	movs	r2, #0
 800ebee:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800ebf2:	4b90      	ldr	r3, [pc, #576]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800ebfa:	4b8e      	ldr	r3, [pc, #568]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800ec02:	4b8d      	ldr	r3, [pc, #564]	@ (800ee38 <ProcessRadioRxDone+0x314>)
 800ec04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec06:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800ec08:	4b8a      	ldr	r3, [pc, #552]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ec0a:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d102      	bne.n	800ec18 <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800ec12:	488a      	ldr	r0, [pc, #552]	@ (800ee3c <ProcessRadioRxDone+0x318>)
 800ec14:	f00d f810 	bl	801bc38 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800ec18:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800ec22:	f004 fcdb 	bl	80135dc <LoRaMacClassBRxBeacon>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d00b      	beq.n	800ec44 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800ec2c:	4a81      	ldr	r2, [pc, #516]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ec2e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800ec32:	f8a2 3482 	strh.w	r3, [r2, #1154]	@ 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800ec36:	4a7f      	ldr	r2, [pc, #508]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ec38:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ec3c:	f882 3484 	strb.w	r3, [r2, #1156]	@ 0x484
        return;
 800ec40:	f000 bc22 	b.w	800f488 <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ec44:	4b79      	ldr	r3, [pc, #484]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800ec46:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d11e      	bne.n	800ec8c <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ec4e:	f004 fcd8 	bl	8013602 <LoRaMacClassBIsPingExpected>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d00a      	beq.n	800ec6e <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ec58:	2000      	movs	r0, #0
 800ec5a:	f004 fc89 	bl	8013570 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ec5e:	2000      	movs	r0, #0
 800ec60:	f004 fcaa 	bl	80135b8 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ec64:	4b73      	ldr	r3, [pc, #460]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ec66:	2204      	movs	r2, #4
 800ec68:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
 800ec6c:	e00e      	b.n	800ec8c <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ec6e:	f004 fccf 	bl	8013610 <LoRaMacClassBIsMulticastExpected>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d009      	beq.n	800ec8c <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ec78:	2000      	movs	r0, #0
 800ec7a:	f004 fc83 	bl	8013584 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ec7e:	2000      	movs	r0, #0
 800ec80:	f004 fca3 	bl	80135ca <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ec84:	4b6b      	ldr	r3, [pc, #428]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ec86:	2205      	movs	r2, #5
 800ec88:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800ec8c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800ec90:	1c5a      	adds	r2, r3, #1
 800ec92:	f887 207e 	strb.w	r2, [r7, #126]	@ 0x7e
 800ec96:	461a      	mov	r2, r3
 800ec98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ec9c:	4413      	add	r3, r2
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

    switch( macHdr.Bits.MType )
 800eca4:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800eca8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	3b01      	subs	r3, #1
 800ecb0:	2b06      	cmp	r3, #6
 800ecb2:	f200 83bd 	bhi.w	800f430 <ProcessRadioRxDone+0x90c>
 800ecb6:	a201      	add	r2, pc, #4	@ (adr r2, 800ecbc <ProcessRadioRxDone+0x198>)
 800ecb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecbc:	0800ecd9 	.word	0x0800ecd9
 800ecc0:	0800f431 	.word	0x0800f431
 800ecc4:	0800ee6d 	.word	0x0800ee6d
 800ecc8:	0800f431 	.word	0x0800f431
 800eccc:	0800ee65 	.word	0x0800ee65
 800ecd0:	0800f431 	.word	0x0800f431
 800ecd4:	0800f3c3 	.word	0x0800f3c3
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800ecd8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800ecdc:	2b10      	cmp	r3, #16
 800ecde:	d806      	bhi.n	800ecee <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ece0:	4b54      	ldr	r3, [pc, #336]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ece2:	2201      	movs	r2, #1
 800ece4:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800ece8:	f7ff fef6 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800ecec:	e3cc      	b.n	800f488 <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800ecee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ecf2:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800ecf4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ecfc:	4b4b      	ldr	r3, [pc, #300]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800ecfe:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d006      	beq.n	800ed14 <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ed06:	4b4b      	ldr	r3, [pc, #300]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800ed08:	2201      	movs	r2, #1
 800ed0a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800ed0e:	f7ff fee3 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800ed12:	e3b9      	b.n	800f488 <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800ed14:	f7fe f876 	bl	800ce04 <SecureElementGetJoinEui>
 800ed18:	4601      	mov	r1, r0
 800ed1a:	f107 030c 	add.w	r3, r7, #12
 800ed1e:	461a      	mov	r2, r3
 800ed20:	20ff      	movs	r0, #255	@ 0xff
 800ed22:	f005 fe2d 	bl	8014980 <LoRaMacCryptoHandleJoinAccept>
 800ed26:	4603      	mov	r3, r0
 800ed28:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800ed2c:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	f040 8085 	bne.w	800ee40 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ed36:	7d7b      	ldrb	r3, [r7, #21]
 800ed38:	461a      	mov	r2, r3
 800ed3a:	4b3c      	ldr	r3, [pc, #240]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800ed3c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800ed40:	4b3a      	ldr	r3, [pc, #232]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800ed42:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800ed46:	7dbb      	ldrb	r3, [r7, #22]
 800ed48:	021b      	lsls	r3, r3, #8
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	4a37      	ldr	r2, [pc, #220]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800ed4e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800ed52:	4b36      	ldr	r3, [pc, #216]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800ed54:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800ed58:	7dfb      	ldrb	r3, [r7, #23]
 800ed5a:	041b      	lsls	r3, r3, #16
 800ed5c:	4313      	orrs	r3, r2
 800ed5e:	4a33      	ldr	r2, [pc, #204]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800ed60:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800ed64:	69bb      	ldr	r3, [r7, #24]
 800ed66:	4a31      	ldr	r2, [pc, #196]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800ed68:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800ed6c:	7f3b      	ldrb	r3, [r7, #28]
 800ed6e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ed72:	b2db      	uxtb	r3, r3
 800ed74:	461a      	mov	r2, r3
 800ed76:	4b2d      	ldr	r3, [pc, #180]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800ed78:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ed7c:	7f3b      	ldrb	r3, [r7, #28]
 800ed7e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	461a      	mov	r2, r3
 800ed86:	4b29      	ldr	r3, [pc, #164]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800ed88:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ed8c:	7f3b      	ldrb	r3, [r7, #28]
 800ed8e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	461a      	mov	r2, r3
 800ed96:	4b25      	ldr	r3, [pc, #148]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800ed98:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800ed9c:	7f7b      	ldrb	r3, [r7, #29]
 800ed9e:	461a      	mov	r2, r3
 800eda0:	4b22      	ldr	r3, [pc, #136]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800eda2:	651a      	str	r2, [r3, #80]	@ 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800eda4:	4b21      	ldr	r3, [pc, #132]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800eda6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d102      	bne.n	800edb2 <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800edac:	4b1f      	ldr	r3, [pc, #124]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800edae:	2201      	movs	r2, #1
 800edb0:	651a      	str	r2, [r3, #80]	@ 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800edb2:	4b1e      	ldr	r3, [pc, #120]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800edb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800edba:	fb02 f303 	mul.w	r3, r2, r3
 800edbe:	4a1b      	ldr	r2, [pc, #108]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800edc0:	6513      	str	r3, [r2, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800edc2:	4b1a      	ldr	r3, [pc, #104]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800edc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edc6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800edca:	4a18      	ldr	r2, [pc, #96]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800edcc:	6553      	str	r3, [r2, #84]	@ 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800edce:	4b17      	ldr	r3, [pc, #92]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800edd0:	2200      	movs	r2, #0
 800edd2:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800edd6:	f107 030c 	add.w	r3, r7, #12
 800edda:	3312      	adds	r3, #18
 800eddc:	677b      	str	r3, [r7, #116]	@ 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800edde:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	3b11      	subs	r3, #17
 800ede6:	b2db      	uxtb	r3, r3
 800ede8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800edec:	4b11      	ldr	r3, [pc, #68]	@ (800ee34 <ProcessRadioRxDone+0x310>)
 800edee:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800edf2:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800edf6:	4b0d      	ldr	r3, [pc, #52]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800edf8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800edfc:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800ee00:	4611      	mov	r1, r2
 800ee02:	4618      	mov	r0, r3
 800ee04:	f006 fb84 	bl	8015510 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ee08:	4b08      	ldr	r3, [pc, #32]	@ (800ee2c <ProcessRadioRxDone+0x308>)
 800ee0a:	2202      	movs	r2, #2
 800ee0c:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ee10:	2001      	movs	r0, #1
 800ee12:	f005 f8dd 	bl	8013fd0 <LoRaMacConfirmQueueIsCmdActive>
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d01b      	beq.n	800ee54 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800ee1c:	2101      	movs	r1, #1
 800ee1e:	2000      	movs	r0, #0
 800ee20:	f005 f84a 	bl	8013eb8 <LoRaMacConfirmQueueSetStatus>
 800ee24:	e016      	b.n	800ee54 <ProcessRadioRxDone+0x330>
 800ee26:	bf00      	nop
 800ee28:	200019ec 	.word	0x200019ec
 800ee2c:	20000e5c 	.word	0x20000e5c
 800ee30:	200019e4 	.word	0x200019e4
 800ee34:	2000093c 	.word	0x2000093c
 800ee38:	0801fedc 	.word	0x0801fedc
 800ee3c:	20000cd4 	.word	0x20000cd4
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ee40:	2001      	movs	r0, #1
 800ee42:	f005 f8c5 	bl	8013fd0 <LoRaMacConfirmQueueIsCmdActive>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d003      	beq.n	800ee54 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ee4c:	2101      	movs	r1, #1
 800ee4e:	2007      	movs	r0, #7
 800ee50:	f005 f832 	bl	8013eb8 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800ee54:	4ab9      	ldr	r2, [pc, #740]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800ee56:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ee5a:	f043 0308 	orr.w	r3, r3, #8
 800ee5e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800ee62:	e2ec      	b.n	800f43e <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ee64:	4bb5      	ldr	r3, [pc, #724]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800ee66:	2201      	movs	r2, #1
 800ee68:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ee6c:	4bb4      	ldr	r3, [pc, #720]	@ (800f140 <ProcessRadioRxDone+0x61c>)
 800ee6e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800ee72:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800ee76:	4bb1      	ldr	r3, [pc, #708]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800ee78:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 800ee7c:	b25b      	sxtb	r3, r3
 800ee7e:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ee82:	230d      	movs	r3, #13
 800ee84:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ee88:	4bad      	ldr	r3, [pc, #692]	@ (800f140 <ProcessRadioRxDone+0x61c>)
 800ee8a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d002      	beq.n	800ee98 <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ee92:	230e      	movs	r3, #14
 800ee94:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ee98:	4ba9      	ldr	r3, [pc, #676]	@ (800f140 <ProcessRadioRxDone+0x61c>)
 800ee9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ee9e:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800eea2:	4611      	mov	r1, r2
 800eea4:	4618      	mov	r0, r3
 800eea6:	f006 fae1 	bl	801546c <RegionGetPhyParam>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	667b      	str	r3, [r7, #100]	@ 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800eeae:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800eeb2:	3b0d      	subs	r3, #13
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	b21b      	sxth	r3, r3
 800eeb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eebc:	b21a      	sxth	r2, r3
 800eebe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eec0:	b21b      	sxth	r3, r3
 800eec2:	429a      	cmp	r2, r3
 800eec4:	dc03      	bgt.n	800eece <ProcessRadioRxDone+0x3aa>
 800eec6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800eeca:	2b0b      	cmp	r3, #11
 800eecc:	d806      	bhi.n	800eedc <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eece:	4b9b      	ldr	r3, [pc, #620]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800eed0:	2201      	movs	r2, #1
 800eed2:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800eed6:	f7ff fdff 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800eeda:	e2d5      	b.n	800f488 <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800eedc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800eee0:	637b      	str	r3, [r7, #52]	@ 0x34
            macMsgData.BufSize = size;
 800eee2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800eeec:	4b95      	ldr	r3, [pc, #596]	@ (800f144 <ProcessRadioRxDone+0x620>)
 800eeee:	65bb      	str	r3, [r7, #88]	@ 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800eef0:	23ff      	movs	r3, #255	@ 0xff
 800eef2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800eef6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800eefa:	4618      	mov	r0, r3
 800eefc:	f006 f83d 	bl	8014f7a <LoRaMacParserData>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d006      	beq.n	800ef14 <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ef06:	4b8d      	ldr	r3, [pc, #564]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800ef08:	2201      	movs	r2, #1
 800ef0a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800ef0e:	f7ff fde3 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800ef12:	e2b9      	b.n	800f488 <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ef14:	4b8a      	ldr	r3, [pc, #552]	@ (800f140 <ProcessRadioRxDone+0x61c>)
 800ef16:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d132      	bne.n	800ef84 <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800ef1e:	f004 fb70 	bl	8013602 <LoRaMacClassBIsPingExpected>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d014      	beq.n	800ef52 <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ef28:	2000      	movs	r0, #0
 800ef2a:	f004 fb21 	bl	8013570 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800ef2e:	2000      	movs	r0, #0
 800ef30:	f004 fb42 	bl	80135b8 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ef34:	4b81      	ldr	r3, [pc, #516]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800ef36:	2204      	movs	r2, #4
 800ef38:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800ef3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ef3e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ef42:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ef46:	b2db      	uxtb	r3, r3
 800ef48:	4619      	mov	r1, r3
 800ef4a:	4610      	mov	r0, r2
 800ef4c:	f004 fbe2 	bl	8013714 <LoRaMacClassBSetFPendingBit>
 800ef50:	e018      	b.n	800ef84 <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ef52:	f004 fb5d 	bl	8013610 <LoRaMacClassBIsMulticastExpected>
 800ef56:	4603      	mov	r3, r0
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d013      	beq.n	800ef84 <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ef5c:	2000      	movs	r0, #0
 800ef5e:	f004 fb11 	bl	8013584 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ef62:	2000      	movs	r0, #0
 800ef64:	f004 fb31 	bl	80135ca <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ef68:	4b74      	ldr	r3, [pc, #464]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800ef6a:	2205      	movs	r2, #5
 800ef6c:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800ef70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ef72:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ef76:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	4610      	mov	r0, r2
 800ef80:	f004 fbc8 	bl	8013714 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ef84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef86:	4a6d      	ldr	r2, [pc, #436]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800ef88:	f8c2 3438 	str.w	r3, [r2, #1080]	@ 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ef8c:	1dba      	adds	r2, r7, #6
 800ef8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800ef92:	4611      	mov	r1, r2
 800ef94:	4618      	mov	r0, r3
 800ef96:	f002 fd1f 	bl	80119d8 <DetermineFrameType>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d006      	beq.n	800efae <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800efa0:	4b66      	ldr	r3, [pc, #408]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800efa2:	2201      	movs	r2, #1
 800efa4:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800efa8:	f7ff fd96 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800efac:	e26c      	b.n	800f488 <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800efae:	2300      	movs	r3, #0
 800efb0:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
            downLinkCounter = 0;
 800efb4:	2300      	movs	r3, #0
 800efb6:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800efb8:	2300      	movs	r3, #0
 800efba:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800efbe:	e049      	b.n	800f054 <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800efc0:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800efc4:	4a5e      	ldr	r2, [pc, #376]	@ (800f140 <ProcessRadioRxDone+0x61c>)
 800efc6:	212c      	movs	r1, #44	@ 0x2c
 800efc8:	fb01 f303 	mul.w	r3, r1, r3
 800efcc:	4413      	add	r3, r2
 800efce:	33dc      	adds	r3, #220	@ 0xdc
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d138      	bne.n	800f04a <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800efd8:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800efdc:	4a58      	ldr	r2, [pc, #352]	@ (800f140 <ProcessRadioRxDone+0x61c>)
 800efde:	212c      	movs	r1, #44	@ 0x2c
 800efe0:	fb01 f303 	mul.w	r3, r1, r3
 800efe4:	4413      	add	r3, r2
 800efe6:	33da      	adds	r3, #218	@ 0xda
 800efe8:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800efea:	2b00      	cmp	r3, #0
 800efec:	d02d      	beq.n	800f04a <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800efee:	2301      	movs	r3, #1
 800eff0:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800eff4:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800eff8:	4a51      	ldr	r2, [pc, #324]	@ (800f140 <ProcessRadioRxDone+0x61c>)
 800effa:	212c      	movs	r1, #44	@ 0x2c
 800effc:	fb01 f303 	mul.w	r3, r1, r3
 800f000:	4413      	add	r3, r2
 800f002:	33db      	adds	r3, #219	@ 0xdb
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800f00a:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f00e:	4a4c      	ldr	r2, [pc, #304]	@ (800f140 <ProcessRadioRxDone+0x61c>)
 800f010:	212c      	movs	r1, #44	@ 0x2c
 800f012:	fb01 f303 	mul.w	r3, r1, r3
 800f016:	4413      	add	r3, r2
 800f018:	33f8      	adds	r3, #248	@ 0xf8
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800f020:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f024:	4a46      	ldr	r2, [pc, #280]	@ (800f140 <ProcessRadioRxDone+0x61c>)
 800f026:	212c      	movs	r1, #44	@ 0x2c
 800f028:	fb01 f303 	mul.w	r3, r1, r3
 800f02c:	4413      	add	r3, r2
 800f02e:	33dc      	adds	r3, #220	@ 0xdc
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f036:	4b42      	ldr	r3, [pc, #264]	@ (800f140 <ProcessRadioRxDone+0x61c>)
 800f038:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f03c:	2b02      	cmp	r3, #2
 800f03e:	d10e      	bne.n	800f05e <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f040:	4b3e      	ldr	r3, [pc, #248]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800f042:	2203      	movs	r2, #3
 800f044:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    }
                    break;
 800f048:	e009      	b.n	800f05e <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f04a:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f04e:	3301      	adds	r3, #1
 800f050:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800f054:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d0b1      	beq.n	800efc0 <ProcessRadioRxDone+0x49c>
 800f05c:	e000      	b.n	800f060 <ProcessRadioRxDone+0x53c>
                    break;
 800f05e:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f060:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800f064:	2b01      	cmp	r3, #1
 800f066:	d117      	bne.n	800f098 <ProcessRadioRxDone+0x574>
 800f068:	79bb      	ldrb	r3, [r7, #6]
 800f06a:	2b03      	cmp	r3, #3
 800f06c:	d10d      	bne.n	800f08a <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f06e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f072:	f003 0320 	and.w	r3, r3, #32
 800f076:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d106      	bne.n	800f08a <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f07c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f084:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f086:	2b00      	cmp	r3, #0
 800f088:	d006      	beq.n	800f098 <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f08a:	4b2c      	ldr	r3, [pc, #176]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800f08c:	2201      	movs	r2, #1
 800f08e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800f092:	f7ff fd21 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800f096:	e1f7      	b.n	800f488 <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800f098:	79b9      	ldrb	r1, [r7, #6]
 800f09a:	4c29      	ldr	r4, [pc, #164]	@ (800f140 <ProcessRadioRxDone+0x61c>)
 800f09c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f0a0:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800f0a4:	f107 0308 	add.w	r3, r7, #8
 800f0a8:	9301      	str	r3, [sp, #4]
 800f0aa:	1dfb      	adds	r3, r7, #7
 800f0ac:	9300      	str	r3, [sp, #0]
 800f0ae:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800f0b2:	f000 fee7 	bl	800fe84 <GetFCntDown>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f0bc:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d017      	beq.n	800f0f4 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800f0c4:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800f0c8:	2b07      	cmp	r3, #7
 800f0ca:	d104      	bne.n	800f0d6 <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800f0cc:	4b1b      	ldr	r3, [pc, #108]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800f0ce:	2208      	movs	r2, #8
 800f0d0:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800f0d4:	e003      	b.n	800f0de <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f0d6:	4b19      	ldr	r3, [pc, #100]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800f0d8:	2201      	movs	r2, #1
 800f0da:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	4a16      	ldr	r2, [pc, #88]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800f0e2:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	4a14      	ldr	r2, [pc, #80]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800f0ea:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
                PrepareRxDoneAbort( );
 800f0ee:	f7ff fcf3 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800f0f2:	e1c9      	b.n	800f488 <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800f0f4:	79fa      	ldrb	r2, [r7, #7]
 800f0f6:	68b9      	ldr	r1, [r7, #8]
 800f0f8:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800f0fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f100:	9300      	str	r3, [sp, #0]
 800f102:	460b      	mov	r3, r1
 800f104:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800f108:	f005 fd86 	bl	8014c18 <LoRaMacCryptoUnsecureMessage>
 800f10c:	4603      	mov	r3, r0
 800f10e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f112:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800f116:	2b00      	cmp	r3, #0
 800f118:	d016      	beq.n	800f148 <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800f11a:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800f11e:	2b02      	cmp	r3, #2
 800f120:	d104      	bne.n	800f12c <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800f122:	4b06      	ldr	r3, [pc, #24]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800f124:	220a      	movs	r2, #10
 800f126:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800f12a:	e003      	b.n	800f134 <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800f12c:	4b03      	ldr	r3, [pc, #12]	@ (800f13c <ProcessRadioRxDone+0x618>)
 800f12e:	220b      	movs	r2, #11
 800f130:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                PrepareRxDoneAbort( );
 800f134:	f7ff fcd0 	bl	800ead8 <PrepareRxDoneAbort>
                return;
 800f138:	e1a6      	b.n	800f488 <ProcessRadioRxDone+0x964>
 800f13a:	bf00      	nop
 800f13c:	2000093c 	.word	0x2000093c
 800f140:	20000e5c 	.word	0x20000e5c
 800f144:	20000b74 	.word	0x20000b74
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f148:	4bb5      	ldr	r3, [pc, #724]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f14a:	2200      	movs	r2, #0
 800f14c:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800f150:	4ab3      	ldr	r2, [pc, #716]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f152:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800f156:	f882 3426 	strb.w	r3, [r2, #1062]	@ 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800f15a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f15e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f162:	b2db      	uxtb	r3, r3
 800f164:	461a      	mov	r2, r3
 800f166:	4bae      	ldr	r3, [pc, #696]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f168:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800f16c:	4bac      	ldr	r3, [pc, #688]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f16e:	2200      	movs	r2, #0
 800f170:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800f174:	4baa      	ldr	r3, [pc, #680]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f176:	2200      	movs	r2, #0
 800f178:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	4aa8      	ldr	r2, [pc, #672]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f180:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	4aa6      	ldr	r2, [pc, #664]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f188:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f18c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f190:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f194:	b2db      	uxtb	r3, r3
 800f196:	2b00      	cmp	r3, #0
 800f198:	bf14      	ite	ne
 800f19a:	2301      	movne	r3, #1
 800f19c:	2300      	moveq	r3, #0
 800f19e:	b2da      	uxtb	r2, r3
 800f1a0:	4b9f      	ldr	r3, [pc, #636]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f1a2:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f1a6:	4b9e      	ldr	r3, [pc, #632]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f1ae:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f1b2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f1b6:	b2db      	uxtb	r3, r3
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	bf14      	ite	ne
 800f1bc:	2301      	movne	r3, #1
 800f1be:	2300      	moveq	r3, #0
 800f1c0:	b2da      	uxtb	r2, r3
 800f1c2:	4b97      	ldr	r3, [pc, #604]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f1c4:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f1c8:	4b95      	ldr	r3, [pc, #596]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f1ca:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d004      	beq.n	800f1dc <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f1d2:	4b93      	ldr	r3, [pc, #588]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f1d4:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f1d8:	2b01      	cmp	r3, #1
 800f1da:	d106      	bne.n	800f1ea <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800f1dc:	4b91      	ldr	r3, [pc, #580]	@ (800f424 <ProcessRadioRxDone+0x900>)
 800f1de:	2200      	movs	r2, #0
 800f1e0:	629a      	str	r2, [r3, #40]	@ 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800f1e2:	4b90      	ldr	r3, [pc, #576]	@ (800f424 <ProcessRadioRxDone+0x900>)
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f1ea:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d104      	bne.n	800f1fc <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f1f2:	4b8b      	ldr	r3, [pc, #556]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f1f4:	2202      	movs	r2, #2
 800f1f6:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
 800f1fa:	e034      	b.n	800f266 <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f1fc:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800f200:	f023 031f 	bic.w	r3, r3, #31
 800f204:	b2db      	uxtb	r3, r3
 800f206:	2ba0      	cmp	r3, #160	@ 0xa0
 800f208:	d125      	bne.n	800f256 <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800f20a:	4b86      	ldr	r3, [pc, #536]	@ (800f424 <ProcessRadioRxDone+0x900>)
 800f20c:	2201      	movs	r2, #1
 800f20e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f212:	4b84      	ldr	r3, [pc, #528]	@ (800f424 <ProcessRadioRxDone+0x900>)
 800f214:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d102      	bne.n	800f222 <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800f21c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f21e:	4a81      	ldr	r2, [pc, #516]	@ (800f424 <ProcessRadioRxDone+0x900>)
 800f220:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f222:	4b7f      	ldr	r3, [pc, #508]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f224:	2201      	movs	r2, #1
 800f226:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f22a:	4b7d      	ldr	r3, [pc, #500]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f22c:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f230:	2b00      	cmp	r3, #0
 800f232:	d018      	beq.n	800f266 <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800f234:	4b7a      	ldr	r3, [pc, #488]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f236:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f23a:	2b01      	cmp	r3, #1
 800f23c:	d013      	beq.n	800f266 <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800f23e:	4b79      	ldr	r3, [pc, #484]	@ (800f424 <ProcessRadioRxDone+0x900>)
 800f240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f244:	4a76      	ldr	r2, [pc, #472]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f246:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800f24a:	4b77      	ldr	r3, [pc, #476]	@ (800f428 <ProcessRadioRxDone+0x904>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	4a74      	ldr	r2, [pc, #464]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f250:	f8c2 349c 	str.w	r3, [r2, #1180]	@ 0x49c
 800f254:	e007      	b.n	800f266 <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800f256:	4b73      	ldr	r3, [pc, #460]	@ (800f424 <ProcessRadioRxDone+0x900>)
 800f258:	2200      	movs	r2, #0
 800f25a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f25e:	4b70      	ldr	r3, [pc, #448]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f260:	2200      	movs	r2, #0
 800f262:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800f266:	4b6e      	ldr	r3, [pc, #440]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f268:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f26c:	4a6c      	ldr	r2, [pc, #432]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f26e:	f892 2444 	ldrb.w	r2, [r2, #1092]	@ 0x444
 800f272:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 800f276:	4618      	mov	r0, r3
 800f278:	f001 ff96 	bl	80111a8 <RemoveMacCommands>

            switch( fType )
 800f27c:	79bb      	ldrb	r3, [r7, #6]
 800f27e:	2b03      	cmp	r3, #3
 800f280:	d873      	bhi.n	800f36a <ProcessRadioRxDone+0x846>
 800f282:	a201      	add	r2, pc, #4	@ (adr r2, 800f288 <ProcessRadioRxDone+0x764>)
 800f284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f288:	0800f299 	.word	0x0800f299
 800f28c:	0800f2e9 	.word	0x0800f2e9
 800f290:	0800f31f 	.word	0x0800f31f
 800f294:	0800f345 	.word	0x0800f345
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f298:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f29c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	461c      	mov	r4, r3
 800f2a4:	4b5e      	ldr	r3, [pc, #376]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f2a6:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f2aa:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800f2ae:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f2b2:	f102 0010 	add.w	r0, r2, #16
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	4622      	mov	r2, r4
 800f2bc:	2100      	movs	r1, #0
 800f2be:	f000 ff45 	bl	801014c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f2c2:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f2c6:	4b56      	ldr	r3, [pc, #344]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f2c8:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f2cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f2ce:	4a54      	ldr	r2, [pc, #336]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f2d0:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f2d4:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800f2d8:	4b51      	ldr	r3, [pc, #324]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f2da:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800f2de:	4b50      	ldr	r3, [pc, #320]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800f2e6:	e047      	b.n	800f378 <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f2e8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800f2ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	461c      	mov	r4, r3
 800f2f4:	4b4a      	ldr	r3, [pc, #296]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f2f6:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f2fa:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800f2fe:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f302:	f102 0010 	add.w	r0, r2, #16
 800f306:	9300      	str	r3, [sp, #0]
 800f308:	460b      	mov	r3, r1
 800f30a:	4622      	mov	r2, r4
 800f30c:	2100      	movs	r1, #0
 800f30e:	f000 ff1d 	bl	801014c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f312:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f316:	4b42      	ldr	r3, [pc, #264]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f318:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800f31c:	e02c      	b.n	800f378 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800f31e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f320:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800f324:	4b3e      	ldr	r3, [pc, #248]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f326:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f32a:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800f32e:	9300      	str	r3, [sp, #0]
 800f330:	460b      	mov	r3, r1
 800f332:	2100      	movs	r1, #0
 800f334:	f000 ff0a 	bl	801014c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f338:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f33c:	4b38      	ldr	r3, [pc, #224]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f33e:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800f342:	e019      	b.n	800f378 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f344:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f348:	4b35      	ldr	r3, [pc, #212]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f34a:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f34e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f350:	4a33      	ldr	r2, [pc, #204]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f352:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f356:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800f35a:	4b31      	ldr	r3, [pc, #196]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f35c:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800f360:	4b2f      	ldr	r3, [pc, #188]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f362:	2201      	movs	r2, #1
 800f364:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800f368:	e006      	b.n	800f378 <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f36a:	4b2d      	ldr	r3, [pc, #180]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f36c:	2201      	movs	r2, #1
 800f36e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    PrepareRxDoneAbort( );
 800f372:	f7ff fbb1 	bl	800ead8 <PrepareRxDoneAbort>
                    break;
 800f376:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800f378:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800f37c:	2be0      	cmp	r3, #224	@ 0xe0
 800f37e:	d118      	bne.n	800f3b2 <ProcessRadioRxDone+0x88e>
 800f380:	4b28      	ldr	r3, [pc, #160]	@ (800f424 <ProcessRadioRxDone+0x900>)
 800f382:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800f386:	f083 0301 	eor.w	r3, r3, #1
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d010      	beq.n	800f3b2 <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f390:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f394:	4b22      	ldr	r3, [pc, #136]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f396:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800f39a:	4b21      	ldr	r3, [pc, #132]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f39c:	2200      	movs	r2, #0
 800f39e:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800f3a2:	4b1f      	ldr	r3, [pc, #124]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                MacCtx.McpsIndication.RxData = false;
 800f3aa:	4b1d      	ldr	r3, [pc, #116]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f3b2:	4a1b      	ldr	r2, [pc, #108]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f3b4:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f3b8:	f043 0302 	orr.w	r3, r3, #2
 800f3bc:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

            break;
 800f3c0:	e03d      	b.n	800f43e <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f3c2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800f3c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f3ca:	18d1      	adds	r1, r2, r3
 800f3cc:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 800f3d6:	1ad3      	subs	r3, r2, r3
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	461a      	mov	r2, r3
 800f3dc:	4813      	ldr	r0, [pc, #76]	@ (800f42c <ProcessRadioRxDone+0x908>)
 800f3de:	f008 fae6 	bl	80179ae <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f3e2:	4b0f      	ldr	r3, [pc, #60]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f3e4:	2203      	movs	r2, #3
 800f3e6:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f3ea:	4b0d      	ldr	r3, [pc, #52]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f3f2:	4b0b      	ldr	r3, [pc, #44]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f3f4:	4a0d      	ldr	r2, [pc, #52]	@ (800f42c <ProcessRadioRxDone+0x908>)
 800f3f6:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f3fa:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800f3fe:	b2da      	uxtb	r2, r3
 800f400:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800f404:	1ad3      	subs	r3, r2, r3
 800f406:	b2da      	uxtb	r2, r3
 800f408:	4b05      	ldr	r3, [pc, #20]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f40a:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f40e:	4a04      	ldr	r2, [pc, #16]	@ (800f420 <ProcessRadioRxDone+0x8fc>)
 800f410:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f414:	f043 0302 	orr.w	r3, r3, #2
 800f418:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800f41c:	e00f      	b.n	800f43e <ProcessRadioRxDone+0x91a>
 800f41e:	bf00      	nop
 800f420:	2000093c 	.word	0x2000093c
 800f424:	20000e5c 	.word	0x20000e5c
 800f428:	200019ec 	.word	0x200019ec
 800f42c:	20000b74 	.word	0x20000b74
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f430:	4b17      	ldr	r3, [pc, #92]	@ (800f490 <ProcessRadioRxDone+0x96c>)
 800f432:	2201      	movs	r2, #1
 800f434:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            PrepareRxDoneAbort( );
 800f438:	f7ff fb4e 	bl	800ead8 <PrepareRxDoneAbort>
            break;
 800f43c:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f43e:	4b14      	ldr	r3, [pc, #80]	@ (800f490 <ProcessRadioRxDone+0x96c>)
 800f440:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f444:	2b00      	cmp	r3, #0
 800f446:	d004      	beq.n	800f452 <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f448:	4b11      	ldr	r3, [pc, #68]	@ (800f490 <ProcessRadioRxDone+0x96c>)
 800f44a:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f44e:	2b01      	cmp	r3, #1
 800f450:	d10c      	bne.n	800f46c <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800f452:	4b0f      	ldr	r3, [pc, #60]	@ (800f490 <ProcessRadioRxDone+0x96c>)
 800f454:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d007      	beq.n	800f46c <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800f45c:	4b0c      	ldr	r3, [pc, #48]	@ (800f490 <ProcessRadioRxDone+0x96c>)
 800f45e:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 800f462:	2b00      	cmp	r3, #0
 800f464:	d002      	beq.n	800f46c <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800f466:	2000      	movs	r0, #0
 800f468:	f000 fce4 	bl	800fe34 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800f46c:	4b08      	ldr	r3, [pc, #32]	@ (800f490 <ProcessRadioRxDone+0x96c>)
 800f46e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800f472:	2b02      	cmp	r3, #2
 800f474:	d006      	beq.n	800f484 <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800f476:	4a06      	ldr	r2, [pc, #24]	@ (800f490 <ProcessRadioRxDone+0x96c>)
 800f478:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f47c:	f043 0320 	orr.w	r3, r3, #32
 800f480:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800f484:	f7ff fa82 	bl	800e98c <UpdateRxSlotIdleState>
}
 800f488:	3794      	adds	r7, #148	@ 0x94
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd90      	pop	{r4, r7, pc}
 800f48e:	bf00      	nop
 800f490:	2000093c 	.word	0x2000093c

0800f494 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f494:	b580      	push	{r7, lr}
 800f496:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f498:	4b11      	ldr	r3, [pc, #68]	@ (800f4e0 <ProcessRadioTxTimeout+0x4c>)
 800f49a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f49e:	2b02      	cmp	r3, #2
 800f4a0:	d002      	beq.n	800f4a8 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800f4a2:	4b10      	ldr	r3, [pc, #64]	@ (800f4e4 <ProcessRadioTxTimeout+0x50>)
 800f4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4a6:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f4a8:	f7ff fa70 	bl	800e98c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f4ac:	4b0e      	ldr	r3, [pc, #56]	@ (800f4e8 <ProcessRadioTxTimeout+0x54>)
 800f4ae:	2202      	movs	r2, #2
 800f4b0:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f4b4:	2002      	movs	r0, #2
 800f4b6:	f004 fd57 	bl	8013f68 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f4ba:	4b0b      	ldr	r3, [pc, #44]	@ (800f4e8 <ProcessRadioTxTimeout+0x54>)
 800f4bc:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d003      	beq.n	800f4cc <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800f4c4:	4b08      	ldr	r3, [pc, #32]	@ (800f4e8 <ProcessRadioTxTimeout+0x54>)
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f4cc:	4a06      	ldr	r2, [pc, #24]	@ (800f4e8 <ProcessRadioTxTimeout+0x54>)
 800f4ce:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f4d2:	f043 0320 	orr.w	r3, r3, #32
 800f4d6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
}
 800f4da:	bf00      	nop
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	20000e5c 	.word	0x20000e5c
 800f4e4:	0801fedc 	.word	0x0801fedc
 800f4e8:	2000093c 	.word	0x2000093c

0800f4ec <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b084      	sub	sp, #16
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	460a      	mov	r2, r1
 800f4f6:	71fb      	strb	r3, [r7, #7]
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f500:	4b3d      	ldr	r3, [pc, #244]	@ (800f5f8 <HandleRadioRxErrorTimeout+0x10c>)
 800f502:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f506:	2b02      	cmp	r3, #2
 800f508:	d002      	beq.n	800f510 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800f50a:	4b3c      	ldr	r3, [pc, #240]	@ (800f5fc <HandleRadioRxErrorTimeout+0x110>)
 800f50c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f50e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f510:	f004 f870 	bl	80135f4 <LoRaMacClassBIsBeaconExpected>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d007      	beq.n	800f52a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f51a:	2002      	movs	r0, #2
 800f51c:	f004 f81e 	bl	801355c <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f520:	2000      	movs	r0, #0
 800f522:	f004 f840 	bl	80135a6 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f526:	2301      	movs	r3, #1
 800f528:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f52a:	4b33      	ldr	r3, [pc, #204]	@ (800f5f8 <HandleRadioRxErrorTimeout+0x10c>)
 800f52c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f530:	2b01      	cmp	r3, #1
 800f532:	d119      	bne.n	800f568 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f534:	f004 f865 	bl	8013602 <LoRaMacClassBIsPingExpected>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d007      	beq.n	800f54e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f53e:	2000      	movs	r0, #0
 800f540:	f004 f816 	bl	8013570 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f544:	2000      	movs	r0, #0
 800f546:	f004 f837 	bl	80135b8 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f54a:	2301      	movs	r3, #1
 800f54c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f54e:	f004 f85f 	bl	8013610 <LoRaMacClassBIsMulticastExpected>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d007      	beq.n	800f568 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f558:	2000      	movs	r0, #0
 800f55a:	f004 f813 	bl	8013584 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f55e:	2000      	movs	r0, #0
 800f560:	f004 f833 	bl	80135ca <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f564:	2301      	movs	r3, #1
 800f566:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800f568:	7bfb      	ldrb	r3, [r7, #15]
 800f56a:	f083 0301 	eor.w	r3, r3, #1
 800f56e:	b2db      	uxtb	r3, r3
 800f570:	2b00      	cmp	r3, #0
 800f572:	d03b      	beq.n	800f5ec <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f574:	4b22      	ldr	r3, [pc, #136]	@ (800f600 <HandleRadioRxErrorTimeout+0x114>)
 800f576:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d122      	bne.n	800f5c4 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800f57e:	4b20      	ldr	r3, [pc, #128]	@ (800f600 <HandleRadioRxErrorTimeout+0x114>)
 800f580:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800f584:	2b00      	cmp	r3, #0
 800f586:	d003      	beq.n	800f590 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f588:	4a1d      	ldr	r2, [pc, #116]	@ (800f600 <HandleRadioRxErrorTimeout+0x114>)
 800f58a:	79fb      	ldrb	r3, [r7, #7]
 800f58c:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f590:	79fb      	ldrb	r3, [r7, #7]
 800f592:	4618      	mov	r0, r3
 800f594:	f004 fce8 	bl	8013f68 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f598:	4b17      	ldr	r3, [pc, #92]	@ (800f5f8 <HandleRadioRxErrorTimeout+0x10c>)
 800f59a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f59c:	4618      	mov	r0, r3
 800f59e:	f00c fc77 	bl	801be90 <UTIL_TIMER_GetElapsedTime>
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	4b16      	ldr	r3, [pc, #88]	@ (800f600 <HandleRadioRxErrorTimeout+0x114>)
 800f5a6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d31e      	bcc.n	800f5ec <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f5ae:	4815      	ldr	r0, [pc, #84]	@ (800f604 <HandleRadioRxErrorTimeout+0x118>)
 800f5b0:	f00c fb42 	bl	801bc38 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f5b4:	4a12      	ldr	r2, [pc, #72]	@ (800f600 <HandleRadioRxErrorTimeout+0x114>)
 800f5b6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f5ba:	f043 0320 	orr.w	r3, r3, #32
 800f5be:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 800f5c2:	e013      	b.n	800f5ec <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f5c4:	4b0e      	ldr	r3, [pc, #56]	@ (800f600 <HandleRadioRxErrorTimeout+0x114>)
 800f5c6:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d003      	beq.n	800f5d6 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f5ce:	4a0c      	ldr	r2, [pc, #48]	@ (800f600 <HandleRadioRxErrorTimeout+0x114>)
 800f5d0:	79bb      	ldrb	r3, [r7, #6]
 800f5d2:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f5d6:	79bb      	ldrb	r3, [r7, #6]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f004 fcc5 	bl	8013f68 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800f5de:	4a08      	ldr	r2, [pc, #32]	@ (800f600 <HandleRadioRxErrorTimeout+0x114>)
 800f5e0:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f5e4:	f043 0320 	orr.w	r3, r3, #32
 800f5e8:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800f5ec:	f7ff f9ce 	bl	800e98c <UpdateRxSlotIdleState>
}
 800f5f0:	bf00      	nop
 800f5f2:	3710      	adds	r7, #16
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	20000e5c 	.word	0x20000e5c
 800f5fc:	0801fedc 	.word	0x0801fedc
 800f600:	2000093c 	.word	0x2000093c
 800f604:	20000cd4 	.word	0x20000cd4

0800f608 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f60c:	2106      	movs	r1, #6
 800f60e:	2005      	movs	r0, #5
 800f610:	f7ff ff6c 	bl	800f4ec <HandleRadioRxErrorTimeout>
}
 800f614:	bf00      	nop
 800f616:	bd80      	pop	{r7, pc}

0800f618 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f61c:	2104      	movs	r1, #4
 800f61e:	2003      	movs	r0, #3
 800f620:	f7ff ff64 	bl	800f4ec <HandleRadioRxErrorTimeout>
}
 800f624:	bf00      	nop
 800f626:	bd80      	pop	{r7, pc}

0800f628 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f62e:	f3ef 8310 	mrs	r3, PRIMASK
 800f632:	607b      	str	r3, [r7, #4]
  return(result);
 800f634:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f636:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f638:	b672      	cpsid	i
}
 800f63a:	bf00      	nop
    events = LoRaMacRadioEvents;
 800f63c:	4b1d      	ldr	r3, [pc, #116]	@ (800f6b4 <LoRaMacHandleIrqEvents+0x8c>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f642:	4b1c      	ldr	r3, [pc, #112]	@ (800f6b4 <LoRaMacHandleIrqEvents+0x8c>)
 800f644:	2200      	movs	r2, #0
 800f646:	601a      	str	r2, [r3, #0]
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	f383 8810 	msr	PRIMASK, r3
}
 800f652:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d027      	beq.n	800f6aa <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800f65a:	783b      	ldrb	r3, [r7, #0]
 800f65c:	f003 0320 	and.w	r3, r3, #32
 800f660:	b2db      	uxtb	r3, r3
 800f662:	2b00      	cmp	r3, #0
 800f664:	d001      	beq.n	800f66a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800f666:	f7ff f9a9 	bl	800e9bc <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f66a:	783b      	ldrb	r3, [r7, #0]
 800f66c:	f003 0310 	and.w	r3, r3, #16
 800f670:	b2db      	uxtb	r3, r3
 800f672:	2b00      	cmp	r3, #0
 800f674:	d001      	beq.n	800f67a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800f676:	f7ff fa55 	bl	800eb24 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f67a:	783b      	ldrb	r3, [r7, #0]
 800f67c:	f003 0308 	and.w	r3, r3, #8
 800f680:	b2db      	uxtb	r3, r3
 800f682:	2b00      	cmp	r3, #0
 800f684:	d001      	beq.n	800f68a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800f686:	f7ff ff05 	bl	800f494 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f68a:	783b      	ldrb	r3, [r7, #0]
 800f68c:	f003 0304 	and.w	r3, r3, #4
 800f690:	b2db      	uxtb	r3, r3
 800f692:	2b00      	cmp	r3, #0
 800f694:	d001      	beq.n	800f69a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800f696:	f7ff ffb7 	bl	800f608 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f69a:	783b      	ldrb	r3, [r7, #0]
 800f69c:	f003 0302 	and.w	r3, r3, #2
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d001      	beq.n	800f6aa <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800f6a6:	f7ff ffb7 	bl	800f618 <ProcessRadioRxTimeout>
        }
    }
}
 800f6aa:	bf00      	nop
 800f6ac:	3710      	adds	r7, #16
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
 800f6b2:	bf00      	nop
 800f6b4:	200019e4 	.word	0x200019e4

0800f6b8 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800f6bc:	4b0c      	ldr	r3, [pc, #48]	@ (800f6f0 <LoRaMacIsBusy+0x38>)
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	f003 0301 	and.w	r3, r3, #1
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d001      	beq.n	800f6ce <LoRaMacIsBusy+0x16>
    {
        return true;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	e00c      	b.n	800f6e8 <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f6ce:	4b09      	ldr	r3, [pc, #36]	@ (800f6f4 <LoRaMacIsBusy+0x3c>)
 800f6d0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d106      	bne.n	800f6e6 <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800f6d8:	4b06      	ldr	r3, [pc, #24]	@ (800f6f4 <LoRaMacIsBusy+0x3c>)
 800f6da:	f893 3496 	ldrb.w	r3, [r3, #1174]	@ 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d101      	bne.n	800f6e6 <LoRaMacIsBusy+0x2e>
    {
        return false;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	e000      	b.n	800f6e8 <LoRaMacIsBusy+0x30>
    }
    return true;
 800f6e6:	2301      	movs	r3, #1
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bc80      	pop	{r7}
 800f6ee:	4770      	bx	lr
 800f6f0:	200019e4 	.word	0x200019e4
 800f6f4:	2000093c 	.word	0x2000093c

0800f6f8 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	4603      	mov	r3, r0
 800f700:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800f702:	4a04      	ldr	r2, [pc, #16]	@ (800f714 <LoRaMacEnableRequests+0x1c>)
 800f704:	79fb      	ldrb	r3, [r7, #7]
 800f706:	f882 3496 	strb.w	r3, [r2, #1174]	@ 0x496
}
 800f70a:	bf00      	nop
 800f70c:	370c      	adds	r7, #12
 800f70e:	46bd      	mov	sp, r7
 800f710:	bc80      	pop	{r7}
 800f712:	4770      	bx	lr
 800f714:	2000093c 	.word	0x2000093c

0800f718 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f71e:	4b2c      	ldr	r3, [pc, #176]	@ (800f7d0 <LoRaMacHandleRequestEvents+0xb8>)
 800f720:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f724:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f726:	4b2a      	ldr	r3, [pc, #168]	@ (800f7d0 <LoRaMacHandleRequestEvents+0xb8>)
 800f728:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d14a      	bne.n	800f7c6 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f730:	4b27      	ldr	r3, [pc, #156]	@ (800f7d0 <LoRaMacHandleRequestEvents+0xb8>)
 800f732:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f736:	f003 0301 	and.w	r3, r3, #1
 800f73a:	b2db      	uxtb	r3, r3
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d006      	beq.n	800f74e <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f740:	4a23      	ldr	r2, [pc, #140]	@ (800f7d0 <LoRaMacHandleRequestEvents+0xb8>)
 800f742:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f746:	f36f 0300 	bfc	r3, #0, #1
 800f74a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f74e:	4b20      	ldr	r3, [pc, #128]	@ (800f7d0 <LoRaMacHandleRequestEvents+0xb8>)
 800f750:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f754:	f003 0304 	and.w	r3, r3, #4
 800f758:	b2db      	uxtb	r3, r3
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d006      	beq.n	800f76c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f75e:	4a1c      	ldr	r2, [pc, #112]	@ (800f7d0 <LoRaMacHandleRequestEvents+0xb8>)
 800f760:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f764:	f36f 0382 	bfc	r3, #2, #1
 800f768:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f76c:	2001      	movs	r0, #1
 800f76e:	f7ff ffc3 	bl	800f6f8 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f772:	793b      	ldrb	r3, [r7, #4]
 800f774:	f003 0301 	and.w	r3, r3, #1
 800f778:	b2db      	uxtb	r3, r3
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d005      	beq.n	800f78a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f77e:	4b14      	ldr	r3, [pc, #80]	@ (800f7d0 <LoRaMacHandleRequestEvents+0xb8>)
 800f780:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	4813      	ldr	r0, [pc, #76]	@ (800f7d4 <LoRaMacHandleRequestEvents+0xbc>)
 800f788:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f78a:	793b      	ldrb	r3, [r7, #4]
 800f78c:	f003 0304 	and.w	r3, r3, #4
 800f790:	b2db      	uxtb	r3, r3
 800f792:	2b00      	cmp	r3, #0
 800f794:	d00e      	beq.n	800f7b4 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f796:	4810      	ldr	r0, [pc, #64]	@ (800f7d8 <LoRaMacHandleRequestEvents+0xc0>)
 800f798:	f004 fc34 	bl	8014004 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f79c:	f004 fc7e 	bl	801409c <LoRaMacConfirmQueueGetCnt>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d006      	beq.n	800f7b4 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f7a6:	4a0a      	ldr	r2, [pc, #40]	@ (800f7d0 <LoRaMacHandleRequestEvents+0xb8>)
 800f7a8:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f7ac:	f043 0304 	orr.w	r3, r3, #4
 800f7b0:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f7b4:	f003 ff4a 	bl	801364c <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f7b8:	4a05      	ldr	r2, [pc, #20]	@ (800f7d0 <LoRaMacHandleRequestEvents+0xb8>)
 800f7ba:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f7be:	f36f 1345 	bfc	r3, #5, #1
 800f7c2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
}
 800f7c6:	bf00      	nop
 800f7c8:	3708      	adds	r7, #8
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	2000093c 	.word	0x2000093c
 800f7d4:	20000d80 	.word	0x20000d80
 800f7d8:	20000d94 	.word	0x20000d94

0800f7dc <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800f7e2:	4b07      	ldr	r3, [pc, #28]	@ (800f800 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800f7e4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d105      	bne.n	800f7f8 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800f7f0:	1dfb      	adds	r3, r7, #7
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f004 f9ec 	bl	8013bd0 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800f7f8:	bf00      	nop
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	2000093c 	.word	0x2000093c

0800f804 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f804:	b580      	push	{r7, lr}
 800f806:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f808:	4b16      	ldr	r3, [pc, #88]	@ (800f864 <LoRaMacHandleIndicationEvents+0x60>)
 800f80a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f80e:	f003 0308 	and.w	r3, r3, #8
 800f812:	b2db      	uxtb	r3, r3
 800f814:	2b00      	cmp	r3, #0
 800f816:	d00d      	beq.n	800f834 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f818:	4a12      	ldr	r2, [pc, #72]	@ (800f864 <LoRaMacHandleIndicationEvents+0x60>)
 800f81a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f81e:	f36f 03c3 	bfc	r3, #3, #1
 800f822:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800f826:	4b0f      	ldr	r3, [pc, #60]	@ (800f864 <LoRaMacHandleIndicationEvents+0x60>)
 800f828:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	490e      	ldr	r1, [pc, #56]	@ (800f868 <LoRaMacHandleIndicationEvents+0x64>)
 800f830:	480e      	ldr	r0, [pc, #56]	@ (800f86c <LoRaMacHandleIndicationEvents+0x68>)
 800f832:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f834:	4b0b      	ldr	r3, [pc, #44]	@ (800f864 <LoRaMacHandleIndicationEvents+0x60>)
 800f836:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f83a:	f003 0302 	and.w	r3, r3, #2
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	2b00      	cmp	r3, #0
 800f842:	d00d      	beq.n	800f860 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f844:	4a07      	ldr	r2, [pc, #28]	@ (800f864 <LoRaMacHandleIndicationEvents+0x60>)
 800f846:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f84a:	f36f 0341 	bfc	r3, #1, #1
 800f84e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800f852:	4b04      	ldr	r3, [pc, #16]	@ (800f864 <LoRaMacHandleIndicationEvents+0x60>)
 800f854:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	4903      	ldr	r1, [pc, #12]	@ (800f868 <LoRaMacHandleIndicationEvents+0x64>)
 800f85c:	4804      	ldr	r0, [pc, #16]	@ (800f870 <LoRaMacHandleIndicationEvents+0x6c>)
 800f85e:	4798      	blx	r3
    }
}
 800f860:	bf00      	nop
 800f862:	bd80      	pop	{r7, pc}
 800f864:	2000093c 	.word	0x2000093c
 800f868:	20000dcc 	.word	0x20000dcc
 800f86c:	20000da8 	.word	0x20000da8
 800f870:	20000d60 	.word	0x20000d60

0800f874 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f87a:	4b2a      	ldr	r3, [pc, #168]	@ (800f924 <LoRaMacHandleMcpsRequest+0xb0>)
 800f87c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f880:	f003 0301 	and.w	r3, r3, #1
 800f884:	b2db      	uxtb	r3, r3
 800f886:	2b00      	cmp	r3, #0
 800f888:	d048      	beq.n	800f91c <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800f88a:	2300      	movs	r3, #0
 800f88c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800f88e:	2300      	movs	r3, #0
 800f890:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f892:	4b24      	ldr	r3, [pc, #144]	@ (800f924 <LoRaMacHandleMcpsRequest+0xb0>)
 800f894:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d004      	beq.n	800f8a6 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f89c:	4b21      	ldr	r3, [pc, #132]	@ (800f924 <LoRaMacHandleMcpsRequest+0xb0>)
 800f89e:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f8a2:	2b03      	cmp	r3, #3
 800f8a4:	d104      	bne.n	800f8b0 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f8a6:	f002 f8f9 	bl	8011a9c <CheckRetransUnconfirmedUplink>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	71fb      	strb	r3, [r7, #7]
 800f8ae:	e010      	b.n	800f8d2 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f8b0:	4b1c      	ldr	r3, [pc, #112]	@ (800f924 <LoRaMacHandleMcpsRequest+0xb0>)
 800f8b2:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800f8b6:	2b01      	cmp	r3, #1
 800f8b8:	d10b      	bne.n	800f8d2 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800f8ba:	4b1a      	ldr	r3, [pc, #104]	@ (800f924 <LoRaMacHandleMcpsRequest+0xb0>)
 800f8bc:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d004      	beq.n	800f8ce <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f8c4:	f002 f916 	bl	8011af4 <CheckRetransConfirmedUplink>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	71fb      	strb	r3, [r7, #7]
 800f8cc:	e001      	b.n	800f8d2 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800f8d2:	79fb      	ldrb	r3, [r7, #7]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d00d      	beq.n	800f8f4 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f8d8:	4813      	ldr	r0, [pc, #76]	@ (800f928 <LoRaMacHandleMcpsRequest+0xb4>)
 800f8da:	f00c f9ad 	bl	801bc38 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f8de:	4b11      	ldr	r3, [pc, #68]	@ (800f924 <LoRaMacHandleMcpsRequest+0xb0>)
 800f8e0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f8e4:	f023 0320 	bic.w	r3, r3, #32
 800f8e8:	4a0e      	ldr	r2, [pc, #56]	@ (800f924 <LoRaMacHandleMcpsRequest+0xb0>)
 800f8ea:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800f8ee:	f002 f93b 	bl	8011b68 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f8f2:	e013      	b.n	800f91c <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800f8f4:	79bb      	ldrb	r3, [r7, #6]
 800f8f6:	f083 0301 	eor.w	r3, r3, #1
 800f8fa:	b2db      	uxtb	r3, r3
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d00d      	beq.n	800f91c <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f900:	4a08      	ldr	r2, [pc, #32]	@ (800f924 <LoRaMacHandleMcpsRequest+0xb0>)
 800f902:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f906:	f36f 1345 	bfc	r3, #5, #1
 800f90a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800f90e:	4b05      	ldr	r3, [pc, #20]	@ (800f924 <LoRaMacHandleMcpsRequest+0xb0>)
 800f910:	2200      	movs	r2, #0
 800f912:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            OnTxDelayedTimerEvent( NULL );
 800f916:	2000      	movs	r0, #0
 800f918:	f000 f9c8 	bl	800fcac <OnTxDelayedTimerEvent>
}
 800f91c:	bf00      	nop
 800f91e:	3708      	adds	r7, #8
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}
 800f924:	2000093c 	.word	0x2000093c
 800f928:	20000ca4 	.word	0x20000ca4

0800f92c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f930:	4b18      	ldr	r3, [pc, #96]	@ (800f994 <LoRaMacHandleMlmeRequest+0x68>)
 800f932:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f936:	f003 0304 	and.w	r3, r3, #4
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d026      	beq.n	800f98e <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f940:	2001      	movs	r0, #1
 800f942:	f004 fb45 	bl	8013fd0 <LoRaMacConfirmQueueIsCmdActive>
 800f946:	4603      	mov	r3, r0
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d012      	beq.n	800f972 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f94c:	2001      	movs	r0, #1
 800f94e:	f004 fae1 	bl	8013f14 <LoRaMacConfirmQueueGetStatus>
 800f952:	4603      	mov	r3, r0
 800f954:	2b00      	cmp	r3, #0
 800f956:	d103      	bne.n	800f960 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f958:	4b0e      	ldr	r3, [pc, #56]	@ (800f994 <LoRaMacHandleMlmeRequest+0x68>)
 800f95a:	2200      	movs	r2, #0
 800f95c:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f960:	4b0c      	ldr	r3, [pc, #48]	@ (800f994 <LoRaMacHandleMlmeRequest+0x68>)
 800f962:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f966:	f023 0302 	bic.w	r3, r3, #2
 800f96a:	4a0a      	ldr	r2, [pc, #40]	@ (800f994 <LoRaMacHandleMlmeRequest+0x68>)
 800f96c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800f970:	e00d      	b.n	800f98e <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800f972:	2005      	movs	r0, #5
 800f974:	f004 fb2c 	bl	8013fd0 <LoRaMacConfirmQueueIsCmdActive>
 800f978:	4603      	mov	r3, r0
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d007      	beq.n	800f98e <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f97e:	4b05      	ldr	r3, [pc, #20]	@ (800f994 <LoRaMacHandleMlmeRequest+0x68>)
 800f980:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f984:	f023 0302 	bic.w	r3, r3, #2
 800f988:	4a02      	ldr	r2, [pc, #8]	@ (800f994 <LoRaMacHandleMlmeRequest+0x68>)
 800f98a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800f98e:	bf00      	nop
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop
 800f994:	2000093c 	.word	0x2000093c

0800f998 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f99c:	200b      	movs	r0, #11
 800f99e:	f004 fb17 	bl	8013fd0 <LoRaMacConfirmQueueIsCmdActive>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d019      	beq.n	800f9dc <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f9a8:	4b0e      	ldr	r3, [pc, #56]	@ (800f9e4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f9aa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f9ae:	f003 0301 	and.w	r3, r3, #1
 800f9b2:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d111      	bne.n	800f9dc <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f9b8:	4b0a      	ldr	r3, [pc, #40]	@ (800f9e4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f9ba:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f9be:	f003 0304 	and.w	r3, r3, #4
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d009      	beq.n	800f9dc <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f9c8:	4b06      	ldr	r3, [pc, #24]	@ (800f9e4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f9ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f9ce:	f023 0302 	bic.w	r3, r3, #2
 800f9d2:	4a04      	ldr	r2, [pc, #16]	@ (800f9e4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f9d4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	e000      	b.n	800f9de <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f9dc:	2300      	movs	r3, #0
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	2000093c 	.word	0x2000093c

0800f9e8 <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b083      	sub	sp, #12
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	71fb      	strb	r3, [r7, #7]
 800f9f2:	460b      	mov	r3, r1
 800f9f4:	71bb      	strb	r3, [r7, #6]
 800f9f6:	4613      	mov	r3, r2
 800f9f8:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800f9fa:	79fb      	ldrb	r3, [r7, #7]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d00a      	beq.n	800fa16 <CheckForMinimumAbpDatarate+0x2e>
 800fa00:	79bb      	ldrb	r3, [r7, #6]
 800fa02:	2b01      	cmp	r3, #1
 800fa04:	d107      	bne.n	800fa16 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800fa06:	797b      	ldrb	r3, [r7, #5]
 800fa08:	f083 0301 	eor.w	r3, r3, #1
 800fa0c:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d001      	beq.n	800fa16 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800fa12:	2301      	movs	r3, #1
 800fa14:	e000      	b.n	800fa18 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800fa16:	2300      	movs	r3, #0
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	370c      	adds	r7, #12
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bc80      	pop	{r7}
 800fa20:	4770      	bx	lr
	...

0800fa24 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800fa24:	b480      	push	{r7}
 800fa26:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800fa28:	4b0d      	ldr	r3, [pc, #52]	@ (800fa60 <LoRaMacCheckForRxAbort+0x3c>)
 800fa2a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fa2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d00f      	beq.n	800fa56 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800fa36:	4b0a      	ldr	r3, [pc, #40]	@ (800fa60 <LoRaMacCheckForRxAbort+0x3c>)
 800fa38:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fa3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fa40:	4a07      	ldr	r2, [pc, #28]	@ (800fa60 <LoRaMacCheckForRxAbort+0x3c>)
 800fa42:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fa46:	4b06      	ldr	r3, [pc, #24]	@ (800fa60 <LoRaMacCheckForRxAbort+0x3c>)
 800fa48:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fa4c:	f023 0302 	bic.w	r3, r3, #2
 800fa50:	4a03      	ldr	r2, [pc, #12]	@ (800fa60 <LoRaMacCheckForRxAbort+0x3c>)
 800fa52:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800fa56:	bf00      	nop
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bc80      	pop	{r7}
 800fa5c:	4770      	bx	lr
 800fa5e:	bf00      	nop
 800fa60:	2000093c 	.word	0x2000093c

0800fa64 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800fa70:	2300      	movs	r3, #0
 800fa72:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800fa74:	4b50      	ldr	r3, [pc, #320]	@ (800fbb8 <LoRaMacHandleNvm+0x154>)
 800fa76:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	f040 8098 	bne.w	800fbb0 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2124      	movs	r1, #36	@ 0x24
 800fa84:	4618      	mov	r0, r3
 800fa86:	f007 ffe7 	bl	8017a58 <Crc32>
 800fa8a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa90:	68ba      	ldr	r2, [r7, #8]
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d006      	beq.n	800faa4 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	68ba      	ldr	r2, [r7, #8]
 800fa9a:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800fa9c:	89fb      	ldrh	r3, [r7, #14]
 800fa9e:	f043 0301 	orr.w	r3, r3, #1
 800faa2:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	3328      	adds	r3, #40	@ 0x28
 800faa8:	2114      	movs	r1, #20
 800faaa:	4618      	mov	r0, r3
 800faac:	f007 ffd4 	bl	8017a58 <Crc32>
 800fab0:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fab6:	68ba      	ldr	r2, [r7, #8]
 800fab8:	429a      	cmp	r2, r3
 800faba:	d006      	beq.n	800faca <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	68ba      	ldr	r2, [r7, #8]
 800fac0:	63da      	str	r2, [r3, #60]	@ 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800fac2:	89fb      	ldrh	r3, [r7, #14]
 800fac4:	f043 0302 	orr.w	r3, r3, #2
 800fac8:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	3340      	adds	r3, #64	@ 0x40
 800face:	21e0      	movs	r1, #224	@ 0xe0
 800fad0:	4618      	mov	r0, r3
 800fad2:	f007 ffc1 	bl	8017a58 <Crc32>
 800fad6:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800fade:	68ba      	ldr	r2, [r7, #8]
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d007      	beq.n	800faf4 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	68ba      	ldr	r2, [r7, #8]
 800fae8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800faec:	89fb      	ldrh	r3, [r7, #14]
 800faee:	f043 0304 	orr.w	r3, r3, #4
 800faf2:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800fafa:	21bc      	movs	r1, #188	@ 0xbc
 800fafc:	4618      	mov	r0, r3
 800fafe:	f007 ffab 	bl	8017a58 <Crc32>
 800fb02:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800fb0a:	68ba      	ldr	r2, [r7, #8]
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d007      	beq.n	800fb20 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	68ba      	ldr	r2, [r7, #8]
 800fb14:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800fb18:	89fb      	ldrh	r3, [r7, #14]
 800fb1a:	f043 0308 	orr.w	r3, r3, #8
 800fb1e:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fb26:	2100      	movs	r1, #0
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f007 ff95 	bl	8017a58 <Crc32>
 800fb2e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 800fb36:	68ba      	ldr	r2, [r7, #8]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d007      	beq.n	800fb4c <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	68ba      	ldr	r2, [r7, #8]
 800fb40:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800fb44:	89fb      	ldrh	r3, [r7, #14]
 800fb46:	f043 0310 	orr.w	r3, r3, #16
 800fb4a:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800fb52:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800fb56:	4618      	mov	r0, r3
 800fb58:	f007 ff7e 	bl	8017a58 <Crc32>
 800fb5c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8d3 3560 	ldr.w	r3, [r3, #1376]	@ 0x560
 800fb64:	68ba      	ldr	r2, [r7, #8]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d007      	beq.n	800fb7a <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	68ba      	ldr	r2, [r7, #8]
 800fb6e:	f8c3 2560 	str.w	r2, [r3, #1376]	@ 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800fb72:	89fb      	ldrh	r3, [r7, #14]
 800fb74:	f043 0320 	orr.w	r3, r3, #32
 800fb78:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 800fb80:	2114      	movs	r1, #20
 800fb82:	4618      	mov	r0, r3
 800fb84:	f007 ff68 	bl	8017a58 <Crc32>
 800fb88:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 800fb90:	68ba      	ldr	r2, [r7, #8]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d007      	beq.n	800fba6 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	68ba      	ldr	r2, [r7, #8]
 800fb9a:	f8c3 2578 	str.w	r2, [r3, #1400]	@ 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800fb9e:	89fb      	ldrh	r3, [r7, #14]
 800fba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fba4:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800fba6:	89fb      	ldrh	r3, [r7, #14]
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f002 f819 	bl	8011be0 <CallNvmDataChangeCallback>
 800fbae:	e000      	b.n	800fbb2 <LoRaMacHandleNvm+0x14e>
        return;
 800fbb0:	bf00      	nop
}
 800fbb2:	3710      	adds	r7, #16
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	2000093c 	.word	0x2000093c

0800fbbc <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d00d      	beq.n	800fbe8 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800fbcc:	6838      	ldr	r0, [r7, #0]
 800fbce:	f00c f95f 	bl	801be90 <UTIL_TIMER_GetElapsedTime>
 800fbd2:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800fbd4:	68fa      	ldr	r2, [r7, #12]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d905      	bls.n	800fbe8 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800fbdc:	4b05      	ldr	r3, [pc, #20]	@ (800fbf4 <LoRaMacHandleResponseTimeout+0x38>)
 800fbde:	2200      	movs	r2, #0
 800fbe0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	e000      	b.n	800fbea <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800fbe8:	2300      	movs	r3, #0
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3710      	adds	r7, #16
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}
 800fbf2:	bf00      	nop
 800fbf4:	20000e5c 	.word	0x20000e5c

0800fbf8 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800fc02:	f7ff fd11 	bl	800f628 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800fc06:	f003 fd90 	bl	801372a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800fc0a:	4b26      	ldr	r3, [pc, #152]	@ (800fca4 <LoRaMacProcess+0xac>)
 800fc0c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800fc10:	f003 0320 	and.w	r3, r3, #32
 800fc14:	b2db      	uxtb	r3, r3
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d025      	beq.n	800fc66 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	f7ff fd6c 	bl	800f6f8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800fc20:	f7ff ff00 	bl	800fa24 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800fc24:	f001 fffa 	bl	8011c1c <IsRequestPending>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d006      	beq.n	800fc3c <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800fc2e:	f7ff feb3 	bl	800f998 <LoRaMacCheckForBeaconAcquisition>
 800fc32:	4603      	mov	r3, r0
 800fc34:	461a      	mov	r2, r3
 800fc36:	79fb      	ldrb	r3, [r7, #7]
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800fc3c:	79fb      	ldrb	r3, [r7, #7]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d103      	bne.n	800fc4a <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800fc42:	f7ff fe73 	bl	800f92c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800fc46:	f7ff fe15 	bl	800f874 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800fc4a:	f7ff fd65 	bl	800f718 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800fc4e:	f7ff fdc5 	bl	800f7dc <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800fc52:	2001      	movs	r0, #1
 800fc54:	f7ff fd50 	bl	800f6f8 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800fc58:	4a12      	ldr	r2, [pc, #72]	@ (800fca4 <LoRaMacProcess+0xac>)
 800fc5a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fc5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc62:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
    LoRaMacHandleIndicationEvents( );
 800fc66:	f7ff fdcd 	bl	800f804 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800fc6a:	4b0e      	ldr	r3, [pc, #56]	@ (800fca4 <LoRaMacProcess+0xac>)
 800fc6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800fc70:	2b02      	cmp	r3, #2
 800fc72:	d101      	bne.n	800fc78 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800fc74:	f001 fbee 	bl	8011454 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800fc78:	4b0a      	ldr	r3, [pc, #40]	@ (800fca4 <LoRaMacProcess+0xac>)
 800fc7a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800fc7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d009      	beq.n	800fc9c <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800fc88:	4a06      	ldr	r2, [pc, #24]	@ (800fca4 <LoRaMacProcess+0xac>)
 800fc8a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800fc8e:	f36f 1386 	bfc	r3, #6, #1
 800fc92:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        LoRaMacHandleNvm( &Nvm );
 800fc96:	4804      	ldr	r0, [pc, #16]	@ (800fca8 <LoRaMacProcess+0xb0>)
 800fc98:	f7ff fee4 	bl	800fa64 <LoRaMacHandleNvm>
    }
}
 800fc9c:	bf00      	nop
 800fc9e:	3708      	adds	r7, #8
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}
 800fca4:	2000093c 	.word	0x2000093c
 800fca8:	20000e5c 	.word	0x20000e5c

0800fcac <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800fcb4:	481e      	ldr	r0, [pc, #120]	@ (800fd30 <OnTxDelayedTimerEvent+0x84>)
 800fcb6:	f00b ffbf 	bl	801bc38 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800fcba:	4b1e      	ldr	r3, [pc, #120]	@ (800fd34 <OnTxDelayedTimerEvent+0x88>)
 800fcbc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fcc0:	f023 0320 	bic.w	r3, r3, #32
 800fcc4:	4a1b      	ldr	r2, [pc, #108]	@ (800fd34 <OnTxDelayedTimerEvent+0x88>)
 800fcc6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800fcca:	4b1b      	ldr	r3, [pc, #108]	@ (800fd38 <OnTxDelayedTimerEvent+0x8c>)
 800fccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fcd0:	4a18      	ldr	r2, [pc, #96]	@ (800fd34 <OnTxDelayedTimerEvent+0x88>)
 800fcd2:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 800fcd6:	4611      	mov	r1, r2
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7ff ff6f 	bl	800fbbc <LoRaMacHandleResponseTimeout>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d11e      	bne.n	800fd22 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800fce4:	2001      	movs	r0, #1
 800fce6:	f001 f93b 	bl	8010f60 <ScheduleTx>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d01a      	beq.n	800fd26 <OnTxDelayedTimerEvent+0x7a>
 800fcf0:	2b0b      	cmp	r3, #11
 800fcf2:	d018      	beq.n	800fd26 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fcf4:	4b10      	ldr	r3, [pc, #64]	@ (800fd38 <OnTxDelayedTimerEvent+0x8c>)
 800fcf6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fcfa:	b2da      	uxtb	r2, r3
 800fcfc:	4b0d      	ldr	r3, [pc, #52]	@ (800fd34 <OnTxDelayedTimerEvent+0x88>)
 800fcfe:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800fd02:	4b0c      	ldr	r3, [pc, #48]	@ (800fd34 <OnTxDelayedTimerEvent+0x88>)
 800fd04:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800fd08:	4b0a      	ldr	r3, [pc, #40]	@ (800fd34 <OnTxDelayedTimerEvent+0x88>)
 800fd0a:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800fd0e:	4b09      	ldr	r3, [pc, #36]	@ (800fd34 <OnTxDelayedTimerEvent+0x88>)
 800fd10:	2209      	movs	r2, #9
 800fd12:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800fd16:	2009      	movs	r0, #9
 800fd18:	f004 f926 	bl	8013f68 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800fd1c:	f001 ff24 	bl	8011b68 <StopRetransmission>
            break;
 800fd20:	e002      	b.n	800fd28 <OnTxDelayedTimerEvent+0x7c>
        return;
 800fd22:	bf00      	nop
 800fd24:	e000      	b.n	800fd28 <OnTxDelayedTimerEvent+0x7c>
            break;
 800fd26:	bf00      	nop
        }
    }
}
 800fd28:	3708      	adds	r7, #8
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	20000ca4 	.word	0x20000ca4
 800fd34:	2000093c 	.word	0x2000093c
 800fd38:	20000e5c 	.word	0x20000e5c

0800fd3c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800fd44:	4b17      	ldr	r3, [pc, #92]	@ (800fda4 <OnRxWindow1TimerEvent+0x68>)
 800fd46:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800fd4a:	4b16      	ldr	r3, [pc, #88]	@ (800fda4 <OnRxWindow1TimerEvent+0x68>)
 800fd4c:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800fd50:	4b15      	ldr	r3, [pc, #84]	@ (800fda8 <OnRxWindow1TimerEvent+0x6c>)
 800fd52:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800fd56:	b25a      	sxtb	r2, r3
 800fd58:	4b12      	ldr	r3, [pc, #72]	@ (800fda4 <OnRxWindow1TimerEvent+0x68>)
 800fd5a:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fd5e:	4b12      	ldr	r3, [pc, #72]	@ (800fda8 <OnRxWindow1TimerEvent+0x6c>)
 800fd60:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800fd64:	4b0f      	ldr	r3, [pc, #60]	@ (800fda4 <OnRxWindow1TimerEvent+0x68>)
 800fd66:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fd6a:	4b0f      	ldr	r3, [pc, #60]	@ (800fda8 <OnRxWindow1TimerEvent+0x6c>)
 800fd6c:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800fd70:	4b0c      	ldr	r3, [pc, #48]	@ (800fda4 <OnRxWindow1TimerEvent+0x68>)
 800fd72:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800fd76:	4b0b      	ldr	r3, [pc, #44]	@ (800fda4 <OnRxWindow1TimerEvent+0x68>)
 800fd78:	2200      	movs	r2, #0
 800fd7a:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800fd7e:	4b09      	ldr	r3, [pc, #36]	@ (800fda4 <OnRxWindow1TimerEvent+0x68>)
 800fd80:	2200      	movs	r2, #0
 800fd82:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800fd86:	4b08      	ldr	r3, [pc, #32]	@ (800fda8 <OnRxWindow1TimerEvent+0x6c>)
 800fd88:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800fd8c:	4b05      	ldr	r3, [pc, #20]	@ (800fda4 <OnRxWindow1TimerEvent+0x68>)
 800fd8e:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800fd92:	4906      	ldr	r1, [pc, #24]	@ (800fdac <OnRxWindow1TimerEvent+0x70>)
 800fd94:	4806      	ldr	r0, [pc, #24]	@ (800fdb0 <OnRxWindow1TimerEvent+0x74>)
 800fd96:	f001 fb29 	bl	80113ec <RxWindowSetup>
}
 800fd9a:	bf00      	nop
 800fd9c:	3708      	adds	r7, #8
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	2000093c 	.word	0x2000093c
 800fda8:	20000e5c 	.word	0x20000e5c
 800fdac:	20000cf4 	.word	0x20000cf4
 800fdb0:	20000cbc 	.word	0x20000cbc

0800fdb4 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b082      	sub	sp, #8
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fdbc:	4b19      	ldr	r3, [pc, #100]	@ (800fe24 <OnRxWindow2TimerEvent+0x70>)
 800fdbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d029      	beq.n	800fe1a <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fdc6:	4b17      	ldr	r3, [pc, #92]	@ (800fe24 <OnRxWindow2TimerEvent+0x70>)
 800fdc8:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800fdcc:	4b15      	ldr	r3, [pc, #84]	@ (800fe24 <OnRxWindow2TimerEvent+0x70>)
 800fdce:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fdd2:	4b15      	ldr	r3, [pc, #84]	@ (800fe28 <OnRxWindow2TimerEvent+0x74>)
 800fdd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fdd6:	4a13      	ldr	r2, [pc, #76]	@ (800fe24 <OnRxWindow2TimerEvent+0x70>)
 800fdd8:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fddc:	4b12      	ldr	r3, [pc, #72]	@ (800fe28 <OnRxWindow2TimerEvent+0x74>)
 800fdde:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800fde2:	4b10      	ldr	r3, [pc, #64]	@ (800fe24 <OnRxWindow2TimerEvent+0x70>)
 800fde4:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fde8:	4b0f      	ldr	r3, [pc, #60]	@ (800fe28 <OnRxWindow2TimerEvent+0x74>)
 800fdea:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800fdee:	4b0d      	ldr	r3, [pc, #52]	@ (800fe24 <OnRxWindow2TimerEvent+0x70>)
 800fdf0:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fdf4:	4b0b      	ldr	r3, [pc, #44]	@ (800fe24 <OnRxWindow2TimerEvent+0x70>)
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fdfc:	4b09      	ldr	r3, [pc, #36]	@ (800fe24 <OnRxWindow2TimerEvent+0x70>)
 800fdfe:	2201      	movs	r2, #1
 800fe00:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800fe04:	4b08      	ldr	r3, [pc, #32]	@ (800fe28 <OnRxWindow2TimerEvent+0x74>)
 800fe06:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800fe0a:	4b06      	ldr	r3, [pc, #24]	@ (800fe24 <OnRxWindow2TimerEvent+0x70>)
 800fe0c:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800fe10:	4906      	ldr	r1, [pc, #24]	@ (800fe2c <OnRxWindow2TimerEvent+0x78>)
 800fe12:	4807      	ldr	r0, [pc, #28]	@ (800fe30 <OnRxWindow2TimerEvent+0x7c>)
 800fe14:	f001 faea 	bl	80113ec <RxWindowSetup>
 800fe18:	e000      	b.n	800fe1c <OnRxWindow2TimerEvent+0x68>
        return;
 800fe1a:	bf00      	nop
}
 800fe1c:	3708      	adds	r7, #8
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	2000093c 	.word	0x2000093c
 800fe28:	20000e5c 	.word	0x20000e5c
 800fe2c:	20000d0c 	.word	0x20000d0c
 800fe30:	20000cd4 	.word	0x20000cd4

0800fe34 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800fe3c:	480f      	ldr	r0, [pc, #60]	@ (800fe7c <OnRetransmitTimeoutTimerEvent+0x48>)
 800fe3e:	f00b fefb 	bl	801bc38 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800fe42:	4b0f      	ldr	r3, [pc, #60]	@ (800fe80 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800fe44:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d003      	beq.n	800fe54 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800fe4c:	4b0c      	ldr	r3, [pc, #48]	@ (800fe80 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800fe4e:	2201      	movs	r2, #1
 800fe50:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800fe54:	4b0a      	ldr	r3, [pc, #40]	@ (800fe80 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800fe56:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d00a      	beq.n	800fe74 <OnRetransmitTimeoutTimerEvent+0x40>
 800fe5e:	4b08      	ldr	r3, [pc, #32]	@ (800fe80 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800fe60:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fe64:	691b      	ldr	r3, [r3, #16]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d004      	beq.n	800fe74 <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800fe6a:	4b05      	ldr	r3, [pc, #20]	@ (800fe80 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800fe6c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fe70:	691b      	ldr	r3, [r3, #16]
 800fe72:	4798      	blx	r3
    }
}
 800fe74:	bf00      	nop
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	20000d40 	.word	0x20000d40
 800fe80:	2000093c 	.word	0x2000093c

0800fe84 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60ba      	str	r2, [r7, #8]
 800fe8c:	607b      	str	r3, [r7, #4]
 800fe8e:	4603      	mov	r3, r0
 800fe90:	73fb      	strb	r3, [r7, #15]
 800fe92:	460b      	mov	r3, r1
 800fe94:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d005      	beq.n	800fea8 <GetFCntDown+0x24>
 800fe9c:	69bb      	ldr	r3, [r7, #24]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d002      	beq.n	800fea8 <GetFCntDown+0x24>
 800fea2:	69fb      	ldr	r3, [r7, #28]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d101      	bne.n	800feac <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fea8:	2309      	movs	r3, #9
 800feaa:	e028      	b.n	800fefe <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800feac:	7bfb      	ldrb	r3, [r7, #15]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d016      	beq.n	800fee0 <GetFCntDown+0x5c>
 800feb2:	2b01      	cmp	r3, #1
 800feb4:	d118      	bne.n	800fee8 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800feb6:	79bb      	ldrb	r3, [r7, #6]
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d10d      	bne.n	800fed8 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800febc:	7bbb      	ldrb	r3, [r7, #14]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d002      	beq.n	800fec8 <GetFCntDown+0x44>
 800fec2:	7bbb      	ldrb	r3, [r7, #14]
 800fec4:	2b03      	cmp	r3, #3
 800fec6:	d103      	bne.n	800fed0 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800fec8:	69bb      	ldr	r3, [r7, #24]
 800feca:	2202      	movs	r2, #2
 800fecc:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800fece:	e00d      	b.n	800feec <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	2201      	movs	r2, #1
 800fed4:	701a      	strb	r2, [r3, #0]
            break;
 800fed6:	e009      	b.n	800feec <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800fed8:	69bb      	ldr	r3, [r7, #24]
 800feda:	2203      	movs	r2, #3
 800fedc:	701a      	strb	r2, [r3, #0]
            break;
 800fede:	e005      	b.n	800feec <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	2204      	movs	r2, #4
 800fee4:	701a      	strb	r2, [r3, #0]
            break;
 800fee6:	e001      	b.n	800feec <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800fee8:	2305      	movs	r3, #5
 800feea:	e008      	b.n	800fefe <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800feec:	69bb      	ldr	r3, [r7, #24]
 800feee:	7818      	ldrb	r0, [r3, #0]
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	89db      	ldrh	r3, [r3, #14]
 800fef4:	69fa      	ldr	r2, [r7, #28]
 800fef6:	4619      	mov	r1, r3
 800fef8:	f004 fc60 	bl	80147bc <LoRaMacCryptoGetFCntDown>
 800fefc:	4603      	mov	r3, r0
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3710      	adds	r7, #16
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}
	...

0800ff08 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800ff08:	b5b0      	push	{r4, r5, r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	4603      	mov	r3, r0
 800ff10:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ff12:	2303      	movs	r3, #3
 800ff14:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800ff16:	4b62      	ldr	r3, [pc, #392]	@ (80100a0 <SwitchClass+0x198>)
 800ff18:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ff1c:	2b02      	cmp	r3, #2
 800ff1e:	f000 80a7 	beq.w	8010070 <SwitchClass+0x168>
 800ff22:	2b02      	cmp	r3, #2
 800ff24:	f300 80b6 	bgt.w	8010094 <SwitchClass+0x18c>
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d003      	beq.n	800ff34 <SwitchClass+0x2c>
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	f000 8091 	beq.w	8010054 <SwitchClass+0x14c>
 800ff32:	e0af      	b.n	8010094 <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800ff34:	79fb      	ldrb	r3, [r7, #7]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d107      	bne.n	800ff4a <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ff3a:	4b59      	ldr	r3, [pc, #356]	@ (80100a0 <SwitchClass+0x198>)
 800ff3c:	4a58      	ldr	r2, [pc, #352]	@ (80100a0 <SwitchClass+0x198>)
 800ff3e:	336c      	adds	r3, #108	@ 0x6c
 800ff40:	3264      	adds	r2, #100	@ 0x64
 800ff42:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff46:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800ff4a:	79fb      	ldrb	r3, [r7, #7]
 800ff4c:	2b01      	cmp	r3, #1
 800ff4e:	d10c      	bne.n	800ff6a <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ff50:	79fb      	ldrb	r3, [r7, #7]
 800ff52:	4618      	mov	r0, r3
 800ff54:	f003 fb80 	bl	8013658 <LoRaMacClassBSwitchClass>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800ff5c:	7bfb      	ldrb	r3, [r7, #15]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d103      	bne.n	800ff6a <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ff62:	4a4f      	ldr	r2, [pc, #316]	@ (80100a0 <SwitchClass+0x198>)
 800ff64:	79fb      	ldrb	r3, [r7, #7]
 800ff66:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800ff6a:	79fb      	ldrb	r3, [r7, #7]
 800ff6c:	2b02      	cmp	r3, #2
 800ff6e:	f040 808c 	bne.w	801008a <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ff72:	4a4b      	ldr	r2, [pc, #300]	@ (80100a0 <SwitchClass+0x198>)
 800ff74:	79fb      	ldrb	r3, [r7, #7]
 800ff76:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ff7a:	4a4a      	ldr	r2, [pc, #296]	@ (80100a4 <SwitchClass+0x19c>)
 800ff7c:	4b49      	ldr	r3, [pc, #292]	@ (80100a4 <SwitchClass+0x19c>)
 800ff7e:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800ff82:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800ff86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ff8e:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ff92:	4b44      	ldr	r3, [pc, #272]	@ (80100a4 <SwitchClass+0x19c>)
 800ff94:	2202      	movs	r2, #2
 800ff96:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	73bb      	strb	r3, [r7, #14]
 800ff9e:	e049      	b.n	8010034 <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800ffa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffa4:	4a3e      	ldr	r2, [pc, #248]	@ (80100a0 <SwitchClass+0x198>)
 800ffa6:	212c      	movs	r1, #44	@ 0x2c
 800ffa8:	fb01 f303 	mul.w	r3, r1, r3
 800ffac:	4413      	add	r3, r2
 800ffae:	33da      	adds	r3, #218	@ 0xda
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d038      	beq.n	8010028 <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800ffb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffba:	4a39      	ldr	r2, [pc, #228]	@ (80100a0 <SwitchClass+0x198>)
 800ffbc:	212c      	movs	r1, #44	@ 0x2c
 800ffbe:	fb01 f303 	mul.w	r3, r1, r3
 800ffc2:	4413      	add	r3, r2
 800ffc4:	33f0      	adds	r3, #240	@ 0xf0
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	4a35      	ldr	r2, [pc, #212]	@ (80100a0 <SwitchClass+0x198>)
 800ffca:	66d3      	str	r3, [r2, #108]	@ 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800ffcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffd0:	4a33      	ldr	r2, [pc, #204]	@ (80100a0 <SwitchClass+0x198>)
 800ffd2:	212c      	movs	r1, #44	@ 0x2c
 800ffd4:	fb01 f303 	mul.w	r3, r1, r3
 800ffd8:	4413      	add	r3, r2
 800ffda:	33f4      	adds	r3, #244	@ 0xf4
 800ffdc:	f993 3000 	ldrsb.w	r3, [r3]
 800ffe0:	b2da      	uxtb	r2, r3
 800ffe2:	4b2f      	ldr	r3, [pc, #188]	@ (80100a0 <SwitchClass+0x198>)
 800ffe4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ffe8:	4b2e      	ldr	r3, [pc, #184]	@ (80100a4 <SwitchClass+0x19c>)
 800ffea:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800ffee:	4b2d      	ldr	r3, [pc, #180]	@ (80100a4 <SwitchClass+0x19c>)
 800fff0:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800fff4:	4b2a      	ldr	r3, [pc, #168]	@ (80100a0 <SwitchClass+0x198>)
 800fff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fff8:	4a2a      	ldr	r2, [pc, #168]	@ (80100a4 <SwitchClass+0x19c>)
 800fffa:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fffe:	4b28      	ldr	r3, [pc, #160]	@ (80100a0 <SwitchClass+0x198>)
 8010000:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8010004:	4b27      	ldr	r3, [pc, #156]	@ (80100a4 <SwitchClass+0x19c>)
 8010006:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801000a:	4b25      	ldr	r3, [pc, #148]	@ (80100a0 <SwitchClass+0x198>)
 801000c:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8010010:	4b24      	ldr	r3, [pc, #144]	@ (80100a4 <SwitchClass+0x19c>)
 8010012:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010016:	4b23      	ldr	r3, [pc, #140]	@ (80100a4 <SwitchClass+0x19c>)
 8010018:	2203      	movs	r2, #3
 801001a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 801001e:	4b21      	ldr	r3, [pc, #132]	@ (80100a4 <SwitchClass+0x19c>)
 8010020:	2201      	movs	r2, #1
 8010022:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 8010026:	e009      	b.n	801003c <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010028:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801002c:	b2db      	uxtb	r3, r3
 801002e:	3301      	adds	r3, #1
 8010030:	b2db      	uxtb	r3, r3
 8010032:	73bb      	strb	r3, [r7, #14]
 8010034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010038:	2b00      	cmp	r3, #0
 801003a:	ddb1      	ble.n	800ffa0 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 801003c:	4b19      	ldr	r3, [pc, #100]	@ (80100a4 <SwitchClass+0x19c>)
 801003e:	2200      	movs	r2, #0
 8010040:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010044:	4b18      	ldr	r3, [pc, #96]	@ (80100a8 <SwitchClass+0x1a0>)
 8010046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010048:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 801004a:	f001 fa03 	bl	8011454 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 801004e:	2300      	movs	r3, #0
 8010050:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010052:	e01a      	b.n	801008a <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010054:	79fb      	ldrb	r3, [r7, #7]
 8010056:	4618      	mov	r0, r3
 8010058:	f003 fafe 	bl	8013658 <LoRaMacClassBSwitchClass>
 801005c:	4603      	mov	r3, r0
 801005e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010060:	7bfb      	ldrb	r3, [r7, #15]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d113      	bne.n	801008e <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010066:	4a0e      	ldr	r2, [pc, #56]	@ (80100a0 <SwitchClass+0x198>)
 8010068:	79fb      	ldrb	r3, [r7, #7]
 801006a:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
            }
            break;
 801006e:	e00e      	b.n	801008e <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010070:	79fb      	ldrb	r3, [r7, #7]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d10d      	bne.n	8010092 <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010076:	4a0a      	ldr	r2, [pc, #40]	@ (80100a0 <SwitchClass+0x198>)
 8010078:	79fb      	ldrb	r3, [r7, #7]
 801007a:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 801007e:	4b0a      	ldr	r3, [pc, #40]	@ (80100a8 <SwitchClass+0x1a0>)
 8010080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010082:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010084:	2300      	movs	r3, #0
 8010086:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010088:	e003      	b.n	8010092 <SwitchClass+0x18a>
            break;
 801008a:	bf00      	nop
 801008c:	e002      	b.n	8010094 <SwitchClass+0x18c>
            break;
 801008e:	bf00      	nop
 8010090:	e000      	b.n	8010094 <SwitchClass+0x18c>
            break;
 8010092:	bf00      	nop
        }
    }

    return status;
 8010094:	7bfb      	ldrb	r3, [r7, #15]
}
 8010096:	4618      	mov	r0, r3
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bdb0      	pop	{r4, r5, r7, pc}
 801009e:	bf00      	nop
 80100a0:	20000e5c 	.word	0x20000e5c
 80100a4:	2000093c 	.word	0x2000093c
 80100a8:	0801fedc 	.word	0x0801fedc

080100ac <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b086      	sub	sp, #24
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	4603      	mov	r3, r0
 80100b4:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80100b6:	4b10      	ldr	r3, [pc, #64]	@ (80100f8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80100b8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80100bc:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 80100be:	79fb      	ldrb	r3, [r7, #7]
 80100c0:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80100c2:	230d      	movs	r3, #13
 80100c4:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80100c6:	4b0c      	ldr	r3, [pc, #48]	@ (80100f8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80100c8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d001      	beq.n	80100d4 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80100d0:	230e      	movs	r3, #14
 80100d2:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80100d4:	4b08      	ldr	r3, [pc, #32]	@ (80100f8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80100d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80100da:	f107 0210 	add.w	r2, r7, #16
 80100de:	4611      	mov	r1, r2
 80100e0:	4618      	mov	r0, r3
 80100e2:	f005 f9c3 	bl	801546c <RegionGetPhyParam>
 80100e6:	4603      	mov	r3, r0
 80100e8:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	b2db      	uxtb	r3, r3
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3718      	adds	r7, #24
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	20000e5c 	.word	0x20000e5c

080100fc <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b084      	sub	sp, #16
 8010100:	af00      	add	r7, sp, #0
 8010102:	4603      	mov	r3, r0
 8010104:	71fb      	strb	r3, [r7, #7]
 8010106:	460b      	mov	r3, r1
 8010108:	71bb      	strb	r3, [r7, #6]
 801010a:	4613      	mov	r3, r2
 801010c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 801010e:	2300      	movs	r3, #0
 8010110:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8010112:	2300      	movs	r3, #0
 8010114:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010116:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801011a:	4618      	mov	r0, r3
 801011c:	f7ff ffc6 	bl	80100ac <GetMaxAppPayloadWithoutFOptsLength>
 8010120:	4603      	mov	r3, r0
 8010122:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8010124:	79fb      	ldrb	r3, [r7, #7]
 8010126:	b29a      	uxth	r2, r3
 8010128:	797b      	ldrb	r3, [r7, #5]
 801012a:	b29b      	uxth	r3, r3
 801012c:	4413      	add	r3, r2
 801012e:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010130:	89ba      	ldrh	r2, [r7, #12]
 8010132:	89fb      	ldrh	r3, [r7, #14]
 8010134:	429a      	cmp	r2, r3
 8010136:	d804      	bhi.n	8010142 <ValidatePayloadLength+0x46>
 8010138:	89bb      	ldrh	r3, [r7, #12]
 801013a:	2bff      	cmp	r3, #255	@ 0xff
 801013c:	d801      	bhi.n	8010142 <ValidatePayloadLength+0x46>
    {
        return true;
 801013e:	2301      	movs	r3, #1
 8010140:	e000      	b.n	8010144 <ValidatePayloadLength+0x48>
    }
    return false;
 8010142:	2300      	movs	r3, #0
}
 8010144:	4618      	mov	r0, r3
 8010146:	3710      	adds	r7, #16
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 801014c:	b590      	push	{r4, r7, lr}
 801014e:	b0a5      	sub	sp, #148	@ 0x94
 8010150:	af02      	add	r7, sp, #8
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	4608      	mov	r0, r1
 8010156:	4611      	mov	r1, r2
 8010158:	461a      	mov	r2, r3
 801015a:	4603      	mov	r3, r0
 801015c:	70fb      	strb	r3, [r7, #3]
 801015e:	460b      	mov	r3, r1
 8010160:	70bb      	strb	r3, [r7, #2]
 8010162:	4613      	mov	r3, r2
 8010164:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8010166:	2300      	movs	r3, #0
 8010168:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 801016c:	2300      	movs	r3, #0
 801016e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010172:	2300      	movs	r3, #0
 8010174:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8010178:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 801017c:	2b00      	cmp	r3, #0
 801017e:	f000 84b9 	beq.w	8010af4 <ProcessMacCommands+0x9a8>
 8010182:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8010186:	2b01      	cmp	r3, #1
 8010188:	f040 84ba 	bne.w	8010b00 <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 801018c:	f000 bcb2 	b.w	8010af4 <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010190:	78fb      	ldrb	r3, [r7, #3]
 8010192:	687a      	ldr	r2, [r7, #4]
 8010194:	4413      	add	r3, r2
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	4618      	mov	r0, r3
 801019a:	f003 fd41 	bl	8013c20 <LoRaMacCommandsGetCmdSize>
 801019e:	4603      	mov	r3, r0
 80101a0:	461a      	mov	r2, r3
 80101a2:	78fb      	ldrb	r3, [r7, #3]
 80101a4:	441a      	add	r2, r3
 80101a6:	78bb      	ldrb	r3, [r7, #2]
 80101a8:	429a      	cmp	r2, r3
 80101aa:	f300 84ab 	bgt.w	8010b04 <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 80101ae:	78fb      	ldrb	r3, [r7, #3]
 80101b0:	1c5a      	adds	r2, r3, #1
 80101b2:	70fa      	strb	r2, [r7, #3]
 80101b4:	461a      	mov	r2, r3
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	4413      	add	r3, r2
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	3b02      	subs	r3, #2
 80101be:	2b11      	cmp	r3, #17
 80101c0:	f200 84a2 	bhi.w	8010b08 <ProcessMacCommands+0x9bc>
 80101c4:	a201      	add	r2, pc, #4	@ (adr r2, 80101cc <ProcessMacCommands+0x80>)
 80101c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ca:	bf00      	nop
 80101cc:	08010215 	.word	0x08010215
 80101d0:	08010257 	.word	0x08010257
 80101d4:	080103d3 	.word	0x080103d3
 80101d8:	08010411 	.word	0x08010411
 80101dc:	08010509 	.word	0x08010509
 80101e0:	08010559 	.word	0x08010559
 80101e4:	08010615 	.word	0x08010615
 80101e8:	0801066b 	.word	0x0801066b
 80101ec:	0801074f 	.word	0x0801074f
 80101f0:	08010b09 	.word	0x08010b09
 80101f4:	08010b09 	.word	0x08010b09
 80101f8:	080107f9 	.word	0x080107f9
 80101fc:	08010b09 	.word	0x08010b09
 8010200:	08010b09 	.word	0x08010b09
 8010204:	08010919 	.word	0x08010919
 8010208:	0801094d 	.word	0x0801094d
 801020c:	080109dd 	.word	0x080109dd
 8010210:	08010a55 	.word	0x08010a55
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010214:	2004      	movs	r0, #4
 8010216:	f003 fedb 	bl	8013fd0 <LoRaMacConfirmQueueIsCmdActive>
 801021a:	4603      	mov	r3, r0
 801021c:	2b00      	cmp	r3, #0
 801021e:	f000 845c 	beq.w	8010ada <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010222:	2104      	movs	r1, #4
 8010224:	2000      	movs	r0, #0
 8010226:	f003 fe47 	bl	8013eb8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 801022a:	78fb      	ldrb	r3, [r7, #3]
 801022c:	1c5a      	adds	r2, r3, #1
 801022e:	70fa      	strb	r2, [r7, #3]
 8010230:	461a      	mov	r2, r3
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4413      	add	r3, r2
 8010236:	781a      	ldrb	r2, [r3, #0]
 8010238:	4bb0      	ldr	r3, [pc, #704]	@ (80104fc <ProcessMacCommands+0x3b0>)
 801023a:	f883 2460 	strb.w	r2, [r3, #1120]	@ 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 801023e:	78fb      	ldrb	r3, [r7, #3]
 8010240:	1c5a      	adds	r2, r3, #1
 8010242:	70fa      	strb	r2, [r7, #3]
 8010244:	461a      	mov	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	4413      	add	r3, r2
 801024a:	781a      	ldrb	r2, [r3, #0]
 801024c:	4bab      	ldr	r3, [pc, #684]	@ (80104fc <ProcessMacCommands+0x3b0>)
 801024e:	f883 2461 	strb.w	r2, [r3, #1121]	@ 0x461
                }
                break;
 8010252:	f000 bc42 	b.w	8010ada <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8010256:	2300      	movs	r3, #0
 8010258:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 801025c:	2300      	movs	r3, #0
 801025e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 8010262:	2300      	movs	r3, #0
 8010264:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8010268:	2300      	movs	r3, #0
 801026a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 801026e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8010272:	f083 0301 	eor.w	r3, r3, #1
 8010276:	b2db      	uxtb	r3, r3
 8010278:	2b00      	cmp	r3, #0
 801027a:	f000 80a6 	beq.w	80103ca <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 801027e:	2301      	movs	r3, #1
 8010280:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8010284:	78fb      	ldrb	r3, [r7, #3]
 8010286:	3b01      	subs	r3, #1
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	4413      	add	r3, r2
 801028c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801028e:	4b9c      	ldr	r3, [pc, #624]	@ (8010500 <ProcessMacCommands+0x3b4>)
 8010290:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8010294:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010298:	4b99      	ldr	r3, [pc, #612]	@ (8010500 <ProcessMacCommands+0x3b4>)
 801029a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 801029e:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80102a2:	4b97      	ldr	r3, [pc, #604]	@ (8010500 <ProcessMacCommands+0x3b4>)
 80102a4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80102a8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80102ac:	4b94      	ldr	r3, [pc, #592]	@ (8010500 <ProcessMacCommands+0x3b4>)
 80102ae:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80102b2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80102b6:	4b92      	ldr	r3, [pc, #584]	@ (8010500 <ProcessMacCommands+0x3b4>)
 80102b8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80102bc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80102c0:	4b8f      	ldr	r3, [pc, #572]	@ (8010500 <ProcessMacCommands+0x3b4>)
 80102c2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80102c6:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80102c8:	4b8d      	ldr	r3, [pc, #564]	@ (8010500 <ProcessMacCommands+0x3b4>)
 80102ca:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d008      	beq.n	80102e4 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80102d2:	78ba      	ldrb	r2, [r7, #2]
 80102d4:	78fb      	ldrb	r3, [r7, #3]
 80102d6:	1ad3      	subs	r3, r2, r3
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	3301      	adds	r3, #1
 80102dc:	b2db      	uxtb	r3, r3
 80102de:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 80102e2:	e002      	b.n	80102ea <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 80102e4:	2305      	movs	r3, #5
 80102e6:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80102ea:	4b85      	ldr	r3, [pc, #532]	@ (8010500 <ProcessMacCommands+0x3b4>)
 80102ec:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80102f0:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 80102f4:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 80102f8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80102fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8010300:	9301      	str	r3, [sp, #4]
 8010302:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 8010306:	9300      	str	r3, [sp, #0]
 8010308:	4623      	mov	r3, r4
 801030a:	f005 f96c 	bl	80155e6 <RegionLinkAdrReq>
 801030e:	4603      	mov	r3, r0
 8010310:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8010314:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010318:	f003 0307 	and.w	r3, r3, #7
 801031c:	2b07      	cmp	r3, #7
 801031e:	d119      	bne.n	8010354 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8010320:	4b77      	ldr	r3, [pc, #476]	@ (8010500 <ProcessMacCommands+0x3b4>)
 8010322:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8010326:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801032a:	429a      	cmp	r2, r3
 801032c:	da03      	bge.n	8010336 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 801032e:	4b74      	ldr	r3, [pc, #464]	@ (8010500 <ProcessMacCommands+0x3b4>)
 8010330:	2201      	movs	r2, #1
 8010332:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8010336:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801033a:	4b71      	ldr	r3, [pc, #452]	@ (8010500 <ProcessMacCommands+0x3b4>)
 801033c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8010340:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 8010344:	4b6e      	ldr	r3, [pc, #440]	@ (8010500 <ProcessMacCommands+0x3b4>)
 8010346:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 801034a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 801034e:	4b6c      	ldr	r3, [pc, #432]	@ (8010500 <ProcessMacCommands+0x3b4>)
 8010350:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010354:	2300      	movs	r3, #0
 8010356:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 801035a:	e00b      	b.n	8010374 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 801035c:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8010360:	2201      	movs	r2, #1
 8010362:	4619      	mov	r1, r3
 8010364:	2003      	movs	r0, #3
 8010366:	f003 fb0b 	bl	8013980 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801036a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 801036e:	3301      	adds	r3, #1
 8010370:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8010374:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8010378:	4a62      	ldr	r2, [pc, #392]	@ (8010504 <ProcessMacCommands+0x3b8>)
 801037a:	fba2 2303 	umull	r2, r3, r2, r3
 801037e:	089b      	lsrs	r3, r3, #2
 8010380:	b2db      	uxtb	r3, r3
 8010382:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8010386:	429a      	cmp	r2, r3
 8010388:	d3e8      	bcc.n	801035c <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 801038a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 801038e:	78fb      	ldrb	r3, [r7, #3]
 8010390:	4413      	add	r3, r2
 8010392:	b2db      	uxtb	r3, r3
 8010394:	3b01      	subs	r3, #1
 8010396:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8010398:	78fa      	ldrb	r2, [r7, #3]
 801039a:	78bb      	ldrb	r3, [r7, #2]
 801039c:	429a      	cmp	r2, r3
 801039e:	d20a      	bcs.n	80103b6 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80103a0:	78fb      	ldrb	r3, [r7, #3]
 80103a2:	1c5a      	adds	r2, r3, #1
 80103a4:	70fa      	strb	r2, [r7, #3]
 80103a6:	461a      	mov	r2, r3
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	4413      	add	r3, r2
 80103ac:	781b      	ldrb	r3, [r3, #0]
 80103ae:	2b03      	cmp	r3, #3
 80103b0:	f43f af68 	beq.w	8010284 <ProcessMacCommands+0x138>
 80103b4:	e000      	b.n	80103b8 <ProcessMacCommands+0x26c>
                            break;
 80103b6:	bf00      	nop

                    if( macIndex < commandsSize )
 80103b8:	78fa      	ldrb	r2, [r7, #3]
 80103ba:	78bb      	ldrb	r3, [r7, #2]
 80103bc:	429a      	cmp	r2, r3
 80103be:	f080 838e 	bcs.w	8010ade <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 80103c2:	78fb      	ldrb	r3, [r7, #3]
 80103c4:	3b01      	subs	r3, #1
 80103c6:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80103c8:	e389      	b.n	8010ade <ProcessMacCommands+0x992>
                    macIndex += 4;
 80103ca:	78fb      	ldrb	r3, [r7, #3]
 80103cc:	3304      	adds	r3, #4
 80103ce:	70fb      	strb	r3, [r7, #3]
                break;
 80103d0:	e385      	b.n	8010ade <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80103d2:	78fb      	ldrb	r3, [r7, #3]
 80103d4:	1c5a      	adds	r2, r3, #1
 80103d6:	70fa      	strb	r2, [r7, #3]
 80103d8:	461a      	mov	r2, r3
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	4413      	add	r3, r2
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	f003 030f 	and.w	r3, r3, #15
 80103e4:	b2da      	uxtb	r2, r3
 80103e6:	4b46      	ldr	r3, [pc, #280]	@ (8010500 <ProcessMacCommands+0x3b4>)
 80103e8:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80103ec:	4b44      	ldr	r3, [pc, #272]	@ (8010500 <ProcessMacCommands+0x3b4>)
 80103ee:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 80103f2:	461a      	mov	r2, r3
 80103f4:	2301      	movs	r3, #1
 80103f6:	4093      	lsls	r3, r2
 80103f8:	b29a      	uxth	r2, r3
 80103fa:	4b41      	ldr	r3, [pc, #260]	@ (8010500 <ProcessMacCommands+0x3b4>)
 80103fc:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010400:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010404:	2200      	movs	r2, #0
 8010406:	4619      	mov	r1, r3
 8010408:	2004      	movs	r0, #4
 801040a:	f003 fab9 	bl	8013980 <LoRaMacCommandsAddCmd>
                break;
 801040e:	e371      	b.n	8010af4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010410:	2307      	movs	r3, #7
 8010412:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010416:	78fb      	ldrb	r3, [r7, #3]
 8010418:	687a      	ldr	r2, [r7, #4]
 801041a:	4413      	add	r3, r2
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	091b      	lsrs	r3, r3, #4
 8010420:	b2db      	uxtb	r3, r3
 8010422:	b25b      	sxtb	r3, r3
 8010424:	f003 0307 	and.w	r3, r3, #7
 8010428:	b25b      	sxtb	r3, r3
 801042a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801042e:	78fb      	ldrb	r3, [r7, #3]
 8010430:	687a      	ldr	r2, [r7, #4]
 8010432:	4413      	add	r3, r2
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	b25b      	sxtb	r3, r3
 8010438:	f003 030f 	and.w	r3, r3, #15
 801043c:	b25b      	sxtb	r3, r3
 801043e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 8010442:	78fb      	ldrb	r3, [r7, #3]
 8010444:	3301      	adds	r3, #1
 8010446:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010448:	78fb      	ldrb	r3, [r7, #3]
 801044a:	1c5a      	adds	r2, r3, #1
 801044c:	70fa      	strb	r2, [r7, #3]
 801044e:	461a      	mov	r2, r3
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	4413      	add	r3, r2
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010458:	78fb      	ldrb	r3, [r7, #3]
 801045a:	1c5a      	adds	r2, r3, #1
 801045c:	70fa      	strb	r2, [r7, #3]
 801045e:	461a      	mov	r2, r3
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	4413      	add	r3, r2
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	021a      	lsls	r2, r3, #8
 8010468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801046a:	4313      	orrs	r3, r2
 801046c:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801046e:	78fb      	ldrb	r3, [r7, #3]
 8010470:	1c5a      	adds	r2, r3, #1
 8010472:	70fa      	strb	r2, [r7, #3]
 8010474:	461a      	mov	r2, r3
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	4413      	add	r3, r2
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	041a      	lsls	r2, r3, #16
 801047e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010480:	4313      	orrs	r3, r2
 8010482:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 8010484:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010486:	2264      	movs	r2, #100	@ 0x64
 8010488:	fb02 f303 	mul.w	r3, r2, r3
 801048c:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801048e:	4b1c      	ldr	r3, [pc, #112]	@ (8010500 <ProcessMacCommands+0x3b4>)
 8010490:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010494:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8010498:	4611      	mov	r1, r2
 801049a:	4618      	mov	r0, r3
 801049c:	f005 f8bd 	bl	801561a <RegionRxParamSetupReq>
 80104a0:	4603      	mov	r3, r0
 80104a2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80104a6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80104aa:	f003 0307 	and.w	r3, r3, #7
 80104ae:	2b07      	cmp	r3, #7
 80104b0:	d117      	bne.n	80104e2 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80104b2:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 80104b6:	b2da      	uxtb	r2, r3
 80104b8:	4b11      	ldr	r3, [pc, #68]	@ (8010500 <ProcessMacCommands+0x3b4>)
 80104ba:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80104be:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 80104c2:	b2da      	uxtb	r2, r3
 80104c4:	4b0e      	ldr	r3, [pc, #56]	@ (8010500 <ProcessMacCommands+0x3b4>)
 80104c6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80104ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104cc:	4a0c      	ldr	r2, [pc, #48]	@ (8010500 <ProcessMacCommands+0x3b4>)
 80104ce:	6653      	str	r3, [r2, #100]	@ 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80104d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104d2:	4a0b      	ldr	r2, [pc, #44]	@ (8010500 <ProcessMacCommands+0x3b4>)
 80104d4:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80104d6:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80104da:	b2da      	uxtb	r2, r3
 80104dc:	4b08      	ldr	r3, [pc, #32]	@ (8010500 <ProcessMacCommands+0x3b4>)
 80104de:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
                macCmdPayload[0] = status;
 80104e2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80104e6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80104ea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80104ee:	2201      	movs	r2, #1
 80104f0:	4619      	mov	r1, r3
 80104f2:	2005      	movs	r0, #5
 80104f4:	f003 fa44 	bl	8013980 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 80104f8:	e2fc      	b.n	8010af4 <ProcessMacCommands+0x9a8>
 80104fa:	bf00      	nop
 80104fc:	2000093c 	.word	0x2000093c
 8010500:	20000e5c 	.word	0x20000e5c
 8010504:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010508:	23ff      	movs	r3, #255	@ 0xff
 801050a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801050e:	4bb7      	ldr	r3, [pc, #732]	@ (80107ec <ProcessMacCommands+0x6a0>)
 8010510:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010514:	2b00      	cmp	r3, #0
 8010516:	d00d      	beq.n	8010534 <ProcessMacCommands+0x3e8>
 8010518:	4bb4      	ldr	r3, [pc, #720]	@ (80107ec <ProcessMacCommands+0x6a0>)
 801051a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d007      	beq.n	8010534 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010524:	4bb1      	ldr	r3, [pc, #708]	@ (80107ec <ProcessMacCommands+0x6a0>)
 8010526:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	4798      	blx	r3
 801052e:	4603      	mov	r3, r0
 8010530:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8010534:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8010538:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 801053c:	787b      	ldrb	r3, [r7, #1]
 801053e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010542:	b2db      	uxtb	r3, r3
 8010544:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010548:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801054c:	2202      	movs	r2, #2
 801054e:	4619      	mov	r1, r3
 8010550:	2006      	movs	r0, #6
 8010552:	f003 fa15 	bl	8013980 <LoRaMacCommandsAddCmd>
                break;
 8010556:	e2cd      	b.n	8010af4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010558:	2303      	movs	r3, #3
 801055a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 801055e:	78fb      	ldrb	r3, [r7, #3]
 8010560:	1c5a      	adds	r2, r3, #1
 8010562:	70fa      	strb	r2, [r7, #3]
 8010564:	461a      	mov	r2, r3
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	4413      	add	r3, r2
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	b25b      	sxtb	r3, r3
 801056e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 8010572:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010576:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010578:	78fb      	ldrb	r3, [r7, #3]
 801057a:	1c5a      	adds	r2, r3, #1
 801057c:	70fa      	strb	r2, [r7, #3]
 801057e:	461a      	mov	r2, r3
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	4413      	add	r3, r2
 8010584:	781b      	ldrb	r3, [r3, #0]
 8010586:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010588:	78fb      	ldrb	r3, [r7, #3]
 801058a:	1c5a      	adds	r2, r3, #1
 801058c:	70fa      	strb	r2, [r7, #3]
 801058e:	461a      	mov	r2, r3
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	4413      	add	r3, r2
 8010594:	781b      	ldrb	r3, [r3, #0]
 8010596:	021a      	lsls	r2, r3, #8
 8010598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801059a:	4313      	orrs	r3, r2
 801059c:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801059e:	78fb      	ldrb	r3, [r7, #3]
 80105a0:	1c5a      	adds	r2, r3, #1
 80105a2:	70fa      	strb	r2, [r7, #3]
 80105a4:	461a      	mov	r2, r3
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	4413      	add	r3, r2
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	041a      	lsls	r2, r3, #16
 80105ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105b0:	4313      	orrs	r3, r2
 80105b2:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 80105b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105b6:	2264      	movs	r2, #100	@ 0x64
 80105b8:	fb02 f303 	mul.w	r3, r2, r3
 80105bc:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 80105be:	2300      	movs	r3, #0
 80105c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80105c2:	78fb      	ldrb	r3, [r7, #3]
 80105c4:	1c5a      	adds	r2, r3, #1
 80105c6:	70fa      	strb	r2, [r7, #3]
 80105c8:	461a      	mov	r2, r3
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	4413      	add	r3, r2
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	b25b      	sxtb	r3, r3
 80105d2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80105d6:	4b86      	ldr	r3, [pc, #536]	@ (80107f0 <ProcessMacCommands+0x6a4>)
 80105d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80105dc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80105e0:	4611      	mov	r1, r2
 80105e2:	4618      	mov	r0, r3
 80105e4:	f005 f82c 	bl	8015640 <RegionNewChannelReq>
 80105e8:	4603      	mov	r3, r0
 80105ea:	b2db      	uxtb	r3, r3
 80105ec:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 80105f0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80105f4:	b25b      	sxtb	r3, r3
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	f2c0 8273 	blt.w	8010ae2 <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 80105fc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010600:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010604:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010608:	2201      	movs	r2, #1
 801060a:	4619      	mov	r1, r3
 801060c:	2007      	movs	r0, #7
 801060e:	f003 f9b7 	bl	8013980 <LoRaMacCommandsAddCmd>
                }
                break;
 8010612:	e266      	b.n	8010ae2 <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010614:	78fb      	ldrb	r3, [r7, #3]
 8010616:	1c5a      	adds	r2, r3, #1
 8010618:	70fa      	strb	r2, [r7, #3]
 801061a:	461a      	mov	r2, r3
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	4413      	add	r3, r2
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	f003 030f 	and.w	r3, r3, #15
 8010626:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 801062a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 801062e:	2b00      	cmp	r3, #0
 8010630:	d104      	bne.n	801063c <ProcessMacCommands+0x4f0>
                {
                    delay++;
 8010632:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010636:	3301      	adds	r3, #1
 8010638:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 801063c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010640:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010644:	fb02 f303 	mul.w	r3, r2, r3
 8010648:	461a      	mov	r2, r3
 801064a:	4b69      	ldr	r3, [pc, #420]	@ (80107f0 <ProcessMacCommands+0x6a4>)
 801064c:	651a      	str	r2, [r3, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801064e:	4b68      	ldr	r3, [pc, #416]	@ (80107f0 <ProcessMacCommands+0x6a4>)
 8010650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010652:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8010656:	4a66      	ldr	r2, [pc, #408]	@ (80107f0 <ProcessMacCommands+0x6a4>)
 8010658:	6553      	str	r3, [r2, #84]	@ 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801065a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801065e:	2200      	movs	r2, #0
 8010660:	4619      	mov	r1, r3
 8010662:	2008      	movs	r0, #8
 8010664:	f003 f98c 	bl	8013980 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8010668:	e244      	b.n	8010af4 <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801066a:	78fb      	ldrb	r3, [r7, #3]
 801066c:	1c5a      	adds	r2, r3, #1
 801066e:	70fa      	strb	r2, [r7, #3]
 8010670:	461a      	mov	r2, r3
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	4413      	add	r3, r2
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 801067c:	2300      	movs	r3, #0
 801067e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8010682:	2300      	movs	r3, #0
 8010684:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010688:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 801068c:	f003 0320 	and.w	r3, r3, #32
 8010690:	2b00      	cmp	r3, #0
 8010692:	d002      	beq.n	801069a <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010694:	2301      	movs	r3, #1
 8010696:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 801069a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 801069e:	f003 0310 	and.w	r3, r3, #16
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d002      	beq.n	80106ac <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80106a6:	2301      	movs	r3, #1
 80106a8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80106ac:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80106b0:	f003 030f 	and.w	r3, r3, #15
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80106ba:	4b4d      	ldr	r3, [pc, #308]	@ (80107f0 <ProcessMacCommands+0x6a4>)
 80106bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80106c0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80106c4:	4611      	mov	r1, r2
 80106c6:	4618      	mov	r0, r3
 80106c8:	f004 ffcd 	bl	8015666 <RegionTxParamSetupReq>
 80106cc:	4603      	mov	r3, r0
 80106ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106d2:	f000 8208 	beq.w	8010ae6 <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80106d6:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80106da:	4b45      	ldr	r3, [pc, #276]	@ (80107f0 <ProcessMacCommands+0x6a4>)
 80106dc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80106e0:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 80106e4:	4b42      	ldr	r3, [pc, #264]	@ (80107f0 <ProcessMacCommands+0x6a4>)
 80106e6:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80106ea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80106ee:	461a      	mov	r2, r3
 80106f0:	4b40      	ldr	r3, [pc, #256]	@ (80107f4 <ProcessMacCommands+0x6a8>)
 80106f2:	5c9b      	ldrb	r3, [r3, r2]
 80106f4:	4618      	mov	r0, r3
 80106f6:	f7f0 fae5 	bl	8000cc4 <__aeabi_ui2f>
 80106fa:	4603      	mov	r3, r0
 80106fc:	4a3c      	ldr	r2, [pc, #240]	@ (80107f0 <ProcessMacCommands+0x6a4>)
 80106fe:	6793      	str	r3, [r2, #120]	@ 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010700:	2302      	movs	r3, #2
 8010702:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010706:	4b3a      	ldr	r3, [pc, #232]	@ (80107f0 <ProcessMacCommands+0x6a4>)
 8010708:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 801070c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010710:	4b37      	ldr	r3, [pc, #220]	@ (80107f0 <ProcessMacCommands+0x6a4>)
 8010712:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010716:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801071a:	4611      	mov	r1, r2
 801071c:	4618      	mov	r0, r3
 801071e:	f004 fea5 	bl	801546c <RegionGetPhyParam>
 8010722:	4603      	mov	r3, r0
 8010724:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010728:	b25a      	sxtb	r2, r3
 801072a:	4b31      	ldr	r3, [pc, #196]	@ (80107f0 <ProcessMacCommands+0x6a4>)
 801072c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010730:	4293      	cmp	r3, r2
 8010732:	bfb8      	it	lt
 8010734:	4613      	movlt	r3, r2
 8010736:	b25a      	sxtb	r2, r3
 8010738:	4b2d      	ldr	r3, [pc, #180]	@ (80107f0 <ProcessMacCommands+0x6a4>)
 801073a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 801073e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010742:	2200      	movs	r2, #0
 8010744:	4619      	mov	r1, r3
 8010746:	2009      	movs	r0, #9
 8010748:	f003 f91a 	bl	8013980 <LoRaMacCommandsAddCmd>
                }
                break;
 801074c:	e1cb      	b.n	8010ae6 <ProcessMacCommands+0x99a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 801074e:	2303      	movs	r3, #3
 8010750:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8010754:	78fb      	ldrb	r3, [r7, #3]
 8010756:	1c5a      	adds	r2, r3, #1
 8010758:	70fa      	strb	r2, [r7, #3]
 801075a:	461a      	mov	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	4413      	add	r3, r2
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8010766:	78fb      	ldrb	r3, [r7, #3]
 8010768:	1c5a      	adds	r2, r3, #1
 801076a:	70fa      	strb	r2, [r7, #3]
 801076c:	461a      	mov	r2, r3
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	4413      	add	r3, r2
 8010772:	781b      	ldrb	r3, [r3, #0]
 8010774:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010776:	78fb      	ldrb	r3, [r7, #3]
 8010778:	1c5a      	adds	r2, r3, #1
 801077a:	70fa      	strb	r2, [r7, #3]
 801077c:	461a      	mov	r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	4413      	add	r3, r2
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	021a      	lsls	r2, r3, #8
 8010786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010788:	4313      	orrs	r3, r2
 801078a:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801078c:	78fb      	ldrb	r3, [r7, #3]
 801078e:	1c5a      	adds	r2, r3, #1
 8010790:	70fa      	strb	r2, [r7, #3]
 8010792:	461a      	mov	r2, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	4413      	add	r3, r2
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	041a      	lsls	r2, r3, #16
 801079c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801079e:	4313      	orrs	r3, r2
 80107a0:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 80107a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a4:	2264      	movs	r2, #100	@ 0x64
 80107a6:	fb02 f303 	mul.w	r3, r2, r3
 80107aa:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80107ac:	4b10      	ldr	r3, [pc, #64]	@ (80107f0 <ProcessMacCommands+0x6a4>)
 80107ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80107b2:	f107 0220 	add.w	r2, r7, #32
 80107b6:	4611      	mov	r1, r2
 80107b8:	4618      	mov	r0, r3
 80107ba:	f004 ff67 	bl	801568c <RegionDlChannelReq>
 80107be:	4603      	mov	r3, r0
 80107c0:	b2db      	uxtb	r3, r3
 80107c2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 80107c6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80107ca:	b25b      	sxtb	r3, r3
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	f2c0 818c 	blt.w	8010aea <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 80107d2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80107d6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80107da:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80107de:	2201      	movs	r2, #1
 80107e0:	4619      	mov	r1, r3
 80107e2:	200a      	movs	r0, #10
 80107e4:	f003 f8cc 	bl	8013980 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 80107e8:	e17f      	b.n	8010aea <ProcessMacCommands+0x99e>
 80107ea:	bf00      	nop
 80107ec:	2000093c 	.word	0x2000093c
 80107f0:	20000e5c 	.word	0x20000e5c
 80107f4:	0801fe0c 	.word	0x0801fe0c
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80107f8:	2009      	movs	r0, #9
 80107fa:	f003 fbe9 	bl	8013fd0 <LoRaMacConfirmQueueIsCmdActive>
 80107fe:	4603      	mov	r3, r0
 8010800:	2b00      	cmp	r3, #0
 8010802:	f000 8084 	beq.w	801090e <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8010806:	2109      	movs	r1, #9
 8010808:	2000      	movs	r0, #0
 801080a:	f003 fb55 	bl	8013eb8 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 801080e:	f107 0318 	add.w	r3, r7, #24
 8010812:	2200      	movs	r2, #0
 8010814:	601a      	str	r2, [r3, #0]
 8010816:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8010818:	f107 0310 	add.w	r3, r7, #16
 801081c:	2200      	movs	r2, #0
 801081e:	601a      	str	r2, [r3, #0]
 8010820:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8010822:	f107 0308 	add.w	r3, r7, #8
 8010826:	2200      	movs	r2, #0
 8010828:	601a      	str	r2, [r3, #0]
 801082a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 801082c:	78fb      	ldrb	r3, [r7, #3]
 801082e:	1c5a      	adds	r2, r3, #1
 8010830:	70fa      	strb	r2, [r7, #3]
 8010832:	461a      	mov	r2, r3
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	4413      	add	r3, r2
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 801083c:	78fb      	ldrb	r3, [r7, #3]
 801083e:	1c5a      	adds	r2, r3, #1
 8010840:	70fa      	strb	r2, [r7, #3]
 8010842:	461a      	mov	r2, r3
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	4413      	add	r3, r2
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	021a      	lsls	r2, r3, #8
 801084c:	69bb      	ldr	r3, [r7, #24]
 801084e:	4313      	orrs	r3, r2
 8010850:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8010852:	78fb      	ldrb	r3, [r7, #3]
 8010854:	1c5a      	adds	r2, r3, #1
 8010856:	70fa      	strb	r2, [r7, #3]
 8010858:	461a      	mov	r2, r3
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	4413      	add	r3, r2
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	041a      	lsls	r2, r3, #16
 8010862:	69bb      	ldr	r3, [r7, #24]
 8010864:	4313      	orrs	r3, r2
 8010866:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8010868:	78fb      	ldrb	r3, [r7, #3]
 801086a:	1c5a      	adds	r2, r3, #1
 801086c:	70fa      	strb	r2, [r7, #3]
 801086e:	461a      	mov	r2, r3
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	4413      	add	r3, r2
 8010874:	781b      	ldrb	r3, [r3, #0]
 8010876:	061a      	lsls	r2, r3, #24
 8010878:	69bb      	ldr	r3, [r7, #24]
 801087a:	4313      	orrs	r3, r2
 801087c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801087e:	78fb      	ldrb	r3, [r7, #3]
 8010880:	1c5a      	adds	r2, r3, #1
 8010882:	70fa      	strb	r2, [r7, #3]
 8010884:	461a      	mov	r2, r3
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	4413      	add	r3, r2
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	b21b      	sxth	r3, r3
 801088e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8010890:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010894:	461a      	mov	r2, r3
 8010896:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801089a:	fb02 f303 	mul.w	r3, r2, r3
 801089e:	121b      	asrs	r3, r3, #8
 80108a0:	b21b      	sxth	r3, r3
 80108a2:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80108a4:	f107 0310 	add.w	r3, r7, #16
 80108a8:	f107 0218 	add.w	r2, r7, #24
 80108ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108b0:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80108b4:	693a      	ldr	r2, [r7, #16]
 80108b6:	4b96      	ldr	r3, [pc, #600]	@ (8010b10 <ProcessMacCommands+0x9c4>)
 80108b8:	4413      	add	r3, r2
 80108ba:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80108bc:	f107 0308 	add.w	r3, r7, #8
 80108c0:	4618      	mov	r0, r3
 80108c2:	f00a fc53 	bl	801b16c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80108c6:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80108ca:	4b92      	ldr	r3, [pc, #584]	@ (8010b14 <ProcessMacCommands+0x9c8>)
 80108cc:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 80108d0:	9200      	str	r2, [sp, #0]
 80108d2:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 80108d6:	f107 0210 	add.w	r2, r7, #16
 80108da:	ca06      	ldmia	r2, {r1, r2}
 80108dc:	f00a fbdf 	bl	801b09e <SysTimeSub>
 80108e0:	f107 0010 	add.w	r0, r7, #16
 80108e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80108e6:	9300      	str	r3, [sp, #0]
 80108e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108ea:	f107 0208 	add.w	r2, r7, #8
 80108ee:	ca06      	ldmia	r2, {r1, r2}
 80108f0:	f00a fb9c 	bl	801b02c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80108f4:	f107 0310 	add.w	r3, r7, #16
 80108f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80108fc:	f00a fc08 	bl	801b110 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8010900:	f002 fee8 	bl	80136d4 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8010904:	4b83      	ldr	r3, [pc, #524]	@ (8010b14 <ProcessMacCommands+0x9c8>)
 8010906:	2201      	movs	r2, #1
 8010908:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 801090c:	e0f2      	b.n	8010af4 <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 801090e:	4b81      	ldr	r3, [pc, #516]	@ (8010b14 <ProcessMacCommands+0x9c8>)
 8010910:	2200      	movs	r2, #0
 8010912:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
                break;
 8010916:	e0ed      	b.n	8010af4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8010918:	200c      	movs	r0, #12
 801091a:	f003 fb59 	bl	8013fd0 <LoRaMacConfirmQueueIsCmdActive>
 801091e:	4603      	mov	r3, r0
 8010920:	2b00      	cmp	r3, #0
 8010922:	f000 80e4 	beq.w	8010aee <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8010926:	210c      	movs	r1, #12
 8010928:	2000      	movs	r0, #0
 801092a:	f003 fac5 	bl	8013eb8 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 801092e:	4b79      	ldr	r3, [pc, #484]	@ (8010b14 <ProcessMacCommands+0x9c8>)
 8010930:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8010934:	2b04      	cmp	r3, #4
 8010936:	f000 80da 	beq.w	8010aee <ProcessMacCommands+0x9a2>
 801093a:	4b76      	ldr	r3, [pc, #472]	@ (8010b14 <ProcessMacCommands+0x9c8>)
 801093c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8010940:	2b05      	cmp	r3, #5
 8010942:	f000 80d4 	beq.w	8010aee <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8010946:	f002 fea6 	bl	8013696 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801094a:	e0d0      	b.n	8010aee <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 801094c:	2303      	movs	r3, #3
 801094e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 8010952:	2300      	movs	r3, #0
 8010954:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8010956:	78fb      	ldrb	r3, [r7, #3]
 8010958:	1c5a      	adds	r2, r3, #1
 801095a:	70fa      	strb	r2, [r7, #3]
 801095c:	461a      	mov	r2, r3
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	4413      	add	r3, r2
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010966:	78fb      	ldrb	r3, [r7, #3]
 8010968:	1c5a      	adds	r2, r3, #1
 801096a:	70fa      	strb	r2, [r7, #3]
 801096c:	461a      	mov	r2, r3
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	4413      	add	r3, r2
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	021b      	lsls	r3, r3, #8
 8010976:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010978:	4313      	orrs	r3, r2
 801097a:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 801097c:	78fb      	ldrb	r3, [r7, #3]
 801097e:	1c5a      	adds	r2, r3, #1
 8010980:	70fa      	strb	r2, [r7, #3]
 8010982:	461a      	mov	r2, r3
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	4413      	add	r3, r2
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	041b      	lsls	r3, r3, #16
 801098c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801098e:	4313      	orrs	r3, r2
 8010990:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 8010992:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010994:	2264      	movs	r2, #100	@ 0x64
 8010996:	fb02 f303 	mul.w	r3, r2, r3
 801099a:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 801099c:	78fb      	ldrb	r3, [r7, #3]
 801099e:	1c5a      	adds	r2, r3, #1
 80109a0:	70fa      	strb	r2, [r7, #3]
 80109a2:	461a      	mov	r2, r3
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	4413      	add	r3, r2
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	f003 030f 	and.w	r3, r3, #15
 80109ae:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80109b2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80109b6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80109b8:	4618      	mov	r0, r3
 80109ba:	f002 fe72 	bl	80136a2 <LoRaMacClassBPingSlotChannelReq>
 80109be:	4603      	mov	r3, r0
 80109c0:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 80109c4:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80109c8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80109cc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80109d0:	2201      	movs	r2, #1
 80109d2:	4619      	mov	r1, r3
 80109d4:	2011      	movs	r0, #17
 80109d6:	f002 ffd3 	bl	8013980 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 80109da:	e08b      	b.n	8010af4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80109dc:	200d      	movs	r0, #13
 80109de:	f003 faf7 	bl	8013fd0 <LoRaMacConfirmQueueIsCmdActive>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	f000 8084 	beq.w	8010af2 <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80109ea:	210d      	movs	r1, #13
 80109ec:	2000      	movs	r0, #0
 80109ee:	f003 fa63 	bl	8013eb8 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80109f2:	2300      	movs	r3, #0
 80109f4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 80109f8:	2300      	movs	r3, #0
 80109fa:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80109fe:	78fb      	ldrb	r3, [r7, #3]
 8010a00:	1c5a      	adds	r2, r3, #1
 8010a02:	70fa      	strb	r2, [r7, #3]
 8010a04:	461a      	mov	r2, r3
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	4413      	add	r3, r2
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8010a10:	78fb      	ldrb	r3, [r7, #3]
 8010a12:	1c5a      	adds	r2, r3, #1
 8010a14:	70fa      	strb	r2, [r7, #3]
 8010a16:	461a      	mov	r2, r3
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	4413      	add	r3, r2
 8010a1c:	781b      	ldrb	r3, [r3, #0]
 8010a1e:	021b      	lsls	r3, r3, #8
 8010a20:	b21a      	sxth	r2, r3
 8010a22:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8010a26:	4313      	orrs	r3, r2
 8010a28:	b21b      	sxth	r3, r3
 8010a2a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8010a2e:	78fb      	ldrb	r3, [r7, #3]
 8010a30:	1c5a      	adds	r2, r3, #1
 8010a32:	70fa      	strb	r2, [r7, #3]
 8010a34:	461a      	mov	r2, r3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	4413      	add	r3, r2
 8010a3a:	781b      	ldrb	r3, [r3, #0]
 8010a3c:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8010a40:	4b35      	ldr	r3, [pc, #212]	@ (8010b18 <ProcessMacCommands+0x9cc>)
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 8010a48:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f002 fe34 	bl	80136ba <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8010a52:	e04e      	b.n	8010af2 <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8010a54:	2300      	movs	r3, #0
 8010a56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8010a5a:	78fb      	ldrb	r3, [r7, #3]
 8010a5c:	1c5a      	adds	r2, r3, #1
 8010a5e:	70fa      	strb	r2, [r7, #3]
 8010a60:	461a      	mov	r2, r3
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	4413      	add	r3, r2
 8010a66:	781b      	ldrb	r3, [r3, #0]
 8010a68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010a6c:	78fb      	ldrb	r3, [r7, #3]
 8010a6e:	1c5a      	adds	r2, r3, #1
 8010a70:	70fa      	strb	r2, [r7, #3]
 8010a72:	461a      	mov	r2, r3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	4413      	add	r3, r2
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	021b      	lsls	r3, r3, #8
 8010a7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010a80:	4313      	orrs	r3, r2
 8010a82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010a86:	78fb      	ldrb	r3, [r7, #3]
 8010a88:	1c5a      	adds	r2, r3, #1
 8010a8a:	70fa      	strb	r2, [r7, #3]
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	4413      	add	r3, r2
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	041b      	lsls	r3, r3, #16
 8010a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010a9a:	4313      	orrs	r3, r2
 8010a9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 8010aa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010aa4:	2264      	movs	r2, #100	@ 0x64
 8010aa6:	fb02 f303 	mul.w	r3, r2, r3
 8010aaa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010aae:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010ab2:	f002 fe15 	bl	80136e0 <LoRaMacClassBBeaconFreqReq>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d003      	beq.n	8010ac4 <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 8010abc:	2301      	movs	r3, #1
 8010abe:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 8010ac2:	e002      	b.n	8010aca <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8010aca:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010ace:	2201      	movs	r2, #1
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	2013      	movs	r0, #19
 8010ad4:	f002 ff54 	bl	8013980 <LoRaMacCommandsAddCmd>
                }
                break;
 8010ad8:	e00c      	b.n	8010af4 <ProcessMacCommands+0x9a8>
                break;
 8010ada:	bf00      	nop
 8010adc:	e00a      	b.n	8010af4 <ProcessMacCommands+0x9a8>
                break;
 8010ade:	bf00      	nop
 8010ae0:	e008      	b.n	8010af4 <ProcessMacCommands+0x9a8>
                break;
 8010ae2:	bf00      	nop
 8010ae4:	e006      	b.n	8010af4 <ProcessMacCommands+0x9a8>
                break;
 8010ae6:	bf00      	nop
 8010ae8:	e004      	b.n	8010af4 <ProcessMacCommands+0x9a8>
                break;
 8010aea:	bf00      	nop
 8010aec:	e002      	b.n	8010af4 <ProcessMacCommands+0x9a8>
                break;
 8010aee:	bf00      	nop
 8010af0:	e000      	b.n	8010af4 <ProcessMacCommands+0x9a8>
                break;
 8010af2:	bf00      	nop
    while( macIndex < commandsSize )
 8010af4:	78fa      	ldrb	r2, [r7, #3]
 8010af6:	78bb      	ldrb	r3, [r7, #2]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	f4ff ab49 	bcc.w	8010190 <ProcessMacCommands+0x44>
 8010afe:	e004      	b.n	8010b0a <ProcessMacCommands+0x9be>
        return;
 8010b00:	bf00      	nop
 8010b02:	e002      	b.n	8010b0a <ProcessMacCommands+0x9be>
            return;
 8010b04:	bf00      	nop
 8010b06:	e000      	b.n	8010b0a <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010b08:	bf00      	nop
        }
    }
}
 8010b0a:	378c      	adds	r7, #140	@ 0x8c
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd90      	pop	{r4, r7, pc}
 8010b10:	12d53d80 	.word	0x12d53d80
 8010b14:	2000093c 	.word	0x2000093c
 8010b18:	200019ec 	.word	0x200019ec

08010b1c <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b08e      	sub	sp, #56	@ 0x38
 8010b20:	af02      	add	r7, sp, #8
 8010b22:	60f8      	str	r0, [r7, #12]
 8010b24:	607a      	str	r2, [r7, #4]
 8010b26:	461a      	mov	r2, r3
 8010b28:	460b      	mov	r3, r1
 8010b2a:	72fb      	strb	r3, [r7, #11]
 8010b2c:	4613      	mov	r3, r2
 8010b2e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b30:	2303      	movs	r3, #3
 8010b32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010b36:	4b66      	ldr	r3, [pc, #408]	@ (8010cd0 <Send+0x1b4>)
 8010b38:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8010b3c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8010b40:	4b63      	ldr	r3, [pc, #396]	@ (8010cd0 <Send+0x1b4>)
 8010b42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010b46:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010b4a:	4b61      	ldr	r3, [pc, #388]	@ (8010cd0 <Send+0x1b4>)
 8010b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010b50:	4b5f      	ldr	r3, [pc, #380]	@ (8010cd0 <Send+0x1b4>)
 8010b52:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d101      	bne.n	8010b5e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8010b5a:	2307      	movs	r3, #7
 8010b5c:	e0b4      	b.n	8010cc8 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8010b5e:	4b5c      	ldr	r3, [pc, #368]	@ (8010cd0 <Send+0x1b4>)
 8010b60:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d102      	bne.n	8010b6e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010b68:	4b59      	ldr	r3, [pc, #356]	@ (8010cd0 <Send+0x1b4>)
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8010b74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010b78:	f36f 0303 	bfc	r3, #0, #4
 8010b7c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8010b80:	4b53      	ldr	r3, [pc, #332]	@ (8010cd0 <Send+0x1b4>)
 8010b82:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8010b86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010b8a:	f362 13c7 	bfi	r3, r2, #7, #1
 8010b8e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010b92:	4b4f      	ldr	r3, [pc, #316]	@ (8010cd0 <Send+0x1b4>)
 8010b94:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010b98:	2b01      	cmp	r3, #1
 8010b9a:	d106      	bne.n	8010baa <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8010b9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010ba0:	f043 0310 	orr.w	r3, r3, #16
 8010ba4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8010ba8:	e005      	b.n	8010bb6 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8010baa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010bae:	f36f 1304 	bfc	r3, #4, #1
 8010bb2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8010bb6:	4b46      	ldr	r3, [pc, #280]	@ (8010cd0 <Send+0x1b4>)
 8010bb8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d005      	beq.n	8010bcc <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8010bc0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010bc4:	f043 0320 	orr.w	r3, r3, #32
 8010bc8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 8010bcc:	2301      	movs	r3, #1
 8010bce:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010bd0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010bd4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010bd8:	b2db      	uxtb	r3, r3
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	bf14      	ite	ne
 8010bde:	2301      	movne	r3, #1
 8010be0:	2300      	moveq	r3, #0
 8010be2:	b2db      	uxtb	r3, r3
 8010be4:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010be6:	4b3a      	ldr	r3, [pc, #232]	@ (8010cd0 <Send+0x1b4>)
 8010be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bea:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010bec:	4b39      	ldr	r3, [pc, #228]	@ (8010cd4 <Send+0x1b8>)
 8010bee:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8010bf2:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010bf4:	4b37      	ldr	r3, [pc, #220]	@ (8010cd4 <Send+0x1b8>)
 8010bf6:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8010bfa:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010bfc:	4b34      	ldr	r3, [pc, #208]	@ (8010cd0 <Send+0x1b4>)
 8010bfe:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010c02:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010c06:	4b32      	ldr	r3, [pc, #200]	@ (8010cd0 <Send+0x1b4>)
 8010c08:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010c0c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010c10:	4b2f      	ldr	r3, [pc, #188]	@ (8010cd0 <Send+0x1b4>)
 8010c12:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8010c16:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8010cd0 <Send+0x1b4>)
 8010c1c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8010c20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8010c24:	4b2a      	ldr	r3, [pc, #168]	@ (8010cd0 <Send+0x1b4>)
 8010c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010c2a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8010c2e:	f107 0014 	add.w	r0, r7, #20
 8010c32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010c36:	9300      	str	r3, [sp, #0]
 8010c38:	4b27      	ldr	r3, [pc, #156]	@ (8010cd8 <Send+0x1bc>)
 8010c3a:	4a28      	ldr	r2, [pc, #160]	@ (8010cdc <Send+0x1c0>)
 8010c3c:	4928      	ldr	r1, [pc, #160]	@ (8010ce0 <Send+0x1c4>)
 8010c3e:	f002 fbc9 	bl	80133d4 <LoRaMacAdrCalcNext>
 8010c42:	4603      	mov	r3, r0
 8010c44:	461a      	mov	r2, r3
 8010c46:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010c4a:	f362 1386 	bfi	r3, r2, #6, #1
 8010c4e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8010c52:	7afa      	ldrb	r2, [r7, #11]
 8010c54:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8010c58:	893b      	ldrh	r3, [r7, #8]
 8010c5a:	9300      	str	r3, [sp, #0]
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	68f8      	ldr	r0, [r7, #12]
 8010c60:	f000 fc42 	bl	80114e8 <PrepareFrame>
 8010c64:	4603      	mov	r3, r0
 8010c66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d003      	beq.n	8010c7a <Send+0x15e>
 8010c72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c76:	2b0a      	cmp	r3, #10
 8010c78:	d107      	bne.n	8010c8a <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8010c7a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f000 f96e 	bl	8010f60 <ScheduleTx>
 8010c84:	4603      	mov	r3, r0
 8010c86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d00a      	beq.n	8010ca8 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8010c92:	4a0f      	ldr	r2, [pc, #60]	@ (8010cd0 <Send+0x1b4>)
 8010c94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010c98:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8010c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8010cd0 <Send+0x1b4>)
 8010c9e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010ca2:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 8010ca6:	e00d      	b.n	8010cc4 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010ca8:	4b09      	ldr	r3, [pc, #36]	@ (8010cd0 <Send+0x1b4>)
 8010caa:	2200      	movs	r2, #0
 8010cac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8010cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cb2:	4a07      	ldr	r2, [pc, #28]	@ (8010cd0 <Send+0x1b4>)
 8010cb4:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010cb6:	f002 fedb 	bl	8013a70 <LoRaMacCommandsRemoveNoneStickyCmds>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d001      	beq.n	8010cc4 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010cc0:	2313      	movs	r3, #19
 8010cc2:	e001      	b.n	8010cc8 <Send+0x1ac>
        }
    }
    return status;
 8010cc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3730      	adds	r7, #48	@ 0x30
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}
 8010cd0:	20000e5c 	.word	0x20000e5c
 8010cd4:	2000093c 	.word	0x2000093c
 8010cd8:	20000ebc 	.word	0x20000ebc
 8010cdc:	20000e94 	.word	0x20000e94
 8010ce0:	20000e95 	.word	0x20000e95

08010ce4 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b084      	sub	sp, #16
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	4603      	mov	r3, r0
 8010cec:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8010cfa:	79fb      	ldrb	r3, [r7, #7]
 8010cfc:	2bff      	cmp	r3, #255	@ 0xff
 8010cfe:	d129      	bne.n	8010d54 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010d00:	2000      	movs	r0, #0
 8010d02:	f7ff f901 	bl	800ff08 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8010d06:	4b1a      	ldr	r3, [pc, #104]	@ (8010d70 <SendReJoinReq+0x8c>)
 8010d08:	2200      	movs	r2, #0
 8010d0a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8010d0e:	4b18      	ldr	r3, [pc, #96]	@ (8010d70 <SendReJoinReq+0x8c>)
 8010d10:	4a18      	ldr	r2, [pc, #96]	@ (8010d74 <SendReJoinReq+0x90>)
 8010d12:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010d16:	4b16      	ldr	r3, [pc, #88]	@ (8010d70 <SendReJoinReq+0x8c>)
 8010d18:	22ff      	movs	r2, #255	@ 0xff
 8010d1a:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8010d1e:	7b3b      	ldrb	r3, [r7, #12]
 8010d20:	f36f 1347 	bfc	r3, #5, #3
 8010d24:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010d26:	7b3a      	ldrb	r2, [r7, #12]
 8010d28:	4b11      	ldr	r3, [pc, #68]	@ (8010d70 <SendReJoinReq+0x8c>)
 8010d2a:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010d2e:	f7fc f869 	bl	800ce04 <SecureElementGetJoinEui>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2208      	movs	r2, #8
 8010d36:	4619      	mov	r1, r3
 8010d38:	480f      	ldr	r0, [pc, #60]	@ (8010d78 <SendReJoinReq+0x94>)
 8010d3a:	f006 fe38 	bl	80179ae <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8010d3e:	f7fc f83f 	bl	800cdc0 <SecureElementGetDevEui>
 8010d42:	4603      	mov	r3, r0
 8010d44:	2208      	movs	r2, #8
 8010d46:	4619      	mov	r1, r3
 8010d48:	480c      	ldr	r0, [pc, #48]	@ (8010d7c <SendReJoinReq+0x98>)
 8010d4a:	f006 fe30 	bl	80179ae <memcpy1>

            allowDelayedTx = false;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	73fb      	strb	r3, [r7, #15]

            break;
 8010d52:	e002      	b.n	8010d5a <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010d54:	2302      	movs	r3, #2
 8010d56:	73bb      	strb	r3, [r7, #14]
            break;
 8010d58:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010d5a:	7bfb      	ldrb	r3, [r7, #15]
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f000 f8ff 	bl	8010f60 <ScheduleTx>
 8010d62:	4603      	mov	r3, r0
 8010d64:	73bb      	strb	r3, [r7, #14]
    return status;
 8010d66:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3710      	adds	r7, #16
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	2000093c 	.word	0x2000093c
 8010d74:	2000093e 	.word	0x2000093e
 8010d78:	20000a4a 	.word	0x20000a4a
 8010d7c:	20000a52 	.word	0x20000a52

08010d80 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010d84:	f002 fc36 	bl	80135f4 <LoRaMacClassBIsBeaconExpected>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d001      	beq.n	8010d92 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010d8e:	230e      	movs	r3, #14
 8010d90:	e013      	b.n	8010dba <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010d92:	4b0b      	ldr	r3, [pc, #44]	@ (8010dc0 <CheckForClassBCollision+0x40>)
 8010d94:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010d98:	2b01      	cmp	r3, #1
 8010d9a:	d10d      	bne.n	8010db8 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010d9c:	f002 fc31 	bl	8013602 <LoRaMacClassBIsPingExpected>
 8010da0:	4603      	mov	r3, r0
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d001      	beq.n	8010daa <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010da6:	230f      	movs	r3, #15
 8010da8:	e007      	b.n	8010dba <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010daa:	f002 fc31 	bl	8013610 <LoRaMacClassBIsMulticastExpected>
 8010dae:	4603      	mov	r3, r0
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d001      	beq.n	8010db8 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010db4:	230f      	movs	r3, #15
 8010db6:	e000      	b.n	8010dba <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010db8:	2300      	movs	r3, #0
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	20000e5c 	.word	0x20000e5c

08010dc4 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010dc4:	b590      	push	{r4, r7, lr}
 8010dc6:	b083      	sub	sp, #12
 8010dc8:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010dca:	4b2d      	ldr	r3, [pc, #180]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010dcc:	f893 4040 	ldrb.w	r4, [r3, #64]	@ 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010dd2:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8010dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010dd8:	f893 1075 	ldrb.w	r1, [r3, #117]	@ 0x75
 8010ddc:	4b28      	ldr	r3, [pc, #160]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010dde:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010de2:	4b27      	ldr	r3, [pc, #156]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010de4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010de8:	b25b      	sxtb	r3, r3
 8010dea:	f004 fc94 	bl	8015716 <RegionApplyDrOffset>
 8010dee:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010df0:	b259      	sxtb	r1, r3
 8010df2:	4b23      	ldr	r3, [pc, #140]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010df4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010df8:	4b21      	ldr	r3, [pc, #132]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010dfc:	4821      	ldr	r0, [pc, #132]	@ (8010e84 <ComputeRxWindowParameters+0xc0>)
 8010dfe:	9000      	str	r0, [sp, #0]
 8010e00:	4620      	mov	r0, r4
 8010e02:	f004 fbaa 	bl	801555a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010e06:	4b1e      	ldr	r3, [pc, #120]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e08:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8010e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e0e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010e12:	b259      	sxtb	r1, r3
 8010e14:	4b1a      	ldr	r3, [pc, #104]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e16:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010e1a:	4b19      	ldr	r3, [pc, #100]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e1e:	4c1a      	ldr	r4, [pc, #104]	@ (8010e88 <ComputeRxWindowParameters+0xc4>)
 8010e20:	9400      	str	r4, [sp, #0]
 8010e22:	f004 fb9a 	bl	801555a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010e26:	4b16      	ldr	r3, [pc, #88]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010e2a:	4a18      	ldr	r2, [pc, #96]	@ (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e2c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8010e30:	4413      	add	r3, r2
 8010e32:	4a16      	ldr	r2, [pc, #88]	@ (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e34:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010e38:	4b11      	ldr	r3, [pc, #68]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010e3c:	4a13      	ldr	r2, [pc, #76]	@ (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e3e:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8010e42:	4413      	add	r3, r2
 8010e44:	4a11      	ldr	r2, [pc, #68]	@ (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e46:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e4c:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d111      	bne.n	8010e78 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010e54:	4b0a      	ldr	r3, [pc, #40]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010e58:	4a0c      	ldr	r2, [pc, #48]	@ (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e5a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8010e5e:	4413      	add	r3, r2
 8010e60:	4a0a      	ldr	r2, [pc, #40]	@ (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e62:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010e66:	4b06      	ldr	r3, [pc, #24]	@ (8010e80 <ComputeRxWindowParameters+0xbc>)
 8010e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010e6a:	4a08      	ldr	r2, [pc, #32]	@ (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e6c:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8010e70:	4413      	add	r3, r2
 8010e72:	4a06      	ldr	r2, [pc, #24]	@ (8010e8c <ComputeRxWindowParameters+0xc8>)
 8010e74:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8010e78:	bf00      	nop
 8010e7a:	3704      	adds	r7, #4
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd90      	pop	{r4, r7, pc}
 8010e80:	20000e5c 	.word	0x20000e5c
 8010e84:	20000cf4 	.word	0x20000cf4
 8010e88:	20000d0c 	.word	0x20000d0c
 8010e8c:	2000093c 	.word	0x2000093c

08010e90 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010e96:	2300      	movs	r3, #0
 8010e98:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010e9a:	4b13      	ldr	r3, [pc, #76]	@ (8010ee8 <VerifyTxFrame+0x58>)
 8010e9c:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d01b      	beq.n	8010edc <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010ea4:	1d3b      	adds	r3, r7, #4
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f002 fe28 	bl	8013afc <LoRaMacCommandsGetSizeSerializedCmds>
 8010eac:	4603      	mov	r3, r0
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d001      	beq.n	8010eb6 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010eb2:	2313      	movs	r3, #19
 8010eb4:	e013      	b.n	8010ede <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8010eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8010eec <VerifyTxFrame+0x5c>)
 8010eb8:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8010ee8 <VerifyTxFrame+0x58>)
 8010ebe:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 8010ec2:	687a      	ldr	r2, [r7, #4]
 8010ec4:	b2d2      	uxtb	r2, r2
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7ff f918 	bl	80100fc <ValidatePayloadLength>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	f083 0301 	eor.w	r3, r3, #1
 8010ed2:	b2db      	uxtb	r3, r3
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d001      	beq.n	8010edc <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010ed8:	2308      	movs	r3, #8
 8010eda:	e000      	b.n	8010ede <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010edc:	2300      	movs	r3, #0
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3708      	adds	r7, #8
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	20000e5c 	.word	0x20000e5c
 8010eec:	2000093c 	.word	0x2000093c

08010ef0 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010ef6:	4b18      	ldr	r3, [pc, #96]	@ (8010f58 <SerializeTxFrame+0x68>)
 8010ef8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d002      	beq.n	8010f06 <SerializeTxFrame+0x16>
 8010f00:	2b04      	cmp	r3, #4
 8010f02:	d011      	beq.n	8010f28 <SerializeTxFrame+0x38>
 8010f04:	e021      	b.n	8010f4a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010f06:	4815      	ldr	r0, [pc, #84]	@ (8010f5c <SerializeTxFrame+0x6c>)
 8010f08:	f004 f929 	bl	801515e <LoRaMacSerializerJoinRequest>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010f10:	79fb      	ldrb	r3, [r7, #7]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d001      	beq.n	8010f1a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f16:	2311      	movs	r3, #17
 8010f18:	e01a      	b.n	8010f50 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8010f58 <SerializeTxFrame+0x68>)
 8010f1c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010f20:	461a      	mov	r2, r3
 8010f22:	4b0d      	ldr	r3, [pc, #52]	@ (8010f58 <SerializeTxFrame+0x68>)
 8010f24:	801a      	strh	r2, [r3, #0]
            break;
 8010f26:	e012      	b.n	8010f4e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010f28:	480c      	ldr	r0, [pc, #48]	@ (8010f5c <SerializeTxFrame+0x6c>)
 8010f2a:	f004 f99a 	bl	8015262 <LoRaMacSerializerData>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010f32:	79fb      	ldrb	r3, [r7, #7]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d001      	beq.n	8010f3c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f38:	2311      	movs	r3, #17
 8010f3a:	e009      	b.n	8010f50 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010f3c:	4b06      	ldr	r3, [pc, #24]	@ (8010f58 <SerializeTxFrame+0x68>)
 8010f3e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010f42:	461a      	mov	r2, r3
 8010f44:	4b04      	ldr	r3, [pc, #16]	@ (8010f58 <SerializeTxFrame+0x68>)
 8010f46:	801a      	strh	r2, [r3, #0]
            break;
 8010f48:	e001      	b.n	8010f4e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010f4a:	2303      	movs	r3, #3
 8010f4c:	e000      	b.n	8010f50 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010f4e:	2300      	movs	r3, #0
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3708      	adds	r7, #8
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	2000093c 	.word	0x2000093c
 8010f5c:	20000a44 	.word	0x20000a44

08010f60 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b090      	sub	sp, #64	@ 0x40
 8010f64:	af02      	add	r7, sp, #8
 8010f66:	4603      	mov	r3, r0
 8010f68:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010f6a:	2303      	movs	r3, #3
 8010f6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010f70:	f7ff ff06 	bl	8010d80 <CheckForClassBCollision>
 8010f74:	4603      	mov	r3, r0
 8010f76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010f7a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d002      	beq.n	8010f88 <ScheduleTx+0x28>
    {
        return status;
 8010f82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010f86:	e08f      	b.n	80110a8 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8010f88:	f000 f8f4 	bl	8011174 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010f8c:	f7ff ffb0 	bl	8010ef0 <SerializeTxFrame>
 8010f90:	4603      	mov	r3, r0
 8010f92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010f96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d002      	beq.n	8010fa4 <ScheduleTx+0x44>
    {
        return status;
 8010f9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010fa2:	e081      	b.n	80110a8 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010fa4:	4b42      	ldr	r3, [pc, #264]	@ (80110b0 <ScheduleTx+0x150>)
 8010fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fa8:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010faa:	4b41      	ldr	r3, [pc, #260]	@ (80110b0 <ScheduleTx+0x150>)
 8010fac:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010fb0:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80110b0 <ScheduleTx+0x150>)
 8010fb4:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8010fb8:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010fba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f00a f90c 	bl	801b1dc <SysTimeGetMcuTime>
 8010fc4:	4638      	mov	r0, r7
 8010fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80110b0 <ScheduleTx+0x150>)
 8010fc8:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8010fcc:	9200      	str	r2, [sp, #0]
 8010fce:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010fd2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8010fd6:	ca06      	ldmia	r2, {r1, r2}
 8010fd8:	f00a f861 	bl	801b09e <SysTimeSub>
 8010fdc:	f107 0320 	add.w	r3, r7, #32
 8010fe0:	463a      	mov	r2, r7
 8010fe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fe6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010fea:	4b31      	ldr	r3, [pc, #196]	@ (80110b0 <ScheduleTx+0x150>)
 8010fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fee:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80110b4 <ScheduleTx+0x154>)
 8010ffc:	881b      	ldrh	r3, [r3, #0]
 8010ffe:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011000:	4b2b      	ldr	r3, [pc, #172]	@ (80110b0 <ScheduleTx+0x150>)
 8011002:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8011006:	2b00      	cmp	r3, #0
 8011008:	d104      	bne.n	8011014 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 801100a:	2301      	movs	r3, #1
 801100c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 8011010:	2300      	movs	r3, #0
 8011012:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8011014:	4b26      	ldr	r3, [pc, #152]	@ (80110b0 <ScheduleTx+0x150>)
 8011016:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 801101a:	f107 0114 	add.w	r1, r7, #20
 801101e:	4b26      	ldr	r3, [pc, #152]	@ (80110b8 <ScheduleTx+0x158>)
 8011020:	9300      	str	r3, [sp, #0]
 8011022:	4b26      	ldr	r3, [pc, #152]	@ (80110bc <ScheduleTx+0x15c>)
 8011024:	4a26      	ldr	r2, [pc, #152]	@ (80110c0 <ScheduleTx+0x160>)
 8011026:	f004 fb5e 	bl	80156e6 <RegionNextChannel>
 801102a:	4603      	mov	r3, r0
 801102c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 8011030:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011034:	2b00      	cmp	r3, #0
 8011036:	d022      	beq.n	801107e <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8011038:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801103c:	2b0b      	cmp	r3, #11
 801103e:	d11b      	bne.n	8011078 <ScheduleTx+0x118>
 8011040:	7bfb      	ldrb	r3, [r7, #15]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d018      	beq.n	8011078 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011046:	4b1b      	ldr	r3, [pc, #108]	@ (80110b4 <ScheduleTx+0x154>)
 8011048:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 801104c:	2b00      	cmp	r3, #0
 801104e:	d011      	beq.n	8011074 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011050:	4b18      	ldr	r3, [pc, #96]	@ (80110b4 <ScheduleTx+0x154>)
 8011052:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011056:	f043 0320 	orr.w	r3, r3, #32
 801105a:	4a16      	ldr	r2, [pc, #88]	@ (80110b4 <ScheduleTx+0x154>)
 801105c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011060:	4b14      	ldr	r3, [pc, #80]	@ (80110b4 <ScheduleTx+0x154>)
 8011062:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 8011066:	4619      	mov	r1, r3
 8011068:	4816      	ldr	r0, [pc, #88]	@ (80110c4 <ScheduleTx+0x164>)
 801106a:	f00a fe55 	bl	801bd18 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 801106e:	4815      	ldr	r0, [pc, #84]	@ (80110c4 <ScheduleTx+0x164>)
 8011070:	f00a fd74 	bl	801bb5c <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8011074:	2300      	movs	r3, #0
 8011076:	e017      	b.n	80110a8 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011078:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801107c:	e014      	b.n	80110a8 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 801107e:	f7ff fea1 	bl	8010dc4 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011082:	f7ff ff05 	bl	8010e90 <VerifyTxFrame>
 8011086:	4603      	mov	r3, r0
 8011088:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801108c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011090:	2b00      	cmp	r3, #0
 8011092:	d002      	beq.n	801109a <ScheduleTx+0x13a>
    {
        return status;
 8011094:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011098:	e006      	b.n	80110a8 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801109a:	4b06      	ldr	r3, [pc, #24]	@ (80110b4 <ScheduleTx+0x154>)
 801109c:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 80110a0:	4618      	mov	r0, r3
 80110a2:	f000 fb3b 	bl	801171c <SendFrameOnChannel>
 80110a6:	4603      	mov	r3, r0
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3738      	adds	r7, #56	@ 0x38
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	20000e5c 	.word	0x20000e5c
 80110b4:	2000093c 	.word	0x2000093c
 80110b8:	20000e8c 	.word	0x20000e8c
 80110bc:	20000dd4 	.word	0x20000dd4
 80110c0:	20000d5b 	.word	0x20000d5b
 80110c4:	20000ca4 	.word	0x20000ca4

080110c8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	4603      	mov	r3, r0
 80110d0:	460a      	mov	r2, r1
 80110d2:	71fb      	strb	r3, [r7, #7]
 80110d4:	4613      	mov	r3, r2
 80110d6:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80110d8:	2312      	movs	r3, #18
 80110da:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80110dc:	2300      	movs	r3, #0
 80110de:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80110e0:	4b22      	ldr	r3, [pc, #136]	@ (801116c <SecureFrame+0xa4>)
 80110e2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d002      	beq.n	80110f0 <SecureFrame+0x28>
 80110ea:	2b04      	cmp	r3, #4
 80110ec:	d011      	beq.n	8011112 <SecureFrame+0x4a>
 80110ee:	e036      	b.n	801115e <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80110f0:	481f      	ldr	r0, [pc, #124]	@ (8011170 <SecureFrame+0xa8>)
 80110f2:	f003 fc07 	bl	8014904 <LoRaMacCryptoPrepareJoinRequest>
 80110f6:	4603      	mov	r3, r0
 80110f8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80110fa:	7bfb      	ldrb	r3, [r7, #15]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d001      	beq.n	8011104 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011100:	2311      	movs	r3, #17
 8011102:	e02f      	b.n	8011164 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011104:	4b19      	ldr	r3, [pc, #100]	@ (801116c <SecureFrame+0xa4>)
 8011106:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 801110a:	461a      	mov	r2, r3
 801110c:	4b17      	ldr	r3, [pc, #92]	@ (801116c <SecureFrame+0xa4>)
 801110e:	801a      	strh	r2, [r3, #0]
            break;
 8011110:	e027      	b.n	8011162 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011112:	f107 0308 	add.w	r3, r7, #8
 8011116:	4618      	mov	r0, r3
 8011118:	f003 fb38 	bl	801478c <LoRaMacCryptoGetFCntUp>
 801111c:	4603      	mov	r3, r0
 801111e:	2b00      	cmp	r3, #0
 8011120:	d001      	beq.n	8011126 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011122:	2312      	movs	r3, #18
 8011124:	e01e      	b.n	8011164 <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8011126:	4b11      	ldr	r3, [pc, #68]	@ (801116c <SecureFrame+0xa4>)
 8011128:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 801112c:	2b00      	cmp	r3, #0
 801112e:	d002      	beq.n	8011136 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	3b01      	subs	r3, #1
 8011134:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011136:	68b8      	ldr	r0, [r7, #8]
 8011138:	79ba      	ldrb	r2, [r7, #6]
 801113a:	79f9      	ldrb	r1, [r7, #7]
 801113c:	4b0c      	ldr	r3, [pc, #48]	@ (8011170 <SecureFrame+0xa8>)
 801113e:	f003 fcf3 	bl	8014b28 <LoRaMacCryptoSecureMessage>
 8011142:	4603      	mov	r3, r0
 8011144:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011146:	7bfb      	ldrb	r3, [r7, #15]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d001      	beq.n	8011150 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801114c:	2311      	movs	r3, #17
 801114e:	e009      	b.n	8011164 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011150:	4b06      	ldr	r3, [pc, #24]	@ (801116c <SecureFrame+0xa4>)
 8011152:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8011156:	461a      	mov	r2, r3
 8011158:	4b04      	ldr	r3, [pc, #16]	@ (801116c <SecureFrame+0xa4>)
 801115a:	801a      	strh	r2, [r3, #0]
            break;
 801115c:	e001      	b.n	8011162 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801115e:	2303      	movs	r3, #3
 8011160:	e000      	b.n	8011164 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8011162:	2300      	movs	r3, #0
}
 8011164:	4618      	mov	r0, r3
 8011166:	3710      	adds	r7, #16
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}
 801116c:	2000093c 	.word	0x2000093c
 8011170:	20000a44 	.word	0x20000a44

08011174 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011174:	b480      	push	{r7}
 8011176:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8011178:	4b09      	ldr	r3, [pc, #36]	@ (80111a0 <CalculateBackOff+0x2c>)
 801117a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801117c:	2b00      	cmp	r3, #0
 801117e:	d10a      	bne.n	8011196 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011180:	4b07      	ldr	r3, [pc, #28]	@ (80111a0 <CalculateBackOff+0x2c>)
 8011182:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8011186:	3b01      	subs	r3, #1
 8011188:	4a06      	ldr	r2, [pc, #24]	@ (80111a4 <CalculateBackOff+0x30>)
 801118a:	f8d2 2420 	ldr.w	r2, [r2, #1056]	@ 0x420
 801118e:	fb02 f303 	mul.w	r3, r2, r3
 8011192:	4a03      	ldr	r2, [pc, #12]	@ (80111a0 <CalculateBackOff+0x2c>)
 8011194:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8011196:	bf00      	nop
 8011198:	46bd      	mov	sp, r7
 801119a:	bc80      	pop	{r7}
 801119c:	4770      	bx	lr
 801119e:	bf00      	nop
 80111a0:	20000e5c 	.word	0x20000e5c
 80111a4:	2000093c 	.word	0x2000093c

080111a8 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b082      	sub	sp, #8
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	4603      	mov	r3, r0
 80111b0:	7139      	strb	r1, [r7, #4]
 80111b2:	71fb      	strb	r3, [r7, #7]
 80111b4:	4613      	mov	r3, r2
 80111b6:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80111b8:	79fb      	ldrb	r3, [r7, #7]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d002      	beq.n	80111c4 <RemoveMacCommands+0x1c>
 80111be:	79fb      	ldrb	r3, [r7, #7]
 80111c0:	2b01      	cmp	r3, #1
 80111c2:	d10d      	bne.n	80111e0 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80111c4:	79bb      	ldrb	r3, [r7, #6]
 80111c6:	2b01      	cmp	r3, #1
 80111c8:	d108      	bne.n	80111dc <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80111ca:	793b      	ldrb	r3, [r7, #4]
 80111cc:	f003 0320 	and.w	r3, r3, #32
 80111d0:	b2db      	uxtb	r3, r3
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d004      	beq.n	80111e0 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80111d6:	f002 fc6f 	bl	8013ab8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80111da:	e001      	b.n	80111e0 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80111dc:	f002 fc6c 	bl	8013ab8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80111e0:	bf00      	nop
 80111e2:	3708      	adds	r7, #8
 80111e4:	46bd      	mov	sp, r7
 80111e6:	bd80      	pop	{r7, pc}

080111e8 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 80111e8:	b5b0      	push	{r4, r5, r7, lr}
 80111ea:	b090      	sub	sp, #64	@ 0x40
 80111ec:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80111ee:	4b70      	ldr	r3, [pc, #448]	@ (80113b0 <ResetMacParameters+0x1c8>)
 80111f0:	2200      	movs	r2, #0
 80111f2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80111f6:	4b6e      	ldr	r3, [pc, #440]	@ (80113b0 <ResetMacParameters+0x1c8>)
 80111f8:	2200      	movs	r2, #0
 80111fa:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80111fc:	4b6d      	ldr	r3, [pc, #436]	@ (80113b4 <ResetMacParameters+0x1cc>)
 80111fe:	2200      	movs	r2, #0
 8011200:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8011204:	4b6b      	ldr	r3, [pc, #428]	@ (80113b4 <ResetMacParameters+0x1cc>)
 8011206:	2200      	movs	r2, #0
 8011208:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 801120c:	4b69      	ldr	r3, [pc, #420]	@ (80113b4 <ResetMacParameters+0x1cc>)
 801120e:	2200      	movs	r2, #0
 8011210:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8011214:	4b66      	ldr	r3, [pc, #408]	@ (80113b0 <ResetMacParameters+0x1c8>)
 8011216:	2200      	movs	r2, #0
 8011218:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 801121c:	4b64      	ldr	r3, [pc, #400]	@ (80113b0 <ResetMacParameters+0x1c8>)
 801121e:	2201      	movs	r2, #1
 8011220:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011224:	4b62      	ldr	r3, [pc, #392]	@ (80113b0 <ResetMacParameters+0x1c8>)
 8011226:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 801122a:	4b61      	ldr	r3, [pc, #388]	@ (80113b0 <ResetMacParameters+0x1c8>)
 801122c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011230:	4b5f      	ldr	r3, [pc, #380]	@ (80113b0 <ResetMacParameters+0x1c8>)
 8011232:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 8011236:	4b5e      	ldr	r3, [pc, #376]	@ (80113b0 <ResetMacParameters+0x1c8>)
 8011238:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 801123c:	4b5c      	ldr	r3, [pc, #368]	@ (80113b0 <ResetMacParameters+0x1c8>)
 801123e:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 8011242:	4b5b      	ldr	r3, [pc, #364]	@ (80113b0 <ResetMacParameters+0x1c8>)
 8011244:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011248:	4b59      	ldr	r3, [pc, #356]	@ (80113b0 <ResetMacParameters+0x1c8>)
 801124a:	4a59      	ldr	r2, [pc, #356]	@ (80113b0 <ResetMacParameters+0x1c8>)
 801124c:	3364      	adds	r3, #100	@ 0x64
 801124e:	32a8      	adds	r2, #168	@ 0xa8
 8011250:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011254:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011258:	4b55      	ldr	r3, [pc, #340]	@ (80113b0 <ResetMacParameters+0x1c8>)
 801125a:	4a55      	ldr	r2, [pc, #340]	@ (80113b0 <ResetMacParameters+0x1c8>)
 801125c:	336c      	adds	r3, #108	@ 0x6c
 801125e:	32b0      	adds	r2, #176	@ 0xb0
 8011260:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011264:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8011268:	4b51      	ldr	r3, [pc, #324]	@ (80113b0 <ResetMacParameters+0x1c8>)
 801126a:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 801126e:	4b50      	ldr	r3, [pc, #320]	@ (80113b0 <ResetMacParameters+0x1c8>)
 8011270:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8011274:	4b4e      	ldr	r3, [pc, #312]	@ (80113b0 <ResetMacParameters+0x1c8>)
 8011276:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 801127a:	4b4d      	ldr	r3, [pc, #308]	@ (80113b0 <ResetMacParameters+0x1c8>)
 801127c:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8011280:	4b4b      	ldr	r3, [pc, #300]	@ (80113b0 <ResetMacParameters+0x1c8>)
 8011282:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8011286:	4a4a      	ldr	r2, [pc, #296]	@ (80113b0 <ResetMacParameters+0x1c8>)
 8011288:	6793      	str	r3, [r2, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801128a:	4b49      	ldr	r3, [pc, #292]	@ (80113b0 <ResetMacParameters+0x1c8>)
 801128c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8011290:	4a47      	ldr	r2, [pc, #284]	@ (80113b0 <ResetMacParameters+0x1c8>)
 8011292:	67d3      	str	r3, [r2, #124]	@ 0x7c

    MacCtx.NodeAckRequested = false;
 8011294:	4b47      	ldr	r3, [pc, #284]	@ (80113b4 <ResetMacParameters+0x1cc>)
 8011296:	2200      	movs	r2, #0
 8011298:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 801129c:	4b44      	ldr	r3, [pc, #272]	@ (80113b0 <ResetMacParameters+0x1c8>)
 801129e:	2200      	movs	r2, #0
 80112a0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80112a4:	4b42      	ldr	r3, [pc, #264]	@ (80113b0 <ResetMacParameters+0x1c8>)
 80112a6:	2200      	movs	r2, #0
 80112a8:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 80112ac:	4b40      	ldr	r3, [pc, #256]	@ (80113b0 <ResetMacParameters+0x1c8>)
 80112ae:	2200      	movs	r2, #0
 80112b0:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80112b4:	2301      	movs	r3, #1
 80112b6:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80112b8:	4b3f      	ldr	r3, [pc, #252]	@ (80113b8 <ResetMacParameters+0x1d0>)
 80112ba:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80112bc:	4b3f      	ldr	r3, [pc, #252]	@ (80113bc <ResetMacParameters+0x1d4>)
 80112be:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 80112c0:	4b3f      	ldr	r3, [pc, #252]	@ (80113c0 <ResetMacParameters+0x1d8>)
 80112c2:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80112c4:	4b3a      	ldr	r3, [pc, #232]	@ (80113b0 <ResetMacParameters+0x1c8>)
 80112c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80112ca:	1d3a      	adds	r2, r7, #4
 80112cc:	4611      	mov	r1, r2
 80112ce:	4618      	mov	r0, r3
 80112d0:	f004 f8f5 	bl	80154be <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80112d4:	4b37      	ldr	r3, [pc, #220]	@ (80113b4 <ResetMacParameters+0x1cc>)
 80112d6:	2200      	movs	r2, #0
 80112d8:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80112dc:	4b35      	ldr	r3, [pc, #212]	@ (80113b4 <ResetMacParameters+0x1cc>)
 80112de:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 80112e2:	4b34      	ldr	r3, [pc, #208]	@ (80113b4 <ResetMacParameters+0x1cc>)
 80112e4:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80112e8:	4b31      	ldr	r3, [pc, #196]	@ (80113b0 <ResetMacParameters+0x1c8>)
 80112ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80112ec:	4a31      	ldr	r2, [pc, #196]	@ (80113b4 <ResetMacParameters+0x1cc>)
 80112ee:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80112f2:	4b2f      	ldr	r3, [pc, #188]	@ (80113b0 <ResetMacParameters+0x1c8>)
 80112f4:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 80112f8:	4b2e      	ldr	r3, [pc, #184]	@ (80113b4 <ResetMacParameters+0x1cc>)
 80112fa:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80112fe:	4b2c      	ldr	r3, [pc, #176]	@ (80113b0 <ResetMacParameters+0x1c8>)
 8011300:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8011304:	4b2b      	ldr	r3, [pc, #172]	@ (80113b4 <ResetMacParameters+0x1cc>)
 8011306:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 801130a:	4b2a      	ldr	r3, [pc, #168]	@ (80113b4 <ResetMacParameters+0x1cc>)
 801130c:	2200      	movs	r2, #0
 801130e:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011312:	4b28      	ldr	r3, [pc, #160]	@ (80113b4 <ResetMacParameters+0x1cc>)
 8011314:	2201      	movs	r2, #1
 8011316:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801131a:	4b25      	ldr	r3, [pc, #148]	@ (80113b0 <ResetMacParameters+0x1c8>)
 801131c:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8011320:	4b24      	ldr	r3, [pc, #144]	@ (80113b4 <ResetMacParameters+0x1cc>)
 8011322:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011326:	4a23      	ldr	r2, [pc, #140]	@ (80113b4 <ResetMacParameters+0x1cc>)
 8011328:	4b22      	ldr	r3, [pc, #136]	@ (80113b4 <ResetMacParameters+0x1cc>)
 801132a:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 801132e:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8011332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011336:	e895 0003 	ldmia.w	r5, {r0, r1}
 801133a:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801133e:	4b1d      	ldr	r3, [pc, #116]	@ (80113b4 <ResetMacParameters+0x1cc>)
 8011340:	2201      	movs	r2, #1
 8011342:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011346:	4b1b      	ldr	r3, [pc, #108]	@ (80113b4 <ResetMacParameters+0x1cc>)
 8011348:	2202      	movs	r2, #2
 801134a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801134e:	2300      	movs	r3, #0
 8011350:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8011352:	2300      	movs	r3, #0
 8011354:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8011356:	4b17      	ldr	r3, [pc, #92]	@ (80113b4 <ResetMacParameters+0x1cc>)
 8011358:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801135c:	2b00      	cmp	r3, #0
 801135e:	d009      	beq.n	8011374 <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8011360:	4b14      	ldr	r3, [pc, #80]	@ (80113b4 <ResetMacParameters+0x1cc>)
 8011362:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 801136a:	4b12      	ldr	r3, [pc, #72]	@ (80113b4 <ResetMacParameters+0x1cc>)
 801136c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011370:	691b      	ldr	r3, [r3, #16]
 8011372:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8011374:	4b13      	ldr	r3, [pc, #76]	@ (80113c4 <ResetMacParameters+0x1dc>)
 8011376:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8011378:	4b13      	ldr	r3, [pc, #76]	@ (80113c8 <ResetMacParameters+0x1e0>)
 801137a:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801137c:	4b13      	ldr	r3, [pc, #76]	@ (80113cc <ResetMacParameters+0x1e4>)
 801137e:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8011380:	4b13      	ldr	r3, [pc, #76]	@ (80113d0 <ResetMacParameters+0x1e8>)
 8011382:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8011384:	4b13      	ldr	r3, [pc, #76]	@ (80113d4 <ResetMacParameters+0x1ec>)
 8011386:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8011388:	4b13      	ldr	r3, [pc, #76]	@ (80113d8 <ResetMacParameters+0x1f0>)
 801138a:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 801138c:	4b13      	ldr	r3, [pc, #76]	@ (80113dc <ResetMacParameters+0x1f4>)
 801138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8011390:	4b13      	ldr	r3, [pc, #76]	@ (80113e0 <ResetMacParameters+0x1f8>)
 8011392:	633b      	str	r3, [r7, #48]	@ 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8011394:	4b13      	ldr	r3, [pc, #76]	@ (80113e4 <ResetMacParameters+0x1fc>)
 8011396:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8011398:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 801139c:	f107 0314 	add.w	r3, r7, #20
 80113a0:	4a11      	ldr	r2, [pc, #68]	@ (80113e8 <ResetMacParameters+0x200>)
 80113a2:	4618      	mov	r0, r3
 80113a4:	f002 f8cf 	bl	8013546 <LoRaMacClassBInit>
}
 80113a8:	bf00      	nop
 80113aa:	3740      	adds	r7, #64	@ 0x40
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bdb0      	pop	{r4, r5, r7, pc}
 80113b0:	20000e5c 	.word	0x20000e5c
 80113b4:	2000093c 	.word	0x2000093c
 80113b8:	20001040 	.word	0x20001040
 80113bc:	20001044 	.word	0x20001044
 80113c0:	20001954 	.word	0x20001954
 80113c4:	20000da8 	.word	0x20000da8
 80113c8:	20000d60 	.word	0x20000d60
 80113cc:	20000d94 	.word	0x20000d94
 80113d0:	20000dd1 	.word	0x20000dd1
 80113d4:	20000f30 	.word	0x20000f30
 80113d8:	20000e9c 	.word	0x20000e9c
 80113dc:	20000ea0 	.word	0x20000ea0
 80113e0:	20000f34 	.word	0x20000f34
 80113e4:	20000f78 	.word	0x20000f78
 80113e8:	200013c0 	.word	0x200013c0

080113ec <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b082      	sub	sp, #8
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80113f6:	6878      	ldr	r0, [r7, #4]
 80113f8:	f00a fc1e 	bl	801bc38 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80113fc:	4b11      	ldr	r3, [pc, #68]	@ (8011444 <RxWindowSetup+0x58>)
 80113fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011400:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011402:	4b11      	ldr	r3, [pc, #68]	@ (8011448 <RxWindowSetup+0x5c>)
 8011404:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011408:	4a10      	ldr	r2, [pc, #64]	@ (801144c <RxWindowSetup+0x60>)
 801140a:	6839      	ldr	r1, [r7, #0]
 801140c:	4618      	mov	r0, r3
 801140e:	f004 f8be 	bl	801558e <RegionRxConfig>
 8011412:	4603      	mov	r3, r0
 8011414:	2b00      	cmp	r3, #0
 8011416:	d010      	beq.n	801143a <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011418:	4b0d      	ldr	r3, [pc, #52]	@ (8011450 <RxWindowSetup+0x64>)
 801141a:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 801141e:	4b0c      	ldr	r3, [pc, #48]	@ (8011450 <RxWindowSetup+0x64>)
 8011420:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8011424:	4b07      	ldr	r3, [pc, #28]	@ (8011444 <RxWindowSetup+0x58>)
 8011426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011428:	4a07      	ldr	r2, [pc, #28]	@ (8011448 <RxWindowSetup+0x5c>)
 801142a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 801142c:	4610      	mov	r0, r2
 801142e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	7cda      	ldrb	r2, [r3, #19]
 8011434:	4b06      	ldr	r3, [pc, #24]	@ (8011450 <RxWindowSetup+0x64>)
 8011436:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 801143a:	bf00      	nop
 801143c:	3708      	adds	r7, #8
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	0801fedc 	.word	0x0801fedc
 8011448:	20000e5c 	.word	0x20000e5c
 801144c:	20000d64 	.word	0x20000d64
 8011450:	2000093c 	.word	0x2000093c

08011454 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011454:	b590      	push	{r4, r7, lr}
 8011456:	b083      	sub	sp, #12
 8011458:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801145a:	4b1e      	ldr	r3, [pc, #120]	@ (80114d4 <OpenContinuousRxCWindow+0x80>)
 801145c:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8011460:	4b1c      	ldr	r3, [pc, #112]	@ (80114d4 <OpenContinuousRxCWindow+0x80>)
 8011462:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011466:	b259      	sxtb	r1, r3
 8011468:	4b1a      	ldr	r3, [pc, #104]	@ (80114d4 <OpenContinuousRxCWindow+0x80>)
 801146a:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801146e:	4b19      	ldr	r3, [pc, #100]	@ (80114d4 <OpenContinuousRxCWindow+0x80>)
 8011470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011472:	4c19      	ldr	r4, [pc, #100]	@ (80114d8 <OpenContinuousRxCWindow+0x84>)
 8011474:	9400      	str	r4, [sp, #0]
 8011476:	f004 f870 	bl	801555a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801147a:	4b18      	ldr	r3, [pc, #96]	@ (80114dc <OpenContinuousRxCWindow+0x88>)
 801147c:	2202      	movs	r2, #2
 801147e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011482:	4b14      	ldr	r3, [pc, #80]	@ (80114d4 <OpenContinuousRxCWindow+0x80>)
 8011484:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8011488:	4b14      	ldr	r3, [pc, #80]	@ (80114dc <OpenContinuousRxCWindow+0x88>)
 801148a:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801148e:	4b13      	ldr	r3, [pc, #76]	@ (80114dc <OpenContinuousRxCWindow+0x88>)
 8011490:	2201      	movs	r2, #1
 8011492:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011496:	4b0f      	ldr	r3, [pc, #60]	@ (80114d4 <OpenContinuousRxCWindow+0x80>)
 8011498:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801149c:	4a10      	ldr	r2, [pc, #64]	@ (80114e0 <OpenContinuousRxCWindow+0x8c>)
 801149e:	490e      	ldr	r1, [pc, #56]	@ (80114d8 <OpenContinuousRxCWindow+0x84>)
 80114a0:	4618      	mov	r0, r3
 80114a2:	f004 f874 	bl	801558e <RegionRxConfig>
 80114a6:	4603      	mov	r3, r0
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d00f      	beq.n	80114cc <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80114ac:	4b0b      	ldr	r3, [pc, #44]	@ (80114dc <OpenContinuousRxCWindow+0x88>)
 80114ae:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 80114b2:	4b0a      	ldr	r3, [pc, #40]	@ (80114dc <OpenContinuousRxCWindow+0x88>)
 80114b4:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( 0 ); // Continuous mode
 80114b8:	4b0a      	ldr	r3, [pc, #40]	@ (80114e4 <OpenContinuousRxCWindow+0x90>)
 80114ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114bc:	2000      	movs	r0, #0
 80114be:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80114c0:	4b06      	ldr	r3, [pc, #24]	@ (80114dc <OpenContinuousRxCWindow+0x88>)
 80114c2:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 80114c6:	4b05      	ldr	r3, [pc, #20]	@ (80114dc <OpenContinuousRxCWindow+0x88>)
 80114c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 80114cc:	bf00      	nop
 80114ce:	3704      	adds	r7, #4
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd90      	pop	{r4, r7, pc}
 80114d4:	20000e5c 	.word	0x20000e5c
 80114d8:	20000d24 	.word	0x20000d24
 80114dc:	2000093c 	.word	0x2000093c
 80114e0:	20000d64 	.word	0x20000d64
 80114e4:	0801fedc 	.word	0x0801fedc

080114e8 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b088      	sub	sp, #32
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	603b      	str	r3, [r7, #0]
 80114f4:	4613      	mov	r3, r2
 80114f6:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80114f8:	4b81      	ldr	r3, [pc, #516]	@ (8011700 <PrepareFrame+0x218>)
 80114fa:	2200      	movs	r2, #0
 80114fc:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80114fe:	4b80      	ldr	r3, [pc, #512]	@ (8011700 <PrepareFrame+0x218>)
 8011500:	2200      	movs	r2, #0
 8011502:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    uint32_t fCntUp = 0;
 8011506:	2300      	movs	r3, #0
 8011508:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801150a:	2300      	movs	r3, #0
 801150c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801150e:	2300      	movs	r3, #0
 8011510:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d101      	bne.n	801151c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8011518:	2300      	movs	r3, #0
 801151a:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 801151c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801151e:	461a      	mov	r2, r3
 8011520:	6839      	ldr	r1, [r7, #0]
 8011522:	4878      	ldr	r0, [pc, #480]	@ (8011704 <PrepareFrame+0x21c>)
 8011524:	f006 fa43 	bl	80179ae <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8011528:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801152a:	b2da      	uxtb	r2, r3
 801152c:	4b74      	ldr	r3, [pc, #464]	@ (8011700 <PrepareFrame+0x218>)
 801152e:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	781a      	ldrb	r2, [r3, #0]
 8011536:	4b72      	ldr	r3, [pc, #456]	@ (8011700 <PrepareFrame+0x218>)
 8011538:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011542:	b2db      	uxtb	r3, r3
 8011544:	2b07      	cmp	r3, #7
 8011546:	f000 80b9 	beq.w	80116bc <PrepareFrame+0x1d4>
 801154a:	2b07      	cmp	r3, #7
 801154c:	f300 80ce 	bgt.w	80116ec <PrepareFrame+0x204>
 8011550:	2b02      	cmp	r3, #2
 8011552:	d006      	beq.n	8011562 <PrepareFrame+0x7a>
 8011554:	2b04      	cmp	r3, #4
 8011556:	f040 80c9 	bne.w	80116ec <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801155a:	4b69      	ldr	r3, [pc, #420]	@ (8011700 <PrepareFrame+0x218>)
 801155c:	2201      	movs	r2, #1
 801155e:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8011562:	4b67      	ldr	r3, [pc, #412]	@ (8011700 <PrepareFrame+0x218>)
 8011564:	2204      	movs	r2, #4
 8011566:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801156a:	4b65      	ldr	r3, [pc, #404]	@ (8011700 <PrepareFrame+0x218>)
 801156c:	4a66      	ldr	r2, [pc, #408]	@ (8011708 <PrepareFrame+0x220>)
 801156e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011572:	4b63      	ldr	r3, [pc, #396]	@ (8011700 <PrepareFrame+0x218>)
 8011574:	22ff      	movs	r2, #255	@ 0xff
 8011576:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	781a      	ldrb	r2, [r3, #0]
 801157e:	4b60      	ldr	r3, [pc, #384]	@ (8011700 <PrepareFrame+0x218>)
 8011580:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011584:	4a5e      	ldr	r2, [pc, #376]	@ (8011700 <PrepareFrame+0x218>)
 8011586:	79fb      	ldrb	r3, [r7, #7]
 8011588:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 801158c:	4b5f      	ldr	r3, [pc, #380]	@ (801170c <PrepareFrame+0x224>)
 801158e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011592:	4a5b      	ldr	r2, [pc, #364]	@ (8011700 <PrepareFrame+0x218>)
 8011594:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	781a      	ldrb	r2, [r3, #0]
 801159c:	4b58      	ldr	r3, [pc, #352]	@ (8011700 <PrepareFrame+0x218>)
 801159e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80115a2:	4b57      	ldr	r3, [pc, #348]	@ (8011700 <PrepareFrame+0x218>)
 80115a4:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 80115a8:	4b55      	ldr	r3, [pc, #340]	@ (8011700 <PrepareFrame+0x218>)
 80115aa:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80115ae:	4b54      	ldr	r3, [pc, #336]	@ (8011700 <PrepareFrame+0x218>)
 80115b0:	4a54      	ldr	r2, [pc, #336]	@ (8011704 <PrepareFrame+0x21c>)
 80115b2:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80115b6:	f107 0318 	add.w	r3, r7, #24
 80115ba:	4618      	mov	r0, r3
 80115bc:	f003 f8e6 	bl	801478c <LoRaMacCryptoGetFCntUp>
 80115c0:	4603      	mov	r3, r0
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d001      	beq.n	80115ca <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80115c6:	2312      	movs	r3, #18
 80115c8:	e096      	b.n	80116f8 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80115ca:	69bb      	ldr	r3, [r7, #24]
 80115cc:	b29a      	uxth	r2, r3
 80115ce:	4b4c      	ldr	r3, [pc, #304]	@ (8011700 <PrepareFrame+0x218>)
 80115d0:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 80115d4:	4b4a      	ldr	r3, [pc, #296]	@ (8011700 <PrepareFrame+0x218>)
 80115d6:	2200      	movs	r2, #0
 80115d8:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80115dc:	4b48      	ldr	r3, [pc, #288]	@ (8011700 <PrepareFrame+0x218>)
 80115de:	2200      	movs	r2, #0
 80115e0:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80115e4:	69bb      	ldr	r3, [r7, #24]
 80115e6:	4a46      	ldr	r2, [pc, #280]	@ (8011700 <PrepareFrame+0x218>)
 80115e8:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80115ec:	f107 0314 	add.w	r3, r7, #20
 80115f0:	4618      	mov	r0, r3
 80115f2:	f002 fa83 	bl	8013afc <LoRaMacCommandsGetSizeSerializedCmds>
 80115f6:	4603      	mov	r3, r0
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d001      	beq.n	8011600 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80115fc:	2313      	movs	r3, #19
 80115fe:	e07b      	b.n	80116f8 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d074      	beq.n	80116f0 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8011606:	4b41      	ldr	r3, [pc, #260]	@ (801170c <PrepareFrame+0x224>)
 8011608:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801160c:	4618      	mov	r0, r3
 801160e:	f7fe fd4d 	bl	80100ac <GetMaxAppPayloadWithoutFOptsLength>
 8011612:	4603      	mov	r3, r0
 8011614:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011616:	4b3a      	ldr	r3, [pc, #232]	@ (8011700 <PrepareFrame+0x218>)
 8011618:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801161c:	2b00      	cmp	r3, #0
 801161e:	d01d      	beq.n	801165c <PrepareFrame+0x174>
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	2b0f      	cmp	r3, #15
 8011624:	d81a      	bhi.n	801165c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8011626:	f107 0314 	add.w	r3, r7, #20
 801162a:	4a39      	ldr	r2, [pc, #228]	@ (8011710 <PrepareFrame+0x228>)
 801162c:	4619      	mov	r1, r3
 801162e:	200f      	movs	r0, #15
 8011630:	f002 fa7a 	bl	8013b28 <LoRaMacCommandsSerializeCmds>
 8011634:	4603      	mov	r3, r0
 8011636:	2b00      	cmp	r3, #0
 8011638:	d001      	beq.n	801163e <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801163a:	2313      	movs	r3, #19
 801163c:	e05c      	b.n	80116f8 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	f003 030f 	and.w	r3, r3, #15
 8011644:	b2d9      	uxtb	r1, r3
 8011646:	68ba      	ldr	r2, [r7, #8]
 8011648:	7813      	ldrb	r3, [r2, #0]
 801164a:	f361 0303 	bfi	r3, r1, #0, #4
 801164e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	781a      	ldrb	r2, [r3, #0]
 8011654:	4b2a      	ldr	r3, [pc, #168]	@ (8011700 <PrepareFrame+0x218>)
 8011656:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801165a:	e049      	b.n	80116f0 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801165c:	4b28      	ldr	r3, [pc, #160]	@ (8011700 <PrepareFrame+0x218>)
 801165e:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011662:	2b00      	cmp	r3, #0
 8011664:	d010      	beq.n	8011688 <PrepareFrame+0x1a0>
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	2b0f      	cmp	r3, #15
 801166a:	d90d      	bls.n	8011688 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801166c:	7ffb      	ldrb	r3, [r7, #31]
 801166e:	f107 0114 	add.w	r1, r7, #20
 8011672:	4a28      	ldr	r2, [pc, #160]	@ (8011714 <PrepareFrame+0x22c>)
 8011674:	4618      	mov	r0, r3
 8011676:	f002 fa57 	bl	8013b28 <LoRaMacCommandsSerializeCmds>
 801167a:	4603      	mov	r3, r0
 801167c:	2b00      	cmp	r3, #0
 801167e:	d001      	beq.n	8011684 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011680:	2313      	movs	r3, #19
 8011682:	e039      	b.n	80116f8 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011684:	230a      	movs	r3, #10
 8011686:	e037      	b.n	80116f8 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011688:	7ffb      	ldrb	r3, [r7, #31]
 801168a:	f107 0114 	add.w	r1, r7, #20
 801168e:	4a21      	ldr	r2, [pc, #132]	@ (8011714 <PrepareFrame+0x22c>)
 8011690:	4618      	mov	r0, r3
 8011692:	f002 fa49 	bl	8013b28 <LoRaMacCommandsSerializeCmds>
 8011696:	4603      	mov	r3, r0
 8011698:	2b00      	cmp	r3, #0
 801169a:	d001      	beq.n	80116a0 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801169c:	2313      	movs	r3, #19
 801169e:	e02b      	b.n	80116f8 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80116a0:	4b17      	ldr	r3, [pc, #92]	@ (8011700 <PrepareFrame+0x218>)
 80116a2:	2200      	movs	r2, #0
 80116a4:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80116a8:	4b15      	ldr	r3, [pc, #84]	@ (8011700 <PrepareFrame+0x218>)
 80116aa:	4a1a      	ldr	r2, [pc, #104]	@ (8011714 <PrepareFrame+0x22c>)
 80116ac:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	b2da      	uxtb	r2, r3
 80116b4:	4b12      	ldr	r3, [pc, #72]	@ (8011700 <PrepareFrame+0x218>)
 80116b6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 80116ba:	e019      	b.n	80116f0 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d018      	beq.n	80116f4 <PrepareFrame+0x20c>
 80116c2:	4b0f      	ldr	r3, [pc, #60]	@ (8011700 <PrepareFrame+0x218>)
 80116c4:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d013      	beq.n	80116f4 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80116cc:	4812      	ldr	r0, [pc, #72]	@ (8011718 <PrepareFrame+0x230>)
 80116ce:	4b0c      	ldr	r3, [pc, #48]	@ (8011700 <PrepareFrame+0x218>)
 80116d0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80116d4:	461a      	mov	r2, r3
 80116d6:	6839      	ldr	r1, [r7, #0]
 80116d8:	f006 f969 	bl	80179ae <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80116dc:	4b08      	ldr	r3, [pc, #32]	@ (8011700 <PrepareFrame+0x218>)
 80116de:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80116e2:	3301      	adds	r3, #1
 80116e4:	b29a      	uxth	r2, r3
 80116e6:	4b06      	ldr	r3, [pc, #24]	@ (8011700 <PrepareFrame+0x218>)
 80116e8:	801a      	strh	r2, [r3, #0]
            }
            break;
 80116ea:	e003      	b.n	80116f4 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80116ec:	2302      	movs	r3, #2
 80116ee:	e003      	b.n	80116f8 <PrepareFrame+0x210>
            break;
 80116f0:	bf00      	nop
 80116f2:	e000      	b.n	80116f6 <PrepareFrame+0x20e>
            break;
 80116f4:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80116f6:	2300      	movs	r3, #0
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3720      	adds	r7, #32
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	2000093c 	.word	0x2000093c
 8011704:	20000a74 	.word	0x20000a74
 8011708:	2000093e 	.word	0x2000093e
 801170c:	20000e5c 	.word	0x20000e5c
 8011710:	20000a54 	.word	0x20000a54
 8011714:	20000ddc 	.word	0x20000ddc
 8011718:	2000093f 	.word	0x2000093f

0801171c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b08a      	sub	sp, #40	@ 0x28
 8011720:	af00      	add	r7, sp, #0
 8011722:	4603      	mov	r3, r0
 8011724:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011726:	2303      	movs	r3, #3
 8011728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 801172c:	2300      	movs	r3, #0
 801172e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8011730:	79fb      	ldrb	r3, [r7, #7]
 8011732:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011734:	4b4a      	ldr	r3, [pc, #296]	@ (8011860 <SendFrameOnChannel+0x144>)
 8011736:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801173a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801173c:	4b48      	ldr	r3, [pc, #288]	@ (8011860 <SendFrameOnChannel+0x144>)
 801173e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011742:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011744:	4b46      	ldr	r3, [pc, #280]	@ (8011860 <SendFrameOnChannel+0x144>)
 8011746:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011748:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801174a:	4b45      	ldr	r3, [pc, #276]	@ (8011860 <SendFrameOnChannel+0x144>)
 801174c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801174e:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011750:	4b44      	ldr	r3, [pc, #272]	@ (8011864 <SendFrameOnChannel+0x148>)
 8011752:	881b      	ldrh	r3, [r3, #0]
 8011754:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011756:	4b42      	ldr	r3, [pc, #264]	@ (8011860 <SendFrameOnChannel+0x144>)
 8011758:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 801175c:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801175e:	4b40      	ldr	r3, [pc, #256]	@ (8011860 <SendFrameOnChannel+0x144>)
 8011760:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8011764:	f107 020f 	add.w	r2, r7, #15
 8011768:	f107 0110 	add.w	r1, r7, #16
 801176c:	4b3e      	ldr	r3, [pc, #248]	@ (8011868 <SendFrameOnChannel+0x14c>)
 801176e:	f003 ff23 	bl	80155b8 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011772:	4b3c      	ldr	r3, [pc, #240]	@ (8011864 <SendFrameOnChannel+0x148>)
 8011774:	2201      	movs	r2, #1
 8011776:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801177a:	4b39      	ldr	r3, [pc, #228]	@ (8011860 <SendFrameOnChannel+0x144>)
 801177c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011780:	b2da      	uxtb	r2, r3
 8011782:	4b38      	ldr	r3, [pc, #224]	@ (8011864 <SendFrameOnChannel+0x148>)
 8011784:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8011788:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801178c:	4b35      	ldr	r3, [pc, #212]	@ (8011864 <SendFrameOnChannel+0x148>)
 801178e:	f883 2447 	strb.w	r2, [r3, #1095]	@ 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8011792:	79fb      	ldrb	r3, [r7, #7]
 8011794:	4a33      	ldr	r2, [pc, #204]	@ (8011864 <SendFrameOnChannel+0x148>)
 8011796:	f8c2 3454 	str.w	r3, [r2, #1108]	@ 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801179a:	4b32      	ldr	r3, [pc, #200]	@ (8011864 <SendFrameOnChannel+0x148>)
 801179c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80117a0:	4a30      	ldr	r2, [pc, #192]	@ (8011864 <SendFrameOnChannel+0x148>)
 80117a2:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80117a6:	4b2f      	ldr	r3, [pc, #188]	@ (8011864 <SendFrameOnChannel+0x148>)
 80117a8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80117ac:	4a2d      	ldr	r2, [pc, #180]	@ (8011864 <SendFrameOnChannel+0x148>)
 80117ae:	f8c2 345c 	str.w	r3, [r2, #1116]	@ 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80117b2:	f001 ff34 	bl	801361e <LoRaMacClassBIsBeaconModeActive>
 80117b6:	4603      	mov	r3, r0
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d00b      	beq.n	80117d4 <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80117bc:	4b29      	ldr	r3, [pc, #164]	@ (8011864 <SendFrameOnChannel+0x148>)
 80117be:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 80117c2:	4618      	mov	r0, r3
 80117c4:	f001 ff96 	bl	80136f4 <LoRaMacClassBIsUplinkCollision>
 80117c8:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80117ca:	6a3b      	ldr	r3, [r7, #32]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d001      	beq.n	80117d4 <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80117d0:	2310      	movs	r3, #16
 80117d2:	e040      	b.n	8011856 <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80117d4:	4b22      	ldr	r3, [pc, #136]	@ (8011860 <SendFrameOnChannel+0x144>)
 80117d6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80117da:	2b01      	cmp	r3, #1
 80117dc:	d101      	bne.n	80117e2 <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80117de:	f001 ff93 	bl	8013708 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80117e2:	f001 ff2d 	bl	8013640 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80117e6:	4b1e      	ldr	r3, [pc, #120]	@ (8011860 <SendFrameOnChannel+0x144>)
 80117e8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80117ec:	b2db      	uxtb	r3, r3
 80117ee:	4a1d      	ldr	r2, [pc, #116]	@ (8011864 <SendFrameOnChannel+0x148>)
 80117f0:	f892 241f 	ldrb.w	r2, [r2, #1055]	@ 0x41f
 80117f4:	4611      	mov	r1, r2
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7ff fc66 	bl	80110c8 <SecureFrame>
 80117fc:	4603      	mov	r3, r0
 80117fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8011802:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011806:	2b00      	cmp	r3, #0
 8011808:	d002      	beq.n	8011810 <SendFrameOnChannel+0xf4>
    {
        return status;
 801180a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801180e:	e022      	b.n	8011856 <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011810:	4b14      	ldr	r3, [pc, #80]	@ (8011864 <SendFrameOnChannel+0x148>)
 8011812:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011816:	f043 0302 	orr.w	r3, r3, #2
 801181a:	4a12      	ldr	r2, [pc, #72]	@ (8011864 <SendFrameOnChannel+0x148>)
 801181c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 8011820:	4b10      	ldr	r3, [pc, #64]	@ (8011864 <SendFrameOnChannel+0x148>)
 8011822:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011826:	3301      	adds	r3, #1
 8011828:	b2da      	uxtb	r2, r3
 801182a:	4b0e      	ldr	r3, [pc, #56]	@ (8011864 <SendFrameOnChannel+0x148>)
 801182c:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011830:	4b0c      	ldr	r3, [pc, #48]	@ (8011864 <SendFrameOnChannel+0x148>)
 8011832:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8011836:	4b0b      	ldr	r3, [pc, #44]	@ (8011864 <SendFrameOnChannel+0x148>)
 8011838:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 801183c:	4b09      	ldr	r3, [pc, #36]	@ (8011864 <SendFrameOnChannel+0x148>)
 801183e:	2200      	movs	r2, #0
 8011840:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8011844:	4b09      	ldr	r3, [pc, #36]	@ (801186c <SendFrameOnChannel+0x150>)
 8011846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011848:	4a06      	ldr	r2, [pc, #24]	@ (8011864 <SendFrameOnChannel+0x148>)
 801184a:	8812      	ldrh	r2, [r2, #0]
 801184c:	b2d2      	uxtb	r2, r2
 801184e:	4611      	mov	r1, r2
 8011850:	4807      	ldr	r0, [pc, #28]	@ (8011870 <SendFrameOnChannel+0x154>)
 8011852:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8011854:	2300      	movs	r3, #0
}
 8011856:	4618      	mov	r0, r3
 8011858:	3728      	adds	r7, #40	@ 0x28
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop
 8011860:	20000e5c 	.word	0x20000e5c
 8011864:	2000093c 	.word	0x2000093c
 8011868:	20000d5c 	.word	0x20000d5c
 801186c:	0801fedc 	.word	0x0801fedc
 8011870:	2000093e 	.word	0x2000093e

08011874 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	4603      	mov	r3, r0
 801187c:	6039      	str	r1, [r7, #0]
 801187e:	80fb      	strh	r3, [r7, #6]
 8011880:	4613      	mov	r3, r2
 8011882:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8011884:	4b09      	ldr	r3, [pc, #36]	@ (80118ac <SetTxContinuousWave+0x38>)
 8011886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011888:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801188c:	88fa      	ldrh	r2, [r7, #6]
 801188e:	6838      	ldr	r0, [r7, #0]
 8011890:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011892:	4b07      	ldr	r3, [pc, #28]	@ (80118b0 <SetTxContinuousWave+0x3c>)
 8011894:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011898:	f043 0302 	orr.w	r3, r3, #2
 801189c:	4a04      	ldr	r2, [pc, #16]	@ (80118b0 <SetTxContinuousWave+0x3c>)
 801189e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 80118a2:	2300      	movs	r3, #0
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3708      	adds	r7, #8
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}
 80118ac:	0801fedc 	.word	0x0801fedc
 80118b0:	2000093c 	.word	0x2000093c

080118b4 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 80118ba:	2300      	movs	r3, #0
 80118bc:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80118be:	4b3e      	ldr	r3, [pc, #248]	@ (80119b8 <RestoreNvmData+0x104>)
 80118c0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d001      	beq.n	80118cc <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 80118c8:	2301      	movs	r3, #1
 80118ca:	e071      	b.n	80119b0 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80118cc:	2124      	movs	r1, #36	@ 0x24
 80118ce:	483b      	ldr	r0, [pc, #236]	@ (80119bc <RestoreNvmData+0x108>)
 80118d0:	f006 f8c2 	bl	8017a58 <Crc32>
 80118d4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 80118d6:	4b39      	ldr	r3, [pc, #228]	@ (80119bc <RestoreNvmData+0x108>)
 80118d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118da:	687a      	ldr	r2, [r7, #4]
 80118dc:	429a      	cmp	r2, r3
 80118de:	d001      	beq.n	80118e4 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80118e0:	2317      	movs	r3, #23
 80118e2:	e065      	b.n	80119b0 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80118e4:	2114      	movs	r1, #20
 80118e6:	4836      	ldr	r0, [pc, #216]	@ (80119c0 <RestoreNvmData+0x10c>)
 80118e8:	f006 f8b6 	bl	8017a58 <Crc32>
 80118ec:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80118ee:	4b33      	ldr	r3, [pc, #204]	@ (80119bc <RestoreNvmData+0x108>)
 80118f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80118f2:	687a      	ldr	r2, [r7, #4]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d001      	beq.n	80118fc <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80118f8:	2317      	movs	r3, #23
 80118fa:	e059      	b.n	80119b0 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80118fc:	21e0      	movs	r1, #224	@ 0xe0
 80118fe:	4831      	ldr	r0, [pc, #196]	@ (80119c4 <RestoreNvmData+0x110>)
 8011900:	f006 f8aa 	bl	8017a58 <Crc32>
 8011904:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8011906:	4b2d      	ldr	r3, [pc, #180]	@ (80119bc <RestoreNvmData+0x108>)
 8011908:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801190c:	687a      	ldr	r2, [r7, #4]
 801190e:	429a      	cmp	r2, r3
 8011910:	d001      	beq.n	8011916 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011912:	2317      	movs	r3, #23
 8011914:	e04c      	b.n	80119b0 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8011916:	21bc      	movs	r1, #188	@ 0xbc
 8011918:	482b      	ldr	r0, [pc, #172]	@ (80119c8 <RestoreNvmData+0x114>)
 801191a:	f006 f89d 	bl	8017a58 <Crc32>
 801191e:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8011920:	4b26      	ldr	r3, [pc, #152]	@ (80119bc <RestoreNvmData+0x108>)
 8011922:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	429a      	cmp	r2, r3
 801192a:	d001      	beq.n	8011930 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801192c:	2317      	movs	r3, #23
 801192e:	e03f      	b.n	80119b0 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8011930:	2100      	movs	r1, #0
 8011932:	4826      	ldr	r0, [pc, #152]	@ (80119cc <RestoreNvmData+0x118>)
 8011934:	f006 f890 	bl	8017a58 <Crc32>
 8011938:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 801193a:	4b20      	ldr	r3, [pc, #128]	@ (80119bc <RestoreNvmData+0x108>)
 801193c:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 8011940:	687a      	ldr	r2, [r7, #4]
 8011942:	429a      	cmp	r2, r3
 8011944:	d001      	beq.n	801194a <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011946:	2317      	movs	r3, #23
 8011948:	e032      	b.n	80119b0 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 801194a:	2114      	movs	r1, #20
 801194c:	4820      	ldr	r0, [pc, #128]	@ (80119d0 <RestoreNvmData+0x11c>)
 801194e:	f006 f883 	bl	8017a58 <Crc32>
 8011952:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8011954:	4b19      	ldr	r3, [pc, #100]	@ (80119bc <RestoreNvmData+0x108>)
 8011956:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	429a      	cmp	r2, r3
 801195e:	d001      	beq.n	8011964 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011960:	2317      	movs	r3, #23
 8011962:	e025      	b.n	80119b0 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8011964:	f240 527c 	movw	r2, #1404	@ 0x57c
 8011968:	4914      	ldr	r1, [pc, #80]	@ (80119bc <RestoreNvmData+0x108>)
 801196a:	481a      	ldr	r0, [pc, #104]	@ (80119d4 <RestoreNvmData+0x120>)
 801196c:	f006 f81f 	bl	80179ae <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8011970:	f240 527c 	movw	r2, #1404	@ 0x57c
 8011974:	2100      	movs	r1, #0
 8011976:	4811      	ldr	r0, [pc, #68]	@ (80119bc <RestoreNvmData+0x108>)
 8011978:	f006 f854 	bl	8017a24 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801197c:	4b0e      	ldr	r3, [pc, #56]	@ (80119b8 <RestoreNvmData+0x104>)
 801197e:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 8011982:	4b0d      	ldr	r3, [pc, #52]	@ (80119b8 <RestoreNvmData+0x104>)
 8011984:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011988:	4b12      	ldr	r3, [pc, #72]	@ (80119d4 <RestoreNvmData+0x120>)
 801198a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801198c:	4a0a      	ldr	r2, [pc, #40]	@ (80119b8 <RestoreNvmData+0x104>)
 801198e:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011992:	4b10      	ldr	r3, [pc, #64]	@ (80119d4 <RestoreNvmData+0x120>)
 8011994:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8011998:	4b07      	ldr	r3, [pc, #28]	@ (80119b8 <RestoreNvmData+0x104>)
 801199a:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801199e:	4b06      	ldr	r3, [pc, #24]	@ (80119b8 <RestoreNvmData+0x104>)
 80119a0:	2201      	movs	r2, #1
 80119a2:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80119a6:	4b04      	ldr	r3, [pc, #16]	@ (80119b8 <RestoreNvmData+0x104>)
 80119a8:	2202      	movs	r2, #2
 80119aa:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    return LORAMAC_STATUS_OK;
 80119ae:	2300      	movs	r3, #0
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	3708      	adds	r7, #8
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}
 80119b8:	2000093c 	.word	0x2000093c
 80119bc:	200013d8 	.word	0x200013d8
 80119c0:	20001400 	.word	0x20001400
 80119c4:	20001418 	.word	0x20001418
 80119c8:	200014fc 	.word	0x200014fc
 80119cc:	200015bc 	.word	0x200015bc
 80119d0:	2000193c 	.word	0x2000193c
 80119d4:	20000e5c 	.word	0x20000e5c

080119d8 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80119d8:	b480      	push	{r7}
 80119da:	b083      	sub	sp, #12
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d002      	beq.n	80119ee <DetermineFrameType+0x16>
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d101      	bne.n	80119f2 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80119ee:	2303      	movs	r3, #3
 80119f0:	e03b      	b.n	8011a6a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	7b1b      	ldrb	r3, [r3, #12]
 80119f6:	f003 030f 	and.w	r3, r3, #15
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d008      	beq.n	8011a12 <DetermineFrameType+0x3a>
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d003      	beq.n	8011a12 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	701a      	strb	r2, [r3, #0]
 8011a10:	e02a      	b.n	8011a68 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d103      	bne.n	8011a24 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	2201      	movs	r2, #1
 8011a20:	701a      	strb	r2, [r3, #0]
 8011a22:	e021      	b.n	8011a68 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	7b1b      	ldrb	r3, [r3, #12]
 8011a28:	f003 030f 	and.w	r3, r3, #15
 8011a2c:	b2db      	uxtb	r3, r3
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d108      	bne.n	8011a44 <DetermineFrameType+0x6c>
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d103      	bne.n	8011a44 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	2202      	movs	r2, #2
 8011a40:	701a      	strb	r2, [r3, #0]
 8011a42:	e011      	b.n	8011a68 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	7b1b      	ldrb	r3, [r3, #12]
 8011a48:	f003 030f 	and.w	r3, r3, #15
 8011a4c:	b2db      	uxtb	r3, r3
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d108      	bne.n	8011a64 <DetermineFrameType+0x8c>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d003      	beq.n	8011a64 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	2203      	movs	r2, #3
 8011a60:	701a      	strb	r2, [r3, #0]
 8011a62:	e001      	b.n	8011a68 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011a64:	2318      	movs	r3, #24
 8011a66:	e000      	b.n	8011a6a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8011a68:	2300      	movs	r3, #0
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	370c      	adds	r7, #12
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bc80      	pop	{r7}
 8011a72:	4770      	bx	lr

08011a74 <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8011a74:	b480      	push	{r7}
 8011a76:	b083      	sub	sp, #12
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	460a      	mov	r2, r1
 8011a7e:	71fb      	strb	r3, [r7, #7]
 8011a80:	4613      	mov	r3, r2
 8011a82:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8011a84:	79fa      	ldrb	r2, [r7, #7]
 8011a86:	79bb      	ldrb	r3, [r7, #6]
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d301      	bcc.n	8011a90 <CheckRetrans+0x1c>
    {
        return true;
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	e000      	b.n	8011a92 <CheckRetrans+0x1e>
    }
    return false;
 8011a90:	2300      	movs	r3, #0
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	370c      	adds	r7, #12
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bc80      	pop	{r7}
 8011a9a:	4770      	bx	lr

08011a9c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011aa0:	4b12      	ldr	r3, [pc, #72]	@ (8011aec <CheckRetransUnconfirmedUplink+0x50>)
 8011aa2:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011aa6:	4a12      	ldr	r2, [pc, #72]	@ (8011af0 <CheckRetransUnconfirmedUplink+0x54>)
 8011aa8:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8011aac:	4611      	mov	r1, r2
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7ff ffe0 	bl	8011a74 <CheckRetrans>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d001      	beq.n	8011abe <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8011aba:	2301      	movs	r3, #1
 8011abc:	e014      	b.n	8011ae8 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011abe:	4b0b      	ldr	r3, [pc, #44]	@ (8011aec <CheckRetransUnconfirmedUplink+0x50>)
 8011ac0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011ac4:	f003 0302 	and.w	r3, r3, #2
 8011ac8:	b2db      	uxtb	r3, r3
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d00b      	beq.n	8011ae6 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011ace:	4b07      	ldr	r3, [pc, #28]	@ (8011aec <CheckRetransUnconfirmedUplink+0x50>)
 8011ad0:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d004      	beq.n	8011ae2 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011ad8:	4b04      	ldr	r3, [pc, #16]	@ (8011aec <CheckRetransUnconfirmedUplink+0x50>)
 8011ada:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011ade:	2b01      	cmp	r3, #1
 8011ae0:	d101      	bne.n	8011ae6 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8011ae2:	2301      	movs	r3, #1
 8011ae4:	e000      	b.n	8011ae8 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8011ae6:	2300      	movs	r3, #0
}
 8011ae8:	4618      	mov	r0, r3
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	2000093c 	.word	0x2000093c
 8011af0:	20000e5c 	.word	0x20000e5c

08011af4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011af8:	4b10      	ldr	r3, [pc, #64]	@ (8011b3c <CheckRetransConfirmedUplink+0x48>)
 8011afa:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011afe:	4a10      	ldr	r2, [pc, #64]	@ (8011b40 <CheckRetransConfirmedUplink+0x4c>)
 8011b00:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8011b04:	4611      	mov	r1, r2
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7ff ffb4 	bl	8011a74 <CheckRetrans>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d001      	beq.n	8011b16 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8011b12:	2301      	movs	r3, #1
 8011b14:	e00f      	b.n	8011b36 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011b16:	4b09      	ldr	r3, [pc, #36]	@ (8011b3c <CheckRetransConfirmedUplink+0x48>)
 8011b18:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011b1c:	f003 0302 	and.w	r3, r3, #2
 8011b20:	b2db      	uxtb	r3, r3
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d006      	beq.n	8011b34 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011b26:	4b05      	ldr	r3, [pc, #20]	@ (8011b3c <CheckRetransConfirmedUplink+0x48>)
 8011b28:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d001      	beq.n	8011b34 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8011b30:	2301      	movs	r3, #1
 8011b32:	e000      	b.n	8011b36 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8011b34:	2300      	movs	r3, #0
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	bd80      	pop	{r7, pc}
 8011b3a:	bf00      	nop
 8011b3c:	2000093c 	.word	0x2000093c
 8011b40:	20000e5c 	.word	0x20000e5c

08011b44 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8011b44:	b480      	push	{r7}
 8011b46:	b083      	sub	sp, #12
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b52:	d002      	beq.n	8011b5a <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	3301      	adds	r3, #1
 8011b58:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8011b5a:	687b      	ldr	r3, [r7, #4]
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	370c      	adds	r7, #12
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bc80      	pop	{r7}
 8011b64:	4770      	bx	lr
	...

08011b68 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8011bd8 <StopRetransmission+0x70>)
 8011b6e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011b72:	f003 0302 	and.w	r3, r3, #2
 8011b76:	b2db      	uxtb	r3, r3
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d009      	beq.n	8011b90 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011b7c:	4b16      	ldr	r3, [pc, #88]	@ (8011bd8 <StopRetransmission+0x70>)
 8011b7e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d011      	beq.n	8011baa <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011b86:	4b14      	ldr	r3, [pc, #80]	@ (8011bd8 <StopRetransmission+0x70>)
 8011b88:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011b8c:	2b01      	cmp	r3, #1
 8011b8e:	d00c      	beq.n	8011baa <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8011b90:	4b12      	ldr	r3, [pc, #72]	@ (8011bdc <StopRetransmission+0x74>)
 8011b92:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d007      	beq.n	8011baa <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8011b9a:	4b10      	ldr	r3, [pc, #64]	@ (8011bdc <StopRetransmission+0x74>)
 8011b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7ff ffd0 	bl	8011b44 <IncreaseAdrAckCounter>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	4a0d      	ldr	r2, [pc, #52]	@ (8011bdc <StopRetransmission+0x74>)
 8011ba8:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8011baa:	4b0b      	ldr	r3, [pc, #44]	@ (8011bd8 <StopRetransmission+0x70>)
 8011bac:	2200      	movs	r2, #0
 8011bae:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.NodeAckRequested = false;
 8011bb2:	4b09      	ldr	r3, [pc, #36]	@ (8011bd8 <StopRetransmission+0x70>)
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8011bba:	4b07      	ldr	r3, [pc, #28]	@ (8011bd8 <StopRetransmission+0x70>)
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011bc2:	4b05      	ldr	r3, [pc, #20]	@ (8011bd8 <StopRetransmission+0x70>)
 8011bc4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011bc8:	f023 0302 	bic.w	r3, r3, #2
 8011bcc:	4a02      	ldr	r2, [pc, #8]	@ (8011bd8 <StopRetransmission+0x70>)
 8011bce:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8011bd2:	2301      	movs	r3, #1
}
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	bd80      	pop	{r7, pc}
 8011bd8:	2000093c 	.word	0x2000093c
 8011bdc:	20000e5c 	.word	0x20000e5c

08011be0 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b082      	sub	sp, #8
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	4603      	mov	r3, r0
 8011be8:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011bea:	4b0b      	ldr	r3, [pc, #44]	@ (8011c18 <CallNvmDataChangeCallback+0x38>)
 8011bec:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d00c      	beq.n	8011c0e <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8011bf4:	4b08      	ldr	r3, [pc, #32]	@ (8011c18 <CallNvmDataChangeCallback+0x38>)
 8011bf6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011bfa:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d006      	beq.n	8011c0e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011c00:	4b05      	ldr	r3, [pc, #20]	@ (8011c18 <CallNvmDataChangeCallback+0x38>)
 8011c02:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011c06:	68db      	ldr	r3, [r3, #12]
 8011c08:	88fa      	ldrh	r2, [r7, #6]
 8011c0a:	4610      	mov	r0, r2
 8011c0c:	4798      	blx	r3
    }
}
 8011c0e:	bf00      	nop
 8011c10:	3708      	adds	r7, #8
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}
 8011c16:	bf00      	nop
 8011c18:	2000093c 	.word	0x2000093c

08011c1c <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011c20:	4b0b      	ldr	r3, [pc, #44]	@ (8011c50 <IsRequestPending+0x34>)
 8011c22:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011c26:	f003 0304 	and.w	r3, r3, #4
 8011c2a:	b2db      	uxtb	r3, r3
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d107      	bne.n	8011c40 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011c30:	4b07      	ldr	r3, [pc, #28]	@ (8011c50 <IsRequestPending+0x34>)
 8011c32:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011c36:	f003 0301 	and.w	r3, r3, #1
 8011c3a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d001      	beq.n	8011c44 <IsRequestPending+0x28>
    {
        return 1;
 8011c40:	2301      	movs	r3, #1
 8011c42:	e000      	b.n	8011c46 <IsRequestPending+0x2a>
    }
    return 0;
 8011c44:	2300      	movs	r3, #0
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bc80      	pop	{r7}
 8011c4c:	4770      	bx	lr
 8011c4e:	bf00      	nop
 8011c50:	2000093c 	.word	0x2000093c

08011c54 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8011c54:	b590      	push	{r4, r7, lr}
 8011c56:	b091      	sub	sp, #68	@ 0x44
 8011c58:	af02      	add	r7, sp, #8
 8011c5a:	6178      	str	r0, [r7, #20]
 8011c5c:	6139      	str	r1, [r7, #16]
 8011c5e:	4613      	mov	r3, r2
 8011c60:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d002      	beq.n	8011c6e <LoRaMacInitialization+0x1a>
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d101      	bne.n	8011c72 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011c6e:	2303      	movs	r3, #3
 8011c70:	e27c      	b.n	801216c <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d00b      	beq.n	8011c92 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8011c7a:	697b      	ldr	r3, [r7, #20]
 8011c7c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d007      	beq.n	8011c92 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d003      	beq.n	8011c92 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d101      	bne.n	8011c96 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011c92:	2303      	movs	r3, #3
 8011c94:	e26a      	b.n	801216c <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8011c96:	7bfb      	ldrb	r3, [r7, #15]
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f003 fbd7 	bl	801544c <RegionIsActive>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	f083 0301 	eor.w	r3, r3, #1
 8011ca4:	b2db      	uxtb	r3, r3
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d001      	beq.n	8011cae <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8011caa:	2309      	movs	r3, #9
 8011cac:	e25e      	b.n	801216c <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8011cae:	6978      	ldr	r0, [r7, #20]
 8011cb0:	f002 f884 	bl	8013dbc <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8011cb4:	f240 527c 	movw	r2, #1404	@ 0x57c
 8011cb8:	2100      	movs	r1, #0
 8011cba:	48c7      	ldr	r0, [pc, #796]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011cbc:	f005 feb2 	bl	8017a24 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011cc0:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8011cc4:	2100      	movs	r1, #0
 8011cc6:	48c5      	ldr	r0, [pc, #788]	@ (8011fdc <LoRaMacInitialization+0x388>)
 8011cc8:	f005 feac 	bl	8017a24 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8011ccc:	4ac2      	ldr	r2, [pc, #776]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011cce:	7bfb      	ldrb	r3, [r7, #15]
 8011cd0:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8011cd4:	4bc0      	ldr	r3, [pc, #768]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8011cdc:	4bbe      	ldr	r3, [pc, #760]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011cde:	2200      	movs	r2, #0
 8011ce0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8011ce4:	4bbc      	ldr	r3, [pc, #752]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011ce6:	4abe      	ldr	r2, [pc, #760]	@ (8011fe0 <LoRaMacInitialization+0x38c>)
 8011ce8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8011cec:	2300      	movs	r3, #0
 8011cee:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011cf2:	4bbc      	ldr	r3, [pc, #752]	@ (8011fe4 <LoRaMacInitialization+0x390>)
 8011cf4:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011cf6:	4bbc      	ldr	r3, [pc, #752]	@ (8011fe8 <LoRaMacInitialization+0x394>)
 8011cf8:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8011cfa:	4bbc      	ldr	r3, [pc, #752]	@ (8011fec <LoRaMacInitialization+0x398>)
 8011cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011cfe:	4bb6      	ldr	r3, [pc, #728]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011d00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d04:	f107 021c 	add.w	r2, r7, #28
 8011d08:	4611      	mov	r1, r2
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f003 fbd7 	bl	80154be <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011d10:	230f      	movs	r3, #15
 8011d12:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d16:	4bb0      	ldr	r3, [pc, #704]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011d18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d1c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011d20:	4611      	mov	r1, r2
 8011d22:	4618      	mov	r0, r3
 8011d24:	f003 fba2 	bl	801546c <RegionGetPhyParam>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8011d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	bf14      	ite	ne
 8011d32:	2301      	movne	r3, #1
 8011d34:	2300      	moveq	r3, #0
 8011d36:	b2da      	uxtb	r2, r3
 8011d38:	4ba7      	ldr	r3, [pc, #668]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011d3a:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8011d3e:	230a      	movs	r3, #10
 8011d40:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d44:	4ba4      	ldr	r3, [pc, #656]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011d46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d4a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011d4e:	4611      	mov	r1, r2
 8011d50:	4618      	mov	r0, r3
 8011d52:	f003 fb8b 	bl	801546c <RegionGetPhyParam>
 8011d56:	4603      	mov	r3, r0
 8011d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8011d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d5c:	b25a      	sxtb	r2, r3
 8011d5e:	4b9e      	ldr	r3, [pc, #632]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011d60:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8011d64:	2306      	movs	r3, #6
 8011d66:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d6a:	4b9b      	ldr	r3, [pc, #620]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d70:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011d74:	4611      	mov	r1, r2
 8011d76:	4618      	mov	r0, r3
 8011d78:	f003 fb78 	bl	801546c <RegionGetPhyParam>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d82:	b25a      	sxtb	r2, r3
 8011d84:	4b94      	ldr	r3, [pc, #592]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011d86:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8011d8a:	2310      	movs	r3, #16
 8011d8c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d90:	4b91      	ldr	r3, [pc, #580]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011d92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d96:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011d9a:	4611      	mov	r1, r2
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f003 fb65 	bl	801546c <RegionGetPhyParam>
 8011da2:	4603      	mov	r3, r0
 8011da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011da8:	4a8b      	ldr	r2, [pc, #556]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011daa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011dae:	2311      	movs	r3, #17
 8011db0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011db4:	4b88      	ldr	r3, [pc, #544]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011db6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011dba:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011dbe:	4611      	mov	r1, r2
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f003 fb53 	bl	801546c <RegionGetPhyParam>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dcc:	4a82      	ldr	r2, [pc, #520]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011dce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011dd2:	2312      	movs	r3, #18
 8011dd4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011dd8:	4b7f      	ldr	r3, [pc, #508]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011dda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011dde:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011de2:	4611      	mov	r1, r2
 8011de4:	4618      	mov	r0, r3
 8011de6:	f003 fb41 	bl	801546c <RegionGetPhyParam>
 8011dea:	4603      	mov	r3, r0
 8011dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011df0:	4a79      	ldr	r2, [pc, #484]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011df2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011df6:	2313      	movs	r3, #19
 8011df8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011dfc:	4b76      	ldr	r3, [pc, #472]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011e02:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011e06:	4611      	mov	r1, r2
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f003 fb2f 	bl	801546c <RegionGetPhyParam>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8011e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e14:	4a70      	ldr	r2, [pc, #448]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011e16:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011e1a:	2314      	movs	r3, #20
 8011e1c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e20:	4b6d      	ldr	r3, [pc, #436]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011e22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011e26:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011e2a:	4611      	mov	r1, r2
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f003 fb1d 	bl	801546c <RegionGetPhyParam>
 8011e32:	4603      	mov	r3, r0
 8011e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8011e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e38:	4a67      	ldr	r2, [pc, #412]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011e3a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8011e3e:	2316      	movs	r3, #22
 8011e40:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e44:	4b64      	ldr	r3, [pc, #400]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011e46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011e4a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011e4e:	4611      	mov	r1, r2
 8011e50:	4618      	mov	r0, r3
 8011e52:	f003 fb0b 	bl	801546c <RegionGetPhyParam>
 8011e56:	4603      	mov	r3, r0
 8011e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8011e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e5c:	b2da      	uxtb	r2, r3
 8011e5e:	4b5e      	ldr	r3, [pc, #376]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011e60:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011e64:	2317      	movs	r3, #23
 8011e66:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e6a:	4b5b      	ldr	r3, [pc, #364]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011e70:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011e74:	4611      	mov	r1, r2
 8011e76:	4618      	mov	r0, r3
 8011e78:	f003 faf8 	bl	801546c <RegionGetPhyParam>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e82:	4a55      	ldr	r2, [pc, #340]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011e84:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e8a:	4a53      	ldr	r2, [pc, #332]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011e8c:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011e90:	2318      	movs	r3, #24
 8011e92:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011e96:	4b50      	ldr	r3, [pc, #320]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011e98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011e9c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011ea0:	4611      	mov	r1, r2
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f003 fae2 	bl	801546c <RegionGetPhyParam>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011eae:	b2da      	uxtb	r2, r3
 8011eb0:	4b49      	ldr	r3, [pc, #292]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011eb2:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011eb8:	b2da      	uxtb	r2, r3
 8011eba:	4b47      	ldr	r3, [pc, #284]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011ebc:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011ec0:	231d      	movs	r3, #29
 8011ec2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ec6:	4b44      	ldr	r3, [pc, #272]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011ecc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011ed0:	4611      	mov	r1, r2
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f003 faca 	bl	801546c <RegionGetPhyParam>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ede:	b2da      	uxtb	r2, r3
 8011ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011ee2:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011ee6:	231e      	movs	r3, #30
 8011ee8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011eec:	4b3a      	ldr	r3, [pc, #232]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011ef2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011ef6:	4611      	mov	r1, r2
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f003 fab7 	bl	801546c <RegionGetPhyParam>
 8011efe:	4603      	mov	r3, r0
 8011f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f04:	b2da      	uxtb	r2, r3
 8011f06:	4b34      	ldr	r3, [pc, #208]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011f08:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011f0c:	231f      	movs	r3, #31
 8011f0e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f12:	4b31      	ldr	r3, [pc, #196]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011f14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011f18:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011f1c:	4611      	mov	r1, r2
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f003 faa4 	bl	801546c <RegionGetPhyParam>
 8011f24:	4603      	mov	r3, r0
 8011f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011f2c:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011f30:	2320      	movs	r3, #32
 8011f32:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f36:	4b28      	ldr	r3, [pc, #160]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011f38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011f3c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011f40:	4611      	mov	r1, r2
 8011f42:	4618      	mov	r0, r3
 8011f44:	f003 fa92 	bl	801546c <RegionGetPhyParam>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f4e:	4a22      	ldr	r2, [pc, #136]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011f50:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011f54:	230b      	movs	r3, #11
 8011f56:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011f60:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011f64:	4611      	mov	r1, r2
 8011f66:	4618      	mov	r0, r3
 8011f68:	f003 fa80 	bl	801546c <RegionGetPhyParam>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 8011f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f72:	b29a      	uxth	r2, r3
 8011f74:	4b19      	ldr	r3, [pc, #100]	@ (8011fdc <LoRaMacInitialization+0x388>)
 8011f76:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011f7a:	230c      	movs	r3, #12
 8011f7c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f80:	4b15      	ldr	r3, [pc, #84]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011f82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011f86:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011f8a:	4611      	mov	r1, r2
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f003 fa6d 	bl	801546c <RegionGetPhyParam>
 8011f92:	4603      	mov	r3, r0
 8011f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 8011f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f98:	b29a      	uxth	r2, r3
 8011f9a:	4b10      	ldr	r3, [pc, #64]	@ (8011fdc <LoRaMacInitialization+0x388>)
 8011f9c:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011faa:	220a      	movs	r2, #10
 8011fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011fb0:	4b09      	ldr	r3, [pc, #36]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011fb2:	2206      	movs	r2, #6
 8011fb4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011fb8:	4b07      	ldr	r3, [pc, #28]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011fbe:	4a06      	ldr	r2, [pc, #24]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011fc0:	6453      	str	r3, [r2, #68]	@ 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011fc2:	4b05      	ldr	r3, [pc, #20]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011fc4:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011fc8:	4b03      	ldr	r3, [pc, #12]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011fca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011fce:	4b02      	ldr	r3, [pc, #8]	@ (8011fd8 <LoRaMacInitialization+0x384>)
 8011fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011fd4:	e00c      	b.n	8011ff0 <LoRaMacInitialization+0x39c>
 8011fd6:	bf00      	nop
 8011fd8:	20000e5c 	.word	0x20000e5c
 8011fdc:	2000093c 	.word	0x2000093c
 8011fe0:	01000400 	.word	0x01000400
 8011fe4:	20001040 	.word	0x20001040
 8011fe8:	20001044 	.word	0x20001044
 8011fec:	20001954 	.word	0x20001954
 8011ff0:	4a60      	ldr	r2, [pc, #384]	@ (8012174 <LoRaMacInitialization+0x520>)
 8011ff2:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011ff4:	4b5f      	ldr	r3, [pc, #380]	@ (8012174 <LoRaMacInitialization+0x520>)
 8011ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011ffa:	4a5e      	ldr	r2, [pc, #376]	@ (8012174 <LoRaMacInitialization+0x520>)
 8011ffc:	6513      	str	r3, [r2, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011ffe:	4b5d      	ldr	r3, [pc, #372]	@ (8012174 <LoRaMacInitialization+0x520>)
 8012000:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012004:	4a5b      	ldr	r2, [pc, #364]	@ (8012174 <LoRaMacInitialization+0x520>)
 8012006:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8012008:	4b5a      	ldr	r3, [pc, #360]	@ (8012174 <LoRaMacInitialization+0x520>)
 801200a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801200e:	4a59      	ldr	r2, [pc, #356]	@ (8012174 <LoRaMacInitialization+0x520>)
 8012010:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8012012:	4b58      	ldr	r3, [pc, #352]	@ (8012174 <LoRaMacInitialization+0x520>)
 8012014:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012018:	4a56      	ldr	r2, [pc, #344]	@ (8012174 <LoRaMacInitialization+0x520>)
 801201a:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 801201c:	4b55      	ldr	r3, [pc, #340]	@ (8012174 <LoRaMacInitialization+0x520>)
 801201e:	f893 20a4 	ldrb.w	r2, [r3, #164]	@ 0xa4
 8012022:	4b54      	ldr	r3, [pc, #336]	@ (8012174 <LoRaMacInitialization+0x520>)
 8012024:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8012028:	4b52      	ldr	r3, [pc, #328]	@ (8012174 <LoRaMacInitialization+0x520>)
 801202a:	2201      	movs	r2, #1
 801202c:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8012030:	4a51      	ldr	r2, [pc, #324]	@ (8012178 <LoRaMacInitialization+0x524>)
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( );
 8012038:	f7ff f8d6 	bl	80111e8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 801203c:	4b4d      	ldr	r3, [pc, #308]	@ (8012174 <LoRaMacInitialization+0x520>)
 801203e:	2201      	movs	r2, #1
 8012040:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

    MacCtx.MacPrimitives = primitives;
 8012044:	4a4c      	ldr	r2, [pc, #304]	@ (8012178 <LoRaMacInitialization+0x524>)
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 801204c:	4b4a      	ldr	r3, [pc, #296]	@ (8012178 <LoRaMacInitialization+0x524>)
 801204e:	2200      	movs	r2, #0
 8012050:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 8012054:	4b48      	ldr	r3, [pc, #288]	@ (8012178 <LoRaMacInitialization+0x524>)
 8012056:	2201      	movs	r2, #1
 8012058:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 801205c:	4b45      	ldr	r3, [pc, #276]	@ (8012174 <LoRaMacInitialization+0x520>)
 801205e:	2200      	movs	r2, #0
 8012060:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012062:	4b44      	ldr	r3, [pc, #272]	@ (8012174 <LoRaMacInitialization+0x520>)
 8012064:	2200      	movs	r2, #0
 8012066:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8012068:	2300      	movs	r3, #0
 801206a:	9300      	str	r3, [sp, #0]
 801206c:	4b43      	ldr	r3, [pc, #268]	@ (801217c <LoRaMacInitialization+0x528>)
 801206e:	2200      	movs	r2, #0
 8012070:	f04f 31ff 	mov.w	r1, #4294967295
 8012074:	4842      	ldr	r0, [pc, #264]	@ (8012180 <LoRaMacInitialization+0x52c>)
 8012076:	f009 fd3b 	bl	801baf0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801207a:	2300      	movs	r3, #0
 801207c:	9300      	str	r3, [sp, #0]
 801207e:	4b41      	ldr	r3, [pc, #260]	@ (8012184 <LoRaMacInitialization+0x530>)
 8012080:	2200      	movs	r2, #0
 8012082:	f04f 31ff 	mov.w	r1, #4294967295
 8012086:	4840      	ldr	r0, [pc, #256]	@ (8012188 <LoRaMacInitialization+0x534>)
 8012088:	f009 fd32 	bl	801baf0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 801208c:	2300      	movs	r3, #0
 801208e:	9300      	str	r3, [sp, #0]
 8012090:	4b3e      	ldr	r3, [pc, #248]	@ (801218c <LoRaMacInitialization+0x538>)
 8012092:	2200      	movs	r2, #0
 8012094:	f04f 31ff 	mov.w	r1, #4294967295
 8012098:	483d      	ldr	r0, [pc, #244]	@ (8012190 <LoRaMacInitialization+0x53c>)
 801209a:	f009 fd29 	bl	801baf0 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 801209e:	2300      	movs	r3, #0
 80120a0:	9300      	str	r3, [sp, #0]
 80120a2:	4b3c      	ldr	r3, [pc, #240]	@ (8012194 <LoRaMacInitialization+0x540>)
 80120a4:	2200      	movs	r2, #0
 80120a6:	f04f 31ff 	mov.w	r1, #4294967295
 80120aa:	483b      	ldr	r0, [pc, #236]	@ (8012198 <LoRaMacInitialization+0x544>)
 80120ac:	f009 fd20 	bl	801baf0 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80120b0:	4c30      	ldr	r4, [pc, #192]	@ (8012174 <LoRaMacInitialization+0x520>)
 80120b2:	463b      	mov	r3, r7
 80120b4:	4618      	mov	r0, r3
 80120b6:	f009 f891 	bl	801b1dc <SysTimeGetMcuTime>
 80120ba:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 80120be:	463a      	mov	r2, r7
 80120c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120c4:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 80120c8:	4b34      	ldr	r3, [pc, #208]	@ (801219c <LoRaMacInitialization+0x548>)
 80120ca:	2200      	movs	r2, #0
 80120cc:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80120ce:	4b2a      	ldr	r3, [pc, #168]	@ (8012178 <LoRaMacInitialization+0x524>)
 80120d0:	4a33      	ldr	r2, [pc, #204]	@ (80121a0 <LoRaMacInitialization+0x54c>)
 80120d2:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80120d6:	4b28      	ldr	r3, [pc, #160]	@ (8012178 <LoRaMacInitialization+0x524>)
 80120d8:	4a32      	ldr	r2, [pc, #200]	@ (80121a4 <LoRaMacInitialization+0x550>)
 80120da:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80120de:	4b26      	ldr	r3, [pc, #152]	@ (8012178 <LoRaMacInitialization+0x524>)
 80120e0:	4a31      	ldr	r2, [pc, #196]	@ (80121a8 <LoRaMacInitialization+0x554>)
 80120e2:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80120e6:	4b24      	ldr	r3, [pc, #144]	@ (8012178 <LoRaMacInitialization+0x524>)
 80120e8:	4a30      	ldr	r2, [pc, #192]	@ (80121ac <LoRaMacInitialization+0x558>)
 80120ea:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80120ee:	4b22      	ldr	r3, [pc, #136]	@ (8012178 <LoRaMacInitialization+0x524>)
 80120f0:	4a2f      	ldr	r2, [pc, #188]	@ (80121b0 <LoRaMacInitialization+0x55c>)
 80120f2:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80120f6:	4b2f      	ldr	r3, [pc, #188]	@ (80121b4 <LoRaMacInitialization+0x560>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	482f      	ldr	r0, [pc, #188]	@ (80121b8 <LoRaMacInitialization+0x564>)
 80120fc:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	689b      	ldr	r3, [r3, #8]
 8012102:	4619      	mov	r1, r3
 8012104:	482d      	ldr	r0, [pc, #180]	@ (80121bc <LoRaMacInitialization+0x568>)
 8012106:	f7fa fb85 	bl	800c814 <SecureElementInit>
 801210a:	4603      	mov	r3, r0
 801210c:	2b00      	cmp	r3, #0
 801210e:	d001      	beq.n	8012114 <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012110:	2311      	movs	r3, #17
 8012112:	e02b      	b.n	801216c <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8012114:	4817      	ldr	r0, [pc, #92]	@ (8012174 <LoRaMacInitialization+0x520>)
 8012116:	f002 fafd 	bl	8014714 <LoRaMacCryptoInit>
 801211a:	4603      	mov	r3, r0
 801211c:	2b00      	cmp	r3, #0
 801211e:	d001      	beq.n	8012124 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012120:	2311      	movs	r3, #17
 8012122:	e023      	b.n	801216c <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8012124:	f001 fc1c 	bl	8013960 <LoRaMacCommandsInit>
 8012128:	4603      	mov	r3, r0
 801212a:	2b00      	cmp	r3, #0
 801212c:	d001      	beq.n	8012132 <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801212e:	2313      	movs	r3, #19
 8012130:	e01c      	b.n	801216c <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8012132:	4823      	ldr	r0, [pc, #140]	@ (80121c0 <LoRaMacInitialization+0x56c>)
 8012134:	f002 fb8e 	bl	8014854 <LoRaMacCryptoSetMulticastReference>
 8012138:	4603      	mov	r3, r0
 801213a:	2b00      	cmp	r3, #0
 801213c:	d001      	beq.n	8012142 <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801213e:	2311      	movs	r3, #17
 8012140:	e014      	b.n	801216c <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8012142:	4b1c      	ldr	r3, [pc, #112]	@ (80121b4 <LoRaMacInitialization+0x560>)
 8012144:	695b      	ldr	r3, [r3, #20]
 8012146:	4798      	blx	r3
 8012148:	4603      	mov	r3, r0
 801214a:	4618      	mov	r0, r3
 801214c:	f005 fc0a 	bl	8017964 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012150:	4b18      	ldr	r3, [pc, #96]	@ (80121b4 <LoRaMacInitialization+0x560>)
 8012152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012154:	4a07      	ldr	r2, [pc, #28]	@ (8012174 <LoRaMacInitialization+0x520>)
 8012156:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 801215a:	4610      	mov	r0, r2
 801215c:	4798      	blx	r3
    Radio.Sleep( );
 801215e:	4b15      	ldr	r3, [pc, #84]	@ (80121b4 <LoRaMacInitialization+0x560>)
 8012160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012162:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012164:	2001      	movs	r0, #1
 8012166:	f7fd fac7 	bl	800f6f8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801216a:	2300      	movs	r3, #0
}
 801216c:	4618      	mov	r0, r3
 801216e:	373c      	adds	r7, #60	@ 0x3c
 8012170:	46bd      	mov	sp, r7
 8012172:	bd90      	pop	{r4, r7, pc}
 8012174:	20000e5c 	.word	0x20000e5c
 8012178:	2000093c 	.word	0x2000093c
 801217c:	0800fcad 	.word	0x0800fcad
 8012180:	20000ca4 	.word	0x20000ca4
 8012184:	0800fd3d 	.word	0x0800fd3d
 8012188:	20000cbc 	.word	0x20000cbc
 801218c:	0800fdb5 	.word	0x0800fdb5
 8012190:	20000cd4 	.word	0x20000cd4
 8012194:	0800fe35 	.word	0x0800fe35
 8012198:	20000d40 	.word	0x20000d40
 801219c:	200019e4 	.word	0x200019e4
 80121a0:	0800e7ad 	.word	0x0800e7ad
 80121a4:	0800e825 	.word	0x0800e825
 80121a8:	0800e905 	.word	0x0800e905
 80121ac:	0800e8b9 	.word	0x0800e8b9
 80121b0:	0800e941 	.word	0x0800e941
 80121b4:	0801fedc 	.word	0x0801fedc
 80121b8:	20000c88 	.word	0x20000c88
 80121bc:	20000f80 	.word	0x20000f80
 80121c0:	20000f34 	.word	0x20000f34

080121c4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80121c4:	b480      	push	{r7}
 80121c6:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80121c8:	4b04      	ldr	r3, [pc, #16]	@ (80121dc <LoRaMacStart+0x18>)
 80121ca:	2200      	movs	r2, #0
 80121cc:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    return LORAMAC_STATUS_OK;
 80121d0:	2300      	movs	r3, #0
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bc80      	pop	{r7}
 80121d8:	4770      	bx	lr
 80121da:	bf00      	nop
 80121dc:	2000093c 	.word	0x2000093c

080121e0 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80121e4:	f7fd fa68 	bl	800f6b8 <LoRaMacIsBusy>
 80121e8:	4603      	mov	r3, r0
 80121ea:	f083 0301 	eor.w	r3, r3, #1
 80121ee:	b2db      	uxtb	r3, r3
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d005      	beq.n	8012200 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 80121f4:	4b07      	ldr	r3, [pc, #28]	@ (8012214 <LoRaMacStop+0x34>)
 80121f6:	2201      	movs	r2, #1
 80121f8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 80121fc:	2300      	movs	r3, #0
 80121fe:	e007      	b.n	8012210 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8012200:	4b04      	ldr	r3, [pc, #16]	@ (8012214 <LoRaMacStop+0x34>)
 8012202:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012206:	2b01      	cmp	r3, #1
 8012208:	d101      	bne.n	801220e <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 801220a:	2300      	movs	r3, #0
 801220c:	e000      	b.n	8012210 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 801220e:	2301      	movs	r3, #1
}
 8012210:	4618      	mov	r0, r3
 8012212:	bd80      	pop	{r7, pc}
 8012214:	2000093c 	.word	0x2000093c

08012218 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8012218:	b580      	push	{r7, lr}
 801221a:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 801221c:	4812      	ldr	r0, [pc, #72]	@ (8012268 <LoRaMacHalt+0x50>)
 801221e:	f009 fd0b 	bl	801bc38 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8012222:	4812      	ldr	r0, [pc, #72]	@ (801226c <LoRaMacHalt+0x54>)
 8012224:	f009 fd08 	bl	801bc38 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8012228:	4811      	ldr	r0, [pc, #68]	@ (8012270 <LoRaMacHalt+0x58>)
 801222a:	f009 fd05 	bl	801bc38 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 801222e:	4811      	ldr	r0, [pc, #68]	@ (8012274 <LoRaMacHalt+0x5c>)
 8012230:	f009 fd02 	bl	801bc38 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8012234:	f001 fa04 	bl	8013640 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8012238:	4b0f      	ldr	r3, [pc, #60]	@ (8012278 <LoRaMacHalt+0x60>)
 801223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801223c:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801223e:	4b0f      	ldr	r3, [pc, #60]	@ (801227c <LoRaMacHalt+0x64>)
 8012240:	2200      	movs	r2, #0
 8012242:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    LoRaMacHandleNvm( &Nvm );
 8012246:	480e      	ldr	r0, [pc, #56]	@ (8012280 <LoRaMacHalt+0x68>)
 8012248:	f7fd fc0c 	bl	800fa64 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 801224c:	f240 527c 	movw	r2, #1404	@ 0x57c
 8012250:	490b      	ldr	r1, [pc, #44]	@ (8012280 <LoRaMacHalt+0x68>)
 8012252:	480c      	ldr	r0, [pc, #48]	@ (8012284 <LoRaMacHalt+0x6c>)
 8012254:	f005 fbab 	bl	80179ae <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8012258:	4b08      	ldr	r3, [pc, #32]	@ (801227c <LoRaMacHalt+0x64>)
 801225a:	2201      	movs	r2, #1
 801225c:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8012260:	2300      	movs	r3, #0
}
 8012262:	4618      	mov	r0, r3
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	20000ca4 	.word	0x20000ca4
 801226c:	20000cbc 	.word	0x20000cbc
 8012270:	20000cd4 	.word	0x20000cd4
 8012274:	20000d40 	.word	0x20000d40
 8012278:	0801fedc 	.word	0x0801fedc
 801227c:	2000093c 	.word	0x2000093c
 8012280:	20000e5c 	.word	0x20000e5c
 8012284:	200013d8 	.word	0x200013d8

08012288 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012288:	b590      	push	{r4, r7, lr}
 801228a:	b08d      	sub	sp, #52	@ 0x34
 801228c:	af02      	add	r7, sp, #8
 801228e:	4603      	mov	r3, r0
 8012290:	6039      	str	r1, [r7, #0]
 8012292:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012294:	4b42      	ldr	r3, [pc, #264]	@ (80123a0 <LoRaMacQueryTxPossible+0x118>)
 8012296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012298:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801229a:	4b41      	ldr	r3, [pc, #260]	@ (80123a0 <LoRaMacQueryTxPossible+0x118>)
 801229c:	f993 30cd 	ldrsb.w	r3, [r3, #205]	@ 0xcd
 80122a0:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80122a2:	4b3f      	ldr	r3, [pc, #252]	@ (80123a0 <LoRaMacQueryTxPossible+0x118>)
 80122a4:	f993 30cc 	ldrsb.w	r3, [r3, #204]	@ 0xcc
 80122a8:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 80122aa:	4b3e      	ldr	r3, [pc, #248]	@ (80123a4 <LoRaMacQueryTxPossible+0x11c>)
 80122ac:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80122b0:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80122b2:	2300      	movs	r3, #0
 80122b4:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d101      	bne.n	80122c0 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80122bc:	2303      	movs	r3, #3
 80122be:	e06b      	b.n	8012398 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80122c0:	2300      	movs	r3, #0
 80122c2:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80122c4:	4b36      	ldr	r3, [pc, #216]	@ (80123a0 <LoRaMacQueryTxPossible+0x118>)
 80122c6:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80122ca:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80122cc:	4b34      	ldr	r3, [pc, #208]	@ (80123a0 <LoRaMacQueryTxPossible+0x118>)
 80122ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122d0:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80122d2:	4b34      	ldr	r3, [pc, #208]	@ (80123a4 <LoRaMacQueryTxPossible+0x11c>)
 80122d4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80122d8:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80122da:	4b32      	ldr	r3, [pc, #200]	@ (80123a4 <LoRaMacQueryTxPossible+0x11c>)
 80122dc:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 80122e0:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80122e2:	4b2f      	ldr	r3, [pc, #188]	@ (80123a0 <LoRaMacQueryTxPossible+0x118>)
 80122e4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80122e8:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80122ec:	4b2c      	ldr	r3, [pc, #176]	@ (80123a0 <LoRaMacQueryTxPossible+0x118>)
 80122ee:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80122f2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80122f6:	4b2b      	ldr	r3, [pc, #172]	@ (80123a4 <LoRaMacQueryTxPossible+0x11c>)
 80122f8:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80122fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012300:	4b27      	ldr	r3, [pc, #156]	@ (80123a0 <LoRaMacQueryTxPossible+0x118>)
 8012302:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 801230a:	4b25      	ldr	r3, [pc, #148]	@ (80123a0 <LoRaMacQueryTxPossible+0x118>)
 801230c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012310:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8012314:	f107 040d 	add.w	r4, r7, #13
 8012318:	f107 020e 	add.w	r2, r7, #14
 801231c:	f107 010f 	add.w	r1, r7, #15
 8012320:	f107 0014 	add.w	r0, r7, #20
 8012324:	f107 0310 	add.w	r3, r7, #16
 8012328:	9300      	str	r3, [sp, #0]
 801232a:	4623      	mov	r3, r4
 801232c:	f001 f852 	bl	80133d4 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012334:	4618      	mov	r0, r3
 8012336:	f7fd feb9 	bl	80100ac <GetMaxAppPayloadWithoutFOptsLength>
 801233a:	4603      	mov	r3, r0
 801233c:	461a      	mov	r2, r3
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012342:	f107 0308 	add.w	r3, r7, #8
 8012346:	4618      	mov	r0, r3
 8012348:	f001 fbd8 	bl	8013afc <LoRaMacCommandsGetSizeSerializedCmds>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	d001      	beq.n	8012356 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012352:	2313      	movs	r3, #19
 8012354:	e020      	b.n	8012398 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	2b0f      	cmp	r3, #15
 801235a:	d819      	bhi.n	8012390 <LoRaMacQueryTxPossible+0x108>
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	785b      	ldrb	r3, [r3, #1]
 8012360:	461a      	mov	r2, r3
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	429a      	cmp	r2, r3
 8012366:	d313      	bcc.n	8012390 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	785a      	ldrb	r2, [r3, #1]
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	b2db      	uxtb	r3, r3
 8012370:	1ad3      	subs	r3, r2, r3
 8012372:	b2da      	uxtb	r2, r3
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012378:	683b      	ldr	r3, [r7, #0]
 801237a:	785b      	ldrb	r3, [r3, #1]
 801237c:	4619      	mov	r1, r3
 801237e:	79fa      	ldrb	r2, [r7, #7]
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	4413      	add	r3, r2
 8012384:	4299      	cmp	r1, r3
 8012386:	d301      	bcc.n	801238c <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8012388:	2300      	movs	r3, #0
 801238a:	e005      	b.n	8012398 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801238c:	2308      	movs	r3, #8
 801238e:	e003      	b.n	8012398 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	2200      	movs	r2, #0
 8012394:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012396:	2308      	movs	r3, #8
    }
}
 8012398:	4618      	mov	r0, r3
 801239a:	372c      	adds	r7, #44	@ 0x2c
 801239c:	46bd      	mov	sp, r7
 801239e:	bd90      	pop	{r4, r7, pc}
 80123a0:	20000e5c 	.word	0x20000e5c
 80123a4:	2000093c 	.word	0x2000093c

080123a8 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80123a8:	b590      	push	{r4, r7, lr}
 80123aa:	b087      	sub	sp, #28
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80123b0:	2300      	movs	r3, #0
 80123b2:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d101      	bne.n	80123be <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80123ba:	2303      	movs	r3, #3
 80123bc:	e191      	b.n	80126e2 <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	781b      	ldrb	r3, [r3, #0]
 80123c2:	2b39      	cmp	r3, #57	@ 0x39
 80123c4:	f200 8186 	bhi.w	80126d4 <LoRaMacMibGetRequestConfirm+0x32c>
 80123c8:	a201      	add	r2, pc, #4	@ (adr r2, 80123d0 <LoRaMacMibGetRequestConfirm+0x28>)
 80123ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123ce:	bf00      	nop
 80123d0:	080124b9 	.word	0x080124b9
 80123d4:	080124c5 	.word	0x080124c5
 80123d8:	080124d1 	.word	0x080124d1
 80123dc:	080124dd 	.word	0x080124dd
 80123e0:	080124e9 	.word	0x080124e9
 80123e4:	080124f5 	.word	0x080124f5
 80123e8:	08012501 	.word	0x08012501
 80123ec:	080126d5 	.word	0x080126d5
 80123f0:	080126d5 	.word	0x080126d5
 80123f4:	080126d5 	.word	0x080126d5
 80123f8:	080126d5 	.word	0x080126d5
 80123fc:	080126d5 	.word	0x080126d5
 8012400:	080126d5 	.word	0x080126d5
 8012404:	080126d5 	.word	0x080126d5
 8012408:	080126d5 	.word	0x080126d5
 801240c:	0801250d 	.word	0x0801250d
 8012410:	08012519 	.word	0x08012519
 8012414:	08012525 	.word	0x08012525
 8012418:	08012547 	.word	0x08012547
 801241c:	08012559 	.word	0x08012559
 8012420:	0801256b 	.word	0x0801256b
 8012424:	0801257d 	.word	0x0801257d
 8012428:	080125b1 	.word	0x080125b1
 801242c:	0801258f 	.word	0x0801258f
 8012430:	080125d3 	.word	0x080125d3
 8012434:	080125df 	.word	0x080125df
 8012438:	080125e9 	.word	0x080125e9
 801243c:	080125f3 	.word	0x080125f3
 8012440:	080125fd 	.word	0x080125fd
 8012444:	08012607 	.word	0x08012607
 8012448:	08012611 	.word	0x08012611
 801244c:	0801263d 	.word	0x0801263d
 8012450:	08012649 	.word	0x08012649
 8012454:	08012661 	.word	0x08012661
 8012458:	08012655 	.word	0x08012655
 801245c:	0801266d 	.word	0x0801266d
 8012460:	08012677 	.word	0x08012677
 8012464:	08012683 	.word	0x08012683
 8012468:	0801269d 	.word	0x0801269d
 801246c:	0801268d 	.word	0x0801268d
 8012470:	08012695 	.word	0x08012695
 8012474:	080126d5 	.word	0x080126d5
 8012478:	080126a9 	.word	0x080126a9
 801247c:	080126d5 	.word	0x080126d5
 8012480:	080126d5 	.word	0x080126d5
 8012484:	080126d5 	.word	0x080126d5
 8012488:	080126d5 	.word	0x080126d5
 801248c:	080126d5 	.word	0x080126d5
 8012490:	080126d5 	.word	0x080126d5
 8012494:	080126d5 	.word	0x080126d5
 8012498:	080126d5 	.word	0x080126d5
 801249c:	080126d5 	.word	0x080126d5
 80124a0:	080126d5 	.word	0x080126d5
 80124a4:	080126d5 	.word	0x080126d5
 80124a8:	080126d5 	.word	0x080126d5
 80124ac:	080126d5 	.word	0x080126d5
 80124b0:	080126bd 	.word	0x080126bd
 80124b4:	080126c9 	.word	0x080126c9
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80124b8:	4b8c      	ldr	r3, [pc, #560]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 80124ba:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	711a      	strb	r2, [r3, #4]
            break;
 80124c2:	e10d      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80124c4:	4b89      	ldr	r3, [pc, #548]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 80124c6:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	711a      	strb	r2, [r3, #4]
            break;
 80124ce:	e107      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80124d0:	f7fa fc76 	bl	800cdc0 <SecureElementGetDevEui>
 80124d4:	4602      	mov	r2, r0
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	605a      	str	r2, [r3, #4]
            break;
 80124da:	e101      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80124dc:	f7fa fc92 	bl	800ce04 <SecureElementGetJoinEui>
 80124e0:	4602      	mov	r2, r0
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	605a      	str	r2, [r3, #4]
            break;
 80124e6:	e0fb      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80124e8:	4b80      	ldr	r3, [pc, #512]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 80124ea:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	711a      	strb	r2, [r3, #4]
            break;
 80124f2:	e0f5      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80124f4:	4b7d      	ldr	r3, [pc, #500]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 80124f6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	605a      	str	r2, [r3, #4]
            break;
 80124fe:	e0ef      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8012500:	4b7a      	ldr	r3, [pc, #488]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 8012502:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	605a      	str	r2, [r3, #4]
            break;
 801250a:	e0e9      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801250c:	4b77      	ldr	r3, [pc, #476]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 801250e:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	711a      	strb	r2, [r3, #4]
            break;
 8012516:	e0e3      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012518:	4b74      	ldr	r3, [pc, #464]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 801251a:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	711a      	strb	r2, [r3, #4]
            break;
 8012522:	e0dd      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012524:	231c      	movs	r3, #28
 8012526:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012528:	4b70      	ldr	r3, [pc, #448]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 801252a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801252e:	f107 0210 	add.w	r2, r7, #16
 8012532:	4611      	mov	r1, r2
 8012534:	4618      	mov	r0, r3
 8012536:	f002 ff99 	bl	801546c <RegionGetPhyParam>
 801253a:	4603      	mov	r3, r0
 801253c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801253e:	68fa      	ldr	r2, [r7, #12]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	605a      	str	r2, [r3, #4]
            break;
 8012544:	e0cc      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	4a68      	ldr	r2, [pc, #416]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 801254a:	3304      	adds	r3, #4
 801254c:	3264      	adds	r2, #100	@ 0x64
 801254e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012552:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012556:	e0c3      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	4a64      	ldr	r2, [pc, #400]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 801255c:	3304      	adds	r3, #4
 801255e:	32a8      	adds	r2, #168	@ 0xa8
 8012560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012564:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012568:	e0ba      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	4a5f      	ldr	r2, [pc, #380]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 801256e:	3304      	adds	r3, #4
 8012570:	326c      	adds	r2, #108	@ 0x6c
 8012572:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012576:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801257a:	e0b1      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	4a5b      	ldr	r2, [pc, #364]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 8012580:	3304      	adds	r3, #4
 8012582:	32b0      	adds	r2, #176	@ 0xb0
 8012584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012588:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801258c:	e0a8      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801258e:	231a      	movs	r3, #26
 8012590:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012592:	4b56      	ldr	r3, [pc, #344]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 8012594:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012598:	f107 0210 	add.w	r2, r7, #16
 801259c:	4611      	mov	r1, r2
 801259e:	4618      	mov	r0, r3
 80125a0:	f002 ff64 	bl	801546c <RegionGetPhyParam>
 80125a4:	4603      	mov	r3, r0
 80125a6:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80125a8:	68fa      	ldr	r2, [r7, #12]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	605a      	str	r2, [r3, #4]
            break;
 80125ae:	e097      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80125b0:	2319      	movs	r3, #25
 80125b2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125b4:	4b4d      	ldr	r3, [pc, #308]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 80125b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80125ba:	f107 0210 	add.w	r2, r7, #16
 80125be:	4611      	mov	r1, r2
 80125c0:	4618      	mov	r0, r3
 80125c2:	f002 ff53 	bl	801546c <RegionGetPhyParam>
 80125c6:	4603      	mov	r3, r0
 80125c8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80125ca:	68fa      	ldr	r2, [r7, #12]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	605a      	str	r2, [r3, #4]
            break;
 80125d0:	e086      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80125d2:	4b46      	ldr	r3, [pc, #280]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 80125d4:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	711a      	strb	r2, [r3, #4]
            break;
 80125dc:	e080      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80125de:	4b43      	ldr	r3, [pc, #268]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 80125e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	605a      	str	r2, [r3, #4]
            break;
 80125e6:	e07b      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80125e8:	4b40      	ldr	r3, [pc, #256]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 80125ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	605a      	str	r2, [r3, #4]
            break;
 80125f0:	e076      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80125f2:	4b3e      	ldr	r3, [pc, #248]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 80125f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	605a      	str	r2, [r3, #4]
            break;
 80125fa:	e071      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80125fc:	4b3b      	ldr	r3, [pc, #236]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 80125fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	605a      	str	r2, [r3, #4]
            break;
 8012604:	e06c      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8012606:	4b39      	ldr	r3, [pc, #228]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 8012608:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	605a      	str	r2, [r3, #4]
            break;
 801260e:	e067      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8012610:	2302      	movs	r3, #2
 8012612:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012614:	4b35      	ldr	r3, [pc, #212]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 8012616:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 801261a:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801261c:	4b33      	ldr	r3, [pc, #204]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 801261e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012622:	f107 0210 	add.w	r2, r7, #16
 8012626:	4611      	mov	r1, r2
 8012628:	4618      	mov	r0, r3
 801262a:	f002 ff1f 	bl	801546c <RegionGetPhyParam>
 801262e:	4603      	mov	r3, r0
 8012630:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	b25a      	sxtb	r2, r3
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	711a      	strb	r2, [r3, #4]
            break;
 801263a:	e051      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801263c:	4b2b      	ldr	r3, [pc, #172]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 801263e:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	711a      	strb	r2, [r3, #4]
            break;
 8012646:	e04b      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012648:	4b28      	ldr	r3, [pc, #160]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 801264a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	711a      	strb	r2, [r3, #4]
            break;
 8012652:	e045      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012654:	4b25      	ldr	r3, [pc, #148]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 8012656:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	711a      	strb	r2, [r3, #4]
            break;
 801265e:	e03f      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012660:	4b22      	ldr	r3, [pc, #136]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 8012662:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	711a      	strb	r2, [r3, #4]
            break;
 801266a:	e039      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 801266c:	4b1f      	ldr	r3, [pc, #124]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 801266e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	605a      	str	r2, [r3, #4]
            break;
 8012674:	e034      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8012676:	4b1d      	ldr	r3, [pc, #116]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 8012678:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	711a      	strb	r2, [r3, #4]
            break;
 8012680:	e02e      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012682:	4b1a      	ldr	r3, [pc, #104]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 8012684:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	605a      	str	r2, [r3, #4]
            break;
 801268a:	e029      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	4a17      	ldr	r2, [pc, #92]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 8012690:	605a      	str	r2, [r3, #4]
            break;
 8012692:	e025      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	4a16      	ldr	r2, [pc, #88]	@ (80126f0 <LoRaMacMibGetRequestConfirm+0x348>)
 8012698:	605a      	str	r2, [r3, #4]
            break;
 801269a:	e021      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801269c:	4b13      	ldr	r3, [pc, #76]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 801269e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	605a      	str	r2, [r3, #4]
            break;
 80126a6:	e01b      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	4a10      	ldr	r2, [pc, #64]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 80126ac:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 80126b0:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80126b2:	687c      	ldr	r4, [r7, #4]
 80126b4:	f003 f850 	bl	8015758 <RegionGetVersion>
 80126b8:	60a0      	str	r0, [r4, #8]
            break;
 80126ba:	e011      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80126bc:	4b0b      	ldr	r3, [pc, #44]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 80126be:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	605a      	str	r2, [r3, #4]
            break;
 80126c6:	e00b      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80126c8:	4b08      	ldr	r3, [pc, #32]	@ (80126ec <LoRaMacMibGetRequestConfirm+0x344>)
 80126ca:	f893 210b 	ldrb.w	r2, [r3, #267]	@ 0x10b
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	711a      	strb	r2, [r3, #4]
            break;
 80126d2:	e005      	b.n	80126e0 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f000 ffca 	bl	801366e <LoRaMacClassBMibGetRequestConfirm>
 80126da:	4603      	mov	r3, r0
 80126dc:	75fb      	strb	r3, [r7, #23]
            break;
 80126de:	bf00      	nop
        }
    }
    return status;
 80126e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	371c      	adds	r7, #28
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd90      	pop	{r4, r7, pc}
 80126ea:	bf00      	nop
 80126ec:	20000e5c 	.word	0x20000e5c
 80126f0:	200013d8 	.word	0x200013d8

080126f4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b086      	sub	sp, #24
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80126fc:	2300      	movs	r3, #0
 80126fe:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d101      	bne.n	801270a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012706:	2303      	movs	r3, #3
 8012708:	e35c      	b.n	8012dc4 <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801270a:	4bb9      	ldr	r3, [pc, #740]	@ (80129f0 <LoRaMacMibSetRequestConfirm+0x2fc>)
 801270c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012710:	f003 0302 	and.w	r3, r3, #2
 8012714:	2b00      	cmp	r3, #0
 8012716:	d001      	beq.n	801271c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012718:	2301      	movs	r3, #1
 801271a:	e353      	b.n	8012dc4 <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	781b      	ldrb	r3, [r3, #0]
 8012720:	2b39      	cmp	r3, #57	@ 0x39
 8012722:	f200 8323 	bhi.w	8012d6c <LoRaMacMibSetRequestConfirm+0x678>
 8012726:	a201      	add	r2, pc, #4	@ (adr r2, 801272c <LoRaMacMibSetRequestConfirm+0x38>)
 8012728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801272c:	08012815 	.word	0x08012815
 8012730:	08012825 	.word	0x08012825
 8012734:	0801283f 	.word	0x0801283f
 8012738:	08012857 	.word	0x08012857
 801273c:	0801286f 	.word	0x0801286f
 8012740:	0801287b 	.word	0x0801287b
 8012744:	08012887 	.word	0x08012887
 8012748:	08012893 	.word	0x08012893
 801274c:	080128b9 	.word	0x080128b9
 8012750:	080128df 	.word	0x080128df
 8012754:	08012905 	.word	0x08012905
 8012758:	0801292b 	.word	0x0801292b
 801275c:	08012951 	.word	0x08012951
 8012760:	08012977 	.word	0x08012977
 8012764:	0801299d 	.word	0x0801299d
 8012768:	080129c3 	.word	0x080129c3
 801276c:	080129e3 	.word	0x080129e3
 8012770:	08012d6d 	.word	0x08012d6d
 8012774:	080129fd 	.word	0x080129fd
 8012778:	08012a6d 	.word	0x08012a6d
 801277c:	08012aad 	.word	0x08012aad
 8012780:	08012b0f 	.word	0x08012b0f
 8012784:	08012b7f 	.word	0x08012b7f
 8012788:	08012b4f 	.word	0x08012b4f
 801278c:	08012baf 	.word	0x08012baf
 8012790:	08012bd1 	.word	0x08012bd1
 8012794:	08012bdb 	.word	0x08012bdb
 8012798:	08012be5 	.word	0x08012be5
 801279c:	08012bef 	.word	0x08012bef
 80127a0:	08012bf9 	.word	0x08012bf9
 80127a4:	08012d6d 	.word	0x08012d6d
 80127a8:	08012c03 	.word	0x08012c03
 80127ac:	08012c35 	.word	0x08012c35
 80127b0:	08012ca1 	.word	0x08012ca1
 80127b4:	08012c6f 	.word	0x08012c6f
 80127b8:	08012cdd 	.word	0x08012cdd
 80127bc:	08012cf3 	.word	0x08012cf3
 80127c0:	08012d0b 	.word	0x08012d0b
 80127c4:	08012d15 	.word	0x08012d15
 80127c8:	08012d21 	.word	0x08012d21
 80127cc:	08012d6d 	.word	0x08012d6d
 80127d0:	08012d2b 	.word	0x08012d2b
 80127d4:	08012d6d 	.word	0x08012d6d
 80127d8:	08012d6d 	.word	0x08012d6d
 80127dc:	08012d6d 	.word	0x08012d6d
 80127e0:	08012d6d 	.word	0x08012d6d
 80127e4:	08012d6d 	.word	0x08012d6d
 80127e8:	08012d6d 	.word	0x08012d6d
 80127ec:	08012d6d 	.word	0x08012d6d
 80127f0:	08012d6d 	.word	0x08012d6d
 80127f4:	08012d6d 	.word	0x08012d6d
 80127f8:	08012d6d 	.word	0x08012d6d
 80127fc:	08012d6d 	.word	0x08012d6d
 8012800:	08012d6d 	.word	0x08012d6d
 8012804:	08012d6d 	.word	0x08012d6d
 8012808:	08012d6d 	.word	0x08012d6d
 801280c:	08012d55 	.word	0x08012d55
 8012810:	08012d61 	.word	0x08012d61
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	791b      	ldrb	r3, [r3, #4]
 8012818:	4618      	mov	r0, r3
 801281a:	f7fd fb75 	bl	800ff08 <SwitchClass>
 801281e:	4603      	mov	r3, r0
 8012820:	75fb      	strb	r3, [r7, #23]
            break;
 8012822:	e2c4      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	791b      	ldrb	r3, [r3, #4]
 8012828:	2b02      	cmp	r3, #2
 801282a:	d005      	beq.n	8012838 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	791a      	ldrb	r2, [r3, #4]
 8012830:	4b70      	ldr	r3, [pc, #448]	@ (80129f4 <LoRaMacMibSetRequestConfirm+0x300>)
 8012832:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012836:	e2ba      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012838:	2303      	movs	r3, #3
 801283a:	75fb      	strb	r3, [r7, #23]
            break;
 801283c:	e2b7      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	4618      	mov	r0, r3
 8012844:	f7fa faa4 	bl	800cd90 <SecureElementSetDevEui>
 8012848:	4603      	mov	r3, r0
 801284a:	2b00      	cmp	r3, #0
 801284c:	f000 8294 	beq.w	8012d78 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012850:	2303      	movs	r3, #3
 8012852:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012854:	e290      	b.n	8012d78 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	4618      	mov	r0, r3
 801285c:	f7fa faba 	bl	800cdd4 <SecureElementSetJoinEui>
 8012860:	4603      	mov	r3, r0
 8012862:	2b00      	cmp	r3, #0
 8012864:	f000 828a 	beq.w	8012d7c <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012868:	2303      	movs	r3, #3
 801286a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801286c:	e286      	b.n	8012d7c <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	791a      	ldrb	r2, [r3, #4]
 8012872:	4b60      	ldr	r3, [pc, #384]	@ (80129f4 <LoRaMacMibSetRequestConfirm+0x300>)
 8012874:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            break;
 8012878:	e299      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	4a5d      	ldr	r2, [pc, #372]	@ (80129f4 <LoRaMacMibSetRequestConfirm+0x300>)
 8012880:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
            break;
 8012884:	e293      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	685b      	ldr	r3, [r3, #4]
 801288a:	4a5a      	ldr	r2, [pc, #360]	@ (80129f4 <LoRaMacMibSetRequestConfirm+0x300>)
 801288c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
            break;
 8012890:	e28d      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d00b      	beq.n	80128b2 <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	685b      	ldr	r3, [r3, #4]
 801289e:	4619      	mov	r1, r3
 80128a0:	2000      	movs	r0, #0
 80128a2:	f001 ffff 	bl	80148a4 <LoRaMacCryptoSetKey>
 80128a6:	4603      	mov	r3, r0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	f000 8269 	beq.w	8012d80 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80128ae:	2311      	movs	r3, #17
 80128b0:	e288      	b.n	8012dc4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128b2:	2303      	movs	r3, #3
 80128b4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80128b6:	e263      	b.n	8012d80 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	685b      	ldr	r3, [r3, #4]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d00b      	beq.n	80128d8 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	685b      	ldr	r3, [r3, #4]
 80128c4:	4619      	mov	r1, r3
 80128c6:	2001      	movs	r0, #1
 80128c8:	f001 ffec 	bl	80148a4 <LoRaMacCryptoSetKey>
 80128cc:	4603      	mov	r3, r0
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	f000 8258 	beq.w	8012d84 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80128d4:	2311      	movs	r3, #17
 80128d6:	e275      	b.n	8012dc4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128d8:	2303      	movs	r3, #3
 80128da:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80128dc:	e252      	b.n	8012d84 <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	685b      	ldr	r3, [r3, #4]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d00b      	beq.n	80128fe <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	4619      	mov	r1, r3
 80128ec:	2002      	movs	r0, #2
 80128ee:	f001 ffd9 	bl	80148a4 <LoRaMacCryptoSetKey>
 80128f2:	4603      	mov	r3, r0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	f000 8247 	beq.w	8012d88 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80128fa:	2311      	movs	r3, #17
 80128fc:	e262      	b.n	8012dc4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128fe:	2303      	movs	r3, #3
 8012900:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012902:	e241      	b.n	8012d88 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	685b      	ldr	r3, [r3, #4]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d00b      	beq.n	8012924 <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	685b      	ldr	r3, [r3, #4]
 8012910:	4619      	mov	r1, r3
 8012912:	2003      	movs	r0, #3
 8012914:	f001 ffc6 	bl	80148a4 <LoRaMacCryptoSetKey>
 8012918:	4603      	mov	r3, r0
 801291a:	2b00      	cmp	r3, #0
 801291c:	f000 8236 	beq.w	8012d8c <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012920:	2311      	movs	r3, #17
 8012922:	e24f      	b.n	8012dc4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012924:	2303      	movs	r3, #3
 8012926:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012928:	e230      	b.n	8012d8c <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	685b      	ldr	r3, [r3, #4]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d00b      	beq.n	801294a <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	685b      	ldr	r3, [r3, #4]
 8012936:	4619      	mov	r1, r3
 8012938:	207f      	movs	r0, #127	@ 0x7f
 801293a:	f001 ffb3 	bl	80148a4 <LoRaMacCryptoSetKey>
 801293e:	4603      	mov	r3, r0
 8012940:	2b00      	cmp	r3, #0
 8012942:	f000 8225 	beq.w	8012d90 <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012946:	2311      	movs	r3, #17
 8012948:	e23c      	b.n	8012dc4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801294a:	2303      	movs	r3, #3
 801294c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801294e:	e21f      	b.n	8012d90 <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	685b      	ldr	r3, [r3, #4]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d00b      	beq.n	8012970 <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	685b      	ldr	r3, [r3, #4]
 801295c:	4619      	mov	r1, r3
 801295e:	2080      	movs	r0, #128	@ 0x80
 8012960:	f001 ffa0 	bl	80148a4 <LoRaMacCryptoSetKey>
 8012964:	4603      	mov	r3, r0
 8012966:	2b00      	cmp	r3, #0
 8012968:	f000 8214 	beq.w	8012d94 <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801296c:	2311      	movs	r3, #17
 801296e:	e229      	b.n	8012dc4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012970:	2303      	movs	r3, #3
 8012972:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012974:	e20e      	b.n	8012d94 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	685b      	ldr	r3, [r3, #4]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d00b      	beq.n	8012996 <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	685b      	ldr	r3, [r3, #4]
 8012982:	4619      	mov	r1, r3
 8012984:	2081      	movs	r0, #129	@ 0x81
 8012986:	f001 ff8d 	bl	80148a4 <LoRaMacCryptoSetKey>
 801298a:	4603      	mov	r3, r0
 801298c:	2b00      	cmp	r3, #0
 801298e:	f000 8203 	beq.w	8012d98 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012992:	2311      	movs	r3, #17
 8012994:	e216      	b.n	8012dc4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012996:	2303      	movs	r3, #3
 8012998:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801299a:	e1fd      	b.n	8012d98 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d00b      	beq.n	80129bc <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	685b      	ldr	r3, [r3, #4]
 80129a8:	4619      	mov	r1, r3
 80129aa:	2082      	movs	r0, #130	@ 0x82
 80129ac:	f001 ff7a 	bl	80148a4 <LoRaMacCryptoSetKey>
 80129b0:	4603      	mov	r3, r0
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	f000 81f2 	beq.w	8012d9c <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80129b8:	2311      	movs	r3, #17
 80129ba:	e203      	b.n	8012dc4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129bc:	2303      	movs	r3, #3
 80129be:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80129c0:	e1ec      	b.n	8012d9c <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	791a      	ldrb	r2, [r3, #4]
 80129c6:	4b0b      	ldr	r3, [pc, #44]	@ (80129f4 <LoRaMacMibSetRequestConfirm+0x300>)
 80129c8:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80129cc:	4b0a      	ldr	r3, [pc, #40]	@ (80129f8 <LoRaMacMibSetRequestConfirm+0x304>)
 80129ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80129d0:	4a08      	ldr	r2, [pc, #32]	@ (80129f4 <LoRaMacMibSetRequestConfirm+0x300>)
 80129d2:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 80129d6:	4610      	mov	r0, r2
 80129d8:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80129da:	4b07      	ldr	r3, [pc, #28]	@ (80129f8 <LoRaMacMibSetRequestConfirm+0x304>)
 80129dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129de:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80129e0:	e1e5      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	791a      	ldrb	r2, [r3, #4]
 80129e6:	4b03      	ldr	r3, [pc, #12]	@ (80129f4 <LoRaMacMibSetRequestConfirm+0x300>)
 80129e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            break;
 80129ec:	e1df      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
 80129ee:	bf00      	nop
 80129f0:	2000093c 	.word	0x2000093c
 80129f4:	20000e5c 	.word	0x20000e5c
 80129f8:	0801fedc 	.word	0x0801fedc
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	7a1b      	ldrb	r3, [r3, #8]
 8012a00:	b25b      	sxtb	r3, r3
 8012a02:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012a04:	4bb3      	ldr	r3, [pc, #716]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012a06:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012a0a:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8012a0c:	4bb1      	ldr	r3, [pc, #708]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012a12:	f107 0108 	add.w	r1, r7, #8
 8012a16:	2207      	movs	r2, #7
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f002 fd62 	bl	80154e2 <RegionVerify>
 8012a1e:	4603      	mov	r3, r0
 8012a20:	f083 0301 	eor.w	r3, r3, #1
 8012a24:	b2db      	uxtb	r3, r3
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d002      	beq.n	8012a30 <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a2a:	2303      	movs	r3, #3
 8012a2c:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8012a2e:	e1be      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	685b      	ldr	r3, [r3, #4]
 8012a34:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8012a36:	4ba7      	ldr	r3, [pc, #668]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012a38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012a3c:	f107 0108 	add.w	r1, r7, #8
 8012a40:	2200      	movs	r2, #0
 8012a42:	4618      	mov	r0, r3
 8012a44:	f002 fd4d 	bl	80154e2 <RegionVerify>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	f083 0301 	eor.w	r3, r3, #1
 8012a4e:	b2db      	uxtb	r3, r3
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d002      	beq.n	8012a5a <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a54:	2303      	movs	r3, #3
 8012a56:	75fb      	strb	r3, [r7, #23]
            break;
 8012a58:	e1a9      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8012a5a:	4b9e      	ldr	r3, [pc, #632]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	3364      	adds	r3, #100	@ 0x64
 8012a60:	3204      	adds	r2, #4
 8012a62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a66:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012a6a:	e1a0      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	7a1b      	ldrb	r3, [r3, #8]
 8012a70:	b25b      	sxtb	r3, r3
 8012a72:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012a74:	4b97      	ldr	r3, [pc, #604]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012a76:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012a7a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012a7c:	4b95      	ldr	r3, [pc, #596]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012a82:	f107 0108 	add.w	r1, r7, #8
 8012a86:	2207      	movs	r2, #7
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f002 fd2a 	bl	80154e2 <RegionVerify>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d008      	beq.n	8012aa6 <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8012a94:	4b8f      	ldr	r3, [pc, #572]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012a96:	687a      	ldr	r2, [r7, #4]
 8012a98:	33a8      	adds	r3, #168	@ 0xa8
 8012a9a:	3204      	adds	r2, #4
 8012a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012aa0:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012aa4:	e183      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012aa6:	2303      	movs	r3, #3
 8012aa8:	75fb      	strb	r3, [r7, #23]
            break;
 8012aaa:	e180      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	7a1b      	ldrb	r3, [r3, #8]
 8012ab0:	b25b      	sxtb	r3, r3
 8012ab2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012ab4:	4b87      	ldr	r3, [pc, #540]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012ab6:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012aba:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012abc:	4b85      	ldr	r3, [pc, #532]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012abe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012ac2:	f107 0108 	add.w	r1, r7, #8
 8012ac6:	2207      	movs	r2, #7
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f002 fd0a 	bl	80154e2 <RegionVerify>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d019      	beq.n	8012b08 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8012ad4:	4b7f      	ldr	r3, [pc, #508]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	336c      	adds	r3, #108	@ 0x6c
 8012ada:	3204      	adds	r2, #4
 8012adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012ae0:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8012ae4:	4b7b      	ldr	r3, [pc, #492]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012ae6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8012aea:	2b02      	cmp	r3, #2
 8012aec:	f040 8158 	bne.w	8012da0 <LoRaMacMibSetRequestConfirm+0x6ac>
 8012af0:	4b78      	ldr	r3, [pc, #480]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012af2:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	f000 8152 	beq.w	8012da0 <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8012afc:	4b76      	ldr	r3, [pc, #472]	@ (8012cd8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b00:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8012b02:	f7fe fca7 	bl	8011454 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012b06:	e14b      	b.n	8012da0 <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b08:	2303      	movs	r3, #3
 8012b0a:	75fb      	strb	r3, [r7, #23]
            break;
 8012b0c:	e148      	b.n	8012da0 <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	7a1b      	ldrb	r3, [r3, #8]
 8012b12:	b25b      	sxtb	r3, r3
 8012b14:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012b16:	4b6f      	ldr	r3, [pc, #444]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012b18:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8012b1c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012b20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012b24:	f107 0108 	add.w	r1, r7, #8
 8012b28:	2207      	movs	r2, #7
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f002 fcd9 	bl	80154e2 <RegionVerify>
 8012b30:	4603      	mov	r3, r0
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d008      	beq.n	8012b48 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8012b36:	4b67      	ldr	r3, [pc, #412]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012b38:	687a      	ldr	r2, [r7, #4]
 8012b3a:	33b0      	adds	r3, #176	@ 0xb0
 8012b3c:	3204      	adds	r2, #4
 8012b3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012b42:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012b46:	e132      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b48:	2303      	movs	r3, #3
 8012b4a:	75fb      	strb	r3, [r7, #23]
            break;
 8012b4c:	e12f      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8012b54:	2301      	movs	r3, #1
 8012b56:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012b58:	4b5e      	ldr	r3, [pc, #376]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012b5e:	f107 020c 	add.w	r2, r7, #12
 8012b62:	4611      	mov	r1, r2
 8012b64:	4618      	mov	r0, r3
 8012b66:	f002 fce5 	bl	8015534 <RegionChanMaskSet>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	f083 0301 	eor.w	r3, r3, #1
 8012b70:	b2db      	uxtb	r3, r3
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f000 8116 	beq.w	8012da4 <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b78:	2303      	movs	r3, #3
 8012b7a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012b7c:	e112      	b.n	8012da4 <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	685b      	ldr	r3, [r3, #4]
 8012b82:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8012b84:	2300      	movs	r3, #0
 8012b86:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012b88:	4b52      	ldr	r3, [pc, #328]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012b8e:	f107 020c 	add.w	r2, r7, #12
 8012b92:	4611      	mov	r1, r2
 8012b94:	4618      	mov	r0, r3
 8012b96:	f002 fccd 	bl	8015534 <RegionChanMaskSet>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	f083 0301 	eor.w	r3, r3, #1
 8012ba0:	b2db      	uxtb	r3, r3
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	f000 8100 	beq.w	8012da8 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ba8:	2303      	movs	r3, #3
 8012baa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012bac:	e0fc      	b.n	8012da8 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	791b      	ldrb	r3, [r3, #4]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d009      	beq.n	8012bca <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012bba:	2b0f      	cmp	r3, #15
 8012bbc:	d805      	bhi.n	8012bca <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	791a      	ldrb	r2, [r3, #4]
 8012bc2:	4b44      	ldr	r3, [pc, #272]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012bc4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012bc8:	e0f1      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012bca:	2303      	movs	r3, #3
 8012bcc:	75fb      	strb	r3, [r7, #23]
            break;
 8012bce:	e0ee      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	685b      	ldr	r3, [r3, #4]
 8012bd4:	4a3f      	ldr	r2, [pc, #252]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 8012bd8:	e0e9      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	685b      	ldr	r3, [r3, #4]
 8012bde:	4a3d      	ldr	r2, [pc, #244]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012be0:	6513      	str	r3, [r2, #80]	@ 0x50
            break;
 8012be2:	e0e4      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	685b      	ldr	r3, [r3, #4]
 8012be8:	4a3a      	ldr	r2, [pc, #232]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012bea:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8012bec:	e0df      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	685b      	ldr	r3, [r3, #4]
 8012bf2:	4a38      	ldr	r2, [pc, #224]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012bf4:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8012bf6:	e0da      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	685b      	ldr	r3, [r3, #4]
 8012bfc:	4a35      	ldr	r2, [pc, #212]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012bfe:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8012c00:	e0d5      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012c08:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8012c0a:	4b32      	ldr	r3, [pc, #200]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012c10:	f107 0108 	add.w	r1, r7, #8
 8012c14:	2206      	movs	r2, #6
 8012c16:	4618      	mov	r0, r3
 8012c18:	f002 fc63 	bl	80154e2 <RegionVerify>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d005      	beq.n	8012c2e <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8012c22:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012c26:	4b2b      	ldr	r3, [pc, #172]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012c28:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012c2c:	e0bf      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012c2e:	2303      	movs	r3, #3
 8012c30:	75fb      	strb	r3, [r7, #23]
            break;
 8012c32:	e0bc      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012c3a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012c3c:	4b25      	ldr	r3, [pc, #148]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012c3e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012c42:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012c44:	4b23      	ldr	r3, [pc, #140]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012c46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012c4a:	f107 0108 	add.w	r1, r7, #8
 8012c4e:	2205      	movs	r2, #5
 8012c50:	4618      	mov	r0, r3
 8012c52:	f002 fc46 	bl	80154e2 <RegionVerify>
 8012c56:	4603      	mov	r3, r0
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d005      	beq.n	8012c68 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012c5c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012c60:	4b1c      	ldr	r3, [pc, #112]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012c62:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012c66:	e0a2      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012c68:	2303      	movs	r3, #3
 8012c6a:	75fb      	strb	r3, [r7, #23]
            break;
 8012c6c:	e09f      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012c74:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8012c76:	4b17      	ldr	r3, [pc, #92]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012c78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012c7c:	f107 0108 	add.w	r1, r7, #8
 8012c80:	220a      	movs	r2, #10
 8012c82:	4618      	mov	r0, r3
 8012c84:	f002 fc2d 	bl	80154e2 <RegionVerify>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d005      	beq.n	8012c9a <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8012c8e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012c92:	4b10      	ldr	r3, [pc, #64]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012c94:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012c98:	e089      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012c9a:	2303      	movs	r3, #3
 8012c9c:	75fb      	strb	r3, [r7, #23]
            break;
 8012c9e:	e086      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012ca6:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8012ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012caa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012cae:	f107 0108 	add.w	r1, r7, #8
 8012cb2:	2209      	movs	r2, #9
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f002 fc14 	bl	80154e2 <RegionVerify>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d005      	beq.n	8012ccc <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8012cc0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012cc4:	4b03      	ldr	r3, [pc, #12]	@ (8012cd4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012cc6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012cca:	e070      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ccc:	2303      	movs	r3, #3
 8012cce:	75fb      	strb	r3, [r7, #23]
            break;
 8012cd0:	e06d      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
 8012cd2:	bf00      	nop
 8012cd4:	20000e5c 	.word	0x20000e5c
 8012cd8:	0801fedc 	.word	0x0801fedc
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	685b      	ldr	r3, [r3, #4]
 8012ce0:	4a3a      	ldr	r2, [pc, #232]	@ (8012dcc <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012ce2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8012ce6:	4b39      	ldr	r3, [pc, #228]	@ (8012dcc <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012cec:	4a37      	ldr	r2, [pc, #220]	@ (8012dcc <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012cee:	6453      	str	r3, [r2, #68]	@ 0x44
            break;
 8012cf0:	e05d      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	791a      	ldrb	r2, [r3, #4]
 8012cf6:	4b35      	ldr	r3, [pc, #212]	@ (8012dcc <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012cf8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8012cfc:	4b33      	ldr	r3, [pc, #204]	@ (8012dcc <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012cfe:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8012d02:	4b32      	ldr	r3, [pc, #200]	@ (8012dcc <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012d04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 8012d08:	e051      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	685b      	ldr	r3, [r3, #4]
 8012d0e:	4a2f      	ldr	r2, [pc, #188]	@ (8012dcc <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012d10:	67d3      	str	r3, [r2, #124]	@ 0x7c
            break;
 8012d12:	e04c      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	685b      	ldr	r3, [r3, #4]
 8012d18:	4a2c      	ldr	r2, [pc, #176]	@ (8012dcc <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012d1a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            break;
 8012d1e:	e046      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8012d20:	f7fe fdc8 	bl	80118b4 <RestoreNvmData>
 8012d24:	4603      	mov	r3, r0
 8012d26:	75fb      	strb	r3, [r7, #23]
            break;
 8012d28:	e041      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	799b      	ldrb	r3, [r3, #6]
 8012d2e:	2b01      	cmp	r3, #1
 8012d30:	d80d      	bhi.n	8012d4e <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8012d32:	4a26      	ldr	r2, [pc, #152]	@ (8012dcc <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	685b      	ldr	r3, [r3, #4]
 8012d38:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	6858      	ldr	r0, [r3, #4]
 8012d40:	f001 fd14 	bl	801476c <LoRaMacCryptoSetLrWanVersion>
 8012d44:	4603      	mov	r3, r0
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d030      	beq.n	8012dac <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012d4a:	2311      	movs	r3, #17
 8012d4c:	e03a      	b.n	8012dc4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012d4e:	2303      	movs	r3, #3
 8012d50:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012d52:	e02b      	b.n	8012dac <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	685b      	ldr	r3, [r3, #4]
 8012d58:	4a1c      	ldr	r2, [pc, #112]	@ (8012dcc <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012d5a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8012d5e:	e026      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	791a      	ldrb	r2, [r3, #4]
 8012d64:	4b19      	ldr	r3, [pc, #100]	@ (8012dcc <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012d66:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
            break;
 8012d6a:	e020      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012d6c:	6878      	ldr	r0, [r7, #4]
 8012d6e:	f000 fc88 	bl	8013682 <LoRaMacMibClassBSetRequestConfirm>
 8012d72:	4603      	mov	r3, r0
 8012d74:	75fb      	strb	r3, [r7, #23]
            break;
 8012d76:	e01a      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012d78:	bf00      	nop
 8012d7a:	e018      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012d7c:	bf00      	nop
 8012d7e:	e016      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012d80:	bf00      	nop
 8012d82:	e014      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012d84:	bf00      	nop
 8012d86:	e012      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012d88:	bf00      	nop
 8012d8a:	e010      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012d8c:	bf00      	nop
 8012d8e:	e00e      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012d90:	bf00      	nop
 8012d92:	e00c      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012d94:	bf00      	nop
 8012d96:	e00a      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012d98:	bf00      	nop
 8012d9a:	e008      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012d9c:	bf00      	nop
 8012d9e:	e006      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012da0:	bf00      	nop
 8012da2:	e004      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012da4:	bf00      	nop
 8012da6:	e002      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012da8:	bf00      	nop
 8012daa:	e000      	b.n	8012dae <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012dac:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 8012dae:	7dfb      	ldrb	r3, [r7, #23]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d106      	bne.n	8012dc2 <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8012db4:	4a06      	ldr	r2, [pc, #24]	@ (8012dd0 <LoRaMacMibSetRequestConfirm+0x6dc>)
 8012db6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8012dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012dbe:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 8012dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3718      	adds	r7, #24
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}
 8012dcc:	20000e5c 	.word	0x20000e5c
 8012dd0:	2000093c 	.word	0x2000093c

08012dd4 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b08a      	sub	sp, #40	@ 0x28
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012ddc:	2302      	movs	r3, #2
 8012dde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012de2:	2300      	movs	r3, #0
 8012de4:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d101      	bne.n	8012df0 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012dec:	2303      	movs	r3, #3
 8012dee:	e16c      	b.n	80130ca <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2200      	movs	r2, #0
 8012df4:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8012df6:	f7fc fc5f 	bl	800f6b8 <LoRaMacIsBusy>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d001      	beq.n	8012e04 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8012e00:	2301      	movs	r3, #1
 8012e02:	e162      	b.n	80130ca <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012e04:	f001 f956 	bl	80140b4 <LoRaMacConfirmQueueIsFull>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d001      	beq.n	8012e12 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8012e0e:	2301      	movs	r3, #1
 8012e10:	e15b      	b.n	80130ca <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012e12:	f001 f943 	bl	801409c <LoRaMacConfirmQueueGetCnt>
 8012e16:	4603      	mov	r3, r0
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d104      	bne.n	8012e26 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012e1c:	2214      	movs	r2, #20
 8012e1e:	2100      	movs	r1, #0
 8012e20:	48ac      	ldr	r0, [pc, #688]	@ (80130d4 <LoRaMacMlmeRequest+0x300>)
 8012e22:	f004 fdff 	bl	8017a24 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012e26:	4bac      	ldr	r3, [pc, #688]	@ (80130d8 <LoRaMacMlmeRequest+0x304>)
 8012e28:	2201      	movs	r2, #1
 8012e2a:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012e2e:	4aaa      	ldr	r2, [pc, #680]	@ (80130d8 <LoRaMacMlmeRequest+0x304>)
 8012e30:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8012e34:	f043 0304 	orr.w	r3, r3, #4
 8012e38:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    queueElement.Request = mlmeRequest->Type;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	781b      	ldrb	r3, [r3, #0]
 8012e40:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012e44:	2301      	movs	r3, #1
 8012e46:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 8012e50:	2300      	movs	r3, #0
 8012e52:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	3b01      	subs	r3, #1
 8012e5c:	2b0c      	cmp	r3, #12
 8012e5e:	f200 8108 	bhi.w	8013072 <LoRaMacMlmeRequest+0x29e>
 8012e62:	a201      	add	r2, pc, #4	@ (adr r2, 8012e68 <LoRaMacMlmeRequest+0x94>)
 8012e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e68:	08012e9d 	.word	0x08012e9d
 8012e6c:	08013073 	.word	0x08013073
 8012e70:	08013073 	.word	0x08013073
 8012e74:	08012f73 	.word	0x08012f73
 8012e78:	08012f95 	.word	0x08012f95
 8012e7c:	08013073 	.word	0x08013073
 8012e80:	08013073 	.word	0x08013073
 8012e84:	08013073 	.word	0x08013073
 8012e88:	08012fb3 	.word	0x08012fb3
 8012e8c:	08013073 	.word	0x08013073
 8012e90:	08013041 	.word	0x08013041
 8012e94:	08012fd5 	.word	0x08012fd5
 8012e98:	0801301f 	.word	0x0801301f
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012e9c:	4b8e      	ldr	r3, [pc, #568]	@ (80130d8 <LoRaMacMlmeRequest+0x304>)
 8012e9e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012ea2:	f003 0320 	and.w	r3, r3, #32
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d001      	beq.n	8012eae <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8012eaa:	2301      	movs	r3, #1
 8012eac:	e10d      	b.n	80130ca <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	791b      	ldrb	r3, [r3, #4]
 8012eb2:	2b02      	cmp	r3, #2
 8012eb4:	d12e      	bne.n	8012f14 <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 8012eb6:	f7fe f997 	bl	80111e8 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8012eba:	4b88      	ldr	r3, [pc, #544]	@ (80130dc <LoRaMacMlmeRequest+0x308>)
 8012ebc:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	795b      	ldrb	r3, [r3, #5]
 8012ec4:	b25b      	sxtb	r3, r3
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	4619      	mov	r1, r3
 8012eca:	f002 fbf2 	bl	80156b2 <RegionAlternateDr>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	4b82      	ldr	r3, [pc, #520]	@ (80130dc <LoRaMacMlmeRequest+0x308>)
 8012ed4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012ed8:	2307      	movs	r3, #7
 8012eda:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8012ede:	20ff      	movs	r0, #255	@ 0xff
 8012ee0:	f7fd ff00 	bl	8010ce4 <SendReJoinReq>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 8012eea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	f000 80c1 	beq.w	8013076 <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012ef4:	4b79      	ldr	r3, [pc, #484]	@ (80130dc <LoRaMacMlmeRequest+0x308>)
 8012ef6:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	795b      	ldrb	r3, [r3, #5]
 8012efe:	b25b      	sxtb	r3, r3
 8012f00:	2201      	movs	r2, #1
 8012f02:	4619      	mov	r1, r3
 8012f04:	f002 fbd5 	bl	80156b2 <RegionAlternateDr>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	4b73      	ldr	r3, [pc, #460]	@ (80130dc <LoRaMacMlmeRequest+0x308>)
 8012f0e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8012f12:	e0b0      	b.n	8013076 <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	791b      	ldrb	r3, [r3, #4]
 8012f18:	2b01      	cmp	r3, #1
 8012f1a:	f040 80ac 	bne.w	8013076 <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012f1e:	4b6f      	ldr	r3, [pc, #444]	@ (80130dc <LoRaMacMlmeRequest+0x308>)
 8012f20:	2200      	movs	r2, #0
 8012f22:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012f26:	2302      	movs	r3, #2
 8012f28:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012f2a:	4b6c      	ldr	r3, [pc, #432]	@ (80130dc <LoRaMacMlmeRequest+0x308>)
 8012f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012f30:	f107 020c 	add.w	r2, r7, #12
 8012f34:	4611      	mov	r1, r2
 8012f36:	4618      	mov	r0, r3
 8012f38:	f002 fac1 	bl	80154be <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	791a      	ldrb	r2, [r3, #4]
 8012f40:	4b66      	ldr	r3, [pc, #408]	@ (80130dc <LoRaMacMlmeRequest+0x308>)
 8012f42:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012f46:	2300      	movs	r3, #0
 8012f48:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 8012f52:	4b61      	ldr	r3, [pc, #388]	@ (80130d8 <LoRaMacMlmeRequest+0x304>)
 8012f54:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012f58:	691b      	ldr	r3, [r3, #16]
 8012f5a:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012f5c:	4a5e      	ldr	r2, [pc, #376]	@ (80130d8 <LoRaMacMlmeRequest+0x304>)
 8012f5e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8012f62:	f043 0320 	orr.w	r3, r3, #32
 8012f66:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
                status = LORAMAC_STATUS_OK;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012f70:	e081      	b.n	8013076 <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012f72:	2300      	movs	r3, #0
 8012f74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012f78:	f107 031c 	add.w	r3, r7, #28
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	4619      	mov	r1, r3
 8012f80:	2002      	movs	r0, #2
 8012f82:	f000 fcfd 	bl	8013980 <LoRaMacCommandsAddCmd>
 8012f86:	4603      	mov	r3, r0
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d076      	beq.n	801307a <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012f8c:	2313      	movs	r3, #19
 8012f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8012f92:	e072      	b.n	801307a <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	8898      	ldrh	r0, [r3, #4]
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	6899      	ldr	r1, [r3, #8]
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012fa2:	b2db      	uxtb	r3, r3
 8012fa4:	461a      	mov	r2, r3
 8012fa6:	f7fe fc65 	bl	8011874 <SetTxContinuousWave>
 8012faa:	4603      	mov	r3, r0
 8012fac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012fb0:	e06a      	b.n	8013088 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012fb8:	f107 031c 	add.w	r3, r7, #28
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	200d      	movs	r0, #13
 8012fc2:	f000 fcdd 	bl	8013980 <LoRaMacCommandsAddCmd>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d058      	beq.n	801307e <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012fcc:	2313      	movs	r3, #19
 8012fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8012fd2:	e054      	b.n	801307e <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012fd4:	4b41      	ldr	r3, [pc, #260]	@ (80130dc <LoRaMacMlmeRequest+0x308>)
 8012fd6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d151      	bne.n	8013082 <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	791b      	ldrb	r3, [r3, #4]
 8012fe2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	791b      	ldrb	r3, [r3, #4]
 8012fea:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012fee:	b2db      	uxtb	r3, r3
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f000 fb1b 	bl	801362c <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012ff6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012ffa:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8013002:	f107 031c 	add.w	r3, r7, #28
 8013006:	2201      	movs	r2, #1
 8013008:	4619      	mov	r1, r3
 801300a:	2010      	movs	r0, #16
 801300c:	f000 fcb8 	bl	8013980 <LoRaMacCommandsAddCmd>
 8013010:	4603      	mov	r3, r0
 8013012:	2b00      	cmp	r3, #0
 8013014:	d035      	beq.n	8013082 <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013016:	2313      	movs	r3, #19
 8013018:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 801301c:	e031      	b.n	8013082 <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801301e:	2300      	movs	r3, #0
 8013020:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013024:	f107 031c 	add.w	r3, r7, #28
 8013028:	2200      	movs	r2, #0
 801302a:	4619      	mov	r1, r3
 801302c:	2012      	movs	r0, #18
 801302e:	f000 fca7 	bl	8013980 <LoRaMacCommandsAddCmd>
 8013032:	4603      	mov	r3, r0
 8013034:	2b00      	cmp	r3, #0
 8013036:	d026      	beq.n	8013086 <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013038:	2313      	movs	r3, #19
 801303a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 801303e:	e022      	b.n	8013086 <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8013040:	2301      	movs	r3, #1
 8013042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8013046:	f000 faa7 	bl	8013598 <LoRaMacClassBIsAcquisitionInProgress>
 801304a:	4603      	mov	r3, r0
 801304c:	f083 0301 	eor.w	r3, r3, #1
 8013050:	b2db      	uxtb	r3, r3
 8013052:	2b00      	cmp	r3, #0
 8013054:	d009      	beq.n	801306a <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8013056:	2000      	movs	r0, #0
 8013058:	f000 fa80 	bl	801355c <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801305c:	2000      	movs	r0, #0
 801305e:	f000 faa2 	bl	80135a6 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8013062:	2300      	movs	r3, #0
 8013064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8013068:	e00e      	b.n	8013088 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 801306a:	2301      	movs	r3, #1
 801306c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8013070:	e00a      	b.n	8013088 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 8013072:	bf00      	nop
 8013074:	e008      	b.n	8013088 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013076:	bf00      	nop
 8013078:	e006      	b.n	8013088 <LoRaMacMlmeRequest+0x2b4>
            break;
 801307a:	bf00      	nop
 801307c:	e004      	b.n	8013088 <LoRaMacMlmeRequest+0x2b4>
            break;
 801307e:	bf00      	nop
 8013080:	e002      	b.n	8013088 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013082:	bf00      	nop
 8013084:	e000      	b.n	8013088 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013086:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013088:	4b13      	ldr	r3, [pc, #76]	@ (80130d8 <LoRaMacMlmeRequest+0x304>)
 801308a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8013092:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013096:	2b00      	cmp	r3, #0
 8013098:	d010      	beq.n	80130bc <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801309a:	f000 ffff 	bl	801409c <LoRaMacConfirmQueueGetCnt>
 801309e:	4603      	mov	r3, r0
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d110      	bne.n	80130c6 <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 80130a4:	4b0c      	ldr	r3, [pc, #48]	@ (80130d8 <LoRaMacMlmeRequest+0x304>)
 80130a6:	2200      	movs	r2, #0
 80130a8:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80130ac:	4a0a      	ldr	r2, [pc, #40]	@ (80130d8 <LoRaMacMlmeRequest+0x304>)
 80130ae:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80130b2:	f36f 0382 	bfc	r3, #2, #1
 80130b6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 80130ba:	e004      	b.n	80130c6 <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80130bc:	f107 0320 	add.w	r3, r7, #32
 80130c0:	4618      	mov	r0, r3
 80130c2:	f000 fe9d 	bl	8013e00 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80130c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3728      	adds	r7, #40	@ 0x28
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}
 80130d2:	bf00      	nop
 80130d4:	20000d94 	.word	0x20000d94
 80130d8:	2000093c 	.word	0x2000093c
 80130dc:	20000e5c 	.word	0x20000e5c

080130e0 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80130e0:	b5b0      	push	{r4, r5, r7, lr}
 80130e2:	b092      	sub	sp, #72	@ 0x48
 80130e4:	af02      	add	r7, sp, #8
 80130e6:	6078      	str	r0, [r7, #4]
 80130e8:	460b      	mov	r3, r1
 80130ea:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80130ec:	2302      	movs	r3, #2
 80130ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80130f2:	2300      	movs	r3, #0
 80130f4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 80130f8:	2300      	movs	r3, #0
 80130fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80130fc:	2300      	movs	r3, #0
 80130fe:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 8013102:	2300      	movs	r3, #0
 8013104:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d101      	bne.n	8013112 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801310e:	2303      	movs	r3, #3
 8013110:	e113      	b.n	801333a <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	2200      	movs	r2, #0
 8013116:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8013118:	f7fc face 	bl	800f6b8 <LoRaMacIsBusy>
 801311c:	4603      	mov	r3, r0
 801311e:	2b00      	cmp	r3, #0
 8013120:	d001      	beq.n	8013126 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8013122:	2301      	movs	r3, #1
 8013124:	e109      	b.n	801333a <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	f107 040c 	add.w	r4, r7, #12
 801312c:	461d      	mov	r5, r3
 801312e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013132:	682b      	ldr	r3, [r5, #0]
 8013134:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8013136:	2300      	movs	r3, #0
 8013138:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 801313c:	2214      	movs	r2, #20
 801313e:	2100      	movs	r1, #0
 8013140:	4880      	ldr	r0, [pc, #512]	@ (8013344 <LoRaMacMcpsRequest+0x264>)
 8013142:	f004 fc6f 	bl	8017a24 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013146:	4b80      	ldr	r3, [pc, #512]	@ (8013348 <LoRaMacMcpsRequest+0x268>)
 8013148:	2201      	movs	r2, #1
 801314a:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801314e:	4b7f      	ldr	r3, [pc, #508]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 8013150:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8013154:	2b02      	cmp	r3, #2
 8013156:	d111      	bne.n	801317c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8013158:	4b7c      	ldr	r3, [pc, #496]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 801315a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801315e:	2b02      	cmp	r3, #2
 8013160:	d10c      	bne.n	801317c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8013162:	4b7a      	ldr	r3, [pc, #488]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 8013164:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8013168:	f083 0301 	eor.w	r3, r3, #1
 801316c:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 801316e:	2b00      	cmp	r3, #0
 8013170:	d004      	beq.n	801317c <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8013172:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8013174:	2b00      	cmp	r3, #0
 8013176:	d101      	bne.n	801317c <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8013178:	2301      	movs	r3, #1
 801317a:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 801317c:	7b3b      	ldrb	r3, [r7, #12]
 801317e:	2b03      	cmp	r3, #3
 8013180:	d030      	beq.n	80131e4 <LoRaMacMcpsRequest+0x104>
 8013182:	2b03      	cmp	r3, #3
 8013184:	dc3f      	bgt.n	8013206 <LoRaMacMcpsRequest+0x126>
 8013186:	2b00      	cmp	r3, #0
 8013188:	d002      	beq.n	8013190 <LoRaMacMcpsRequest+0xb0>
 801318a:	2b01      	cmp	r3, #1
 801318c:	d015      	beq.n	80131ba <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801318e:	e03a      	b.n	8013206 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8013190:	2301      	movs	r3, #1
 8013192:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013196:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801319a:	2202      	movs	r2, #2
 801319c:	f362 1347 	bfi	r3, r2, #5, #3
 80131a0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 80131a4:	7c3b      	ldrb	r3, [r7, #16]
 80131a6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 80131aa:	697b      	ldr	r3, [r7, #20]
 80131ac:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 80131ae:	8b3b      	ldrh	r3, [r7, #24]
 80131b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 80131b2:	7ebb      	ldrb	r3, [r7, #26]
 80131b4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80131b8:	e026      	b.n	8013208 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80131ba:	2301      	movs	r3, #1
 80131bc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80131c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80131c4:	2204      	movs	r2, #4
 80131c6:	f362 1347 	bfi	r3, r2, #5, #3
 80131ca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 80131ce:	7c3b      	ldrb	r3, [r7, #16]
 80131d0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 80131d8:	8b3b      	ldrh	r3, [r7, #24]
 80131da:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 80131dc:	7ebb      	ldrb	r3, [r7, #26]
 80131de:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80131e2:	e011      	b.n	8013208 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80131e4:	2301      	movs	r3, #1
 80131e6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80131ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80131ee:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80131f2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 80131f6:	693b      	ldr	r3, [r7, #16]
 80131f8:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80131fa:	8abb      	ldrh	r3, [r7, #20]
 80131fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 80131fe:	7dbb      	ldrb	r3, [r7, #22]
 8013200:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8013204:	e000      	b.n	8013208 <LoRaMacMcpsRequest+0x128>
            break;
 8013206:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013208:	2302      	movs	r3, #2
 801320a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801320e:	4b4f      	ldr	r3, [pc, #316]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 8013210:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8013214:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013218:	4b4c      	ldr	r3, [pc, #304]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 801321a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801321e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013222:	4611      	mov	r1, r2
 8013224:	4618      	mov	r0, r3
 8013226:	f002 f921 	bl	801546c <RegionGetPhyParam>
 801322a:	4603      	mov	r3, r0
 801322c:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801322e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013230:	b25b      	sxtb	r3, r3
 8013232:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 8013236:	4293      	cmp	r3, r2
 8013238:	bfb8      	it	lt
 801323a:	4613      	movlt	r3, r2
 801323c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013240:	4b42      	ldr	r3, [pc, #264]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 8013242:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8013246:	4a41      	ldr	r2, [pc, #260]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 8013248:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 801324c:	4a3f      	ldr	r2, [pc, #252]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 801324e:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 8013252:	4618      	mov	r0, r3
 8013254:	f7fc fbc8 	bl	800f9e8 <CheckForMinimumAbpDatarate>
 8013258:	4603      	mov	r3, r0
 801325a:	2b00      	cmp	r3, #0
 801325c:	d002      	beq.n	8013264 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 801325e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013260:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 8013264:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8013268:	2b00      	cmp	r3, #0
 801326a:	d05f      	beq.n	801332c <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801326c:	4b37      	ldr	r3, [pc, #220]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 801326e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8013272:	f083 0301 	eor.w	r3, r3, #1
 8013276:	b2db      	uxtb	r3, r3
 8013278:	2b00      	cmp	r3, #0
 801327a:	d10e      	bne.n	801329a <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 801327c:	4b33      	ldr	r3, [pc, #204]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 801327e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8013282:	4a32      	ldr	r2, [pc, #200]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 8013284:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 8013288:	4a30      	ldr	r2, [pc, #192]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 801328a:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 801328e:	4618      	mov	r0, r3
 8013290:	f7fc fbaa 	bl	800f9e8 <CheckForMinimumAbpDatarate>
 8013294:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013296:	2b00      	cmp	r3, #0
 8013298:	d01c      	beq.n	80132d4 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 801329a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801329e:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80132a2:	4b2a      	ldr	r3, [pc, #168]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 80132a4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80132a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80132ac:	4b27      	ldr	r3, [pc, #156]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 80132ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80132b2:	f107 0120 	add.w	r1, r7, #32
 80132b6:	2205      	movs	r2, #5
 80132b8:	4618      	mov	r0, r3
 80132ba:	f002 f912 	bl	80154e2 <RegionVerify>
 80132be:	4603      	mov	r3, r0
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d005      	beq.n	80132d0 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80132c4:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80132c8:	4b20      	ldr	r3, [pc, #128]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 80132ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80132ce:	e001      	b.n	80132d4 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80132d0:	2303      	movs	r3, #3
 80132d2:	e032      	b.n	801333a <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 80132d4:	4b1d      	ldr	r3, [pc, #116]	@ (801334c <LoRaMacMcpsRequest+0x26c>)
 80132d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80132da:	4a1b      	ldr	r2, [pc, #108]	@ (8013348 <LoRaMacMcpsRequest+0x268>)
 80132dc:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 80132e0:	4611      	mov	r1, r2
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7fc fc6a 	bl	800fbbc <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80132e8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80132ea:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 80132ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80132f2:	78fb      	ldrb	r3, [r7, #3]
 80132f4:	9300      	str	r3, [sp, #0]
 80132f6:	4613      	mov	r3, r2
 80132f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80132fa:	f7fd fc0f 	bl	8010b1c <Send>
 80132fe:	4603      	mov	r3, r0
 8013300:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 8013304:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013308:	2b00      	cmp	r3, #0
 801330a:	d10b      	bne.n	8013324 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 801330c:	7b3a      	ldrb	r2, [r7, #12]
 801330e:	4b0e      	ldr	r3, [pc, #56]	@ (8013348 <LoRaMacMcpsRequest+0x268>)
 8013310:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013314:	4a0c      	ldr	r2, [pc, #48]	@ (8013348 <LoRaMacMcpsRequest+0x268>)
 8013316:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 801331a:	f043 0301 	orr.w	r3, r3, #1
 801331e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 8013322:	e003      	b.n	801332c <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8013324:	4b08      	ldr	r3, [pc, #32]	@ (8013348 <LoRaMacMcpsRequest+0x268>)
 8013326:	2200      	movs	r2, #0
 8013328:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801332c:	4b06      	ldr	r3, [pc, #24]	@ (8013348 <LoRaMacMcpsRequest+0x268>)
 801332e:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	611a      	str	r2, [r3, #16]

    return status;
 8013336:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801333a:	4618      	mov	r0, r3
 801333c:	3740      	adds	r7, #64	@ 0x40
 801333e:	46bd      	mov	sp, r7
 8013340:	bdb0      	pop	{r4, r5, r7, pc}
 8013342:	bf00      	nop
 8013344:	20000d80 	.word	0x20000d80
 8013348:	2000093c 	.word	0x2000093c
 801334c:	20000e5c 	.word	0x20000e5c

08013350 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b084      	sub	sp, #16
 8013354:	af00      	add	r7, sp, #0
 8013356:	4603      	mov	r3, r0
 8013358:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 801335a:	79fb      	ldrb	r3, [r7, #7]
 801335c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801335e:	4b0a      	ldr	r3, [pc, #40]	@ (8013388 <LoRaMacTestSetDutyCycleOn+0x38>)
 8013360:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013364:	f107 010c 	add.w	r1, r7, #12
 8013368:	220f      	movs	r2, #15
 801336a:	4618      	mov	r0, r3
 801336c:	f002 f8b9 	bl	80154e2 <RegionVerify>
 8013370:	4603      	mov	r3, r0
 8013372:	2b00      	cmp	r3, #0
 8013374:	d003      	beq.n	801337e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8013376:	4a04      	ldr	r2, [pc, #16]	@ (8013388 <LoRaMacTestSetDutyCycleOn+0x38>)
 8013378:	79fb      	ldrb	r3, [r7, #7]
 801337a:	f882 3108 	strb.w	r3, [r2, #264]	@ 0x108
    }
}
 801337e:	bf00      	nop
 8013380:	3710      	adds	r7, #16
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}
 8013386:	bf00      	nop
 8013388:	20000e5c 	.word	0x20000e5c

0801338c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 801338c:	b580      	push	{r7, lr}
 801338e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8013390:	f7fe ff26 	bl	80121e0 <LoRaMacStop>
 8013394:	4603      	mov	r3, r0
 8013396:	2b00      	cmp	r3, #0
 8013398:	d111      	bne.n	80133be <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801339a:	480a      	ldr	r0, [pc, #40]	@ (80133c4 <LoRaMacDeInitialization+0x38>)
 801339c:	f008 fc4c 	bl	801bc38 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 80133a0:	4809      	ldr	r0, [pc, #36]	@ (80133c8 <LoRaMacDeInitialization+0x3c>)
 80133a2:	f008 fc49 	bl	801bc38 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80133a6:	4809      	ldr	r0, [pc, #36]	@ (80133cc <LoRaMacDeInitialization+0x40>)
 80133a8:	f008 fc46 	bl	801bc38 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 80133ac:	f000 f948 	bl	8013640 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 80133b0:	f7fd ff1a 	bl	80111e8 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80133b4:	4b06      	ldr	r3, [pc, #24]	@ (80133d0 <LoRaMacDeInitialization+0x44>)
 80133b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133b8:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 80133ba:	2300      	movs	r3, #0
 80133bc:	e000      	b.n	80133c0 <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80133be:	2301      	movs	r3, #1
    }
}
 80133c0:	4618      	mov	r0, r3
 80133c2:	bd80      	pop	{r7, pc}
 80133c4:	20000ca4 	.word	0x20000ca4
 80133c8:	20000cbc 	.word	0x20000cbc
 80133cc:	20000cd4 	.word	0x20000cd4
 80133d0:	0801fedc 	.word	0x0801fedc

080133d4 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b08c      	sub	sp, #48	@ 0x30
 80133d8:	af00      	add	r7, sp, #0
 80133da:	60f8      	str	r0, [r7, #12]
 80133dc:	60b9      	str	r1, [r7, #8]
 80133de:	607a      	str	r2, [r7, #4]
 80133e0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80133e2:	2300      	movs	r3, #0
 80133e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	7b1b      	ldrb	r3, [r3, #12]
 80133ec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	7b5b      	ldrb	r3, [r3, #13]
 80133f4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	7b9b      	ldrb	r3, [r3, #14]
 80133fc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	685a      	ldr	r2, [r3, #4]
 8013404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013406:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	785b      	ldrb	r3, [r3, #1]
 801340c:	2b00      	cmp	r3, #0
 801340e:	f000 8088 	beq.w	8013522 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8013412:	2302      	movs	r3, #2
 8013414:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	7bdb      	ldrb	r3, [r3, #15]
 801341c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	7c1b      	ldrb	r3, [r3, #16]
 8013424:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013428:	4611      	mov	r1, r2
 801342a:	4618      	mov	r0, r3
 801342c:	f002 f81e 	bl	801546c <RegionGetPhyParam>
 8013430:	4603      	mov	r3, r0
 8013432:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8013434:	6a3b      	ldr	r3, [r7, #32]
 8013436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 801343a:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 801343e:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8013442:	4293      	cmp	r3, r2
 8013444:	bfb8      	it	lt
 8013446:	4613      	movlt	r3, r2
 8013448:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	685b      	ldr	r3, [r3, #4]
 8013450:	68fa      	ldr	r2, [r7, #12]
 8013452:	8912      	ldrh	r2, [r2, #8]
 8013454:	4293      	cmp	r3, r2
 8013456:	d302      	bcc.n	801345e <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8013458:	2301      	movs	r3, #1
 801345a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	685b      	ldr	r3, [r3, #4]
 8013462:	68fa      	ldr	r2, [r7, #12]
 8013464:	8912      	ldrh	r2, [r2, #8]
 8013466:	4611      	mov	r1, r2
 8013468:	68fa      	ldr	r2, [r7, #12]
 801346a:	8952      	ldrh	r2, [r2, #10]
 801346c:	440a      	add	r2, r1
 801346e:	4293      	cmp	r3, r2
 8013470:	d30f      	bcc.n	8013492 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8013472:	230a      	movs	r3, #10
 8013474:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	7c1b      	ldrb	r3, [r3, #16]
 801347c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013480:	4611      	mov	r1, r2
 8013482:	4618      	mov	r0, r3
 8013484:	f001 fff2 	bl	801546c <RegionGetPhyParam>
 8013488:	4603      	mov	r3, r0
 801348a:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 801348c:	6a3b      	ldr	r3, [r7, #32]
 801348e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	685b      	ldr	r3, [r3, #4]
 8013496:	68fa      	ldr	r2, [r7, #12]
 8013498:	8912      	ldrh	r2, [r2, #8]
 801349a:	4611      	mov	r1, r2
 801349c:	68fa      	ldr	r2, [r7, #12]
 801349e:	8952      	ldrh	r2, [r2, #10]
 80134a0:	0052      	lsls	r2, r2, #1
 80134a2:	440a      	add	r2, r1
 80134a4:	4293      	cmp	r3, r2
 80134a6:	d33c      	bcc.n	8013522 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	685b      	ldr	r3, [r3, #4]
 80134ac:	68fa      	ldr	r2, [r7, #12]
 80134ae:	8912      	ldrh	r2, [r2, #8]
 80134b0:	1a9b      	subs	r3, r3, r2
 80134b2:	68fa      	ldr	r2, [r7, #12]
 80134b4:	8952      	ldrh	r2, [r2, #10]
 80134b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80134ba:	fb01 f202 	mul.w	r2, r1, r2
 80134be:	1a9b      	subs	r3, r3, r2
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d12e      	bne.n	8013522 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 80134c4:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 80134c8:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d110      	bne.n	80134f2 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d009      	beq.n	80134ec <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80134d8:	2302      	movs	r3, #2
 80134da:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	7c1b      	ldrb	r3, [r3, #16]
 80134e0:	f107 0210 	add.w	r2, r7, #16
 80134e4:	4611      	mov	r1, r2
 80134e6:	4618      	mov	r0, r3
 80134e8:	f001 ffe9 	bl	80154be <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 80134ec:	2301      	movs	r3, #1
 80134ee:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80134f2:	2321      	movs	r3, #33	@ 0x21
 80134f4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 80134f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80134fc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	7bdb      	ldrb	r3, [r3, #15]
 8013504:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	7c1b      	ldrb	r3, [r3, #16]
 801350c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013510:	4611      	mov	r1, r2
 8013512:	4618      	mov	r0, r3
 8013514:	f001 ffaa 	bl	801546c <RegionGetPhyParam>
 8013518:	4603      	mov	r3, r0
 801351a:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 801351c:	6a3b      	ldr	r3, [r7, #32]
 801351e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8013528:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8013530:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013538:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 801353a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801353e:	4618      	mov	r0, r3
 8013540:	3730      	adds	r7, #48	@ 0x30
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}

08013546 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8013546:	b480      	push	{r7}
 8013548:	b085      	sub	sp, #20
 801354a:	af00      	add	r7, sp, #0
 801354c:	60f8      	str	r0, [r7, #12]
 801354e:	60b9      	str	r1, [r7, #8]
 8013550:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013552:	bf00      	nop
 8013554:	3714      	adds	r7, #20
 8013556:	46bd      	mov	sp, r7
 8013558:	bc80      	pop	{r7}
 801355a:	4770      	bx	lr

0801355c <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801355c:	b480      	push	{r7}
 801355e:	b083      	sub	sp, #12
 8013560:	af00      	add	r7, sp, #0
 8013562:	4603      	mov	r3, r0
 8013564:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013566:	bf00      	nop
 8013568:	370c      	adds	r7, #12
 801356a:	46bd      	mov	sp, r7
 801356c:	bc80      	pop	{r7}
 801356e:	4770      	bx	lr

08013570 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013570:	b480      	push	{r7}
 8013572:	b083      	sub	sp, #12
 8013574:	af00      	add	r7, sp, #0
 8013576:	4603      	mov	r3, r0
 8013578:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801357a:	bf00      	nop
 801357c:	370c      	adds	r7, #12
 801357e:	46bd      	mov	sp, r7
 8013580:	bc80      	pop	{r7}
 8013582:	4770      	bx	lr

08013584 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013584:	b480      	push	{r7}
 8013586:	b083      	sub	sp, #12
 8013588:	af00      	add	r7, sp, #0
 801358a:	4603      	mov	r3, r0
 801358c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801358e:	bf00      	nop
 8013590:	370c      	adds	r7, #12
 8013592:	46bd      	mov	sp, r7
 8013594:	bc80      	pop	{r7}
 8013596:	4770      	bx	lr

08013598 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8013598:	b480      	push	{r7}
 801359a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801359c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801359e:	4618      	mov	r0, r3
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bc80      	pop	{r7}
 80135a4:	4770      	bx	lr

080135a6 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80135a6:	b480      	push	{r7}
 80135a8:	b083      	sub	sp, #12
 80135aa:	af00      	add	r7, sp, #0
 80135ac:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80135ae:	bf00      	nop
 80135b0:	370c      	adds	r7, #12
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bc80      	pop	{r7}
 80135b6:	4770      	bx	lr

080135b8 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80135b8:	b480      	push	{r7}
 80135ba:	b083      	sub	sp, #12
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80135c0:	bf00      	nop
 80135c2:	370c      	adds	r7, #12
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bc80      	pop	{r7}
 80135c8:	4770      	bx	lr

080135ca <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80135ca:	b480      	push	{r7}
 80135cc:	b083      	sub	sp, #12
 80135ce:	af00      	add	r7, sp, #0
 80135d0:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80135d2:	bf00      	nop
 80135d4:	370c      	adds	r7, #12
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bc80      	pop	{r7}
 80135da:	4770      	bx	lr

080135dc <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80135dc:	b480      	push	{r7}
 80135de:	b083      	sub	sp, #12
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	460b      	mov	r3, r1
 80135e6:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80135e8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	370c      	adds	r7, #12
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bc80      	pop	{r7}
 80135f2:	4770      	bx	lr

080135f4 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80135f4:	b480      	push	{r7}
 80135f6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80135f8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80135fa:	4618      	mov	r0, r3
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bc80      	pop	{r7}
 8013600:	4770      	bx	lr

08013602 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8013602:	b480      	push	{r7}
 8013604:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013606:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013608:	4618      	mov	r0, r3
 801360a:	46bd      	mov	sp, r7
 801360c:	bc80      	pop	{r7}
 801360e:	4770      	bx	lr

08013610 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8013610:	b480      	push	{r7}
 8013612:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013614:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013616:	4618      	mov	r0, r3
 8013618:	46bd      	mov	sp, r7
 801361a:	bc80      	pop	{r7}
 801361c:	4770      	bx	lr

0801361e <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801361e:	b480      	push	{r7}
 8013620:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013622:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013624:	4618      	mov	r0, r3
 8013626:	46bd      	mov	sp, r7
 8013628:	bc80      	pop	{r7}
 801362a:	4770      	bx	lr

0801362c <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801362c:	b480      	push	{r7}
 801362e:	b083      	sub	sp, #12
 8013630:	af00      	add	r7, sp, #0
 8013632:	4603      	mov	r3, r0
 8013634:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013636:	bf00      	nop
 8013638:	370c      	adds	r7, #12
 801363a:	46bd      	mov	sp, r7
 801363c:	bc80      	pop	{r7}
 801363e:	4770      	bx	lr

08013640 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8013640:	b480      	push	{r7}
 8013642:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013644:	bf00      	nop
 8013646:	46bd      	mov	sp, r7
 8013648:	bc80      	pop	{r7}
 801364a:	4770      	bx	lr

0801364c <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801364c:	b480      	push	{r7}
 801364e:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013650:	bf00      	nop
 8013652:	46bd      	mov	sp, r7
 8013654:	bc80      	pop	{r7}
 8013656:	4770      	bx	lr

08013658 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8013658:	b480      	push	{r7}
 801365a:	b083      	sub	sp, #12
 801365c:	af00      	add	r7, sp, #0
 801365e:	4603      	mov	r3, r0
 8013660:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013662:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013664:	4618      	mov	r0, r3
 8013666:	370c      	adds	r7, #12
 8013668:	46bd      	mov	sp, r7
 801366a:	bc80      	pop	{r7}
 801366c:	4770      	bx	lr

0801366e <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801366e:	b480      	push	{r7}
 8013670:	b083      	sub	sp, #12
 8013672:	af00      	add	r7, sp, #0
 8013674:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013676:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013678:	4618      	mov	r0, r3
 801367a:	370c      	adds	r7, #12
 801367c:	46bd      	mov	sp, r7
 801367e:	bc80      	pop	{r7}
 8013680:	4770      	bx	lr

08013682 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8013682:	b480      	push	{r7}
 8013684:	b083      	sub	sp, #12
 8013686:	af00      	add	r7, sp, #0
 8013688:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801368a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801368c:	4618      	mov	r0, r3
 801368e:	370c      	adds	r7, #12
 8013690:	46bd      	mov	sp, r7
 8013692:	bc80      	pop	{r7}
 8013694:	4770      	bx	lr

08013696 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013696:	b480      	push	{r7}
 8013698:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801369a:	bf00      	nop
 801369c:	46bd      	mov	sp, r7
 801369e:	bc80      	pop	{r7}
 80136a0:	4770      	bx	lr

080136a2 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80136a2:	b480      	push	{r7}
 80136a4:	b083      	sub	sp, #12
 80136a6:	af00      	add	r7, sp, #0
 80136a8:	4603      	mov	r3, r0
 80136aa:	6039      	str	r1, [r7, #0]
 80136ac:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80136ae:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80136b0:	4618      	mov	r0, r3
 80136b2:	370c      	adds	r7, #12
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bc80      	pop	{r7}
 80136b8:	4770      	bx	lr

080136ba <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80136ba:	b480      	push	{r7}
 80136bc:	b083      	sub	sp, #12
 80136be:	af00      	add	r7, sp, #0
 80136c0:	4603      	mov	r3, r0
 80136c2:	603a      	str	r2, [r7, #0]
 80136c4:	80fb      	strh	r3, [r7, #6]
 80136c6:	460b      	mov	r3, r1
 80136c8:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80136ca:	bf00      	nop
 80136cc:	370c      	adds	r7, #12
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bc80      	pop	{r7}
 80136d2:	4770      	bx	lr

080136d4 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80136d4:	b480      	push	{r7}
 80136d6:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80136d8:	bf00      	nop
 80136da:	46bd      	mov	sp, r7
 80136dc:	bc80      	pop	{r7}
 80136de:	4770      	bx	lr

080136e0 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80136e0:	b480      	push	{r7}
 80136e2:	b083      	sub	sp, #12
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80136e8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	370c      	adds	r7, #12
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bc80      	pop	{r7}
 80136f2:	4770      	bx	lr

080136f4 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80136f4:	b480      	push	{r7}
 80136f6:	b083      	sub	sp, #12
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80136fc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80136fe:	4618      	mov	r0, r3
 8013700:	370c      	adds	r7, #12
 8013702:	46bd      	mov	sp, r7
 8013704:	bc80      	pop	{r7}
 8013706:	4770      	bx	lr

08013708 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8013708:	b480      	push	{r7}
 801370a:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801370c:	bf00      	nop
 801370e:	46bd      	mov	sp, r7
 8013710:	bc80      	pop	{r7}
 8013712:	4770      	bx	lr

08013714 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8013714:	b480      	push	{r7}
 8013716:	b083      	sub	sp, #12
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	460b      	mov	r3, r1
 801371e:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013720:	bf00      	nop
 8013722:	370c      	adds	r7, #12
 8013724:	46bd      	mov	sp, r7
 8013726:	bc80      	pop	{r7}
 8013728:	4770      	bx	lr

0801372a <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 801372a:	b480      	push	{r7}
 801372c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801372e:	bf00      	nop
 8013730:	46bd      	mov	sp, r7
 8013732:	bc80      	pop	{r7}
 8013734:	4770      	bx	lr

08013736 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8013736:	b480      	push	{r7}
 8013738:	b085      	sub	sp, #20
 801373a:	af00      	add	r7, sp, #0
 801373c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013742:	2300      	movs	r3, #0
 8013744:	81fb      	strh	r3, [r7, #14]
 8013746:	e00a      	b.n	801375e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8013748:	89fb      	ldrh	r3, [r7, #14]
 801374a:	68ba      	ldr	r2, [r7, #8]
 801374c:	4413      	add	r3, r2
 801374e:	781b      	ldrb	r3, [r3, #0]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d001      	beq.n	8013758 <IsSlotFree+0x22>
        {
            return false;
 8013754:	2300      	movs	r3, #0
 8013756:	e006      	b.n	8013766 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013758:	89fb      	ldrh	r3, [r7, #14]
 801375a:	3301      	adds	r3, #1
 801375c:	81fb      	strh	r3, [r7, #14]
 801375e:	89fb      	ldrh	r3, [r7, #14]
 8013760:	2b0f      	cmp	r3, #15
 8013762:	d9f1      	bls.n	8013748 <IsSlotFree+0x12>
        }
    }
    return true;
 8013764:	2301      	movs	r3, #1
}
 8013766:	4618      	mov	r0, r3
 8013768:	3714      	adds	r7, #20
 801376a:	46bd      	mov	sp, r7
 801376c:	bc80      	pop	{r7}
 801376e:	4770      	bx	lr

08013770 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013776:	2300      	movs	r3, #0
 8013778:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801377a:	e007      	b.n	801378c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 801377c:	79fb      	ldrb	r3, [r7, #7]
 801377e:	3301      	adds	r3, #1
 8013780:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013782:	79fb      	ldrb	r3, [r7, #7]
 8013784:	2b20      	cmp	r3, #32
 8013786:	d101      	bne.n	801378c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8013788:	2300      	movs	r3, #0
 801378a:	e012      	b.n	80137b2 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801378c:	79fb      	ldrb	r3, [r7, #7]
 801378e:	011b      	lsls	r3, r3, #4
 8013790:	3308      	adds	r3, #8
 8013792:	4a0a      	ldr	r2, [pc, #40]	@ (80137bc <MallocNewMacCommandSlot+0x4c>)
 8013794:	4413      	add	r3, r2
 8013796:	4618      	mov	r0, r3
 8013798:	f7ff ffcd 	bl	8013736 <IsSlotFree>
 801379c:	4603      	mov	r3, r0
 801379e:	f083 0301 	eor.w	r3, r3, #1
 80137a2:	b2db      	uxtb	r3, r3
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d1e9      	bne.n	801377c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80137a8:	79fb      	ldrb	r3, [r7, #7]
 80137aa:	011b      	lsls	r3, r3, #4
 80137ac:	3308      	adds	r3, #8
 80137ae:	4a03      	ldr	r2, [pc, #12]	@ (80137bc <MallocNewMacCommandSlot+0x4c>)
 80137b0:	4413      	add	r3, r2
}
 80137b2:	4618      	mov	r0, r3
 80137b4:	3708      	adds	r7, #8
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}
 80137ba:	bf00      	nop
 80137bc:	200019fc 	.word	0x200019fc

080137c0 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b082      	sub	sp, #8
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d101      	bne.n	80137d2 <FreeMacCommandSlot+0x12>
    {
        return false;
 80137ce:	2300      	movs	r3, #0
 80137d0:	e005      	b.n	80137de <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80137d2:	2210      	movs	r2, #16
 80137d4:	2100      	movs	r1, #0
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f004 f924 	bl	8017a24 <memset1>

    return true;
 80137dc:	2301      	movs	r3, #1
}
 80137de:	4618      	mov	r0, r3
 80137e0:	3708      	adds	r7, #8
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}

080137e6 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80137e6:	b480      	push	{r7}
 80137e8:	b083      	sub	sp, #12
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d101      	bne.n	80137f8 <LinkedListInit+0x12>
    {
        return false;
 80137f4:	2300      	movs	r3, #0
 80137f6:	e006      	b.n	8013806 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2200      	movs	r2, #0
 80137fc:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	2200      	movs	r2, #0
 8013802:	605a      	str	r2, [r3, #4]

    return true;
 8013804:	2301      	movs	r3, #1
}
 8013806:	4618      	mov	r0, r3
 8013808:	370c      	adds	r7, #12
 801380a:	46bd      	mov	sp, r7
 801380c:	bc80      	pop	{r7}
 801380e:	4770      	bx	lr

08013810 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8013810:	b480      	push	{r7}
 8013812:	b083      	sub	sp, #12
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d002      	beq.n	8013826 <LinkedListAdd+0x16>
 8013820:	683b      	ldr	r3, [r7, #0]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d101      	bne.n	801382a <LinkedListAdd+0x1a>
    {
        return false;
 8013826:	2300      	movs	r3, #0
 8013828:	e015      	b.n	8013856 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d102      	bne.n	8013838 <LinkedListAdd+0x28>
    {
        list->First = element;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	683a      	ldr	r2, [r7, #0]
 8013836:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	685b      	ldr	r3, [r3, #4]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d003      	beq.n	8013848 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	683a      	ldr	r2, [r7, #0]
 8013846:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	2200      	movs	r2, #0
 801384c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	683a      	ldr	r2, [r7, #0]
 8013852:	605a      	str	r2, [r3, #4]

    return true;
 8013854:	2301      	movs	r3, #1
}
 8013856:	4618      	mov	r0, r3
 8013858:	370c      	adds	r7, #12
 801385a:	46bd      	mov	sp, r7
 801385c:	bc80      	pop	{r7}
 801385e:	4770      	bx	lr

08013860 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8013860:	b480      	push	{r7}
 8013862:	b085      	sub	sp, #20
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
 8013868:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d002      	beq.n	8013876 <LinkedListGetPrevious+0x16>
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d101      	bne.n	801387a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013876:	2300      	movs	r3, #0
 8013878:	e016      	b.n	80138a8 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013880:	683a      	ldr	r2, [r7, #0]
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	429a      	cmp	r2, r3
 8013886:	d00c      	beq.n	80138a2 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013888:	e002      	b.n	8013890 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d007      	beq.n	80138a6 <LinkedListGetPrevious+0x46>
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	683a      	ldr	r2, [r7, #0]
 801389c:	429a      	cmp	r2, r3
 801389e:	d1f4      	bne.n	801388a <LinkedListGetPrevious+0x2a>
 80138a0:	e001      	b.n	80138a6 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80138a2:	2300      	movs	r3, #0
 80138a4:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80138a6:	68fb      	ldr	r3, [r7, #12]
}
 80138a8:	4618      	mov	r0, r3
 80138aa:	3714      	adds	r7, #20
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bc80      	pop	{r7}
 80138b0:	4770      	bx	lr

080138b2 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80138b2:	b580      	push	{r7, lr}
 80138b4:	b084      	sub	sp, #16
 80138b6:	af00      	add	r7, sp, #0
 80138b8:	6078      	str	r0, [r7, #4]
 80138ba:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d002      	beq.n	80138c8 <LinkedListRemove+0x16>
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d101      	bne.n	80138cc <LinkedListRemove+0x1a>
    {
        return false;
 80138c8:	2300      	movs	r3, #0
 80138ca:	e020      	b.n	801390e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80138cc:	6839      	ldr	r1, [r7, #0]
 80138ce:	6878      	ldr	r0, [r7, #4]
 80138d0:	f7ff ffc6 	bl	8013860 <LinkedListGetPrevious>
 80138d4:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	683a      	ldr	r2, [r7, #0]
 80138dc:	429a      	cmp	r2, r3
 80138de:	d103      	bne.n	80138e8 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	681a      	ldr	r2, [r3, #0]
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	685b      	ldr	r3, [r3, #4]
 80138ec:	683a      	ldr	r2, [r7, #0]
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d102      	bne.n	80138f8 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	68fa      	ldr	r2, [r7, #12]
 80138f6:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d003      	beq.n	8013906 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80138fe:	683b      	ldr	r3, [r7, #0]
 8013900:	681a      	ldr	r2, [r3, #0]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	2200      	movs	r2, #0
 801390a:	601a      	str	r2, [r3, #0]

    return true;
 801390c:	2301      	movs	r3, #1
}
 801390e:	4618      	mov	r0, r3
 8013910:	3710      	adds	r7, #16
 8013912:	46bd      	mov	sp, r7
 8013914:	bd80      	pop	{r7, pc}
	...

08013918 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8013918:	b480      	push	{r7}
 801391a:	b083      	sub	sp, #12
 801391c:	af00      	add	r7, sp, #0
 801391e:	4603      	mov	r3, r0
 8013920:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8013922:	79fb      	ldrb	r3, [r7, #7]
 8013924:	2b11      	cmp	r3, #17
 8013926:	bf8c      	ite	hi
 8013928:	2201      	movhi	r2, #1
 801392a:	2200      	movls	r2, #0
 801392c:	b2d2      	uxtb	r2, r2
 801392e:	2a00      	cmp	r2, #0
 8013930:	d10d      	bne.n	801394e <IsSticky+0x36>
 8013932:	4a0a      	ldr	r2, [pc, #40]	@ (801395c <IsSticky+0x44>)
 8013934:	fa22 f303 	lsr.w	r3, r2, r3
 8013938:	f003 0301 	and.w	r3, r3, #1
 801393c:	2b00      	cmp	r3, #0
 801393e:	bf14      	ite	ne
 8013940:	2301      	movne	r3, #1
 8013942:	2300      	moveq	r3, #0
 8013944:	b2db      	uxtb	r3, r3
 8013946:	2b00      	cmp	r3, #0
 8013948:	d001      	beq.n	801394e <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 801394a:	2301      	movs	r3, #1
 801394c:	e000      	b.n	8013950 <IsSticky+0x38>
        default:
            return false;
 801394e:	2300      	movs	r3, #0
    }
}
 8013950:	4618      	mov	r0, r3
 8013952:	370c      	adds	r7, #12
 8013954:	46bd      	mov	sp, r7
 8013956:	bc80      	pop	{r7}
 8013958:	4770      	bx	lr
 801395a:	bf00      	nop
 801395c:	00020720 	.word	0x00020720

08013960 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8013960:	b580      	push	{r7, lr}
 8013962:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8013964:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8013968:	2100      	movs	r1, #0
 801396a:	4804      	ldr	r0, [pc, #16]	@ (801397c <LoRaMacCommandsInit+0x1c>)
 801396c:	f004 f85a 	bl	8017a24 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8013970:	4802      	ldr	r0, [pc, #8]	@ (801397c <LoRaMacCommandsInit+0x1c>)
 8013972:	f7ff ff38 	bl	80137e6 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8013976:	2300      	movs	r3, #0
}
 8013978:	4618      	mov	r0, r3
 801397a:	bd80      	pop	{r7, pc}
 801397c:	200019fc 	.word	0x200019fc

08013980 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b086      	sub	sp, #24
 8013984:	af00      	add	r7, sp, #0
 8013986:	4603      	mov	r3, r0
 8013988:	60b9      	str	r1, [r7, #8]
 801398a:	607a      	str	r2, [r7, #4]
 801398c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801398e:	68bb      	ldr	r3, [r7, #8]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d101      	bne.n	8013998 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013994:	2301      	movs	r3, #1
 8013996:	e033      	b.n	8013a00 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8013998:	f7ff feea 	bl	8013770 <MallocNewMacCommandSlot>
 801399c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801399e:	697b      	ldr	r3, [r7, #20]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d101      	bne.n	80139a8 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80139a4:	2302      	movs	r3, #2
 80139a6:	e02b      	b.n	8013a00 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80139a8:	6979      	ldr	r1, [r7, #20]
 80139aa:	4817      	ldr	r0, [pc, #92]	@ (8013a08 <LoRaMacCommandsAddCmd+0x88>)
 80139ac:	f7ff ff30 	bl	8013810 <LinkedListAdd>
 80139b0:	4603      	mov	r3, r0
 80139b2:	f083 0301 	eor.w	r3, r3, #1
 80139b6:	b2db      	uxtb	r3, r3
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d001      	beq.n	80139c0 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80139bc:	2305      	movs	r3, #5
 80139be:	e01f      	b.n	8013a00 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 80139c0:	697b      	ldr	r3, [r7, #20]
 80139c2:	7bfa      	ldrb	r2, [r7, #15]
 80139c4:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	687a      	ldr	r2, [r7, #4]
 80139ca:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	3305      	adds	r3, #5
 80139d0:	687a      	ldr	r2, [r7, #4]
 80139d2:	b292      	uxth	r2, r2
 80139d4:	68b9      	ldr	r1, [r7, #8]
 80139d6:	4618      	mov	r0, r3
 80139d8:	f003 ffe9 	bl	80179ae <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80139dc:	7bfb      	ldrb	r3, [r7, #15]
 80139de:	4618      	mov	r0, r3
 80139e0:	f7ff ff9a 	bl	8013918 <IsSticky>
 80139e4:	4603      	mov	r3, r0
 80139e6:	461a      	mov	r2, r3
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80139ec:	4b06      	ldr	r3, [pc, #24]	@ (8013a08 <LoRaMacCommandsAddCmd+0x88>)
 80139ee:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	4413      	add	r3, r2
 80139f6:	3301      	adds	r3, #1
 80139f8:	4a03      	ldr	r2, [pc, #12]	@ (8013a08 <LoRaMacCommandsAddCmd+0x88>)
 80139fa:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80139fe:	2300      	movs	r3, #0
}
 8013a00:	4618      	mov	r0, r3
 8013a02:	3718      	adds	r7, #24
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}
 8013a08:	200019fc 	.word	0x200019fc

08013a0c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b082      	sub	sp, #8
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d101      	bne.n	8013a1e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	e021      	b.n	8013a62 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8013a1e:	6879      	ldr	r1, [r7, #4]
 8013a20:	4812      	ldr	r0, [pc, #72]	@ (8013a6c <LoRaMacCommandsRemoveCmd+0x60>)
 8013a22:	f7ff ff46 	bl	80138b2 <LinkedListRemove>
 8013a26:	4603      	mov	r3, r0
 8013a28:	f083 0301 	eor.w	r3, r3, #1
 8013a2c:	b2db      	uxtb	r3, r3
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d001      	beq.n	8013a36 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8013a32:	2303      	movs	r3, #3
 8013a34:	e015      	b.n	8013a62 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8013a36:	4b0d      	ldr	r3, [pc, #52]	@ (8013a6c <LoRaMacCommandsRemoveCmd+0x60>)
 8013a38:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	689b      	ldr	r3, [r3, #8]
 8013a40:	1ad3      	subs	r3, r2, r3
 8013a42:	3b01      	subs	r3, #1
 8013a44:	4a09      	ldr	r2, [pc, #36]	@ (8013a6c <LoRaMacCommandsRemoveCmd+0x60>)
 8013a46:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f7ff feb8 	bl	80137c0 <FreeMacCommandSlot>
 8013a50:	4603      	mov	r3, r0
 8013a52:	f083 0301 	eor.w	r3, r3, #1
 8013a56:	b2db      	uxtb	r3, r3
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d001      	beq.n	8013a60 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013a5c:	2305      	movs	r3, #5
 8013a5e:	e000      	b.n	8013a62 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013a60:	2300      	movs	r3, #0
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3708      	adds	r7, #8
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}
 8013a6a:	bf00      	nop
 8013a6c:	200019fc 	.word	0x200019fc

08013a70 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b082      	sub	sp, #8
 8013a74:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013a76:	4b0f      	ldr	r3, [pc, #60]	@ (8013ab4 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013a7c:	e012      	b.n	8013aa4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	7b1b      	ldrb	r3, [r3, #12]
 8013a82:	f083 0301 	eor.w	r3, r3, #1
 8013a86:	b2db      	uxtb	r3, r3
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d008      	beq.n	8013a9e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8013a92:	6878      	ldr	r0, [r7, #4]
 8013a94:	f7ff ffba 	bl	8013a0c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	607b      	str	r3, [r7, #4]
 8013a9c:	e002      	b.n	8013aa4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d1e9      	bne.n	8013a7e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013aaa:	2300      	movs	r3, #0
}
 8013aac:	4618      	mov	r0, r3
 8013aae:	3708      	adds	r7, #8
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}
 8013ab4:	200019fc 	.word	0x200019fc

08013ab8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b082      	sub	sp, #8
 8013abc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013abe:	4b0e      	ldr	r3, [pc, #56]	@ (8013af8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013ac4:	e00f      	b.n	8013ae6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	791b      	ldrb	r3, [r3, #4]
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7ff ff21 	bl	8013918 <IsSticky>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d002      	beq.n	8013ae2 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f7ff ff95 	bl	8013a0c <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d1ec      	bne.n	8013ac6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013aec:	2300      	movs	r3, #0
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	3708      	adds	r7, #8
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd80      	pop	{r7, pc}
 8013af6:	bf00      	nop
 8013af8:	200019fc 	.word	0x200019fc

08013afc <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8013afc:	b480      	push	{r7}
 8013afe:	b083      	sub	sp, #12
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d101      	bne.n	8013b0e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	e005      	b.n	8013b1a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8013b0e:	4b05      	ldr	r3, [pc, #20]	@ (8013b24 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8013b10:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8013b18:	2300      	movs	r3, #0
}
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	370c      	adds	r7, #12
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bc80      	pop	{r7}
 8013b22:	4770      	bx	lr
 8013b24:	200019fc 	.word	0x200019fc

08013b28 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b088      	sub	sp, #32
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	60f8      	str	r0, [r7, #12]
 8013b30:	60b9      	str	r1, [r7, #8]
 8013b32:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8013b34:	4b25      	ldr	r3, [pc, #148]	@ (8013bcc <LoRaMacCommandsSerializeCmds+0xa4>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d002      	beq.n	8013b4a <LoRaMacCommandsSerializeCmds+0x22>
 8013b44:	68bb      	ldr	r3, [r7, #8]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d126      	bne.n	8013b98 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013b4a:	2301      	movs	r3, #1
 8013b4c:	e039      	b.n	8013bc2 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8013b4e:	7efb      	ldrb	r3, [r7, #27]
 8013b50:	68fa      	ldr	r2, [r7, #12]
 8013b52:	1ad2      	subs	r2, r2, r3
 8013b54:	69fb      	ldr	r3, [r7, #28]
 8013b56:	689b      	ldr	r3, [r3, #8]
 8013b58:	3301      	adds	r3, #1
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d320      	bcc.n	8013ba0 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8013b5e:	7efb      	ldrb	r3, [r7, #27]
 8013b60:	1c5a      	adds	r2, r3, #1
 8013b62:	76fa      	strb	r2, [r7, #27]
 8013b64:	461a      	mov	r2, r3
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	4413      	add	r3, r2
 8013b6a:	69fa      	ldr	r2, [r7, #28]
 8013b6c:	7912      	ldrb	r2, [r2, #4]
 8013b6e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013b70:	7efb      	ldrb	r3, [r7, #27]
 8013b72:	687a      	ldr	r2, [r7, #4]
 8013b74:	18d0      	adds	r0, r2, r3
 8013b76:	69fb      	ldr	r3, [r7, #28]
 8013b78:	1d59      	adds	r1, r3, #5
 8013b7a:	69fb      	ldr	r3, [r7, #28]
 8013b7c:	689b      	ldr	r3, [r3, #8]
 8013b7e:	b29b      	uxth	r3, r3
 8013b80:	461a      	mov	r2, r3
 8013b82:	f003 ff14 	bl	80179ae <memcpy1>
            itr += curElement->PayloadSize;
 8013b86:	69fb      	ldr	r3, [r7, #28]
 8013b88:	689b      	ldr	r3, [r3, #8]
 8013b8a:	b2da      	uxtb	r2, r3
 8013b8c:	7efb      	ldrb	r3, [r7, #27]
 8013b8e:	4413      	add	r3, r2
 8013b90:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8013b92:	69fb      	ldr	r3, [r7, #28]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013b98:	69fb      	ldr	r3, [r7, #28]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d1d7      	bne.n	8013b4e <LoRaMacCommandsSerializeCmds+0x26>
 8013b9e:	e009      	b.n	8013bb4 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013ba0:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8013ba2:	e007      	b.n	8013bb4 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013ba4:	69fb      	ldr	r3, [r7, #28]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8013baa:	69f8      	ldr	r0, [r7, #28]
 8013bac:	f7ff ff2e 	bl	8013a0c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8013bb0:	697b      	ldr	r3, [r7, #20]
 8013bb2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013bb4:	69fb      	ldr	r3, [r7, #28]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d1f4      	bne.n	8013ba4 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8013bba:	68b8      	ldr	r0, [r7, #8]
 8013bbc:	f7ff ff9e 	bl	8013afc <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8013bc0:	2300      	movs	r3, #0
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	3720      	adds	r7, #32
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}
 8013bca:	bf00      	nop
 8013bcc:	200019fc 	.word	0x200019fc

08013bd0 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8013bd0:	b480      	push	{r7}
 8013bd2:	b085      	sub	sp, #20
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d101      	bne.n	8013be2 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013bde:	2301      	movs	r3, #1
 8013be0:	e016      	b.n	8013c10 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8013be2:	4b0e      	ldr	r3, [pc, #56]	@ (8013c1c <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	2200      	movs	r2, #0
 8013bec:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8013bee:	e00b      	b.n	8013c08 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	7b1b      	ldrb	r3, [r3, #12]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d004      	beq.n	8013c02 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	2201      	movs	r2, #1
 8013bfc:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	e006      	b.n	8013c10 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d1f0      	bne.n	8013bf0 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013c0e:	2300      	movs	r3, #0
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	3714      	adds	r7, #20
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bc80      	pop	{r7}
 8013c18:	4770      	bx	lr
 8013c1a:	bf00      	nop
 8013c1c:	200019fc 	.word	0x200019fc

08013c20 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8013c20:	b480      	push	{r7}
 8013c22:	b085      	sub	sp, #20
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	4603      	mov	r3, r0
 8013c28:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8013c2e:	79fb      	ldrb	r3, [r7, #7]
 8013c30:	3b02      	subs	r3, #2
 8013c32:	2b11      	cmp	r3, #17
 8013c34:	d850      	bhi.n	8013cd8 <LoRaMacCommandsGetCmdSize+0xb8>
 8013c36:	a201      	add	r2, pc, #4	@ (adr r2, 8013c3c <LoRaMacCommandsGetCmdSize+0x1c>)
 8013c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c3c:	08013c85 	.word	0x08013c85
 8013c40:	08013c8b 	.word	0x08013c8b
 8013c44:	08013c91 	.word	0x08013c91
 8013c48:	08013c97 	.word	0x08013c97
 8013c4c:	08013c9d 	.word	0x08013c9d
 8013c50:	08013ca3 	.word	0x08013ca3
 8013c54:	08013ca9 	.word	0x08013ca9
 8013c58:	08013caf 	.word	0x08013caf
 8013c5c:	08013cb5 	.word	0x08013cb5
 8013c60:	08013cd9 	.word	0x08013cd9
 8013c64:	08013cd9 	.word	0x08013cd9
 8013c68:	08013cbb 	.word	0x08013cbb
 8013c6c:	08013cd9 	.word	0x08013cd9
 8013c70:	08013cd9 	.word	0x08013cd9
 8013c74:	08013cc1 	.word	0x08013cc1
 8013c78:	08013cc7 	.word	0x08013cc7
 8013c7c:	08013ccd 	.word	0x08013ccd
 8013c80:	08013cd3 	.word	0x08013cd3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013c84:	2303      	movs	r3, #3
 8013c86:	73fb      	strb	r3, [r7, #15]
            break;
 8013c88:	e027      	b.n	8013cda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8013c8a:	2305      	movs	r3, #5
 8013c8c:	73fb      	strb	r3, [r7, #15]
            break;
 8013c8e:	e024      	b.n	8013cda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013c90:	2302      	movs	r3, #2
 8013c92:	73fb      	strb	r3, [r7, #15]
            break;
 8013c94:	e021      	b.n	8013cda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8013c96:	2305      	movs	r3, #5
 8013c98:	73fb      	strb	r3, [r7, #15]
            break;
 8013c9a:	e01e      	b.n	8013cda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	73fb      	strb	r3, [r7, #15]
            break;
 8013ca0:	e01b      	b.n	8013cda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013ca2:	2306      	movs	r3, #6
 8013ca4:	73fb      	strb	r3, [r7, #15]
            break;
 8013ca6:	e018      	b.n	8013cda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8013ca8:	2302      	movs	r3, #2
 8013caa:	73fb      	strb	r3, [r7, #15]
            break;
 8013cac:	e015      	b.n	8013cda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013cae:	2302      	movs	r3, #2
 8013cb0:	73fb      	strb	r3, [r7, #15]
            break;
 8013cb2:	e012      	b.n	8013cda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013cb4:	2305      	movs	r3, #5
 8013cb6:	73fb      	strb	r3, [r7, #15]
            break;
 8013cb8:	e00f      	b.n	8013cda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8013cba:	2306      	movs	r3, #6
 8013cbc:	73fb      	strb	r3, [r7, #15]
            break;
 8013cbe:	e00c      	b.n	8013cda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013cc0:	2301      	movs	r3, #1
 8013cc2:	73fb      	strb	r3, [r7, #15]
            break;
 8013cc4:	e009      	b.n	8013cda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8013cc6:	2305      	movs	r3, #5
 8013cc8:	73fb      	strb	r3, [r7, #15]
            break;
 8013cca:	e006      	b.n	8013cda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013ccc:	2304      	movs	r3, #4
 8013cce:	73fb      	strb	r3, [r7, #15]
            break;
 8013cd0:	e003      	b.n	8013cda <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013cd2:	2304      	movs	r3, #4
 8013cd4:	73fb      	strb	r3, [r7, #15]
            break;
 8013cd6:	e000      	b.n	8013cda <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8013cd8:	bf00      	nop
        }
    }
    return cidSize;
 8013cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	3714      	adds	r7, #20
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bc80      	pop	{r7}
 8013ce4:	4770      	bx	lr
 8013ce6:	bf00      	nop

08013ce8 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8013ce8:	b480      	push	{r7}
 8013cea:	b083      	sub	sp, #12
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	4a07      	ldr	r2, [pc, #28]	@ (8013d10 <IncreaseBufferPointer+0x28>)
 8013cf4:	4293      	cmp	r3, r2
 8013cf6:	d102      	bne.n	8013cfe <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013cf8:	4b06      	ldr	r3, [pc, #24]	@ (8013d14 <IncreaseBufferPointer+0x2c>)
 8013cfa:	607b      	str	r3, [r7, #4]
 8013cfc:	e002      	b.n	8013d04 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	3304      	adds	r3, #4
 8013d02:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8013d04:	687b      	ldr	r3, [r7, #4]
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	370c      	adds	r7, #12
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bc80      	pop	{r7}
 8013d0e:	4770      	bx	lr
 8013d10:	20001c24 	.word	0x20001c24
 8013d14:	20001c14 	.word	0x20001c14

08013d18 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8013d18:	b480      	push	{r7}
 8013d1a:	b083      	sub	sp, #12
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	4603      	mov	r3, r0
 8013d20:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8013d22:	79fb      	ldrb	r3, [r7, #7]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d101      	bne.n	8013d2c <IsListEmpty+0x14>
    {
        return true;
 8013d28:	2301      	movs	r3, #1
 8013d2a:	e000      	b.n	8013d2e <IsListEmpty+0x16>
    }
    return false;
 8013d2c:	2300      	movs	r3, #0
}
 8013d2e:	4618      	mov	r0, r3
 8013d30:	370c      	adds	r7, #12
 8013d32:	46bd      	mov	sp, r7
 8013d34:	bc80      	pop	{r7}
 8013d36:	4770      	bx	lr

08013d38 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8013d38:	b480      	push	{r7}
 8013d3a:	b083      	sub	sp, #12
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	4603      	mov	r3, r0
 8013d40:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013d42:	79fb      	ldrb	r3, [r7, #7]
 8013d44:	2b04      	cmp	r3, #4
 8013d46:	d901      	bls.n	8013d4c <IsListFull+0x14>
    {
        return true;
 8013d48:	2301      	movs	r3, #1
 8013d4a:	e000      	b.n	8013d4e <IsListFull+0x16>
    }
    return false;
 8013d4c:	2300      	movs	r3, #0
}
 8013d4e:	4618      	mov	r0, r3
 8013d50:	370c      	adds	r7, #12
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bc80      	pop	{r7}
 8013d56:	4770      	bx	lr

08013d58 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b086      	sub	sp, #24
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	4603      	mov	r3, r0
 8013d60:	60b9      	str	r1, [r7, #8]
 8013d62:	607a      	str	r2, [r7, #4]
 8013d64:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8013d66:	68bb      	ldr	r3, [r7, #8]
 8013d68:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013d6a:	4b13      	ldr	r3, [pc, #76]	@ (8013db8 <GetElement+0x60>)
 8013d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d70:	4618      	mov	r0, r3
 8013d72:	f7ff ffd1 	bl	8013d18 <IsListEmpty>
 8013d76:	4603      	mov	r3, r0
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d001      	beq.n	8013d80 <GetElement+0x28>
    {
        return NULL;
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	e017      	b.n	8013db0 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013d80:	2300      	movs	r3, #0
 8013d82:	74fb      	strb	r3, [r7, #19]
 8013d84:	e00d      	b.n	8013da2 <GetElement+0x4a>
    {
        if( element->Request == request )
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	781b      	ldrb	r3, [r3, #0]
 8013d8a:	7bfa      	ldrb	r2, [r7, #15]
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	d101      	bne.n	8013d94 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013d90:	697b      	ldr	r3, [r7, #20]
 8013d92:	e00d      	b.n	8013db0 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013d94:	6978      	ldr	r0, [r7, #20]
 8013d96:	f7ff ffa7 	bl	8013ce8 <IncreaseBufferPointer>
 8013d9a:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013d9c:	7cfb      	ldrb	r3, [r7, #19]
 8013d9e:	3301      	adds	r3, #1
 8013da0:	74fb      	strb	r3, [r7, #19]
 8013da2:	4b05      	ldr	r3, [pc, #20]	@ (8013db8 <GetElement+0x60>)
 8013da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013da8:	7cfa      	ldrb	r2, [r7, #19]
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d3eb      	bcc.n	8013d86 <GetElement+0x2e>
    }

    return NULL;
 8013dae:	2300      	movs	r3, #0
}
 8013db0:	4618      	mov	r0, r3
 8013db2:	3718      	adds	r7, #24
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}
 8013db8:	20001c08 	.word	0x20001c08

08013dbc <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8013df8 <LoRaMacConfirmQueueInit+0x3c>)
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8013dca:	4b0b      	ldr	r3, [pc, #44]	@ (8013df8 <LoRaMacConfirmQueueInit+0x3c>)
 8013dcc:	2200      	movs	r2, #0
 8013dce:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013dd2:	4b09      	ldr	r3, [pc, #36]	@ (8013df8 <LoRaMacConfirmQueueInit+0x3c>)
 8013dd4:	4a09      	ldr	r2, [pc, #36]	@ (8013dfc <LoRaMacConfirmQueueInit+0x40>)
 8013dd6:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013dd8:	4b07      	ldr	r3, [pc, #28]	@ (8013df8 <LoRaMacConfirmQueueInit+0x3c>)
 8013dda:	4a08      	ldr	r2, [pc, #32]	@ (8013dfc <LoRaMacConfirmQueueInit+0x40>)
 8013ddc:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013dde:	2214      	movs	r2, #20
 8013de0:	21ff      	movs	r1, #255	@ 0xff
 8013de2:	4806      	ldr	r0, [pc, #24]	@ (8013dfc <LoRaMacConfirmQueueInit+0x40>)
 8013de4:	f003 fe1e 	bl	8017a24 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013de8:	4b03      	ldr	r3, [pc, #12]	@ (8013df8 <LoRaMacConfirmQueueInit+0x3c>)
 8013dea:	2201      	movs	r2, #1
 8013dec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8013df0:	bf00      	nop
 8013df2:	3708      	adds	r7, #8
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}
 8013df8:	20001c08 	.word	0x20001c08
 8013dfc:	20001c14 	.word	0x20001c14

08013e00 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b082      	sub	sp, #8
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013e08:	4b19      	ldr	r3, [pc, #100]	@ (8013e70 <LoRaMacConfirmQueueAdd+0x70>)
 8013e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f7ff ff92 	bl	8013d38 <IsListFull>
 8013e14:	4603      	mov	r3, r0
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d001      	beq.n	8013e1e <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	e024      	b.n	8013e68 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013e1e:	4b14      	ldr	r3, [pc, #80]	@ (8013e70 <LoRaMacConfirmQueueAdd+0x70>)
 8013e20:	689b      	ldr	r3, [r3, #8]
 8013e22:	687a      	ldr	r2, [r7, #4]
 8013e24:	7812      	ldrb	r2, [r2, #0]
 8013e26:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8013e28:	4b11      	ldr	r3, [pc, #68]	@ (8013e70 <LoRaMacConfirmQueueAdd+0x70>)
 8013e2a:	689b      	ldr	r3, [r3, #8]
 8013e2c:	687a      	ldr	r2, [r7, #4]
 8013e2e:	7852      	ldrb	r2, [r2, #1]
 8013e30:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8013e32:	4b0f      	ldr	r3, [pc, #60]	@ (8013e70 <LoRaMacConfirmQueueAdd+0x70>)
 8013e34:	689b      	ldr	r3, [r3, #8]
 8013e36:	687a      	ldr	r2, [r7, #4]
 8013e38:	78d2      	ldrb	r2, [r2, #3]
 8013e3a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8013e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8013e70 <LoRaMacConfirmQueueAdd+0x70>)
 8013e3e:	689b      	ldr	r3, [r3, #8]
 8013e40:	687a      	ldr	r2, [r7, #4]
 8013e42:	7892      	ldrb	r2, [r2, #2]
 8013e44:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8013e46:	4b0a      	ldr	r3, [pc, #40]	@ (8013e70 <LoRaMacConfirmQueueAdd+0x70>)
 8013e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e4c:	3301      	adds	r3, #1
 8013e4e:	b2da      	uxtb	r2, r3
 8013e50:	4b07      	ldr	r3, [pc, #28]	@ (8013e70 <LoRaMacConfirmQueueAdd+0x70>)
 8013e52:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013e56:	4b06      	ldr	r3, [pc, #24]	@ (8013e70 <LoRaMacConfirmQueueAdd+0x70>)
 8013e58:	689b      	ldr	r3, [r3, #8]
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7ff ff44 	bl	8013ce8 <IncreaseBufferPointer>
 8013e60:	4603      	mov	r3, r0
 8013e62:	4a03      	ldr	r2, [pc, #12]	@ (8013e70 <LoRaMacConfirmQueueAdd+0x70>)
 8013e64:	6093      	str	r3, [r2, #8]

    return true;
 8013e66:	2301      	movs	r3, #1
}
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3708      	adds	r7, #8
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	20001c08 	.word	0x20001c08

08013e74 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013e78:	4b0e      	ldr	r3, [pc, #56]	@ (8013eb4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013e7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f7ff ff4a 	bl	8013d18 <IsListEmpty>
 8013e84:	4603      	mov	r3, r0
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d001      	beq.n	8013e8e <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	e010      	b.n	8013eb0 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013e8e:	4b09      	ldr	r3, [pc, #36]	@ (8013eb4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e94:	3b01      	subs	r3, #1
 8013e96:	b2da      	uxtb	r2, r3
 8013e98:	4b06      	ldr	r3, [pc, #24]	@ (8013eb4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013e9a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013e9e:	4b05      	ldr	r3, [pc, #20]	@ (8013eb4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013ea0:	685b      	ldr	r3, [r3, #4]
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7ff ff20 	bl	8013ce8 <IncreaseBufferPointer>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	4a02      	ldr	r2, [pc, #8]	@ (8013eb4 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013eac:	6053      	str	r3, [r2, #4]

    return true;
 8013eae:	2301      	movs	r3, #1
}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	bd80      	pop	{r7, pc}
 8013eb4:	20001c08 	.word	0x20001c08

08013eb8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b084      	sub	sp, #16
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	460a      	mov	r2, r1
 8013ec2:	71fb      	strb	r3, [r7, #7]
 8013ec4:	4613      	mov	r3, r2
 8013ec6:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013ecc:	4b10      	ldr	r3, [pc, #64]	@ (8013f10 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f7ff ff20 	bl	8013d18 <IsListEmpty>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	f083 0301 	eor.w	r3, r3, #1
 8013ede:	b2db      	uxtb	r3, r3
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d011      	beq.n	8013f08 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8013f10 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013ee6:	6859      	ldr	r1, [r3, #4]
 8013ee8:	4b09      	ldr	r3, [pc, #36]	@ (8013f10 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013eea:	689a      	ldr	r2, [r3, #8]
 8013eec:	79bb      	ldrb	r3, [r7, #6]
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7ff ff32 	bl	8013d58 <GetElement>
 8013ef4:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d005      	beq.n	8013f08 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	79fa      	ldrb	r2, [r7, #7]
 8013f00:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	2201      	movs	r2, #1
 8013f06:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013f08:	bf00      	nop
 8013f0a:	3710      	adds	r7, #16
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}
 8013f10:	20001c08 	.word	0x20001c08

08013f14 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b084      	sub	sp, #16
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013f22:	4b10      	ldr	r3, [pc, #64]	@ (8013f64 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7ff fef5 	bl	8013d18 <IsListEmpty>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	f083 0301 	eor.w	r3, r3, #1
 8013f34:	b2db      	uxtb	r3, r3
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d00e      	beq.n	8013f58 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8013f64 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013f3c:	6859      	ldr	r1, [r3, #4]
 8013f3e:	4b09      	ldr	r3, [pc, #36]	@ (8013f64 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013f40:	689a      	ldr	r2, [r3, #8]
 8013f42:	79fb      	ldrb	r3, [r7, #7]
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7ff ff07 	bl	8013d58 <GetElement>
 8013f4a:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d002      	beq.n	8013f58 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	785b      	ldrb	r3, [r3, #1]
 8013f56:	e000      	b.n	8013f5a <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013f58:	2301      	movs	r3, #1
}
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	3710      	adds	r7, #16
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}
 8013f62:	bf00      	nop
 8013f64:	20001c08 	.word	0x20001c08

08013f68 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b084      	sub	sp, #16
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	4603      	mov	r3, r0
 8013f70:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013f72:	4b16      	ldr	r3, [pc, #88]	@ (8013fcc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013f74:	685b      	ldr	r3, [r3, #4]
 8013f76:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013f78:	4a14      	ldr	r2, [pc, #80]	@ (8013fcc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013f7a:	79fb      	ldrb	r3, [r7, #7]
 8013f7c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013f80:	4b12      	ldr	r3, [pc, #72]	@ (8013fcc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013f82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f86:	4618      	mov	r0, r3
 8013f88:	f7ff fec6 	bl	8013d18 <IsListEmpty>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	f083 0301 	eor.w	r3, r3, #1
 8013f92:	b2db      	uxtb	r3, r3
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d015      	beq.n	8013fc4 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	79fa      	ldrb	r2, [r7, #7]
 8013f9c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	78db      	ldrb	r3, [r3, #3]
 8013fa2:	f083 0301 	eor.w	r3, r3, #1
 8013fa6:	b2db      	uxtb	r3, r3
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d002      	beq.n	8013fb2 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	2201      	movs	r2, #1
 8013fb0:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013fb2:	68f8      	ldr	r0, [r7, #12]
 8013fb4:	f7ff fe98 	bl	8013ce8 <IncreaseBufferPointer>
 8013fb8:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013fba:	4b04      	ldr	r3, [pc, #16]	@ (8013fcc <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013fbc:	689b      	ldr	r3, [r3, #8]
 8013fbe:	68fa      	ldr	r2, [r7, #12]
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d1e9      	bne.n	8013f98 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013fc4:	bf00      	nop
 8013fc6:	3710      	adds	r7, #16
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}
 8013fcc:	20001c08 	.word	0x20001c08

08013fd0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013fda:	4b09      	ldr	r3, [pc, #36]	@ (8014000 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013fdc:	6859      	ldr	r1, [r3, #4]
 8013fde:	4b08      	ldr	r3, [pc, #32]	@ (8014000 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013fe0:	689a      	ldr	r2, [r3, #8]
 8013fe2:	79fb      	ldrb	r3, [r7, #7]
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f7ff feb7 	bl	8013d58 <GetElement>
 8013fea:	4603      	mov	r3, r0
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d001      	beq.n	8013ff4 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013ff0:	2301      	movs	r3, #1
 8013ff2:	e000      	b.n	8013ff6 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013ff4:	2300      	movs	r3, #0
}
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	3708      	adds	r7, #8
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bd80      	pop	{r7, pc}
 8013ffe:	bf00      	nop
 8014000:	20001c08 	.word	0x20001c08

08014004 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b084      	sub	sp, #16
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 801400c:	4b22      	ldr	r3, [pc, #136]	@ (8014098 <LoRaMacConfirmQueueHandleCb+0x94>)
 801400e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014012:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8014014:	2300      	movs	r3, #0
 8014016:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8014018:	2300      	movs	r3, #0
 801401a:	73fb      	strb	r3, [r7, #15]
 801401c:	e032      	b.n	8014084 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 801401e:	4b1e      	ldr	r3, [pc, #120]	@ (8014098 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014020:	685b      	ldr	r3, [r3, #4]
 8014022:	781a      	ldrb	r2, [r3, #0]
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8014028:	4b1b      	ldr	r3, [pc, #108]	@ (8014098 <LoRaMacConfirmQueueHandleCb+0x94>)
 801402a:	685b      	ldr	r3, [r3, #4]
 801402c:	785a      	ldrb	r2, [r3, #1]
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8014032:	4b19      	ldr	r3, [pc, #100]	@ (8014098 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014034:	685b      	ldr	r3, [r3, #4]
 8014036:	789b      	ldrb	r3, [r3, #2]
 8014038:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801403a:	7b7b      	ldrb	r3, [r7, #13]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d005      	beq.n	801404c <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8014040:	4b15      	ldr	r3, [pc, #84]	@ (8014098 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	689b      	ldr	r3, [r3, #8]
 8014046:	6878      	ldr	r0, [r7, #4]
 8014048:	4798      	blx	r3
 801404a:	e00b      	b.n	8014064 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801404c:	4b12      	ldr	r3, [pc, #72]	@ (8014098 <LoRaMacConfirmQueueHandleCb+0x94>)
 801404e:	685b      	ldr	r3, [r3, #4]
 8014050:	781b      	ldrb	r3, [r3, #0]
 8014052:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8014054:	4b10      	ldr	r3, [pc, #64]	@ (8014098 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014056:	685b      	ldr	r3, [r3, #4]
 8014058:	785b      	ldrb	r3, [r3, #1]
 801405a:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801405c:	4b0e      	ldr	r3, [pc, #56]	@ (8014098 <LoRaMacConfirmQueueHandleCb+0x94>)
 801405e:	685b      	ldr	r3, [r3, #4]
 8014060:	78db      	ldrb	r3, [r3, #3]
 8014062:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8014064:	f7ff ff06 	bl	8013e74 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8014068:	7b7b      	ldrb	r3, [r7, #13]
 801406a:	f083 0301 	eor.w	r3, r3, #1
 801406e:	b2db      	uxtb	r3, r3
 8014070:	2b00      	cmp	r3, #0
 8014072:	d004      	beq.n	801407e <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8014074:	f107 0308 	add.w	r3, r7, #8
 8014078:	4618      	mov	r0, r3
 801407a:	f7ff fec1 	bl	8013e00 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801407e:	7bfb      	ldrb	r3, [r7, #15]
 8014080:	3301      	adds	r3, #1
 8014082:	73fb      	strb	r3, [r7, #15]
 8014084:	7bfa      	ldrb	r2, [r7, #15]
 8014086:	7bbb      	ldrb	r3, [r7, #14]
 8014088:	429a      	cmp	r2, r3
 801408a:	d3c8      	bcc.n	801401e <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 801408c:	bf00      	nop
 801408e:	bf00      	nop
 8014090:	3710      	adds	r7, #16
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}
 8014096:	bf00      	nop
 8014098:	20001c08 	.word	0x20001c08

0801409c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801409c:	b480      	push	{r7}
 801409e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80140a0:	4b03      	ldr	r3, [pc, #12]	@ (80140b0 <LoRaMacConfirmQueueGetCnt+0x14>)
 80140a2:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bc80      	pop	{r7}
 80140ac:	4770      	bx	lr
 80140ae:	bf00      	nop
 80140b0:	20001c08 	.word	0x20001c08

080140b4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80140b8:	4b06      	ldr	r3, [pc, #24]	@ (80140d4 <LoRaMacConfirmQueueIsFull+0x20>)
 80140ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80140be:	4618      	mov	r0, r3
 80140c0:	f7ff fe3a 	bl	8013d38 <IsListFull>
 80140c4:	4603      	mov	r3, r0
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d001      	beq.n	80140ce <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80140ca:	2301      	movs	r3, #1
 80140cc:	e000      	b.n	80140d0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80140ce:	2300      	movs	r3, #0
    }
}
 80140d0:	4618      	mov	r0, r3
 80140d2:	bd80      	pop	{r7, pc}
 80140d4:	20001c08 	.word	0x20001c08

080140d8 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b08e      	sub	sp, #56	@ 0x38
 80140dc:	af00      	add	r7, sp, #0
 80140de:	60f8      	str	r0, [r7, #12]
 80140e0:	607b      	str	r3, [r7, #4]
 80140e2:	460b      	mov	r3, r1
 80140e4:	817b      	strh	r3, [r7, #10]
 80140e6:	4613      	mov	r3, r2
 80140e8:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d101      	bne.n	80140f4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80140f0:	2309      	movs	r3, #9
 80140f2:	e086      	b.n	8014202 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80140f4:	2300      	movs	r3, #0
 80140f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 80140fa:	2301      	movs	r3, #1
 80140fc:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 80140fe:	2300      	movs	r3, #0
 8014100:	623b      	str	r3, [r7, #32]
 8014102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014106:	2200      	movs	r2, #0
 8014108:	601a      	str	r2, [r3, #0]
 801410a:	605a      	str	r2, [r3, #4]
 801410c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 801410e:	2300      	movs	r3, #0
 8014110:	613b      	str	r3, [r7, #16]
 8014112:	f107 0314 	add.w	r3, r7, #20
 8014116:	2200      	movs	r2, #0
 8014118:	601a      	str	r2, [r3, #0]
 801411a:	605a      	str	r2, [r3, #4]
 801411c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 801411e:	2301      	movs	r3, #1
 8014120:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8014122:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8014126:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	b2db      	uxtb	r3, r3
 801412c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	0a1b      	lsrs	r3, r3, #8
 8014132:	b2db      	uxtb	r3, r3
 8014134:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	0c1b      	lsrs	r3, r3, #16
 801413a:	b2db      	uxtb	r3, r3
 801413c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	0e1b      	lsrs	r3, r3, #24
 8014142:	b2db      	uxtb	r3, r3
 8014144:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8014146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014148:	b2db      	uxtb	r3, r3
 801414a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 801414c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801414e:	0a1b      	lsrs	r3, r3, #8
 8014150:	b2db      	uxtb	r3, r3
 8014152:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8014154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014156:	0c1b      	lsrs	r3, r3, #16
 8014158:	b2db      	uxtb	r3, r3
 801415a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801415c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801415e:	0e1b      	lsrs	r3, r3, #24
 8014160:	b2db      	uxtb	r3, r3
 8014162:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8014164:	e048      	b.n	80141f8 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8014166:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014168:	b2db      	uxtb	r3, r3
 801416a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 801416c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801416e:	3301      	adds	r3, #1
 8014170:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8014172:	f107 0320 	add.w	r3, r7, #32
 8014176:	7a7a      	ldrb	r2, [r7, #9]
 8014178:	f107 0010 	add.w	r0, r7, #16
 801417c:	2110      	movs	r1, #16
 801417e:	f7f8 fce2 	bl	800cb46 <SecureElementAesEncrypt>
 8014182:	4603      	mov	r3, r0
 8014184:	2b00      	cmp	r3, #0
 8014186:	d001      	beq.n	801418c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014188:	230e      	movs	r3, #14
 801418a:	e03a      	b.n	8014202 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801418c:	2300      	movs	r3, #0
 801418e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8014192:	e01e      	b.n	80141d2 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8014194:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8014198:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801419c:	4413      	add	r3, r2
 801419e:	461a      	mov	r2, r3
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	4413      	add	r3, r2
 80141a4:	7819      	ldrb	r1, [r3, #0]
 80141a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80141aa:	3338      	adds	r3, #56	@ 0x38
 80141ac:	443b      	add	r3, r7
 80141ae:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80141b2:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80141b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80141ba:	4403      	add	r3, r0
 80141bc:	4618      	mov	r0, r3
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	4403      	add	r3, r0
 80141c2:	404a      	eors	r2, r1
 80141c4:	b2d2      	uxtb	r2, r2
 80141c6:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80141c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80141cc:	3301      	adds	r3, #1
 80141ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80141d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80141d6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80141da:	2a10      	cmp	r2, #16
 80141dc:	bfa8      	it	ge
 80141de:	2210      	movge	r2, #16
 80141e0:	b212      	sxth	r2, r2
 80141e2:	4293      	cmp	r3, r2
 80141e4:	dbd6      	blt.n	8014194 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80141e6:	897b      	ldrh	r3, [r7, #10]
 80141e8:	3b10      	subs	r3, #16
 80141ea:	b29b      	uxth	r3, r3
 80141ec:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80141ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80141f2:	3310      	adds	r3, #16
 80141f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 80141f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	dcb2      	bgt.n	8014166 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014200:	2300      	movs	r3, #0
}
 8014202:	4618      	mov	r0, r3
 8014204:	3738      	adds	r7, #56	@ 0x38
 8014206:	46bd      	mov	sp, r7
 8014208:	bd80      	pop	{r7, pc}

0801420a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801420a:	b490      	push	{r4, r7}
 801420c:	b082      	sub	sp, #8
 801420e:	af00      	add	r7, sp, #0
 8014210:	4604      	mov	r4, r0
 8014212:	4608      	mov	r0, r1
 8014214:	4611      	mov	r1, r2
 8014216:	461a      	mov	r2, r3
 8014218:	4623      	mov	r3, r4
 801421a:	80fb      	strh	r3, [r7, #6]
 801421c:	4603      	mov	r3, r0
 801421e:	717b      	strb	r3, [r7, #5]
 8014220:	460b      	mov	r3, r1
 8014222:	713b      	strb	r3, [r7, #4]
 8014224:	4613      	mov	r3, r2
 8014226:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8014228:	69bb      	ldr	r3, [r7, #24]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d101      	bne.n	8014232 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801422e:	2309      	movs	r3, #9
 8014230:	e04e      	b.n	80142d0 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8014232:	69bb      	ldr	r3, [r7, #24]
 8014234:	2249      	movs	r2, #73	@ 0x49
 8014236:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8014238:	69bb      	ldr	r3, [r7, #24]
 801423a:	3301      	adds	r3, #1
 801423c:	2200      	movs	r2, #0
 801423e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014240:	69bb      	ldr	r3, [r7, #24]
 8014242:	3302      	adds	r3, #2
 8014244:	2200      	movs	r2, #0
 8014246:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014248:	69bb      	ldr	r3, [r7, #24]
 801424a:	3303      	adds	r3, #3
 801424c:	2200      	movs	r2, #0
 801424e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014250:	69bb      	ldr	r3, [r7, #24]
 8014252:	3304      	adds	r3, #4
 8014254:	2200      	movs	r2, #0
 8014256:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014258:	69bb      	ldr	r3, [r7, #24]
 801425a:	3305      	adds	r3, #5
 801425c:	78fa      	ldrb	r2, [r7, #3]
 801425e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014260:	69bb      	ldr	r3, [r7, #24]
 8014262:	3306      	adds	r3, #6
 8014264:	693a      	ldr	r2, [r7, #16]
 8014266:	b2d2      	uxtb	r2, r2
 8014268:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801426a:	693b      	ldr	r3, [r7, #16]
 801426c:	0a1a      	lsrs	r2, r3, #8
 801426e:	69bb      	ldr	r3, [r7, #24]
 8014270:	3307      	adds	r3, #7
 8014272:	b2d2      	uxtb	r2, r2
 8014274:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014276:	693b      	ldr	r3, [r7, #16]
 8014278:	0c1a      	lsrs	r2, r3, #16
 801427a:	69bb      	ldr	r3, [r7, #24]
 801427c:	3308      	adds	r3, #8
 801427e:	b2d2      	uxtb	r2, r2
 8014280:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8014282:	693b      	ldr	r3, [r7, #16]
 8014284:	0e1a      	lsrs	r2, r3, #24
 8014286:	69bb      	ldr	r3, [r7, #24]
 8014288:	3309      	adds	r3, #9
 801428a:	b2d2      	uxtb	r2, r2
 801428c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801428e:	69bb      	ldr	r3, [r7, #24]
 8014290:	330a      	adds	r3, #10
 8014292:	697a      	ldr	r2, [r7, #20]
 8014294:	b2d2      	uxtb	r2, r2
 8014296:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014298:	697b      	ldr	r3, [r7, #20]
 801429a:	0a1a      	lsrs	r2, r3, #8
 801429c:	69bb      	ldr	r3, [r7, #24]
 801429e:	330b      	adds	r3, #11
 80142a0:	b2d2      	uxtb	r2, r2
 80142a2:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80142a4:	697b      	ldr	r3, [r7, #20]
 80142a6:	0c1a      	lsrs	r2, r3, #16
 80142a8:	69bb      	ldr	r3, [r7, #24]
 80142aa:	330c      	adds	r3, #12
 80142ac:	b2d2      	uxtb	r2, r2
 80142ae:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80142b0:	697b      	ldr	r3, [r7, #20]
 80142b2:	0e1a      	lsrs	r2, r3, #24
 80142b4:	69bb      	ldr	r3, [r7, #24]
 80142b6:	330d      	adds	r3, #13
 80142b8:	b2d2      	uxtb	r2, r2
 80142ba:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80142bc:	69bb      	ldr	r3, [r7, #24]
 80142be:	330e      	adds	r3, #14
 80142c0:	2200      	movs	r2, #0
 80142c2:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80142c4:	69bb      	ldr	r3, [r7, #24]
 80142c6:	330f      	adds	r3, #15
 80142c8:	88fa      	ldrh	r2, [r7, #6]
 80142ca:	b2d2      	uxtb	r2, r2
 80142cc:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80142ce:	2300      	movs	r3, #0
}
 80142d0:	4618      	mov	r0, r3
 80142d2:	3708      	adds	r7, #8
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bc90      	pop	{r4, r7}
 80142d8:	4770      	bx	lr

080142da <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80142da:	b590      	push	{r4, r7, lr}
 80142dc:	b08b      	sub	sp, #44	@ 0x2c
 80142de:	af04      	add	r7, sp, #16
 80142e0:	6078      	str	r0, [r7, #4]
 80142e2:	4608      	mov	r0, r1
 80142e4:	4611      	mov	r1, r2
 80142e6:	461a      	mov	r2, r3
 80142e8:	4603      	mov	r3, r0
 80142ea:	807b      	strh	r3, [r7, #2]
 80142ec:	460b      	mov	r3, r1
 80142ee:	707b      	strb	r3, [r7, #1]
 80142f0:	4613      	mov	r3, r2
 80142f2:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d002      	beq.n	8014300 <ComputeCmacB0+0x26>
 80142fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d101      	bne.n	8014304 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014300:	2309      	movs	r3, #9
 8014302:	e024      	b.n	801434e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014304:	887b      	ldrh	r3, [r7, #2]
 8014306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801430a:	d901      	bls.n	8014310 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801430c:	230d      	movs	r3, #13
 801430e:	e01e      	b.n	801434e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014310:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8014314:	783a      	ldrb	r2, [r7, #0]
 8014316:	7879      	ldrb	r1, [r7, #1]
 8014318:	8878      	ldrh	r0, [r7, #2]
 801431a:	f107 0308 	add.w	r3, r7, #8
 801431e:	9302      	str	r3, [sp, #8]
 8014320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014322:	9301      	str	r3, [sp, #4]
 8014324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014326:	9300      	str	r3, [sp, #0]
 8014328:	4623      	mov	r3, r4
 801432a:	f7ff ff6e 	bl	801420a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801432e:	7879      	ldrb	r1, [r7, #1]
 8014330:	887a      	ldrh	r2, [r7, #2]
 8014332:	f107 0008 	add.w	r0, r7, #8
 8014336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014338:	9300      	str	r3, [sp, #0]
 801433a:	460b      	mov	r3, r1
 801433c:	6879      	ldr	r1, [r7, #4]
 801433e:	f7f8 fbb5 	bl	800caac <SecureElementComputeAesCmac>
 8014342:	4603      	mov	r3, r0
 8014344:	2b00      	cmp	r3, #0
 8014346:	d001      	beq.n	801434c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014348:	230e      	movs	r3, #14
 801434a:	e000      	b.n	801434e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801434c:	2300      	movs	r3, #0
}
 801434e:	4618      	mov	r0, r3
 8014350:	371c      	adds	r7, #28
 8014352:	46bd      	mov	sp, r7
 8014354:	bd90      	pop	{r4, r7, pc}

08014356 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014356:	b590      	push	{r4, r7, lr}
 8014358:	b0cd      	sub	sp, #308	@ 0x134
 801435a:	af04      	add	r7, sp, #16
 801435c:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8014360:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8014364:	6020      	str	r0, [r4, #0]
 8014366:	460c      	mov	r4, r1
 8014368:	4610      	mov	r0, r2
 801436a:	4619      	mov	r1, r3
 801436c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014370:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014374:	4622      	mov	r2, r4
 8014376:	801a      	strh	r2, [r3, #0]
 8014378:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801437c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8014380:	4602      	mov	r2, r0
 8014382:	701a      	strb	r2, [r3, #0]
 8014384:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014388:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801438c:	460a      	mov	r2, r1
 801438e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014390:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014394:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d101      	bne.n	80143a2 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801439e:	2309      	movs	r3, #9
 80143a0:	e063      	b.n	801446a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80143a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80143a6:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80143aa:	881b      	ldrh	r3, [r3, #0]
 80143ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80143b0:	d901      	bls.n	80143b6 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80143b2:	230d      	movs	r3, #13
 80143b4:	e059      	b.n	801446a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80143b6:	f107 030c 	add.w	r3, r7, #12
 80143ba:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80143be:	2100      	movs	r1, #0
 80143c0:	4618      	mov	r0, r3
 80143c2:	f003 fb2f 	bl	8017a24 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80143c6:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 80143ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80143ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80143d2:	781a      	ldrb	r2, [r3, #0]
 80143d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80143d8:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80143dc:	7819      	ldrb	r1, [r3, #0]
 80143de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80143e2:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80143e6:	8818      	ldrh	r0, [r3, #0]
 80143e8:	f107 030c 	add.w	r3, r7, #12
 80143ec:	9302      	str	r3, [sp, #8]
 80143ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80143f2:	9301      	str	r3, [sp, #4]
 80143f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80143f8:	9300      	str	r3, [sp, #0]
 80143fa:	4623      	mov	r3, r4
 80143fc:	f7ff ff05 	bl	801420a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8014400:	f107 030c 	add.w	r3, r7, #12
 8014404:	3310      	adds	r3, #16
 8014406:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801440a:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 801440e:	8812      	ldrh	r2, [r2, #0]
 8014410:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8014414:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8014418:	6809      	ldr	r1, [r1, #0]
 801441a:	4618      	mov	r0, r3
 801441c:	f003 fac7 	bl	80179ae <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8014420:	2306      	movs	r3, #6
 8014422:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8014426:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801442a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801442e:	881b      	ldrh	r3, [r3, #0]
 8014430:	3310      	adds	r3, #16
 8014432:	b299      	uxth	r1, r3
 8014434:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014438:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801443c:	781b      	ldrb	r3, [r3, #0]
 801443e:	f107 000c 	add.w	r0, r7, #12
 8014442:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8014446:	f7f8 fb4f 	bl	800cae8 <SecureElementVerifyAesCmac>
 801444a:	4603      	mov	r3, r0
 801444c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014450:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8014454:	2b00      	cmp	r3, #0
 8014456:	d101      	bne.n	801445c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014458:	2300      	movs	r3, #0
 801445a:	e006      	b.n	801446a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801445c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8014460:	2b01      	cmp	r3, #1
 8014462:	d101      	bne.n	8014468 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014464:	2301      	movs	r3, #1
 8014466:	e000      	b.n	801446a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014468:	230e      	movs	r3, #14
}
 801446a:	4618      	mov	r0, r3
 801446c:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8014470:	46bd      	mov	sp, r7
 8014472:	bd90      	pop	{r4, r7, pc}

08014474 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014474:	b480      	push	{r7}
 8014476:	b085      	sub	sp, #20
 8014478:	af00      	add	r7, sp, #0
 801447a:	4603      	mov	r3, r0
 801447c:	6039      	str	r1, [r7, #0]
 801447e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014480:	2300      	movs	r3, #0
 8014482:	73fb      	strb	r3, [r7, #15]
 8014484:	e011      	b.n	80144aa <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014486:	7bfb      	ldrb	r3, [r7, #15]
 8014488:	4a0c      	ldr	r2, [pc, #48]	@ (80144bc <GetKeyAddrItem+0x48>)
 801448a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801448e:	79fa      	ldrb	r2, [r7, #7]
 8014490:	429a      	cmp	r2, r3
 8014492:	d107      	bne.n	80144a4 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8014494:	7bfb      	ldrb	r3, [r7, #15]
 8014496:	009b      	lsls	r3, r3, #2
 8014498:	4a08      	ldr	r2, [pc, #32]	@ (80144bc <GetKeyAddrItem+0x48>)
 801449a:	441a      	add	r2, r3
 801449c:	683b      	ldr	r3, [r7, #0]
 801449e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80144a0:	2300      	movs	r3, #0
 80144a2:	e006      	b.n	80144b2 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80144a4:	7bfb      	ldrb	r3, [r7, #15]
 80144a6:	3301      	adds	r3, #1
 80144a8:	73fb      	strb	r3, [r7, #15]
 80144aa:	7bfb      	ldrb	r3, [r7, #15]
 80144ac:	2b01      	cmp	r3, #1
 80144ae:	d9ea      	bls.n	8014486 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80144b0:	230b      	movs	r3, #11
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3714      	adds	r7, #20
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bc80      	pop	{r7}
 80144ba:	4770      	bx	lr
 80144bc:	20000120 	.word	0x20000120

080144c0 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b088      	sub	sp, #32
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	60b9      	str	r1, [r7, #8]
 80144c8:	607a      	str	r2, [r7, #4]
 80144ca:	461a      	mov	r2, r3
 80144cc:	4603      	mov	r3, r0
 80144ce:	73fb      	strb	r3, [r7, #15]
 80144d0:	4613      	mov	r3, r2
 80144d2:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80144d4:	2300      	movs	r3, #0
 80144d6:	613b      	str	r3, [r7, #16]
 80144d8:	f107 0314 	add.w	r3, r7, #20
 80144dc:	2200      	movs	r2, #0
 80144de:	601a      	str	r2, [r3, #0]
 80144e0:	605a      	str	r2, [r3, #4]
 80144e2:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 80144e4:	7bfb      	ldrb	r3, [r7, #15]
 80144e6:	2b02      	cmp	r3, #2
 80144e8:	d002      	beq.n	80144f0 <DeriveSessionKey10x+0x30>
 80144ea:	2b03      	cmp	r3, #3
 80144ec:	d003      	beq.n	80144f6 <DeriveSessionKey10x+0x36>
 80144ee:	e005      	b.n	80144fc <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80144f0:	2301      	movs	r3, #1
 80144f2:	743b      	strb	r3, [r7, #16]
            break;
 80144f4:	e004      	b.n	8014500 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80144f6:	2302      	movs	r3, #2
 80144f8:	743b      	strb	r3, [r7, #16]
            break;
 80144fa:	e001      	b.n	8014500 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80144fc:	230a      	movs	r3, #10
 80144fe:	e02a      	b.n	8014556 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	b2db      	uxtb	r3, r3
 8014504:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8014506:	68bb      	ldr	r3, [r7, #8]
 8014508:	0a1b      	lsrs	r3, r3, #8
 801450a:	b2db      	uxtb	r3, r3
 801450c:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	0c1b      	lsrs	r3, r3, #16
 8014512:	b2db      	uxtb	r3, r3
 8014514:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	b2db      	uxtb	r3, r3
 801451a:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	0a1b      	lsrs	r3, r3, #8
 8014520:	b2db      	uxtb	r3, r3
 8014522:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	0c1b      	lsrs	r3, r3, #16
 8014528:	b2db      	uxtb	r3, r3
 801452a:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801452c:	89bb      	ldrh	r3, [r7, #12]
 801452e:	b2db      	uxtb	r3, r3
 8014530:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8014532:	89bb      	ldrh	r3, [r7, #12]
 8014534:	0a1b      	lsrs	r3, r3, #8
 8014536:	b29b      	uxth	r3, r3
 8014538:	b2db      	uxtb	r3, r3
 801453a:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801453c:	7bfa      	ldrb	r2, [r7, #15]
 801453e:	f107 0310 	add.w	r3, r7, #16
 8014542:	2101      	movs	r1, #1
 8014544:	4618      	mov	r0, r3
 8014546:	f7f8 fb65 	bl	800cc14 <SecureElementDeriveAndStoreKey>
 801454a:	4603      	mov	r3, r0
 801454c:	2b00      	cmp	r3, #0
 801454e:	d001      	beq.n	8014554 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014550:	230e      	movs	r3, #14
 8014552:	e000      	b.n	8014556 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014554:	2300      	movs	r3, #0
}
 8014556:	4618      	mov	r0, r3
 8014558:	3720      	adds	r7, #32
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
	...

08014560 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014560:	b480      	push	{r7}
 8014562:	b083      	sub	sp, #12
 8014564:	af00      	add	r7, sp, #0
 8014566:	4603      	mov	r3, r0
 8014568:	6039      	str	r1, [r7, #0]
 801456a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d101      	bne.n	8014576 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014572:	2309      	movs	r3, #9
 8014574:	e03b      	b.n	80145ee <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8014576:	79fb      	ldrb	r3, [r7, #7]
 8014578:	3b01      	subs	r3, #1
 801457a:	2b03      	cmp	r3, #3
 801457c:	d834      	bhi.n	80145e8 <GetLastFcntDown+0x88>
 801457e:	a201      	add	r2, pc, #4	@ (adr r2, 8014584 <GetLastFcntDown+0x24>)
 8014580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014584:	08014595 	.word	0x08014595
 8014588:	080145ad 	.word	0x080145ad
 801458c:	080145c5 	.word	0x080145c5
 8014590:	080145dd 	.word	0x080145dd
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8014594:	4b18      	ldr	r3, [pc, #96]	@ (80145f8 <GetLastFcntDown+0x98>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	691a      	ldr	r2, [r3, #16]
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 801459e:	4b16      	ldr	r3, [pc, #88]	@ (80145f8 <GetLastFcntDown+0x98>)
 80145a0:	681a      	ldr	r2, [r3, #0]
 80145a2:	4b15      	ldr	r3, [pc, #84]	@ (80145f8 <GetLastFcntDown+0x98>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	6912      	ldr	r2, [r2, #16]
 80145a8:	621a      	str	r2, [r3, #32]
            break;
 80145aa:	e01f      	b.n	80145ec <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80145ac:	4b12      	ldr	r3, [pc, #72]	@ (80145f8 <GetLastFcntDown+0x98>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	695a      	ldr	r2, [r3, #20]
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 80145b6:	4b10      	ldr	r3, [pc, #64]	@ (80145f8 <GetLastFcntDown+0x98>)
 80145b8:	681a      	ldr	r2, [r3, #0]
 80145ba:	4b0f      	ldr	r3, [pc, #60]	@ (80145f8 <GetLastFcntDown+0x98>)
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	6952      	ldr	r2, [r2, #20]
 80145c0:	621a      	str	r2, [r3, #32]
            break;
 80145c2:	e013      	b.n	80145ec <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80145c4:	4b0c      	ldr	r3, [pc, #48]	@ (80145f8 <GetLastFcntDown+0x98>)
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	699a      	ldr	r2, [r3, #24]
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80145ce:	4b0a      	ldr	r3, [pc, #40]	@ (80145f8 <GetLastFcntDown+0x98>)
 80145d0:	681a      	ldr	r2, [r3, #0]
 80145d2:	4b09      	ldr	r3, [pc, #36]	@ (80145f8 <GetLastFcntDown+0x98>)
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	6992      	ldr	r2, [r2, #24]
 80145d8:	621a      	str	r2, [r3, #32]
            break;
 80145da:	e007      	b.n	80145ec <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80145dc:	4b06      	ldr	r3, [pc, #24]	@ (80145f8 <GetLastFcntDown+0x98>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	69da      	ldr	r2, [r3, #28]
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	601a      	str	r2, [r3, #0]
            break;
 80145e6:	e001      	b.n	80145ec <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80145e8:	2305      	movs	r3, #5
 80145ea:	e000      	b.n	80145ee <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80145ec:	2300      	movs	r3, #0
}
 80145ee:	4618      	mov	r0, r3
 80145f0:	370c      	adds	r7, #12
 80145f2:	46bd      	mov	sp, r7
 80145f4:	bc80      	pop	{r7}
 80145f6:	4770      	bx	lr
 80145f8:	20001c2c 	.word	0x20001c2c

080145fc <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
 8014602:	4603      	mov	r3, r0
 8014604:	6039      	str	r1, [r7, #0]
 8014606:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8014608:	2300      	movs	r3, #0
 801460a:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 801460c:	f107 020c 	add.w	r2, r7, #12
 8014610:	79fb      	ldrb	r3, [r7, #7]
 8014612:	4611      	mov	r1, r2
 8014614:	4618      	mov	r0, r3
 8014616:	f7ff ffa3 	bl	8014560 <GetLastFcntDown>
 801461a:	4603      	mov	r3, r0
 801461c:	2b00      	cmp	r3, #0
 801461e:	d001      	beq.n	8014624 <CheckFCntDown+0x28>
    {
        return false;
 8014620:	2300      	movs	r3, #0
 8014622:	e00a      	b.n	801463a <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	683a      	ldr	r2, [r7, #0]
 8014628:	429a      	cmp	r2, r3
 801462a:	d803      	bhi.n	8014634 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 801462c:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801462e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014632:	d101      	bne.n	8014638 <CheckFCntDown+0x3c>
    {
        return true;
 8014634:	2301      	movs	r3, #1
 8014636:	e000      	b.n	801463a <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8014638:	2300      	movs	r3, #0
    }
}
 801463a:	4618      	mov	r0, r3
 801463c:	3710      	adds	r7, #16
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}
	...

08014644 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014644:	b480      	push	{r7}
 8014646:	b083      	sub	sp, #12
 8014648:	af00      	add	r7, sp, #0
 801464a:	4603      	mov	r3, r0
 801464c:	6039      	str	r1, [r7, #0]
 801464e:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8014650:	79fb      	ldrb	r3, [r7, #7]
 8014652:	3b01      	subs	r3, #1
 8014654:	2b03      	cmp	r3, #3
 8014656:	d81f      	bhi.n	8014698 <UpdateFCntDown+0x54>
 8014658:	a201      	add	r2, pc, #4	@ (adr r2, 8014660 <UpdateFCntDown+0x1c>)
 801465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801465e:	bf00      	nop
 8014660:	08014671 	.word	0x08014671
 8014664:	0801467b 	.word	0x0801467b
 8014668:	08014685 	.word	0x08014685
 801466c:	0801468f 	.word	0x0801468f
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8014670:	4b0c      	ldr	r3, [pc, #48]	@ (80146a4 <UpdateFCntDown+0x60>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	683a      	ldr	r2, [r7, #0]
 8014676:	611a      	str	r2, [r3, #16]
            break;
 8014678:	e00f      	b.n	801469a <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801467a:	4b0a      	ldr	r3, [pc, #40]	@ (80146a4 <UpdateFCntDown+0x60>)
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	683a      	ldr	r2, [r7, #0]
 8014680:	615a      	str	r2, [r3, #20]
            break;
 8014682:	e00a      	b.n	801469a <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014684:	4b07      	ldr	r3, [pc, #28]	@ (80146a4 <UpdateFCntDown+0x60>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	683a      	ldr	r2, [r7, #0]
 801468a:	619a      	str	r2, [r3, #24]
            break;
 801468c:	e005      	b.n	801469a <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801468e:	4b05      	ldr	r3, [pc, #20]	@ (80146a4 <UpdateFCntDown+0x60>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	683a      	ldr	r2, [r7, #0]
 8014694:	61da      	str	r2, [r3, #28]
            break;
 8014696:	e000      	b.n	801469a <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8014698:	bf00      	nop
    }
}
 801469a:	bf00      	nop
 801469c:	370c      	adds	r7, #12
 801469e:	46bd      	mov	sp, r7
 80146a0:	bc80      	pop	{r7}
 80146a2:	4770      	bx	lr
 80146a4:	20001c2c 	.word	0x20001c2c

080146a8 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80146a8:	b480      	push	{r7}
 80146aa:	b083      	sub	sp, #12
 80146ac:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80146ae:	4b18      	ldr	r3, [pc, #96]	@ (8014710 <ResetFCnts+0x68>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	2200      	movs	r2, #0
 80146b4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80146b6:	4b16      	ldr	r3, [pc, #88]	@ (8014710 <ResetFCnts+0x68>)
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	f04f 32ff 	mov.w	r2, #4294967295
 80146be:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80146c0:	4b13      	ldr	r3, [pc, #76]	@ (8014710 <ResetFCnts+0x68>)
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	f04f 32ff 	mov.w	r2, #4294967295
 80146c8:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80146ca:	4b11      	ldr	r3, [pc, #68]	@ (8014710 <ResetFCnts+0x68>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	f04f 32ff 	mov.w	r2, #4294967295
 80146d2:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80146d4:	4b0e      	ldr	r3, [pc, #56]	@ (8014710 <ResetFCnts+0x68>)
 80146d6:	681a      	ldr	r2, [r3, #0]
 80146d8:	4b0d      	ldr	r3, [pc, #52]	@ (8014710 <ResetFCnts+0x68>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	6992      	ldr	r2, [r2, #24]
 80146de:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80146e0:	2300      	movs	r3, #0
 80146e2:	607b      	str	r3, [r7, #4]
 80146e4:	e00b      	b.n	80146fe <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80146e6:	4b0a      	ldr	r3, [pc, #40]	@ (8014710 <ResetFCnts+0x68>)
 80146e8:	681a      	ldr	r2, [r3, #0]
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	3306      	adds	r3, #6
 80146ee:	009b      	lsls	r3, r3, #2
 80146f0:	4413      	add	r3, r2
 80146f2:	f04f 32ff 	mov.w	r2, #4294967295
 80146f6:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	3301      	adds	r3, #1
 80146fc:	607b      	str	r3, [r7, #4]
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	2b00      	cmp	r3, #0
 8014702:	ddf0      	ble.n	80146e6 <ResetFCnts+0x3e>
    }
}
 8014704:	bf00      	nop
 8014706:	bf00      	nop
 8014708:	370c      	adds	r7, #12
 801470a:	46bd      	mov	sp, r7
 801470c:	bc80      	pop	{r7}
 801470e:	4770      	bx	lr
 8014710:	20001c2c 	.word	0x20001c2c

08014714 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d101      	bne.n	8014726 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8014722:	2308      	movs	r3, #8
 8014724:	e01c      	b.n	8014760 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8014726:	4a10      	ldr	r2, [pc, #64]	@ (8014768 <LoRaMacCryptoInit+0x54>)
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 801472c:	4b0e      	ldr	r3, [pc, #56]	@ (8014768 <LoRaMacCryptoInit+0x54>)
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	2228      	movs	r2, #40	@ 0x28
 8014732:	2100      	movs	r1, #0
 8014734:	4618      	mov	r0, r3
 8014736:	f003 f975 	bl	8017a24 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801473a:	4b0b      	ldr	r3, [pc, #44]	@ (8014768 <LoRaMacCryptoInit+0x54>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	2201      	movs	r2, #1
 8014740:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8014742:	4b09      	ldr	r3, [pc, #36]	@ (8014768 <LoRaMacCryptoInit+0x54>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	2201      	movs	r2, #1
 8014748:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801474a:	4b07      	ldr	r3, [pc, #28]	@ (8014768 <LoRaMacCryptoInit+0x54>)
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	2201      	movs	r2, #1
 8014750:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8014752:	4b05      	ldr	r3, [pc, #20]	@ (8014768 <LoRaMacCryptoInit+0x54>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	2200      	movs	r2, #0
 8014758:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801475a:	f7ff ffa5 	bl	80146a8 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801475e:	2300      	movs	r3, #0
}
 8014760:	4618      	mov	r0, r3
 8014762:	3708      	adds	r7, #8
 8014764:	46bd      	mov	sp, r7
 8014766:	bd80      	pop	{r7, pc}
 8014768:	20001c2c 	.word	0x20001c2c

0801476c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801476c:	b480      	push	{r7}
 801476e:	b083      	sub	sp, #12
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8014774:	4b04      	ldr	r3, [pc, #16]	@ (8014788 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	687a      	ldr	r2, [r7, #4]
 801477a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801477c:	2300      	movs	r3, #0
}
 801477e:	4618      	mov	r0, r3
 8014780:	370c      	adds	r7, #12
 8014782:	46bd      	mov	sp, r7
 8014784:	bc80      	pop	{r7}
 8014786:	4770      	bx	lr
 8014788:	20001c2c 	.word	0x20001c2c

0801478c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 801478c:	b480      	push	{r7}
 801478e:	b083      	sub	sp, #12
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d101      	bne.n	801479e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801479a:	2309      	movs	r3, #9
 801479c:	e006      	b.n	80147ac <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801479e:	4b06      	ldr	r3, [pc, #24]	@ (80147b8 <LoRaMacCryptoGetFCntUp+0x2c>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	68db      	ldr	r3, [r3, #12]
 80147a4:	1c5a      	adds	r2, r3, #1
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80147aa:	2300      	movs	r3, #0
}
 80147ac:	4618      	mov	r0, r3
 80147ae:	370c      	adds	r7, #12
 80147b0:	46bd      	mov	sp, r7
 80147b2:	bc80      	pop	{r7}
 80147b4:	4770      	bx	lr
 80147b6:	bf00      	nop
 80147b8:	20001c2c 	.word	0x20001c2c

080147bc <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b088      	sub	sp, #32
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	4603      	mov	r3, r0
 80147c4:	60b9      	str	r1, [r7, #8]
 80147c6:	607a      	str	r2, [r7, #4]
 80147c8:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 80147ca:	2300      	movs	r3, #0
 80147cc:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80147ce:	2300      	movs	r3, #0
 80147d0:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80147d2:	2312      	movs	r3, #18
 80147d4:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d101      	bne.n	80147e0 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80147dc:	2309      	movs	r3, #9
 80147de:	e035      	b.n	801484c <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80147e0:	f107 0214 	add.w	r2, r7, #20
 80147e4:	7bfb      	ldrb	r3, [r7, #15]
 80147e6:	4611      	mov	r1, r2
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7ff feb9 	bl	8014560 <GetLastFcntDown>
 80147ee:	4603      	mov	r3, r0
 80147f0:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80147f2:	7efb      	ldrb	r3, [r7, #27]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d001      	beq.n	80147fc <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 80147f8:	7efb      	ldrb	r3, [r7, #27]
 80147fa:	e027      	b.n	801484c <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80147fc:	697b      	ldr	r3, [r7, #20]
 80147fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014802:	d103      	bne.n	801480c <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	68ba      	ldr	r2, [r7, #8]
 8014808:	601a      	str	r2, [r3, #0]
 801480a:	e01e      	b.n	801484a <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801480c:	697b      	ldr	r3, [r7, #20]
 801480e:	b29b      	uxth	r3, r3
 8014810:	68ba      	ldr	r2, [r7, #8]
 8014812:	1ad3      	subs	r3, r2, r3
 8014814:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8014816:	69fb      	ldr	r3, [r7, #28]
 8014818:	2b00      	cmp	r3, #0
 801481a:	dd05      	ble.n	8014828 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801481c:	697a      	ldr	r2, [r7, #20]
 801481e:	69fb      	ldr	r3, [r7, #28]
 8014820:	441a      	add	r2, r3
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	601a      	str	r2, [r3, #0]
 8014826:	e010      	b.n	801484a <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8014828:	69fb      	ldr	r3, [r7, #28]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d104      	bne.n	8014838 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801482e:	697a      	ldr	r2, [r7, #20]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8014834:	2307      	movs	r3, #7
 8014836:	e009      	b.n	801484c <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8014838:	697b      	ldr	r3, [r7, #20]
 801483a:	0c1b      	lsrs	r3, r3, #16
 801483c:	041b      	lsls	r3, r3, #16
 801483e:	68ba      	ldr	r2, [r7, #8]
 8014840:	4413      	add	r3, r2
 8014842:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801484a:	2300      	movs	r3, #0
}
 801484c:	4618      	mov	r0, r3
 801484e:	3720      	adds	r7, #32
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}

08014854 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8014854:	b480      	push	{r7}
 8014856:	b085      	sub	sp, #20
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d101      	bne.n	8014866 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014862:	2309      	movs	r3, #9
 8014864:	e017      	b.n	8014896 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014866:	2300      	movs	r3, #0
 8014868:	60fb      	str	r3, [r7, #12]
 801486a:	e010      	b.n	801488e <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 801486c:	4b0c      	ldr	r3, [pc, #48]	@ (80148a0 <LoRaMacCryptoSetMulticastReference+0x4c>)
 801486e:	6819      	ldr	r1, [r3, #0]
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	222c      	movs	r2, #44	@ 0x2c
 8014874:	fb02 f303 	mul.w	r3, r2, r3
 8014878:	687a      	ldr	r2, [r7, #4]
 801487a:	4413      	add	r3, r2
 801487c:	68fa      	ldr	r2, [r7, #12]
 801487e:	3206      	adds	r2, #6
 8014880:	0092      	lsls	r2, r2, #2
 8014882:	440a      	add	r2, r1
 8014884:	3204      	adds	r2, #4
 8014886:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	3301      	adds	r3, #1
 801488c:	60fb      	str	r3, [r7, #12]
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	2b00      	cmp	r3, #0
 8014892:	ddeb      	ble.n	801486c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014894:	2300      	movs	r3, #0
}
 8014896:	4618      	mov	r0, r3
 8014898:	3714      	adds	r7, #20
 801489a:	46bd      	mov	sp, r7
 801489c:	bc80      	pop	{r7}
 801489e:	4770      	bx	lr
 80148a0:	20001c2c 	.word	0x20001c2c

080148a4 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b082      	sub	sp, #8
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	4603      	mov	r3, r0
 80148ac:	6039      	str	r1, [r7, #0]
 80148ae:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80148b0:	79fb      	ldrb	r3, [r7, #7]
 80148b2:	6839      	ldr	r1, [r7, #0]
 80148b4:	4618      	mov	r0, r3
 80148b6:	f7f8 f89b 	bl	800c9f0 <SecureElementSetKey>
 80148ba:	4603      	mov	r3, r0
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d001      	beq.n	80148c4 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80148c0:	230e      	movs	r3, #14
 80148c2:	e018      	b.n	80148f6 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 80148c4:	79fb      	ldrb	r3, [r7, #7]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d114      	bne.n	80148f4 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80148ca:	4b0d      	ldr	r3, [pc, #52]	@ (8014900 <LoRaMacCryptoSetKey+0x5c>)
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	789b      	ldrb	r3, [r3, #2]
 80148d0:	79fa      	ldrb	r2, [r7, #7]
 80148d2:	4611      	mov	r1, r2
 80148d4:	4618      	mov	r0, r3
 80148d6:	f000 fa37 	bl	8014d48 <LoRaMacCryptoDeriveMcRootKey>
 80148da:	4603      	mov	r3, r0
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d001      	beq.n	80148e4 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80148e0:	230e      	movs	r3, #14
 80148e2:	e008      	b.n	80148f6 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80148e4:	2004      	movs	r0, #4
 80148e6:	f000 fa5a 	bl	8014d9e <LoRaMacCryptoDeriveMcKEKey>
 80148ea:	4603      	mov	r3, r0
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d001      	beq.n	80148f4 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80148f0:	230e      	movs	r3, #14
 80148f2:	e000      	b.n	80148f6 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80148f4:	2300      	movs	r3, #0
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	3708      	adds	r7, #8
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bd80      	pop	{r7, pc}
 80148fe:	bf00      	nop
 8014900:	20001c2c 	.word	0x20001c2c

08014904 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b086      	sub	sp, #24
 8014908:	af02      	add	r7, sp, #8
 801490a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d101      	bne.n	8014916 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014912:	2309      	movs	r3, #9
 8014914:	e02d      	b.n	8014972 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8014916:	2301      	movs	r3, #1
 8014918:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 801491a:	4b18      	ldr	r3, [pc, #96]	@ (801497c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	889a      	ldrh	r2, [r3, #4]
 8014920:	3201      	adds	r2, #1
 8014922:	b292      	uxth	r2, r2
 8014924:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8014926:	4b15      	ldr	r3, [pc, #84]	@ (801497c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	889a      	ldrh	r2, [r3, #4]
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f000 fc14 	bl	801515e <LoRaMacSerializerJoinRequest>
 8014936:	4603      	mov	r3, r0
 8014938:	2b00      	cmp	r3, #0
 801493a:	d001      	beq.n	8014940 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801493c:	2310      	movs	r3, #16
 801493e:	e018      	b.n	8014972 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	6819      	ldr	r1, [r3, #0]
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	3318      	adds	r3, #24
 8014948:	7bfa      	ldrb	r2, [r7, #15]
 801494a:	9300      	str	r3, [sp, #0]
 801494c:	4613      	mov	r3, r2
 801494e:	2213      	movs	r2, #19
 8014950:	2000      	movs	r0, #0
 8014952:	f7f8 f8ab 	bl	800caac <SecureElementComputeAesCmac>
 8014956:	4603      	mov	r3, r0
 8014958:	2b00      	cmp	r3, #0
 801495a:	d001      	beq.n	8014960 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801495c:	230e      	movs	r3, #14
 801495e:	e008      	b.n	8014972 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014960:	6878      	ldr	r0, [r7, #4]
 8014962:	f000 fbfc 	bl	801515e <LoRaMacSerializerJoinRequest>
 8014966:	4603      	mov	r3, r0
 8014968:	2b00      	cmp	r3, #0
 801496a:	d001      	beq.n	8014970 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801496c:	2310      	movs	r3, #16
 801496e:	e000      	b.n	8014972 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014970:	2300      	movs	r3, #0
}
 8014972:	4618      	mov	r0, r3
 8014974:	3710      	adds	r7, #16
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}
 801497a:	bf00      	nop
 801497c:	20001c2c 	.word	0x20001c2c

08014980 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8014980:	b590      	push	{r4, r7, lr}
 8014982:	b097      	sub	sp, #92	@ 0x5c
 8014984:	af04      	add	r7, sp, #16
 8014986:	4603      	mov	r3, r0
 8014988:	60b9      	str	r1, [r7, #8]
 801498a:	607a      	str	r2, [r7, #4]
 801498c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d002      	beq.n	801499a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8014994:	68bb      	ldr	r3, [r7, #8]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d101      	bne.n	801499e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801499a:	2309      	movs	r3, #9
 801499c:	e0bd      	b.n	8014b1a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801499e:	2312      	movs	r3, #18
 80149a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80149a4:	2300      	movs	r3, #0
 80149a6:	61bb      	str	r3, [r7, #24]
 80149a8:	f107 031c 	add.w	r3, r7, #28
 80149ac:	221d      	movs	r2, #29
 80149ae:	2100      	movs	r1, #0
 80149b0:	4618      	mov	r0, r3
 80149b2:	f008 fbb5 	bl	801d120 <memset>
    uint8_t versionMinor         = 0;
 80149b6:	2300      	movs	r3, #0
 80149b8:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80149ba:	4b5a      	ldr	r3, [pc, #360]	@ (8014b24 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	889b      	ldrh	r3, [r3, #4]
 80149c0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681c      	ldr	r4, [r3, #0]
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	791b      	ldrb	r3, [r3, #4]
 80149cc:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 80149d0:	7bf8      	ldrb	r0, [r7, #15]
 80149d2:	f107 0217 	add.w	r2, r7, #23
 80149d6:	9202      	str	r2, [sp, #8]
 80149d8:	f107 0218 	add.w	r2, r7, #24
 80149dc:	9201      	str	r2, [sp, #4]
 80149de:	9300      	str	r3, [sp, #0]
 80149e0:	4623      	mov	r3, r4
 80149e2:	460a      	mov	r2, r1
 80149e4:	68b9      	ldr	r1, [r7, #8]
 80149e6:	f7f8 f955 	bl	800cc94 <SecureElementProcessJoinAccept>
 80149ea:	4603      	mov	r3, r0
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d001      	beq.n	80149f4 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80149f0:	230e      	movs	r3, #14
 80149f2:	e092      	b.n	8014b1a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	6818      	ldr	r0, [r3, #0]
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	791b      	ldrb	r3, [r3, #4]
 80149fc:	461a      	mov	r2, r3
 80149fe:	f107 0318 	add.w	r3, r7, #24
 8014a02:	4619      	mov	r1, r3
 8014a04:	f002 ffd3 	bl	80179ae <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f000 f9eb 	bl	8014de4 <LoRaMacParserJoinAccept>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d001      	beq.n	8014a18 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014a14:	230f      	movs	r3, #15
 8014a16:	e080      	b.n	8014b1a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	799b      	ldrb	r3, [r3, #6]
 8014a1c:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	79db      	ldrb	r3, [r3, #7]
 8014a22:	021b      	lsls	r3, r3, #8
 8014a24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014a26:	4313      	orrs	r3, r2
 8014a28:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	7a1b      	ldrb	r3, [r3, #8]
 8014a2e:	041b      	lsls	r3, r3, #16
 8014a30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014a32:	4313      	orrs	r3, r2
 8014a34:	643b      	str	r3, [r7, #64]	@ 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8014a36:	4b3b      	ldr	r3, [pc, #236]	@ (8014b24 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	689b      	ldr	r3, [r3, #8]
 8014a3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	d010      	beq.n	8014a64 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8014a42:	4b38      	ldr	r3, [pc, #224]	@ (8014b24 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014a48:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8014a4a:	7dfb      	ldrb	r3, [r7, #23]
 8014a4c:	2100      	movs	r1, #0
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f000 f97a 	bl	8014d48 <LoRaMacCryptoDeriveMcRootKey>
 8014a54:	4603      	mov	r3, r0
 8014a56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014a5a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d005      	beq.n	8014a6e <LoRaMacCryptoHandleJoinAccept+0xee>
 8014a62:	e001      	b.n	8014a68 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014a64:	2303      	movs	r3, #3
 8014a66:	e058      	b.n	8014b1a <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8014a68:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014a6c:	e055      	b.n	8014b1a <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8014a6e:	2004      	movs	r0, #4
 8014a70:	f000 f995 	bl	8014d9e <LoRaMacCryptoDeriveMcKEKey>
 8014a74:	4603      	mov	r3, r0
 8014a76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014a7a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d002      	beq.n	8014a88 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8014a82:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014a86:	e048      	b.n	8014b1a <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	7a5b      	ldrb	r3, [r3, #9]
 8014a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	7a9b      	ldrb	r3, [r3, #10]
 8014a92:	021b      	lsls	r3, r3, #8
 8014a94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014a96:	4313      	orrs	r3, r2
 8014a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	7adb      	ldrb	r3, [r3, #11]
 8014a9e:	041b      	lsls	r3, r3, #16
 8014aa0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014aa2:	4313      	orrs	r3, r2
 8014aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8014aa6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014aaa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014aac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014aae:	2003      	movs	r0, #3
 8014ab0:	f7ff fd06 	bl	80144c0 <DeriveSessionKey10x>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014aba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d002      	beq.n	8014ac8 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8014ac2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014ac6:	e028      	b.n	8014b1a <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8014ac8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014acc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014ace:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014ad0:	2002      	movs	r0, #2
 8014ad2:	f7ff fcf5 	bl	80144c0 <DeriveSessionKey10x>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014adc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d002      	beq.n	8014aea <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8014ae4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014ae8:	e017      	b.n	8014b1a <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8014aea:	4b0e      	ldr	r3, [pc, #56]	@ (8014b24 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	7dfa      	ldrb	r2, [r7, #23]
 8014af0:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8014af2:	4b0c      	ldr	r3, [pc, #48]	@ (8014b24 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	2200      	movs	r2, #0
 8014af8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8014afa:	4b0a      	ldr	r3, [pc, #40]	@ (8014b24 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	f04f 32ff 	mov.w	r2, #4294967295
 8014b02:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014b04:	4b07      	ldr	r3, [pc, #28]	@ (8014b24 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	f04f 32ff 	mov.w	r2, #4294967295
 8014b0c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014b0e:	4b05      	ldr	r3, [pc, #20]	@ (8014b24 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	f04f 32ff 	mov.w	r2, #4294967295
 8014b16:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8014b18:	2300      	movs	r3, #0
}
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	374c      	adds	r7, #76	@ 0x4c
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd90      	pop	{r4, r7, pc}
 8014b22:	bf00      	nop
 8014b24:	20001c2c 	.word	0x20001c2c

08014b28 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8014b28:	b590      	push	{r4, r7, lr}
 8014b2a:	b08b      	sub	sp, #44	@ 0x2c
 8014b2c:	af04      	add	r7, sp, #16
 8014b2e:	60f8      	str	r0, [r7, #12]
 8014b30:	607b      	str	r3, [r7, #4]
 8014b32:	460b      	mov	r3, r1
 8014b34:	72fb      	strb	r3, [r7, #11]
 8014b36:	4613      	mov	r3, r2
 8014b38:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014b3a:	2312      	movs	r3, #18
 8014b3c:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014b3e:	2303      	movs	r3, #3
 8014b40:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d101      	bne.n	8014b4c <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014b48:	2309      	movs	r3, #9
 8014b4a:	e05e      	b.n	8014c0a <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014b4c:	4b31      	ldr	r3, [pc, #196]	@ (8014c14 <LoRaMacCryptoSecureMessage+0xec>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	68db      	ldr	r3, [r3, #12]
 8014b52:	68fa      	ldr	r2, [r7, #12]
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d201      	bcs.n	8014b5c <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014b58:	2306      	movs	r3, #6
 8014b5a:	e056      	b.n	8014c0a <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d101      	bne.n	8014b6a <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014b66:	2302      	movs	r3, #2
 8014b68:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8014b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8014c14 <LoRaMacCryptoSecureMessage+0xec>)
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	68db      	ldr	r3, [r3, #12]
 8014b70:	68fa      	ldr	r2, [r7, #12]
 8014b72:	429a      	cmp	r2, r3
 8014b74:	d916      	bls.n	8014ba4 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014b80:	b219      	sxth	r1, r3
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	689c      	ldr	r4, [r3, #8]
 8014b86:	7dfa      	ldrb	r2, [r7, #23]
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	9301      	str	r3, [sp, #4]
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	9300      	str	r3, [sp, #0]
 8014b90:	4623      	mov	r3, r4
 8014b92:	f7ff faa1 	bl	80140d8 <PayloadEncrypt>
 8014b96:	4603      	mov	r3, r0
 8014b98:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b9a:	7dbb      	ldrb	r3, [r7, #22]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d001      	beq.n	8014ba4 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8014ba0:	7dbb      	ldrb	r3, [r7, #22]
 8014ba2:	e032      	b.n	8014c0a <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f000 fb5c 	bl	8015262 <LoRaMacSerializerData>
 8014baa:	4603      	mov	r3, r0
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d001      	beq.n	8014bb4 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014bb0:	2310      	movs	r3, #16
 8014bb2:	e02a      	b.n	8014c0a <LoRaMacCryptoSecureMessage+0xe2>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014bb4:	2302      	movs	r3, #2
 8014bb6:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	6818      	ldr	r0, [r3, #0]
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	791b      	ldrb	r3, [r3, #4]
 8014bc0:	3b04      	subs	r3, #4
 8014bc2:	b299      	uxth	r1, r3
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	689b      	ldr	r3, [r3, #8]
 8014bc8:	687a      	ldr	r2, [r7, #4]
 8014bca:	322c      	adds	r2, #44	@ 0x2c
 8014bcc:	7dfc      	ldrb	r4, [r7, #23]
 8014bce:	9203      	str	r2, [sp, #12]
 8014bd0:	68fa      	ldr	r2, [r7, #12]
 8014bd2:	9202      	str	r2, [sp, #8]
 8014bd4:	9301      	str	r3, [sp, #4]
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	9300      	str	r3, [sp, #0]
 8014bda:	2300      	movs	r3, #0
 8014bdc:	4622      	mov	r2, r4
 8014bde:	f7ff fb7c 	bl	80142da <ComputeCmacB0>
 8014be2:	4603      	mov	r3, r0
 8014be4:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014be6:	7dbb      	ldrb	r3, [r7, #22]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d001      	beq.n	8014bf0 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8014bec:	7dbb      	ldrb	r3, [r7, #22]
 8014bee:	e00c      	b.n	8014c0a <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f000 fb36 	bl	8015262 <LoRaMacSerializerData>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d001      	beq.n	8014c00 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014bfc:	2310      	movs	r3, #16
 8014bfe:	e004      	b.n	8014c0a <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8014c00:	4b04      	ldr	r3, [pc, #16]	@ (8014c14 <LoRaMacCryptoSecureMessage+0xec>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	68fa      	ldr	r2, [r7, #12]
 8014c06:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8014c08:	2300      	movs	r3, #0
}
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	371c      	adds	r7, #28
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd90      	pop	{r4, r7, pc}
 8014c12:	bf00      	nop
 8014c14:	20001c2c 	.word	0x20001c2c

08014c18 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014c18:	b590      	push	{r4, r7, lr}
 8014c1a:	b08b      	sub	sp, #44	@ 0x2c
 8014c1c:	af04      	add	r7, sp, #16
 8014c1e:	60b9      	str	r1, [r7, #8]
 8014c20:	607b      	str	r3, [r7, #4]
 8014c22:	4603      	mov	r3, r0
 8014c24:	73fb      	strb	r3, [r7, #15]
 8014c26:	4613      	mov	r3, r2
 8014c28:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8014c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d101      	bne.n	8014c34 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014c30:	2309      	movs	r3, #9
 8014c32:	e083      	b.n	8014d3c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014c34:	7bbb      	ldrb	r3, [r7, #14]
 8014c36:	6879      	ldr	r1, [r7, #4]
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f7ff fcdf 	bl	80145fc <CheckFCntDown>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	f083 0301 	eor.w	r3, r3, #1
 8014c44:	b2db      	uxtb	r3, r3
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d001      	beq.n	8014c4e <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014c4a:	2306      	movs	r3, #6
 8014c4c:	e076      	b.n	8014d3c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014c4e:	2312      	movs	r3, #18
 8014c50:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014c52:	2303      	movs	r3, #3
 8014c54:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8014c56:	2302      	movs	r3, #2
 8014c58:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014c5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014c5c:	f000 f98d 	bl	8014f7a <LoRaMacParserData>
 8014c60:	4603      	mov	r3, r0
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d001      	beq.n	8014c6a <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014c66:	230f      	movs	r3, #15
 8014c68:	e068      	b.n	8014d3c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014c6a:	f107 0210 	add.w	r2, r7, #16
 8014c6e:	7bfb      	ldrb	r3, [r7, #15]
 8014c70:	4611      	mov	r1, r2
 8014c72:	4618      	mov	r0, r3
 8014c74:	f7ff fbfe 	bl	8014474 <GetKeyAddrItem>
 8014c78:	4603      	mov	r3, r0
 8014c7a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014c7c:	7d7b      	ldrb	r3, [r7, #21]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d001      	beq.n	8014c86 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8014c82:	7d7b      	ldrb	r3, [r7, #21]
 8014c84:	e05a      	b.n	8014d3c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014c86:	693b      	ldr	r3, [r7, #16]
 8014c88:	785b      	ldrb	r3, [r3, #1]
 8014c8a:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014c8c:	693b      	ldr	r3, [r7, #16]
 8014c8e:	789b      	ldrb	r3, [r3, #2]
 8014c90:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8014c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c94:	689b      	ldr	r3, [r3, #8]
 8014c96:	68ba      	ldr	r2, [r7, #8]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d001      	beq.n	8014ca0 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014c9c:	2302      	movs	r3, #2
 8014c9e:	e04d      	b.n	8014d3c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ca2:	7b1b      	ldrb	r3, [r3, #12]
 8014ca4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014ca8:	b2db      	uxtb	r3, r3
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	bf14      	ite	ne
 8014cae:	2301      	movne	r3, #1
 8014cb0:	2300      	moveq	r3, #0
 8014cb2:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014cb4:	4b23      	ldr	r3, [pc, #140]	@ (8014d44 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	789b      	ldrb	r3, [r3, #2]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d101      	bne.n	8014cc2 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8014cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cc4:	6818      	ldr	r0, [r3, #0]
 8014cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cc8:	791b      	ldrb	r3, [r3, #4]
 8014cca:	3b04      	subs	r3, #4
 8014ccc:	b299      	uxth	r1, r3
 8014cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cd2:	7dbc      	ldrb	r4, [r7, #22]
 8014cd4:	7d3a      	ldrb	r2, [r7, #20]
 8014cd6:	9303      	str	r3, [sp, #12]
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	9302      	str	r3, [sp, #8]
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	9301      	str	r3, [sp, #4]
 8014ce0:	2301      	movs	r3, #1
 8014ce2:	9300      	str	r3, [sp, #0]
 8014ce4:	4623      	mov	r3, r4
 8014ce6:	f7ff fb36 	bl	8014356 <VerifyCmacB0>
 8014cea:	4603      	mov	r3, r0
 8014cec:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014cee:	7d7b      	ldrb	r3, [r7, #21]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d001      	beq.n	8014cf8 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8014cf4:	7d7b      	ldrb	r3, [r7, #21]
 8014cf6:	e021      	b.n	8014d3c <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d101      	bne.n	8014d06 <LoRaMacCryptoUnsecureMessage+0xee>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014d02:	2302      	movs	r3, #2
 8014d04:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8014d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d08:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014d10:	b219      	sxth	r1, r3
 8014d12:	7dfa      	ldrb	r2, [r7, #23]
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	9301      	str	r3, [sp, #4]
 8014d18:	2301      	movs	r3, #1
 8014d1a:	9300      	str	r3, [sp, #0]
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	f7ff f9db 	bl	80140d8 <PayloadEncrypt>
 8014d22:	4603      	mov	r3, r0
 8014d24:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014d26:	7d7b      	ldrb	r3, [r7, #21]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d001      	beq.n	8014d30 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8014d2c:	7d7b      	ldrb	r3, [r7, #21]
 8014d2e:	e005      	b.n	8014d3c <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8014d30:	7bbb      	ldrb	r3, [r7, #14]
 8014d32:	6879      	ldr	r1, [r7, #4]
 8014d34:	4618      	mov	r0, r3
 8014d36:	f7ff fc85 	bl	8014644 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014d3a:	2300      	movs	r3, #0
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	371c      	adds	r7, #28
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd90      	pop	{r4, r7, pc}
 8014d44:	20001c2c 	.word	0x20001c2c

08014d48 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b086      	sub	sp, #24
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	4603      	mov	r3, r0
 8014d50:	460a      	mov	r2, r1
 8014d52:	71fb      	strb	r3, [r7, #7]
 8014d54:	4613      	mov	r3, r2
 8014d56:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8014d58:	79bb      	ldrb	r3, [r7, #6]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d001      	beq.n	8014d62 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014d5e:	230a      	movs	r3, #10
 8014d60:	e019      	b.n	8014d96 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8014d62:	2300      	movs	r3, #0
 8014d64:	60bb      	str	r3, [r7, #8]
 8014d66:	f107 030c 	add.w	r3, r7, #12
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	601a      	str	r2, [r3, #0]
 8014d6e:	605a      	str	r2, [r3, #4]
 8014d70:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8014d72:	79fb      	ldrb	r3, [r7, #7]
 8014d74:	2b01      	cmp	r3, #1
 8014d76:	d101      	bne.n	8014d7c <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8014d78:	2320      	movs	r3, #32
 8014d7a:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014d7c:	79b9      	ldrb	r1, [r7, #6]
 8014d7e:	f107 0308 	add.w	r3, r7, #8
 8014d82:	2204      	movs	r2, #4
 8014d84:	4618      	mov	r0, r3
 8014d86:	f7f7 ff45 	bl	800cc14 <SecureElementDeriveAndStoreKey>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d001      	beq.n	8014d94 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014d90:	230e      	movs	r3, #14
 8014d92:	e000      	b.n	8014d96 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014d94:	2300      	movs	r3, #0
}
 8014d96:	4618      	mov	r0, r3
 8014d98:	3718      	adds	r7, #24
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bd80      	pop	{r7, pc}

08014d9e <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8014d9e:	b580      	push	{r7, lr}
 8014da0:	b086      	sub	sp, #24
 8014da2:	af00      	add	r7, sp, #0
 8014da4:	4603      	mov	r3, r0
 8014da6:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8014da8:	79fb      	ldrb	r3, [r7, #7]
 8014daa:	2b04      	cmp	r3, #4
 8014dac:	d001      	beq.n	8014db2 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014dae:	230a      	movs	r3, #10
 8014db0:	e014      	b.n	8014ddc <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8014db2:	2300      	movs	r3, #0
 8014db4:	60bb      	str	r3, [r7, #8]
 8014db6:	f107 030c 	add.w	r3, r7, #12
 8014dba:	2200      	movs	r2, #0
 8014dbc:	601a      	str	r2, [r3, #0]
 8014dbe:	605a      	str	r2, [r3, #4]
 8014dc0:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014dc2:	79f9      	ldrb	r1, [r7, #7]
 8014dc4:	f107 0308 	add.w	r3, r7, #8
 8014dc8:	227f      	movs	r2, #127	@ 0x7f
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f7f7 ff22 	bl	800cc14 <SecureElementDeriveAndStoreKey>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d001      	beq.n	8014dda <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014dd6:	230e      	movs	r3, #14
 8014dd8:	e000      	b.n	8014ddc <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014dda:	2300      	movs	r3, #0
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3718      	adds	r7, #24
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}

08014de4 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b084      	sub	sp, #16
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d003      	beq.n	8014dfa <LoRaMacParserJoinAccept+0x16>
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d101      	bne.n	8014dfe <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014dfa:	2302      	movs	r3, #2
 8014dfc:	e0b9      	b.n	8014f72 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014dfe:	2300      	movs	r3, #0
 8014e00:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	681a      	ldr	r2, [r3, #0]
 8014e06:	89fb      	ldrh	r3, [r7, #14]
 8014e08:	1c59      	adds	r1, r3, #1
 8014e0a:	81f9      	strh	r1, [r7, #14]
 8014e0c:	4413      	add	r3, r2
 8014e0e:	781a      	ldrb	r2, [r3, #0]
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	1d98      	adds	r0, r3, #6
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	681a      	ldr	r2, [r3, #0]
 8014e1c:	89fb      	ldrh	r3, [r7, #14]
 8014e1e:	4413      	add	r3, r2
 8014e20:	2203      	movs	r2, #3
 8014e22:	4619      	mov	r1, r3
 8014e24:	f002 fdc3 	bl	80179ae <memcpy1>
    bufItr = bufItr + 3;
 8014e28:	89fb      	ldrh	r3, [r7, #14]
 8014e2a:	3303      	adds	r3, #3
 8014e2c:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	f103 0009 	add.w	r0, r3, #9
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	681a      	ldr	r2, [r3, #0]
 8014e38:	89fb      	ldrh	r3, [r7, #14]
 8014e3a:	4413      	add	r3, r2
 8014e3c:	2203      	movs	r2, #3
 8014e3e:	4619      	mov	r1, r3
 8014e40:	f002 fdb5 	bl	80179ae <memcpy1>
    bufItr = bufItr + 3;
 8014e44:	89fb      	ldrh	r3, [r7, #14]
 8014e46:	3303      	adds	r3, #3
 8014e48:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	681a      	ldr	r2, [r3, #0]
 8014e4e:	89fb      	ldrh	r3, [r7, #14]
 8014e50:	1c59      	adds	r1, r3, #1
 8014e52:	81f9      	strh	r1, [r7, #14]
 8014e54:	4413      	add	r3, r2
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	461a      	mov	r2, r3
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	681a      	ldr	r2, [r3, #0]
 8014e62:	89fb      	ldrh	r3, [r7, #14]
 8014e64:	1c59      	adds	r1, r3, #1
 8014e66:	81f9      	strh	r1, [r7, #14]
 8014e68:	4413      	add	r3, r2
 8014e6a:	781b      	ldrb	r3, [r3, #0]
 8014e6c:	021a      	lsls	r2, r3, #8
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	68db      	ldr	r3, [r3, #12]
 8014e72:	431a      	orrs	r2, r3
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	681a      	ldr	r2, [r3, #0]
 8014e7c:	89fb      	ldrh	r3, [r7, #14]
 8014e7e:	1c59      	adds	r1, r3, #1
 8014e80:	81f9      	strh	r1, [r7, #14]
 8014e82:	4413      	add	r3, r2
 8014e84:	781b      	ldrb	r3, [r3, #0]
 8014e86:	041a      	lsls	r2, r3, #16
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	68db      	ldr	r3, [r3, #12]
 8014e8c:	431a      	orrs	r2, r3
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	681a      	ldr	r2, [r3, #0]
 8014e96:	89fb      	ldrh	r3, [r7, #14]
 8014e98:	1c59      	adds	r1, r3, #1
 8014e9a:	81f9      	strh	r1, [r7, #14]
 8014e9c:	4413      	add	r3, r2
 8014e9e:	781b      	ldrb	r3, [r3, #0]
 8014ea0:	061a      	lsls	r2, r3, #24
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	68db      	ldr	r3, [r3, #12]
 8014ea6:	431a      	orrs	r2, r3
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	681a      	ldr	r2, [r3, #0]
 8014eb0:	89fb      	ldrh	r3, [r7, #14]
 8014eb2:	1c59      	adds	r1, r3, #1
 8014eb4:	81f9      	strh	r1, [r7, #14]
 8014eb6:	4413      	add	r3, r2
 8014eb8:	781a      	ldrb	r2, [r3, #0]
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	681a      	ldr	r2, [r3, #0]
 8014ec2:	89fb      	ldrh	r3, [r7, #14]
 8014ec4:	1c59      	adds	r1, r3, #1
 8014ec6:	81f9      	strh	r1, [r7, #14]
 8014ec8:	4413      	add	r3, r2
 8014eca:	781a      	ldrb	r2, [r3, #0]
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	791b      	ldrb	r3, [r3, #4]
 8014ed4:	1f1a      	subs	r2, r3, #4
 8014ed6:	89fb      	ldrh	r3, [r7, #14]
 8014ed8:	1ad3      	subs	r3, r2, r3
 8014eda:	2b10      	cmp	r3, #16
 8014edc:	d10e      	bne.n	8014efc <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	f103 0012 	add.w	r0, r3, #18
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681a      	ldr	r2, [r3, #0]
 8014ee8:	89fb      	ldrh	r3, [r7, #14]
 8014eea:	4413      	add	r3, r2
 8014eec:	2210      	movs	r2, #16
 8014eee:	4619      	mov	r1, r3
 8014ef0:	f002 fd5d 	bl	80179ae <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014ef4:	89fb      	ldrh	r3, [r7, #14]
 8014ef6:	3310      	adds	r3, #16
 8014ef8:	81fb      	strh	r3, [r7, #14]
 8014efa:	e008      	b.n	8014f0e <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	791b      	ldrb	r3, [r3, #4]
 8014f00:	1f1a      	subs	r2, r3, #4
 8014f02:	89fb      	ldrh	r3, [r7, #14]
 8014f04:	1ad3      	subs	r3, r2, r3
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	dd01      	ble.n	8014f0e <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8014f0a:	2301      	movs	r3, #1
 8014f0c:	e031      	b.n	8014f72 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	681a      	ldr	r2, [r3, #0]
 8014f12:	89fb      	ldrh	r3, [r7, #14]
 8014f14:	1c59      	adds	r1, r3, #1
 8014f16:	81f9      	strh	r1, [r7, #14]
 8014f18:	4413      	add	r3, r2
 8014f1a:	781b      	ldrb	r3, [r3, #0]
 8014f1c:	461a      	mov	r2, r3
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	681a      	ldr	r2, [r3, #0]
 8014f26:	89fb      	ldrh	r3, [r7, #14]
 8014f28:	1c59      	adds	r1, r3, #1
 8014f2a:	81f9      	strh	r1, [r7, #14]
 8014f2c:	4413      	add	r3, r2
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	021a      	lsls	r2, r3, #8
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f36:	431a      	orrs	r2, r3
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	681a      	ldr	r2, [r3, #0]
 8014f40:	89fb      	ldrh	r3, [r7, #14]
 8014f42:	1c59      	adds	r1, r3, #1
 8014f44:	81f9      	strh	r1, [r7, #14]
 8014f46:	4413      	add	r3, r2
 8014f48:	781b      	ldrb	r3, [r3, #0]
 8014f4a:	041a      	lsls	r2, r3, #16
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f50:	431a      	orrs	r2, r3
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	681a      	ldr	r2, [r3, #0]
 8014f5a:	89fb      	ldrh	r3, [r7, #14]
 8014f5c:	1c59      	adds	r1, r3, #1
 8014f5e:	81f9      	strh	r1, [r7, #14]
 8014f60:	4413      	add	r3, r2
 8014f62:	781b      	ldrb	r3, [r3, #0]
 8014f64:	061a      	lsls	r2, r3, #24
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f6a:	431a      	orrs	r2, r3
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014f70:	2300      	movs	r3, #0
}
 8014f72:	4618      	mov	r0, r3
 8014f74:	3710      	adds	r7, #16
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}

08014f7a <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014f7a:	b580      	push	{r7, lr}
 8014f7c:	b084      	sub	sp, #16
 8014f7e:	af00      	add	r7, sp, #0
 8014f80:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d003      	beq.n	8014f90 <LoRaMacParserData+0x16>
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d101      	bne.n	8014f94 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014f90:	2302      	movs	r3, #2
 8014f92:	e0e0      	b.n	8015156 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8014f94:	2300      	movs	r3, #0
 8014f96:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	681a      	ldr	r2, [r3, #0]
 8014f9c:	89fb      	ldrh	r3, [r7, #14]
 8014f9e:	1c59      	adds	r1, r3, #1
 8014fa0:	81f9      	strh	r1, [r7, #14]
 8014fa2:	4413      	add	r3, r2
 8014fa4:	781a      	ldrb	r2, [r3, #0]
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	681a      	ldr	r2, [r3, #0]
 8014fae:	89fb      	ldrh	r3, [r7, #14]
 8014fb0:	1c59      	adds	r1, r3, #1
 8014fb2:	81f9      	strh	r1, [r7, #14]
 8014fb4:	4413      	add	r3, r2
 8014fb6:	781b      	ldrb	r3, [r3, #0]
 8014fb8:	461a      	mov	r2, r3
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	681a      	ldr	r2, [r3, #0]
 8014fc2:	89fb      	ldrh	r3, [r7, #14]
 8014fc4:	1c59      	adds	r1, r3, #1
 8014fc6:	81f9      	strh	r1, [r7, #14]
 8014fc8:	4413      	add	r3, r2
 8014fca:	781b      	ldrb	r3, [r3, #0]
 8014fcc:	021a      	lsls	r2, r3, #8
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	689b      	ldr	r3, [r3, #8]
 8014fd2:	431a      	orrs	r2, r3
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	681a      	ldr	r2, [r3, #0]
 8014fdc:	89fb      	ldrh	r3, [r7, #14]
 8014fde:	1c59      	adds	r1, r3, #1
 8014fe0:	81f9      	strh	r1, [r7, #14]
 8014fe2:	4413      	add	r3, r2
 8014fe4:	781b      	ldrb	r3, [r3, #0]
 8014fe6:	041a      	lsls	r2, r3, #16
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	689b      	ldr	r3, [r3, #8]
 8014fec:	431a      	orrs	r2, r3
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	681a      	ldr	r2, [r3, #0]
 8014ff6:	89fb      	ldrh	r3, [r7, #14]
 8014ff8:	1c59      	adds	r1, r3, #1
 8014ffa:	81f9      	strh	r1, [r7, #14]
 8014ffc:	4413      	add	r3, r2
 8014ffe:	781b      	ldrb	r3, [r3, #0]
 8015000:	061a      	lsls	r2, r3, #24
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	689b      	ldr	r3, [r3, #8]
 8015006:	431a      	orrs	r2, r3
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	681a      	ldr	r2, [r3, #0]
 8015010:	89fb      	ldrh	r3, [r7, #14]
 8015012:	1c59      	adds	r1, r3, #1
 8015014:	81f9      	strh	r1, [r7, #14]
 8015016:	4413      	add	r3, r2
 8015018:	781a      	ldrb	r2, [r3, #0]
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	681a      	ldr	r2, [r3, #0]
 8015022:	89fb      	ldrh	r3, [r7, #14]
 8015024:	1c59      	adds	r1, r3, #1
 8015026:	81f9      	strh	r1, [r7, #14]
 8015028:	4413      	add	r3, r2
 801502a:	781b      	ldrb	r3, [r3, #0]
 801502c:	461a      	mov	r2, r3
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	681a      	ldr	r2, [r3, #0]
 8015036:	89fb      	ldrh	r3, [r7, #14]
 8015038:	1c59      	adds	r1, r3, #1
 801503a:	81f9      	strh	r1, [r7, #14]
 801503c:	4413      	add	r3, r2
 801503e:	781b      	ldrb	r3, [r3, #0]
 8015040:	0219      	lsls	r1, r3, #8
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	89db      	ldrh	r3, [r3, #14]
 8015046:	b21a      	sxth	r2, r3
 8015048:	b20b      	sxth	r3, r1
 801504a:	4313      	orrs	r3, r2
 801504c:	b21b      	sxth	r3, r3
 801504e:	b29a      	uxth	r2, r3
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f103 0010 	add.w	r0, r3, #16
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	681a      	ldr	r2, [r3, #0]
 801505e:	89fb      	ldrh	r3, [r7, #14]
 8015060:	18d1      	adds	r1, r2, r3
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	7b1b      	ldrb	r3, [r3, #12]
 8015066:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801506a:	b2db      	uxtb	r3, r3
 801506c:	461a      	mov	r2, r3
 801506e:	f002 fc9e 	bl	80179ae <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	7b1b      	ldrb	r3, [r3, #12]
 8015076:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801507a:	b2db      	uxtb	r3, r3
 801507c:	461a      	mov	r2, r3
 801507e:	89fb      	ldrh	r3, [r7, #14]
 8015080:	4413      	add	r3, r2
 8015082:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	2200      	movs	r2, #0
 8015088:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2200      	movs	r2, #0
 8015090:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	791b      	ldrb	r3, [r3, #4]
 8015098:	461a      	mov	r2, r3
 801509a:	89fb      	ldrh	r3, [r7, #14]
 801509c:	1ad3      	subs	r3, r2, r3
 801509e:	2b04      	cmp	r3, #4
 80150a0:	dd27      	ble.n	80150f2 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	681a      	ldr	r2, [r3, #0]
 80150a6:	89fb      	ldrh	r3, [r7, #14]
 80150a8:	1c59      	adds	r1, r3, #1
 80150aa:	81f9      	strh	r1, [r7, #14]
 80150ac:	4413      	add	r3, r2
 80150ae:	781a      	ldrb	r2, [r3, #0]
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	791a      	ldrb	r2, [r3, #4]
 80150ba:	89fb      	ldrh	r3, [r7, #14]
 80150bc:	b2db      	uxtb	r3, r3
 80150be:	1ad3      	subs	r3, r2, r3
 80150c0:	b2db      	uxtb	r3, r3
 80150c2:	3b04      	subs	r3, #4
 80150c4:	b2da      	uxtb	r2, r3
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681a      	ldr	r2, [r3, #0]
 80150d4:	89fb      	ldrh	r3, [r7, #14]
 80150d6:	18d1      	adds	r1, r2, r3
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80150de:	461a      	mov	r2, r3
 80150e0:	f002 fc65 	bl	80179ae <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80150ea:	461a      	mov	r2, r3
 80150ec:	89fb      	ldrh	r3, [r7, #14]
 80150ee:	4413      	add	r3, r2
 80150f0:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	681a      	ldr	r2, [r3, #0]
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	791b      	ldrb	r3, [r3, #4]
 80150fa:	3b04      	subs	r3, #4
 80150fc:	4413      	add	r3, r2
 80150fe:	781b      	ldrb	r3, [r3, #0]
 8015100:	461a      	mov	r2, r3
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	6819      	ldr	r1, [r3, #0]
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	791b      	ldrb	r3, [r3, #4]
 8015112:	3b03      	subs	r3, #3
 8015114:	440b      	add	r3, r1
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	021b      	lsls	r3, r3, #8
 801511a:	431a      	orrs	r2, r3
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	6819      	ldr	r1, [r3, #0]
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	791b      	ldrb	r3, [r3, #4]
 801512c:	3b02      	subs	r3, #2
 801512e:	440b      	add	r3, r1
 8015130:	781b      	ldrb	r3, [r3, #0]
 8015132:	041b      	lsls	r3, r3, #16
 8015134:	431a      	orrs	r2, r3
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	6819      	ldr	r1, [r3, #0]
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	791b      	ldrb	r3, [r3, #4]
 8015146:	3b01      	subs	r3, #1
 8015148:	440b      	add	r3, r1
 801514a:	781b      	ldrb	r3, [r3, #0]
 801514c:	061b      	lsls	r3, r3, #24
 801514e:	431a      	orrs	r2, r3
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8015154:	2300      	movs	r3, #0
}
 8015156:	4618      	mov	r0, r3
 8015158:	3710      	adds	r7, #16
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}

0801515e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801515e:	b580      	push	{r7, lr}
 8015160:	b084      	sub	sp, #16
 8015162:	af00      	add	r7, sp, #0
 8015164:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d003      	beq.n	8015174 <LoRaMacSerializerJoinRequest+0x16>
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d101      	bne.n	8015178 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015174:	2301      	movs	r3, #1
 8015176:	e070      	b.n	801525a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8015178:	2300      	movs	r3, #0
 801517a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	791b      	ldrb	r3, [r3, #4]
 8015180:	2b16      	cmp	r3, #22
 8015182:	d801      	bhi.n	8015188 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015184:	2302      	movs	r3, #2
 8015186:	e068      	b.n	801525a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	681a      	ldr	r2, [r3, #0]
 801518c:	89fb      	ldrh	r3, [r7, #14]
 801518e:	1c59      	adds	r1, r3, #1
 8015190:	81f9      	strh	r1, [r7, #14]
 8015192:	4413      	add	r3, r2
 8015194:	687a      	ldr	r2, [r7, #4]
 8015196:	7952      	ldrb	r2, [r2, #5]
 8015198:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	681a      	ldr	r2, [r3, #0]
 801519e:	89fb      	ldrh	r3, [r7, #14]
 80151a0:	18d0      	adds	r0, r2, r3
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	3306      	adds	r3, #6
 80151a6:	2208      	movs	r2, #8
 80151a8:	4619      	mov	r1, r3
 80151aa:	f002 fc1b 	bl	80179e4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80151ae:	89fb      	ldrh	r3, [r7, #14]
 80151b0:	3308      	adds	r3, #8
 80151b2:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681a      	ldr	r2, [r3, #0]
 80151b8:	89fb      	ldrh	r3, [r7, #14]
 80151ba:	18d0      	adds	r0, r2, r3
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	330e      	adds	r3, #14
 80151c0:	2208      	movs	r2, #8
 80151c2:	4619      	mov	r1, r3
 80151c4:	f002 fc0e 	bl	80179e4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80151c8:	89fb      	ldrh	r3, [r7, #14]
 80151ca:	3308      	adds	r3, #8
 80151cc:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	8ad9      	ldrh	r1, [r3, #22]
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	681a      	ldr	r2, [r3, #0]
 80151d6:	89fb      	ldrh	r3, [r7, #14]
 80151d8:	1c58      	adds	r0, r3, #1
 80151da:	81f8      	strh	r0, [r7, #14]
 80151dc:	4413      	add	r3, r2
 80151de:	b2ca      	uxtb	r2, r1
 80151e0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	8adb      	ldrh	r3, [r3, #22]
 80151e6:	0a1b      	lsrs	r3, r3, #8
 80151e8:	b299      	uxth	r1, r3
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	681a      	ldr	r2, [r3, #0]
 80151ee:	89fb      	ldrh	r3, [r7, #14]
 80151f0:	1c58      	adds	r0, r3, #1
 80151f2:	81f8      	strh	r0, [r7, #14]
 80151f4:	4413      	add	r3, r2
 80151f6:	b2ca      	uxtb	r2, r1
 80151f8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	6999      	ldr	r1, [r3, #24]
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	681a      	ldr	r2, [r3, #0]
 8015202:	89fb      	ldrh	r3, [r7, #14]
 8015204:	1c58      	adds	r0, r3, #1
 8015206:	81f8      	strh	r0, [r7, #14]
 8015208:	4413      	add	r3, r2
 801520a:	b2ca      	uxtb	r2, r1
 801520c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	699b      	ldr	r3, [r3, #24]
 8015212:	0a19      	lsrs	r1, r3, #8
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681a      	ldr	r2, [r3, #0]
 8015218:	89fb      	ldrh	r3, [r7, #14]
 801521a:	1c58      	adds	r0, r3, #1
 801521c:	81f8      	strh	r0, [r7, #14]
 801521e:	4413      	add	r3, r2
 8015220:	b2ca      	uxtb	r2, r1
 8015222:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	699b      	ldr	r3, [r3, #24]
 8015228:	0c19      	lsrs	r1, r3, #16
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	681a      	ldr	r2, [r3, #0]
 801522e:	89fb      	ldrh	r3, [r7, #14]
 8015230:	1c58      	adds	r0, r3, #1
 8015232:	81f8      	strh	r0, [r7, #14]
 8015234:	4413      	add	r3, r2
 8015236:	b2ca      	uxtb	r2, r1
 8015238:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	699b      	ldr	r3, [r3, #24]
 801523e:	0e19      	lsrs	r1, r3, #24
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	681a      	ldr	r2, [r3, #0]
 8015244:	89fb      	ldrh	r3, [r7, #14]
 8015246:	1c58      	adds	r0, r3, #1
 8015248:	81f8      	strh	r0, [r7, #14]
 801524a:	4413      	add	r3, r2
 801524c:	b2ca      	uxtb	r2, r1
 801524e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015250:	89fb      	ldrh	r3, [r7, #14]
 8015252:	b2da      	uxtb	r2, r3
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015258:	2300      	movs	r3, #0
}
 801525a:	4618      	mov	r0, r3
 801525c:	3710      	adds	r7, #16
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}

08015262 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015262:	b580      	push	{r7, lr}
 8015264:	b084      	sub	sp, #16
 8015266:	af00      	add	r7, sp, #0
 8015268:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d003      	beq.n	8015278 <LoRaMacSerializerData+0x16>
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d101      	bne.n	801527c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015278:	2301      	movs	r3, #1
 801527a:	e0e3      	b.n	8015444 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 801527c:	2300      	movs	r3, #0
 801527e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8015280:	2308      	movs	r3, #8
 8015282:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	7b1b      	ldrb	r3, [r3, #12]
 8015288:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801528c:	b2db      	uxtb	r3, r3
 801528e:	461a      	mov	r2, r3
 8015290:	89bb      	ldrh	r3, [r7, #12]
 8015292:	4413      	add	r3, r2
 8015294:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801529c:	2b00      	cmp	r3, #0
 801529e:	d002      	beq.n	80152a6 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80152a0:	89bb      	ldrh	r3, [r7, #12]
 80152a2:	3301      	adds	r3, #1
 80152a4:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80152ac:	461a      	mov	r2, r3
 80152ae:	89bb      	ldrh	r3, [r7, #12]
 80152b0:	4413      	add	r3, r2
 80152b2:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80152b4:	89bb      	ldrh	r3, [r7, #12]
 80152b6:	3304      	adds	r3, #4
 80152b8:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	791b      	ldrb	r3, [r3, #4]
 80152be:	461a      	mov	r2, r3
 80152c0:	89bb      	ldrh	r3, [r7, #12]
 80152c2:	4293      	cmp	r3, r2
 80152c4:	d901      	bls.n	80152ca <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80152c6:	2302      	movs	r3, #2
 80152c8:	e0bc      	b.n	8015444 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	681a      	ldr	r2, [r3, #0]
 80152ce:	89fb      	ldrh	r3, [r7, #14]
 80152d0:	1c59      	adds	r1, r3, #1
 80152d2:	81f9      	strh	r1, [r7, #14]
 80152d4:	4413      	add	r3, r2
 80152d6:	687a      	ldr	r2, [r7, #4]
 80152d8:	7952      	ldrb	r2, [r2, #5]
 80152da:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	6899      	ldr	r1, [r3, #8]
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	681a      	ldr	r2, [r3, #0]
 80152e4:	89fb      	ldrh	r3, [r7, #14]
 80152e6:	1c58      	adds	r0, r3, #1
 80152e8:	81f8      	strh	r0, [r7, #14]
 80152ea:	4413      	add	r3, r2
 80152ec:	b2ca      	uxtb	r2, r1
 80152ee:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	689b      	ldr	r3, [r3, #8]
 80152f4:	0a19      	lsrs	r1, r3, #8
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	681a      	ldr	r2, [r3, #0]
 80152fa:	89fb      	ldrh	r3, [r7, #14]
 80152fc:	1c58      	adds	r0, r3, #1
 80152fe:	81f8      	strh	r0, [r7, #14]
 8015300:	4413      	add	r3, r2
 8015302:	b2ca      	uxtb	r2, r1
 8015304:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	689b      	ldr	r3, [r3, #8]
 801530a:	0c19      	lsrs	r1, r3, #16
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681a      	ldr	r2, [r3, #0]
 8015310:	89fb      	ldrh	r3, [r7, #14]
 8015312:	1c58      	adds	r0, r3, #1
 8015314:	81f8      	strh	r0, [r7, #14]
 8015316:	4413      	add	r3, r2
 8015318:	b2ca      	uxtb	r2, r1
 801531a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	689b      	ldr	r3, [r3, #8]
 8015320:	0e19      	lsrs	r1, r3, #24
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	681a      	ldr	r2, [r3, #0]
 8015326:	89fb      	ldrh	r3, [r7, #14]
 8015328:	1c58      	adds	r0, r3, #1
 801532a:	81f8      	strh	r0, [r7, #14]
 801532c:	4413      	add	r3, r2
 801532e:	b2ca      	uxtb	r2, r1
 8015330:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	681a      	ldr	r2, [r3, #0]
 8015336:	89fb      	ldrh	r3, [r7, #14]
 8015338:	1c59      	adds	r1, r3, #1
 801533a:	81f9      	strh	r1, [r7, #14]
 801533c:	4413      	add	r3, r2
 801533e:	687a      	ldr	r2, [r7, #4]
 8015340:	7b12      	ldrb	r2, [r2, #12]
 8015342:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	89d9      	ldrh	r1, [r3, #14]
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	681a      	ldr	r2, [r3, #0]
 801534c:	89fb      	ldrh	r3, [r7, #14]
 801534e:	1c58      	adds	r0, r3, #1
 8015350:	81f8      	strh	r0, [r7, #14]
 8015352:	4413      	add	r3, r2
 8015354:	b2ca      	uxtb	r2, r1
 8015356:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	89db      	ldrh	r3, [r3, #14]
 801535c:	0a1b      	lsrs	r3, r3, #8
 801535e:	b299      	uxth	r1, r3
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	681a      	ldr	r2, [r3, #0]
 8015364:	89fb      	ldrh	r3, [r7, #14]
 8015366:	1c58      	adds	r0, r3, #1
 8015368:	81f8      	strh	r0, [r7, #14]
 801536a:	4413      	add	r3, r2
 801536c:	b2ca      	uxtb	r2, r1
 801536e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	681a      	ldr	r2, [r3, #0]
 8015374:	89fb      	ldrh	r3, [r7, #14]
 8015376:	18d0      	adds	r0, r2, r3
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f103 0110 	add.w	r1, r3, #16
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	7b1b      	ldrb	r3, [r3, #12]
 8015382:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015386:	b2db      	uxtb	r3, r3
 8015388:	461a      	mov	r2, r3
 801538a:	f002 fb10 	bl	80179ae <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	7b1b      	ldrb	r3, [r3, #12]
 8015392:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015396:	b2db      	uxtb	r3, r3
 8015398:	461a      	mov	r2, r3
 801539a:	89fb      	ldrh	r3, [r7, #14]
 801539c:	4413      	add	r3, r2
 801539e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d009      	beq.n	80153be <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	681a      	ldr	r2, [r3, #0]
 80153ae:	89fb      	ldrh	r3, [r7, #14]
 80153b0:	1c59      	adds	r1, r3, #1
 80153b2:	81f9      	strh	r1, [r7, #14]
 80153b4:	4413      	add	r3, r2
 80153b6:	687a      	ldr	r2, [r7, #4]
 80153b8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80153bc:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	681a      	ldr	r2, [r3, #0]
 80153c2:	89fb      	ldrh	r3, [r7, #14]
 80153c4:	18d0      	adds	r0, r2, r3
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80153d0:	461a      	mov	r2, r3
 80153d2:	f002 faec 	bl	80179ae <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80153dc:	461a      	mov	r2, r3
 80153de:	89fb      	ldrh	r3, [r7, #14]
 80153e0:	4413      	add	r3, r2
 80153e2:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	681a      	ldr	r2, [r3, #0]
 80153ec:	89fb      	ldrh	r3, [r7, #14]
 80153ee:	1c58      	adds	r0, r3, #1
 80153f0:	81f8      	strh	r0, [r7, #14]
 80153f2:	4413      	add	r3, r2
 80153f4:	b2ca      	uxtb	r2, r1
 80153f6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153fc:	0a19      	lsrs	r1, r3, #8
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	681a      	ldr	r2, [r3, #0]
 8015402:	89fb      	ldrh	r3, [r7, #14]
 8015404:	1c58      	adds	r0, r3, #1
 8015406:	81f8      	strh	r0, [r7, #14]
 8015408:	4413      	add	r3, r2
 801540a:	b2ca      	uxtb	r2, r1
 801540c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015412:	0c19      	lsrs	r1, r3, #16
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	681a      	ldr	r2, [r3, #0]
 8015418:	89fb      	ldrh	r3, [r7, #14]
 801541a:	1c58      	adds	r0, r3, #1
 801541c:	81f8      	strh	r0, [r7, #14]
 801541e:	4413      	add	r3, r2
 8015420:	b2ca      	uxtb	r2, r1
 8015422:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015428:	0e19      	lsrs	r1, r3, #24
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	681a      	ldr	r2, [r3, #0]
 801542e:	89fb      	ldrh	r3, [r7, #14]
 8015430:	1c58      	adds	r0, r3, #1
 8015432:	81f8      	strh	r0, [r7, #14]
 8015434:	4413      	add	r3, r2
 8015436:	b2ca      	uxtb	r2, r1
 8015438:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801543a:	89fb      	ldrh	r3, [r7, #14]
 801543c:	b2da      	uxtb	r2, r3
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015442:	2300      	movs	r3, #0
}
 8015444:	4618      	mov	r0, r3
 8015446:	3710      	adds	r7, #16
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}

0801544c <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801544c:	b480      	push	{r7}
 801544e:	b083      	sub	sp, #12
 8015450:	af00      	add	r7, sp, #0
 8015452:	4603      	mov	r3, r0
 8015454:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015456:	79fb      	ldrb	r3, [r7, #7]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d101      	bne.n	8015460 <RegionIsActive+0x14>
    {
        AS923_IS_ACTIVE( );
 801545c:	2301      	movs	r3, #1
 801545e:	e000      	b.n	8015462 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8015460:	2300      	movs	r3, #0
        }
    }
}
 8015462:	4618      	mov	r0, r3
 8015464:	370c      	adds	r7, #12
 8015466:	46bd      	mov	sp, r7
 8015468:	bc80      	pop	{r7}
 801546a:	4770      	bx	lr

0801546c <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b084      	sub	sp, #16
 8015470:	af00      	add	r7, sp, #0
 8015472:	4603      	mov	r3, r0
 8015474:	6039      	str	r1, [r7, #0]
 8015476:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8015478:	2300      	movs	r3, #0
 801547a:	60bb      	str	r3, [r7, #8]
    switch( region )
 801547c:	79fb      	ldrb	r3, [r7, #7]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d105      	bne.n	801548e <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
 8015482:	6838      	ldr	r0, [r7, #0]
 8015484:	f000 f9ec 	bl	8015860 <RegionAS923GetPhyParam>
 8015488:	4603      	mov	r3, r0
 801548a:	60fb      	str	r3, [r7, #12]
 801548c:	e001      	b.n	8015492 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801548e:	68bb      	ldr	r3, [r7, #8]
 8015490:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	4618      	mov	r0, r3
 8015496:	3710      	adds	r7, #16
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}

0801549c <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b082      	sub	sp, #8
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	4603      	mov	r3, r0
 80154a4:	6039      	str	r1, [r7, #0]
 80154a6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80154a8:	79fb      	ldrb	r3, [r7, #7]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d103      	bne.n	80154b6 <RegionSetBandTxDone+0x1a>
    {
        AS923_SET_BAND_TX_DONE( );
 80154ae:	6838      	ldr	r0, [r7, #0]
 80154b0:	f000 fb4c 	bl	8015b4c <RegionAS923SetBandTxDone>
 80154b4:	e000      	b.n	80154b8 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80154b6:	bf00      	nop
        }
    }
}
 80154b8:	3708      	adds	r7, #8
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}

080154be <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80154be:	b580      	push	{r7, lr}
 80154c0:	b082      	sub	sp, #8
 80154c2:	af00      	add	r7, sp, #0
 80154c4:	4603      	mov	r3, r0
 80154c6:	6039      	str	r1, [r7, #0]
 80154c8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80154ca:	79fb      	ldrb	r3, [r7, #7]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d103      	bne.n	80154d8 <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
 80154d0:	6838      	ldr	r0, [r7, #0]
 80154d2:	f000 fb67 	bl	8015ba4 <RegionAS923InitDefaults>
 80154d6:	e000      	b.n	80154da <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80154d8:	bf00      	nop
        }
    }
}
 80154da:	bf00      	nop
 80154dc:	3708      	adds	r7, #8
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}

080154e2 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80154e2:	b580      	push	{r7, lr}
 80154e4:	b082      	sub	sp, #8
 80154e6:	af00      	add	r7, sp, #0
 80154e8:	4603      	mov	r3, r0
 80154ea:	6039      	str	r1, [r7, #0]
 80154ec:	71fb      	strb	r3, [r7, #7]
 80154ee:	4613      	mov	r3, r2
 80154f0:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80154f2:	79fb      	ldrb	r3, [r7, #7]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d106      	bne.n	8015506 <RegionVerify+0x24>
    {
        AS923_VERIFY( );
 80154f8:	79bb      	ldrb	r3, [r7, #6]
 80154fa:	4619      	mov	r1, r3
 80154fc:	6838      	ldr	r0, [r7, #0]
 80154fe:	f000 fbe3 	bl	8015cc8 <RegionAS923Verify>
 8015502:	4603      	mov	r3, r0
 8015504:	e000      	b.n	8015508 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8015506:	2300      	movs	r3, #0
        }
    }
}
 8015508:	4618      	mov	r0, r3
 801550a:	3708      	adds	r7, #8
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}

08015510 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b082      	sub	sp, #8
 8015514:	af00      	add	r7, sp, #0
 8015516:	4603      	mov	r3, r0
 8015518:	6039      	str	r1, [r7, #0]
 801551a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801551c:	79fb      	ldrb	r3, [r7, #7]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d103      	bne.n	801552a <RegionApplyCFList+0x1a>
    {
        AS923_APPLY_CF_LIST( );
 8015522:	6838      	ldr	r0, [r7, #0]
 8015524:	f000 fc6e 	bl	8015e04 <RegionAS923ApplyCFList>
 8015528:	e000      	b.n	801552c <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801552a:	bf00      	nop
        }
    }
}
 801552c:	bf00      	nop
 801552e:	3708      	adds	r7, #8
 8015530:	46bd      	mov	sp, r7
 8015532:	bd80      	pop	{r7, pc}

08015534 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b082      	sub	sp, #8
 8015538:	af00      	add	r7, sp, #0
 801553a:	4603      	mov	r3, r0
 801553c:	6039      	str	r1, [r7, #0]
 801553e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015540:	79fb      	ldrb	r3, [r7, #7]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d104      	bne.n	8015550 <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
 8015546:	6838      	ldr	r0, [r7, #0]
 8015548:	f000 fcd0 	bl	8015eec <RegionAS923ChanMaskSet>
 801554c:	4603      	mov	r3, r0
 801554e:	e000      	b.n	8015552 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8015550:	2300      	movs	r3, #0
        }
    }
}
 8015552:	4618      	mov	r0, r3
 8015554:	3708      	adds	r7, #8
 8015556:	46bd      	mov	sp, r7
 8015558:	bd80      	pop	{r7, pc}

0801555a <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801555a:	b580      	push	{r7, lr}
 801555c:	b082      	sub	sp, #8
 801555e:	af00      	add	r7, sp, #0
 8015560:	603b      	str	r3, [r7, #0]
 8015562:	4603      	mov	r3, r0
 8015564:	71fb      	strb	r3, [r7, #7]
 8015566:	460b      	mov	r3, r1
 8015568:	71bb      	strb	r3, [r7, #6]
 801556a:	4613      	mov	r3, r2
 801556c:	717b      	strb	r3, [r7, #5]
    switch( region )
 801556e:	79fb      	ldrb	r3, [r7, #7]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d107      	bne.n	8015584 <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 8015574:	7979      	ldrb	r1, [r7, #5]
 8015576:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801557a:	693b      	ldr	r3, [r7, #16]
 801557c:	683a      	ldr	r2, [r7, #0]
 801557e:	f000 fcdf 	bl	8015f40 <RegionAS923ComputeRxWindowParameters>
 8015582:	e000      	b.n	8015586 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8015584:	bf00      	nop
        }
    }
}
 8015586:	bf00      	nop
 8015588:	3708      	adds	r7, #8
 801558a:	46bd      	mov	sp, r7
 801558c:	bd80      	pop	{r7, pc}

0801558e <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801558e:	b580      	push	{r7, lr}
 8015590:	b084      	sub	sp, #16
 8015592:	af00      	add	r7, sp, #0
 8015594:	4603      	mov	r3, r0
 8015596:	60b9      	str	r1, [r7, #8]
 8015598:	607a      	str	r2, [r7, #4]
 801559a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801559c:	7bfb      	ldrb	r3, [r7, #15]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d105      	bne.n	80155ae <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
 80155a2:	6879      	ldr	r1, [r7, #4]
 80155a4:	68b8      	ldr	r0, [r7, #8]
 80155a6:	f000 fd25 	bl	8015ff4 <RegionAS923RxConfig>
 80155aa:	4603      	mov	r3, r0
 80155ac:	e000      	b.n	80155b0 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80155ae:	2300      	movs	r3, #0
        }
    }
}
 80155b0:	4618      	mov	r0, r3
 80155b2:	3710      	adds	r7, #16
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}

080155b8 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b084      	sub	sp, #16
 80155bc:	af00      	add	r7, sp, #0
 80155be:	60b9      	str	r1, [r7, #8]
 80155c0:	607a      	str	r2, [r7, #4]
 80155c2:	603b      	str	r3, [r7, #0]
 80155c4:	4603      	mov	r3, r0
 80155c6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80155c8:	7bfb      	ldrb	r3, [r7, #15]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d106      	bne.n	80155dc <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
 80155ce:	683a      	ldr	r2, [r7, #0]
 80155d0:	6879      	ldr	r1, [r7, #4]
 80155d2:	68b8      	ldr	r0, [r7, #8]
 80155d4:	f000 fdde 	bl	8016194 <RegionAS923TxConfig>
 80155d8:	4603      	mov	r3, r0
 80155da:	e000      	b.n	80155de <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80155dc:	2300      	movs	r3, #0
        }
    }
}
 80155de:	4618      	mov	r0, r3
 80155e0:	3710      	adds	r7, #16
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bd80      	pop	{r7, pc}

080155e6 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80155e6:	b580      	push	{r7, lr}
 80155e8:	b086      	sub	sp, #24
 80155ea:	af02      	add	r7, sp, #8
 80155ec:	60b9      	str	r1, [r7, #8]
 80155ee:	607a      	str	r2, [r7, #4]
 80155f0:	603b      	str	r3, [r7, #0]
 80155f2:	4603      	mov	r3, r0
 80155f4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80155f6:	7bfb      	ldrb	r3, [r7, #15]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d109      	bne.n	8015610 <RegionLinkAdrReq+0x2a>
    {
        AS923_LINK_ADR_REQ( );
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	9300      	str	r3, [sp, #0]
 8015600:	69bb      	ldr	r3, [r7, #24]
 8015602:	683a      	ldr	r2, [r7, #0]
 8015604:	6879      	ldr	r1, [r7, #4]
 8015606:	68b8      	ldr	r0, [r7, #8]
 8015608:	f000 fe94 	bl	8016334 <RegionAS923LinkAdrReq>
 801560c:	4603      	mov	r3, r0
 801560e:	e000      	b.n	8015612 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8015610:	2300      	movs	r3, #0
        }
    }
}
 8015612:	4618      	mov	r0, r3
 8015614:	3710      	adds	r7, #16
 8015616:	46bd      	mov	sp, r7
 8015618:	bd80      	pop	{r7, pc}

0801561a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801561a:	b580      	push	{r7, lr}
 801561c:	b082      	sub	sp, #8
 801561e:	af00      	add	r7, sp, #0
 8015620:	4603      	mov	r3, r0
 8015622:	6039      	str	r1, [r7, #0]
 8015624:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015626:	79fb      	ldrb	r3, [r7, #7]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d104      	bne.n	8015636 <RegionRxParamSetupReq+0x1c>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 801562c:	6838      	ldr	r0, [r7, #0]
 801562e:	f000 ffa3 	bl	8016578 <RegionAS923RxParamSetupReq>
 8015632:	4603      	mov	r3, r0
 8015634:	e000      	b.n	8015638 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015636:	2300      	movs	r3, #0
        }
    }
}
 8015638:	4618      	mov	r0, r3
 801563a:	3708      	adds	r7, #8
 801563c:	46bd      	mov	sp, r7
 801563e:	bd80      	pop	{r7, pc}

08015640 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b082      	sub	sp, #8
 8015644:	af00      	add	r7, sp, #0
 8015646:	4603      	mov	r3, r0
 8015648:	6039      	str	r1, [r7, #0]
 801564a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801564c:	79fb      	ldrb	r3, [r7, #7]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d104      	bne.n	801565c <RegionNewChannelReq+0x1c>
    {
        AS923_NEW_CHANNEL_REQ( );
 8015652:	6838      	ldr	r0, [r7, #0]
 8015654:	f000 ffc8 	bl	80165e8 <RegionAS923NewChannelReq>
 8015658:	4603      	mov	r3, r0
 801565a:	e000      	b.n	801565e <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801565c:	2300      	movs	r3, #0
        }
    }
}
 801565e:	4618      	mov	r0, r3
 8015660:	3708      	adds	r7, #8
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}

08015666 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8015666:	b580      	push	{r7, lr}
 8015668:	b082      	sub	sp, #8
 801566a:	af00      	add	r7, sp, #0
 801566c:	4603      	mov	r3, r0
 801566e:	6039      	str	r1, [r7, #0]
 8015670:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015672:	79fb      	ldrb	r3, [r7, #7]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d104      	bne.n	8015682 <RegionTxParamSetupReq+0x1c>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 8015678:	6838      	ldr	r0, [r7, #0]
 801567a:	f001 f813 	bl	80166a4 <RegionAS923TxParamSetupReq>
 801567e:	4603      	mov	r3, r0
 8015680:	e000      	b.n	8015684 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015682:	2300      	movs	r3, #0
        }
    }
}
 8015684:	4618      	mov	r0, r3
 8015686:	3708      	adds	r7, #8
 8015688:	46bd      	mov	sp, r7
 801568a:	bd80      	pop	{r7, pc}

0801568c <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b082      	sub	sp, #8
 8015690:	af00      	add	r7, sp, #0
 8015692:	4603      	mov	r3, r0
 8015694:	6039      	str	r1, [r7, #0]
 8015696:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015698:	79fb      	ldrb	r3, [r7, #7]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d104      	bne.n	80156a8 <RegionDlChannelReq+0x1c>
    {
        AS923_DL_CHANNEL_REQ( );
 801569e:	6838      	ldr	r0, [r7, #0]
 80156a0:	f001 f80a 	bl	80166b8 <RegionAS923DlChannelReq>
 80156a4:	4603      	mov	r3, r0
 80156a6:	e000      	b.n	80156aa <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80156a8:	2300      	movs	r3, #0
        }
    }
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	3708      	adds	r7, #8
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd80      	pop	{r7, pc}

080156b2 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80156b2:	b580      	push	{r7, lr}
 80156b4:	b082      	sub	sp, #8
 80156b6:	af00      	add	r7, sp, #0
 80156b8:	4603      	mov	r3, r0
 80156ba:	71fb      	strb	r3, [r7, #7]
 80156bc:	460b      	mov	r3, r1
 80156be:	71bb      	strb	r3, [r7, #6]
 80156c0:	4613      	mov	r3, r2
 80156c2:	717b      	strb	r3, [r7, #5]
    switch( region )
 80156c4:	79fb      	ldrb	r3, [r7, #7]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d108      	bne.n	80156dc <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
 80156ca:	797a      	ldrb	r2, [r7, #5]
 80156cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80156d0:	4611      	mov	r1, r2
 80156d2:	4618      	mov	r0, r3
 80156d4:	f001 f830 	bl	8016738 <RegionAS923AlternateDr>
 80156d8:	4603      	mov	r3, r0
 80156da:	e000      	b.n	80156de <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80156dc:	2300      	movs	r3, #0
        }
    }
}
 80156de:	4618      	mov	r0, r3
 80156e0:	3708      	adds	r7, #8
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}

080156e6 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80156e6:	b580      	push	{r7, lr}
 80156e8:	b084      	sub	sp, #16
 80156ea:	af00      	add	r7, sp, #0
 80156ec:	60b9      	str	r1, [r7, #8]
 80156ee:	607a      	str	r2, [r7, #4]
 80156f0:	603b      	str	r3, [r7, #0]
 80156f2:	4603      	mov	r3, r0
 80156f4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80156f6:	7bfb      	ldrb	r3, [r7, #15]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d107      	bne.n	801570c <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
 80156fc:	69bb      	ldr	r3, [r7, #24]
 80156fe:	683a      	ldr	r2, [r7, #0]
 8015700:	6879      	ldr	r1, [r7, #4]
 8015702:	68b8      	ldr	r0, [r7, #8]
 8015704:	f001 f826 	bl	8016754 <RegionAS923NextChannel>
 8015708:	4603      	mov	r3, r0
 801570a:	e000      	b.n	801570e <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801570c:	2309      	movs	r3, #9
        }
    }
}
 801570e:	4618      	mov	r0, r3
 8015710:	3710      	adds	r7, #16
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}

08015716 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015716:	b590      	push	{r4, r7, lr}
 8015718:	b083      	sub	sp, #12
 801571a:	af00      	add	r7, sp, #0
 801571c:	4604      	mov	r4, r0
 801571e:	4608      	mov	r0, r1
 8015720:	4611      	mov	r1, r2
 8015722:	461a      	mov	r2, r3
 8015724:	4623      	mov	r3, r4
 8015726:	71fb      	strb	r3, [r7, #7]
 8015728:	4603      	mov	r3, r0
 801572a:	71bb      	strb	r3, [r7, #6]
 801572c:	460b      	mov	r3, r1
 801572e:	717b      	strb	r3, [r7, #5]
 8015730:	4613      	mov	r3, r2
 8015732:	713b      	strb	r3, [r7, #4]
    switch( region )
 8015734:	79fb      	ldrb	r3, [r7, #7]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d109      	bne.n	801574e <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
 801573a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801573e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015742:	79bb      	ldrb	r3, [r7, #6]
 8015744:	4618      	mov	r0, r3
 8015746:	f001 f979 	bl	8016a3c <RegionAS923ApplyDrOffset>
 801574a:	4603      	mov	r3, r0
 801574c:	e000      	b.n	8015750 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801574e:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8015750:	4618      	mov	r0, r3
 8015752:	370c      	adds	r7, #12
 8015754:	46bd      	mov	sp, r7
 8015756:	bd90      	pop	{r4, r7, pc}

08015758 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8015758:	b480      	push	{r7}
 801575a:	b083      	sub	sp, #12
 801575c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801575e:	4b04      	ldr	r3, [pc, #16]	@ (8015770 <RegionGetVersion+0x18>)
 8015760:	607b      	str	r3, [r7, #4]

    return version;
 8015762:	687b      	ldr	r3, [r7, #4]
}
 8015764:	4618      	mov	r0, r3
 8015766:	370c      	adds	r7, #12
 8015768:	46bd      	mov	sp, r7
 801576a:	bc80      	pop	{r7}
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop
 8015770:	02010001 	.word	0x02010001

08015774 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b082      	sub	sp, #8
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801577c:	4b0d      	ldr	r3, [pc, #52]	@ (80157b4 <VerifyRfFreq+0x40>)
 801577e:	6a1b      	ldr	r3, [r3, #32]
 8015780:	6878      	ldr	r0, [r7, #4]
 8015782:	4798      	blx	r3
 8015784:	4603      	mov	r3, r0
 8015786:	f083 0301 	eor.w	r3, r3, #1
 801578a:	b2db      	uxtb	r3, r3
 801578c:	2b00      	cmp	r3, #0
 801578e:	d001      	beq.n	8015794 <VerifyRfFreq+0x20>
    {
        return false;
 8015790:	2300      	movs	r3, #0
 8015792:	e00a      	b.n	80157aa <VerifyRfFreq+0x36>
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	4a08      	ldr	r2, [pc, #32]	@ (80157b8 <VerifyRfFreq+0x44>)
 8015798:	4293      	cmp	r3, r2
 801579a:	d903      	bls.n	80157a4 <VerifyRfFreq+0x30>
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	4a07      	ldr	r2, [pc, #28]	@ (80157bc <VerifyRfFreq+0x48>)
 80157a0:	4293      	cmp	r3, r2
 80157a2:	d901      	bls.n	80157a8 <VerifyRfFreq+0x34>
    {
        return false;
 80157a4:	2300      	movs	r3, #0
 80157a6:	e000      	b.n	80157aa <VerifyRfFreq+0x36>
    }
    return true;
 80157a8:	2301      	movs	r3, #1
}
 80157aa:	4618      	mov	r0, r3
 80157ac:	3708      	adds	r7, #8
 80157ae:	46bd      	mov	sp, r7
 80157b0:	bd80      	pop	{r7, pc}
 80157b2:	bf00      	nop
 80157b4:	0801fedc 	.word	0x0801fedc
 80157b8:	3689cabf 	.word	0x3689cabf
 80157bc:	37502800 	.word	0x37502800

080157c0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80157c0:	b590      	push	{r4, r7, lr}
 80157c2:	b08b      	sub	sp, #44	@ 0x2c
 80157c4:	af04      	add	r7, sp, #16
 80157c6:	4603      	mov	r3, r0
 80157c8:	460a      	mov	r2, r1
 80157ca:	71fb      	strb	r3, [r7, #7]
 80157cc:	4613      	mov	r3, r2
 80157ce:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAS923[datarate];
 80157d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157d4:	4a1f      	ldr	r2, [pc, #124]	@ (8015854 <GetTimeOnAir+0x94>)
 80157d6:	5cd3      	ldrb	r3, [r2, r3]
 80157d8:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 80157da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157de:	491e      	ldr	r1, [pc, #120]	@ (8015858 <GetTimeOnAir+0x98>)
 80157e0:	4618      	mov	r0, r3
 80157e2:	f002 f835 	bl	8017850 <RegionCommonGetBandwidth>
 80157e6:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80157e8:	2300      	movs	r3, #0
 80157ea:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80157ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157f0:	2b07      	cmp	r3, #7
 80157f2:	d118      	bne.n	8015826 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80157f4:	4b19      	ldr	r3, [pc, #100]	@ (801585c <GetTimeOnAir+0x9c>)
 80157f6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80157f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80157fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015800:	fb02 f303 	mul.w	r3, r2, r3
 8015804:	4619      	mov	r1, r3
 8015806:	88bb      	ldrh	r3, [r7, #4]
 8015808:	b2db      	uxtb	r3, r3
 801580a:	2201      	movs	r2, #1
 801580c:	9203      	str	r2, [sp, #12]
 801580e:	9302      	str	r3, [sp, #8]
 8015810:	2300      	movs	r3, #0
 8015812:	9301      	str	r3, [sp, #4]
 8015814:	2305      	movs	r3, #5
 8015816:	9300      	str	r3, [sp, #0]
 8015818:	2300      	movs	r3, #0
 801581a:	460a      	mov	r2, r1
 801581c:	68f9      	ldr	r1, [r7, #12]
 801581e:	2000      	movs	r0, #0
 8015820:	47a0      	blx	r4
 8015822:	6178      	str	r0, [r7, #20]
 8015824:	e011      	b.n	801584a <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8015826:	4b0d      	ldr	r3, [pc, #52]	@ (801585c <GetTimeOnAir+0x9c>)
 8015828:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801582a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801582e:	88bb      	ldrh	r3, [r7, #4]
 8015830:	b2db      	uxtb	r3, r3
 8015832:	2101      	movs	r1, #1
 8015834:	9103      	str	r1, [sp, #12]
 8015836:	9302      	str	r3, [sp, #8]
 8015838:	2300      	movs	r3, #0
 801583a:	9301      	str	r3, [sp, #4]
 801583c:	2308      	movs	r3, #8
 801583e:	9300      	str	r3, [sp, #0]
 8015840:	2301      	movs	r3, #1
 8015842:	68f9      	ldr	r1, [r7, #12]
 8015844:	2001      	movs	r0, #1
 8015846:	47a0      	blx	r4
 8015848:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801584a:	697b      	ldr	r3, [r7, #20]
}
 801584c:	4618      	mov	r0, r3
 801584e:	371c      	adds	r7, #28
 8015850:	46bd      	mov	sp, r7
 8015852:	bd90      	pop	{r4, r7, pc}
 8015854:	0801fe1c 	.word	0x0801fe1c
 8015858:	0801fe24 	.word	0x0801fe24
 801585c:	0801fedc 	.word	0x0801fedc

08015860 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b088      	sub	sp, #32
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015868:	2300      	movs	r3, #0
 801586a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	781b      	ldrb	r3, [r3, #0]
 8015870:	3b01      	subs	r3, #1
 8015872:	2b37      	cmp	r3, #55	@ 0x37
 8015874:	f200 814e 	bhi.w	8015b14 <RegionAS923GetPhyParam+0x2b4>
 8015878:	a201      	add	r2, pc, #4	@ (adr r2, 8015880 <RegionAS923GetPhyParam+0x20>)
 801587a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801587e:	bf00      	nop
 8015880:	08015961 	.word	0x08015961
 8015884:	08015975 	.word	0x08015975
 8015888:	08015b15 	.word	0x08015b15
 801588c:	08015b15 	.word	0x08015b15
 8015890:	08015b15 	.word	0x08015b15
 8015894:	08015989 	.word	0x08015989
 8015898:	08015b15 	.word	0x08015b15
 801589c:	080159cf 	.word	0x080159cf
 80158a0:	08015b15 	.word	0x08015b15
 80158a4:	080159d5 	.word	0x080159d5
 80158a8:	080159db 	.word	0x080159db
 80158ac:	080159e1 	.word	0x080159e1
 80158b0:	080159e7 	.word	0x080159e7
 80158b4:	08015a0f 	.word	0x08015a0f
 80158b8:	08015a37 	.word	0x08015a37
 80158bc:	08015a3d 	.word	0x08015a3d
 80158c0:	08015a45 	.word	0x08015a45
 80158c4:	08015a4d 	.word	0x08015a4d
 80158c8:	08015a55 	.word	0x08015a55
 80158cc:	08015a5d 	.word	0x08015a5d
 80158d0:	08015a65 	.word	0x08015a65
 80158d4:	08015a79 	.word	0x08015a79
 80158d8:	08015a7f 	.word	0x08015a7f
 80158dc:	08015a85 	.word	0x08015a85
 80158e0:	08015a8b 	.word	0x08015a8b
 80158e4:	08015a97 	.word	0x08015a97
 80158e8:	08015aa3 	.word	0x08015aa3
 80158ec:	08015aa9 	.word	0x08015aa9
 80158f0:	08015ab1 	.word	0x08015ab1
 80158f4:	08015ab7 	.word	0x08015ab7
 80158f8:	08015abd 	.word	0x08015abd
 80158fc:	08015ac5 	.word	0x08015ac5
 8015900:	0801598f 	.word	0x0801598f
 8015904:	08015b15 	.word	0x08015b15
 8015908:	08015b15 	.word	0x08015b15
 801590c:	08015b15 	.word	0x08015b15
 8015910:	08015b15 	.word	0x08015b15
 8015914:	08015b15 	.word	0x08015b15
 8015918:	08015b15 	.word	0x08015b15
 801591c:	08015b15 	.word	0x08015b15
 8015920:	08015b15 	.word	0x08015b15
 8015924:	08015b15 	.word	0x08015b15
 8015928:	08015b15 	.word	0x08015b15
 801592c:	08015b15 	.word	0x08015b15
 8015930:	08015b15 	.word	0x08015b15
 8015934:	08015b15 	.word	0x08015b15
 8015938:	08015acb 	.word	0x08015acb
 801593c:	08015ad1 	.word	0x08015ad1
 8015940:	08015adf 	.word	0x08015adf
 8015944:	08015b15 	.word	0x08015b15
 8015948:	08015b15 	.word	0x08015b15
 801594c:	08015ae5 	.word	0x08015ae5
 8015950:	08015aeb 	.word	0x08015aeb
 8015954:	08015b15 	.word	0x08015b15
 8015958:	08015af1 	.word	0x08015af1
 801595c:	08015b01 	.word	0x08015b01
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	78db      	ldrb	r3, [r3, #3]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d102      	bne.n	801596e <RegionAS923GetPhyParam+0x10e>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 8015968:	2300      	movs	r3, #0
 801596a:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 801596c:	e0d3      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 801596e:	2302      	movs	r3, #2
 8015970:	61bb      	str	r3, [r7, #24]
            break;
 8015972:	e0d0      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	789b      	ldrb	r3, [r3, #2]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d102      	bne.n	8015982 <RegionAS923GetPhyParam+0x122>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 801597c:	2300      	movs	r3, #0
 801597e:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8015980:	e0c9      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8015982:	2302      	movs	r3, #2
 8015984:	61bb      	str	r3, [r7, #24]
            break;
 8015986:	e0c6      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8015988:	2302      	movs	r3, #2
 801598a:	61bb      	str	r3, [r7, #24]
            break;
 801598c:	e0c3      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015994:	733b      	strb	r3, [r7, #12]
 8015996:	2307      	movs	r3, #7
 8015998:	737b      	strb	r3, [r7, #13]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	789b      	ldrb	r3, [r3, #2]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d101      	bne.n	80159a6 <RegionAS923GetPhyParam+0x146>
 80159a2:	2300      	movs	r3, #0
 80159a4:	e000      	b.n	80159a8 <RegionAS923GetPhyParam+0x148>
 80159a6:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80159a8:	73bb      	strb	r3, [r7, #14]
 80159aa:	2310      	movs	r3, #16
 80159ac:	73fb      	strb	r3, [r7, #15]
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80159ae:	4b5d      	ldr	r3, [pc, #372]	@ (8015b24 <RegionAS923GetPhyParam+0x2c4>)
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80159b6:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80159b8:	4b5a      	ldr	r3, [pc, #360]	@ (8015b24 <RegionAS923GetPhyParam+0x2c4>)
 80159ba:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80159bc:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80159be:	f107 030c 	add.w	r3, r7, #12
 80159c2:	4618      	mov	r0, r3
 80159c4:	f001 fef1 	bl	80177aa <RegionCommonGetNextLowerTxDr>
 80159c8:	4603      	mov	r3, r0
 80159ca:	61bb      	str	r3, [r7, #24]
            break;
 80159cc:	e0a3      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 80159ce:	2300      	movs	r3, #0
 80159d0:	61bb      	str	r3, [r7, #24]
            break;
 80159d2:	e0a0      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 80159d4:	2300      	movs	r3, #0
 80159d6:	61bb      	str	r3, [r7, #24]
            break;
 80159d8:	e09d      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80159da:	2340      	movs	r3, #64	@ 0x40
 80159dc:	61bb      	str	r3, [r7, #24]
            break;
 80159de:	e09a      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80159e0:	2320      	movs	r3, #32
 80159e2:	61bb      	str	r3, [r7, #24]
            break;
 80159e4:	e097      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	789b      	ldrb	r3, [r3, #2]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d107      	bne.n	80159fe <RegionAS923GetPhyParam+0x19e>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80159f4:	461a      	mov	r2, r3
 80159f6:	4b4c      	ldr	r3, [pc, #304]	@ (8015b28 <RegionAS923GetPhyParam+0x2c8>)
 80159f8:	5c9b      	ldrb	r3, [r3, r2]
 80159fa:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 80159fc:	e08b      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a04:	461a      	mov	r2, r3
 8015a06:	4b49      	ldr	r3, [pc, #292]	@ (8015b2c <RegionAS923GetPhyParam+0x2cc>)
 8015a08:	5c9b      	ldrb	r3, [r3, r2]
 8015a0a:	61bb      	str	r3, [r7, #24]
            break;
 8015a0c:	e083      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	789b      	ldrb	r3, [r3, #2]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d107      	bne.n	8015a26 <RegionAS923GetPhyParam+0x1c6>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a1c:	461a      	mov	r2, r3
 8015a1e:	4b44      	ldr	r3, [pc, #272]	@ (8015b30 <RegionAS923GetPhyParam+0x2d0>)
 8015a20:	5c9b      	ldrb	r3, [r3, r2]
 8015a22:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 8015a24:	e077      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a2c:	461a      	mov	r2, r3
 8015a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8015b2c <RegionAS923GetPhyParam+0x2cc>)
 8015a30:	5c9b      	ldrb	r3, [r3, r2]
 8015a32:	61bb      	str	r3, [r7, #24]
            break;
 8015a34:	e06f      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 8015a36:	2300      	movs	r3, #0
 8015a38:	61bb      	str	r3, [r7, #24]
            break;
 8015a3a:	e06c      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 8015a3c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8015a40:	61bb      	str	r3, [r7, #24]
            break;
 8015a42:	e068      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8015a44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015a48:	61bb      	str	r3, [r7, #24]
            break;
 8015a4a:	e064      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8015a4c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8015a50:	61bb      	str	r3, [r7, #24]
            break;
 8015a52:	e060      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8015a54:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015a58:	61bb      	str	r3, [r7, #24]
            break;
 8015a5a:	e05c      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8015a5c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8015a60:	61bb      	str	r3, [r7, #24]
            break;
 8015a62:	e058      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8015a64:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015a68:	4832      	ldr	r0, [pc, #200]	@ (8015b34 <RegionAS923GetPhyParam+0x2d4>)
 8015a6a:	f001 ff89 	bl	8017980 <randr>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8015a74:	61bb      	str	r3, [r7, #24]
            break;
 8015a76:	e04e      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	61bb      	str	r3, [r7, #24]
            break;
 8015a7c:	e04b      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 8015a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8015b38 <RegionAS923GetPhyParam+0x2d8>)
 8015a80:	61bb      	str	r3, [r7, #24]
            break;
 8015a82:	e048      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 8015a84:	2302      	movs	r3, #2
 8015a86:	61bb      	str	r3, [r7, #24]
            break;
 8015a88:	e045      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015a8a:	4b26      	ldr	r3, [pc, #152]	@ (8015b24 <RegionAS923GetPhyParam+0x2c4>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015a92:	61bb      	str	r3, [r7, #24]
            break;
 8015a94:	e03f      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8015a96:	4b23      	ldr	r3, [pc, #140]	@ (8015b24 <RegionAS923GetPhyParam+0x2c4>)
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015a9e:	61bb      	str	r3, [r7, #24]
            break;
 8015aa0:	e039      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 8015aa2:	2310      	movs	r3, #16
 8015aa4:	61bb      	str	r3, [r7, #24]
            break;
 8015aa6:	e036      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8015b24 <RegionAS923GetPhyParam+0x2c4>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	61bb      	str	r3, [r7, #24]
            break;
 8015aae:	e032      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8015ab0:	2301      	movs	r3, #1
 8015ab2:	61bb      	str	r3, [r7, #24]
            break;
 8015ab4:	e02f      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	61bb      	str	r3, [r7, #24]
            break;
 8015aba:	e02c      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 8015abc:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8015ac0:	61bb      	str	r3, [r7, #24]
            break;
 8015ac2:	e028      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 8015ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8015b3c <RegionAS923GetPhyParam+0x2dc>)
 8015ac6:	61bb      	str	r3, [r7, #24]
            break;
 8015ac8:	e025      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 8015aca:	4b1d      	ldr	r3, [pc, #116]	@ (8015b40 <RegionAS923GetPhyParam+0x2e0>)
 8015acc:	61bb      	str	r3, [r7, #24]
            break;
 8015ace:	e022      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 8015ad0:	2311      	movs	r3, #17
 8015ad2:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 8015ad4:	2301      	movs	r3, #1
 8015ad6:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 8015ad8:	2300      	movs	r3, #0
 8015ada:	76bb      	strb	r3, [r7, #26]
            break;
 8015adc:	e01b      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 8015ade:	2303      	movs	r3, #3
 8015ae0:	61bb      	str	r3, [r7, #24]
            break;
 8015ae2:	e018      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 8015ae4:	4b16      	ldr	r3, [pc, #88]	@ (8015b40 <RegionAS923GetPhyParam+0x2e0>)
 8015ae6:	61bb      	str	r3, [r7, #24]
#endif /* REGION_VERSION */
            break;
 8015ae8:	e015      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 8015aea:	2303      	movs	r3, #3
 8015aec:	61bb      	str	r3, [r7, #24]
            break;
 8015aee:	e012      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015af6:	461a      	mov	r2, r3
 8015af8:	4b12      	ldr	r3, [pc, #72]	@ (8015b44 <RegionAS923GetPhyParam+0x2e4>)
 8015afa:	5c9b      	ldrb	r3, [r3, r2]
 8015afc:	61bb      	str	r3, [r7, #24]
            break;
 8015afe:	e00a      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015b06:	4910      	ldr	r1, [pc, #64]	@ (8015b48 <RegionAS923GetPhyParam+0x2e8>)
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f001 fea1 	bl	8017850 <RegionCommonGetBandwidth>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	61bb      	str	r3, [r7, #24]
            break;
 8015b12:	e000      	b.n	8015b16 <RegionAS923GetPhyParam+0x2b6>
        }
        default:
        {
            break;
 8015b14:	bf00      	nop
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 8015b16:	69bb      	ldr	r3, [r7, #24]
 8015b18:	61fb      	str	r3, [r7, #28]
 8015b1a:	69fb      	ldr	r3, [r7, #28]
}
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	3720      	adds	r7, #32
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bd80      	pop	{r7, pc}
 8015b24:	20001c30 	.word	0x20001c30
 8015b28:	0801fe44 	.word	0x0801fe44
 8015b2c:	0801fe54 	.word	0x0801fe54
 8015b30:	0801fe4c 	.word	0x0801fe4c
 8015b34:	fffffc18 	.word	0xfffffc18
 8015b38:	3706ea00 	.word	0x3706ea00
 8015b3c:	4009999a 	.word	0x4009999a
 8015b40:	3709f740 	.word	0x3709f740
 8015b44:	0801fe1c 	.word	0x0801fe1c
 8015b48:	0801fe24 	.word	0x0801fe24

08015b4c <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015b4c:	b590      	push	{r4, r7, lr}
 8015b4e:	b085      	sub	sp, #20
 8015b50:	af02      	add	r7, sp, #8
 8015b52:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8015b54:	4b11      	ldr	r3, [pc, #68]	@ (8015b9c <RegionAS923SetBandTxDone+0x50>)
 8015b56:	681a      	ldr	r2, [r3, #0]
 8015b58:	4b11      	ldr	r3, [pc, #68]	@ (8015ba0 <RegionAS923SetBandTxDone+0x54>)
 8015b5a:	6819      	ldr	r1, [r3, #0]
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	781b      	ldrb	r3, [r3, #0]
 8015b60:	4618      	mov	r0, r3
 8015b62:	4603      	mov	r3, r0
 8015b64:	005b      	lsls	r3, r3, #1
 8015b66:	4403      	add	r3, r0
 8015b68:	009b      	lsls	r3, r3, #2
 8015b6a:	440b      	add	r3, r1
 8015b6c:	3309      	adds	r3, #9
 8015b6e:	781b      	ldrb	r3, [r3, #0]
 8015b70:	4619      	mov	r1, r3
 8015b72:	460b      	mov	r3, r1
 8015b74:	005b      	lsls	r3, r3, #1
 8015b76:	440b      	add	r3, r1
 8015b78:	00db      	lsls	r3, r3, #3
 8015b7a:	18d0      	adds	r0, r2, r3
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	6899      	ldr	r1, [r3, #8]
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	785c      	ldrb	r4, [r3, #1]
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	691a      	ldr	r2, [r3, #16]
 8015b88:	9200      	str	r2, [sp, #0]
 8015b8a:	68db      	ldr	r3, [r3, #12]
 8015b8c:	4622      	mov	r2, r4
 8015b8e:	f001 f9e5 	bl	8016f5c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 8015b92:	bf00      	nop
 8015b94:	370c      	adds	r7, #12
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd90      	pop	{r4, r7, pc}
 8015b9a:	bf00      	nop
 8015b9c:	20001c34 	.word	0x20001c34
 8015ba0:	20001c30 	.word	0x20001c30

08015ba4 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b08e      	sub	sp, #56	@ 0x38
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 8015bac:	2364      	movs	r3, #100	@ 0x64
 8015bae:	843b      	strh	r3, [r7, #32]
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8015bba:	2300      	movs	r3, #0
 8015bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    {
        AS923_BAND0
    };

    switch( params->Type )
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	7b1b      	ldrb	r3, [r3, #12]
 8015bd0:	2b02      	cmp	r3, #2
 8015bd2:	d05e      	beq.n	8015c92 <RegionAS923InitDefaults+0xee>
 8015bd4:	2b02      	cmp	r3, #2
 8015bd6:	dc6b      	bgt.n	8015cb0 <RegionAS923InitDefaults+0x10c>
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d002      	beq.n	8015be2 <RegionAS923InitDefaults+0x3e>
 8015bdc:	2b01      	cmp	r3, #1
 8015bde:	d043      	beq.n	8015c68 <RegionAS923InitDefaults+0xc4>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015be0:	e066      	b.n	8015cb0 <RegionAS923InitDefaults+0x10c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d063      	beq.n	8015cb2 <RegionAS923InitDefaults+0x10e>
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	685b      	ldr	r3, [r3, #4]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d05f      	beq.n	8015cb2 <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	685b      	ldr	r3, [r3, #4]
 8015bf6:	4a30      	ldr	r2, [pc, #192]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015bf8:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	689b      	ldr	r3, [r3, #8]
 8015bfe:	4a2f      	ldr	r2, [pc, #188]	@ (8015cbc <RegionAS923InitDefaults+0x118>)
 8015c00:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 8015c02:	4b2e      	ldr	r3, [pc, #184]	@ (8015cbc <RegionAS923InitDefaults+0x118>)
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	f107 0120 	add.w	r1, r7, #32
 8015c0a:	2218      	movs	r2, #24
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f001 fece 	bl	80179ae <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 8015c12:	4b29      	ldr	r3, [pc, #164]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	4a2a      	ldr	r2, [pc, #168]	@ (8015cc0 <RegionAS923InitDefaults+0x11c>)
 8015c18:	ca07      	ldmia	r2, {r0, r1, r2}
 8015c1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 8015c1e:	4b26      	ldr	r3, [pc, #152]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	4a28      	ldr	r2, [pc, #160]	@ (8015cc4 <RegionAS923InitDefaults+0x120>)
 8015c24:	330c      	adds	r3, #12
 8015c26:	ca07      	ldmia	r2, {r0, r1, r2}
 8015c28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 8015c2c:	4b22      	ldr	r3, [pc, #136]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015c2e:	681a      	ldr	r2, [r3, #0]
 8015c30:	4b21      	ldr	r3, [pc, #132]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	6812      	ldr	r2, [r2, #0]
 8015c36:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 8015c38:	4b1f      	ldr	r3, [pc, #124]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015c3a:	681a      	ldr	r2, [r3, #0]
 8015c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	68d2      	ldr	r2, [r2, #12]
 8015c42:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 8015c44:	4b1c      	ldr	r3, [pc, #112]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	2203      	movs	r2, #3
 8015c4a:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015c56:	4b18      	ldr	r3, [pc, #96]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015c5e:	2201      	movs	r2, #1
 8015c60:	4619      	mov	r1, r3
 8015c62:	f001 f955 	bl	8016f10 <RegionCommonChanMaskCopy>
 8015c66:	e024      	b.n	8015cb2 <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8015c68:	4b13      	ldr	r3, [pc, #76]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8015c70:	4b11      	ldr	r3, [pc, #68]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	2200      	movs	r2, #0
 8015c76:	611a      	str	r2, [r3, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015c78:	4b0f      	ldr	r3, [pc, #60]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015c80:	4b0d      	ldr	r3, [pc, #52]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015c88:	2201      	movs	r2, #1
 8015c8a:	4619      	mov	r1, r3
 8015c8c:	f001 f940 	bl	8016f10 <RegionCommonChanMaskCopy>
            break;
 8015c90:	e00f      	b.n	8015cb2 <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8015c92:	4b09      	ldr	r3, [pc, #36]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8015c9a:	4b07      	ldr	r3, [pc, #28]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8015ca2:	4b05      	ldr	r3, [pc, #20]	@ (8015cb8 <RegionAS923InitDefaults+0x114>)
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	430a      	orrs	r2, r1
 8015ca8:	b292      	uxth	r2, r2
 8015caa:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8015cae:	e000      	b.n	8015cb2 <RegionAS923InitDefaults+0x10e>
            break;
 8015cb0:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8015cb2:	3738      	adds	r7, #56	@ 0x38
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	20001c30 	.word	0x20001c30
 8015cbc:	20001c34 	.word	0x20001c34
 8015cc0:	0801f844 	.word	0x0801f844
 8015cc4:	0801f850 	.word	0x0801f850

08015cc8 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b082      	sub	sp, #8
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
 8015cd0:	460b      	mov	r3, r1
 8015cd2:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AS923 )
    switch( phyAttribute )
 8015cd4:	78fb      	ldrb	r3, [r7, #3]
 8015cd6:	2b0f      	cmp	r3, #15
 8015cd8:	f200 808f 	bhi.w	8015dfa <RegionAS923Verify+0x132>
 8015cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8015ce4 <RegionAS923Verify+0x1c>)
 8015cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ce2:	bf00      	nop
 8015ce4:	08015d25 	.word	0x08015d25
 8015ce8:	08015dfb 	.word	0x08015dfb
 8015cec:	08015dfb 	.word	0x08015dfb
 8015cf0:	08015dfb 	.word	0x08015dfb
 8015cf4:	08015dfb 	.word	0x08015dfb
 8015cf8:	08015d33 	.word	0x08015d33
 8015cfc:	08015d77 	.word	0x08015d77
 8015d00:	08015d95 	.word	0x08015d95
 8015d04:	08015dfb 	.word	0x08015dfb
 8015d08:	08015dd9 	.word	0x08015dd9
 8015d0c:	08015dd9 	.word	0x08015dd9
 8015d10:	08015dfb 	.word	0x08015dfb
 8015d14:	08015dfb 	.word	0x08015dfb
 8015d18:	08015dfb 	.word	0x08015dfb
 8015d1c:	08015dfb 	.word	0x08015dfb
 8015d20:	08015df7 	.word	0x08015df7
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f7ff fd23 	bl	8015774 <VerifyRfFreq>
 8015d2e:	4603      	mov	r3, r0
 8015d30:	e064      	b.n	8015dfc <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	789b      	ldrb	r3, [r3, #2]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d10e      	bne.n	8015d58 <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	f993 3000 	ldrsb.w	r3, [r3]
 8015d40:	2207      	movs	r2, #7
 8015d42:	2100      	movs	r1, #0
 8015d44:	4618      	mov	r0, r3
 8015d46:	f001 f866 	bl	8016e16 <RegionCommonValueInRange>
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	bf14      	ite	ne
 8015d50:	2301      	movne	r3, #1
 8015d52:	2300      	moveq	r3, #0
 8015d54:	b2db      	uxtb	r3, r3
 8015d56:	e051      	b.n	8015dfc <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	f993 3000 	ldrsb.w	r3, [r3]
 8015d5e:	2207      	movs	r2, #7
 8015d60:	2102      	movs	r1, #2
 8015d62:	4618      	mov	r0, r3
 8015d64:	f001 f857 	bl	8016e16 <RegionCommonValueInRange>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	bf14      	ite	ne
 8015d6e:	2301      	movne	r3, #1
 8015d70:	2300      	moveq	r3, #0
 8015d72:	b2db      	uxtb	r3, r3
 8015d74:	e042      	b.n	8015dfc <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	f993 3000 	ldrsb.w	r3, [r3]
 8015d7c:	2205      	movs	r2, #5
 8015d7e:	2100      	movs	r1, #0
 8015d80:	4618      	mov	r0, r3
 8015d82:	f001 f848 	bl	8016e16 <RegionCommonValueInRange>
 8015d86:	4603      	mov	r3, r0
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	bf14      	ite	ne
 8015d8c:	2301      	movne	r3, #1
 8015d8e:	2300      	moveq	r3, #0
 8015d90:	b2db      	uxtb	r3, r3
 8015d92:	e033      	b.n	8015dfc <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	785b      	ldrb	r3, [r3, #1]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d10e      	bne.n	8015dba <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8015da2:	2207      	movs	r2, #7
 8015da4:	2100      	movs	r1, #0
 8015da6:	4618      	mov	r0, r3
 8015da8:	f001 f835 	bl	8016e16 <RegionCommonValueInRange>
 8015dac:	4603      	mov	r3, r0
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	bf14      	ite	ne
 8015db2:	2301      	movne	r3, #1
 8015db4:	2300      	moveq	r3, #0
 8015db6:	b2db      	uxtb	r3, r3
 8015db8:	e020      	b.n	8015dfc <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	f993 3000 	ldrsb.w	r3, [r3]
 8015dc0:	2207      	movs	r2, #7
 8015dc2:	2102      	movs	r1, #2
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f001 f826 	bl	8016e16 <RegionCommonValueInRange>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	bf14      	ite	ne
 8015dd0:	2301      	movne	r3, #1
 8015dd2:	2300      	moveq	r3, #0
 8015dd4:	b2db      	uxtb	r3, r3
 8015dd6:	e011      	b.n	8015dfc <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f993 3000 	ldrsb.w	r3, [r3]
 8015dde:	2207      	movs	r2, #7
 8015de0:	2100      	movs	r1, #0
 8015de2:	4618      	mov	r0, r3
 8015de4:	f001 f817 	bl	8016e16 <RegionCommonValueInRange>
 8015de8:	4603      	mov	r3, r0
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	bf14      	ite	ne
 8015dee:	2301      	movne	r3, #1
 8015df0:	2300      	moveq	r3, #0
 8015df2:	b2db      	uxtb	r3, r3
 8015df4:	e002      	b.n	8015dfc <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 8015df6:	2300      	movs	r3, #0
 8015df8:	e000      	b.n	8015dfc <RegionAS923Verify+0x134>
        }
        default:
            return false;
 8015dfa:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	3708      	adds	r7, #8
 8015e00:	46bd      	mov	sp, r7
 8015e02:	bd80      	pop	{r7, pc}

08015e04 <RegionAS923ApplyCFList>:

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b08a      	sub	sp, #40	@ 0x28
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015e0c:	2350      	movs	r3, #80	@ 0x50
 8015e0e:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	7a1b      	ldrb	r3, [r3, #8]
 8015e16:	2b10      	cmp	r3, #16
 8015e18:	d162      	bne.n	8015ee0 <RegionAS923ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	685b      	ldr	r3, [r3, #4]
 8015e1e:	330f      	adds	r3, #15
 8015e20:	781b      	ldrb	r3, [r3, #0]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d15e      	bne.n	8015ee4 <RegionAS923ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015e26:	2300      	movs	r3, #0
 8015e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015e2c:	2302      	movs	r3, #2
 8015e2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015e32:	e050      	b.n	8015ed6 <RegionAS923ApplyCFList+0xd2>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 8015e34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015e38:	2b06      	cmp	r3, #6
 8015e3a:	d824      	bhi.n	8015e86 <RegionAS923ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	685a      	ldr	r2, [r3, #4]
 8015e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015e44:	4413      	add	r3, r2
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8015e4a:	69ba      	ldr	r2, [r7, #24]
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	6859      	ldr	r1, [r3, #4]
 8015e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015e54:	3301      	adds	r3, #1
 8015e56:	440b      	add	r3, r1
 8015e58:	781b      	ldrb	r3, [r3, #0]
 8015e5a:	021b      	lsls	r3, r3, #8
 8015e5c:	4313      	orrs	r3, r2
 8015e5e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8015e60:	69ba      	ldr	r2, [r7, #24]
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	6859      	ldr	r1, [r3, #4]
 8015e66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015e6a:	3302      	adds	r3, #2
 8015e6c:	440b      	add	r3, r1
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	041b      	lsls	r3, r3, #16
 8015e72:	4313      	orrs	r3, r2
 8015e74:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8015e76:	69bb      	ldr	r3, [r7, #24]
 8015e78:	2264      	movs	r2, #100	@ 0x64
 8015e7a:	fb02 f303 	mul.w	r3, r2, r3
 8015e7e:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015e80:	2300      	movs	r3, #0
 8015e82:	61fb      	str	r3, [r7, #28]
 8015e84:	e006      	b.n	8015e94 <RegionAS923ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8015e86:	2300      	movs	r3, #0
 8015e88:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015e90:	2300      	movs	r3, #0
 8015e92:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015e94:	69bb      	ldr	r3, [r7, #24]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d00b      	beq.n	8015eb2 <RegionAS923ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8015e9a:	f107 0318 	add.w	r3, r7, #24
 8015e9e:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015ea0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015ea4:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 8015ea6:	f107 0310 	add.w	r3, r7, #16
 8015eaa:	4618      	mov	r0, r3
 8015eac:	f000 fd00 	bl	80168b0 <RegionAS923ChannelAdd>
 8015eb0:	e007      	b.n	8015ec2 <RegionAS923ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8015eb2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015eb6:	733b      	strb	r3, [r7, #12]

            RegionAS923ChannelsRemove( &channelRemove );
 8015eb8:	f107 030c 	add.w	r3, r7, #12
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f000 fd93 	bl	80169e8 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ec6:	3303      	adds	r3, #3
 8015ec8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015ecc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015ed0:	3301      	adds	r3, #1
 8015ed2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015ed6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015eda:	2b0f      	cmp	r3, #15
 8015edc:	d9aa      	bls.n	8015e34 <RegionAS923ApplyCFList+0x30>
 8015ede:	e002      	b.n	8015ee6 <RegionAS923ApplyCFList+0xe2>
        return;
 8015ee0:	bf00      	nop
 8015ee2:	e000      	b.n	8015ee6 <RegionAS923ApplyCFList+0xe2>
        return;
 8015ee4:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8015ee6:	3728      	adds	r7, #40	@ 0x28
 8015ee8:	46bd      	mov	sp, r7
 8015eea:	bd80      	pop	{r7, pc}

08015eec <RegionAS923ChanMaskSet>:

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b082      	sub	sp, #8
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	791b      	ldrb	r3, [r3, #4]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d002      	beq.n	8015f02 <RegionAS923ChanMaskSet+0x16>
 8015efc:	2b01      	cmp	r3, #1
 8015efe:	d00b      	beq.n	8015f18 <RegionAS923ChanMaskSet+0x2c>
 8015f00:	e015      	b.n	8015f2e <RegionAS923ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8015f02:	4b0e      	ldr	r3, [pc, #56]	@ (8015f3c <RegionAS923ChanMaskSet+0x50>)
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	2201      	movs	r2, #1
 8015f10:	4619      	mov	r1, r3
 8015f12:	f000 fffd 	bl	8016f10 <RegionCommonChanMaskCopy>
            break;
 8015f16:	e00c      	b.n	8015f32 <RegionAS923ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8015f18:	4b08      	ldr	r3, [pc, #32]	@ (8015f3c <RegionAS923ChanMaskSet+0x50>)
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	2201      	movs	r2, #1
 8015f26:	4619      	mov	r1, r3
 8015f28:	f000 fff2 	bl	8016f10 <RegionCommonChanMaskCopy>
            break;
 8015f2c:	e001      	b.n	8015f32 <RegionAS923ChanMaskSet+0x46>
        }
        default:
            return false;
 8015f2e:	2300      	movs	r3, #0
 8015f30:	e000      	b.n	8015f34 <RegionAS923ChanMaskSet+0x48>
    }
    return true;
 8015f32:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8015f34:	4618      	mov	r0, r3
 8015f36:	3708      	adds	r7, #8
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	bd80      	pop	{r7, pc}
 8015f3c:	20001c30 	.word	0x20001c30

08015f40 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b088      	sub	sp, #32
 8015f44:	af02      	add	r7, sp, #8
 8015f46:	60ba      	str	r2, [r7, #8]
 8015f48:	607b      	str	r3, [r7, #4]
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	73fb      	strb	r3, [r7, #15]
 8015f4e:	460b      	mov	r3, r1
 8015f50:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;
 8015f52:	2300      	movs	r3, #0
 8015f54:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 8015f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f5a:	2b07      	cmp	r3, #7
 8015f5c:	bfa8      	it	ge
 8015f5e:	2307      	movge	r3, #7
 8015f60:	b25a      	sxtb	r2, r3
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015f6c:	491e      	ldr	r1, [pc, #120]	@ (8015fe8 <RegionAS923ComputeRxWindowParameters+0xa8>)
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f001 fc6e 	bl	8017850 <RegionCommonGetBandwidth>
 8015f74:	4603      	mov	r3, r0
 8015f76:	b2da      	uxtb	r2, r3
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015f82:	2b07      	cmp	r3, #7
 8015f84:	d10a      	bne.n	8015f9c <RegionAS923ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015f8c:	461a      	mov	r2, r3
 8015f8e:	4b17      	ldr	r3, [pc, #92]	@ (8015fec <RegionAS923ComputeRxWindowParameters+0xac>)
 8015f90:	5c9b      	ldrb	r3, [r3, r2]
 8015f92:	4618      	mov	r0, r3
 8015f94:	f001 f9f0 	bl	8017378 <RegionCommonComputeSymbolTimeFsk>
 8015f98:	6178      	str	r0, [r7, #20]
 8015f9a:	e011      	b.n	8015fc0 <RegionAS923ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015fa2:	461a      	mov	r2, r3
 8015fa4:	4b11      	ldr	r3, [pc, #68]	@ (8015fec <RegionAS923ComputeRxWindowParameters+0xac>)
 8015fa6:	5c9a      	ldrb	r2, [r3, r2]
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015fae:	4619      	mov	r1, r3
 8015fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8015fe8 <RegionAS923ComputeRxWindowParameters+0xa8>)
 8015fb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015fb6:	4619      	mov	r1, r3
 8015fb8:	4610      	mov	r0, r2
 8015fba:	f001 f9c7 	bl	801734c <RegionCommonComputeSymbolTimeLoRa>
 8015fbe:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8015ff0 <RegionAS923ComputeRxWindowParameters+0xb0>)
 8015fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015fc4:	4798      	blx	r3
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	3308      	adds	r3, #8
 8015fca:	687a      	ldr	r2, [r7, #4]
 8015fcc:	320c      	adds	r2, #12
 8015fce:	7bb9      	ldrb	r1, [r7, #14]
 8015fd0:	9201      	str	r2, [sp, #4]
 8015fd2:	9300      	str	r3, [sp, #0]
 8015fd4:	4603      	mov	r3, r0
 8015fd6:	68ba      	ldr	r2, [r7, #8]
 8015fd8:	6978      	ldr	r0, [r7, #20]
 8015fda:	f001 f9dd 	bl	8017398 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 8015fde:	bf00      	nop
 8015fe0:	3718      	adds	r7, #24
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bd80      	pop	{r7, pc}
 8015fe6:	bf00      	nop
 8015fe8:	0801fe24 	.word	0x0801fe24
 8015fec:	0801fe1c 	.word	0x0801fe1c
 8015ff0:	0801fedc 	.word	0x0801fedc

08015ff4 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015ff4:	b5b0      	push	{r4, r5, r7, lr}
 8015ff6:	b090      	sub	sp, #64	@ 0x40
 8015ff8:	af0a      	add	r7, sp, #40	@ 0x28
 8015ffa:	6078      	str	r0, [r7, #4]
 8015ffc:	6039      	str	r1, [r7, #0]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	785b      	ldrb	r3, [r3, #1]
 8016002:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016004:	2300      	movs	r3, #0
 8016006:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8016008:	2300      	movs	r3, #0
 801600a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	685b      	ldr	r3, [r3, #4]
 8016010:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016012:	4b5a      	ldr	r3, [pc, #360]	@ (801617c <RegionAS923RxConfig+0x188>)
 8016014:	685b      	ldr	r3, [r3, #4]
 8016016:	4798      	blx	r3
 8016018:	4603      	mov	r3, r0
 801601a:	2b00      	cmp	r3, #0
 801601c:	d001      	beq.n	8016022 <RegionAS923RxConfig+0x2e>
    {
        return false;
 801601e:	2300      	movs	r3, #0
 8016020:	e0a8      	b.n	8016174 <RegionAS923RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	7cdb      	ldrb	r3, [r3, #19]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d126      	bne.n	8016078 <RegionAS923RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801602a:	4b55      	ldr	r3, [pc, #340]	@ (8016180 <RegionAS923RxConfig+0x18c>)
 801602c:	681a      	ldr	r2, [r3, #0]
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	781b      	ldrb	r3, [r3, #0]
 8016032:	4619      	mov	r1, r3
 8016034:	460b      	mov	r3, r1
 8016036:	005b      	lsls	r3, r3, #1
 8016038:	440b      	add	r3, r1
 801603a:	009b      	lsls	r3, r3, #2
 801603c:	4413      	add	r3, r2
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8016042:	4b4f      	ldr	r3, [pc, #316]	@ (8016180 <RegionAS923RxConfig+0x18c>)
 8016044:	681a      	ldr	r2, [r3, #0]
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	781b      	ldrb	r3, [r3, #0]
 801604a:	4619      	mov	r1, r3
 801604c:	460b      	mov	r3, r1
 801604e:	005b      	lsls	r3, r3, #1
 8016050:	440b      	add	r3, r1
 8016052:	009b      	lsls	r3, r3, #2
 8016054:	4413      	add	r3, r2
 8016056:	3304      	adds	r3, #4
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d00c      	beq.n	8016078 <RegionAS923RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801605e:	4b48      	ldr	r3, [pc, #288]	@ (8016180 <RegionAS923RxConfig+0x18c>)
 8016060:	681a      	ldr	r2, [r3, #0]
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	781b      	ldrb	r3, [r3, #0]
 8016066:	4619      	mov	r1, r3
 8016068:	460b      	mov	r3, r1
 801606a:	005b      	lsls	r3, r3, #1
 801606c:	440b      	add	r3, r1
 801606e:	009b      	lsls	r3, r3, #2
 8016070:	4413      	add	r3, r2
 8016072:	3304      	adds	r3, #4
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 8016078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801607c:	4a41      	ldr	r2, [pc, #260]	@ (8016184 <RegionAS923RxConfig+0x190>)
 801607e:	5cd3      	ldrb	r3, [r2, r3]
 8016080:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016082:	4b3e      	ldr	r3, [pc, #248]	@ (801617c <RegionAS923RxConfig+0x188>)
 8016084:	68db      	ldr	r3, [r3, #12]
 8016086:	6938      	ldr	r0, [r7, #16]
 8016088:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801608a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801608e:	2b07      	cmp	r3, #7
 8016090:	d128      	bne.n	80160e4 <RegionAS923RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8016092:	2300      	movs	r3, #0
 8016094:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8016096:	4b39      	ldr	r3, [pc, #228]	@ (801617c <RegionAS923RxConfig+0x188>)
 8016098:	699c      	ldr	r4, [r3, #24]
 801609a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801609e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80160a2:	fb02 f303 	mul.w	r3, r2, r3
 80160a6:	4619      	mov	r1, r3
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	689b      	ldr	r3, [r3, #8]
 80160ac:	b29b      	uxth	r3, r3
 80160ae:	687a      	ldr	r2, [r7, #4]
 80160b0:	7c92      	ldrb	r2, [r2, #18]
 80160b2:	7df8      	ldrb	r0, [r7, #23]
 80160b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80160b6:	2200      	movs	r2, #0
 80160b8:	9208      	str	r2, [sp, #32]
 80160ba:	2200      	movs	r2, #0
 80160bc:	9207      	str	r2, [sp, #28]
 80160be:	2200      	movs	r2, #0
 80160c0:	9206      	str	r2, [sp, #24]
 80160c2:	2201      	movs	r2, #1
 80160c4:	9205      	str	r2, [sp, #20]
 80160c6:	2200      	movs	r2, #0
 80160c8:	9204      	str	r2, [sp, #16]
 80160ca:	2200      	movs	r2, #0
 80160cc:	9203      	str	r2, [sp, #12]
 80160ce:	9302      	str	r3, [sp, #8]
 80160d0:	2305      	movs	r3, #5
 80160d2:	9301      	str	r3, [sp, #4]
 80160d4:	4b2c      	ldr	r3, [pc, #176]	@ (8016188 <RegionAS923RxConfig+0x194>)
 80160d6:	9300      	str	r3, [sp, #0]
 80160d8:	2300      	movs	r3, #0
 80160da:	460a      	mov	r2, r1
 80160dc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80160e0:	47a0      	blx	r4
 80160e2:	e024      	b.n	801612e <RegionAS923RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80160e4:	2301      	movs	r3, #1
 80160e6:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80160e8:	4b24      	ldr	r3, [pc, #144]	@ (801617c <RegionAS923RxConfig+0x188>)
 80160ea:	699c      	ldr	r4, [r3, #24]
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	789b      	ldrb	r3, [r3, #2]
 80160f0:	461d      	mov	r5, r3
 80160f2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	689b      	ldr	r3, [r3, #8]
 80160fa:	b29b      	uxth	r3, r3
 80160fc:	687a      	ldr	r2, [r7, #4]
 80160fe:	7c92      	ldrb	r2, [r2, #18]
 8016100:	7df8      	ldrb	r0, [r7, #23]
 8016102:	9209      	str	r2, [sp, #36]	@ 0x24
 8016104:	2201      	movs	r2, #1
 8016106:	9208      	str	r2, [sp, #32]
 8016108:	2200      	movs	r2, #0
 801610a:	9207      	str	r2, [sp, #28]
 801610c:	2200      	movs	r2, #0
 801610e:	9206      	str	r2, [sp, #24]
 8016110:	2200      	movs	r2, #0
 8016112:	9205      	str	r2, [sp, #20]
 8016114:	2200      	movs	r2, #0
 8016116:	9204      	str	r2, [sp, #16]
 8016118:	2200      	movs	r2, #0
 801611a:	9203      	str	r2, [sp, #12]
 801611c:	9302      	str	r3, [sp, #8]
 801611e:	2308      	movs	r3, #8
 8016120:	9301      	str	r3, [sp, #4]
 8016122:	2300      	movs	r3, #0
 8016124:	9300      	str	r3, [sp, #0]
 8016126:	2301      	movs	r3, #1
 8016128:	460a      	mov	r2, r1
 801612a:	4629      	mov	r1, r5
 801612c:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	7c5b      	ldrb	r3, [r3, #17]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d005      	beq.n	8016142 <RegionAS923RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 8016136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801613a:	4a14      	ldr	r2, [pc, #80]	@ (801618c <RegionAS923RxConfig+0x198>)
 801613c:	5cd3      	ldrb	r3, [r2, r3]
 801613e:	75bb      	strb	r3, [r7, #22]
 8016140:	e004      	b.n	801614c <RegionAS923RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 8016142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016146:	4a12      	ldr	r2, [pc, #72]	@ (8016190 <RegionAS923RxConfig+0x19c>)
 8016148:	5cd3      	ldrb	r3, [r2, r3]
 801614a:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801614c:	4b0b      	ldr	r3, [pc, #44]	@ (801617c <RegionAS923RxConfig+0x188>)
 801614e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016150:	7dba      	ldrb	r2, [r7, #22]
 8016152:	320d      	adds	r2, #13
 8016154:	b2d1      	uxtb	r1, r2
 8016156:	7dfa      	ldrb	r2, [r7, #23]
 8016158:	4610      	mov	r0, r2
 801615a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	7cdb      	ldrb	r3, [r3, #19]
 8016160:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016164:	6939      	ldr	r1, [r7, #16]
 8016166:	4618      	mov	r0, r3
 8016168:	f001 fb90 	bl	801788c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801616c:	683b      	ldr	r3, [r7, #0]
 801616e:	7bfa      	ldrb	r2, [r7, #15]
 8016170:	701a      	strb	r2, [r3, #0]
    return true;
 8016172:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8016174:	4618      	mov	r0, r3
 8016176:	3718      	adds	r7, #24
 8016178:	46bd      	mov	sp, r7
 801617a:	bdb0      	pop	{r4, r5, r7, pc}
 801617c:	0801fedc 	.word	0x0801fedc
 8016180:	20001c30 	.word	0x20001c30
 8016184:	0801fe1c 	.word	0x0801fe1c
 8016188:	00014585 	.word	0x00014585
 801618c:	0801fe4c 	.word	0x0801fe4c
 8016190:	0801fe44 	.word	0x0801fe44

08016194 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016194:	b590      	push	{r4, r7, lr}
 8016196:	b093      	sub	sp, #76	@ 0x4c
 8016198:	af0a      	add	r7, sp, #40	@ 0x28
 801619a:	60f8      	str	r0, [r7, #12]
 801619c:	60b9      	str	r1, [r7, #8]
 801619e:	607a      	str	r2, [r7, #4]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80161a6:	461a      	mov	r2, r3
 80161a8:	4b5d      	ldr	r3, [pc, #372]	@ (8016320 <RegionAS923TxConfig+0x18c>)
 80161aa:	5c9b      	ldrb	r3, [r3, r2]
 80161ac:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80161b4:	4b5b      	ldr	r3, [pc, #364]	@ (8016324 <RegionAS923TxConfig+0x190>)
 80161b6:	681a      	ldr	r2, [r3, #0]
 80161b8:	4b5b      	ldr	r3, [pc, #364]	@ (8016328 <RegionAS923TxConfig+0x194>)
 80161ba:	6819      	ldr	r1, [r3, #0]
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	781b      	ldrb	r3, [r3, #0]
 80161c0:	461c      	mov	r4, r3
 80161c2:	4623      	mov	r3, r4
 80161c4:	005b      	lsls	r3, r3, #1
 80161c6:	4423      	add	r3, r4
 80161c8:	009b      	lsls	r3, r3, #2
 80161ca:	440b      	add	r3, r1
 80161cc:	3309      	adds	r3, #9
 80161ce:	781b      	ldrb	r3, [r3, #0]
 80161d0:	4619      	mov	r1, r3
 80161d2:	460b      	mov	r3, r1
 80161d4:	005b      	lsls	r3, r3, #1
 80161d6:	440b      	add	r3, r1
 80161d8:	00db      	lsls	r3, r3, #3
 80161da:	4413      	add	r3, r2
 80161dc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80161e0:	4619      	mov	r1, r3
 80161e2:	f001 fb20 	bl	8017826 <RegionCommonLimitTxPower>
 80161e6:	4603      	mov	r3, r0
 80161e8:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80161f0:	494e      	ldr	r1, [pc, #312]	@ (801632c <RegionAS923TxConfig+0x198>)
 80161f2:	4618      	mov	r0, r3
 80161f4:	f001 fb2c 	bl	8017850 <RegionCommonGetBandwidth>
 80161f8:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80161fa:	2300      	movs	r3, #0
 80161fc:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	6859      	ldr	r1, [r3, #4]
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	689a      	ldr	r2, [r3, #8]
 8016206:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801620a:	4618      	mov	r0, r3
 801620c:	f001 f97c 	bl	8017508 <RegionCommonComputeTxPower>
 8016210:	4603      	mov	r3, r0
 8016212:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8016214:	4b46      	ldr	r3, [pc, #280]	@ (8016330 <RegionAS923TxConfig+0x19c>)
 8016216:	68da      	ldr	r2, [r3, #12]
 8016218:	4b43      	ldr	r3, [pc, #268]	@ (8016328 <RegionAS923TxConfig+0x194>)
 801621a:	6819      	ldr	r1, [r3, #0]
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	4618      	mov	r0, r3
 8016222:	4603      	mov	r3, r0
 8016224:	005b      	lsls	r3, r3, #1
 8016226:	4403      	add	r3, r0
 8016228:	009b      	lsls	r3, r3, #2
 801622a:	440b      	add	r3, r1
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	4618      	mov	r0, r3
 8016230:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016238:	2b07      	cmp	r3, #7
 801623a:	d124      	bne.n	8016286 <RegionAS923TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801623c:	2300      	movs	r3, #0
 801623e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8016240:	4b3b      	ldr	r3, [pc, #236]	@ (8016330 <RegionAS923TxConfig+0x19c>)
 8016242:	69dc      	ldr	r4, [r3, #28]
 8016244:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016248:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801624c:	fb02 f303 	mul.w	r3, r2, r3
 8016250:	461a      	mov	r2, r3
 8016252:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016256:	7ff8      	ldrb	r0, [r7, #31]
 8016258:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 801625c:	9308      	str	r3, [sp, #32]
 801625e:	2300      	movs	r3, #0
 8016260:	9307      	str	r3, [sp, #28]
 8016262:	2300      	movs	r3, #0
 8016264:	9306      	str	r3, [sp, #24]
 8016266:	2300      	movs	r3, #0
 8016268:	9305      	str	r3, [sp, #20]
 801626a:	2301      	movs	r3, #1
 801626c:	9304      	str	r3, [sp, #16]
 801626e:	2300      	movs	r3, #0
 8016270:	9303      	str	r3, [sp, #12]
 8016272:	2305      	movs	r3, #5
 8016274:	9302      	str	r3, [sp, #8]
 8016276:	2300      	movs	r3, #0
 8016278:	9301      	str	r3, [sp, #4]
 801627a:	9200      	str	r2, [sp, #0]
 801627c:	69bb      	ldr	r3, [r7, #24]
 801627e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8016282:	47a0      	blx	r4
 8016284:	e01d      	b.n	80162c2 <RegionAS923TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8016286:	2301      	movs	r3, #1
 8016288:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801628a:	4b29      	ldr	r3, [pc, #164]	@ (8016330 <RegionAS923TxConfig+0x19c>)
 801628c:	69dc      	ldr	r4, [r3, #28]
 801628e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016292:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016296:	7ff8      	ldrb	r0, [r7, #31]
 8016298:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 801629c:	9208      	str	r2, [sp, #32]
 801629e:	2200      	movs	r2, #0
 80162a0:	9207      	str	r2, [sp, #28]
 80162a2:	2200      	movs	r2, #0
 80162a4:	9206      	str	r2, [sp, #24]
 80162a6:	2200      	movs	r2, #0
 80162a8:	9205      	str	r2, [sp, #20]
 80162aa:	2201      	movs	r2, #1
 80162ac:	9204      	str	r2, [sp, #16]
 80162ae:	2200      	movs	r2, #0
 80162b0:	9203      	str	r2, [sp, #12]
 80162b2:	2208      	movs	r2, #8
 80162b4:	9202      	str	r2, [sp, #8]
 80162b6:	2201      	movs	r2, #1
 80162b8:	9201      	str	r2, [sp, #4]
 80162ba:	9300      	str	r3, [sp, #0]
 80162bc:	69bb      	ldr	r3, [r7, #24]
 80162be:	2200      	movs	r2, #0
 80162c0:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80162c2:	4b19      	ldr	r3, [pc, #100]	@ (8016328 <RegionAS923TxConfig+0x194>)
 80162c4:	681a      	ldr	r2, [r3, #0]
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	781b      	ldrb	r3, [r3, #0]
 80162ca:	4619      	mov	r1, r3
 80162cc:	460b      	mov	r3, r1
 80162ce:	005b      	lsls	r3, r3, #1
 80162d0:	440b      	add	r3, r1
 80162d2:	009b      	lsls	r3, r3, #2
 80162d4:	4413      	add	r3, r2
 80162d6:	681a      	ldr	r2, [r3, #0]
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80162de:	4619      	mov	r1, r3
 80162e0:	4610      	mov	r0, r2
 80162e2:	f001 fb05 	bl	80178f0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	899b      	ldrh	r3, [r3, #12]
 80162f0:	4619      	mov	r1, r3
 80162f2:	4610      	mov	r0, r2
 80162f4:	f7ff fa64 	bl	80157c0 <GetTimeOnAir>
 80162f8:	4602      	mov	r2, r0
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80162fe:	4b0c      	ldr	r3, [pc, #48]	@ (8016330 <RegionAS923TxConfig+0x19c>)
 8016300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016302:	68fa      	ldr	r2, [r7, #12]
 8016304:	8992      	ldrh	r2, [r2, #12]
 8016306:	b2d1      	uxtb	r1, r2
 8016308:	7ffa      	ldrb	r2, [r7, #31]
 801630a:	4610      	mov	r0, r2
 801630c:	4798      	blx	r3

    *txPower = txPowerLimited;
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	7f7a      	ldrb	r2, [r7, #29]
 8016312:	701a      	strb	r2, [r3, #0]
    return true;
 8016314:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8016316:	4618      	mov	r0, r3
 8016318:	3724      	adds	r7, #36	@ 0x24
 801631a:	46bd      	mov	sp, r7
 801631c:	bd90      	pop	{r4, r7, pc}
 801631e:	bf00      	nop
 8016320:	0801fe1c 	.word	0x0801fe1c
 8016324:	20001c34 	.word	0x20001c34
 8016328:	20001c30 	.word	0x20001c30
 801632c:	0801fe24 	.word	0x0801fe24
 8016330:	0801fedc 	.word	0x0801fedc

08016334 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016334:	b590      	push	{r4, r7, lr}
 8016336:	b093      	sub	sp, #76	@ 0x4c
 8016338:	af00      	add	r7, sp, #0
 801633a:	60f8      	str	r0, [r7, #12]
 801633c:	60b9      	str	r1, [r7, #8]
 801633e:	607a      	str	r2, [r7, #4]
 8016340:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8016342:	2307      	movs	r3, #7
 8016344:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016348:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801634c:	2200      	movs	r2, #0
 801634e:	601a      	str	r2, [r3, #0]
 8016350:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8016352:	2300      	movs	r3, #0
 8016354:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8016358:	2300      	movs	r3, #0
 801635a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 801635e:	2300      	movs	r3, #0
 8016360:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016362:	e085      	b.n	8016470 <RegionAS923LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	685a      	ldr	r2, [r3, #4]
 8016368:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801636c:	4413      	add	r3, r2
 801636e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8016372:	4611      	mov	r1, r2
 8016374:	4618      	mov	r0, r3
 8016376:	f000 ff0f 	bl	8017198 <RegionCommonParseLinkAdrReq>
 801637a:	4603      	mov	r3, r0
 801637c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8016380:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016384:	2b00      	cmp	r3, #0
 8016386:	d07b      	beq.n	8016480 <RegionAS923LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016388:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801638c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016390:	4413      	add	r3, r2
 8016392:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016396:	2307      	movs	r3, #7
 8016398:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 801639c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80163a0:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80163a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d109      	bne.n	80163be <RegionAS923LinkAdrReq+0x8a>
 80163aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d106      	bne.n	80163be <RegionAS923LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80163b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80163b4:	f023 0301 	bic.w	r3, r3, #1
 80163b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80163bc:	e058      	b.n	8016470 <RegionAS923LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80163be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d003      	beq.n	80163ce <RegionAS923LinkAdrReq+0x9a>
 80163c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80163ca:	2b05      	cmp	r3, #5
 80163cc:	d903      	bls.n	80163d6 <RegionAS923LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80163ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80163d2:	2b06      	cmp	r3, #6
 80163d4:	d906      	bls.n	80163e4 <RegionAS923LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80163d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80163da:	f023 0301 	bic.w	r3, r3, #1
 80163de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80163e2:	e045      	b.n	8016470 <RegionAS923LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 80163e4:	2300      	movs	r3, #0
 80163e6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80163ea:	e03d      	b.n	8016468 <RegionAS923LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80163ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80163f0:	2b06      	cmp	r3, #6
 80163f2:	d118      	bne.n	8016426 <RegionAS923LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80163f4:	4b5f      	ldr	r3, [pc, #380]	@ (8016574 <RegionAS923LinkAdrReq+0x240>)
 80163f6:	6819      	ldr	r1, [r3, #0]
 80163f8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80163fc:	4613      	mov	r3, r2
 80163fe:	005b      	lsls	r3, r3, #1
 8016400:	4413      	add	r3, r2
 8016402:	009b      	lsls	r3, r3, #2
 8016404:	440b      	add	r3, r1
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d028      	beq.n	801645e <RegionAS923LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 801640c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016410:	2201      	movs	r2, #1
 8016412:	fa02 f303 	lsl.w	r3, r2, r3
 8016416:	b21a      	sxth	r2, r3
 8016418:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801641a:	b21b      	sxth	r3, r3
 801641c:	4313      	orrs	r3, r2
 801641e:	b21b      	sxth	r3, r3
 8016420:	b29b      	uxth	r3, r3
 8016422:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8016424:	e01b      	b.n	801645e <RegionAS923LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016426:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016428:	461a      	mov	r2, r3
 801642a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801642e:	fa42 f303 	asr.w	r3, r2, r3
 8016432:	f003 0301 	and.w	r3, r3, #1
 8016436:	2b00      	cmp	r3, #0
 8016438:	d011      	beq.n	801645e <RegionAS923LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801643a:	4b4e      	ldr	r3, [pc, #312]	@ (8016574 <RegionAS923LinkAdrReq+0x240>)
 801643c:	6819      	ldr	r1, [r3, #0]
 801643e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8016442:	4613      	mov	r3, r2
 8016444:	005b      	lsls	r3, r3, #1
 8016446:	4413      	add	r3, r2
 8016448:	009b      	lsls	r3, r3, #2
 801644a:	440b      	add	r3, r1
 801644c:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801644e:	2b00      	cmp	r3, #0
 8016450:	d105      	bne.n	801645e <RegionAS923LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8016452:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016456:	f023 0301 	bic.w	r3, r3, #1
 801645a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 801645e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016462:	3301      	adds	r3, #1
 8016464:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8016468:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801646c:	2b0f      	cmp	r3, #15
 801646e:	d9bd      	bls.n	80163ec <RegionAS923LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	7a1b      	ldrb	r3, [r3, #8]
 8016474:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016478:	429a      	cmp	r2, r3
 801647a:	f4ff af73 	bcc.w	8016364 <RegionAS923LinkAdrReq+0x30>
 801647e:	e000      	b.n	8016482 <RegionAS923LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8016480:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8016482:	2302      	movs	r3, #2
 8016484:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	7a5b      	ldrb	r3, [r3, #9]
 801648c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionAS923GetPhyParam( &getPhy );
 8016490:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8016494:	4618      	mov	r0, r3
 8016496:	f7ff f9e3 	bl	8015860 <RegionAS923GetPhyParam>
 801649a:	4603      	mov	r3, r0
 801649c:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 801649e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80164a2:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	7a9b      	ldrb	r3, [r3, #10]
 80164a8:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80164aa:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 80164ae:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80164b0:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 80164b4:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80164b6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80164ba:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80164c2:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80164ca:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	7b5b      	ldrb	r3, [r3, #13]
 80164d0:	b25b      	sxtb	r3, r3
 80164d2:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 80164d4:	2310      	movs	r3, #16
 80164d6:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80164d8:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80164dc:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80164de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164e0:	b25b      	sxtb	r3, r3
 80164e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 80164e6:	2307      	movs	r3, #7
 80164e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80164ec:	4b21      	ldr	r3, [pc, #132]	@ (8016574 <RegionAS923LinkAdrReq+0x240>)
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 80164f2:	2307      	movs	r3, #7
 80164f4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 80164f8:	2300      	movs	r3, #0
 80164fa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016504:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8016508:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801650c:	1c9a      	adds	r2, r3, #2
 801650e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016512:	1c59      	adds	r1, r3, #1
 8016514:	f107 0010 	add.w	r0, r7, #16
 8016518:	4623      	mov	r3, r4
 801651a:	f000 fe8e 	bl	801723a <RegionCommonLinkAdrReqVerifyParams>
 801651e:	4603      	mov	r3, r0
 8016520:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016524:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016528:	2b07      	cmp	r3, #7
 801652a:	d10d      	bne.n	8016548 <RegionAS923LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801652c:	4b11      	ldr	r3, [pc, #68]	@ (8016574 <RegionAS923LinkAdrReq+0x240>)
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016534:	220c      	movs	r2, #12
 8016536:	2100      	movs	r1, #0
 8016538:	4618      	mov	r0, r3
 801653a:	f001 fa73 	bl	8017a24 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801653e:	4b0d      	ldr	r3, [pc, #52]	@ (8016574 <RegionAS923LinkAdrReq+0x240>)
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016544:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016548:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 801654c:	68bb      	ldr	r3, [r7, #8]
 801654e:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8016550:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016558:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801655c:	683b      	ldr	r3, [r7, #0]
 801655e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8016560:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016562:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8016566:	701a      	strb	r2, [r3, #0]

#endif /* REGION_AS923 */
    return status;
 8016568:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801656c:	4618      	mov	r0, r3
 801656e:	374c      	adds	r7, #76	@ 0x4c
 8016570:	46bd      	mov	sp, r7
 8016572:	bd90      	pop	{r4, r7, pc}
 8016574:	20001c30 	.word	0x20001c30

08016578 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b084      	sub	sp, #16
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016580:	2307      	movs	r3, #7
 8016582:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	685b      	ldr	r3, [r3, #4]
 8016588:	4618      	mov	r0, r3
 801658a:	f7ff f8f3 	bl	8015774 <VerifyRfFreq>
 801658e:	4603      	mov	r3, r0
 8016590:	f083 0301 	eor.w	r3, r3, #1
 8016594:	b2db      	uxtb	r3, r3
 8016596:	2b00      	cmp	r3, #0
 8016598:	d003      	beq.n	80165a2 <RegionAS923RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801659a:	7bfb      	ldrb	r3, [r7, #15]
 801659c:	f023 0301 	bic.w	r3, r3, #1
 80165a0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	f993 3000 	ldrsb.w	r3, [r3]
 80165a8:	2207      	movs	r2, #7
 80165aa:	2100      	movs	r1, #0
 80165ac:	4618      	mov	r0, r3
 80165ae:	f000 fc32 	bl	8016e16 <RegionCommonValueInRange>
 80165b2:	4603      	mov	r3, r0
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d103      	bne.n	80165c0 <RegionAS923RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 80165b8:	7bfb      	ldrb	r3, [r7, #15]
 80165ba:	f023 0302 	bic.w	r3, r3, #2
 80165be:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80165c6:	2207      	movs	r2, #7
 80165c8:	2100      	movs	r1, #0
 80165ca:	4618      	mov	r0, r3
 80165cc:	f000 fc23 	bl	8016e16 <RegionCommonValueInRange>
 80165d0:	4603      	mov	r3, r0
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d103      	bne.n	80165de <RegionAS923RxParamSetupReq+0x66>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80165d6:	7bfb      	ldrb	r3, [r7, #15]
 80165d8:	f023 0304 	bic.w	r3, r3, #4
 80165dc:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_AS923 */
    return status;
 80165de:	7bfb      	ldrb	r3, [r7, #15]
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	3710      	adds	r7, #16
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}

080165e8 <RegionAS923NewChannelReq>:

int8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b086      	sub	sp, #24
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80165f0:	2303      	movs	r3, #3
 80165f2:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d114      	bne.n	8016628 <RegionAS923NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016604:	b2db      	uxtb	r3, r3
 8016606:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 8016608:	f107 0308 	add.w	r3, r7, #8
 801660c:	4618      	mov	r0, r3
 801660e:	f000 f9eb 	bl	80169e8 <RegionAS923ChannelsRemove>
 8016612:	4603      	mov	r3, r0
 8016614:	f083 0301 	eor.w	r3, r3, #1
 8016618:	b2db      	uxtb	r3, r3
 801661a:	2b00      	cmp	r3, #0
 801661c:	d03b      	beq.n	8016696 <RegionAS923NewChannelReq+0xae>
        {
            status &= 0xFC;
 801661e:	7dfb      	ldrb	r3, [r7, #23]
 8016620:	f023 0303 	bic.w	r3, r3, #3
 8016624:	75fb      	strb	r3, [r7, #23]
 8016626:	e036      	b.n	8016696 <RegionAS923NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016634:	b2db      	uxtb	r3, r3
 8016636:	743b      	strb	r3, [r7, #16]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 8016638:	f107 030c 	add.w	r3, r7, #12
 801663c:	4618      	mov	r0, r3
 801663e:	f000 f937 	bl	80168b0 <RegionAS923ChannelAdd>
 8016642:	4603      	mov	r3, r0
 8016644:	2b06      	cmp	r3, #6
 8016646:	d820      	bhi.n	801668a <RegionAS923NewChannelReq+0xa2>
 8016648:	a201      	add	r2, pc, #4	@ (adr r2, 8016650 <RegionAS923NewChannelReq+0x68>)
 801664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801664e:	bf00      	nop
 8016650:	08016695 	.word	0x08016695
 8016654:	0801668b 	.word	0x0801668b
 8016658:	0801668b 	.word	0x0801668b
 801665c:	0801668b 	.word	0x0801668b
 8016660:	0801666d 	.word	0x0801666d
 8016664:	08016677 	.word	0x08016677
 8016668:	08016681 	.word	0x08016681
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801666c:	7dfb      	ldrb	r3, [r7, #23]
 801666e:	f023 0301 	bic.w	r3, r3, #1
 8016672:	75fb      	strb	r3, [r7, #23]
                break;
 8016674:	e00f      	b.n	8016696 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8016676:	7dfb      	ldrb	r3, [r7, #23]
 8016678:	f023 0302 	bic.w	r3, r3, #2
 801667c:	75fb      	strb	r3, [r7, #23]
                break;
 801667e:	e00a      	b.n	8016696 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8016680:	7dfb      	ldrb	r3, [r7, #23]
 8016682:	f023 0303 	bic.w	r3, r3, #3
 8016686:	75fb      	strb	r3, [r7, #23]
                break;
 8016688:	e005      	b.n	8016696 <RegionAS923NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801668a:	7dfb      	ldrb	r3, [r7, #23]
 801668c:	f023 0303 	bic.w	r3, r3, #3
 8016690:	75fb      	strb	r3, [r7, #23]
                break;
 8016692:	e000      	b.n	8016696 <RegionAS923NewChannelReq+0xae>
                break;
 8016694:	bf00      	nop
            }
        }
    }

    return status;
 8016696:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801669a:	4618      	mov	r0, r3
 801669c:	3718      	adds	r7, #24
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}
 80166a2:	bf00      	nop

080166a4 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80166a4:	b480      	push	{r7}
 80166a6:	b083      	sub	sp, #12
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 80166ac:	2300      	movs	r3, #0
}
 80166ae:	4618      	mov	r0, r3
 80166b0:	370c      	adds	r7, #12
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bc80      	pop	{r7}
 80166b6:	4770      	bx	lr

080166b8 <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b084      	sub	sp, #16
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80166c0:	2303      	movs	r3, #3
 80166c2:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_AS923 )
    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	685b      	ldr	r3, [r3, #4]
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7ff f853 	bl	8015774 <VerifyRfFreq>
 80166ce:	4603      	mov	r3, r0
 80166d0:	f083 0301 	eor.w	r3, r3, #1
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d003      	beq.n	80166e2 <RegionAS923DlChannelReq+0x2a>
    {
        status &= 0xFE;
 80166da:	7bfb      	ldrb	r3, [r7, #15]
 80166dc:	f023 0301 	bic.w	r3, r3, #1
 80166e0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80166e2:	4b14      	ldr	r3, [pc, #80]	@ (8016734 <RegionAS923DlChannelReq+0x7c>)
 80166e4:	681a      	ldr	r2, [r3, #0]
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	781b      	ldrb	r3, [r3, #0]
 80166ea:	4619      	mov	r1, r3
 80166ec:	460b      	mov	r3, r1
 80166ee:	005b      	lsls	r3, r3, #1
 80166f0:	440b      	add	r3, r1
 80166f2:	009b      	lsls	r3, r3, #2
 80166f4:	4413      	add	r3, r2
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d103      	bne.n	8016704 <RegionAS923DlChannelReq+0x4c>
    {
        status &= 0xFD;
 80166fc:	7bfb      	ldrb	r3, [r7, #15]
 80166fe:	f023 0302 	bic.w	r3, r3, #2
 8016702:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8016704:	7bfb      	ldrb	r3, [r7, #15]
 8016706:	2b03      	cmp	r3, #3
 8016708:	d10d      	bne.n	8016726 <RegionAS923DlChannelReq+0x6e>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801670a:	4b0a      	ldr	r3, [pc, #40]	@ (8016734 <RegionAS923DlChannelReq+0x7c>)
 801670c:	6819      	ldr	r1, [r3, #0]
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	781b      	ldrb	r3, [r3, #0]
 8016712:	4618      	mov	r0, r3
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	685a      	ldr	r2, [r3, #4]
 8016718:	4603      	mov	r3, r0
 801671a:	005b      	lsls	r3, r3, #1
 801671c:	4403      	add	r3, r0
 801671e:	009b      	lsls	r3, r3, #2
 8016720:	440b      	add	r3, r1
 8016722:	3304      	adds	r3, #4
 8016724:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_AS923 */
    return status;
 8016726:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801672a:	4618      	mov	r0, r3
 801672c:	3710      	adds	r7, #16
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}
 8016732:	bf00      	nop
 8016734:	20001c30 	.word	0x20001c30

08016738 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016738:	b480      	push	{r7}
 801673a:	b083      	sub	sp, #12
 801673c:	af00      	add	r7, sp, #0
 801673e:	4603      	mov	r3, r0
 8016740:	460a      	mov	r2, r1
 8016742:	71fb      	strb	r3, [r7, #7]
 8016744:	4613      	mov	r3, r2
 8016746:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AS923 )
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 8016748:	2302      	movs	r3, #2
#else
    return -1;
#endif /* REGION_AS923 */
}
 801674a:	4618      	mov	r0, r3
 801674c:	370c      	adds	r7, #12
 801674e:	46bd      	mov	sp, r7
 8016750:	bc80      	pop	{r7}
 8016752:	4770      	bx	lr

08016754 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b09a      	sub	sp, #104	@ 0x68
 8016758:	af02      	add	r7, sp, #8
 801675a:	60f8      	str	r0, [r7, #12]
 801675c:	60b9      	str	r1, [r7, #8]
 801675e:	607a      	str	r2, [r7, #4]
 8016760:	603b      	str	r3, [r7, #0]
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 8016762:	2300      	movs	r3, #0
 8016764:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8016768:	2300      	movs	r3, #0
 801676a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 801676e:	2300      	movs	r3, #0
 8016770:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016772:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8016776:	2200      	movs	r2, #0
 8016778:	601a      	str	r2, [r3, #0]
 801677a:	605a      	str	r2, [r3, #4]
 801677c:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801677e:	230c      	movs	r3, #12
 8016780:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 8016784:	2303      	movs	r3, #3
 8016786:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8016788:	4b47      	ldr	r3, [pc, #284]	@ (80168a8 <RegionAS923NextChannel+0x154>)
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016790:	2201      	movs	r2, #1
 8016792:	2100      	movs	r1, #0
 8016794:	4618      	mov	r0, r3
 8016796:	f000 fb8f 	bl	8016eb8 <RegionCommonCountChannels>
 801679a:	4603      	mov	r3, r0
 801679c:	2b00      	cmp	r3, #0
 801679e:	d10a      	bne.n	80167b6 <RegionAS923NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 80167a0:	4b41      	ldr	r3, [pc, #260]	@ (80168a8 <RegionAS923NextChannel+0x154>)
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 80167a8:	4b3f      	ldr	r3, [pc, #252]	@ (80168a8 <RegionAS923NextChannel+0x154>)
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	f042 0203 	orr.w	r2, r2, #3
 80167b0:	b292      	uxth	r2, r2
 80167b2:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	7a5b      	ldrb	r3, [r3, #9]
 80167ba:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80167c2:	b2db      	uxtb	r3, r3
 80167c4:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80167c6:	4b38      	ldr	r3, [pc, #224]	@ (80168a8 <RegionAS923NextChannel+0x154>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80167ce:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80167d0:	4b35      	ldr	r3, [pc, #212]	@ (80168a8 <RegionAS923NextChannel+0x154>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 80167d6:	4b35      	ldr	r3, [pc, #212]	@ (80168ac <RegionAS923NextChannel+0x158>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 80167dc:	2310      	movs	r3, #16
 80167de:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80167e0:	f107 0312 	add.w	r3, r7, #18
 80167e4:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	685b      	ldr	r3, [r3, #4]
 80167f0:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	7a9b      	ldrb	r3, [r3, #10]
 80167f6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 80167fa:	2301      	movs	r3, #1
 80167fc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016800:	68fa      	ldr	r2, [r7, #12]
 8016802:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8016806:	320c      	adds	r2, #12
 8016808:	e892 0003 	ldmia.w	r2, {r0, r1}
 801680c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	7d1b      	ldrb	r3, [r3, #20]
 8016814:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	8adb      	ldrh	r3, [r3, #22]
 8016822:	4619      	mov	r1, r3
 8016824:	4610      	mov	r0, r2
 8016826:	f7fe ffcb 	bl	80157c0 <GetTimeOnAir>
 801682a:	4603      	mov	r3, r0
 801682c:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801682e:	f107 0314 	add.w	r3, r7, #20
 8016832:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016834:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8016838:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801683c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	9301      	str	r3, [sp, #4]
 8016844:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8016848:	9300      	str	r3, [sp, #0]
 801684a:	460b      	mov	r3, r1
 801684c:	6839      	ldr	r1, [r7, #0]
 801684e:	f000 ff4a 	bl	80176e6 <RegionCommonIdentifyChannels>
 8016852:	4603      	mov	r3, r0
 8016854:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016858:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801685c:	2b00      	cmp	r3, #0
 801685e:	d10e      	bne.n	801687e <RegionAS923NextChannel+0x12a>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8016860:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8016864:	3b01      	subs	r3, #1
 8016866:	4619      	mov	r1, r3
 8016868:	2000      	movs	r0, #0
 801686a:	f001 f889 	bl	8017980 <randr>
 801686e:	4603      	mov	r3, r0
 8016870:	3360      	adds	r3, #96	@ 0x60
 8016872:	443b      	add	r3, r7
 8016874:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8016878:	68bb      	ldr	r3, [r7, #8]
 801687a:	701a      	strb	r2, [r3, #0]
 801687c:	e00e      	b.n	801689c <RegionAS923NextChannel+0x148>
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801687e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016882:	2b0c      	cmp	r3, #12
 8016884:	d10a      	bne.n	801689c <RegionAS923NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8016886:	4b08      	ldr	r3, [pc, #32]	@ (80168a8 <RegionAS923NextChannel+0x154>)
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 801688e:	4b06      	ldr	r3, [pc, #24]	@ (80168a8 <RegionAS923NextChannel+0x154>)
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	f042 0203 	orr.w	r2, r2, #3
 8016896:	b292      	uxth	r2, r2
 8016898:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 801689c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 80168a0:	4618      	mov	r0, r3
 80168a2:	3760      	adds	r7, #96	@ 0x60
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}
 80168a8:	20001c30 	.word	0x20001c30
 80168ac:	20001c34 	.word	0x20001c34

080168b0 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b084      	sub	sp, #16
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    bool drInvalid = false;
 80168b8:	2300      	movs	r3, #0
 80168ba:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80168bc:	2300      	movs	r3, #0
 80168be:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	791b      	ldrb	r3, [r3, #4]
 80168c4:	737b      	strb	r3, [r7, #13]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 80168c6:	7b7b      	ldrb	r3, [r7, #13]
 80168c8:	2b01      	cmp	r3, #1
 80168ca:	d801      	bhi.n	80168d0 <RegionAS923ChannelAdd+0x20>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80168cc:	2306      	movs	r3, #6
 80168ce:	e085      	b.n	80169dc <RegionAS923ChannelAdd+0x12c>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 80168d0:	7b7b      	ldrb	r3, [r7, #13]
 80168d2:	2b0f      	cmp	r3, #15
 80168d4:	d901      	bls.n	80168da <RegionAS923ChannelAdd+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80168d6:	2303      	movs	r3, #3
 80168d8:	e080      	b.n	80169dc <RegionAS923ChannelAdd+0x12c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	7a1b      	ldrb	r3, [r3, #8]
 80168e0:	f343 0303 	sbfx	r3, r3, #0, #4
 80168e4:	b25b      	sxtb	r3, r3
 80168e6:	2207      	movs	r2, #7
 80168e8:	2100      	movs	r1, #0
 80168ea:	4618      	mov	r0, r3
 80168ec:	f000 fa93 	bl	8016e16 <RegionCommonValueInRange>
 80168f0:	4603      	mov	r3, r0
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d101      	bne.n	80168fa <RegionAS923ChannelAdd+0x4a>
    {
        drInvalid = true;
 80168f6:	2301      	movs	r3, #1
 80168f8:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	7a1b      	ldrb	r3, [r3, #8]
 8016900:	f343 1303 	sbfx	r3, r3, #4, #4
 8016904:	b25b      	sxtb	r3, r3
 8016906:	2207      	movs	r2, #7
 8016908:	2100      	movs	r1, #0
 801690a:	4618      	mov	r0, r3
 801690c:	f000 fa83 	bl	8016e16 <RegionCommonValueInRange>
 8016910:	4603      	mov	r3, r0
 8016912:	2b00      	cmp	r3, #0
 8016914:	d101      	bne.n	801691a <RegionAS923ChannelAdd+0x6a>
    {
        drInvalid = true;
 8016916:	2301      	movs	r3, #1
 8016918:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	7a1b      	ldrb	r3, [r3, #8]
 8016920:	f343 0303 	sbfx	r3, r3, #0, #4
 8016924:	b25a      	sxtb	r2, r3
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	7a1b      	ldrb	r3, [r3, #8]
 801692c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016930:	b25b      	sxtb	r3, r3
 8016932:	429a      	cmp	r2, r3
 8016934:	dd01      	ble.n	801693a <RegionAS923ChannelAdd+0x8a>
    {
        drInvalid = true;
 8016936:	2301      	movs	r3, #1
 8016938:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801693a:	7bbb      	ldrb	r3, [r7, #14]
 801693c:	f083 0301 	eor.w	r3, r3, #1
 8016940:	b2db      	uxtb	r3, r3
 8016942:	2b00      	cmp	r3, #0
 8016944:	d00d      	beq.n	8016962 <RegionAS923ChannelAdd+0xb2>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	4618      	mov	r0, r3
 801694e:	f7fe ff11 	bl	8015774 <VerifyRfFreq>
 8016952:	4603      	mov	r3, r0
 8016954:	f083 0301 	eor.w	r3, r3, #1
 8016958:	b2db      	uxtb	r3, r3
 801695a:	2b00      	cmp	r3, #0
 801695c:	d001      	beq.n	8016962 <RegionAS923ChannelAdd+0xb2>
        {
            freqInvalid = true;
 801695e:	2301      	movs	r3, #1
 8016960:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8016962:	7bfb      	ldrb	r3, [r7, #15]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d004      	beq.n	8016972 <RegionAS923ChannelAdd+0xc2>
 8016968:	7bbb      	ldrb	r3, [r7, #14]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d001      	beq.n	8016972 <RegionAS923ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801696e:	2306      	movs	r3, #6
 8016970:	e034      	b.n	80169dc <RegionAS923ChannelAdd+0x12c>
    }
    if( drInvalid == true )
 8016972:	7bfb      	ldrb	r3, [r7, #15]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d001      	beq.n	801697c <RegionAS923ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8016978:	2305      	movs	r3, #5
 801697a:	e02f      	b.n	80169dc <RegionAS923ChannelAdd+0x12c>
    }
    if( freqInvalid == true )
 801697c:	7bbb      	ldrb	r3, [r7, #14]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d001      	beq.n	8016986 <RegionAS923ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8016982:	2304      	movs	r3, #4
 8016984:	e02a      	b.n	80169dc <RegionAS923ChannelAdd+0x12c>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8016986:	4b17      	ldr	r3, [pc, #92]	@ (80169e4 <RegionAS923ChannelAdd+0x134>)
 8016988:	6819      	ldr	r1, [r3, #0]
 801698a:	7b7a      	ldrb	r2, [r7, #13]
 801698c:	4613      	mov	r3, r2
 801698e:	005b      	lsls	r3, r3, #1
 8016990:	4413      	add	r3, r2
 8016992:	009b      	lsls	r3, r3, #2
 8016994:	18c8      	adds	r0, r1, r3
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	220c      	movs	r2, #12
 801699c:	4619      	mov	r1, r3
 801699e:	f001 f806 	bl	80179ae <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 80169a2:	4b10      	ldr	r3, [pc, #64]	@ (80169e4 <RegionAS923ChannelAdd+0x134>)
 80169a4:	6819      	ldr	r1, [r3, #0]
 80169a6:	7b7a      	ldrb	r2, [r7, #13]
 80169a8:	4613      	mov	r3, r2
 80169aa:	005b      	lsls	r3, r3, #1
 80169ac:	4413      	add	r3, r2
 80169ae:	009b      	lsls	r3, r3, #2
 80169b0:	440b      	add	r3, r1
 80169b2:	3309      	adds	r3, #9
 80169b4:	2200      	movs	r2, #0
 80169b6:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80169b8:	4b0a      	ldr	r3, [pc, #40]	@ (80169e4 <RegionAS923ChannelAdd+0x134>)
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 80169c0:	b21a      	sxth	r2, r3
 80169c2:	7b7b      	ldrb	r3, [r7, #13]
 80169c4:	2101      	movs	r1, #1
 80169c6:	fa01 f303 	lsl.w	r3, r1, r3
 80169ca:	b21b      	sxth	r3, r3
 80169cc:	4313      	orrs	r3, r2
 80169ce:	b21a      	sxth	r2, r3
 80169d0:	4b04      	ldr	r3, [pc, #16]	@ (80169e4 <RegionAS923ChannelAdd+0x134>)
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	b292      	uxth	r2, r2
 80169d6:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 80169da:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 80169dc:	4618      	mov	r0, r3
 80169de:	3710      	adds	r7, #16
 80169e0:	46bd      	mov	sp, r7
 80169e2:	bd80      	pop	{r7, pc}
 80169e4:	20001c30 	.word	0x20001c30

080169e8 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b086      	sub	sp, #24
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	781b      	ldrb	r3, [r3, #0]
 80169f4:	75fb      	strb	r3, [r7, #23]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 80169f6:	7dfb      	ldrb	r3, [r7, #23]
 80169f8:	2b01      	cmp	r3, #1
 80169fa:	d801      	bhi.n	8016a00 <RegionAS923ChannelsRemove+0x18>
    {
        return false;
 80169fc:	2300      	movs	r3, #0
 80169fe:	e016      	b.n	8016a2e <RegionAS923ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016a00:	4b0d      	ldr	r3, [pc, #52]	@ (8016a38 <RegionAS923ChannelsRemove+0x50>)
 8016a02:	6819      	ldr	r1, [r3, #0]
 8016a04:	7dfa      	ldrb	r2, [r7, #23]
 8016a06:	4613      	mov	r3, r2
 8016a08:	005b      	lsls	r3, r3, #1
 8016a0a:	4413      	add	r3, r2
 8016a0c:	009b      	lsls	r3, r3, #2
 8016a0e:	440b      	add	r3, r1
 8016a10:	461a      	mov	r2, r3
 8016a12:	2300      	movs	r3, #0
 8016a14:	6013      	str	r3, [r2, #0]
 8016a16:	6053      	str	r3, [r2, #4]
 8016a18:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 8016a1a:	4b07      	ldr	r3, [pc, #28]	@ (8016a38 <RegionAS923ChannelsRemove+0x50>)
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016a22:	7df9      	ldrb	r1, [r7, #23]
 8016a24:	2210      	movs	r2, #16
 8016a26:	4618      	mov	r0, r3
 8016a28:	f000 fa12 	bl	8016e50 <RegionCommonChanDisable>
 8016a2c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_AS923 */
}
 8016a2e:	4618      	mov	r0, r3
 8016a30:	3718      	adds	r7, #24
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd80      	pop	{r7, pc}
 8016a36:	bf00      	nop
 8016a38:	20001c30 	.word	0x20001c30

08016a3c <RegionAS923ApplyDrOffset>:
#endif /* REGION_AS923 */

}
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016a3c:	b480      	push	{r7}
 8016a3e:	b085      	sub	sp, #20
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	4603      	mov	r3, r0
 8016a44:	71fb      	strb	r3, [r7, #7]
 8016a46:	460b      	mov	r3, r1
 8016a48:	71bb      	strb	r3, [r7, #6]
 8016a4a:	4613      	mov	r3, r2
 8016a4c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AS923 )
    // Initialize minDr
    int8_t minDr;

    if( downlinkDwellTime == 0 )
 8016a4e:	79fb      	ldrb	r3, [r7, #7]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d10a      	bne.n	8016a6a <RegionAS923ApplyDrOffset+0x2e>
    {
        // Update the minDR for a downlink dwell time configuration of 0
        minDr = EffectiveRx1DrOffsetDownlinkDwell0AS923[dr][drOffset];
 8016a54:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016a58:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016a5c:	490b      	ldr	r1, [pc, #44]	@ (8016a8c <RegionAS923ApplyDrOffset+0x50>)
 8016a5e:	00d2      	lsls	r2, r2, #3
 8016a60:	440a      	add	r2, r1
 8016a62:	4413      	add	r3, r2
 8016a64:	781b      	ldrb	r3, [r3, #0]
 8016a66:	73fb      	strb	r3, [r7, #15]
 8016a68:	e009      	b.n	8016a7e <RegionAS923ApplyDrOffset+0x42>
    }
    else
    {
        // Update the minDR for a downlink dwell time configuration of 1
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
 8016a6a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016a6e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016a72:	4907      	ldr	r1, [pc, #28]	@ (8016a90 <RegionAS923ApplyDrOffset+0x54>)
 8016a74:	00d2      	lsls	r2, r2, #3
 8016a76:	440a      	add	r2, r1
 8016a78:	4413      	add	r3, r2
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	73fb      	strb	r3, [r7, #15]
    }

    return minDr;
 8016a7e:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_AS923 */

}
 8016a80:	4618      	mov	r0, r3
 8016a82:	3714      	adds	r7, #20
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bc80      	pop	{r7}
 8016a88:	4770      	bx	lr
 8016a8a:	bf00      	nop
 8016a8c:	0801fe5c 	.word	0x0801fe5c
 8016a90:	0801fe9c 	.word	0x0801fe9c

08016a94 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016a94:	b480      	push	{r7}
 8016a96:	b087      	sub	sp, #28
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	60f8      	str	r0, [r7, #12]
 8016a9c:	4608      	mov	r0, r1
 8016a9e:	4639      	mov	r1, r7
 8016aa0:	e881 000c 	stmia.w	r1, {r2, r3}
 8016aa4:	4603      	mov	r3, r0
 8016aa6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	881b      	ldrh	r3, [r3, #0]
 8016aac:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8016aae:	7afb      	ldrb	r3, [r7, #11]
 8016ab0:	f083 0301 	eor.w	r3, r3, #1
 8016ab4:	b2db      	uxtb	r3, r3
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d01b      	beq.n	8016af2 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016aba:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016abe:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016ac0:	683b      	ldr	r3, [r7, #0]
 8016ac2:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8016ac6:	d202      	bcs.n	8016ace <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8016ac8:	2364      	movs	r3, #100	@ 0x64
 8016aca:	82bb      	strh	r3, [r7, #20]
 8016acc:	e00b      	b.n	8016ae6 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016ace:	683b      	ldr	r3, [r7, #0]
 8016ad0:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8016ad4:	4293      	cmp	r3, r2
 8016ad6:	d803      	bhi.n	8016ae0 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8016ad8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016adc:	82bb      	strh	r3, [r7, #20]
 8016ade:	e002      	b.n	8016ae6 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016ae0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016ae4:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8016ae6:	8aba      	ldrh	r2, [r7, #20]
 8016ae8:	8afb      	ldrh	r3, [r7, #22]
 8016aea:	4293      	cmp	r3, r2
 8016aec:	bf38      	it	cc
 8016aee:	4613      	movcc	r3, r2
 8016af0:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016af2:	8afb      	ldrh	r3, [r7, #22]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d101      	bne.n	8016afc <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8016af8:	2301      	movs	r3, #1
 8016afa:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8016afc:	8afb      	ldrh	r3, [r7, #22]
}
 8016afe:	4618      	mov	r0, r3
 8016b00:	371c      	adds	r7, #28
 8016b02:	46bd      	mov	sp, r7
 8016b04:	bc80      	pop	{r7}
 8016b06:	4770      	bx	lr

08016b08 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8016b08:	b580      	push	{r7, lr}
 8016b0a:	b08e      	sub	sp, #56	@ 0x38
 8016b0c:	af02      	add	r7, sp, #8
 8016b0e:	60f8      	str	r0, [r7, #12]
 8016b10:	4608      	mov	r0, r1
 8016b12:	4639      	mov	r1, r7
 8016b14:	e881 000c 	stmia.w	r1, {r2, r3}
 8016b18:	4603      	mov	r3, r0
 8016b1a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	881b      	ldrh	r3, [r3, #0]
 8016b20:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016b22:	4b4b      	ldr	r3, [pc, #300]	@ (8016c50 <SetMaxTimeCredits+0x148>)
 8016b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8016b26:	463b      	mov	r3, r7
 8016b28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016b2c:	f004 fb76 	bl	801b21c <SysTimeToMs>
 8016b30:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 8016b32:	f107 0314 	add.w	r3, r7, #20
 8016b36:	2200      	movs	r2, #0
 8016b38:	601a      	str	r2, [r3, #0]
 8016b3a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016b3c:	7af9      	ldrb	r1, [r7, #11]
 8016b3e:	463b      	mov	r3, r7
 8016b40:	cb0c      	ldmia	r3, {r2, r3}
 8016b42:	68f8      	ldr	r0, [r7, #12]
 8016b44:	f7ff ffa6 	bl	8016a94 <GetDutyCycle>
 8016b48:	4603      	mov	r3, r0
 8016b4a:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 8016b4c:	7afb      	ldrb	r3, [r7, #11]
 8016b4e:	f083 0301 	eor.w	r3, r3, #1
 8016b52:	b2db      	uxtb	r3, r3
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d062      	beq.n	8016c1e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8016b58:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016b5a:	2b64      	cmp	r3, #100	@ 0x64
 8016b5c:	d105      	bne.n	8016b6a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016b5e:	4b3c      	ldr	r3, [pc, #240]	@ (8016c50 <SetMaxTimeCredits+0x148>)
 8016b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b66:	609a      	str	r2, [r3, #8]
 8016b68:	e00b      	b.n	8016b82 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8016b6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016b6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016b70:	d105      	bne.n	8016b7e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8016b72:	4b38      	ldr	r3, [pc, #224]	@ (8016c54 <SetMaxTimeCredits+0x14c>)
 8016b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b7a:	609a      	str	r2, [r3, #8]
 8016b7c:	e001      	b.n	8016b82 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8016b7e:	4b36      	ldr	r3, [pc, #216]	@ (8016c58 <SetMaxTimeCredits+0x150>)
 8016b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	689a      	ldr	r2, [r3, #8]
 8016b86:	f107 031c 	add.w	r3, r7, #28
 8016b8a:	4611      	mov	r1, r2
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f004 fb6d 	bl	801b26c <SysTimeFromMs>
 8016b92:	f107 0014 	add.w	r0, r7, #20
 8016b96:	6a3b      	ldr	r3, [r7, #32]
 8016b98:	9300      	str	r3, [sp, #0]
 8016b9a:	69fb      	ldr	r3, [r7, #28]
 8016b9c:	463a      	mov	r2, r7
 8016b9e:	ca06      	ldmia	r2, {r1, r2}
 8016ba0:	f004 fa7d 	bl	801b09e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016ba4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8016ba8:	f083 0301 	eor.w	r3, r3, #1
 8016bac:	b2db      	uxtb	r3, r3
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d006      	beq.n	8016bc0 <SetMaxTimeCredits+0xb8>
 8016bb2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016bb6:	f083 0301 	eor.w	r3, r3, #1
 8016bba:	b2db      	uxtb	r3, r3
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d108      	bne.n	8016bd2 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016bc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016bc6:	429a      	cmp	r2, r3
 8016bc8:	d103      	bne.n	8016bd2 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8016bca:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8016bcc:	4a23      	ldr	r2, [pc, #140]	@ (8016c5c <SetMaxTimeCredits+0x154>)
 8016bce:	4293      	cmp	r3, r2
 8016bd0:	d92f      	bls.n	8016c32 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016bd6:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8016bd8:	683b      	ldr	r3, [r7, #0]
 8016bda:	4a21      	ldr	r2, [pc, #132]	@ (8016c60 <SetMaxTimeCredits+0x158>)
 8016bdc:	4293      	cmp	r3, r2
 8016bde:	d928      	bls.n	8016c32 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8016be0:	683b      	ldr	r3, [r7, #0]
 8016be2:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8016be6:	3b30      	subs	r3, #48	@ 0x30
 8016be8:	4a1e      	ldr	r2, [pc, #120]	@ (8016c64 <SetMaxTimeCredits+0x15c>)
 8016bea:	fba2 2303 	umull	r2, r3, r2, r3
 8016bee:	0c1b      	lsrs	r3, r3, #16
 8016bf0:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8016bf2:	697b      	ldr	r3, [r7, #20]
 8016bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8016c68 <SetMaxTimeCredits+0x160>)
 8016bf6:	fb02 f303 	mul.w	r3, r2, r3
 8016bfa:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016bfc:	697b      	ldr	r3, [r7, #20]
 8016bfe:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 8016c02:	3330      	adds	r3, #48	@ 0x30
 8016c04:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8016c06:	2300      	movs	r3, #0
 8016c08:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8016c0a:	f107 0314 	add.w	r3, r7, #20
 8016c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016c12:	f004 fb03 	bl	801b21c <SysTimeToMs>
 8016c16:	4602      	mov	r2, r0
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	609a      	str	r2, [r3, #8]
 8016c1c:	e009      	b.n	8016c32 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8016c1e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8016c22:	f083 0301 	eor.w	r3, r3, #1
 8016c26:	b2db      	uxtb	r3, r3
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d002      	beq.n	8016c32 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016c30:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	685b      	ldr	r3, [r3, #4]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d102      	bne.n	8016c40 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016c3e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016c44:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8016c46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 8016c48:	4618      	mov	r0, r3
 8016c4a:	3730      	adds	r7, #48	@ 0x30
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}
 8016c50:	001b7740 	.word	0x001b7740
 8016c54:	0112a880 	.word	0x0112a880
 8016c58:	02932e00 	.word	0x02932e00
 8016c5c:	0001517f 	.word	0x0001517f
 8016c60:	0001ec2f 	.word	0x0001ec2f
 8016c64:	c22e4507 	.word	0xc22e4507
 8016c68:	00015180 	.word	0x00015180

08016c6c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b086      	sub	sp, #24
 8016c70:	af02      	add	r7, sp, #8
 8016c72:	6078      	str	r0, [r7, #4]
 8016c74:	4608      	mov	r0, r1
 8016c76:	4611      	mov	r1, r2
 8016c78:	461a      	mov	r2, r3
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	70fb      	strb	r3, [r7, #3]
 8016c7e:	460b      	mov	r3, r1
 8016c80:	70bb      	strb	r3, [r7, #2]
 8016c82:	4613      	mov	r3, r2
 8016c84:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8016c86:	78f9      	ldrb	r1, [r7, #3]
 8016c88:	787b      	ldrb	r3, [r7, #1]
 8016c8a:	9301      	str	r3, [sp, #4]
 8016c8c:	78bb      	ldrb	r3, [r7, #2]
 8016c8e:	9300      	str	r3, [sp, #0]
 8016c90:	f107 0318 	add.w	r3, r7, #24
 8016c94:	cb0c      	ldmia	r3, {r2, r3}
 8016c96:	6878      	ldr	r0, [r7, #4]
 8016c98:	f7ff ff36 	bl	8016b08 <SetMaxTimeCredits>
 8016c9c:	4603      	mov	r3, r0
 8016c9e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8016ca0:	78fb      	ldrb	r3, [r7, #3]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d00a      	beq.n	8016cbc <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	685b      	ldr	r3, [r3, #4]
 8016caa:	4618      	mov	r0, r3
 8016cac:	f005 f8f0 	bl	801be90 <UTIL_TIMER_GetElapsedTime>
 8016cb0:	4602      	mov	r2, r0
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	68db      	ldr	r3, [r3, #12]
 8016cb6:	441a      	add	r2, r3
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	68da      	ldr	r2, [r3, #12]
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	691b      	ldr	r3, [r3, #16]
 8016cc4:	429a      	cmp	r2, r3
 8016cc6:	d903      	bls.n	8016cd0 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	691a      	ldr	r2, [r3, #16]
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	6a3a      	ldr	r2, [r7, #32]
 8016cd4:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8016cd6:	89fb      	ldrh	r3, [r7, #14]
}
 8016cd8:	4618      	mov	r0, r3
 8016cda:	3710      	adds	r7, #16
 8016cdc:	46bd      	mov	sp, r7
 8016cde:	bd80      	pop	{r7, pc}

08016ce0 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016ce0:	b480      	push	{r7}
 8016ce2:	b085      	sub	sp, #20
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	460a      	mov	r2, r1
 8016cea:	80fb      	strh	r3, [r7, #6]
 8016cec:	4613      	mov	r3, r2
 8016cee:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	73bb      	strb	r3, [r7, #14]
 8016cf8:	e011      	b.n	8016d1e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8016cfa:	88fa      	ldrh	r2, [r7, #6]
 8016cfc:	7bbb      	ldrb	r3, [r7, #14]
 8016cfe:	2101      	movs	r1, #1
 8016d00:	fa01 f303 	lsl.w	r3, r1, r3
 8016d04:	401a      	ands	r2, r3
 8016d06:	7bbb      	ldrb	r3, [r7, #14]
 8016d08:	2101      	movs	r1, #1
 8016d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8016d0e:	429a      	cmp	r2, r3
 8016d10:	d102      	bne.n	8016d18 <CountChannels+0x38>
        {
            nbActiveBits++;
 8016d12:	7bfb      	ldrb	r3, [r7, #15]
 8016d14:	3301      	adds	r3, #1
 8016d16:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016d18:	7bbb      	ldrb	r3, [r7, #14]
 8016d1a:	3301      	adds	r3, #1
 8016d1c:	73bb      	strb	r3, [r7, #14]
 8016d1e:	7bba      	ldrb	r2, [r7, #14]
 8016d20:	797b      	ldrb	r3, [r7, #5]
 8016d22:	429a      	cmp	r2, r3
 8016d24:	d3e9      	bcc.n	8016cfa <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8016d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d28:	4618      	mov	r0, r3
 8016d2a:	3714      	adds	r7, #20
 8016d2c:	46bd      	mov	sp, r7
 8016d2e:	bc80      	pop	{r7}
 8016d30:	4770      	bx	lr

08016d32 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8016d32:	b580      	push	{r7, lr}
 8016d34:	b084      	sub	sp, #16
 8016d36:	af00      	add	r7, sp, #0
 8016d38:	6039      	str	r1, [r7, #0]
 8016d3a:	4611      	mov	r1, r2
 8016d3c:	461a      	mov	r2, r3
 8016d3e:	4603      	mov	r3, r0
 8016d40:	71fb      	strb	r3, [r7, #7]
 8016d42:	460b      	mov	r3, r1
 8016d44:	71bb      	strb	r3, [r7, #6]
 8016d46:	4613      	mov	r3, r2
 8016d48:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8016d4a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8016d4e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8016d52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016d56:	4618      	mov	r0, r3
 8016d58:	f000 f85d 	bl	8016e16 <RegionCommonValueInRange>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d101      	bne.n	8016d66 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8016d62:	2300      	movs	r3, #0
 8016d64:	e053      	b.n	8016e0e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016d66:	2300      	movs	r3, #0
 8016d68:	73fb      	strb	r3, [r7, #15]
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	73bb      	strb	r3, [r7, #14]
 8016d6e:	e049      	b.n	8016e04 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016d70:	2300      	movs	r3, #0
 8016d72:	737b      	strb	r3, [r7, #13]
 8016d74:	e03d      	b.n	8016df2 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8016d76:	7bbb      	ldrb	r3, [r7, #14]
 8016d78:	005b      	lsls	r3, r3, #1
 8016d7a:	683a      	ldr	r2, [r7, #0]
 8016d7c:	4413      	add	r3, r2
 8016d7e:	881b      	ldrh	r3, [r3, #0]
 8016d80:	461a      	mov	r2, r3
 8016d82:	7b7b      	ldrb	r3, [r7, #13]
 8016d84:	fa42 f303 	asr.w	r3, r2, r3
 8016d88:	f003 0301 	and.w	r3, r3, #1
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d02d      	beq.n	8016dec <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016d90:	7bfa      	ldrb	r2, [r7, #15]
 8016d92:	7b7b      	ldrb	r3, [r7, #13]
 8016d94:	4413      	add	r3, r2
 8016d96:	461a      	mov	r2, r3
 8016d98:	4613      	mov	r3, r2
 8016d9a:	005b      	lsls	r3, r3, #1
 8016d9c:	4413      	add	r3, r2
 8016d9e:	009b      	lsls	r3, r3, #2
 8016da0:	461a      	mov	r2, r3
 8016da2:	69fb      	ldr	r3, [r7, #28]
 8016da4:	4413      	add	r3, r2
 8016da6:	7a1b      	ldrb	r3, [r3, #8]
 8016da8:	f343 0303 	sbfx	r3, r3, #0, #4
 8016dac:	b25b      	sxtb	r3, r3
 8016dae:	f003 030f 	and.w	r3, r3, #15
 8016db2:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8016db4:	7bfa      	ldrb	r2, [r7, #15]
 8016db6:	7b7b      	ldrb	r3, [r7, #13]
 8016db8:	4413      	add	r3, r2
 8016dba:	461a      	mov	r2, r3
 8016dbc:	4613      	mov	r3, r2
 8016dbe:	005b      	lsls	r3, r3, #1
 8016dc0:	4413      	add	r3, r2
 8016dc2:	009b      	lsls	r3, r3, #2
 8016dc4:	461a      	mov	r2, r3
 8016dc6:	69fb      	ldr	r3, [r7, #28]
 8016dc8:	4413      	add	r3, r2
 8016dca:	7a1b      	ldrb	r3, [r3, #8]
 8016dcc:	f343 1303 	sbfx	r3, r3, #4, #4
 8016dd0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016dd2:	f003 030f 	and.w	r3, r3, #15
 8016dd6:	b25a      	sxtb	r2, r3
 8016dd8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f000 f81a 	bl	8016e16 <RegionCommonValueInRange>
 8016de2:	4603      	mov	r3, r0
 8016de4:	2b01      	cmp	r3, #1
 8016de6:	d101      	bne.n	8016dec <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016de8:	2301      	movs	r3, #1
 8016dea:	e010      	b.n	8016e0e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8016dec:	7b7b      	ldrb	r3, [r7, #13]
 8016dee:	3301      	adds	r3, #1
 8016df0:	737b      	strb	r3, [r7, #13]
 8016df2:	7b7b      	ldrb	r3, [r7, #13]
 8016df4:	2b0f      	cmp	r3, #15
 8016df6:	d9be      	bls.n	8016d76 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016df8:	7bfb      	ldrb	r3, [r7, #15]
 8016dfa:	3310      	adds	r3, #16
 8016dfc:	73fb      	strb	r3, [r7, #15]
 8016dfe:	7bbb      	ldrb	r3, [r7, #14]
 8016e00:	3301      	adds	r3, #1
 8016e02:	73bb      	strb	r3, [r7, #14]
 8016e04:	7bfa      	ldrb	r2, [r7, #15]
 8016e06:	79fb      	ldrb	r3, [r7, #7]
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	d3b1      	bcc.n	8016d70 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8016e0c:	2300      	movs	r3, #0
}
 8016e0e:	4618      	mov	r0, r3
 8016e10:	3710      	adds	r7, #16
 8016e12:	46bd      	mov	sp, r7
 8016e14:	bd80      	pop	{r7, pc}

08016e16 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8016e16:	b480      	push	{r7}
 8016e18:	b083      	sub	sp, #12
 8016e1a:	af00      	add	r7, sp, #0
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	71fb      	strb	r3, [r7, #7]
 8016e20:	460b      	mov	r3, r1
 8016e22:	71bb      	strb	r3, [r7, #6]
 8016e24:	4613      	mov	r3, r2
 8016e26:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8016e28:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016e2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016e30:	429a      	cmp	r2, r3
 8016e32:	db07      	blt.n	8016e44 <RegionCommonValueInRange+0x2e>
 8016e34:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016e38:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016e3c:	429a      	cmp	r2, r3
 8016e3e:	dc01      	bgt.n	8016e44 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8016e40:	2301      	movs	r3, #1
 8016e42:	e000      	b.n	8016e46 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8016e44:	2300      	movs	r3, #0
}
 8016e46:	4618      	mov	r0, r3
 8016e48:	370c      	adds	r7, #12
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	bc80      	pop	{r7}
 8016e4e:	4770      	bx	lr

08016e50 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8016e50:	b480      	push	{r7}
 8016e52:	b085      	sub	sp, #20
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
 8016e58:	460b      	mov	r3, r1
 8016e5a:	70fb      	strb	r3, [r7, #3]
 8016e5c:	4613      	mov	r3, r2
 8016e5e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8016e60:	78fb      	ldrb	r3, [r7, #3]
 8016e62:	091b      	lsrs	r3, r3, #4
 8016e64:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8016e66:	78bb      	ldrb	r3, [r7, #2]
 8016e68:	091b      	lsrs	r3, r3, #4
 8016e6a:	b2db      	uxtb	r3, r3
 8016e6c:	7bfa      	ldrb	r2, [r7, #15]
 8016e6e:	429a      	cmp	r2, r3
 8016e70:	d803      	bhi.n	8016e7a <RegionCommonChanDisable+0x2a>
 8016e72:	78fa      	ldrb	r2, [r7, #3]
 8016e74:	78bb      	ldrb	r3, [r7, #2]
 8016e76:	429a      	cmp	r2, r3
 8016e78:	d301      	bcc.n	8016e7e <RegionCommonChanDisable+0x2e>
    {
        return false;
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	e017      	b.n	8016eae <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8016e7e:	7bfb      	ldrb	r3, [r7, #15]
 8016e80:	005b      	lsls	r3, r3, #1
 8016e82:	687a      	ldr	r2, [r7, #4]
 8016e84:	4413      	add	r3, r2
 8016e86:	881b      	ldrh	r3, [r3, #0]
 8016e88:	b21a      	sxth	r2, r3
 8016e8a:	78fb      	ldrb	r3, [r7, #3]
 8016e8c:	f003 030f 	and.w	r3, r3, #15
 8016e90:	2101      	movs	r1, #1
 8016e92:	fa01 f303 	lsl.w	r3, r1, r3
 8016e96:	b21b      	sxth	r3, r3
 8016e98:	43db      	mvns	r3, r3
 8016e9a:	b21b      	sxth	r3, r3
 8016e9c:	4013      	ands	r3, r2
 8016e9e:	b219      	sxth	r1, r3
 8016ea0:	7bfb      	ldrb	r3, [r7, #15]
 8016ea2:	005b      	lsls	r3, r3, #1
 8016ea4:	687a      	ldr	r2, [r7, #4]
 8016ea6:	4413      	add	r3, r2
 8016ea8:	b28a      	uxth	r2, r1
 8016eaa:	801a      	strh	r2, [r3, #0]

    return true;
 8016eac:	2301      	movs	r3, #1
}
 8016eae:	4618      	mov	r0, r3
 8016eb0:	3714      	adds	r7, #20
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bc80      	pop	{r7}
 8016eb6:	4770      	bx	lr

08016eb8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b084      	sub	sp, #16
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	6078      	str	r0, [r7, #4]
 8016ec0:	460b      	mov	r3, r1
 8016ec2:	70fb      	strb	r3, [r7, #3]
 8016ec4:	4613      	mov	r3, r2
 8016ec6:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8016ec8:	2300      	movs	r3, #0
 8016eca:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d101      	bne.n	8016ed6 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	e018      	b.n	8016f08 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016ed6:	78fb      	ldrb	r3, [r7, #3]
 8016ed8:	73bb      	strb	r3, [r7, #14]
 8016eda:	e010      	b.n	8016efe <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016edc:	7bbb      	ldrb	r3, [r7, #14]
 8016ede:	005b      	lsls	r3, r3, #1
 8016ee0:	687a      	ldr	r2, [r7, #4]
 8016ee2:	4413      	add	r3, r2
 8016ee4:	881b      	ldrh	r3, [r3, #0]
 8016ee6:	2110      	movs	r1, #16
 8016ee8:	4618      	mov	r0, r3
 8016eea:	f7ff fef9 	bl	8016ce0 <CountChannels>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	461a      	mov	r2, r3
 8016ef2:	7bfb      	ldrb	r3, [r7, #15]
 8016ef4:	4413      	add	r3, r2
 8016ef6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016ef8:	7bbb      	ldrb	r3, [r7, #14]
 8016efa:	3301      	adds	r3, #1
 8016efc:	73bb      	strb	r3, [r7, #14]
 8016efe:	7bba      	ldrb	r2, [r7, #14]
 8016f00:	78bb      	ldrb	r3, [r7, #2]
 8016f02:	429a      	cmp	r2, r3
 8016f04:	d3ea      	bcc.n	8016edc <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8016f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f08:	4618      	mov	r0, r3
 8016f0a:	3710      	adds	r7, #16
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	bd80      	pop	{r7, pc}

08016f10 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016f10:	b480      	push	{r7}
 8016f12:	b087      	sub	sp, #28
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	60f8      	str	r0, [r7, #12]
 8016f18:	60b9      	str	r1, [r7, #8]
 8016f1a:	4613      	mov	r3, r2
 8016f1c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d016      	beq.n	8016f52 <RegionCommonChanMaskCopy+0x42>
 8016f24:	68bb      	ldr	r3, [r7, #8]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d013      	beq.n	8016f52 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	75fb      	strb	r3, [r7, #23]
 8016f2e:	e00c      	b.n	8016f4a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016f30:	7dfb      	ldrb	r3, [r7, #23]
 8016f32:	005b      	lsls	r3, r3, #1
 8016f34:	68ba      	ldr	r2, [r7, #8]
 8016f36:	441a      	add	r2, r3
 8016f38:	7dfb      	ldrb	r3, [r7, #23]
 8016f3a:	005b      	lsls	r3, r3, #1
 8016f3c:	68f9      	ldr	r1, [r7, #12]
 8016f3e:	440b      	add	r3, r1
 8016f40:	8812      	ldrh	r2, [r2, #0]
 8016f42:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8016f44:	7dfb      	ldrb	r3, [r7, #23]
 8016f46:	3301      	adds	r3, #1
 8016f48:	75fb      	strb	r3, [r7, #23]
 8016f4a:	7dfa      	ldrb	r2, [r7, #23]
 8016f4c:	79fb      	ldrb	r3, [r7, #7]
 8016f4e:	429a      	cmp	r2, r3
 8016f50:	d3ee      	bcc.n	8016f30 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8016f52:	bf00      	nop
 8016f54:	371c      	adds	r7, #28
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bc80      	pop	{r7}
 8016f5a:	4770      	bx	lr

08016f5c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016f5c:	b082      	sub	sp, #8
 8016f5e:	b580      	push	{r7, lr}
 8016f60:	b086      	sub	sp, #24
 8016f62:	af00      	add	r7, sp, #0
 8016f64:	60f8      	str	r0, [r7, #12]
 8016f66:	60b9      	str	r1, [r7, #8]
 8016f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8016f6a:	4613      	mov	r3, r2
 8016f6c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016f6e:	79f9      	ldrb	r1, [r7, #7]
 8016f70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016f74:	cb0c      	ldmia	r3, {r2, r3}
 8016f76:	68f8      	ldr	r0, [r7, #12]
 8016f78:	f7ff fd8c 	bl	8016a94 <GetDutyCycle>
 8016f7c:	4603      	mov	r3, r0
 8016f7e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	68da      	ldr	r2, [r3, #12]
 8016f84:	8afb      	ldrh	r3, [r7, #22]
 8016f86:	68b9      	ldr	r1, [r7, #8]
 8016f88:	fb01 f303 	mul.w	r3, r1, r3
 8016f8c:	429a      	cmp	r2, r3
 8016f8e:	d909      	bls.n	8016fa4 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	68da      	ldr	r2, [r3, #12]
 8016f94:	8afb      	ldrh	r3, [r7, #22]
 8016f96:	68b9      	ldr	r1, [r7, #8]
 8016f98:	fb01 f303 	mul.w	r3, r1, r3
 8016f9c:	1ad2      	subs	r2, r2, r3
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016fa2:	e002      	b.n	8016faa <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	60da      	str	r2, [r3, #12]
}
 8016faa:	bf00      	nop
 8016fac:	3718      	adds	r7, #24
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016fb4:	b002      	add	sp, #8
 8016fb6:	4770      	bx	lr

08016fb8 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fba:	b08f      	sub	sp, #60	@ 0x3c
 8016fbc:	af04      	add	r7, sp, #16
 8016fbe:	6039      	str	r1, [r7, #0]
 8016fc0:	4611      	mov	r1, r2
 8016fc2:	461a      	mov	r2, r3
 8016fc4:	4603      	mov	r3, r0
 8016fc6:	71fb      	strb	r3, [r7, #7]
 8016fc8:	460b      	mov	r3, r1
 8016fca:	71bb      	strb	r3, [r7, #6]
 8016fcc:	4613      	mov	r3, r2
 8016fce:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8016fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8016fd6:	f004 ff49 	bl	801be6c <UTIL_TIMER_GetCurrentTime>
 8016fda:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8016fdc:	2300      	movs	r3, #0
 8016fde:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8016fe0:	2301      	movs	r3, #1
 8016fe2:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8016fea:	2300      	movs	r3, #0
 8016fec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016ff0:	e0ba      	b.n	8017168 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8016ff2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016ff6:	4613      	mov	r3, r2
 8016ff8:	005b      	lsls	r3, r3, #1
 8016ffa:	4413      	add	r3, r2
 8016ffc:	00db      	lsls	r3, r3, #3
 8016ffe:	461a      	mov	r2, r3
 8017000:	683b      	ldr	r3, [r7, #0]
 8017002:	189c      	adds	r4, r3, r2
 8017004:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8017008:	797a      	ldrb	r2, [r7, #5]
 801700a:	79fd      	ldrb	r5, [r7, #7]
 801700c:	69fb      	ldr	r3, [r7, #28]
 801700e:	9302      	str	r3, [sp, #8]
 8017010:	46ec      	mov	ip, sp
 8017012:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8017016:	e893 0003 	ldmia.w	r3, {r0, r1}
 801701a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801701e:	4633      	mov	r3, r6
 8017020:	4629      	mov	r1, r5
 8017022:	4620      	mov	r0, r4
 8017024:	f7ff fe22 	bl	8016c6c <UpdateTimeCredits>
 8017028:	4603      	mov	r3, r0
 801702a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801702c:	8afa      	ldrh	r2, [r7, #22]
 801702e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017030:	fb02 f303 	mul.w	r3, r2, r3
 8017034:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017036:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801703a:	4613      	mov	r3, r2
 801703c:	005b      	lsls	r3, r3, #1
 801703e:	4413      	add	r3, r2
 8017040:	00db      	lsls	r3, r3, #3
 8017042:	461a      	mov	r2, r3
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	4413      	add	r3, r2
 8017048:	68db      	ldr	r3, [r3, #12]
 801704a:	69ba      	ldr	r2, [r7, #24]
 801704c:	429a      	cmp	r2, r3
 801704e:	d308      	bcc.n	8017062 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017050:	797b      	ldrb	r3, [r7, #5]
 8017052:	f083 0301 	eor.w	r3, r3, #1
 8017056:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017058:	2b00      	cmp	r3, #0
 801705a:	d013      	beq.n	8017084 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801705c:	79fb      	ldrb	r3, [r7, #7]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d010      	beq.n	8017084 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8017062:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017066:	4613      	mov	r3, r2
 8017068:	005b      	lsls	r3, r3, #1
 801706a:	4413      	add	r3, r2
 801706c:	00db      	lsls	r3, r3, #3
 801706e:	461a      	mov	r2, r3
 8017070:	683b      	ldr	r3, [r7, #0]
 8017072:	4413      	add	r3, r2
 8017074:	2201      	movs	r2, #1
 8017076:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017078:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801707c:	3301      	adds	r3, #1
 801707e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017082:	e06c      	b.n	801715e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017084:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8017088:	4613      	mov	r3, r2
 801708a:	005b      	lsls	r3, r3, #1
 801708c:	4413      	add	r3, r2
 801708e:	00db      	lsls	r3, r3, #3
 8017090:	461a      	mov	r2, r3
 8017092:	683b      	ldr	r3, [r7, #0]
 8017094:	4413      	add	r3, r2
 8017096:	2200      	movs	r2, #0
 8017098:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 801709a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801709e:	4613      	mov	r3, r2
 80170a0:	005b      	lsls	r3, r3, #1
 80170a2:	4413      	add	r3, r2
 80170a4:	00db      	lsls	r3, r3, #3
 80170a6:	461a      	mov	r2, r3
 80170a8:	683b      	ldr	r3, [r7, #0]
 80170aa:	4413      	add	r3, r2
 80170ac:	691b      	ldr	r3, [r3, #16]
 80170ae:	69ba      	ldr	r2, [r7, #24]
 80170b0:	429a      	cmp	r2, r3
 80170b2:	d215      	bcs.n	80170e0 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80170b4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80170b8:	4613      	mov	r3, r2
 80170ba:	005b      	lsls	r3, r3, #1
 80170bc:	4413      	add	r3, r2
 80170be:	00db      	lsls	r3, r3, #3
 80170c0:	461a      	mov	r2, r3
 80170c2:	683b      	ldr	r3, [r7, #0]
 80170c4:	4413      	add	r3, r2
 80170c6:	68db      	ldr	r3, [r3, #12]
 80170c8:	69ba      	ldr	r2, [r7, #24]
 80170ca:	1ad3      	subs	r3, r2, r3
 80170cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80170ce:	4293      	cmp	r3, r2
 80170d0:	bf28      	it	cs
 80170d2:	4613      	movcs	r3, r2
 80170d4:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80170d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80170da:	3301      	adds	r3, #1
 80170dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80170e0:	79fb      	ldrb	r3, [r7, #7]
 80170e2:	f083 0301 	eor.w	r3, r3, #1
 80170e6:	b2db      	uxtb	r3, r3
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d038      	beq.n	801715e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80170ec:	2300      	movs	r3, #0
 80170ee:	60fb      	str	r3, [r7, #12]
 80170f0:	2300      	movs	r3, #0
 80170f2:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80170f4:	8afb      	ldrh	r3, [r7, #22]
 80170f6:	2b64      	cmp	r3, #100	@ 0x64
 80170f8:	d103      	bne.n	8017102 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80170fa:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80170fe:	60fb      	str	r3, [r7, #12]
 8017100:	e009      	b.n	8017116 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017102:	8afb      	ldrh	r3, [r7, #22]
 8017104:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8017108:	d103      	bne.n	8017112 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801710a:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 801710e:	60fb      	str	r3, [r7, #12]
 8017110:	e001      	b.n	8017116 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017112:	4b1e      	ldr	r3, [pc, #120]	@ (801718c <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017114:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017118:	4a1c      	ldr	r2, [pc, #112]	@ (801718c <RegionCommonUpdateBandTimeOff+0x1d4>)
 801711a:	4293      	cmp	r3, r2
 801711c:	d90e      	bls.n	801713c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801711e:	68fa      	ldr	r2, [r7, #12]
 8017120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017122:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8017126:	3b30      	subs	r3, #48	@ 0x30
 8017128:	4919      	ldr	r1, [pc, #100]	@ (8017190 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801712a:	fba1 1303 	umull	r1, r3, r1, r3
 801712e:	0c1b      	lsrs	r3, r3, #16
 8017130:	3301      	adds	r3, #1
 8017132:	4918      	ldr	r1, [pc, #96]	@ (8017194 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8017134:	fb01 f303 	mul.w	r3, r1, r3
 8017138:	4413      	add	r3, r2
 801713a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801713c:	f107 000c 	add.w	r0, r7, #12
 8017140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017142:	9300      	str	r3, [sp, #0]
 8017144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017146:	f107 020c 	add.w	r2, r7, #12
 801714a:	ca06      	ldmia	r2, {r1, r2}
 801714c:	f003 ffa7 	bl	801b09e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8017150:	f107 030c 	add.w	r3, r7, #12
 8017154:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017158:	f004 f860 	bl	801b21c <SysTimeToMs>
 801715c:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801715e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017162:	3301      	adds	r3, #1
 8017164:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8017168:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801716c:	79bb      	ldrb	r3, [r7, #6]
 801716e:	429a      	cmp	r2, r3
 8017170:	f4ff af3f 	bcc.w	8016ff2 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8017174:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017178:	2b00      	cmp	r3, #0
 801717a:	d102      	bne.n	8017182 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801717c:	f04f 33ff 	mov.w	r3, #4294967295
 8017180:	e000      	b.n	8017184 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8017182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017184:	4618      	mov	r0, r3
 8017186:	372c      	adds	r7, #44	@ 0x2c
 8017188:	46bd      	mov	sp, r7
 801718a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801718c:	0001ec30 	.word	0x0001ec30
 8017190:	c22e4507 	.word	0xc22e4507
 8017194:	00015180 	.word	0x00015180

08017198 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8017198:	b480      	push	{r7}
 801719a:	b085      	sub	sp, #20
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
 80171a0:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80171a2:	2300      	movs	r3, #0
 80171a4:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	781b      	ldrb	r3, [r3, #0]
 80171aa:	2b03      	cmp	r3, #3
 80171ac:	d13f      	bne.n	801722e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	3301      	adds	r3, #1
 80171b2:	781b      	ldrb	r3, [r3, #0]
 80171b4:	b25a      	sxtb	r2, r3
 80171b6:	683b      	ldr	r3, [r7, #0]
 80171b8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80171c0:	f003 030f 	and.w	r3, r3, #15
 80171c4:	b25a      	sxtb	r2, r3
 80171c6:	683b      	ldr	r3, [r7, #0]
 80171c8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80171ca:	683b      	ldr	r3, [r7, #0]
 80171cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80171d0:	b2db      	uxtb	r3, r3
 80171d2:	091b      	lsrs	r3, r3, #4
 80171d4:	b2db      	uxtb	r3, r3
 80171d6:	b25a      	sxtb	r2, r3
 80171d8:	683b      	ldr	r3, [r7, #0]
 80171da:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	3302      	adds	r3, #2
 80171e0:	781b      	ldrb	r3, [r3, #0]
 80171e2:	461a      	mov	r2, r3
 80171e4:	683b      	ldr	r3, [r7, #0]
 80171e6:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	889b      	ldrh	r3, [r3, #4]
 80171ec:	b21a      	sxth	r2, r3
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	3303      	adds	r3, #3
 80171f2:	781b      	ldrb	r3, [r3, #0]
 80171f4:	021b      	lsls	r3, r3, #8
 80171f6:	b21b      	sxth	r3, r3
 80171f8:	4313      	orrs	r3, r2
 80171fa:	b21b      	sxth	r3, r3
 80171fc:	b29a      	uxth	r2, r3
 80171fe:	683b      	ldr	r3, [r7, #0]
 8017200:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	791a      	ldrb	r2, [r3, #4]
 8017206:	683b      	ldr	r3, [r7, #0]
 8017208:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801720a:	683b      	ldr	r3, [r7, #0]
 801720c:	781b      	ldrb	r3, [r3, #0]
 801720e:	091b      	lsrs	r3, r3, #4
 8017210:	b2db      	uxtb	r3, r3
 8017212:	f003 0307 	and.w	r3, r3, #7
 8017216:	b2da      	uxtb	r2, r3
 8017218:	683b      	ldr	r3, [r7, #0]
 801721a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801721c:	683b      	ldr	r3, [r7, #0]
 801721e:	781b      	ldrb	r3, [r3, #0]
 8017220:	f003 030f 	and.w	r3, r3, #15
 8017224:	b2da      	uxtb	r2, r3
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801722a:	2305      	movs	r3, #5
 801722c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801722e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017230:	4618      	mov	r0, r3
 8017232:	3714      	adds	r7, #20
 8017234:	46bd      	mov	sp, r7
 8017236:	bc80      	pop	{r7}
 8017238:	4770      	bx	lr

0801723a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801723a:	b5b0      	push	{r4, r5, r7, lr}
 801723c:	b088      	sub	sp, #32
 801723e:	af02      	add	r7, sp, #8
 8017240:	60f8      	str	r0, [r7, #12]
 8017242:	60b9      	str	r1, [r7, #8]
 8017244:	607a      	str	r2, [r7, #4]
 8017246:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	791b      	ldrb	r3, [r3, #4]
 801724c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	799b      	ldrb	r3, [r3, #6]
 8017252:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	79db      	ldrb	r3, [r3, #7]
 8017258:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	7a1b      	ldrb	r3, [r3, #8]
 801725e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	795b      	ldrb	r3, [r3, #5]
 8017264:	f083 0301 	eor.w	r3, r3, #1
 8017268:	b2db      	uxtb	r3, r3
 801726a:	2b00      	cmp	r3, #0
 801726c:	d008      	beq.n	8017280 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	7adb      	ldrb	r3, [r3, #11]
 8017272:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	7a5b      	ldrb	r3, [r3, #9]
 8017278:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	7a9b      	ldrb	r3, [r3, #10]
 801727e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8017280:	7dfb      	ldrb	r3, [r7, #23]
 8017282:	2b00      	cmp	r3, #0
 8017284:	d04a      	beq.n	801731c <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8017286:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801728a:	2b0f      	cmp	r3, #15
 801728c:	d103      	bne.n	8017296 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	7a5b      	ldrb	r3, [r3, #9]
 8017292:	75bb      	strb	r3, [r7, #22]
 8017294:	e01d      	b.n	80172d2 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	7b18      	ldrb	r0, [r3, #12]
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	6919      	ldr	r1, [r3, #16]
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80172aa:	68fa      	ldr	r2, [r7, #12]
 80172ac:	6992      	ldr	r2, [r2, #24]
 80172ae:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80172b2:	9201      	str	r2, [sp, #4]
 80172b4:	9300      	str	r3, [sp, #0]
 80172b6:	462b      	mov	r3, r5
 80172b8:	4622      	mov	r2, r4
 80172ba:	f7ff fd3a 	bl	8016d32 <RegionCommonChanVerifyDr>
 80172be:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80172c0:	f083 0301 	eor.w	r3, r3, #1
 80172c4:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d003      	beq.n	80172d2 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80172ca:	7dfb      	ldrb	r3, [r7, #23]
 80172cc:	f023 0302 	bic.w	r3, r3, #2
 80172d0:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80172d2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80172d6:	2b0f      	cmp	r3, #15
 80172d8:	d103      	bne.n	80172e2 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	7a9b      	ldrb	r3, [r3, #10]
 80172de:	757b      	strb	r3, [r7, #21]
 80172e0:	e01c      	b.n	801731c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80172ee:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80172f2:	4618      	mov	r0, r3
 80172f4:	f7ff fd8f 	bl	8016e16 <RegionCommonValueInRange>
 80172f8:	4603      	mov	r3, r0
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d10e      	bne.n	801731c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8017304:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8017308:	429a      	cmp	r2, r3
 801730a:	da03      	bge.n	8017314 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	7f5b      	ldrb	r3, [r3, #29]
 8017310:	757b      	strb	r3, [r7, #21]
 8017312:	e003      	b.n	801731c <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017314:	7dfb      	ldrb	r3, [r7, #23]
 8017316:	f023 0304 	bic.w	r3, r3, #4
 801731a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801731c:	7dfb      	ldrb	r3, [r7, #23]
 801731e:	2b07      	cmp	r3, #7
 8017320:	d105      	bne.n	801732e <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8017322:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d101      	bne.n	801732e <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801732a:	2301      	movs	r3, #1
 801732c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801732e:	68bb      	ldr	r3, [r7, #8]
 8017330:	7dba      	ldrb	r2, [r7, #22]
 8017332:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	7d7a      	ldrb	r2, [r7, #21]
 8017338:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801733a:	7d3a      	ldrb	r2, [r7, #20]
 801733c:	683b      	ldr	r3, [r7, #0]
 801733e:	701a      	strb	r2, [r3, #0]

    return status;
 8017340:	7dfb      	ldrb	r3, [r7, #23]
}
 8017342:	4618      	mov	r0, r3
 8017344:	3718      	adds	r7, #24
 8017346:	46bd      	mov	sp, r7
 8017348:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801734c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 801734c:	b480      	push	{r7}
 801734e:	b083      	sub	sp, #12
 8017350:	af00      	add	r7, sp, #0
 8017352:	4603      	mov	r3, r0
 8017354:	6039      	str	r1, [r7, #0]
 8017356:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8017358:	79fb      	ldrb	r3, [r7, #7]
 801735a:	4a06      	ldr	r2, [pc, #24]	@ (8017374 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801735c:	fa02 f303 	lsl.w	r3, r2, r3
 8017360:	461a      	mov	r2, r3
 8017362:	683b      	ldr	r3, [r7, #0]
 8017364:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017368:	4618      	mov	r0, r3
 801736a:	370c      	adds	r7, #12
 801736c:	46bd      	mov	sp, r7
 801736e:	bc80      	pop	{r7}
 8017370:	4770      	bx	lr
 8017372:	bf00      	nop
 8017374:	000f4240 	.word	0x000f4240

08017378 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8017378:	b480      	push	{r7}
 801737a:	b083      	sub	sp, #12
 801737c:	af00      	add	r7, sp, #0
 801737e:	4603      	mov	r3, r0
 8017380:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8017382:	79fb      	ldrb	r3, [r7, #7]
 8017384:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017388:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801738c:	4618      	mov	r0, r3
 801738e:	370c      	adds	r7, #12
 8017390:	46bd      	mov	sp, r7
 8017392:	bc80      	pop	{r7}
 8017394:	4770      	bx	lr
	...

08017398 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8017398:	b480      	push	{r7}
 801739a:	b085      	sub	sp, #20
 801739c:	af00      	add	r7, sp, #0
 801739e:	60f8      	str	r0, [r7, #12]
 80173a0:	607a      	str	r2, [r7, #4]
 80173a2:	603b      	str	r3, [r7, #0]
 80173a4:	460b      	mov	r3, r1
 80173a6:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80173a8:	7afa      	ldrb	r2, [r7, #11]
 80173aa:	7afb      	ldrb	r3, [r7, #11]
 80173ac:	3b04      	subs	r3, #4
 80173ae:	4619      	mov	r1, r3
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	fb03 f101 	mul.w	r1, r3, r1
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80173bc:	fb00 f303 	mul.w	r3, r0, r3
 80173c0:	440b      	add	r3, r1
 80173c2:	005b      	lsls	r3, r3, #1
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d013      	beq.n	80173f0 <RegionCommonComputeRxWindowParameters+0x58>
 80173c8:	7afb      	ldrb	r3, [r7, #11]
 80173ca:	3b04      	subs	r3, #4
 80173cc:	4619      	mov	r1, r3
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	fb03 f101 	mul.w	r1, r3, r1
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80173da:	fb00 f303 	mul.w	r3, r0, r3
 80173de:	440b      	add	r3, r1
 80173e0:	0059      	lsls	r1, r3, #1
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	440b      	add	r3, r1
 80173e6:	1e59      	subs	r1, r3, #1
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80173ee:	e00f      	b.n	8017410 <RegionCommonComputeRxWindowParameters+0x78>
 80173f0:	7afb      	ldrb	r3, [r7, #11]
 80173f2:	3b04      	subs	r3, #4
 80173f4:	4619      	mov	r1, r3
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	fb03 f101 	mul.w	r1, r3, r1
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8017402:	fb00 f303 	mul.w	r3, r0, r3
 8017406:	440b      	add	r3, r1
 8017408:	0059      	lsls	r1, r3, #1
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	fbb1 f3f3 	udiv	r3, r1, r3
 8017410:	429a      	cmp	r2, r3
 8017412:	bf38      	it	cc
 8017414:	461a      	movcc	r2, r3
 8017416:	69bb      	ldr	r3, [r7, #24]
 8017418:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	009b      	lsls	r3, r3, #2
 801741e:	4619      	mov	r1, r3
 8017420:	69bb      	ldr	r3, [r7, #24]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	68fa      	ldr	r2, [r7, #12]
 8017426:	fb02 f303 	mul.w	r3, r2, r3
 801742a:	2b00      	cmp	r3, #0
 801742c:	d007      	beq.n	801743e <RegionCommonComputeRxWindowParameters+0xa6>
 801742e:	69bb      	ldr	r3, [r7, #24]
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	68fa      	ldr	r2, [r7, #12]
 8017434:	fb02 f303 	mul.w	r3, r2, r3
 8017438:	3301      	adds	r3, #1
 801743a:	085b      	lsrs	r3, r3, #1
 801743c:	e005      	b.n	801744a <RegionCommonComputeRxWindowParameters+0xb2>
 801743e:	69bb      	ldr	r3, [r7, #24]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	68fa      	ldr	r2, [r7, #12]
 8017444:	fb02 f303 	mul.w	r3, r2, r3
 8017448:	085b      	lsrs	r3, r3, #1
 801744a:	1acb      	subs	r3, r1, r3
 801744c:	683a      	ldr	r2, [r7, #0]
 801744e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017452:	fb01 f202 	mul.w	r2, r1, r2
 8017456:	1a9b      	subs	r3, r3, r2
 8017458:	2b00      	cmp	r3, #0
 801745a:	dd27      	ble.n	80174ac <RegionCommonComputeRxWindowParameters+0x114>
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	009b      	lsls	r3, r3, #2
 8017460:	4619      	mov	r1, r3
 8017462:	69bb      	ldr	r3, [r7, #24]
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	68fa      	ldr	r2, [r7, #12]
 8017468:	fb02 f303 	mul.w	r3, r2, r3
 801746c:	2b00      	cmp	r3, #0
 801746e:	d007      	beq.n	8017480 <RegionCommonComputeRxWindowParameters+0xe8>
 8017470:	69bb      	ldr	r3, [r7, #24]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	68fa      	ldr	r2, [r7, #12]
 8017476:	fb02 f303 	mul.w	r3, r2, r3
 801747a:	3301      	adds	r3, #1
 801747c:	085b      	lsrs	r3, r3, #1
 801747e:	e005      	b.n	801748c <RegionCommonComputeRxWindowParameters+0xf4>
 8017480:	69bb      	ldr	r3, [r7, #24]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	68fa      	ldr	r2, [r7, #12]
 8017486:	fb02 f303 	mul.w	r3, r2, r3
 801748a:	085b      	lsrs	r3, r3, #1
 801748c:	1acb      	subs	r3, r1, r3
 801748e:	683a      	ldr	r2, [r7, #0]
 8017490:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017494:	fb01 f202 	mul.w	r2, r1, r2
 8017498:	1a9b      	subs	r3, r3, r2
 801749a:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 801749e:	4a19      	ldr	r2, [pc, #100]	@ (8017504 <RegionCommonComputeRxWindowParameters+0x16c>)
 80174a0:	fb82 1203 	smull	r1, r2, r2, r3
 80174a4:	1192      	asrs	r2, r2, #6
 80174a6:	17db      	asrs	r3, r3, #31
 80174a8:	1ad3      	subs	r3, r2, r3
 80174aa:	e024      	b.n	80174f6 <RegionCommonComputeRxWindowParameters+0x15e>
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	009b      	lsls	r3, r3, #2
 80174b0:	4619      	mov	r1, r3
 80174b2:	69bb      	ldr	r3, [r7, #24]
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	68fa      	ldr	r2, [r7, #12]
 80174b8:	fb02 f303 	mul.w	r3, r2, r3
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d007      	beq.n	80174d0 <RegionCommonComputeRxWindowParameters+0x138>
 80174c0:	69bb      	ldr	r3, [r7, #24]
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	68fa      	ldr	r2, [r7, #12]
 80174c6:	fb02 f303 	mul.w	r3, r2, r3
 80174ca:	3301      	adds	r3, #1
 80174cc:	085b      	lsrs	r3, r3, #1
 80174ce:	e005      	b.n	80174dc <RegionCommonComputeRxWindowParameters+0x144>
 80174d0:	69bb      	ldr	r3, [r7, #24]
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	68fa      	ldr	r2, [r7, #12]
 80174d6:	fb02 f303 	mul.w	r3, r2, r3
 80174da:	085b      	lsrs	r3, r3, #1
 80174dc:	1acb      	subs	r3, r1, r3
 80174de:	683a      	ldr	r2, [r7, #0]
 80174e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80174e4:	fb01 f202 	mul.w	r2, r1, r2
 80174e8:	1a9b      	subs	r3, r3, r2
 80174ea:	4a06      	ldr	r2, [pc, #24]	@ (8017504 <RegionCommonComputeRxWindowParameters+0x16c>)
 80174ec:	fb82 1203 	smull	r1, r2, r2, r3
 80174f0:	1192      	asrs	r2, r2, #6
 80174f2:	17db      	asrs	r3, r3, #31
 80174f4:	1ad3      	subs	r3, r2, r3
 80174f6:	69fa      	ldr	r2, [r7, #28]
 80174f8:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80174fa:	bf00      	nop
 80174fc:	3714      	adds	r7, #20
 80174fe:	46bd      	mov	sp, r7
 8017500:	bc80      	pop	{r7}
 8017502:	4770      	bx	lr
 8017504:	10624dd3 	.word	0x10624dd3

08017508 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b086      	sub	sp, #24
 801750c:	af00      	add	r7, sp, #0
 801750e:	4603      	mov	r3, r0
 8017510:	60b9      	str	r1, [r7, #8]
 8017512:	607a      	str	r2, [r7, #4]
 8017514:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8017516:	2300      	movs	r3, #0
 8017518:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801751a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801751e:	005b      	lsls	r3, r3, #1
 8017520:	4618      	mov	r0, r3
 8017522:	f7e9 fbcf 	bl	8000cc4 <__aeabi_ui2f>
 8017526:	4603      	mov	r3, r0
 8017528:	4619      	mov	r1, r3
 801752a:	68b8      	ldr	r0, [r7, #8]
 801752c:	f7e9 fb18 	bl	8000b60 <__aeabi_fsub>
 8017530:	4603      	mov	r3, r0
 8017532:	6879      	ldr	r1, [r7, #4]
 8017534:	4618      	mov	r0, r3
 8017536:	f7e9 fb13 	bl	8000b60 <__aeabi_fsub>
 801753a:	4603      	mov	r3, r0
 801753c:	4618      	mov	r0, r3
 801753e:	f7e8 ffdb 	bl	80004f8 <__aeabi_f2d>
 8017542:	4602      	mov	r2, r0
 8017544:	460b      	mov	r3, r1
 8017546:	4610      	mov	r0, r2
 8017548:	4619      	mov	r1, r3
 801754a:	f007 fc75 	bl	801ee38 <floor>
 801754e:	4602      	mov	r2, r0
 8017550:	460b      	mov	r3, r1
 8017552:	4610      	mov	r0, r2
 8017554:	4619      	mov	r1, r3
 8017556:	f7e9 fad7 	bl	8000b08 <__aeabi_d2iz>
 801755a:	4603      	mov	r3, r0
 801755c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801755e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017562:	4618      	mov	r0, r3
 8017564:	3718      	adds	r7, #24
 8017566:	46bd      	mov	sp, r7
 8017568:	bd80      	pop	{r7, pc}

0801756a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801756a:	b590      	push	{r4, r7, lr}
 801756c:	b087      	sub	sp, #28
 801756e:	af00      	add	r7, sp, #0
 8017570:	60f8      	str	r0, [r7, #12]
 8017572:	60b9      	str	r1, [r7, #8]
 8017574:	607a      	str	r2, [r7, #4]
 8017576:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8017578:	2300      	movs	r3, #0
 801757a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 801757c:	2300      	movs	r3, #0
 801757e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017580:	2300      	movs	r3, #0
 8017582:	757b      	strb	r3, [r7, #21]
 8017584:	2300      	movs	r3, #0
 8017586:	753b      	strb	r3, [r7, #20]
 8017588:	e09c      	b.n	80176c4 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801758a:	2300      	movs	r3, #0
 801758c:	74fb      	strb	r3, [r7, #19]
 801758e:	e08f      	b.n	80176b0 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	685a      	ldr	r2, [r3, #4]
 8017594:	7d3b      	ldrb	r3, [r7, #20]
 8017596:	005b      	lsls	r3, r3, #1
 8017598:	4413      	add	r3, r2
 801759a:	881b      	ldrh	r3, [r3, #0]
 801759c:	461a      	mov	r2, r3
 801759e:	7cfb      	ldrb	r3, [r7, #19]
 80175a0:	fa42 f303 	asr.w	r3, r2, r3
 80175a4:	f003 0301 	and.w	r3, r3, #1
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d07e      	beq.n	80176aa <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	689a      	ldr	r2, [r3, #8]
 80175b0:	7d79      	ldrb	r1, [r7, #21]
 80175b2:	7cfb      	ldrb	r3, [r7, #19]
 80175b4:	440b      	add	r3, r1
 80175b6:	4619      	mov	r1, r3
 80175b8:	460b      	mov	r3, r1
 80175ba:	005b      	lsls	r3, r3, #1
 80175bc:	440b      	add	r3, r1
 80175be:	009b      	lsls	r3, r3, #2
 80175c0:	4413      	add	r3, r2
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d06b      	beq.n	80176a0 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	781b      	ldrb	r3, [r3, #0]
 80175cc:	f083 0301 	eor.w	r3, r3, #1
 80175d0:	b2db      	uxtb	r3, r3
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d011      	beq.n	80175fa <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d00d      	beq.n	80175fa <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	695a      	ldr	r2, [r3, #20]
 80175e2:	7d3b      	ldrb	r3, [r7, #20]
 80175e4:	005b      	lsls	r3, r3, #1
 80175e6:	4413      	add	r3, r2
 80175e8:	881b      	ldrh	r3, [r3, #0]
 80175ea:	461a      	mov	r2, r3
 80175ec:	7cfb      	ldrb	r3, [r7, #19]
 80175ee:	fa42 f303 	asr.w	r3, r2, r3
 80175f2:	f003 0301 	and.w	r3, r3, #1
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d054      	beq.n	80176a4 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	785b      	ldrb	r3, [r3, #1]
 80175fe:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	689a      	ldr	r2, [r3, #8]
 8017604:	7d79      	ldrb	r1, [r7, #21]
 8017606:	7cfb      	ldrb	r3, [r7, #19]
 8017608:	440b      	add	r3, r1
 801760a:	4619      	mov	r1, r3
 801760c:	460b      	mov	r3, r1
 801760e:	005b      	lsls	r3, r3, #1
 8017610:	440b      	add	r3, r1
 8017612:	009b      	lsls	r3, r3, #2
 8017614:	4413      	add	r3, r2
 8017616:	7a1b      	ldrb	r3, [r3, #8]
 8017618:	f343 0303 	sbfx	r3, r3, #0, #4
 801761c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801761e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	689a      	ldr	r2, [r3, #8]
 8017624:	7d79      	ldrb	r1, [r7, #21]
 8017626:	7cfb      	ldrb	r3, [r7, #19]
 8017628:	440b      	add	r3, r1
 801762a:	4619      	mov	r1, r3
 801762c:	460b      	mov	r3, r1
 801762e:	005b      	lsls	r3, r3, #1
 8017630:	440b      	add	r3, r1
 8017632:	009b      	lsls	r3, r3, #2
 8017634:	4413      	add	r3, r2
 8017636:	7a1b      	ldrb	r3, [r3, #8]
 8017638:	f343 1303 	sbfx	r3, r3, #4, #4
 801763c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801763e:	461a      	mov	r2, r3
 8017640:	4621      	mov	r1, r4
 8017642:	f7ff fbe8 	bl	8016e16 <RegionCommonValueInRange>
 8017646:	4603      	mov	r3, r0
 8017648:	2b00      	cmp	r3, #0
 801764a:	d02d      	beq.n	80176a8 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	68da      	ldr	r2, [r3, #12]
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	6899      	ldr	r1, [r3, #8]
 8017654:	7d78      	ldrb	r0, [r7, #21]
 8017656:	7cfb      	ldrb	r3, [r7, #19]
 8017658:	4403      	add	r3, r0
 801765a:	4618      	mov	r0, r3
 801765c:	4603      	mov	r3, r0
 801765e:	005b      	lsls	r3, r3, #1
 8017660:	4403      	add	r3, r0
 8017662:	009b      	lsls	r3, r3, #2
 8017664:	440b      	add	r3, r1
 8017666:	7a5b      	ldrb	r3, [r3, #9]
 8017668:	4619      	mov	r1, r3
 801766a:	460b      	mov	r3, r1
 801766c:	005b      	lsls	r3, r3, #1
 801766e:	440b      	add	r3, r1
 8017670:	00db      	lsls	r3, r3, #3
 8017672:	4413      	add	r3, r2
 8017674:	7d1b      	ldrb	r3, [r3, #20]
 8017676:	f083 0301 	eor.w	r3, r3, #1
 801767a:	b2db      	uxtb	r3, r3
 801767c:	2b00      	cmp	r3, #0
 801767e:	d003      	beq.n	8017688 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017680:	7dbb      	ldrb	r3, [r7, #22]
 8017682:	3301      	adds	r3, #1
 8017684:	75bb      	strb	r3, [r7, #22]
                    continue;
 8017686:	e010      	b.n	80176aa <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8017688:	7dfb      	ldrb	r3, [r7, #23]
 801768a:	1c5a      	adds	r2, r3, #1
 801768c:	75fa      	strb	r2, [r7, #23]
 801768e:	461a      	mov	r2, r3
 8017690:	68bb      	ldr	r3, [r7, #8]
 8017692:	4413      	add	r3, r2
 8017694:	7d79      	ldrb	r1, [r7, #21]
 8017696:	7cfa      	ldrb	r2, [r7, #19]
 8017698:	440a      	add	r2, r1
 801769a:	b2d2      	uxtb	r2, r2
 801769c:	701a      	strb	r2, [r3, #0]
 801769e:	e004      	b.n	80176aa <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80176a0:	bf00      	nop
 80176a2:	e002      	b.n	80176aa <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80176a4:	bf00      	nop
 80176a6:	e000      	b.n	80176aa <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80176a8:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80176aa:	7cfb      	ldrb	r3, [r7, #19]
 80176ac:	3301      	adds	r3, #1
 80176ae:	74fb      	strb	r3, [r7, #19]
 80176b0:	7cfb      	ldrb	r3, [r7, #19]
 80176b2:	2b0f      	cmp	r3, #15
 80176b4:	f67f af6c 	bls.w	8017590 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80176b8:	7d7b      	ldrb	r3, [r7, #21]
 80176ba:	3310      	adds	r3, #16
 80176bc:	757b      	strb	r3, [r7, #21]
 80176be:	7d3b      	ldrb	r3, [r7, #20]
 80176c0:	3301      	adds	r3, #1
 80176c2:	753b      	strb	r3, [r7, #20]
 80176c4:	7d7b      	ldrb	r3, [r7, #21]
 80176c6:	b29a      	uxth	r2, r3
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	8a1b      	ldrh	r3, [r3, #16]
 80176cc:	429a      	cmp	r2, r3
 80176ce:	f4ff af5c 	bcc.w	801758a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	7dfa      	ldrb	r2, [r7, #23]
 80176d6:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80176d8:	683b      	ldr	r3, [r7, #0]
 80176da:	7dba      	ldrb	r2, [r7, #22]
 80176dc:	701a      	strb	r2, [r3, #0]
}
 80176de:	bf00      	nop
 80176e0:	371c      	adds	r7, #28
 80176e2:	46bd      	mov	sp, r7
 80176e4:	bd90      	pop	{r4, r7, pc}

080176e6 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80176e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176e8:	b08b      	sub	sp, #44	@ 0x2c
 80176ea:	af04      	add	r7, sp, #16
 80176ec:	60f8      	str	r0, [r7, #12]
 80176ee:	60b9      	str	r1, [r7, #8]
 80176f0:	607a      	str	r2, [r7, #4]
 80176f2:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	685b      	ldr	r3, [r3, #4]
 80176f8:	4618      	mov	r0, r3
 80176fa:	f004 fbc9 	bl	801be90 <UTIL_TIMER_GetElapsedTime>
 80176fe:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	681a      	ldr	r2, [r3, #0]
 8017704:	697b      	ldr	r3, [r7, #20]
 8017706:	1ad2      	subs	r2, r2, r3
 8017708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801770a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 801770c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801770e:	2201      	movs	r2, #1
 8017710:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8017712:	683b      	ldr	r3, [r7, #0]
 8017714:	2200      	movs	r2, #0
 8017716:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	685b      	ldr	r3, [r3, #4]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d004      	beq.n	801772a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017724:	697a      	ldr	r2, [r7, #20]
 8017726:	429a      	cmp	r2, r3
 8017728:	d32b      	bcc.n	8017782 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801772a:	68bb      	ldr	r3, [r7, #8]
 801772c:	2200      	movs	r2, #0
 801772e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	69db      	ldr	r3, [r3, #28]
 8017734:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801773a:	68dd      	ldr	r5, [r3, #12]
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	7a5e      	ldrb	r6, [r3, #9]
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	f893 c008 	ldrb.w	ip, [r3, #8]
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	7d1b      	ldrb	r3, [r3, #20]
 801774a:	68fa      	ldr	r2, [r7, #12]
 801774c:	6992      	ldr	r2, [r2, #24]
 801774e:	9203      	str	r2, [sp, #12]
 8017750:	68fa      	ldr	r2, [r7, #12]
 8017752:	f10d 0e04 	add.w	lr, sp, #4
 8017756:	320c      	adds	r2, #12
 8017758:	e892 0003 	ldmia.w	r2, {r0, r1}
 801775c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8017760:	9300      	str	r3, [sp, #0]
 8017762:	4663      	mov	r3, ip
 8017764:	4632      	mov	r2, r6
 8017766:	4629      	mov	r1, r5
 8017768:	4620      	mov	r0, r4
 801776a:	f7ff fc25 	bl	8016fb8 <RegionCommonUpdateBandTimeOff>
 801776e:	4602      	mov	r2, r0
 8017770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017772:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	69d8      	ldr	r0, [r3, #28]
 8017778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801777a:	683a      	ldr	r2, [r7, #0]
 801777c:	6879      	ldr	r1, [r7, #4]
 801777e:	f7ff fef4 	bl	801756a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017782:	683b      	ldr	r3, [r7, #0]
 8017784:	781b      	ldrb	r3, [r3, #0]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d004      	beq.n	8017794 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801778a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801778c:	2200      	movs	r2, #0
 801778e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017790:	2300      	movs	r3, #0
 8017792:	e006      	b.n	80177a2 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8017794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017796:	781b      	ldrb	r3, [r3, #0]
 8017798:	2b00      	cmp	r3, #0
 801779a:	d001      	beq.n	80177a0 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801779c:	230b      	movs	r3, #11
 801779e:	e000      	b.n	80177a2 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80177a0:	230c      	movs	r3, #12
    }
}
 80177a2:	4618      	mov	r0, r3
 80177a4:	371c      	adds	r7, #28
 80177a6:	46bd      	mov	sp, r7
 80177a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080177aa <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80177aa:	b5b0      	push	{r4, r5, r7, lr}
 80177ac:	b086      	sub	sp, #24
 80177ae:	af02      	add	r7, sp, #8
 80177b0:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	781b      	ldrb	r3, [r3, #0]
 80177b6:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	f993 2000 	ldrsb.w	r2, [r3]
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80177c4:	429a      	cmp	r2, r3
 80177c6:	d103      	bne.n	80177d0 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80177ce:	e026      	b.n	801781e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80177d0:	7bfb      	ldrb	r3, [r7, #15]
 80177d2:	3b01      	subs	r3, #1
 80177d4:	b2db      	uxtb	r3, r3
 80177d6:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80177de:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80177e2:	429a      	cmp	r2, r3
 80177e4:	d019      	beq.n	801781a <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	78d8      	ldrb	r0, [r3, #3]
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	6859      	ldr	r1, [r3, #4]
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80177fa:	687a      	ldr	r2, [r7, #4]
 80177fc:	6892      	ldr	r2, [r2, #8]
 80177fe:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8017802:	9201      	str	r2, [sp, #4]
 8017804:	9300      	str	r3, [sp, #0]
 8017806:	462b      	mov	r3, r5
 8017808:	4622      	mov	r2, r4
 801780a:	f7ff fa92 	bl	8016d32 <RegionCommonChanVerifyDr>
 801780e:	4603      	mov	r3, r0
 8017810:	f083 0301 	eor.w	r3, r3, #1
 8017814:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8017816:	2b00      	cmp	r3, #0
 8017818:	d1da      	bne.n	80177d0 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801781a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801781e:	4618      	mov	r0, r3
 8017820:	3710      	adds	r7, #16
 8017822:	46bd      	mov	sp, r7
 8017824:	bdb0      	pop	{r4, r5, r7, pc}

08017826 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8017826:	b480      	push	{r7}
 8017828:	b083      	sub	sp, #12
 801782a:	af00      	add	r7, sp, #0
 801782c:	4603      	mov	r3, r0
 801782e:	460a      	mov	r2, r1
 8017830:	71fb      	strb	r3, [r7, #7]
 8017832:	4613      	mov	r3, r2
 8017834:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8017836:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801783a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801783e:	4293      	cmp	r3, r2
 8017840:	bfb8      	it	lt
 8017842:	4613      	movlt	r3, r2
 8017844:	b25b      	sxtb	r3, r3
}
 8017846:	4618      	mov	r0, r3
 8017848:	370c      	adds	r7, #12
 801784a:	46bd      	mov	sp, r7
 801784c:	bc80      	pop	{r7}
 801784e:	4770      	bx	lr

08017850 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8017850:	b480      	push	{r7}
 8017852:	b083      	sub	sp, #12
 8017854:	af00      	add	r7, sp, #0
 8017856:	6078      	str	r0, [r7, #4]
 8017858:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	009b      	lsls	r3, r3, #2
 801785e:	683a      	ldr	r2, [r7, #0]
 8017860:	4413      	add	r3, r2
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	4a07      	ldr	r2, [pc, #28]	@ (8017884 <RegionCommonGetBandwidth+0x34>)
 8017866:	4293      	cmp	r3, r2
 8017868:	d004      	beq.n	8017874 <RegionCommonGetBandwidth+0x24>
 801786a:	4a07      	ldr	r2, [pc, #28]	@ (8017888 <RegionCommonGetBandwidth+0x38>)
 801786c:	4293      	cmp	r3, r2
 801786e:	d003      	beq.n	8017878 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8017870:	2300      	movs	r3, #0
 8017872:	e002      	b.n	801787a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8017874:	2301      	movs	r3, #1
 8017876:	e000      	b.n	801787a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8017878:	2302      	movs	r3, #2
    }
}
 801787a:	4618      	mov	r0, r3
 801787c:	370c      	adds	r7, #12
 801787e:	46bd      	mov	sp, r7
 8017880:	bc80      	pop	{r7}
 8017882:	4770      	bx	lr
 8017884:	0003d090 	.word	0x0003d090
 8017888:	0007a120 	.word	0x0007a120

0801788c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b086      	sub	sp, #24
 8017890:	af04      	add	r7, sp, #16
 8017892:	4603      	mov	r3, r0
 8017894:	6039      	str	r1, [r7, #0]
 8017896:	71fb      	strb	r3, [r7, #7]
 8017898:	4613      	mov	r3, r2
 801789a:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 801789c:	79fb      	ldrb	r3, [r7, #7]
 801789e:	2b05      	cmp	r3, #5
 80178a0:	d810      	bhi.n	80178c4 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80178a2:	79fb      	ldrb	r3, [r7, #7]
 80178a4:	4a0f      	ldr	r2, [pc, #60]	@ (80178e4 <RegionCommonRxConfigPrint+0x58>)
 80178a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80178aa:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80178ae:	9202      	str	r2, [sp, #8]
 80178b0:	683a      	ldr	r2, [r7, #0]
 80178b2:	9201      	str	r2, [sp, #4]
 80178b4:	9300      	str	r3, [sp, #0]
 80178b6:	4b0c      	ldr	r3, [pc, #48]	@ (80178e8 <RegionCommonRxConfigPrint+0x5c>)
 80178b8:	2201      	movs	r2, #1
 80178ba:	2100      	movs	r1, #0
 80178bc:	2002      	movs	r0, #2
 80178be:	f004 fbc5 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80178c2:	e00a      	b.n	80178da <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80178c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80178c8:	9301      	str	r3, [sp, #4]
 80178ca:	683b      	ldr	r3, [r7, #0]
 80178cc:	9300      	str	r3, [sp, #0]
 80178ce:	4b07      	ldr	r3, [pc, #28]	@ (80178ec <RegionCommonRxConfigPrint+0x60>)
 80178d0:	2201      	movs	r2, #1
 80178d2:	2100      	movs	r1, #0
 80178d4:	2002      	movs	r0, #2
 80178d6:	f004 fbb9 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
}
 80178da:	bf00      	nop
 80178dc:	3708      	adds	r7, #8
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}
 80178e2:	bf00      	nop
 80178e4:	20000128 	.word	0x20000128
 80178e8:	0801f89c 	.word	0x0801f89c
 80178ec:	0801f8bc 	.word	0x0801f8bc

080178f0 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b084      	sub	sp, #16
 80178f4:	af02      	add	r7, sp, #8
 80178f6:	6078      	str	r0, [r7, #4]
 80178f8:	460b      	mov	r3, r1
 80178fa:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80178fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017900:	9301      	str	r3, [sp, #4]
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	9300      	str	r3, [sp, #0]
 8017906:	4b05      	ldr	r3, [pc, #20]	@ (801791c <RegionCommonTxConfigPrint+0x2c>)
 8017908:	2201      	movs	r2, #1
 801790a:	2100      	movs	r1, #0
 801790c:	2002      	movs	r0, #2
 801790e:	f004 fb9d 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
}
 8017912:	bf00      	nop
 8017914:	3708      	adds	r7, #8
 8017916:	46bd      	mov	sp, r7
 8017918:	bd80      	pop	{r7, pc}
 801791a:	bf00      	nop
 801791c:	0801f8d8 	.word	0x0801f8d8

08017920 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8017920:	b480      	push	{r7}
 8017922:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8017924:	4b0d      	ldr	r3, [pc, #52]	@ (801795c <rand1+0x3c>)
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	4a0d      	ldr	r2, [pc, #52]	@ (8017960 <rand1+0x40>)
 801792a:	fb02 f303 	mul.w	r3, r2, r3
 801792e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017932:	3339      	adds	r3, #57	@ 0x39
 8017934:	4a09      	ldr	r2, [pc, #36]	@ (801795c <rand1+0x3c>)
 8017936:	6013      	str	r3, [r2, #0]
 8017938:	4b08      	ldr	r3, [pc, #32]	@ (801795c <rand1+0x3c>)
 801793a:	681a      	ldr	r2, [r3, #0]
 801793c:	2303      	movs	r3, #3
 801793e:	fba3 1302 	umull	r1, r3, r3, r2
 8017942:	1ad1      	subs	r1, r2, r3
 8017944:	0849      	lsrs	r1, r1, #1
 8017946:	440b      	add	r3, r1
 8017948:	0f99      	lsrs	r1, r3, #30
 801794a:	460b      	mov	r3, r1
 801794c:	07db      	lsls	r3, r3, #31
 801794e:	1a5b      	subs	r3, r3, r1
 8017950:	1ad1      	subs	r1, r2, r3
 8017952:	460b      	mov	r3, r1
}
 8017954:	4618      	mov	r0, r3
 8017956:	46bd      	mov	sp, r7
 8017958:	bc80      	pop	{r7}
 801795a:	4770      	bx	lr
 801795c:	20000140 	.word	0x20000140
 8017960:	41c64e6d 	.word	0x41c64e6d

08017964 <srand1>:

void srand1( uint32_t seed )
{
 8017964:	b480      	push	{r7}
 8017966:	b083      	sub	sp, #12
 8017968:	af00      	add	r7, sp, #0
 801796a:	6078      	str	r0, [r7, #4]
    next = seed;
 801796c:	4a03      	ldr	r2, [pc, #12]	@ (801797c <srand1+0x18>)
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	6013      	str	r3, [r2, #0]
}
 8017972:	bf00      	nop
 8017974:	370c      	adds	r7, #12
 8017976:	46bd      	mov	sp, r7
 8017978:	bc80      	pop	{r7}
 801797a:	4770      	bx	lr
 801797c:	20000140 	.word	0x20000140

08017980 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8017980:	b580      	push	{r7, lr}
 8017982:	b082      	sub	sp, #8
 8017984:	af00      	add	r7, sp, #0
 8017986:	6078      	str	r0, [r7, #4]
 8017988:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801798a:	f7ff ffc9 	bl	8017920 <rand1>
 801798e:	4602      	mov	r2, r0
 8017990:	6839      	ldr	r1, [r7, #0]
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	1acb      	subs	r3, r1, r3
 8017996:	3301      	adds	r3, #1
 8017998:	fb92 f1f3 	sdiv	r1, r2, r3
 801799c:	fb01 f303 	mul.w	r3, r1, r3
 80179a0:	1ad2      	subs	r2, r2, r3
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	4413      	add	r3, r2
}
 80179a6:	4618      	mov	r0, r3
 80179a8:	3708      	adds	r7, #8
 80179aa:	46bd      	mov	sp, r7
 80179ac:	bd80      	pop	{r7, pc}

080179ae <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80179ae:	b480      	push	{r7}
 80179b0:	b085      	sub	sp, #20
 80179b2:	af00      	add	r7, sp, #0
 80179b4:	60f8      	str	r0, [r7, #12]
 80179b6:	60b9      	str	r1, [r7, #8]
 80179b8:	4613      	mov	r3, r2
 80179ba:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80179bc:	e007      	b.n	80179ce <memcpy1+0x20>
    {
        *dst++ = *src++;
 80179be:	68ba      	ldr	r2, [r7, #8]
 80179c0:	1c53      	adds	r3, r2, #1
 80179c2:	60bb      	str	r3, [r7, #8]
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	1c59      	adds	r1, r3, #1
 80179c8:	60f9      	str	r1, [r7, #12]
 80179ca:	7812      	ldrb	r2, [r2, #0]
 80179cc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80179ce:	88fb      	ldrh	r3, [r7, #6]
 80179d0:	1e5a      	subs	r2, r3, #1
 80179d2:	80fa      	strh	r2, [r7, #6]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d1f2      	bne.n	80179be <memcpy1+0x10>
    }
}
 80179d8:	bf00      	nop
 80179da:	bf00      	nop
 80179dc:	3714      	adds	r7, #20
 80179de:	46bd      	mov	sp, r7
 80179e0:	bc80      	pop	{r7}
 80179e2:	4770      	bx	lr

080179e4 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80179e4:	b480      	push	{r7}
 80179e6:	b085      	sub	sp, #20
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	60f8      	str	r0, [r7, #12]
 80179ec:	60b9      	str	r1, [r7, #8]
 80179ee:	4613      	mov	r3, r2
 80179f0:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80179f2:	88fb      	ldrh	r3, [r7, #6]
 80179f4:	3b01      	subs	r3, #1
 80179f6:	68fa      	ldr	r2, [r7, #12]
 80179f8:	4413      	add	r3, r2
 80179fa:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80179fc:	e007      	b.n	8017a0e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80179fe:	68ba      	ldr	r2, [r7, #8]
 8017a00:	1c53      	adds	r3, r2, #1
 8017a02:	60bb      	str	r3, [r7, #8]
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	1e59      	subs	r1, r3, #1
 8017a08:	60f9      	str	r1, [r7, #12]
 8017a0a:	7812      	ldrb	r2, [r2, #0]
 8017a0c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017a0e:	88fb      	ldrh	r3, [r7, #6]
 8017a10:	1e5a      	subs	r2, r3, #1
 8017a12:	80fa      	strh	r2, [r7, #6]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d1f2      	bne.n	80179fe <memcpyr+0x1a>
    }
}
 8017a18:	bf00      	nop
 8017a1a:	bf00      	nop
 8017a1c:	3714      	adds	r7, #20
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bc80      	pop	{r7}
 8017a22:	4770      	bx	lr

08017a24 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8017a24:	b480      	push	{r7}
 8017a26:	b083      	sub	sp, #12
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
 8017a2c:	460b      	mov	r3, r1
 8017a2e:	70fb      	strb	r3, [r7, #3]
 8017a30:	4613      	mov	r3, r2
 8017a32:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8017a34:	e004      	b.n	8017a40 <memset1+0x1c>
    {
        *dst++ = value;
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	1c5a      	adds	r2, r3, #1
 8017a3a:	607a      	str	r2, [r7, #4]
 8017a3c:	78fa      	ldrb	r2, [r7, #3]
 8017a3e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017a40:	883b      	ldrh	r3, [r7, #0]
 8017a42:	1e5a      	subs	r2, r3, #1
 8017a44:	803a      	strh	r2, [r7, #0]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d1f5      	bne.n	8017a36 <memset1+0x12>
    }
}
 8017a4a:	bf00      	nop
 8017a4c:	bf00      	nop
 8017a4e:	370c      	adds	r7, #12
 8017a50:	46bd      	mov	sp, r7
 8017a52:	bc80      	pop	{r7}
 8017a54:	4770      	bx	lr
	...

08017a58 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8017a58:	b480      	push	{r7}
 8017a5a:	b085      	sub	sp, #20
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	6078      	str	r0, [r7, #4]
 8017a60:	460b      	mov	r3, r1
 8017a62:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8017a64:	f04f 33ff 	mov.w	r3, #4294967295
 8017a68:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d101      	bne.n	8017a74 <Crc32+0x1c>
    {
        return 0;
 8017a70:	2300      	movs	r3, #0
 8017a72:	e026      	b.n	8017ac2 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8017a74:	2300      	movs	r3, #0
 8017a76:	817b      	strh	r3, [r7, #10]
 8017a78:	e01d      	b.n	8017ab6 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8017a7a:	897b      	ldrh	r3, [r7, #10]
 8017a7c:	687a      	ldr	r2, [r7, #4]
 8017a7e:	4413      	add	r3, r2
 8017a80:	781b      	ldrb	r3, [r3, #0]
 8017a82:	461a      	mov	r2, r3
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	4053      	eors	r3, r2
 8017a88:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	813b      	strh	r3, [r7, #8]
 8017a8e:	e00c      	b.n	8017aaa <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	085a      	lsrs	r2, r3, #1
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	f003 0301 	and.w	r3, r3, #1
 8017a9a:	425b      	negs	r3, r3
 8017a9c:	490b      	ldr	r1, [pc, #44]	@ (8017acc <Crc32+0x74>)
 8017a9e:	400b      	ands	r3, r1
 8017aa0:	4053      	eors	r3, r2
 8017aa2:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017aa4:	893b      	ldrh	r3, [r7, #8]
 8017aa6:	3301      	adds	r3, #1
 8017aa8:	813b      	strh	r3, [r7, #8]
 8017aaa:	893b      	ldrh	r3, [r7, #8]
 8017aac:	2b07      	cmp	r3, #7
 8017aae:	d9ef      	bls.n	8017a90 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8017ab0:	897b      	ldrh	r3, [r7, #10]
 8017ab2:	3301      	adds	r3, #1
 8017ab4:	817b      	strh	r3, [r7, #10]
 8017ab6:	897a      	ldrh	r2, [r7, #10]
 8017ab8:	887b      	ldrh	r3, [r7, #2]
 8017aba:	429a      	cmp	r2, r3
 8017abc:	d3dd      	bcc.n	8017a7a <Crc32+0x22>
        }
    }

    return ~crc;
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	43db      	mvns	r3, r3
}
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	3714      	adds	r7, #20
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	bc80      	pop	{r7}
 8017aca:	4770      	bx	lr
 8017acc:	edb88320 	.word	0xedb88320

08017ad0 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8017ad0:	b580      	push	{r7, lr}
 8017ad2:	b084      	sub	sp, #16
 8017ad4:	af02      	add	r7, sp, #8
 8017ad6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8017ad8:	4a24      	ldr	r2, [pc, #144]	@ (8017b6c <RadioInit+0x9c>)
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8017ade:	4b24      	ldr	r3, [pc, #144]	@ (8017b70 <RadioInit+0xa0>)
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8017ae4:	4b22      	ldr	r3, [pc, #136]	@ (8017b70 <RadioInit+0xa0>)
 8017ae6:	2200      	movs	r2, #0
 8017ae8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8017aea:	4b21      	ldr	r3, [pc, #132]	@ (8017b70 <RadioInit+0xa0>)
 8017aec:	2200      	movs	r2, #0
 8017aee:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017af0:	4b1f      	ldr	r3, [pc, #124]	@ (8017b70 <RadioInit+0xa0>)
 8017af2:	2200      	movs	r2, #0
 8017af4:	659a      	str	r2, [r3, #88]	@ 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8017af6:	481f      	ldr	r0, [pc, #124]	@ (8017b74 <RadioInit+0xa4>)
 8017af8:	f001 ff88 	bl	8019a0c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8017afc:	4b1c      	ldr	r3, [pc, #112]	@ (8017b70 <RadioInit+0xa0>)
 8017afe:	2200      	movs	r2, #0
 8017b00:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8017b02:	4b1b      	ldr	r3, [pc, #108]	@ (8017b70 <RadioInit+0xa0>)
 8017b04:	2200      	movs	r2, #0
 8017b06:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8017b08:	f002 fa16 	bl	8019f38 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8017b0c:	2100      	movs	r1, #0
 8017b0e:	2000      	movs	r0, #0
 8017b10:	f002 fdde 	bl	801a6d0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8017b14:	2204      	movs	r2, #4
 8017b16:	2100      	movs	r1, #0
 8017b18:	2001      	movs	r0, #1
 8017b1a:	f002 fb9b 	bl	801a254 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017b1e:	2300      	movs	r3, #0
 8017b20:	2200      	movs	r2, #0
 8017b22:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017b26:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017b2a:	f002 facb 	bl	801a0c4 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8017b2e:	f000 fe83 	bl	8018838 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8017b32:	2300      	movs	r3, #0
 8017b34:	9300      	str	r3, [sp, #0]
 8017b36:	4b10      	ldr	r3, [pc, #64]	@ (8017b78 <RadioInit+0xa8>)
 8017b38:	2200      	movs	r2, #0
 8017b3a:	f04f 31ff 	mov.w	r1, #4294967295
 8017b3e:	480f      	ldr	r0, [pc, #60]	@ (8017b7c <RadioInit+0xac>)
 8017b40:	f003 ffd6 	bl	801baf0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8017b44:	2300      	movs	r3, #0
 8017b46:	9300      	str	r3, [sp, #0]
 8017b48:	4b0d      	ldr	r3, [pc, #52]	@ (8017b80 <RadioInit+0xb0>)
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8017b50:	480c      	ldr	r0, [pc, #48]	@ (8017b84 <RadioInit+0xb4>)
 8017b52:	f003 ffcd 	bl	801baf0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8017b56:	4809      	ldr	r0, [pc, #36]	@ (8017b7c <RadioInit+0xac>)
 8017b58:	f004 f86e 	bl	801bc38 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8017b5c:	4809      	ldr	r0, [pc, #36]	@ (8017b84 <RadioInit+0xb4>)
 8017b5e:	f004 f86b 	bl	801bc38 <UTIL_TIMER_Stop>
}
 8017b62:	bf00      	nop
 8017b64:	3708      	adds	r7, #8
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}
 8017b6a:	bf00      	nop
 8017b6c:	20001d38 	.word	0x20001d38
 8017b70:	20001d3c 	.word	0x20001d3c
 8017b74:	08018c21 	.word	0x08018c21
 8017b78:	08018ba9 	.word	0x08018ba9
 8017b7c:	20001d98 	.word	0x20001d98
 8017b80:	08018bbd 	.word	0x08018bbd
 8017b84:	20001db0 	.word	0x20001db0

08017b88 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8017b8c:	f001 ff80 	bl	8019a90 <SUBGRF_GetOperatingMode>
 8017b90:	4603      	mov	r3, r0
 8017b92:	2b07      	cmp	r3, #7
 8017b94:	d00a      	beq.n	8017bac <RadioGetStatus+0x24>
 8017b96:	2b07      	cmp	r3, #7
 8017b98:	dc0a      	bgt.n	8017bb0 <RadioGetStatus+0x28>
 8017b9a:	2b04      	cmp	r3, #4
 8017b9c:	d002      	beq.n	8017ba4 <RadioGetStatus+0x1c>
 8017b9e:	2b05      	cmp	r3, #5
 8017ba0:	d002      	beq.n	8017ba8 <RadioGetStatus+0x20>
 8017ba2:	e005      	b.n	8017bb0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8017ba4:	2302      	movs	r3, #2
 8017ba6:	e004      	b.n	8017bb2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8017ba8:	2301      	movs	r3, #1
 8017baa:	e002      	b.n	8017bb2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8017bac:	2303      	movs	r3, #3
 8017bae:	e000      	b.n	8017bb2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8017bb0:	2300      	movs	r3, #0
    }
}
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	bd80      	pop	{r7, pc}
	...

08017bb8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b082      	sub	sp, #8
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8017bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8017c6c <RadioSetModem+0xb4>)
 8017bc4:	79fb      	ldrb	r3, [r7, #7]
 8017bc6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8017bc8:	79fb      	ldrb	r3, [r7, #7]
 8017bca:	4618      	mov	r0, r3
 8017bcc:	f003 f943 	bl	801ae56 <RFW_SetRadioModem>
    switch( modem )
 8017bd0:	79fb      	ldrb	r3, [r7, #7]
 8017bd2:	2b05      	cmp	r3, #5
 8017bd4:	d80e      	bhi.n	8017bf4 <RadioSetModem+0x3c>
 8017bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8017bdc <RadioSetModem+0x24>)
 8017bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017bdc:	08017c03 	.word	0x08017c03
 8017be0:	08017c11 	.word	0x08017c11
 8017be4:	08017bf5 	.word	0x08017bf5
 8017be8:	08017c37 	.word	0x08017c37
 8017bec:	08017c45 	.word	0x08017c45
 8017bf0:	08017c53 	.word	0x08017c53
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8017bf4:	2003      	movs	r0, #3
 8017bf6:	f002 fb07 	bl	801a208 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8017c6c <RadioSetModem+0xb4>)
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	735a      	strb	r2, [r3, #13]
        break;
 8017c00:	e02f      	b.n	8017c62 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017c02:	2000      	movs	r0, #0
 8017c04:	f002 fb00 	bl	801a208 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017c08:	4b18      	ldr	r3, [pc, #96]	@ (8017c6c <RadioSetModem+0xb4>)
 8017c0a:	2200      	movs	r2, #0
 8017c0c:	735a      	strb	r2, [r3, #13]
        break;
 8017c0e:	e028      	b.n	8017c62 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8017c10:	2001      	movs	r0, #1
 8017c12:	f002 faf9 	bl	801a208 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8017c16:	4b15      	ldr	r3, [pc, #84]	@ (8017c6c <RadioSetModem+0xb4>)
 8017c18:	7b5a      	ldrb	r2, [r3, #13]
 8017c1a:	4b14      	ldr	r3, [pc, #80]	@ (8017c6c <RadioSetModem+0xb4>)
 8017c1c:	7b1b      	ldrb	r3, [r3, #12]
 8017c1e:	429a      	cmp	r2, r3
 8017c20:	d01e      	beq.n	8017c60 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8017c22:	4b12      	ldr	r3, [pc, #72]	@ (8017c6c <RadioSetModem+0xb4>)
 8017c24:	7b1a      	ldrb	r2, [r3, #12]
 8017c26:	4b11      	ldr	r3, [pc, #68]	@ (8017c6c <RadioSetModem+0xb4>)
 8017c28:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8017c2a:	4b10      	ldr	r3, [pc, #64]	@ (8017c6c <RadioSetModem+0xb4>)
 8017c2c:	7b5b      	ldrb	r3, [r3, #13]
 8017c2e:	4618      	mov	r0, r3
 8017c30:	f000 ff84 	bl	8018b3c <RadioSetPublicNetwork>
        }
        break;
 8017c34:	e014      	b.n	8017c60 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017c36:	2002      	movs	r0, #2
 8017c38:	f002 fae6 	bl	801a208 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8017c6c <RadioSetModem+0xb4>)
 8017c3e:	2200      	movs	r2, #0
 8017c40:	735a      	strb	r2, [r3, #13]
        break;
 8017c42:	e00e      	b.n	8017c62 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017c44:	2002      	movs	r0, #2
 8017c46:	f002 fadf 	bl	801a208 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017c4a:	4b08      	ldr	r3, [pc, #32]	@ (8017c6c <RadioSetModem+0xb4>)
 8017c4c:	2200      	movs	r2, #0
 8017c4e:	735a      	strb	r2, [r3, #13]
        break;
 8017c50:	e007      	b.n	8017c62 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017c52:	2000      	movs	r0, #0
 8017c54:	f002 fad8 	bl	801a208 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017c58:	4b04      	ldr	r3, [pc, #16]	@ (8017c6c <RadioSetModem+0xb4>)
 8017c5a:	2200      	movs	r2, #0
 8017c5c:	735a      	strb	r2, [r3, #13]
        break;
 8017c5e:	e000      	b.n	8017c62 <RadioSetModem+0xaa>
        break;
 8017c60:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8017c62:	bf00      	nop
 8017c64:	3708      	adds	r7, #8
 8017c66:	46bd      	mov	sp, r7
 8017c68:	bd80      	pop	{r7, pc}
 8017c6a:	bf00      	nop
 8017c6c:	20001d3c 	.word	0x20001d3c

08017c70 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b082      	sub	sp, #8
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8017c78:	6878      	ldr	r0, [r7, #4]
 8017c7a:	f002 fa7f 	bl	801a17c <SUBGRF_SetRfFrequency>
}
 8017c7e:	bf00      	nop
 8017c80:	3708      	adds	r7, #8
 8017c82:	46bd      	mov	sp, r7
 8017c84:	bd80      	pop	{r7, pc}

08017c86 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8017c86:	b580      	push	{r7, lr}
 8017c88:	b090      	sub	sp, #64	@ 0x40
 8017c8a:	af0a      	add	r7, sp, #40	@ 0x28
 8017c8c:	60f8      	str	r0, [r7, #12]
 8017c8e:	60b9      	str	r1, [r7, #8]
 8017c90:	603b      	str	r3, [r7, #0]
 8017c92:	4613      	mov	r3, r2
 8017c94:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8017c96:	2301      	movs	r3, #1
 8017c98:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8017ca2:	f000 fddc 	bl	801885e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8017ca6:	2000      	movs	r0, #0
 8017ca8:	f7ff ff86 	bl	8017bb8 <RadioSetModem>

    RadioSetChannel( freq );
 8017cac:	68f8      	ldr	r0, [r7, #12]
 8017cae:	f7ff ffdf 	bl	8017c70 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8017cb2:	2301      	movs	r3, #1
 8017cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	9308      	str	r3, [sp, #32]
 8017cba:	2300      	movs	r3, #0
 8017cbc:	9307      	str	r3, [sp, #28]
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	9306      	str	r3, [sp, #24]
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	9305      	str	r3, [sp, #20]
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	9304      	str	r3, [sp, #16]
 8017cca:	2300      	movs	r3, #0
 8017ccc:	9303      	str	r3, [sp, #12]
 8017cce:	2300      	movs	r3, #0
 8017cd0:	9302      	str	r3, [sp, #8]
 8017cd2:	2303      	movs	r3, #3
 8017cd4:	9301      	str	r3, [sp, #4]
 8017cd6:	68bb      	ldr	r3, [r7, #8]
 8017cd8:	9300      	str	r3, [sp, #0]
 8017cda:	2300      	movs	r3, #0
 8017cdc:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8017ce0:	68b9      	ldr	r1, [r7, #8]
 8017ce2:	2000      	movs	r0, #0
 8017ce4:	f000 f83c 	bl	8017d60 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8017ce8:	2000      	movs	r0, #0
 8017cea:	f000 fdbf 	bl	801886c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8017cee:	f000 ff53 	bl	8018b98 <RadioGetWakeupTime>
 8017cf2:	4603      	mov	r3, r0
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	f7ea fbe9 	bl	80024cc <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8017cfa:	f004 f8b7 	bl	801be6c <UTIL_TIMER_GetCurrentTime>
 8017cfe:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017d00:	e00d      	b.n	8017d1e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8017d02:	2000      	movs	r0, #0
 8017d04:	f000 fe9a 	bl	8018a3c <RadioRssi>
 8017d08:	4603      	mov	r3, r0
 8017d0a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8017d0c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017d14:	429a      	cmp	r2, r3
 8017d16:	dd02      	ble.n	8017d1e <RadioIsChannelFree+0x98>
        {
            status = false;
 8017d18:	2300      	movs	r3, #0
 8017d1a:	75fb      	strb	r3, [r7, #23]
            break;
 8017d1c:	e006      	b.n	8017d2c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017d1e:	6938      	ldr	r0, [r7, #16]
 8017d20:	f004 f8b6 	bl	801be90 <UTIL_TIMER_GetElapsedTime>
 8017d24:	4602      	mov	r2, r0
 8017d26:	683b      	ldr	r3, [r7, #0]
 8017d28:	4293      	cmp	r3, r2
 8017d2a:	d8ea      	bhi.n	8017d02 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8017d2c:	f000 fd97 	bl	801885e <RadioStandby>

    return status;
 8017d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8017d32:	4618      	mov	r0, r3
 8017d34:	3718      	adds	r7, #24
 8017d36:	46bd      	mov	sp, r7
 8017d38:	bd80      	pop	{r7, pc}

08017d3a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8017d3a:	b580      	push	{r7, lr}
 8017d3c:	b082      	sub	sp, #8
 8017d3e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8017d40:	2300      	movs	r3, #0
 8017d42:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017d44:	2300      	movs	r3, #0
 8017d46:	2200      	movs	r2, #0
 8017d48:	2100      	movs	r1, #0
 8017d4a:	2000      	movs	r0, #0
 8017d4c:	f002 f9ba 	bl	801a0c4 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8017d50:	f001 ff6f 	bl	8019c32 <SUBGRF_GetRandom>
 8017d54:	6078      	str	r0, [r7, #4]

    return rnd;
 8017d56:	687b      	ldr	r3, [r7, #4]
}
 8017d58:	4618      	mov	r0, r3
 8017d5a:	3708      	adds	r7, #8
 8017d5c:	46bd      	mov	sp, r7
 8017d5e:	bd80      	pop	{r7, pc}

08017d60 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b08a      	sub	sp, #40	@ 0x28
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	60b9      	str	r1, [r7, #8]
 8017d68:	607a      	str	r2, [r7, #4]
 8017d6a:	461a      	mov	r2, r3
 8017d6c:	4603      	mov	r3, r0
 8017d6e:	73fb      	strb	r3, [r7, #15]
 8017d70:	4613      	mov	r3, r2
 8017d72:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8017d74:	4ab9      	ldr	r2, [pc, #740]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017d76:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017d7a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8017d7c:	f003 f829 	bl	801add2 <RFW_DeInit>
    if( rxContinuous == true )
 8017d80:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d001      	beq.n	8017d8c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8017d88:	2300      	movs	r3, #0
 8017d8a:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8017d8c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d004      	beq.n	8017d9e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8017d94:	4ab2      	ldr	r2, [pc, #712]	@ (8018060 <RadioSetRxConfig+0x300>)
 8017d96:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8017d9a:	7013      	strb	r3, [r2, #0]
 8017d9c:	e002      	b.n	8017da4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8017d9e:	4bb0      	ldr	r3, [pc, #704]	@ (8018060 <RadioSetRxConfig+0x300>)
 8017da0:	22ff      	movs	r2, #255	@ 0xff
 8017da2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8017da4:	7bfb      	ldrb	r3, [r7, #15]
 8017da6:	2b05      	cmp	r3, #5
 8017da8:	d009      	beq.n	8017dbe <RadioSetRxConfig+0x5e>
 8017daa:	2b05      	cmp	r3, #5
 8017dac:	f300 81ca 	bgt.w	8018144 <RadioSetRxConfig+0x3e4>
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	f000 80bf 	beq.w	8017f34 <RadioSetRxConfig+0x1d4>
 8017db6:	2b01      	cmp	r3, #1
 8017db8:	f000 8124 	beq.w	8018004 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8017dbc:	e1c2      	b.n	8018144 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8017dbe:	2001      	movs	r0, #1
 8017dc0:	f002 f87c 	bl	8019ebc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017dc4:	4ba5      	ldr	r3, [pc, #660]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017dcc:	4aa3      	ldr	r2, [pc, #652]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8017dd2:	4ba2      	ldr	r3, [pc, #648]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017dd4:	2209      	movs	r2, #9
 8017dd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8017dda:	4ba0      	ldr	r3, [pc, #640]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017ddc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8017de0:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017de2:	68b8      	ldr	r0, [r7, #8]
 8017de4:	f002 ff28 	bl	801ac38 <SUBGRF_GetFskBandwidthRegValue>
 8017de8:	4603      	mov	r3, r0
 8017dea:	461a      	mov	r2, r3
 8017dec:	4b9b      	ldr	r3, [pc, #620]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017dee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017df2:	4b9a      	ldr	r3, [pc, #616]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017df4:	2200      	movs	r2, #0
 8017df6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017df8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017dfa:	00db      	lsls	r3, r3, #3
 8017dfc:	b29a      	uxth	r2, r3
 8017dfe:	4b97      	ldr	r3, [pc, #604]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017e00:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8017e02:	4b96      	ldr	r3, [pc, #600]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017e04:	2200      	movs	r2, #0
 8017e06:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8017e08:	4b94      	ldr	r3, [pc, #592]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017e0a:	2210      	movs	r2, #16
 8017e0c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017e0e:	4b93      	ldr	r3, [pc, #588]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017e10:	2200      	movs	r2, #0
 8017e12:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8017e14:	4b91      	ldr	r3, [pc, #580]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017e16:	2200      	movs	r2, #0
 8017e18:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017e1a:	4b91      	ldr	r3, [pc, #580]	@ (8018060 <RadioSetRxConfig+0x300>)
 8017e1c:	781a      	ldrb	r2, [r3, #0]
 8017e1e:	4b8f      	ldr	r3, [pc, #572]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017e20:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017e22:	4b8e      	ldr	r3, [pc, #568]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017e24:	2201      	movs	r2, #1
 8017e26:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8017e28:	4b8c      	ldr	r3, [pc, #560]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017e2a:	2200      	movs	r2, #0
 8017e2c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8017e2e:	2005      	movs	r0, #5
 8017e30:	f7ff fec2 	bl	8017bb8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017e34:	488b      	ldr	r0, [pc, #556]	@ (8018064 <RadioSetRxConfig+0x304>)
 8017e36:	f002 fadb 	bl	801a3f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e3a:	488b      	ldr	r0, [pc, #556]	@ (8018068 <RadioSetRxConfig+0x308>)
 8017e3c:	f002 fbaa 	bl	801a594 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017e40:	4a8a      	ldr	r2, [pc, #552]	@ (801806c <RadioSetRxConfig+0x30c>)
 8017e42:	f107 031c 	add.w	r3, r7, #28
 8017e46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017e4a:	e883 0003 	stmia.w	r3, {r0, r1}
 8017e4e:	f107 031c 	add.w	r3, r7, #28
 8017e52:	4618      	mov	r0, r3
 8017e54:	f001 fe6b 	bl	8019b2e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017e58:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017e5c:	f001 feb6 	bl	8019bcc <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8017e60:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8017e64:	f000 fe08 	bl	8018a78 <RadioRead>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8017e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017e72:	f023 0310 	bic.w	r3, r3, #16
 8017e76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8017e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017e7e:	4619      	mov	r1, r3
 8017e80:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8017e84:	f000 fde6 	bl	8018a54 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8017e88:	2104      	movs	r1, #4
 8017e8a:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8017e8e:	f000 fde1 	bl	8018a54 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8017e92:	f640 009b 	movw	r0, #2203	@ 0x89b
 8017e96:	f000 fdef 	bl	8018a78 <RadioRead>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ea4:	f023 031c 	bic.w	r3, r3, #28
 8017ea8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8017eac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017eb0:	f043 0308 	orr.w	r3, r3, #8
 8017eb4:	b2db      	uxtb	r3, r3
 8017eb6:	4619      	mov	r1, r3
 8017eb8:	f640 009b 	movw	r0, #2203	@ 0x89b
 8017ebc:	f000 fdca 	bl	8018a54 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8017ec0:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8017ec4:	f000 fdd8 	bl	8018a78 <RadioRead>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017ece:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ed2:	f023 0318 	bic.w	r3, r3, #24
 8017ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8017eda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ede:	f043 0318 	orr.w	r3, r3, #24
 8017ee2:	b2db      	uxtb	r3, r3
 8017ee4:	4619      	mov	r1, r3
 8017ee6:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8017eea:	f000 fdb3 	bl	8018a54 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8017eee:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8017ef2:	f000 fdc1 	bl	8018a78 <RadioRead>
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8017efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017f04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8017f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017f0c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8017f10:	b2db      	uxtb	r3, r3
 8017f12:	4619      	mov	r1, r3
 8017f14:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8017f18:	f000 fd9c 	bl	8018a54 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017f1c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017f1e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017f22:	fb02 f303 	mul.w	r3, r2, r3
 8017f26:	461a      	mov	r2, r3
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8017f2e:	4a4b      	ldr	r2, [pc, #300]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017f30:	6093      	str	r3, [r2, #8]
            break;
 8017f32:	e108      	b.n	8018146 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017f34:	2000      	movs	r0, #0
 8017f36:	f001 ffc1 	bl	8019ebc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017f3a:	4b48      	ldr	r3, [pc, #288]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017f3c:	2200      	movs	r2, #0
 8017f3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017f42:	4a46      	ldr	r2, [pc, #280]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017f48:	4b44      	ldr	r3, [pc, #272]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017f4a:	220b      	movs	r2, #11
 8017f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017f50:	68b8      	ldr	r0, [r7, #8]
 8017f52:	f002 fe71 	bl	801ac38 <SUBGRF_GetFskBandwidthRegValue>
 8017f56:	4603      	mov	r3, r0
 8017f58:	461a      	mov	r2, r3
 8017f5a:	4b40      	ldr	r3, [pc, #256]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017f60:	4b3e      	ldr	r3, [pc, #248]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017f62:	2200      	movs	r2, #0
 8017f64:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017f66:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017f68:	00db      	lsls	r3, r3, #3
 8017f6a:	b29a      	uxth	r2, r3
 8017f6c:	4b3b      	ldr	r3, [pc, #236]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017f6e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017f70:	4b3a      	ldr	r3, [pc, #232]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017f72:	2204      	movs	r2, #4
 8017f74:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017f76:	4b39      	ldr	r3, [pc, #228]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017f78:	2218      	movs	r2, #24
 8017f7a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017f7c:	4b37      	ldr	r3, [pc, #220]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017f7e:	2200      	movs	r2, #0
 8017f80:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017f82:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017f86:	f083 0301 	eor.w	r3, r3, #1
 8017f8a:	b2db      	uxtb	r3, r3
 8017f8c:	461a      	mov	r2, r3
 8017f8e:	4b33      	ldr	r3, [pc, #204]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017f90:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017f92:	4b33      	ldr	r3, [pc, #204]	@ (8018060 <RadioSetRxConfig+0x300>)
 8017f94:	781a      	ldrb	r2, [r3, #0]
 8017f96:	4b31      	ldr	r3, [pc, #196]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017f98:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8017f9a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d003      	beq.n	8017faa <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017fa2:	4b2e      	ldr	r3, [pc, #184]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017fa4:	22f2      	movs	r2, #242	@ 0xf2
 8017fa6:	75da      	strb	r2, [r3, #23]
 8017fa8:	e002      	b.n	8017fb0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017faa:	4b2c      	ldr	r3, [pc, #176]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017fac:	2201      	movs	r2, #1
 8017fae:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017fb0:	4b2a      	ldr	r3, [pc, #168]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8017fb2:	2201      	movs	r2, #1
 8017fb4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017fb6:	f000 fc52 	bl	801885e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8017fba:	2000      	movs	r0, #0
 8017fbc:	f7ff fdfc 	bl	8017bb8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017fc0:	4828      	ldr	r0, [pc, #160]	@ (8018064 <RadioSetRxConfig+0x304>)
 8017fc2:	f002 fa15 	bl	801a3f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017fc6:	4828      	ldr	r0, [pc, #160]	@ (8018068 <RadioSetRxConfig+0x308>)
 8017fc8:	f002 fae4 	bl	801a594 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017fcc:	4a28      	ldr	r2, [pc, #160]	@ (8018070 <RadioSetRxConfig+0x310>)
 8017fce:	f107 0314 	add.w	r3, r7, #20
 8017fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017fd6:	e883 0003 	stmia.w	r3, {r0, r1}
 8017fda:	f107 0314 	add.w	r3, r7, #20
 8017fde:	4618      	mov	r0, r3
 8017fe0:	f001 fda5 	bl	8019b2e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017fe4:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017fe8:	f001 fdf0 	bl	8019bcc <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017fec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017fee:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017ff2:	fb02 f303 	mul.w	r3, r2, r3
 8017ff6:	461a      	mov	r2, r3
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8017ffe:	4a17      	ldr	r2, [pc, #92]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8018000:	6093      	str	r3, [r2, #8]
            break;
 8018002:	e0a0      	b.n	8018146 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018004:	2000      	movs	r0, #0
 8018006:	f001 ff59 	bl	8019ebc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801800a:	4b14      	ldr	r3, [pc, #80]	@ (801805c <RadioSetRxConfig+0x2fc>)
 801800c:	2201      	movs	r2, #1
 801800e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	b2da      	uxtb	r2, r3
 8018016:	4b11      	ldr	r3, [pc, #68]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8018018:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801801c:	4a15      	ldr	r2, [pc, #84]	@ (8018074 <RadioSetRxConfig+0x314>)
 801801e:	68bb      	ldr	r3, [r7, #8]
 8018020:	4413      	add	r3, r2
 8018022:	781a      	ldrb	r2, [r3, #0]
 8018024:	4b0d      	ldr	r3, [pc, #52]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8018026:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801802a:	4a0c      	ldr	r2, [pc, #48]	@ (801805c <RadioSetRxConfig+0x2fc>)
 801802c:	7bbb      	ldrb	r3, [r7, #14]
 801802e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018032:	68bb      	ldr	r3, [r7, #8]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d105      	bne.n	8018044 <RadioSetRxConfig+0x2e4>
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	2b0b      	cmp	r3, #11
 801803c:	d008      	beq.n	8018050 <RadioSetRxConfig+0x2f0>
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	2b0c      	cmp	r3, #12
 8018042:	d005      	beq.n	8018050 <RadioSetRxConfig+0x2f0>
 8018044:	68bb      	ldr	r3, [r7, #8]
 8018046:	2b01      	cmp	r3, #1
 8018048:	d116      	bne.n	8018078 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	2b0c      	cmp	r3, #12
 801804e:	d113      	bne.n	8018078 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018050:	4b02      	ldr	r3, [pc, #8]	@ (801805c <RadioSetRxConfig+0x2fc>)
 8018052:	2201      	movs	r2, #1
 8018054:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8018058:	e012      	b.n	8018080 <RadioSetRxConfig+0x320>
 801805a:	bf00      	nop
 801805c:	20001d3c 	.word	0x20001d3c
 8018060:	20000144 	.word	0x20000144
 8018064:	20001d74 	.word	0x20001d74
 8018068:	20001d4a 	.word	0x20001d4a
 801806c:	0801f8f4 	.word	0x0801f8f4
 8018070:	0801f8fc 	.word	0x0801f8fc
 8018074:	0801ff60 	.word	0x0801ff60
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018078:	4b35      	ldr	r3, [pc, #212]	@ (8018150 <RadioSetRxConfig+0x3f0>)
 801807a:	2200      	movs	r2, #0
 801807c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018080:	4b33      	ldr	r3, [pc, #204]	@ (8018150 <RadioSetRxConfig+0x3f0>)
 8018082:	2201      	movs	r2, #1
 8018084:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018086:	4b32      	ldr	r3, [pc, #200]	@ (8018150 <RadioSetRxConfig+0x3f0>)
 8018088:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801808c:	2b05      	cmp	r3, #5
 801808e:	d004      	beq.n	801809a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018090:	4b2f      	ldr	r3, [pc, #188]	@ (8018150 <RadioSetRxConfig+0x3f0>)
 8018092:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018096:	2b06      	cmp	r3, #6
 8018098:	d10a      	bne.n	80180b0 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801809a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801809c:	2b0b      	cmp	r3, #11
 801809e:	d803      	bhi.n	80180a8 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80180a0:	4b2b      	ldr	r3, [pc, #172]	@ (8018150 <RadioSetRxConfig+0x3f0>)
 80180a2:	220c      	movs	r2, #12
 80180a4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80180a6:	e006      	b.n	80180b6 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80180a8:	4a29      	ldr	r2, [pc, #164]	@ (8018150 <RadioSetRxConfig+0x3f0>)
 80180aa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80180ac:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80180ae:	e002      	b.n	80180b6 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80180b0:	4a27      	ldr	r2, [pc, #156]	@ (8018150 <RadioSetRxConfig+0x3f0>)
 80180b2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80180b4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80180b6:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80180ba:	4b25      	ldr	r3, [pc, #148]	@ (8018150 <RadioSetRxConfig+0x3f0>)
 80180bc:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80180be:	4b25      	ldr	r3, [pc, #148]	@ (8018154 <RadioSetRxConfig+0x3f4>)
 80180c0:	781a      	ldrb	r2, [r3, #0]
 80180c2:	4b23      	ldr	r3, [pc, #140]	@ (8018150 <RadioSetRxConfig+0x3f0>)
 80180c4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80180c6:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80180ca:	4b21      	ldr	r3, [pc, #132]	@ (8018150 <RadioSetRxConfig+0x3f0>)
 80180cc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80180d0:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80180d4:	4b1e      	ldr	r3, [pc, #120]	@ (8018150 <RadioSetRxConfig+0x3f0>)
 80180d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80180da:	f000 fbc0 	bl	801885e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80180de:	2001      	movs	r0, #1
 80180e0:	f7ff fd6a 	bl	8017bb8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80180e4:	481c      	ldr	r0, [pc, #112]	@ (8018158 <RadioSetRxConfig+0x3f8>)
 80180e6:	f002 f983 	bl	801a3f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80180ea:	481c      	ldr	r0, [pc, #112]	@ (801815c <RadioSetRxConfig+0x3fc>)
 80180ec:	f002 fa52 	bl	801a594 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80180f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80180f2:	b2db      	uxtb	r3, r3
 80180f4:	4618      	mov	r0, r3
 80180f6:	f001 fef0 	bl	8019eda <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80180fa:	4b15      	ldr	r3, [pc, #84]	@ (8018150 <RadioSetRxConfig+0x3f0>)
 80180fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8018100:	2b01      	cmp	r3, #1
 8018102:	d10d      	bne.n	8018120 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018104:	f240 7036 	movw	r0, #1846	@ 0x736
 8018108:	f002 fba0 	bl	801a84c <SUBGRF_ReadRegister>
 801810c:	4603      	mov	r3, r0
 801810e:	f023 0304 	bic.w	r3, r3, #4
 8018112:	b2db      	uxtb	r3, r3
 8018114:	4619      	mov	r1, r3
 8018116:	f240 7036 	movw	r0, #1846	@ 0x736
 801811a:	f002 fb83 	bl	801a824 <SUBGRF_WriteRegister>
 801811e:	e00c      	b.n	801813a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018120:	f240 7036 	movw	r0, #1846	@ 0x736
 8018124:	f002 fb92 	bl	801a84c <SUBGRF_ReadRegister>
 8018128:	4603      	mov	r3, r0
 801812a:	f043 0304 	orr.w	r3, r3, #4
 801812e:	b2db      	uxtb	r3, r3
 8018130:	4619      	mov	r1, r3
 8018132:	f240 7036 	movw	r0, #1846	@ 0x736
 8018136:	f002 fb75 	bl	801a824 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801813a:	4b05      	ldr	r3, [pc, #20]	@ (8018150 <RadioSetRxConfig+0x3f0>)
 801813c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018140:	609a      	str	r2, [r3, #8]
            break;
 8018142:	e000      	b.n	8018146 <RadioSetRxConfig+0x3e6>
            break;
 8018144:	bf00      	nop
    }
}
 8018146:	bf00      	nop
 8018148:	3728      	adds	r7, #40	@ 0x28
 801814a:	46bd      	mov	sp, r7
 801814c:	bd80      	pop	{r7, pc}
 801814e:	bf00      	nop
 8018150:	20001d3c 	.word	0x20001d3c
 8018154:	20000144 	.word	0x20000144
 8018158:	20001d74 	.word	0x20001d74
 801815c:	20001d4a 	.word	0x20001d4a

08018160 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b086      	sub	sp, #24
 8018164:	af00      	add	r7, sp, #0
 8018166:	60ba      	str	r2, [r7, #8]
 8018168:	607b      	str	r3, [r7, #4]
 801816a:	4603      	mov	r3, r0
 801816c:	73fb      	strb	r3, [r7, #15]
 801816e:	460b      	mov	r3, r1
 8018170:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8018172:	f002 fe2e 	bl	801add2 <RFW_DeInit>
    switch( modem )
 8018176:	7bfb      	ldrb	r3, [r7, #15]
 8018178:	2b04      	cmp	r3, #4
 801817a:	f000 80c7 	beq.w	801830c <RadioSetTxConfig+0x1ac>
 801817e:	2b04      	cmp	r3, #4
 8018180:	f300 80d6 	bgt.w	8018330 <RadioSetTxConfig+0x1d0>
 8018184:	2b00      	cmp	r3, #0
 8018186:	d002      	beq.n	801818e <RadioSetTxConfig+0x2e>
 8018188:	2b01      	cmp	r3, #1
 801818a:	d059      	beq.n	8018240 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801818c:	e0d0      	b.n	8018330 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801818e:	4b74      	ldr	r3, [pc, #464]	@ (8018360 <RadioSetTxConfig+0x200>)
 8018190:	2200      	movs	r2, #0
 8018192:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018196:	4a72      	ldr	r2, [pc, #456]	@ (8018360 <RadioSetTxConfig+0x200>)
 8018198:	6a3b      	ldr	r3, [r7, #32]
 801819a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801819c:	4b70      	ldr	r3, [pc, #448]	@ (8018360 <RadioSetTxConfig+0x200>)
 801819e:	220b      	movs	r2, #11
 80181a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80181a4:	6878      	ldr	r0, [r7, #4]
 80181a6:	f002 fd47 	bl	801ac38 <SUBGRF_GetFskBandwidthRegValue>
 80181aa:	4603      	mov	r3, r0
 80181ac:	461a      	mov	r2, r3
 80181ae:	4b6c      	ldr	r3, [pc, #432]	@ (8018360 <RadioSetTxConfig+0x200>)
 80181b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80181b4:	4a6a      	ldr	r2, [pc, #424]	@ (8018360 <RadioSetTxConfig+0x200>)
 80181b6:	68bb      	ldr	r3, [r7, #8]
 80181b8:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80181ba:	4b69      	ldr	r3, [pc, #420]	@ (8018360 <RadioSetTxConfig+0x200>)
 80181bc:	2200      	movs	r2, #0
 80181be:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80181c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80181c2:	00db      	lsls	r3, r3, #3
 80181c4:	b29a      	uxth	r2, r3
 80181c6:	4b66      	ldr	r3, [pc, #408]	@ (8018360 <RadioSetTxConfig+0x200>)
 80181c8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80181ca:	4b65      	ldr	r3, [pc, #404]	@ (8018360 <RadioSetTxConfig+0x200>)
 80181cc:	2204      	movs	r2, #4
 80181ce:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80181d0:	4b63      	ldr	r3, [pc, #396]	@ (8018360 <RadioSetTxConfig+0x200>)
 80181d2:	2218      	movs	r2, #24
 80181d4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80181d6:	4b62      	ldr	r3, [pc, #392]	@ (8018360 <RadioSetTxConfig+0x200>)
 80181d8:	2200      	movs	r2, #0
 80181da:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80181dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80181e0:	f083 0301 	eor.w	r3, r3, #1
 80181e4:	b2db      	uxtb	r3, r3
 80181e6:	461a      	mov	r2, r3
 80181e8:	4b5d      	ldr	r3, [pc, #372]	@ (8018360 <RadioSetTxConfig+0x200>)
 80181ea:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80181ec:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d003      	beq.n	80181fc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80181f4:	4b5a      	ldr	r3, [pc, #360]	@ (8018360 <RadioSetTxConfig+0x200>)
 80181f6:	22f2      	movs	r2, #242	@ 0xf2
 80181f8:	75da      	strb	r2, [r3, #23]
 80181fa:	e002      	b.n	8018202 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80181fc:	4b58      	ldr	r3, [pc, #352]	@ (8018360 <RadioSetTxConfig+0x200>)
 80181fe:	2201      	movs	r2, #1
 8018200:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018202:	4b57      	ldr	r3, [pc, #348]	@ (8018360 <RadioSetTxConfig+0x200>)
 8018204:	2201      	movs	r2, #1
 8018206:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018208:	f000 fb29 	bl	801885e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801820c:	2000      	movs	r0, #0
 801820e:	f7ff fcd3 	bl	8017bb8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018212:	4854      	ldr	r0, [pc, #336]	@ (8018364 <RadioSetTxConfig+0x204>)
 8018214:	f002 f8ec 	bl	801a3f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018218:	4853      	ldr	r0, [pc, #332]	@ (8018368 <RadioSetTxConfig+0x208>)
 801821a:	f002 f9bb 	bl	801a594 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801821e:	4a53      	ldr	r2, [pc, #332]	@ (801836c <RadioSetTxConfig+0x20c>)
 8018220:	f107 0310 	add.w	r3, r7, #16
 8018224:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018228:	e883 0003 	stmia.w	r3, {r0, r1}
 801822c:	f107 0310 	add.w	r3, r7, #16
 8018230:	4618      	mov	r0, r3
 8018232:	f001 fc7c 	bl	8019b2e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018236:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801823a:	f001 fcc7 	bl	8019bcc <SUBGRF_SetWhiteningSeed>
            break;
 801823e:	e078      	b.n	8018332 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018240:	4b47      	ldr	r3, [pc, #284]	@ (8018360 <RadioSetTxConfig+0x200>)
 8018242:	2201      	movs	r2, #1
 8018244:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8018248:	6a3b      	ldr	r3, [r7, #32]
 801824a:	b2da      	uxtb	r2, r3
 801824c:	4b44      	ldr	r3, [pc, #272]	@ (8018360 <RadioSetTxConfig+0x200>)
 801824e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8018252:	4a47      	ldr	r2, [pc, #284]	@ (8018370 <RadioSetTxConfig+0x210>)
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	4413      	add	r3, r2
 8018258:	781a      	ldrb	r2, [r3, #0]
 801825a:	4b41      	ldr	r3, [pc, #260]	@ (8018360 <RadioSetTxConfig+0x200>)
 801825c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8018260:	4a3f      	ldr	r2, [pc, #252]	@ (8018360 <RadioSetTxConfig+0x200>)
 8018262:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018266:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d105      	bne.n	801827c <RadioSetTxConfig+0x11c>
 8018270:	6a3b      	ldr	r3, [r7, #32]
 8018272:	2b0b      	cmp	r3, #11
 8018274:	d008      	beq.n	8018288 <RadioSetTxConfig+0x128>
 8018276:	6a3b      	ldr	r3, [r7, #32]
 8018278:	2b0c      	cmp	r3, #12
 801827a:	d005      	beq.n	8018288 <RadioSetTxConfig+0x128>
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	2b01      	cmp	r3, #1
 8018280:	d107      	bne.n	8018292 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018282:	6a3b      	ldr	r3, [r7, #32]
 8018284:	2b0c      	cmp	r3, #12
 8018286:	d104      	bne.n	8018292 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018288:	4b35      	ldr	r3, [pc, #212]	@ (8018360 <RadioSetTxConfig+0x200>)
 801828a:	2201      	movs	r2, #1
 801828c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8018290:	e003      	b.n	801829a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018292:	4b33      	ldr	r3, [pc, #204]	@ (8018360 <RadioSetTxConfig+0x200>)
 8018294:	2200      	movs	r2, #0
 8018296:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801829a:	4b31      	ldr	r3, [pc, #196]	@ (8018360 <RadioSetTxConfig+0x200>)
 801829c:	2201      	movs	r2, #1
 801829e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80182a0:	4b2f      	ldr	r3, [pc, #188]	@ (8018360 <RadioSetTxConfig+0x200>)
 80182a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80182a6:	2b05      	cmp	r3, #5
 80182a8:	d004      	beq.n	80182b4 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80182aa:	4b2d      	ldr	r3, [pc, #180]	@ (8018360 <RadioSetTxConfig+0x200>)
 80182ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80182b0:	2b06      	cmp	r3, #6
 80182b2:	d10a      	bne.n	80182ca <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80182b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80182b6:	2b0b      	cmp	r3, #11
 80182b8:	d803      	bhi.n	80182c2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80182ba:	4b29      	ldr	r3, [pc, #164]	@ (8018360 <RadioSetTxConfig+0x200>)
 80182bc:	220c      	movs	r2, #12
 80182be:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80182c0:	e006      	b.n	80182d0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80182c2:	4a27      	ldr	r2, [pc, #156]	@ (8018360 <RadioSetTxConfig+0x200>)
 80182c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80182c6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80182c8:	e002      	b.n	80182d0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80182ca:	4a25      	ldr	r2, [pc, #148]	@ (8018360 <RadioSetTxConfig+0x200>)
 80182cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80182ce:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80182d0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80182d4:	4b22      	ldr	r3, [pc, #136]	@ (8018360 <RadioSetTxConfig+0x200>)
 80182d6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80182d8:	4b26      	ldr	r3, [pc, #152]	@ (8018374 <RadioSetTxConfig+0x214>)
 80182da:	781a      	ldrb	r2, [r3, #0]
 80182dc:	4b20      	ldr	r3, [pc, #128]	@ (8018360 <RadioSetTxConfig+0x200>)
 80182de:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80182e0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80182e4:	4b1e      	ldr	r3, [pc, #120]	@ (8018360 <RadioSetTxConfig+0x200>)
 80182e6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80182ea:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80182ee:	4b1c      	ldr	r3, [pc, #112]	@ (8018360 <RadioSetTxConfig+0x200>)
 80182f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80182f4:	f000 fab3 	bl	801885e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80182f8:	2001      	movs	r0, #1
 80182fa:	f7ff fc5d 	bl	8017bb8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80182fe:	4819      	ldr	r0, [pc, #100]	@ (8018364 <RadioSetTxConfig+0x204>)
 8018300:	f002 f876 	bl	801a3f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018304:	4818      	ldr	r0, [pc, #96]	@ (8018368 <RadioSetTxConfig+0x208>)
 8018306:	f002 f945 	bl	801a594 <SUBGRF_SetPacketParams>
            break;
 801830a:	e012      	b.n	8018332 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801830c:	2004      	movs	r0, #4
 801830e:	f7ff fc53 	bl	8017bb8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018312:	4b13      	ldr	r3, [pc, #76]	@ (8018360 <RadioSetTxConfig+0x200>)
 8018314:	2202      	movs	r2, #2
 8018316:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801831a:	4a11      	ldr	r2, [pc, #68]	@ (8018360 <RadioSetTxConfig+0x200>)
 801831c:	6a3b      	ldr	r3, [r7, #32]
 801831e:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018320:	4b0f      	ldr	r3, [pc, #60]	@ (8018360 <RadioSetTxConfig+0x200>)
 8018322:	2216      	movs	r2, #22
 8018324:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018328:	480e      	ldr	r0, [pc, #56]	@ (8018364 <RadioSetTxConfig+0x204>)
 801832a:	f002 f861 	bl	801a3f0 <SUBGRF_SetModulationParams>
            break;
 801832e:	e000      	b.n	8018332 <RadioSetTxConfig+0x1d2>
            break;
 8018330:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018332:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018336:	4618      	mov	r0, r3
 8018338:	f002 fb90 	bl	801aa5c <SUBGRF_SetRfTxPower>
 801833c:	4603      	mov	r3, r0
 801833e:	461a      	mov	r2, r3
 8018340:	4b07      	ldr	r3, [pc, #28]	@ (8018360 <RadioSetTxConfig+0x200>)
 8018342:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8018346:	4b06      	ldr	r3, [pc, #24]	@ (8018360 <RadioSetTxConfig+0x200>)
 8018348:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801834c:	4618      	mov	r0, r3
 801834e:	f002 fd54 	bl	801adfa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018352:	4a03      	ldr	r2, [pc, #12]	@ (8018360 <RadioSetTxConfig+0x200>)
 8018354:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018356:	6053      	str	r3, [r2, #4]
}
 8018358:	bf00      	nop
 801835a:	3718      	adds	r7, #24
 801835c:	46bd      	mov	sp, r7
 801835e:	bd80      	pop	{r7, pc}
 8018360:	20001d3c 	.word	0x20001d3c
 8018364:	20001d74 	.word	0x20001d74
 8018368:	20001d4a 	.word	0x20001d4a
 801836c:	0801f8fc 	.word	0x0801f8fc
 8018370:	0801ff60 	.word	0x0801ff60
 8018374:	20000144 	.word	0x20000144

08018378 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018378:	b480      	push	{r7}
 801837a:	b083      	sub	sp, #12
 801837c:	af00      	add	r7, sp, #0
 801837e:	6078      	str	r0, [r7, #4]
    return true;
 8018380:	2301      	movs	r3, #1
}
 8018382:	4618      	mov	r0, r3
 8018384:	370c      	adds	r7, #12
 8018386:	46bd      	mov	sp, r7
 8018388:	bc80      	pop	{r7}
 801838a:	4770      	bx	lr

0801838c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801838c:	b480      	push	{r7}
 801838e:	b085      	sub	sp, #20
 8018390:	af00      	add	r7, sp, #0
 8018392:	4603      	mov	r3, r0
 8018394:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8018396:	2300      	movs	r3, #0
 8018398:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801839a:	79fb      	ldrb	r3, [r7, #7]
 801839c:	2b0a      	cmp	r3, #10
 801839e:	d83e      	bhi.n	801841e <RadioGetLoRaBandwidthInHz+0x92>
 80183a0:	a201      	add	r2, pc, #4	@ (adr r2, 80183a8 <RadioGetLoRaBandwidthInHz+0x1c>)
 80183a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183a6:	bf00      	nop
 80183a8:	080183d5 	.word	0x080183d5
 80183ac:	080183e5 	.word	0x080183e5
 80183b0:	080183f5 	.word	0x080183f5
 80183b4:	08018405 	.word	0x08018405
 80183b8:	0801840d 	.word	0x0801840d
 80183bc:	08018413 	.word	0x08018413
 80183c0:	08018419 	.word	0x08018419
 80183c4:	0801841f 	.word	0x0801841f
 80183c8:	080183dd 	.word	0x080183dd
 80183cc:	080183ed 	.word	0x080183ed
 80183d0:	080183fd 	.word	0x080183fd
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80183d4:	f641 6384 	movw	r3, #7812	@ 0x1e84
 80183d8:	60fb      	str	r3, [r7, #12]
        break;
 80183da:	e020      	b.n	801841e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80183dc:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 80183e0:	60fb      	str	r3, [r7, #12]
        break;
 80183e2:	e01c      	b.n	801841e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80183e4:	f643 5309 	movw	r3, #15625	@ 0x3d09
 80183e8:	60fb      	str	r3, [r7, #12]
        break;
 80183ea:	e018      	b.n	801841e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80183ec:	f245 1361 	movw	r3, #20833	@ 0x5161
 80183f0:	60fb      	str	r3, [r7, #12]
        break;
 80183f2:	e014      	b.n	801841e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80183f4:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80183f8:	60fb      	str	r3, [r7, #12]
        break;
 80183fa:	e010      	b.n	801841e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80183fc:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8018400:	60fb      	str	r3, [r7, #12]
        break;
 8018402:	e00c      	b.n	801841e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8018404:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8018408:	60fb      	str	r3, [r7, #12]
        break;
 801840a:	e008      	b.n	801841e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801840c:	4b07      	ldr	r3, [pc, #28]	@ (801842c <RadioGetLoRaBandwidthInHz+0xa0>)
 801840e:	60fb      	str	r3, [r7, #12]
        break;
 8018410:	e005      	b.n	801841e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8018412:	4b07      	ldr	r3, [pc, #28]	@ (8018430 <RadioGetLoRaBandwidthInHz+0xa4>)
 8018414:	60fb      	str	r3, [r7, #12]
        break;
 8018416:	e002      	b.n	801841e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8018418:	4b06      	ldr	r3, [pc, #24]	@ (8018434 <RadioGetLoRaBandwidthInHz+0xa8>)
 801841a:	60fb      	str	r3, [r7, #12]
        break;
 801841c:	bf00      	nop
    }

    return bandwidthInHz;
 801841e:	68fb      	ldr	r3, [r7, #12]
}
 8018420:	4618      	mov	r0, r3
 8018422:	3714      	adds	r7, #20
 8018424:	46bd      	mov	sp, r7
 8018426:	bc80      	pop	{r7}
 8018428:	4770      	bx	lr
 801842a:	bf00      	nop
 801842c:	0001e848 	.word	0x0001e848
 8018430:	0003d090 	.word	0x0003d090
 8018434:	0007a120 	.word	0x0007a120

08018438 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018438:	b480      	push	{r7}
 801843a:	b083      	sub	sp, #12
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
 8018440:	4608      	mov	r0, r1
 8018442:	4611      	mov	r1, r2
 8018444:	461a      	mov	r2, r3
 8018446:	4603      	mov	r3, r0
 8018448:	70fb      	strb	r3, [r7, #3]
 801844a:	460b      	mov	r3, r1
 801844c:	803b      	strh	r3, [r7, #0]
 801844e:	4613      	mov	r3, r2
 8018450:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8018452:	883b      	ldrh	r3, [r7, #0]
 8018454:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018456:	78ba      	ldrb	r2, [r7, #2]
 8018458:	f082 0201 	eor.w	r2, r2, #1
 801845c:	b2d2      	uxtb	r2, r2
 801845e:	2a00      	cmp	r2, #0
 8018460:	d001      	beq.n	8018466 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8018462:	2208      	movs	r2, #8
 8018464:	e000      	b.n	8018468 <RadioGetGfskTimeOnAirNumerator+0x30>
 8018466:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8018468:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801846a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801846e:	7c3b      	ldrb	r3, [r7, #16]
 8018470:	7d39      	ldrb	r1, [r7, #20]
 8018472:	2900      	cmp	r1, #0
 8018474:	d001      	beq.n	801847a <RadioGetGfskTimeOnAirNumerator+0x42>
 8018476:	2102      	movs	r1, #2
 8018478:	e000      	b.n	801847c <RadioGetGfskTimeOnAirNumerator+0x44>
 801847a:	2100      	movs	r1, #0
 801847c:	440b      	add	r3, r1
 801847e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018480:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8018482:	4618      	mov	r0, r3
 8018484:	370c      	adds	r7, #12
 8018486:	46bd      	mov	sp, r7
 8018488:	bc80      	pop	{r7}
 801848a:	4770      	bx	lr

0801848c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801848c:	b480      	push	{r7}
 801848e:	b08b      	sub	sp, #44	@ 0x2c
 8018490:	af00      	add	r7, sp, #0
 8018492:	60f8      	str	r0, [r7, #12]
 8018494:	60b9      	str	r1, [r7, #8]
 8018496:	4611      	mov	r1, r2
 8018498:	461a      	mov	r2, r3
 801849a:	460b      	mov	r3, r1
 801849c:	71fb      	strb	r3, [r7, #7]
 801849e:	4613      	mov	r3, r2
 80184a0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80184a2:	79fb      	ldrb	r3, [r7, #7]
 80184a4:	3304      	adds	r3, #4
 80184a6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80184a8:	2300      	movs	r3, #0
 80184aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80184ae:	68bb      	ldr	r3, [r7, #8]
 80184b0:	2b05      	cmp	r3, #5
 80184b2:	d002      	beq.n	80184ba <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80184b4:	68bb      	ldr	r3, [r7, #8]
 80184b6:	2b06      	cmp	r3, #6
 80184b8:	d104      	bne.n	80184c4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80184ba:	88bb      	ldrh	r3, [r7, #4]
 80184bc:	2b0b      	cmp	r3, #11
 80184be:	d801      	bhi.n	80184c4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80184c0:	230c      	movs	r3, #12
 80184c2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d105      	bne.n	80184d6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80184ca:	68bb      	ldr	r3, [r7, #8]
 80184cc:	2b0b      	cmp	r3, #11
 80184ce:	d008      	beq.n	80184e2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80184d0:	68bb      	ldr	r3, [r7, #8]
 80184d2:	2b0c      	cmp	r3, #12
 80184d4:	d005      	beq.n	80184e2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	2b01      	cmp	r3, #1
 80184da:	d105      	bne.n	80184e8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80184dc:	68bb      	ldr	r3, [r7, #8]
 80184de:	2b0c      	cmp	r3, #12
 80184e0:	d102      	bne.n	80184e8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80184e2:	2301      	movs	r3, #1
 80184e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80184e8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80184ec:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80184ee:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80184f2:	2a00      	cmp	r2, #0
 80184f4:	d001      	beq.n	80184fa <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80184f6:	2210      	movs	r2, #16
 80184f8:	e000      	b.n	80184fc <RadioGetLoRaTimeOnAirNumerator+0x70>
 80184fa:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80184fc:	4413      	add	r3, r2
 80184fe:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8018500:	68bb      	ldr	r3, [r7, #8]
 8018502:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8018504:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8018506:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801850a:	2a00      	cmp	r2, #0
 801850c:	d001      	beq.n	8018512 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801850e:	2200      	movs	r2, #0
 8018510:	e000      	b.n	8018514 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8018512:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8018514:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018516:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8018518:	68bb      	ldr	r3, [r7, #8]
 801851a:	2b06      	cmp	r3, #6
 801851c:	d803      	bhi.n	8018526 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801851e:	68bb      	ldr	r3, [r7, #8]
 8018520:	009b      	lsls	r3, r3, #2
 8018522:	623b      	str	r3, [r7, #32]
 8018524:	e00e      	b.n	8018544 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8018526:	69fb      	ldr	r3, [r7, #28]
 8018528:	3308      	adds	r3, #8
 801852a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801852c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018530:	2b00      	cmp	r3, #0
 8018532:	d004      	beq.n	801853e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8018534:	68bb      	ldr	r3, [r7, #8]
 8018536:	3b02      	subs	r3, #2
 8018538:	009b      	lsls	r3, r3, #2
 801853a:	623b      	str	r3, [r7, #32]
 801853c:	e002      	b.n	8018544 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801853e:	68bb      	ldr	r3, [r7, #8]
 8018540:	009b      	lsls	r3, r3, #2
 8018542:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8018544:	69fb      	ldr	r3, [r7, #28]
 8018546:	2b00      	cmp	r3, #0
 8018548:	da01      	bge.n	801854e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801854a:	2300      	movs	r3, #0
 801854c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801854e:	69fa      	ldr	r2, [r7, #28]
 8018550:	6a3b      	ldr	r3, [r7, #32]
 8018552:	4413      	add	r3, r2
 8018554:	1e5a      	subs	r2, r3, #1
 8018556:	6a3b      	ldr	r3, [r7, #32]
 8018558:	fb92 f3f3 	sdiv	r3, r2, r3
 801855c:	697a      	ldr	r2, [r7, #20]
 801855e:	fb03 f202 	mul.w	r2, r3, r2
 8018562:	88bb      	ldrh	r3, [r7, #4]
 8018564:	4413      	add	r3, r2
    int32_t intermediate =
 8018566:	330c      	adds	r3, #12
 8018568:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801856a:	68bb      	ldr	r3, [r7, #8]
 801856c:	2b06      	cmp	r3, #6
 801856e:	d802      	bhi.n	8018576 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8018570:	69bb      	ldr	r3, [r7, #24]
 8018572:	3302      	adds	r3, #2
 8018574:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8018576:	69bb      	ldr	r3, [r7, #24]
 8018578:	009b      	lsls	r3, r3, #2
 801857a:	1c5a      	adds	r2, r3, #1
 801857c:	68bb      	ldr	r3, [r7, #8]
 801857e:	3b02      	subs	r3, #2
 8018580:	fa02 f303 	lsl.w	r3, r2, r3
}
 8018584:	4618      	mov	r0, r3
 8018586:	372c      	adds	r7, #44	@ 0x2c
 8018588:	46bd      	mov	sp, r7
 801858a:	bc80      	pop	{r7}
 801858c:	4770      	bx	lr
	...

08018590 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b08a      	sub	sp, #40	@ 0x28
 8018594:	af04      	add	r7, sp, #16
 8018596:	60b9      	str	r1, [r7, #8]
 8018598:	607a      	str	r2, [r7, #4]
 801859a:	461a      	mov	r2, r3
 801859c:	4603      	mov	r3, r0
 801859e:	73fb      	strb	r3, [r7, #15]
 80185a0:	4613      	mov	r3, r2
 80185a2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80185a4:	2300      	movs	r3, #0
 80185a6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80185a8:	2301      	movs	r3, #1
 80185aa:	613b      	str	r3, [r7, #16]

    switch( modem )
 80185ac:	7bfb      	ldrb	r3, [r7, #15]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d002      	beq.n	80185b8 <RadioTimeOnAir+0x28>
 80185b2:	2b01      	cmp	r3, #1
 80185b4:	d017      	beq.n	80185e6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80185b6:	e035      	b.n	8018624 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80185b8:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 80185bc:	8c3a      	ldrh	r2, [r7, #32]
 80185be:	7bb9      	ldrb	r1, [r7, #14]
 80185c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80185c4:	9301      	str	r3, [sp, #4]
 80185c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80185ca:	9300      	str	r3, [sp, #0]
 80185cc:	4603      	mov	r3, r0
 80185ce:	6878      	ldr	r0, [r7, #4]
 80185d0:	f7ff ff32 	bl	8018438 <RadioGetGfskTimeOnAirNumerator>
 80185d4:	4603      	mov	r3, r0
 80185d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80185da:	fb02 f303 	mul.w	r3, r2, r3
 80185de:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	613b      	str	r3, [r7, #16]
        break;
 80185e4:	e01e      	b.n	8018624 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80185e6:	8c39      	ldrh	r1, [r7, #32]
 80185e8:	7bba      	ldrb	r2, [r7, #14]
 80185ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80185ee:	9302      	str	r3, [sp, #8]
 80185f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80185f4:	9301      	str	r3, [sp, #4]
 80185f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80185fa:	9300      	str	r3, [sp, #0]
 80185fc:	460b      	mov	r3, r1
 80185fe:	6879      	ldr	r1, [r7, #4]
 8018600:	68b8      	ldr	r0, [r7, #8]
 8018602:	f7ff ff43 	bl	801848c <RadioGetLoRaTimeOnAirNumerator>
 8018606:	4603      	mov	r3, r0
 8018608:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801860c:	fb02 f303 	mul.w	r3, r2, r3
 8018610:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8018612:	4a0a      	ldr	r2, [pc, #40]	@ (801863c <RadioTimeOnAir+0xac>)
 8018614:	68bb      	ldr	r3, [r7, #8]
 8018616:	4413      	add	r3, r2
 8018618:	781b      	ldrb	r3, [r3, #0]
 801861a:	4618      	mov	r0, r3
 801861c:	f7ff feb6 	bl	801838c <RadioGetLoRaBandwidthInHz>
 8018620:	6138      	str	r0, [r7, #16]
        break;
 8018622:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8018624:	697a      	ldr	r2, [r7, #20]
 8018626:	693b      	ldr	r3, [r7, #16]
 8018628:	4413      	add	r3, r2
 801862a:	1e5a      	subs	r2, r3, #1
 801862c:	693b      	ldr	r3, [r7, #16]
 801862e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018632:	4618      	mov	r0, r3
 8018634:	3718      	adds	r7, #24
 8018636:	46bd      	mov	sp, r7
 8018638:	bd80      	pop	{r7, pc}
 801863a:	bf00      	nop
 801863c:	0801ff60 	.word	0x0801ff60

08018640 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b084      	sub	sp, #16
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
 8018648:	460b      	mov	r3, r1
 801864a:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801864c:	2300      	movs	r3, #0
 801864e:	2200      	movs	r2, #0
 8018650:	f240 2101 	movw	r1, #513	@ 0x201
 8018654:	f240 2001 	movw	r0, #513	@ 0x201
 8018658:	f001 fd34 	bl	801a0c4 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801865c:	4b71      	ldr	r3, [pc, #452]	@ (8018824 <RadioSend+0x1e4>)
 801865e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018662:	2101      	movs	r1, #1
 8018664:	4618      	mov	r0, r3
 8018666:	f002 f9d1 	bl	801aa0c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801866a:	4b6e      	ldr	r3, [pc, #440]	@ (8018824 <RadioSend+0x1e4>)
 801866c:	781b      	ldrb	r3, [r3, #0]
 801866e:	2b01      	cmp	r3, #1
 8018670:	d112      	bne.n	8018698 <RadioSend+0x58>
 8018672:	4b6c      	ldr	r3, [pc, #432]	@ (8018824 <RadioSend+0x1e4>)
 8018674:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8018678:	2b06      	cmp	r3, #6
 801867a:	d10d      	bne.n	8018698 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801867c:	f640 0089 	movw	r0, #2185	@ 0x889
 8018680:	f002 f8e4 	bl	801a84c <SUBGRF_ReadRegister>
 8018684:	4603      	mov	r3, r0
 8018686:	f023 0304 	bic.w	r3, r3, #4
 801868a:	b2db      	uxtb	r3, r3
 801868c:	4619      	mov	r1, r3
 801868e:	f640 0089 	movw	r0, #2185	@ 0x889
 8018692:	f002 f8c7 	bl	801a824 <SUBGRF_WriteRegister>
 8018696:	e00c      	b.n	80186b2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018698:	f640 0089 	movw	r0, #2185	@ 0x889
 801869c:	f002 f8d6 	bl	801a84c <SUBGRF_ReadRegister>
 80186a0:	4603      	mov	r3, r0
 80186a2:	f043 0304 	orr.w	r3, r3, #4
 80186a6:	b2db      	uxtb	r3, r3
 80186a8:	4619      	mov	r1, r3
 80186aa:	f640 0089 	movw	r0, #2185	@ 0x889
 80186ae:	f002 f8b9 	bl	801a824 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 80186b2:	4b5c      	ldr	r3, [pc, #368]	@ (8018824 <RadioSend+0x1e4>)
 80186b4:	781b      	ldrb	r3, [r3, #0]
 80186b6:	2b04      	cmp	r3, #4
 80186b8:	f200 80a7 	bhi.w	801880a <RadioSend+0x1ca>
 80186bc:	a201      	add	r2, pc, #4	@ (adr r2, 80186c4 <RadioSend+0x84>)
 80186be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186c2:	bf00      	nop
 80186c4:	080186f3 	.word	0x080186f3
 80186c8:	080186d9 	.word	0x080186d9
 80186cc:	080186f3 	.word	0x080186f3
 80186d0:	08018753 	.word	0x08018753
 80186d4:	08018773 	.word	0x08018773
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80186d8:	4a52      	ldr	r2, [pc, #328]	@ (8018824 <RadioSend+0x1e4>)
 80186da:	78fb      	ldrb	r3, [r7, #3]
 80186dc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80186de:	4852      	ldr	r0, [pc, #328]	@ (8018828 <RadioSend+0x1e8>)
 80186e0:	f001 ff58 	bl	801a594 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80186e4:	78fb      	ldrb	r3, [r7, #3]
 80186e6:	2200      	movs	r2, #0
 80186e8:	4619      	mov	r1, r3
 80186ea:	6878      	ldr	r0, [r7, #4]
 80186ec:	f001 fa0c 	bl	8019b08 <SUBGRF_SendPayload>
            break;
 80186f0:	e08c      	b.n	801880c <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80186f2:	f002 fb74 	bl	801adde <RFW_Is_Init>
 80186f6:	4603      	mov	r3, r0
 80186f8:	2b01      	cmp	r3, #1
 80186fa:	d11d      	bne.n	8018738 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80186fc:	f107 020d 	add.w	r2, r7, #13
 8018700:	78fb      	ldrb	r3, [r7, #3]
 8018702:	4619      	mov	r1, r3
 8018704:	6878      	ldr	r0, [r7, #4]
 8018706:	f002 fb82 	bl	801ae0e <RFW_TransmitInit>
 801870a:	4603      	mov	r3, r0
 801870c:	2b00      	cmp	r3, #0
 801870e:	d10c      	bne.n	801872a <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8018710:	7b7a      	ldrb	r2, [r7, #13]
 8018712:	4b44      	ldr	r3, [pc, #272]	@ (8018824 <RadioSend+0x1e4>)
 8018714:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018716:	4844      	ldr	r0, [pc, #272]	@ (8018828 <RadioSend+0x1e8>)
 8018718:	f001 ff3c 	bl	801a594 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 801871c:	7b7b      	ldrb	r3, [r7, #13]
 801871e:	2200      	movs	r2, #0
 8018720:	4619      	mov	r1, r3
 8018722:	6878      	ldr	r0, [r7, #4]
 8018724:	f001 f9f0 	bl	8019b08 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8018728:	e070      	b.n	801880c <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801872a:	4b40      	ldr	r3, [pc, #256]	@ (801882c <RadioSend+0x1ec>)
 801872c:	2201      	movs	r2, #1
 801872e:	2100      	movs	r1, #0
 8018730:	2002      	movs	r0, #2
 8018732:	f003 fc8b 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
 8018736:	e072      	b.n	801881e <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8018738:	4a3a      	ldr	r2, [pc, #232]	@ (8018824 <RadioSend+0x1e4>)
 801873a:	78fb      	ldrb	r3, [r7, #3]
 801873c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801873e:	483a      	ldr	r0, [pc, #232]	@ (8018828 <RadioSend+0x1e8>)
 8018740:	f001 ff28 	bl	801a594 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8018744:	78fb      	ldrb	r3, [r7, #3]
 8018746:	2200      	movs	r2, #0
 8018748:	4619      	mov	r1, r3
 801874a:	6878      	ldr	r0, [r7, #4]
 801874c:	f001 f9dc 	bl	8019b08 <SUBGRF_SendPayload>
            break;
 8018750:	e05c      	b.n	801880c <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018752:	4b34      	ldr	r3, [pc, #208]	@ (8018824 <RadioSend+0x1e4>)
 8018754:	2202      	movs	r2, #2
 8018756:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8018758:	4a32      	ldr	r2, [pc, #200]	@ (8018824 <RadioSend+0x1e4>)
 801875a:	78fb      	ldrb	r3, [r7, #3]
 801875c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801875e:	4832      	ldr	r0, [pc, #200]	@ (8018828 <RadioSend+0x1e8>)
 8018760:	f001 ff18 	bl	801a594 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018764:	78fb      	ldrb	r3, [r7, #3]
 8018766:	2200      	movs	r2, #0
 8018768:	4619      	mov	r1, r3
 801876a:	6878      	ldr	r0, [r7, #4]
 801876c:	f001 f9cc 	bl	8019b08 <SUBGRF_SendPayload>
            break;
 8018770:	e04c      	b.n	801880c <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8018772:	78fb      	ldrb	r3, [r7, #3]
 8018774:	461a      	mov	r2, r3
 8018776:	6879      	ldr	r1, [r7, #4]
 8018778:	482d      	ldr	r0, [pc, #180]	@ (8018830 <RadioSend+0x1f0>)
 801877a:	f000 fcbc 	bl	80190f6 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801877e:	4b29      	ldr	r3, [pc, #164]	@ (8018824 <RadioSend+0x1e4>)
 8018780:	2202      	movs	r2, #2
 8018782:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8018784:	78fb      	ldrb	r3, [r7, #3]
 8018786:	3301      	adds	r3, #1
 8018788:	b2da      	uxtb	r2, r3
 801878a:	4b26      	ldr	r3, [pc, #152]	@ (8018824 <RadioSend+0x1e4>)
 801878c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801878e:	4826      	ldr	r0, [pc, #152]	@ (8018828 <RadioSend+0x1e8>)
 8018790:	f001 ff00 	bl	801a594 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8018794:	2100      	movs	r1, #0
 8018796:	20f1      	movs	r0, #241	@ 0xf1
 8018798:	f000 f95c 	bl	8018a54 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801879c:	2100      	movs	r1, #0
 801879e:	20f0      	movs	r0, #240	@ 0xf0
 80187a0:	f000 f958 	bl	8018a54 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80187a4:	4b1f      	ldr	r3, [pc, #124]	@ (8018824 <RadioSend+0x1e4>)
 80187a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80187a8:	2b64      	cmp	r3, #100	@ 0x64
 80187aa:	d108      	bne.n	80187be <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80187ac:	2170      	movs	r1, #112	@ 0x70
 80187ae:	20f3      	movs	r0, #243	@ 0xf3
 80187b0:	f000 f950 	bl	8018a54 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80187b4:	211d      	movs	r1, #29
 80187b6:	20f2      	movs	r0, #242	@ 0xf2
 80187b8:	f000 f94c 	bl	8018a54 <RadioWrite>
 80187bc:	e007      	b.n	80187ce <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80187be:	21e1      	movs	r1, #225	@ 0xe1
 80187c0:	20f3      	movs	r0, #243	@ 0xf3
 80187c2:	f000 f947 	bl	8018a54 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80187c6:	2104      	movs	r1, #4
 80187c8:	20f2      	movs	r0, #242	@ 0xf2
 80187ca:	f000 f943 	bl	8018a54 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80187ce:	78fb      	ldrb	r3, [r7, #3]
 80187d0:	b29b      	uxth	r3, r3
 80187d2:	00db      	lsls	r3, r3, #3
 80187d4:	b29b      	uxth	r3, r3
 80187d6:	3302      	adds	r3, #2
 80187d8:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80187da:	89fb      	ldrh	r3, [r7, #14]
 80187dc:	0a1b      	lsrs	r3, r3, #8
 80187de:	b29b      	uxth	r3, r3
 80187e0:	b2db      	uxtb	r3, r3
 80187e2:	4619      	mov	r1, r3
 80187e4:	20f4      	movs	r0, #244	@ 0xf4
 80187e6:	f000 f935 	bl	8018a54 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80187ea:	89fb      	ldrh	r3, [r7, #14]
 80187ec:	b2db      	uxtb	r3, r3
 80187ee:	4619      	mov	r1, r3
 80187f0:	20f5      	movs	r0, #245	@ 0xf5
 80187f2:	f000 f92f 	bl	8018a54 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80187f6:	78fb      	ldrb	r3, [r7, #3]
 80187f8:	3301      	adds	r3, #1
 80187fa:	b2db      	uxtb	r3, r3
 80187fc:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8018800:	4619      	mov	r1, r3
 8018802:	480b      	ldr	r0, [pc, #44]	@ (8018830 <RadioSend+0x1f0>)
 8018804:	f001 f980 	bl	8019b08 <SUBGRF_SendPayload>
            break;
 8018808:	e000      	b.n	801880c <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801880a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801880c:	4b05      	ldr	r3, [pc, #20]	@ (8018824 <RadioSend+0x1e4>)
 801880e:	685b      	ldr	r3, [r3, #4]
 8018810:	4619      	mov	r1, r3
 8018812:	4808      	ldr	r0, [pc, #32]	@ (8018834 <RadioSend+0x1f4>)
 8018814:	f003 fa80 	bl	801bd18 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8018818:	4806      	ldr	r0, [pc, #24]	@ (8018834 <RadioSend+0x1f4>)
 801881a:	f003 f99f 	bl	801bb5c <UTIL_TIMER_Start>
}
 801881e:	3710      	adds	r7, #16
 8018820:	46bd      	mov	sp, r7
 8018822:	bd80      	pop	{r7, pc}
 8018824:	20001d3c 	.word	0x20001d3c
 8018828:	20001d4a 	.word	0x20001d4a
 801882c:	0801f904 	.word	0x0801f904
 8018830:	20001c38 	.word	0x20001c38
 8018834:	20001d98 	.word	0x20001d98

08018838 <RadioSleep>:

static void RadioSleep( void )
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b082      	sub	sp, #8
 801883c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801883e:	2300      	movs	r3, #0
 8018840:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8018842:	793b      	ldrb	r3, [r7, #4]
 8018844:	f043 0304 	orr.w	r3, r3, #4
 8018848:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801884a:	7938      	ldrb	r0, [r7, #4]
 801884c:	f001 fa38 	bl	8019cc0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8018850:	2002      	movs	r0, #2
 8018852:	f7e9 fe3b 	bl	80024cc <HAL_Delay>
}
 8018856:	bf00      	nop
 8018858:	3708      	adds	r7, #8
 801885a:	46bd      	mov	sp, r7
 801885c:	bd80      	pop	{r7, pc}

0801885e <RadioStandby>:

static void RadioStandby( void )
{
 801885e:	b580      	push	{r7, lr}
 8018860:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8018862:	2000      	movs	r0, #0
 8018864:	f001 fa5e 	bl	8019d24 <SUBGRF_SetStandby>
}
 8018868:	bf00      	nop
 801886a:	bd80      	pop	{r7, pc}

0801886c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801886c:	b580      	push	{r7, lr}
 801886e:	b082      	sub	sp, #8
 8018870:	af00      	add	r7, sp, #0
 8018872:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8018874:	f002 fab3 	bl	801adde <RFW_Is_Init>
 8018878:	4603      	mov	r3, r0
 801887a:	2b01      	cmp	r3, #1
 801887c:	d102      	bne.n	8018884 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801887e:	f002 fad6 	bl	801ae2e <RFW_ReceiveInit>
 8018882:	e007      	b.n	8018894 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018884:	2300      	movs	r3, #0
 8018886:	2200      	movs	r2, #0
 8018888:	f240 2162 	movw	r1, #610	@ 0x262
 801888c:	f240 2062 	movw	r0, #610	@ 0x262
 8018890:	f001 fc18 	bl	801a0c4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d006      	beq.n	80188a8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801889a:	6879      	ldr	r1, [r7, #4]
 801889c:	4811      	ldr	r0, [pc, #68]	@ (80188e4 <RadioRx+0x78>)
 801889e:	f003 fa3b 	bl	801bd18 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80188a2:	4810      	ldr	r0, [pc, #64]	@ (80188e4 <RadioRx+0x78>)
 80188a4:	f003 f95a 	bl	801bb5c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80188a8:	4b0f      	ldr	r3, [pc, #60]	@ (80188e8 <RadioRx+0x7c>)
 80188aa:	2200      	movs	r2, #0
 80188ac:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80188ae:	4b0e      	ldr	r3, [pc, #56]	@ (80188e8 <RadioRx+0x7c>)
 80188b0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80188b4:	2100      	movs	r1, #0
 80188b6:	4618      	mov	r0, r3
 80188b8:	f002 f8a8 	bl	801aa0c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80188bc:	4b0a      	ldr	r3, [pc, #40]	@ (80188e8 <RadioRx+0x7c>)
 80188be:	785b      	ldrb	r3, [r3, #1]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d004      	beq.n	80188ce <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80188c4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80188c8:	f001 fa68 	bl	8019d9c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80188cc:	e005      	b.n	80188da <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80188ce:	4b06      	ldr	r3, [pc, #24]	@ (80188e8 <RadioRx+0x7c>)
 80188d0:	689b      	ldr	r3, [r3, #8]
 80188d2:	019b      	lsls	r3, r3, #6
 80188d4:	4618      	mov	r0, r3
 80188d6:	f001 fa61 	bl	8019d9c <SUBGRF_SetRx>
}
 80188da:	bf00      	nop
 80188dc:	3708      	adds	r7, #8
 80188de:	46bd      	mov	sp, r7
 80188e0:	bd80      	pop	{r7, pc}
 80188e2:	bf00      	nop
 80188e4:	20001db0 	.word	0x20001db0
 80188e8:	20001d3c 	.word	0x20001d3c

080188ec <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b082      	sub	sp, #8
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 80188f4:	f002 fa73 	bl	801adde <RFW_Is_Init>
 80188f8:	4603      	mov	r3, r0
 80188fa:	2b01      	cmp	r3, #1
 80188fc:	d102      	bne.n	8018904 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80188fe:	f002 fa96 	bl	801ae2e <RFW_ReceiveInit>
 8018902:	e007      	b.n	8018914 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018904:	2300      	movs	r3, #0
 8018906:	2200      	movs	r2, #0
 8018908:	f240 2162 	movw	r1, #610	@ 0x262
 801890c:	f240 2062 	movw	r0, #610	@ 0x262
 8018910:	f001 fbd8 	bl	801a0c4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	2b00      	cmp	r3, #0
 8018918:	d006      	beq.n	8018928 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801891a:	6879      	ldr	r1, [r7, #4]
 801891c:	4811      	ldr	r0, [pc, #68]	@ (8018964 <RadioRxBoosted+0x78>)
 801891e:	f003 f9fb 	bl	801bd18 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8018922:	4810      	ldr	r0, [pc, #64]	@ (8018964 <RadioRxBoosted+0x78>)
 8018924:	f003 f91a 	bl	801bb5c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018928:	4b0f      	ldr	r3, [pc, #60]	@ (8018968 <RadioRxBoosted+0x7c>)
 801892a:	2200      	movs	r2, #0
 801892c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801892e:	4b0e      	ldr	r3, [pc, #56]	@ (8018968 <RadioRxBoosted+0x7c>)
 8018930:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018934:	2100      	movs	r1, #0
 8018936:	4618      	mov	r0, r3
 8018938:	f002 f868 	bl	801aa0c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801893c:	4b0a      	ldr	r3, [pc, #40]	@ (8018968 <RadioRxBoosted+0x7c>)
 801893e:	785b      	ldrb	r3, [r3, #1]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d004      	beq.n	801894e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8018944:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018948:	f001 fa48 	bl	8019ddc <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801894c:	e005      	b.n	801895a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801894e:	4b06      	ldr	r3, [pc, #24]	@ (8018968 <RadioRxBoosted+0x7c>)
 8018950:	689b      	ldr	r3, [r3, #8]
 8018952:	019b      	lsls	r3, r3, #6
 8018954:	4618      	mov	r0, r3
 8018956:	f001 fa41 	bl	8019ddc <SUBGRF_SetRxBoosted>
}
 801895a:	bf00      	nop
 801895c:	3708      	adds	r7, #8
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}
 8018962:	bf00      	nop
 8018964:	20001db0 	.word	0x20001db0
 8018968:	20001d3c 	.word	0x20001d3c

0801896c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b082      	sub	sp, #8
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
 8018974:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	005a      	lsls	r2, r3, #1
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	4413      	add	r3, r2
 801897e:	4a0c      	ldr	r2, [pc, #48]	@ (80189b0 <RadioSetRxDutyCycle+0x44>)
 8018980:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018982:	2300      	movs	r3, #0
 8018984:	2200      	movs	r2, #0
 8018986:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801898a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801898e:	f001 fb99 	bl	801a0c4 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018992:	4b07      	ldr	r3, [pc, #28]	@ (80189b0 <RadioSetRxDutyCycle+0x44>)
 8018994:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018998:	2100      	movs	r1, #0
 801899a:	4618      	mov	r0, r3
 801899c:	f002 f836 	bl	801aa0c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80189a0:	6839      	ldr	r1, [r7, #0]
 80189a2:	6878      	ldr	r0, [r7, #4]
 80189a4:	f001 fa3e 	bl	8019e24 <SUBGRF_SetRxDutyCycle>
}
 80189a8:	bf00      	nop
 80189aa:	3708      	adds	r7, #8
 80189ac:	46bd      	mov	sp, r7
 80189ae:	bd80      	pop	{r7, pc}
 80189b0:	20001d3c 	.word	0x20001d3c

080189b4 <RadioStartCad>:

static void RadioStartCad( void )
{
 80189b4:	b580      	push	{r7, lr}
 80189b6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80189b8:	4b09      	ldr	r3, [pc, #36]	@ (80189e0 <RadioStartCad+0x2c>)
 80189ba:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80189be:	2100      	movs	r1, #0
 80189c0:	4618      	mov	r0, r3
 80189c2:	f002 f823 	bl	801aa0c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80189c6:	2300      	movs	r3, #0
 80189c8:	2200      	movs	r2, #0
 80189ca:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80189ce:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80189d2:	f001 fb77 	bl	801a0c4 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80189d6:	f001 fa51 	bl	8019e7c <SUBGRF_SetCad>
}
 80189da:	bf00      	nop
 80189dc:	bd80      	pop	{r7, pc}
 80189de:	bf00      	nop
 80189e0:	20001d3c 	.word	0x20001d3c

080189e4 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b084      	sub	sp, #16
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	6078      	str	r0, [r7, #4]
 80189ec:	460b      	mov	r3, r1
 80189ee:	70fb      	strb	r3, [r7, #3]
 80189f0:	4613      	mov	r3, r2
 80189f2:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 80189f4:	883b      	ldrh	r3, [r7, #0]
 80189f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80189fa:	fb02 f303 	mul.w	r3, r2, r3
 80189fe:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8018a00:	6878      	ldr	r0, [r7, #4]
 8018a02:	f001 fbbb 	bl	801a17c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8018a06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	f002 f826 	bl	801aa5c <SUBGRF_SetRfTxPower>
 8018a10:	4603      	mov	r3, r0
 8018a12:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8018a14:	7afb      	ldrb	r3, [r7, #11]
 8018a16:	2101      	movs	r1, #1
 8018a18:	4618      	mov	r0, r3
 8018a1a:	f001 fff7 	bl	801aa0c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8018a1e:	f001 fa3b 	bl	8019e98 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8018a22:	68f9      	ldr	r1, [r7, #12]
 8018a24:	4804      	ldr	r0, [pc, #16]	@ (8018a38 <RadioSetTxContinuousWave+0x54>)
 8018a26:	f003 f977 	bl	801bd18 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8018a2a:	4803      	ldr	r0, [pc, #12]	@ (8018a38 <RadioSetTxContinuousWave+0x54>)
 8018a2c:	f003 f896 	bl	801bb5c <UTIL_TIMER_Start>
}
 8018a30:	bf00      	nop
 8018a32:	3710      	adds	r7, #16
 8018a34:	46bd      	mov	sp, r7
 8018a36:	bd80      	pop	{r7, pc}
 8018a38:	20001d98 	.word	0x20001d98

08018a3c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b082      	sub	sp, #8
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	4603      	mov	r3, r0
 8018a44:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8018a46:	f001 fe5a 	bl	801a6fe <SUBGRF_GetRssiInst>
 8018a4a:	4603      	mov	r3, r0
}
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	3708      	adds	r7, #8
 8018a50:	46bd      	mov	sp, r7
 8018a52:	bd80      	pop	{r7, pc}

08018a54 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8018a54:	b580      	push	{r7, lr}
 8018a56:	b082      	sub	sp, #8
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	460a      	mov	r2, r1
 8018a5e:	80fb      	strh	r3, [r7, #6]
 8018a60:	4613      	mov	r3, r2
 8018a62:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8018a64:	797a      	ldrb	r2, [r7, #5]
 8018a66:	88fb      	ldrh	r3, [r7, #6]
 8018a68:	4611      	mov	r1, r2
 8018a6a:	4618      	mov	r0, r3
 8018a6c:	f001 feda 	bl	801a824 <SUBGRF_WriteRegister>
}
 8018a70:	bf00      	nop
 8018a72:	3708      	adds	r7, #8
 8018a74:	46bd      	mov	sp, r7
 8018a76:	bd80      	pop	{r7, pc}

08018a78 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8018a78:	b580      	push	{r7, lr}
 8018a7a:	b082      	sub	sp, #8
 8018a7c:	af00      	add	r7, sp, #0
 8018a7e:	4603      	mov	r3, r0
 8018a80:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8018a82:	88fb      	ldrh	r3, [r7, #6]
 8018a84:	4618      	mov	r0, r3
 8018a86:	f001 fee1 	bl	801a84c <SUBGRF_ReadRegister>
 8018a8a:	4603      	mov	r3, r0
}
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	3708      	adds	r7, #8
 8018a90:	46bd      	mov	sp, r7
 8018a92:	bd80      	pop	{r7, pc}

08018a94 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b082      	sub	sp, #8
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	6039      	str	r1, [r7, #0]
 8018a9e:	80fb      	strh	r3, [r7, #6]
 8018aa0:	4613      	mov	r3, r2
 8018aa2:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8018aa4:	797b      	ldrb	r3, [r7, #5]
 8018aa6:	b29a      	uxth	r2, r3
 8018aa8:	88fb      	ldrh	r3, [r7, #6]
 8018aaa:	6839      	ldr	r1, [r7, #0]
 8018aac:	4618      	mov	r0, r3
 8018aae:	f001 fee1 	bl	801a874 <SUBGRF_WriteRegisters>
}
 8018ab2:	bf00      	nop
 8018ab4:	3708      	adds	r7, #8
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	bd80      	pop	{r7, pc}

08018aba <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018aba:	b580      	push	{r7, lr}
 8018abc:	b082      	sub	sp, #8
 8018abe:	af00      	add	r7, sp, #0
 8018ac0:	4603      	mov	r3, r0
 8018ac2:	6039      	str	r1, [r7, #0]
 8018ac4:	80fb      	strh	r3, [r7, #6]
 8018ac6:	4613      	mov	r3, r2
 8018ac8:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8018aca:	797b      	ldrb	r3, [r7, #5]
 8018acc:	b29a      	uxth	r2, r3
 8018ace:	88fb      	ldrh	r3, [r7, #6]
 8018ad0:	6839      	ldr	r1, [r7, #0]
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	f001 fef0 	bl	801a8b8 <SUBGRF_ReadRegisters>
}
 8018ad8:	bf00      	nop
 8018ada:	3708      	adds	r7, #8
 8018adc:	46bd      	mov	sp, r7
 8018ade:	bd80      	pop	{r7, pc}

08018ae0 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8018ae0:	b580      	push	{r7, lr}
 8018ae2:	b082      	sub	sp, #8
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	4603      	mov	r3, r0
 8018ae8:	460a      	mov	r2, r1
 8018aea:	71fb      	strb	r3, [r7, #7]
 8018aec:	4613      	mov	r3, r2
 8018aee:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8018af0:	79fb      	ldrb	r3, [r7, #7]
 8018af2:	2b01      	cmp	r3, #1
 8018af4:	d10a      	bne.n	8018b0c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8018af6:	4a0e      	ldr	r2, [pc, #56]	@ (8018b30 <RadioSetMaxPayloadLength+0x50>)
 8018af8:	79bb      	ldrb	r3, [r7, #6]
 8018afa:	7013      	strb	r3, [r2, #0]
 8018afc:	4b0c      	ldr	r3, [pc, #48]	@ (8018b30 <RadioSetMaxPayloadLength+0x50>)
 8018afe:	781a      	ldrb	r2, [r3, #0]
 8018b00:	4b0c      	ldr	r3, [pc, #48]	@ (8018b34 <RadioSetMaxPayloadLength+0x54>)
 8018b02:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018b04:	480c      	ldr	r0, [pc, #48]	@ (8018b38 <RadioSetMaxPayloadLength+0x58>)
 8018b06:	f001 fd45 	bl	801a594 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8018b0a:	e00d      	b.n	8018b28 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8018b0c:	4b09      	ldr	r3, [pc, #36]	@ (8018b34 <RadioSetMaxPayloadLength+0x54>)
 8018b0e:	7d5b      	ldrb	r3, [r3, #21]
 8018b10:	2b01      	cmp	r3, #1
 8018b12:	d109      	bne.n	8018b28 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8018b14:	4a06      	ldr	r2, [pc, #24]	@ (8018b30 <RadioSetMaxPayloadLength+0x50>)
 8018b16:	79bb      	ldrb	r3, [r7, #6]
 8018b18:	7013      	strb	r3, [r2, #0]
 8018b1a:	4b05      	ldr	r3, [pc, #20]	@ (8018b30 <RadioSetMaxPayloadLength+0x50>)
 8018b1c:	781a      	ldrb	r2, [r3, #0]
 8018b1e:	4b05      	ldr	r3, [pc, #20]	@ (8018b34 <RadioSetMaxPayloadLength+0x54>)
 8018b20:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018b22:	4805      	ldr	r0, [pc, #20]	@ (8018b38 <RadioSetMaxPayloadLength+0x58>)
 8018b24:	f001 fd36 	bl	801a594 <SUBGRF_SetPacketParams>
}
 8018b28:	bf00      	nop
 8018b2a:	3708      	adds	r7, #8
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}
 8018b30:	20000144 	.word	0x20000144
 8018b34:	20001d3c 	.word	0x20001d3c
 8018b38:	20001d4a 	.word	0x20001d4a

08018b3c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b082      	sub	sp, #8
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	4603      	mov	r3, r0
 8018b44:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8018b46:	4a13      	ldr	r2, [pc, #76]	@ (8018b94 <RadioSetPublicNetwork+0x58>)
 8018b48:	79fb      	ldrb	r3, [r7, #7]
 8018b4a:	7313      	strb	r3, [r2, #12]
 8018b4c:	4b11      	ldr	r3, [pc, #68]	@ (8018b94 <RadioSetPublicNetwork+0x58>)
 8018b4e:	7b1a      	ldrb	r2, [r3, #12]
 8018b50:	4b10      	ldr	r3, [pc, #64]	@ (8018b94 <RadioSetPublicNetwork+0x58>)
 8018b52:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8018b54:	2001      	movs	r0, #1
 8018b56:	f7ff f82f 	bl	8017bb8 <RadioSetModem>
    if( enable == true )
 8018b5a:	79fb      	ldrb	r3, [r7, #7]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d00a      	beq.n	8018b76 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8018b60:	2134      	movs	r1, #52	@ 0x34
 8018b62:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8018b66:	f001 fe5d 	bl	801a824 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8018b6a:	2144      	movs	r1, #68	@ 0x44
 8018b6c:	f240 7041 	movw	r0, #1857	@ 0x741
 8018b70:	f001 fe58 	bl	801a824 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8018b74:	e009      	b.n	8018b8a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8018b76:	2114      	movs	r1, #20
 8018b78:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8018b7c:	f001 fe52 	bl	801a824 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8018b80:	2124      	movs	r1, #36	@ 0x24
 8018b82:	f240 7041 	movw	r0, #1857	@ 0x741
 8018b86:	f001 fe4d 	bl	801a824 <SUBGRF_WriteRegister>
}
 8018b8a:	bf00      	nop
 8018b8c:	3708      	adds	r7, #8
 8018b8e:	46bd      	mov	sp, r7
 8018b90:	bd80      	pop	{r7, pc}
 8018b92:	bf00      	nop
 8018b94:	20001d3c 	.word	0x20001d3c

08018b98 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8018b98:	b580      	push	{r7, lr}
 8018b9a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8018b9c:	f001 ff92 	bl	801aac4 <SUBGRF_GetRadioWakeUpTime>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	3303      	adds	r3, #3
}
 8018ba4:	4618      	mov	r0, r3
 8018ba6:	bd80      	pop	{r7, pc}

08018ba8 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b082      	sub	sp, #8
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8018bb0:	f000 f80e 	bl	8018bd0 <RadioOnTxTimeoutProcess>
}
 8018bb4:	bf00      	nop
 8018bb6:	3708      	adds	r7, #8
 8018bb8:	46bd      	mov	sp, r7
 8018bba:	bd80      	pop	{r7, pc}

08018bbc <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	b082      	sub	sp, #8
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8018bc4:	f000 f818 	bl	8018bf8 <RadioOnRxTimeoutProcess>
}
 8018bc8:	bf00      	nop
 8018bca:	3708      	adds	r7, #8
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	bd80      	pop	{r7, pc}

08018bd0 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8018bd0:	b580      	push	{r7, lr}
 8018bd2:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018bd4:	4b07      	ldr	r3, [pc, #28]	@ (8018bf4 <RadioOnTxTimeoutProcess+0x24>)
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d008      	beq.n	8018bee <RadioOnTxTimeoutProcess+0x1e>
 8018bdc:	4b05      	ldr	r3, [pc, #20]	@ (8018bf4 <RadioOnTxTimeoutProcess+0x24>)
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	685b      	ldr	r3, [r3, #4]
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d003      	beq.n	8018bee <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8018be6:	4b03      	ldr	r3, [pc, #12]	@ (8018bf4 <RadioOnTxTimeoutProcess+0x24>)
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	685b      	ldr	r3, [r3, #4]
 8018bec:	4798      	blx	r3
    }
}
 8018bee:	bf00      	nop
 8018bf0:	bd80      	pop	{r7, pc}
 8018bf2:	bf00      	nop
 8018bf4:	20001d38 	.word	0x20001d38

08018bf8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018bfc:	4b07      	ldr	r3, [pc, #28]	@ (8018c1c <RadioOnRxTimeoutProcess+0x24>)
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d008      	beq.n	8018c16 <RadioOnRxTimeoutProcess+0x1e>
 8018c04:	4b05      	ldr	r3, [pc, #20]	@ (8018c1c <RadioOnRxTimeoutProcess+0x24>)
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	68db      	ldr	r3, [r3, #12]
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d003      	beq.n	8018c16 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8018c0e:	4b03      	ldr	r3, [pc, #12]	@ (8018c1c <RadioOnRxTimeoutProcess+0x24>)
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	68db      	ldr	r3, [r3, #12]
 8018c14:	4798      	blx	r3
    }
}
 8018c16:	bf00      	nop
 8018c18:	bd80      	pop	{r7, pc}
 8018c1a:	bf00      	nop
 8018c1c:	20001d38 	.word	0x20001d38

08018c20 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8018c20:	b580      	push	{r7, lr}
 8018c22:	b082      	sub	sp, #8
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	4603      	mov	r3, r0
 8018c28:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8018c2a:	4a05      	ldr	r2, [pc, #20]	@ (8018c40 <RadioOnDioIrq+0x20>)
 8018c2c:	88fb      	ldrh	r3, [r7, #6]
 8018c2e:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8018c32:	f000 f807 	bl	8018c44 <RadioIrqProcess>
}
 8018c36:	bf00      	nop
 8018c38:	3708      	adds	r7, #8
 8018c3a:	46bd      	mov	sp, r7
 8018c3c:	bd80      	pop	{r7, pc}
 8018c3e:	bf00      	nop
 8018c40:	20001d3c 	.word	0x20001d3c

08018c44 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8018c44:	b5b0      	push	{r4, r5, r7, lr}
 8018c46:	b082      	sub	sp, #8
 8018c48:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8018c4e:	2300      	movs	r3, #0
 8018c50:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8018c52:	4ba8      	ldr	r3, [pc, #672]	@ (8018ef4 <RadioIrqProcess+0x2b0>)
 8018c54:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8018c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018c5c:	f000 810d 	beq.w	8018e7a <RadioIrqProcess+0x236>
 8018c60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018c64:	f300 81e8 	bgt.w	8019038 <RadioIrqProcess+0x3f4>
 8018c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018c6c:	f000 80f1 	beq.w	8018e52 <RadioIrqProcess+0x20e>
 8018c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018c74:	f300 81e0 	bgt.w	8019038 <RadioIrqProcess+0x3f4>
 8018c78:	2b80      	cmp	r3, #128	@ 0x80
 8018c7a:	f000 80d6 	beq.w	8018e2a <RadioIrqProcess+0x1e6>
 8018c7e:	2b80      	cmp	r3, #128	@ 0x80
 8018c80:	f300 81da 	bgt.w	8019038 <RadioIrqProcess+0x3f4>
 8018c84:	2b20      	cmp	r3, #32
 8018c86:	dc49      	bgt.n	8018d1c <RadioIrqProcess+0xd8>
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	f340 81d5 	ble.w	8019038 <RadioIrqProcess+0x3f4>
 8018c8e:	3b01      	subs	r3, #1
 8018c90:	2b1f      	cmp	r3, #31
 8018c92:	f200 81d1 	bhi.w	8019038 <RadioIrqProcess+0x3f4>
 8018c96:	a201      	add	r2, pc, #4	@ (adr r2, 8018c9c <RadioIrqProcess+0x58>)
 8018c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c9c:	08018d25 	.word	0x08018d25
 8018ca0:	08018d5f 	.word	0x08018d5f
 8018ca4:	08019039 	.word	0x08019039
 8018ca8:	08018f15 	.word	0x08018f15
 8018cac:	08019039 	.word	0x08019039
 8018cb0:	08019039 	.word	0x08019039
 8018cb4:	08019039 	.word	0x08019039
 8018cb8:	08018f91 	.word	0x08018f91
 8018cbc:	08019039 	.word	0x08019039
 8018cc0:	08019039 	.word	0x08019039
 8018cc4:	08019039 	.word	0x08019039
 8018cc8:	08019039 	.word	0x08019039
 8018ccc:	08019039 	.word	0x08019039
 8018cd0:	08019039 	.word	0x08019039
 8018cd4:	08019039 	.word	0x08019039
 8018cd8:	08018fad 	.word	0x08018fad
 8018cdc:	08019039 	.word	0x08019039
 8018ce0:	08019039 	.word	0x08019039
 8018ce4:	08019039 	.word	0x08019039
 8018ce8:	08019039 	.word	0x08019039
 8018cec:	08019039 	.word	0x08019039
 8018cf0:	08019039 	.word	0x08019039
 8018cf4:	08019039 	.word	0x08019039
 8018cf8:	08019039 	.word	0x08019039
 8018cfc:	08019039 	.word	0x08019039
 8018d00:	08019039 	.word	0x08019039
 8018d04:	08019039 	.word	0x08019039
 8018d08:	08019039 	.word	0x08019039
 8018d0c:	08019039 	.word	0x08019039
 8018d10:	08019039 	.word	0x08019039
 8018d14:	08019039 	.word	0x08019039
 8018d18:	08018fbb 	.word	0x08018fbb
 8018d1c:	2b40      	cmp	r3, #64	@ 0x40
 8018d1e:	f000 816d 	beq.w	8018ffc <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8018d22:	e189      	b.n	8019038 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8018d24:	4874      	ldr	r0, [pc, #464]	@ (8018ef8 <RadioIrqProcess+0x2b4>)
 8018d26:	f002 ff87 	bl	801bc38 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8018d2a:	2000      	movs	r0, #0
 8018d2c:	f000 fffa 	bl	8019d24 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8018d30:	f002 f85c 	bl	801adec <RFW_Is_LongPacketModeEnabled>
 8018d34:	4603      	mov	r3, r0
 8018d36:	2b01      	cmp	r3, #1
 8018d38:	d101      	bne.n	8018d3e <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8018d3a:	f002 f880 	bl	801ae3e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8018d3e:	4b6f      	ldr	r3, [pc, #444]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	f000 817a 	beq.w	801903c <RadioIrqProcess+0x3f8>
 8018d48:	4b6c      	ldr	r3, [pc, #432]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	f000 8174 	beq.w	801903c <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8018d54:	4b69      	ldr	r3, [pc, #420]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	4798      	blx	r3
        break;
 8018d5c:	e16e      	b.n	801903c <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8018d5e:	4868      	ldr	r0, [pc, #416]	@ (8018f00 <RadioIrqProcess+0x2bc>)
 8018d60:	f002 ff6a 	bl	801bc38 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018d64:	4b63      	ldr	r3, [pc, #396]	@ (8018ef4 <RadioIrqProcess+0x2b0>)
 8018d66:	785b      	ldrb	r3, [r3, #1]
 8018d68:	f083 0301 	eor.w	r3, r3, #1
 8018d6c:	b2db      	uxtb	r3, r3
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d014      	beq.n	8018d9c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8018d72:	2000      	movs	r0, #0
 8018d74:	f000 ffd6 	bl	8019d24 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8018d78:	2100      	movs	r1, #0
 8018d7a:	f640 1002 	movw	r0, #2306	@ 0x902
 8018d7e:	f001 fd51 	bl	801a824 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8018d82:	f640 1044 	movw	r0, #2372	@ 0x944
 8018d86:	f001 fd61 	bl	801a84c <SUBGRF_ReadRegister>
 8018d8a:	4603      	mov	r3, r0
 8018d8c:	f043 0302 	orr.w	r3, r3, #2
 8018d90:	b2db      	uxtb	r3, r3
 8018d92:	4619      	mov	r1, r3
 8018d94:	f640 1044 	movw	r0, #2372	@ 0x944
 8018d98:	f001 fd44 	bl	801a824 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8018d9c:	1dfb      	adds	r3, r7, #7
 8018d9e:	22ff      	movs	r2, #255	@ 0xff
 8018da0:	4619      	mov	r1, r3
 8018da2:	4858      	ldr	r0, [pc, #352]	@ (8018f04 <RadioIrqProcess+0x2c0>)
 8018da4:	f000 fe8e 	bl	8019ac4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018da8:	4857      	ldr	r0, [pc, #348]	@ (8018f08 <RadioIrqProcess+0x2c4>)
 8018daa:	f001 fce9 	bl	801a780 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8018dae:	4b53      	ldr	r3, [pc, #332]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	f000 8144 	beq.w	8019040 <RadioIrqProcess+0x3fc>
 8018db8:	4b50      	ldr	r3, [pc, #320]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	689b      	ldr	r3, [r3, #8]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	f000 813e 	beq.w	8019040 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8018dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8018ef4 <RadioIrqProcess+0x2b0>)
 8018dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018dca:	2b01      	cmp	r3, #1
 8018dcc:	d10e      	bne.n	8018dec <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8018dce:	4b4b      	ldr	r3, [pc, #300]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	689c      	ldr	r4, [r3, #8]
 8018dd4:	79fb      	ldrb	r3, [r7, #7]
 8018dd6:	4619      	mov	r1, r3
 8018dd8:	4b46      	ldr	r3, [pc, #280]	@ (8018ef4 <RadioIrqProcess+0x2b0>)
 8018dda:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8018dde:	461a      	mov	r2, r3
 8018de0:	4b44      	ldr	r3, [pc, #272]	@ (8018ef4 <RadioIrqProcess+0x2b0>)
 8018de2:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8018de6:	4847      	ldr	r0, [pc, #284]	@ (8018f04 <RadioIrqProcess+0x2c0>)
 8018de8:	47a0      	blx	r4
                break;
 8018dea:	e01d      	b.n	8018e28 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8018dec:	4b41      	ldr	r3, [pc, #260]	@ (8018ef4 <RadioIrqProcess+0x2b0>)
 8018dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018df0:	463a      	mov	r2, r7
 8018df2:	4611      	mov	r1, r2
 8018df4:	4618      	mov	r0, r3
 8018df6:	f001 ff47 	bl	801ac88 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8018dfa:	4b40      	ldr	r3, [pc, #256]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	689c      	ldr	r4, [r3, #8]
 8018e00:	79fb      	ldrb	r3, [r7, #7]
 8018e02:	4619      	mov	r1, r3
 8018e04:	4b3b      	ldr	r3, [pc, #236]	@ (8018ef4 <RadioIrqProcess+0x2b0>)
 8018e06:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8018e0a:	4618      	mov	r0, r3
 8018e0c:	683b      	ldr	r3, [r7, #0]
 8018e0e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8018e12:	4a3e      	ldr	r2, [pc, #248]	@ (8018f0c <RadioIrqProcess+0x2c8>)
 8018e14:	fb82 5203 	smull	r5, r2, r2, r3
 8018e18:	1192      	asrs	r2, r2, #6
 8018e1a:	17db      	asrs	r3, r3, #31
 8018e1c:	1ad3      	subs	r3, r2, r3
 8018e1e:	b25b      	sxtb	r3, r3
 8018e20:	4602      	mov	r2, r0
 8018e22:	4838      	ldr	r0, [pc, #224]	@ (8018f04 <RadioIrqProcess+0x2c0>)
 8018e24:	47a0      	blx	r4
                break;
 8018e26:	bf00      	nop
        break;
 8018e28:	e10a      	b.n	8019040 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8018e2a:	2000      	movs	r0, #0
 8018e2c:	f000 ff7a 	bl	8019d24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018e30:	4b32      	ldr	r3, [pc, #200]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	f000 8105 	beq.w	8019044 <RadioIrqProcess+0x400>
 8018e3a:	4b30      	ldr	r3, [pc, #192]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	699b      	ldr	r3, [r3, #24]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	f000 80ff 	beq.w	8019044 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8018e46:	4b2d      	ldr	r3, [pc, #180]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	699b      	ldr	r3, [r3, #24]
 8018e4c:	2000      	movs	r0, #0
 8018e4e:	4798      	blx	r3
        break;
 8018e50:	e0f8      	b.n	8019044 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8018e52:	2000      	movs	r0, #0
 8018e54:	f000 ff66 	bl	8019d24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018e58:	4b28      	ldr	r3, [pc, #160]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	f000 80f3 	beq.w	8019048 <RadioIrqProcess+0x404>
 8018e62:	4b26      	ldr	r3, [pc, #152]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	699b      	ldr	r3, [r3, #24]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	f000 80ed 	beq.w	8019048 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8018e6e:	4b23      	ldr	r3, [pc, #140]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	699b      	ldr	r3, [r3, #24]
 8018e74:	2001      	movs	r0, #1
 8018e76:	4798      	blx	r3
        break;
 8018e78:	e0e6      	b.n	8019048 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8018e7a:	4b25      	ldr	r3, [pc, #148]	@ (8018f10 <RadioIrqProcess+0x2cc>)
 8018e7c:	2201      	movs	r2, #1
 8018e7e:	2100      	movs	r1, #0
 8018e80:	2002      	movs	r0, #2
 8018e82:	f003 f8e3 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8018e86:	f000 fe03 	bl	8019a90 <SUBGRF_GetOperatingMode>
 8018e8a:	4603      	mov	r3, r0
 8018e8c:	2b04      	cmp	r3, #4
 8018e8e:	d115      	bne.n	8018ebc <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8018e90:	4819      	ldr	r0, [pc, #100]	@ (8018ef8 <RadioIrqProcess+0x2b4>)
 8018e92:	f002 fed1 	bl	801bc38 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018e96:	2000      	movs	r0, #0
 8018e98:	f000 ff44 	bl	8019d24 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018e9c:	4b17      	ldr	r3, [pc, #92]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	f000 80d3 	beq.w	801904c <RadioIrqProcess+0x408>
 8018ea6:	4b15      	ldr	r3, [pc, #84]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	685b      	ldr	r3, [r3, #4]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	f000 80cd 	beq.w	801904c <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8018eb2:	4b12      	ldr	r3, [pc, #72]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	685b      	ldr	r3, [r3, #4]
 8018eb8:	4798      	blx	r3
        break;
 8018eba:	e0c7      	b.n	801904c <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8018ebc:	f000 fde8 	bl	8019a90 <SUBGRF_GetOperatingMode>
 8018ec0:	4603      	mov	r3, r0
 8018ec2:	2b05      	cmp	r3, #5
 8018ec4:	f040 80c2 	bne.w	801904c <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8018ec8:	480d      	ldr	r0, [pc, #52]	@ (8018f00 <RadioIrqProcess+0x2bc>)
 8018eca:	f002 feb5 	bl	801bc38 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018ece:	2000      	movs	r0, #0
 8018ed0:	f000 ff28 	bl	8019d24 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018ed4:	4b09      	ldr	r3, [pc, #36]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	f000 80b7 	beq.w	801904c <RadioIrqProcess+0x408>
 8018ede:	4b07      	ldr	r3, [pc, #28]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	68db      	ldr	r3, [r3, #12]
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	f000 80b1 	beq.w	801904c <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8018eea:	4b04      	ldr	r3, [pc, #16]	@ (8018efc <RadioIrqProcess+0x2b8>)
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	68db      	ldr	r3, [r3, #12]
 8018ef0:	4798      	blx	r3
        break;
 8018ef2:	e0ab      	b.n	801904c <RadioIrqProcess+0x408>
 8018ef4:	20001d3c 	.word	0x20001d3c
 8018ef8:	20001d98 	.word	0x20001d98
 8018efc:	20001d38 	.word	0x20001d38
 8018f00:	20001db0 	.word	0x20001db0
 8018f04:	20001c38 	.word	0x20001c38
 8018f08:	20001d60 	.word	0x20001d60
 8018f0c:	10624dd3 	.word	0x10624dd3
 8018f10:	0801f91c 	.word	0x0801f91c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8018f14:	4b54      	ldr	r3, [pc, #336]	@ (8019068 <RadioIrqProcess+0x424>)
 8018f16:	2201      	movs	r2, #1
 8018f18:	2100      	movs	r1, #0
 8018f1a:	2002      	movs	r0, #2
 8018f1c:	f003 f896 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8018f20:	4b52      	ldr	r3, [pc, #328]	@ (801906c <RadioIrqProcess+0x428>)
 8018f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	f000 8093 	beq.w	8019050 <RadioIrqProcess+0x40c>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8018f2a:	4a51      	ldr	r2, [pc, #324]	@ (8019070 <RadioIrqProcess+0x42c>)
 8018f2c:	4b4f      	ldr	r3, [pc, #316]	@ (801906c <RadioIrqProcess+0x428>)
 8018f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018f30:	0c1b      	lsrs	r3, r3, #16
 8018f32:	b2db      	uxtb	r3, r3
 8018f34:	4619      	mov	r1, r3
 8018f36:	f640 1003 	movw	r0, #2307	@ 0x903
 8018f3a:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8018f3c:	4a4c      	ldr	r2, [pc, #304]	@ (8019070 <RadioIrqProcess+0x42c>)
 8018f3e:	4b4b      	ldr	r3, [pc, #300]	@ (801906c <RadioIrqProcess+0x428>)
 8018f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018f42:	0a1b      	lsrs	r3, r3, #8
 8018f44:	b2db      	uxtb	r3, r3
 8018f46:	4619      	mov	r1, r3
 8018f48:	f640 1004 	movw	r0, #2308	@ 0x904
 8018f4c:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8018f4e:	4a48      	ldr	r2, [pc, #288]	@ (8019070 <RadioIrqProcess+0x42c>)
 8018f50:	4b46      	ldr	r3, [pc, #280]	@ (801906c <RadioIrqProcess+0x428>)
 8018f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018f54:	b2db      	uxtb	r3, r3
 8018f56:	4619      	mov	r1, r3
 8018f58:	f640 1005 	movw	r0, #2309	@ 0x905
 8018f5c:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8018f5e:	4c44      	ldr	r4, [pc, #272]	@ (8019070 <RadioIrqProcess+0x42c>)
 8018f60:	4b44      	ldr	r3, [pc, #272]	@ (8019074 <RadioIrqProcess+0x430>)
 8018f62:	f640 1002 	movw	r0, #2306	@ 0x902
 8018f66:	4798      	blx	r3
 8018f68:	4603      	mov	r3, r0
 8018f6a:	f043 0301 	orr.w	r3, r3, #1
 8018f6e:	b2db      	uxtb	r3, r3
 8018f70:	4619      	mov	r1, r3
 8018f72:	f640 1002 	movw	r0, #2306	@ 0x902
 8018f76:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8018f78:	4b3c      	ldr	r3, [pc, #240]	@ (801906c <RadioIrqProcess+0x428>)
 8018f7a:	2200      	movs	r2, #0
 8018f7c:	659a      	str	r2, [r3, #88]	@ 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018f7e:	2300      	movs	r3, #0
 8018f80:	2200      	movs	r2, #0
 8018f82:	f240 2162 	movw	r1, #610	@ 0x262
 8018f86:	f240 2062 	movw	r0, #610	@ 0x262
 8018f8a:	f001 f89b 	bl	801a0c4 <SUBGRF_SetDioIrqParams>
        break;
 8018f8e:	e05f      	b.n	8019050 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018f90:	4b39      	ldr	r3, [pc, #228]	@ (8019078 <RadioIrqProcess+0x434>)
 8018f92:	2201      	movs	r2, #1
 8018f94:	2100      	movs	r1, #0
 8018f96:	2002      	movs	r0, #2
 8018f98:	f003 f858 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8018f9c:	f001 ff1f 	bl	801adde <RFW_Is_Init>
 8018fa0:	4603      	mov	r3, r0
 8018fa2:	2b01      	cmp	r3, #1
 8018fa4:	d156      	bne.n	8019054 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8018fa6:	f001 ff50 	bl	801ae4a <RFW_ReceivePayload>
        break;
 8018faa:	e053      	b.n	8019054 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8018fac:	4b33      	ldr	r3, [pc, #204]	@ (801907c <RadioIrqProcess+0x438>)
 8018fae:	2201      	movs	r2, #1
 8018fb0:	2100      	movs	r1, #0
 8018fb2:	2002      	movs	r0, #2
 8018fb4:	f003 f84a 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018fb8:	e051      	b.n	801905e <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8018fba:	4831      	ldr	r0, [pc, #196]	@ (8019080 <RadioIrqProcess+0x43c>)
 8018fbc:	f002 fe3c 	bl	801bc38 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018fc0:	4b2a      	ldr	r3, [pc, #168]	@ (801906c <RadioIrqProcess+0x428>)
 8018fc2:	785b      	ldrb	r3, [r3, #1]
 8018fc4:	f083 0301 	eor.w	r3, r3, #1
 8018fc8:	b2db      	uxtb	r3, r3
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d002      	beq.n	8018fd4 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8018fce:	2000      	movs	r0, #0
 8018fd0:	f000 fea8 	bl	8019d24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8019084 <RadioIrqProcess+0x440>)
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d03d      	beq.n	8019058 <RadioIrqProcess+0x414>
 8018fdc:	4b29      	ldr	r3, [pc, #164]	@ (8019084 <RadioIrqProcess+0x440>)
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	68db      	ldr	r3, [r3, #12]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d038      	beq.n	8019058 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8018fe6:	4b27      	ldr	r3, [pc, #156]	@ (8019084 <RadioIrqProcess+0x440>)
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	68db      	ldr	r3, [r3, #12]
 8018fec:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8018fee:	4b26      	ldr	r3, [pc, #152]	@ (8019088 <RadioIrqProcess+0x444>)
 8018ff0:	2201      	movs	r2, #1
 8018ff2:	2100      	movs	r1, #0
 8018ff4:	2002      	movs	r0, #2
 8018ff6:	f003 f829 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018ffa:	e02d      	b.n	8019058 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8018ffc:	4b23      	ldr	r3, [pc, #140]	@ (801908c <RadioIrqProcess+0x448>)
 8018ffe:	2201      	movs	r2, #1
 8019000:	2100      	movs	r1, #0
 8019002:	2002      	movs	r0, #2
 8019004:	f003 f822 	bl	801c04c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8019008:	4b18      	ldr	r3, [pc, #96]	@ (801906c <RadioIrqProcess+0x428>)
 801900a:	785b      	ldrb	r3, [r3, #1]
 801900c:	f083 0301 	eor.w	r3, r3, #1
 8019010:	b2db      	uxtb	r3, r3
 8019012:	2b00      	cmp	r3, #0
 8019014:	d002      	beq.n	801901c <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8019016:	2000      	movs	r0, #0
 8019018:	f000 fe84 	bl	8019d24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801901c:	4b19      	ldr	r3, [pc, #100]	@ (8019084 <RadioIrqProcess+0x440>)
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	2b00      	cmp	r3, #0
 8019022:	d01b      	beq.n	801905c <RadioIrqProcess+0x418>
 8019024:	4b17      	ldr	r3, [pc, #92]	@ (8019084 <RadioIrqProcess+0x440>)
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	691b      	ldr	r3, [r3, #16]
 801902a:	2b00      	cmp	r3, #0
 801902c:	d016      	beq.n	801905c <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801902e:	4b15      	ldr	r3, [pc, #84]	@ (8019084 <RadioIrqProcess+0x440>)
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	691b      	ldr	r3, [r3, #16]
 8019034:	4798      	blx	r3
        break;
 8019036:	e011      	b.n	801905c <RadioIrqProcess+0x418>
        break;
 8019038:	bf00      	nop
 801903a:	e010      	b.n	801905e <RadioIrqProcess+0x41a>
        break;
 801903c:	bf00      	nop
 801903e:	e00e      	b.n	801905e <RadioIrqProcess+0x41a>
        break;
 8019040:	bf00      	nop
 8019042:	e00c      	b.n	801905e <RadioIrqProcess+0x41a>
        break;
 8019044:	bf00      	nop
 8019046:	e00a      	b.n	801905e <RadioIrqProcess+0x41a>
        break;
 8019048:	bf00      	nop
 801904a:	e008      	b.n	801905e <RadioIrqProcess+0x41a>
        break;
 801904c:	bf00      	nop
 801904e:	e006      	b.n	801905e <RadioIrqProcess+0x41a>
        break;
 8019050:	bf00      	nop
 8019052:	e004      	b.n	801905e <RadioIrqProcess+0x41a>
        break;
 8019054:	bf00      	nop
 8019056:	e002      	b.n	801905e <RadioIrqProcess+0x41a>
        break;
 8019058:	bf00      	nop
 801905a:	e000      	b.n	801905e <RadioIrqProcess+0x41a>
        break;
 801905c:	bf00      	nop
    }
}
 801905e:	bf00      	nop
 8019060:	3708      	adds	r7, #8
 8019062:	46bd      	mov	sp, r7
 8019064:	bdb0      	pop	{r4, r5, r7, pc}
 8019066:	bf00      	nop
 8019068:	0801f930 	.word	0x0801f930
 801906c:	20001d3c 	.word	0x20001d3c
 8019070:	08018a55 	.word	0x08018a55
 8019074:	08018a79 	.word	0x08018a79
 8019078:	0801f93c 	.word	0x0801f93c
 801907c:	0801f948 	.word	0x0801f948
 8019080:	20001db0 	.word	0x20001db0
 8019084:	20001d38 	.word	0x20001d38
 8019088:	0801f954 	.word	0x0801f954
 801908c:	0801f960 	.word	0x0801f960

08019090 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8019090:	b580      	push	{r7, lr}
 8019092:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019094:	4b09      	ldr	r3, [pc, #36]	@ (80190bc <RadioTxPrbs+0x2c>)
 8019096:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801909a:	2101      	movs	r1, #1
 801909c:	4618      	mov	r0, r3
 801909e:	f001 fcb5 	bl	801aa0c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80190a2:	4b07      	ldr	r3, [pc, #28]	@ (80190c0 <RadioTxPrbs+0x30>)
 80190a4:	212d      	movs	r1, #45	@ 0x2d
 80190a6:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80190aa:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80190ac:	f000 fefd 	bl	8019eaa <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80190b0:	4804      	ldr	r0, [pc, #16]	@ (80190c4 <RadioTxPrbs+0x34>)
 80190b2:	f000 fe53 	bl	8019d5c <SUBGRF_SetTx>
}
 80190b6:	bf00      	nop
 80190b8:	bd80      	pop	{r7, pc}
 80190ba:	bf00      	nop
 80190bc:	20001d3c 	.word	0x20001d3c
 80190c0:	08018a55 	.word	0x08018a55
 80190c4:	000fffff 	.word	0x000fffff

080190c8 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b084      	sub	sp, #16
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	4603      	mov	r3, r0
 80190d0:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80190d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190d6:	4618      	mov	r0, r3
 80190d8:	f001 fcc0 	bl	801aa5c <SUBGRF_SetRfTxPower>
 80190dc:	4603      	mov	r3, r0
 80190de:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80190e0:	7bfb      	ldrb	r3, [r7, #15]
 80190e2:	2101      	movs	r1, #1
 80190e4:	4618      	mov	r0, r3
 80190e6:	f001 fc91 	bl	801aa0c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80190ea:	f000 fed5 	bl	8019e98 <SUBGRF_SetTxContinuousWave>
}
 80190ee:	bf00      	nop
 80190f0:	3710      	adds	r7, #16
 80190f2:	46bd      	mov	sp, r7
 80190f4:	bd80      	pop	{r7, pc}

080190f6 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80190f6:	b480      	push	{r7}
 80190f8:	b089      	sub	sp, #36	@ 0x24
 80190fa:	af00      	add	r7, sp, #0
 80190fc:	60f8      	str	r0, [r7, #12]
 80190fe:	60b9      	str	r1, [r7, #8]
 8019100:	4613      	mov	r3, r2
 8019102:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8019104:	2300      	movs	r3, #0
 8019106:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8019108:	2300      	movs	r3, #0
 801910a:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801910c:	2300      	movs	r3, #0
 801910e:	61bb      	str	r3, [r7, #24]
 8019110:	e011      	b.n	8019136 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8019112:	69bb      	ldr	r3, [r7, #24]
 8019114:	68ba      	ldr	r2, [r7, #8]
 8019116:	4413      	add	r3, r2
 8019118:	781a      	ldrb	r2, [r3, #0]
 801911a:	69bb      	ldr	r3, [r7, #24]
 801911c:	68b9      	ldr	r1, [r7, #8]
 801911e:	440b      	add	r3, r1
 8019120:	43d2      	mvns	r2, r2
 8019122:	b2d2      	uxtb	r2, r2
 8019124:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8019126:	69bb      	ldr	r3, [r7, #24]
 8019128:	68fa      	ldr	r2, [r7, #12]
 801912a:	4413      	add	r3, r2
 801912c:	2200      	movs	r2, #0
 801912e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8019130:	69bb      	ldr	r3, [r7, #24]
 8019132:	3301      	adds	r3, #1
 8019134:	61bb      	str	r3, [r7, #24]
 8019136:	79fb      	ldrb	r3, [r7, #7]
 8019138:	69ba      	ldr	r2, [r7, #24]
 801913a:	429a      	cmp	r2, r3
 801913c:	dbe9      	blt.n	8019112 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801913e:	2300      	movs	r3, #0
 8019140:	61bb      	str	r3, [r7, #24]
 8019142:	e049      	b.n	80191d8 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8019144:	69bb      	ldr	r3, [r7, #24]
 8019146:	425a      	negs	r2, r3
 8019148:	f003 0307 	and.w	r3, r3, #7
 801914c:	f002 0207 	and.w	r2, r2, #7
 8019150:	bf58      	it	pl
 8019152:	4253      	negpl	r3, r2
 8019154:	b2db      	uxtb	r3, r3
 8019156:	f1c3 0307 	rsb	r3, r3, #7
 801915a:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801915c:	69bb      	ldr	r3, [r7, #24]
 801915e:	2b00      	cmp	r3, #0
 8019160:	da00      	bge.n	8019164 <payload_integration+0x6e>
 8019162:	3307      	adds	r3, #7
 8019164:	10db      	asrs	r3, r3, #3
 8019166:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8019168:	69bb      	ldr	r3, [r7, #24]
 801916a:	3301      	adds	r3, #1
 801916c:	425a      	negs	r2, r3
 801916e:	f003 0307 	and.w	r3, r3, #7
 8019172:	f002 0207 	and.w	r2, r2, #7
 8019176:	bf58      	it	pl
 8019178:	4253      	negpl	r3, r2
 801917a:	b2db      	uxtb	r3, r3
 801917c:	f1c3 0307 	rsb	r3, r3, #7
 8019180:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8019182:	69bb      	ldr	r3, [r7, #24]
 8019184:	3301      	adds	r3, #1
 8019186:	2b00      	cmp	r3, #0
 8019188:	da00      	bge.n	801918c <payload_integration+0x96>
 801918a:	3307      	adds	r3, #7
 801918c:	10db      	asrs	r3, r3, #3
 801918e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8019190:	7dbb      	ldrb	r3, [r7, #22]
 8019192:	68ba      	ldr	r2, [r7, #8]
 8019194:	4413      	add	r3, r2
 8019196:	781b      	ldrb	r3, [r3, #0]
 8019198:	461a      	mov	r2, r3
 801919a:	7dfb      	ldrb	r3, [r7, #23]
 801919c:	fa42 f303 	asr.w	r3, r2, r3
 80191a0:	b2db      	uxtb	r3, r3
 80191a2:	f003 0301 	and.w	r3, r3, #1
 80191a6:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80191a8:	7ffa      	ldrb	r2, [r7, #31]
 80191aa:	7cfb      	ldrb	r3, [r7, #19]
 80191ac:	4053      	eors	r3, r2
 80191ae:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80191b0:	7d3b      	ldrb	r3, [r7, #20]
 80191b2:	68fa      	ldr	r2, [r7, #12]
 80191b4:	4413      	add	r3, r2
 80191b6:	781b      	ldrb	r3, [r3, #0]
 80191b8:	b25a      	sxtb	r2, r3
 80191ba:	7ff9      	ldrb	r1, [r7, #31]
 80191bc:	7d7b      	ldrb	r3, [r7, #21]
 80191be:	fa01 f303 	lsl.w	r3, r1, r3
 80191c2:	b25b      	sxtb	r3, r3
 80191c4:	4313      	orrs	r3, r2
 80191c6:	b259      	sxtb	r1, r3
 80191c8:	7d3b      	ldrb	r3, [r7, #20]
 80191ca:	68fa      	ldr	r2, [r7, #12]
 80191cc:	4413      	add	r3, r2
 80191ce:	b2ca      	uxtb	r2, r1
 80191d0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 80191d2:	69bb      	ldr	r3, [r7, #24]
 80191d4:	3301      	adds	r3, #1
 80191d6:	61bb      	str	r3, [r7, #24]
 80191d8:	79fb      	ldrb	r3, [r7, #7]
 80191da:	00db      	lsls	r3, r3, #3
 80191dc:	69ba      	ldr	r2, [r7, #24]
 80191de:	429a      	cmp	r2, r3
 80191e0:	dbb0      	blt.n	8019144 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80191e2:	7ffb      	ldrb	r3, [r7, #31]
 80191e4:	01db      	lsls	r3, r3, #7
 80191e6:	b25a      	sxtb	r2, r3
 80191e8:	7ffb      	ldrb	r3, [r7, #31]
 80191ea:	019b      	lsls	r3, r3, #6
 80191ec:	b25b      	sxtb	r3, r3
 80191ee:	4313      	orrs	r3, r2
 80191f0:	b25b      	sxtb	r3, r3
 80191f2:	7ffa      	ldrb	r2, [r7, #31]
 80191f4:	2a00      	cmp	r2, #0
 80191f6:	d101      	bne.n	80191fc <payload_integration+0x106>
 80191f8:	2220      	movs	r2, #32
 80191fa:	e000      	b.n	80191fe <payload_integration+0x108>
 80191fc:	2200      	movs	r2, #0
 80191fe:	4313      	orrs	r3, r2
 8019200:	b259      	sxtb	r1, r3
 8019202:	79fb      	ldrb	r3, [r7, #7]
 8019204:	68fa      	ldr	r2, [r7, #12]
 8019206:	4413      	add	r3, r2
 8019208:	b2ca      	uxtb	r2, r1
 801920a:	701a      	strb	r2, [r3, #0]
}
 801920c:	bf00      	nop
 801920e:	3724      	adds	r7, #36	@ 0x24
 8019210:	46bd      	mov	sp, r7
 8019212:	bc80      	pop	{r7}
 8019214:	4770      	bx	lr
	...

08019218 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b08c      	sub	sp, #48	@ 0x30
 801921c:	af00      	add	r7, sp, #0
 801921e:	60b9      	str	r1, [r7, #8]
 8019220:	607a      	str	r2, [r7, #4]
 8019222:	603b      	str	r3, [r7, #0]
 8019224:	4603      	mov	r3, r0
 8019226:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8019228:	2300      	movs	r3, #0
 801922a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 801922c:	2300      	movs	r3, #0
 801922e:	623b      	str	r3, [r7, #32]
 8019230:	2300      	movs	r3, #0
 8019232:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019234:	f001 fdcd 	bl	801add2 <RFW_DeInit>

    if( rxContinuous != 0 )
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	2b00      	cmp	r3, #0
 801923c:	d001      	beq.n	8019242 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801923e:	2300      	movs	r3, #0
 8019240:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	2b00      	cmp	r3, #0
 8019246:	bf14      	ite	ne
 8019248:	2301      	movne	r3, #1
 801924a:	2300      	moveq	r3, #0
 801924c:	b2da      	uxtb	r2, r3
 801924e:	4ba3      	ldr	r3, [pc, #652]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 8019250:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8019252:	7bfb      	ldrb	r3, [r7, #15]
 8019254:	2b00      	cmp	r3, #0
 8019256:	d003      	beq.n	8019260 <RadioSetRxGenericConfig+0x48>
 8019258:	2b01      	cmp	r3, #1
 801925a:	f000 80dc 	beq.w	8019416 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801925e:	e194      	b.n	801958a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8019260:	68bb      	ldr	r3, [r7, #8]
 8019262:	689b      	ldr	r3, [r3, #8]
 8019264:	2b00      	cmp	r3, #0
 8019266:	d003      	beq.n	8019270 <RadioSetRxGenericConfig+0x58>
 8019268:	68bb      	ldr	r3, [r7, #8]
 801926a:	68db      	ldr	r3, [r3, #12]
 801926c:	2b00      	cmp	r3, #0
 801926e:	d102      	bne.n	8019276 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8019270:	f04f 33ff 	mov.w	r3, #4294967295
 8019274:	e18a      	b.n	801958c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8019276:	68bb      	ldr	r3, [r7, #8]
 8019278:	7f9b      	ldrb	r3, [r3, #30]
 801927a:	2b08      	cmp	r3, #8
 801927c:	d902      	bls.n	8019284 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801927e:	f04f 33ff 	mov.w	r3, #4294967295
 8019282:	e183      	b.n	801958c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8019284:	68bb      	ldr	r3, [r7, #8]
 8019286:	6919      	ldr	r1, [r3, #16]
 8019288:	68bb      	ldr	r3, [r7, #8]
 801928a:	7f9b      	ldrb	r3, [r3, #30]
 801928c:	461a      	mov	r2, r3
 801928e:	f107 0320 	add.w	r3, r7, #32
 8019292:	4618      	mov	r0, r3
 8019294:	f001 fe90 	bl	801afb8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019298:	68bb      	ldr	r3, [r7, #8]
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	2b00      	cmp	r3, #0
 801929e:	bf14      	ite	ne
 80192a0:	2301      	movne	r3, #1
 80192a2:	2300      	moveq	r3, #0
 80192a4:	b2db      	uxtb	r3, r3
 80192a6:	4618      	mov	r0, r3
 80192a8:	f000 fe08 	bl	8019ebc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80192ac:	4b8b      	ldr	r3, [pc, #556]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80192ae:	2200      	movs	r2, #0
 80192b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80192b4:	68bb      	ldr	r3, [r7, #8]
 80192b6:	689b      	ldr	r3, [r3, #8]
 80192b8:	4a88      	ldr	r2, [pc, #544]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80192ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 80192bc:	68bb      	ldr	r3, [r7, #8]
 80192be:	f893 2020 	ldrb.w	r2, [r3, #32]
 80192c2:	4b86      	ldr	r3, [pc, #536]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80192c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80192c8:	68bb      	ldr	r3, [r7, #8]
 80192ca:	685b      	ldr	r3, [r3, #4]
 80192cc:	4618      	mov	r0, r3
 80192ce:	f001 fcb3 	bl	801ac38 <SUBGRF_GetFskBandwidthRegValue>
 80192d2:	4603      	mov	r3, r0
 80192d4:	461a      	mov	r2, r3
 80192d6:	4b81      	ldr	r3, [pc, #516]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80192d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80192dc:	4b7f      	ldr	r3, [pc, #508]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80192de:	2200      	movs	r2, #0
 80192e0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80192e2:	68bb      	ldr	r3, [r7, #8]
 80192e4:	68db      	ldr	r3, [r3, #12]
 80192e6:	b29b      	uxth	r3, r3
 80192e8:	00db      	lsls	r3, r3, #3
 80192ea:	b29a      	uxth	r2, r3
 80192ec:	4b7b      	ldr	r3, [pc, #492]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80192ee:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80192f0:	68bb      	ldr	r3, [r7, #8]
 80192f2:	7fda      	ldrb	r2, [r3, #31]
 80192f4:	4b79      	ldr	r3, [pc, #484]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80192f6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80192f8:	68bb      	ldr	r3, [r7, #8]
 80192fa:	7f9b      	ldrb	r3, [r3, #30]
 80192fc:	00db      	lsls	r3, r3, #3
 80192fe:	b2da      	uxtb	r2, r3
 8019300:	4b76      	ldr	r3, [pc, #472]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 8019302:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8019304:	68bb      	ldr	r3, [r7, #8]
 8019306:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 801930a:	4b74      	ldr	r3, [pc, #464]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 801930c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801930e:	68bb      	ldr	r3, [r7, #8]
 8019310:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8019314:	2b00      	cmp	r3, #0
 8019316:	d105      	bne.n	8019324 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8019318:	68bb      	ldr	r3, [r7, #8]
 801931a:	695b      	ldr	r3, [r3, #20]
 801931c:	b2da      	uxtb	r2, r3
 801931e:	4b6f      	ldr	r3, [pc, #444]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 8019320:	759a      	strb	r2, [r3, #22]
 8019322:	e00b      	b.n	801933c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8019324:	68bb      	ldr	r3, [r7, #8]
 8019326:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801932a:	2b02      	cmp	r3, #2
 801932c:	d103      	bne.n	8019336 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801932e:	4b6b      	ldr	r3, [pc, #428]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 8019330:	22ff      	movs	r2, #255	@ 0xff
 8019332:	759a      	strb	r2, [r3, #22]
 8019334:	e002      	b.n	801933c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019336:	4b69      	ldr	r3, [pc, #420]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 8019338:	22ff      	movs	r2, #255	@ 0xff
 801933a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801933c:	68bb      	ldr	r3, [r7, #8]
 801933e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8019342:	2b02      	cmp	r3, #2
 8019344:	d004      	beq.n	8019350 <RadioSetRxGenericConfig+0x138>
 8019346:	68bb      	ldr	r3, [r7, #8]
 8019348:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801934c:	2b02      	cmp	r3, #2
 801934e:	d12d      	bne.n	80193ac <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019350:	68bb      	ldr	r3, [r7, #8]
 8019352:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019356:	2bf1      	cmp	r3, #241	@ 0xf1
 8019358:	d00c      	beq.n	8019374 <RadioSetRxGenericConfig+0x15c>
 801935a:	68bb      	ldr	r3, [r7, #8]
 801935c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019360:	2bf2      	cmp	r3, #242	@ 0xf2
 8019362:	d007      	beq.n	8019374 <RadioSetRxGenericConfig+0x15c>
 8019364:	68bb      	ldr	r3, [r7, #8]
 8019366:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801936a:	2b01      	cmp	r3, #1
 801936c:	d002      	beq.n	8019374 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801936e:	f04f 33ff 	mov.w	r3, #4294967295
 8019372:	e10b      	b.n	801958c <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8019374:	2300      	movs	r3, #0
 8019376:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8019378:	68bb      	ldr	r3, [r7, #8]
 801937a:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801937c:	4b58      	ldr	r3, [pc, #352]	@ (80194e0 <RadioSetRxGenericConfig+0x2c8>)
 801937e:	6819      	ldr	r1, [r3, #0]
 8019380:	f107 0314 	add.w	r3, r7, #20
 8019384:	4a57      	ldr	r2, [pc, #348]	@ (80194e4 <RadioSetRxGenericConfig+0x2cc>)
 8019386:	4618      	mov	r0, r3
 8019388:	f001 fd16 	bl	801adb8 <RFW_Init>
 801938c:	4603      	mov	r3, r0
 801938e:	2b00      	cmp	r3, #0
 8019390:	d002      	beq.n	8019398 <RadioSetRxGenericConfig+0x180>
            return -1;
 8019392:	f04f 33ff 	mov.w	r3, #4294967295
 8019396:	e0f9      	b.n	801958c <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019398:	4b50      	ldr	r3, [pc, #320]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 801939a:	2200      	movs	r2, #0
 801939c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801939e:	4b4f      	ldr	r3, [pc, #316]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80193a0:	2201      	movs	r2, #1
 80193a2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80193a4:	4b4d      	ldr	r3, [pc, #308]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80193a6:	2200      	movs	r2, #0
 80193a8:	755a      	strb	r2, [r3, #21]
        {
 80193aa:	e00e      	b.n	80193ca <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80193ac:	68bb      	ldr	r3, [r7, #8]
 80193ae:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80193b2:	4b4a      	ldr	r3, [pc, #296]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80193b4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80193b6:	68bb      	ldr	r3, [r7, #8]
 80193b8:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80193bc:	4b47      	ldr	r3, [pc, #284]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80193be:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80193c0:	68bb      	ldr	r3, [r7, #8]
 80193c2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80193c6:	4b45      	ldr	r3, [pc, #276]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80193c8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80193ca:	f7ff fa48 	bl	801885e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80193ce:	2000      	movs	r0, #0
 80193d0:	f7fe fbf2 	bl	8017bb8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80193d4:	4844      	ldr	r0, [pc, #272]	@ (80194e8 <RadioSetRxGenericConfig+0x2d0>)
 80193d6:	f001 f80b 	bl	801a3f0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80193da:	4844      	ldr	r0, [pc, #272]	@ (80194ec <RadioSetRxGenericConfig+0x2d4>)
 80193dc:	f001 f8da 	bl	801a594 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80193e0:	f107 0320 	add.w	r3, r7, #32
 80193e4:	4618      	mov	r0, r3
 80193e6:	f000 fba2 	bl	8019b2e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80193ea:	68bb      	ldr	r3, [r7, #8]
 80193ec:	8b9b      	ldrh	r3, [r3, #28]
 80193ee:	4618      	mov	r0, r3
 80193f0:	f000 fbec 	bl	8019bcc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80193f4:	68bb      	ldr	r3, [r7, #8]
 80193f6:	8b1b      	ldrh	r3, [r3, #24]
 80193f8:	4618      	mov	r0, r3
 80193fa:	f000 fbc7 	bl	8019b8c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80193fe:	683b      	ldr	r3, [r7, #0]
 8019400:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8019404:	fb03 f202 	mul.w	r2, r3, r2
 8019408:	68bb      	ldr	r3, [r7, #8]
 801940a:	689b      	ldr	r3, [r3, #8]
 801940c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019410:	4a32      	ldr	r2, [pc, #200]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 8019412:	6093      	str	r3, [r2, #8]
        break;
 8019414:	e0b9      	b.n	801958a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8019416:	68bb      	ldr	r3, [r7, #8]
 8019418:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801941a:	2b00      	cmp	r3, #0
 801941c:	d102      	bne.n	8019424 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801941e:	f04f 33ff 	mov.w	r3, #4294967295
 8019422:	e0b3      	b.n	801958c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8019424:	68bb      	ldr	r3, [r7, #8]
 8019426:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801942a:	2b01      	cmp	r3, #1
 801942c:	d104      	bne.n	8019438 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801942e:	68bb      	ldr	r3, [r7, #8]
 8019430:	695b      	ldr	r3, [r3, #20]
 8019432:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8019436:	e002      	b.n	801943e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8019438:	23ff      	movs	r3, #255	@ 0xff
 801943a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801943e:	68bb      	ldr	r3, [r7, #8]
 8019440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019442:	2b00      	cmp	r3, #0
 8019444:	bf14      	ite	ne
 8019446:	2301      	movne	r3, #1
 8019448:	2300      	moveq	r3, #0
 801944a:	b2db      	uxtb	r3, r3
 801944c:	4618      	mov	r0, r3
 801944e:	f000 fd35 	bl	8019ebc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019452:	683b      	ldr	r3, [r7, #0]
 8019454:	b2db      	uxtb	r3, r3
 8019456:	4618      	mov	r0, r3
 8019458:	f000 fd3f 	bl	8019eda <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801945c:	4b1f      	ldr	r3, [pc, #124]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 801945e:	2201      	movs	r2, #1
 8019460:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019464:	68bb      	ldr	r3, [r7, #8]
 8019466:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801946a:	4b1c      	ldr	r3, [pc, #112]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 801946c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8019470:	68bb      	ldr	r3, [r7, #8]
 8019472:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8019476:	4b19      	ldr	r3, [pc, #100]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 8019478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801947c:	68bb      	ldr	r3, [r7, #8]
 801947e:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8019482:	4b16      	ldr	r3, [pc, #88]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 8019484:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8019488:	68bb      	ldr	r3, [r7, #8]
 801948a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801948e:	2b02      	cmp	r3, #2
 8019490:	d010      	beq.n	80194b4 <RadioSetRxGenericConfig+0x29c>
 8019492:	2b02      	cmp	r3, #2
 8019494:	dc2c      	bgt.n	80194f0 <RadioSetRxGenericConfig+0x2d8>
 8019496:	2b00      	cmp	r3, #0
 8019498:	d002      	beq.n	80194a0 <RadioSetRxGenericConfig+0x288>
 801949a:	2b01      	cmp	r3, #1
 801949c:	d005      	beq.n	80194aa <RadioSetRxGenericConfig+0x292>
            break;
 801949e:	e027      	b.n	80194f0 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80194a0:	4b0e      	ldr	r3, [pc, #56]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80194a2:	2200      	movs	r2, #0
 80194a4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80194a8:	e023      	b.n	80194f2 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80194aa:	4b0c      	ldr	r3, [pc, #48]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80194ac:	2201      	movs	r2, #1
 80194ae:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80194b2:	e01e      	b.n	80194f2 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80194b4:	68bb      	ldr	r3, [r7, #8]
 80194b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80194ba:	2b0b      	cmp	r3, #11
 80194bc:	d004      	beq.n	80194c8 <RadioSetRxGenericConfig+0x2b0>
 80194be:	68bb      	ldr	r3, [r7, #8]
 80194c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80194c4:	2b0c      	cmp	r3, #12
 80194c6:	d104      	bne.n	80194d2 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80194c8:	4b04      	ldr	r3, [pc, #16]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80194ca:	2201      	movs	r2, #1
 80194cc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80194d0:	e00f      	b.n	80194f2 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80194d2:	4b02      	ldr	r3, [pc, #8]	@ (80194dc <RadioSetRxGenericConfig+0x2c4>)
 80194d4:	2200      	movs	r2, #0
 80194d6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80194da:	e00a      	b.n	80194f2 <RadioSetRxGenericConfig+0x2da>
 80194dc:	20001d3c 	.word	0x20001d3c
 80194e0:	20001d38 	.word	0x20001d38
 80194e4:	20001db0 	.word	0x20001db0
 80194e8:	20001d74 	.word	0x20001d74
 80194ec:	20001d4a 	.word	0x20001d4a
            break;
 80194f0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80194f2:	4b28      	ldr	r3, [pc, #160]	@ (8019594 <RadioSetRxGenericConfig+0x37c>)
 80194f4:	2201      	movs	r2, #1
 80194f6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80194f8:	68bb      	ldr	r3, [r7, #8]
 80194fa:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80194fc:	4b25      	ldr	r3, [pc, #148]	@ (8019594 <RadioSetRxGenericConfig+0x37c>)
 80194fe:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8019500:	68bb      	ldr	r3, [r7, #8]
 8019502:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8019506:	4b23      	ldr	r3, [pc, #140]	@ (8019594 <RadioSetRxGenericConfig+0x37c>)
 8019508:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801950a:	4a22      	ldr	r2, [pc, #136]	@ (8019594 <RadioSetRxGenericConfig+0x37c>)
 801950c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8019510:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019512:	68bb      	ldr	r3, [r7, #8]
 8019514:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8019518:	4b1e      	ldr	r3, [pc, #120]	@ (8019594 <RadioSetRxGenericConfig+0x37c>)
 801951a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801951e:	68bb      	ldr	r3, [r7, #8]
 8019520:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8019524:	4b1b      	ldr	r3, [pc, #108]	@ (8019594 <RadioSetRxGenericConfig+0x37c>)
 8019526:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 801952a:	f7ff f998 	bl	801885e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801952e:	2001      	movs	r0, #1
 8019530:	f7fe fb42 	bl	8017bb8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019534:	4818      	ldr	r0, [pc, #96]	@ (8019598 <RadioSetRxGenericConfig+0x380>)
 8019536:	f000 ff5b 	bl	801a3f0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801953a:	4818      	ldr	r0, [pc, #96]	@ (801959c <RadioSetRxGenericConfig+0x384>)
 801953c:	f001 f82a 	bl	801a594 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019540:	4b14      	ldr	r3, [pc, #80]	@ (8019594 <RadioSetRxGenericConfig+0x37c>)
 8019542:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8019546:	2b01      	cmp	r3, #1
 8019548:	d10d      	bne.n	8019566 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801954a:	f240 7036 	movw	r0, #1846	@ 0x736
 801954e:	f001 f97d 	bl	801a84c <SUBGRF_ReadRegister>
 8019552:	4603      	mov	r3, r0
 8019554:	f023 0304 	bic.w	r3, r3, #4
 8019558:	b2db      	uxtb	r3, r3
 801955a:	4619      	mov	r1, r3
 801955c:	f240 7036 	movw	r0, #1846	@ 0x736
 8019560:	f001 f960 	bl	801a824 <SUBGRF_WriteRegister>
 8019564:	e00c      	b.n	8019580 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019566:	f240 7036 	movw	r0, #1846	@ 0x736
 801956a:	f001 f96f 	bl	801a84c <SUBGRF_ReadRegister>
 801956e:	4603      	mov	r3, r0
 8019570:	f043 0304 	orr.w	r3, r3, #4
 8019574:	b2db      	uxtb	r3, r3
 8019576:	4619      	mov	r1, r3
 8019578:	f240 7036 	movw	r0, #1846	@ 0x736
 801957c:	f001 f952 	bl	801a824 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8019580:	4b04      	ldr	r3, [pc, #16]	@ (8019594 <RadioSetRxGenericConfig+0x37c>)
 8019582:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019586:	609a      	str	r2, [r3, #8]
        break;
 8019588:	bf00      	nop
    }
    return status;
 801958a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801958c:	4618      	mov	r0, r3
 801958e:	3730      	adds	r7, #48	@ 0x30
 8019590:	46bd      	mov	sp, r7
 8019592:	bd80      	pop	{r7, pc}
 8019594:	20001d3c 	.word	0x20001d3c
 8019598:	20001d74 	.word	0x20001d74
 801959c:	20001d4a 	.word	0x20001d4a

080195a0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 80195a0:	b580      	push	{r7, lr}
 80195a2:	b08e      	sub	sp, #56	@ 0x38
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	60b9      	str	r1, [r7, #8]
 80195a8:	607b      	str	r3, [r7, #4]
 80195aa:	4603      	mov	r3, r0
 80195ac:	73fb      	strb	r3, [r7, #15]
 80195ae:	4613      	mov	r3, r2
 80195b0:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 80195b2:	2300      	movs	r3, #0
 80195b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80195b6:	2300      	movs	r3, #0
 80195b8:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80195ba:	f001 fc0a 	bl	801add2 <RFW_DeInit>
    switch( modem )
 80195be:	7bfb      	ldrb	r3, [r7, #15]
 80195c0:	2b03      	cmp	r3, #3
 80195c2:	f200 8204 	bhi.w	80199ce <RadioSetTxGenericConfig+0x42e>
 80195c6:	a201      	add	r2, pc, #4	@ (adr r2, 80195cc <RadioSetTxGenericConfig+0x2c>)
 80195c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195cc:	08019751 	.word	0x08019751
 80195d0:	08019899 	.word	0x08019899
 80195d4:	08019991 	.word	0x08019991
 80195d8:	080195dd 	.word	0x080195dd
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 80195dc:	68bb      	ldr	r3, [r7, #8]
 80195de:	7c9b      	ldrb	r3, [r3, #18]
 80195e0:	2b08      	cmp	r3, #8
 80195e2:	d902      	bls.n	80195ea <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 80195e4:	f04f 33ff 	mov.w	r3, #4294967295
 80195e8:	e206      	b.n	80199f8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 80195ea:	68bb      	ldr	r3, [r7, #8]
 80195ec:	6899      	ldr	r1, [r3, #8]
 80195ee:	68bb      	ldr	r3, [r7, #8]
 80195f0:	7c9b      	ldrb	r3, [r3, #18]
 80195f2:	461a      	mov	r2, r3
 80195f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80195f8:	4618      	mov	r0, r3
 80195fa:	f001 fcdd 	bl	801afb8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80195fe:	68bb      	ldr	r3, [r7, #8]
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	2b00      	cmp	r3, #0
 8019604:	d102      	bne.n	801960c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8019606:	f04f 33ff 	mov.w	r3, #4294967295
 801960a:	e1f5      	b.n	80199f8 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 801960c:	68bb      	ldr	r3, [r7, #8]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	f242 7210 	movw	r2, #10000	@ 0x2710
 8019614:	4293      	cmp	r3, r2
 8019616:	d813      	bhi.n	8019640 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8019618:	2302      	movs	r3, #2
 801961a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801961e:	4b99      	ldr	r3, [pc, #612]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 8019620:	2203      	movs	r2, #3
 8019622:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8019624:	4b97      	ldr	r3, [pc, #604]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 8019626:	2203      	movs	r2, #3
 8019628:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801962c:	68bb      	ldr	r3, [r7, #8]
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	4a94      	ldr	r2, [pc, #592]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 8019632:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019634:	68bb      	ldr	r3, [r7, #8]
 8019636:	7cda      	ldrb	r2, [r3, #19]
 8019638:	4b92      	ldr	r3, [pc, #584]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 801963a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801963e:	e017      	b.n	8019670 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8019640:	2300      	movs	r3, #0
 8019642:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019646:	4b8f      	ldr	r3, [pc, #572]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 8019648:	2200      	movs	r2, #0
 801964a:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801964c:	4b8d      	ldr	r3, [pc, #564]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 801964e:	2200      	movs	r2, #0
 8019650:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019654:	68bb      	ldr	r3, [r7, #8]
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	4a8a      	ldr	r2, [pc, #552]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 801965a:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801965c:	68bb      	ldr	r3, [r7, #8]
 801965e:	7cda      	ldrb	r2, [r3, #19]
 8019660:	4b88      	ldr	r3, [pc, #544]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 8019662:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8019666:	68bb      	ldr	r3, [r7, #8]
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	089b      	lsrs	r3, r3, #2
 801966c:	4a85      	ldr	r2, [pc, #532]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 801966e:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8019670:	68bb      	ldr	r3, [r7, #8]
 8019672:	685b      	ldr	r3, [r3, #4]
 8019674:	b29b      	uxth	r3, r3
 8019676:	00db      	lsls	r3, r3, #3
 8019678:	b29a      	uxth	r2, r3
 801967a:	4b82      	ldr	r3, [pc, #520]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 801967c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801967e:	4b81      	ldr	r3, [pc, #516]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 8019680:	2204      	movs	r2, #4
 8019682:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8019684:	68bb      	ldr	r3, [r7, #8]
 8019686:	7c9b      	ldrb	r3, [r3, #18]
 8019688:	00db      	lsls	r3, r3, #3
 801968a:	b2da      	uxtb	r2, r3
 801968c:	4b7d      	ldr	r3, [pc, #500]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 801968e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019690:	4b7c      	ldr	r3, [pc, #496]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 8019692:	2200      	movs	r2, #0
 8019694:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019696:	68bb      	ldr	r3, [r7, #8]
 8019698:	7d9b      	ldrb	r3, [r3, #22]
 801969a:	2b02      	cmp	r3, #2
 801969c:	d003      	beq.n	80196a6 <RadioSetTxGenericConfig+0x106>
 801969e:	68bb      	ldr	r3, [r7, #8]
 80196a0:	7d1b      	ldrb	r3, [r3, #20]
 80196a2:	2b02      	cmp	r3, #2
 80196a4:	d12b      	bne.n	80196fe <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80196a6:	68bb      	ldr	r3, [r7, #8]
 80196a8:	7d5b      	ldrb	r3, [r3, #21]
 80196aa:	2bf1      	cmp	r3, #241	@ 0xf1
 80196ac:	d00a      	beq.n	80196c4 <RadioSetTxGenericConfig+0x124>
 80196ae:	68bb      	ldr	r3, [r7, #8]
 80196b0:	7d5b      	ldrb	r3, [r3, #21]
 80196b2:	2bf2      	cmp	r3, #242	@ 0xf2
 80196b4:	d006      	beq.n	80196c4 <RadioSetTxGenericConfig+0x124>
 80196b6:	68bb      	ldr	r3, [r7, #8]
 80196b8:	7d5b      	ldrb	r3, [r3, #21]
 80196ba:	2b01      	cmp	r3, #1
 80196bc:	d002      	beq.n	80196c4 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 80196be:	f04f 33ff 	mov.w	r3, #4294967295
 80196c2:	e199      	b.n	80199f8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 80196c4:	68bb      	ldr	r3, [r7, #8]
 80196c6:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 80196c8:	2301      	movs	r3, #1
 80196ca:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80196ce:	4b6e      	ldr	r3, [pc, #440]	@ (8019888 <RadioSetTxGenericConfig+0x2e8>)
 80196d0:	6819      	ldr	r1, [r3, #0]
 80196d2:	f107 0320 	add.w	r3, r7, #32
 80196d6:	4a6d      	ldr	r2, [pc, #436]	@ (801988c <RadioSetTxGenericConfig+0x2ec>)
 80196d8:	4618      	mov	r0, r3
 80196da:	f001 fb6d 	bl	801adb8 <RFW_Init>
 80196de:	4603      	mov	r3, r0
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d002      	beq.n	80196ea <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 80196e4:	f04f 33ff 	mov.w	r3, #4294967295
 80196e8:	e186      	b.n	80199f8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80196ea:	4b66      	ldr	r3, [pc, #408]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 80196ec:	2200      	movs	r2, #0
 80196ee:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80196f0:	4b64      	ldr	r3, [pc, #400]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 80196f2:	2201      	movs	r2, #1
 80196f4:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80196f6:	4b63      	ldr	r3, [pc, #396]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 80196f8:	2200      	movs	r2, #0
 80196fa:	755a      	strb	r2, [r3, #21]
        {
 80196fc:	e00b      	b.n	8019716 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80196fe:	68bb      	ldr	r3, [r7, #8]
 8019700:	7d5a      	ldrb	r2, [r3, #21]
 8019702:	4b60      	ldr	r3, [pc, #384]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 8019704:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8019706:	68bb      	ldr	r3, [r7, #8]
 8019708:	7d9a      	ldrb	r2, [r3, #22]
 801970a:	4b5e      	ldr	r3, [pc, #376]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 801970c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801970e:	68bb      	ldr	r3, [r7, #8]
 8019710:	7d1a      	ldrb	r2, [r3, #20]
 8019712:	4b5c      	ldr	r3, [pc, #368]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 8019714:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8019716:	f7ff f8a2 	bl	801885e <RadioStandby>
        RadioSetModem( radio_modem );
 801971a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801971e:	4618      	mov	r0, r3
 8019720:	f7fe fa4a 	bl	8017bb8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019724:	485a      	ldr	r0, [pc, #360]	@ (8019890 <RadioSetTxGenericConfig+0x2f0>)
 8019726:	f000 fe63 	bl	801a3f0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801972a:	485a      	ldr	r0, [pc, #360]	@ (8019894 <RadioSetTxGenericConfig+0x2f4>)
 801972c:	f000 ff32 	bl	801a594 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019730:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019734:	4618      	mov	r0, r3
 8019736:	f000 f9fa 	bl	8019b2e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801973a:	68bb      	ldr	r3, [r7, #8]
 801973c:	8a1b      	ldrh	r3, [r3, #16]
 801973e:	4618      	mov	r0, r3
 8019740:	f000 fa44 	bl	8019bcc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8019744:	68bb      	ldr	r3, [r7, #8]
 8019746:	899b      	ldrh	r3, [r3, #12]
 8019748:	4618      	mov	r0, r3
 801974a:	f000 fa1f 	bl	8019b8c <SUBGRF_SetCrcPolynomial>
        break;
 801974e:	e13f      	b.n	80199d0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8019750:	68bb      	ldr	r3, [r7, #8]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d102      	bne.n	801975e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8019758:	f04f 33ff 	mov.w	r3, #4294967295
 801975c:	e14c      	b.n	80199f8 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801975e:	68bb      	ldr	r3, [r7, #8]
 8019760:	7c9b      	ldrb	r3, [r3, #18]
 8019762:	2b08      	cmp	r3, #8
 8019764:	d902      	bls.n	801976c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8019766:	f04f 33ff 	mov.w	r3, #4294967295
 801976a:	e145      	b.n	80199f8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801976c:	68bb      	ldr	r3, [r7, #8]
 801976e:	6899      	ldr	r1, [r3, #8]
 8019770:	68bb      	ldr	r3, [r7, #8]
 8019772:	7c9b      	ldrb	r3, [r3, #18]
 8019774:	461a      	mov	r2, r3
 8019776:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801977a:	4618      	mov	r0, r3
 801977c:	f001 fc1c 	bl	801afb8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019780:	4b40      	ldr	r3, [pc, #256]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 8019782:	2200      	movs	r2, #0
 8019784:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019788:	68bb      	ldr	r3, [r7, #8]
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	4a3d      	ldr	r2, [pc, #244]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 801978e:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8019790:	68bb      	ldr	r3, [r7, #8]
 8019792:	7cda      	ldrb	r2, [r3, #19]
 8019794:	4b3b      	ldr	r3, [pc, #236]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 8019796:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801979a:	68bb      	ldr	r3, [r7, #8]
 801979c:	699b      	ldr	r3, [r3, #24]
 801979e:	4a39      	ldr	r2, [pc, #228]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 80197a0:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80197a2:	4b38      	ldr	r3, [pc, #224]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 80197a4:	2200      	movs	r2, #0
 80197a6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80197a8:	68bb      	ldr	r3, [r7, #8]
 80197aa:	685b      	ldr	r3, [r3, #4]
 80197ac:	b29b      	uxth	r3, r3
 80197ae:	00db      	lsls	r3, r3, #3
 80197b0:	b29a      	uxth	r2, r3
 80197b2:	4b34      	ldr	r3, [pc, #208]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 80197b4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80197b6:	4b33      	ldr	r3, [pc, #204]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 80197b8:	2204      	movs	r2, #4
 80197ba:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80197bc:	68bb      	ldr	r3, [r7, #8]
 80197be:	7c9b      	ldrb	r3, [r3, #18]
 80197c0:	00db      	lsls	r3, r3, #3
 80197c2:	b2da      	uxtb	r2, r3
 80197c4:	4b2f      	ldr	r3, [pc, #188]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 80197c6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80197c8:	4b2e      	ldr	r3, [pc, #184]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 80197ca:	2200      	movs	r2, #0
 80197cc:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80197ce:	68bb      	ldr	r3, [r7, #8]
 80197d0:	7d9b      	ldrb	r3, [r3, #22]
 80197d2:	2b02      	cmp	r3, #2
 80197d4:	d003      	beq.n	80197de <RadioSetTxGenericConfig+0x23e>
 80197d6:	68bb      	ldr	r3, [r7, #8]
 80197d8:	7d1b      	ldrb	r3, [r3, #20]
 80197da:	2b02      	cmp	r3, #2
 80197dc:	d12a      	bne.n	8019834 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80197de:	68bb      	ldr	r3, [r7, #8]
 80197e0:	7d5b      	ldrb	r3, [r3, #21]
 80197e2:	2bf1      	cmp	r3, #241	@ 0xf1
 80197e4:	d00a      	beq.n	80197fc <RadioSetTxGenericConfig+0x25c>
 80197e6:	68bb      	ldr	r3, [r7, #8]
 80197e8:	7d5b      	ldrb	r3, [r3, #21]
 80197ea:	2bf2      	cmp	r3, #242	@ 0xf2
 80197ec:	d006      	beq.n	80197fc <RadioSetTxGenericConfig+0x25c>
 80197ee:	68bb      	ldr	r3, [r7, #8]
 80197f0:	7d5b      	ldrb	r3, [r3, #21]
 80197f2:	2b01      	cmp	r3, #1
 80197f4:	d002      	beq.n	80197fc <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 80197f6:	f04f 33ff 	mov.w	r3, #4294967295
 80197fa:	e0fd      	b.n	80199f8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80197fc:	2301      	movs	r3, #1
 80197fe:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8019800:	68bb      	ldr	r3, [r7, #8]
 8019802:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019804:	4b20      	ldr	r3, [pc, #128]	@ (8019888 <RadioSetTxGenericConfig+0x2e8>)
 8019806:	6819      	ldr	r1, [r3, #0]
 8019808:	f107 0314 	add.w	r3, r7, #20
 801980c:	4a1f      	ldr	r2, [pc, #124]	@ (801988c <RadioSetTxGenericConfig+0x2ec>)
 801980e:	4618      	mov	r0, r3
 8019810:	f001 fad2 	bl	801adb8 <RFW_Init>
 8019814:	4603      	mov	r3, r0
 8019816:	2b00      	cmp	r3, #0
 8019818:	d002      	beq.n	8019820 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801981a:	f04f 33ff 	mov.w	r3, #4294967295
 801981e:	e0eb      	b.n	80199f8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019820:	4b18      	ldr	r3, [pc, #96]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 8019822:	2200      	movs	r2, #0
 8019824:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8019826:	4b17      	ldr	r3, [pc, #92]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 8019828:	2201      	movs	r2, #1
 801982a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801982c:	4b15      	ldr	r3, [pc, #84]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 801982e:	2200      	movs	r2, #0
 8019830:	755a      	strb	r2, [r3, #21]
        {
 8019832:	e00b      	b.n	801984c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019834:	68bb      	ldr	r3, [r7, #8]
 8019836:	7d5a      	ldrb	r2, [r3, #21]
 8019838:	4b12      	ldr	r3, [pc, #72]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 801983a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801983c:	68bb      	ldr	r3, [r7, #8]
 801983e:	7d9a      	ldrb	r2, [r3, #22]
 8019840:	4b10      	ldr	r3, [pc, #64]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 8019842:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8019844:	68bb      	ldr	r3, [r7, #8]
 8019846:	7d1a      	ldrb	r2, [r3, #20]
 8019848:	4b0e      	ldr	r3, [pc, #56]	@ (8019884 <RadioSetTxGenericConfig+0x2e4>)
 801984a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801984c:	f7ff f807 	bl	801885e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019850:	2000      	movs	r0, #0
 8019852:	f7fe f9b1 	bl	8017bb8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019856:	480e      	ldr	r0, [pc, #56]	@ (8019890 <RadioSetTxGenericConfig+0x2f0>)
 8019858:	f000 fdca 	bl	801a3f0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801985c:	480d      	ldr	r0, [pc, #52]	@ (8019894 <RadioSetTxGenericConfig+0x2f4>)
 801985e:	f000 fe99 	bl	801a594 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019862:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019866:	4618      	mov	r0, r3
 8019868:	f000 f961 	bl	8019b2e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801986c:	68bb      	ldr	r3, [r7, #8]
 801986e:	8a1b      	ldrh	r3, [r3, #16]
 8019870:	4618      	mov	r0, r3
 8019872:	f000 f9ab 	bl	8019bcc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8019876:	68bb      	ldr	r3, [r7, #8]
 8019878:	899b      	ldrh	r3, [r3, #12]
 801987a:	4618      	mov	r0, r3
 801987c:	f000 f986 	bl	8019b8c <SUBGRF_SetCrcPolynomial>
        break;
 8019880:	e0a6      	b.n	80199d0 <RadioSetTxGenericConfig+0x430>
 8019882:	bf00      	nop
 8019884:	20001d3c 	.word	0x20001d3c
 8019888:	20001d38 	.word	0x20001d38
 801988c:	20001d98 	.word	0x20001d98
 8019890:	20001d74 	.word	0x20001d74
 8019894:	20001d4a 	.word	0x20001d4a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019898:	4b59      	ldr	r3, [pc, #356]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 801989a:	2201      	movs	r2, #1
 801989c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80198a0:	68bb      	ldr	r3, [r7, #8]
 80198a2:	781a      	ldrb	r2, [r3, #0]
 80198a4:	4b56      	ldr	r3, [pc, #344]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 80198a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80198aa:	68bb      	ldr	r3, [r7, #8]
 80198ac:	785a      	ldrb	r2, [r3, #1]
 80198ae:	4b54      	ldr	r3, [pc, #336]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 80198b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80198b4:	68bb      	ldr	r3, [r7, #8]
 80198b6:	789a      	ldrb	r2, [r3, #2]
 80198b8:	4b51      	ldr	r3, [pc, #324]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 80198ba:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80198be:	68bb      	ldr	r3, [r7, #8]
 80198c0:	78db      	ldrb	r3, [r3, #3]
 80198c2:	2b02      	cmp	r3, #2
 80198c4:	d010      	beq.n	80198e8 <RadioSetTxGenericConfig+0x348>
 80198c6:	2b02      	cmp	r3, #2
 80198c8:	dc20      	bgt.n	801990c <RadioSetTxGenericConfig+0x36c>
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d002      	beq.n	80198d4 <RadioSetTxGenericConfig+0x334>
 80198ce:	2b01      	cmp	r3, #1
 80198d0:	d005      	beq.n	80198de <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 80198d2:	e01b      	b.n	801990c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80198d4:	4b4a      	ldr	r3, [pc, #296]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 80198d6:	2200      	movs	r2, #0
 80198d8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80198dc:	e017      	b.n	801990e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80198de:	4b48      	ldr	r3, [pc, #288]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 80198e0:	2201      	movs	r2, #1
 80198e2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80198e6:	e012      	b.n	801990e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80198e8:	68bb      	ldr	r3, [r7, #8]
 80198ea:	781b      	ldrb	r3, [r3, #0]
 80198ec:	2b0b      	cmp	r3, #11
 80198ee:	d003      	beq.n	80198f8 <RadioSetTxGenericConfig+0x358>
 80198f0:	68bb      	ldr	r3, [r7, #8]
 80198f2:	781b      	ldrb	r3, [r3, #0]
 80198f4:	2b0c      	cmp	r3, #12
 80198f6:	d104      	bne.n	8019902 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80198f8:	4b41      	ldr	r3, [pc, #260]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 80198fa:	2201      	movs	r2, #1
 80198fc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019900:	e005      	b.n	801990e <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019902:	4b3f      	ldr	r3, [pc, #252]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 8019904:	2200      	movs	r2, #0
 8019906:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801990a:	e000      	b.n	801990e <RadioSetTxGenericConfig+0x36e>
            break;
 801990c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801990e:	4b3c      	ldr	r3, [pc, #240]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 8019910:	2201      	movs	r2, #1
 8019912:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019914:	68bb      	ldr	r3, [r7, #8]
 8019916:	889a      	ldrh	r2, [r3, #4]
 8019918:	4b39      	ldr	r3, [pc, #228]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 801991a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801991c:	68bb      	ldr	r3, [r7, #8]
 801991e:	799a      	ldrb	r2, [r3, #6]
 8019920:	4b37      	ldr	r3, [pc, #220]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 8019922:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019924:	68bb      	ldr	r3, [r7, #8]
 8019926:	79da      	ldrb	r2, [r3, #7]
 8019928:	4b35      	ldr	r3, [pc, #212]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 801992a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801992e:	68bb      	ldr	r3, [r7, #8]
 8019930:	7a1a      	ldrb	r2, [r3, #8]
 8019932:	4b33      	ldr	r3, [pc, #204]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 8019934:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 8019938:	f7fe ff91 	bl	801885e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801993c:	2001      	movs	r0, #1
 801993e:	f7fe f93b 	bl	8017bb8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019942:	4830      	ldr	r0, [pc, #192]	@ (8019a04 <RadioSetTxGenericConfig+0x464>)
 8019944:	f000 fd54 	bl	801a3f0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019948:	482f      	ldr	r0, [pc, #188]	@ (8019a08 <RadioSetTxGenericConfig+0x468>)
 801994a:	f000 fe23 	bl	801a594 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801994e:	4b2c      	ldr	r3, [pc, #176]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 8019950:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8019954:	2b06      	cmp	r3, #6
 8019956:	d10d      	bne.n	8019974 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019958:	f640 0089 	movw	r0, #2185	@ 0x889
 801995c:	f000 ff76 	bl	801a84c <SUBGRF_ReadRegister>
 8019960:	4603      	mov	r3, r0
 8019962:	f023 0304 	bic.w	r3, r3, #4
 8019966:	b2db      	uxtb	r3, r3
 8019968:	4619      	mov	r1, r3
 801996a:	f640 0089 	movw	r0, #2185	@ 0x889
 801996e:	f000 ff59 	bl	801a824 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 8019972:	e02d      	b.n	80199d0 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019974:	f640 0089 	movw	r0, #2185	@ 0x889
 8019978:	f000 ff68 	bl	801a84c <SUBGRF_ReadRegister>
 801997c:	4603      	mov	r3, r0
 801997e:	f043 0304 	orr.w	r3, r3, #4
 8019982:	b2db      	uxtb	r3, r3
 8019984:	4619      	mov	r1, r3
 8019986:	f640 0089 	movw	r0, #2185	@ 0x889
 801998a:	f000 ff4b 	bl	801a824 <SUBGRF_WriteRegister>
        break;
 801998e:	e01f      	b.n	80199d0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8019990:	68bb      	ldr	r3, [r7, #8]
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	2b00      	cmp	r3, #0
 8019996:	d004      	beq.n	80199a2 <RadioSetTxGenericConfig+0x402>
 8019998:	68bb      	ldr	r3, [r7, #8]
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80199a0:	d902      	bls.n	80199a8 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 80199a2:	f04f 33ff 	mov.w	r3, #4294967295
 80199a6:	e027      	b.n	80199f8 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 80199a8:	2003      	movs	r0, #3
 80199aa:	f7fe f905 	bl	8017bb8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80199ae:	4b14      	ldr	r3, [pc, #80]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 80199b0:	2202      	movs	r2, #2
 80199b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80199b6:	68bb      	ldr	r3, [r7, #8]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	4a11      	ldr	r2, [pc, #68]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 80199bc:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80199be:	4b10      	ldr	r3, [pc, #64]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 80199c0:	2216      	movs	r2, #22
 80199c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80199c6:	480f      	ldr	r0, [pc, #60]	@ (8019a04 <RadioSetTxGenericConfig+0x464>)
 80199c8:	f000 fd12 	bl	801a3f0 <SUBGRF_SetModulationParams>
        break;
 80199cc:	e000      	b.n	80199d0 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 80199ce:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80199d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80199d4:	4618      	mov	r0, r3
 80199d6:	f001 f841 	bl	801aa5c <SUBGRF_SetRfTxPower>
 80199da:	4603      	mov	r3, r0
 80199dc:	461a      	mov	r2, r3
 80199de:	4b08      	ldr	r3, [pc, #32]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 80199e0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80199e4:	4b06      	ldr	r3, [pc, #24]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 80199e6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80199ea:	4618      	mov	r0, r3
 80199ec:	f001 fa05 	bl	801adfa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80199f0:	4a03      	ldr	r2, [pc, #12]	@ (8019a00 <RadioSetTxGenericConfig+0x460>)
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	6053      	str	r3, [r2, #4]
    return 0;
 80199f6:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80199f8:	4618      	mov	r0, r3
 80199fa:	3738      	adds	r7, #56	@ 0x38
 80199fc:	46bd      	mov	sp, r7
 80199fe:	bd80      	pop	{r7, pc}
 8019a00:	20001d3c 	.word	0x20001d3c
 8019a04:	20001d74 	.word	0x20001d74
 8019a08:	20001d4a 	.word	0x20001d4a

08019a0c <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	b084      	sub	sp, #16
 8019a10:	af00      	add	r7, sp, #0
 8019a12:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d002      	beq.n	8019a20 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8019a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8019a84 <SUBGRF_Init+0x78>)
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8019a20:	f7e8 fb86 	bl	8002130 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019a24:	2002      	movs	r0, #2
 8019a26:	f001 f8e5 	bl	801abf4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8019a2a:	4b17      	ldr	r3, [pc, #92]	@ (8019a88 <SUBGRF_Init+0x7c>)
 8019a2c:	2200      	movs	r2, #0
 8019a2e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8019a30:	2000      	movs	r0, #0
 8019a32:	f000 f977 	bl	8019d24 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8019a36:	f7f1 fd8f 	bl	800b558 <RBI_IsTCXO>
 8019a3a:	4603      	mov	r3, r0
 8019a3c:	2b01      	cmp	r3, #1
 8019a3e:	d10e      	bne.n	8019a5e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8019a40:	2140      	movs	r1, #64	@ 0x40
 8019a42:	2001      	movs	r0, #1
 8019a44:	f000 fb78 	bl	801a138 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8019a48:	2100      	movs	r1, #0
 8019a4a:	f640 1011 	movw	r0, #2321	@ 0x911
 8019a4e:	f000 fee9 	bl	801a824 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8019a52:	237f      	movs	r3, #127	@ 0x7f
 8019a54:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8019a56:	7b38      	ldrb	r0, [r7, #12]
 8019a58:	f000 fa85 	bl	8019f66 <SUBGRF_Calibrate>
 8019a5c:	e009      	b.n	8019a72 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8019a5e:	2120      	movs	r1, #32
 8019a60:	f640 1011 	movw	r0, #2321	@ 0x911
 8019a64:	f000 fede 	bl	801a824 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8019a68:	2120      	movs	r1, #32
 8019a6a:	f640 1012 	movw	r0, #2322	@ 0x912
 8019a6e:	f000 fed9 	bl	801a824 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8019a72:	f7f1 fd55 	bl	800b520 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8019a76:	4b05      	ldr	r3, [pc, #20]	@ (8019a8c <SUBGRF_Init+0x80>)
 8019a78:	2201      	movs	r2, #1
 8019a7a:	701a      	strb	r2, [r3, #0]
}
 8019a7c:	bf00      	nop
 8019a7e:	3710      	adds	r7, #16
 8019a80:	46bd      	mov	sp, r7
 8019a82:	bd80      	pop	{r7, pc}
 8019a84:	20001dd4 	.word	0x20001dd4
 8019a88:	20001dd0 	.word	0x20001dd0
 8019a8c:	20001dc8 	.word	0x20001dc8

08019a90 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8019a90:	b480      	push	{r7}
 8019a92:	af00      	add	r7, sp, #0
    return OperatingMode;
 8019a94:	4b02      	ldr	r3, [pc, #8]	@ (8019aa0 <SUBGRF_GetOperatingMode+0x10>)
 8019a96:	781b      	ldrb	r3, [r3, #0]
}
 8019a98:	4618      	mov	r0, r3
 8019a9a:	46bd      	mov	sp, r7
 8019a9c:	bc80      	pop	{r7}
 8019a9e:	4770      	bx	lr
 8019aa0:	20001dc8 	.word	0x20001dc8

08019aa4 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8019aa4:	b580      	push	{r7, lr}
 8019aa6:	b082      	sub	sp, #8
 8019aa8:	af00      	add	r7, sp, #0
 8019aaa:	6078      	str	r0, [r7, #4]
 8019aac:	460b      	mov	r3, r1
 8019aae:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8019ab0:	78fb      	ldrb	r3, [r7, #3]
 8019ab2:	461a      	mov	r2, r3
 8019ab4:	6879      	ldr	r1, [r7, #4]
 8019ab6:	2000      	movs	r0, #0
 8019ab8:	f000 ff20 	bl	801a8fc <SUBGRF_WriteBuffer>
}
 8019abc:	bf00      	nop
 8019abe:	3708      	adds	r7, #8
 8019ac0:	46bd      	mov	sp, r7
 8019ac2:	bd80      	pop	{r7, pc}

08019ac4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8019ac4:	b580      	push	{r7, lr}
 8019ac6:	b086      	sub	sp, #24
 8019ac8:	af00      	add	r7, sp, #0
 8019aca:	60f8      	str	r0, [r7, #12]
 8019acc:	60b9      	str	r1, [r7, #8]
 8019ace:	4613      	mov	r3, r2
 8019ad0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8019ad6:	f107 0317 	add.w	r3, r7, #23
 8019ada:	4619      	mov	r1, r3
 8019adc:	68b8      	ldr	r0, [r7, #8]
 8019ade:	f000 fe23 	bl	801a728 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8019ae2:	68bb      	ldr	r3, [r7, #8]
 8019ae4:	781b      	ldrb	r3, [r3, #0]
 8019ae6:	79fa      	ldrb	r2, [r7, #7]
 8019ae8:	429a      	cmp	r2, r3
 8019aea:	d201      	bcs.n	8019af0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8019aec:	2301      	movs	r3, #1
 8019aee:	e007      	b.n	8019b00 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8019af0:	7df8      	ldrb	r0, [r7, #23]
 8019af2:	68bb      	ldr	r3, [r7, #8]
 8019af4:	781b      	ldrb	r3, [r3, #0]
 8019af6:	461a      	mov	r2, r3
 8019af8:	68f9      	ldr	r1, [r7, #12]
 8019afa:	f000 ff21 	bl	801a940 <SUBGRF_ReadBuffer>

    return 0;
 8019afe:	2300      	movs	r3, #0
}
 8019b00:	4618      	mov	r0, r3
 8019b02:	3718      	adds	r7, #24
 8019b04:	46bd      	mov	sp, r7
 8019b06:	bd80      	pop	{r7, pc}

08019b08 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b084      	sub	sp, #16
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	60f8      	str	r0, [r7, #12]
 8019b10:	460b      	mov	r3, r1
 8019b12:	607a      	str	r2, [r7, #4]
 8019b14:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8019b16:	7afb      	ldrb	r3, [r7, #11]
 8019b18:	4619      	mov	r1, r3
 8019b1a:	68f8      	ldr	r0, [r7, #12]
 8019b1c:	f7ff ffc2 	bl	8019aa4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8019b20:	6878      	ldr	r0, [r7, #4]
 8019b22:	f000 f91b 	bl	8019d5c <SUBGRF_SetTx>
}
 8019b26:	bf00      	nop
 8019b28:	3710      	adds	r7, #16
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	bd80      	pop	{r7, pc}

08019b2e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8019b2e:	b580      	push	{r7, lr}
 8019b30:	b082      	sub	sp, #8
 8019b32:	af00      	add	r7, sp, #0
 8019b34:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8019b36:	2208      	movs	r2, #8
 8019b38:	6879      	ldr	r1, [r7, #4]
 8019b3a:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8019b3e:	f000 fe99 	bl	801a874 <SUBGRF_WriteRegisters>
    return 0;
 8019b42:	2300      	movs	r3, #0
}
 8019b44:	4618      	mov	r0, r3
 8019b46:	3708      	adds	r7, #8
 8019b48:	46bd      	mov	sp, r7
 8019b4a:	bd80      	pop	{r7, pc}

08019b4c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8019b4c:	b580      	push	{r7, lr}
 8019b4e:	b084      	sub	sp, #16
 8019b50:	af00      	add	r7, sp, #0
 8019b52:	4603      	mov	r3, r0
 8019b54:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8019b56:	88fb      	ldrh	r3, [r7, #6]
 8019b58:	0a1b      	lsrs	r3, r3, #8
 8019b5a:	b29b      	uxth	r3, r3
 8019b5c:	b2db      	uxtb	r3, r3
 8019b5e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8019b60:	88fb      	ldrh	r3, [r7, #6]
 8019b62:	b2db      	uxtb	r3, r3
 8019b64:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019b66:	f000 fb6b 	bl	801a240 <SUBGRF_GetPacketType>
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d108      	bne.n	8019b82 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8019b70:	f107 030c 	add.w	r3, r7, #12
 8019b74:	2202      	movs	r2, #2
 8019b76:	4619      	mov	r1, r3
 8019b78:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8019b7c:	f000 fe7a 	bl	801a874 <SUBGRF_WriteRegisters>
            break;
 8019b80:	e000      	b.n	8019b84 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8019b82:	bf00      	nop
    }
}
 8019b84:	bf00      	nop
 8019b86:	3710      	adds	r7, #16
 8019b88:	46bd      	mov	sp, r7
 8019b8a:	bd80      	pop	{r7, pc}

08019b8c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8019b8c:	b580      	push	{r7, lr}
 8019b8e:	b084      	sub	sp, #16
 8019b90:	af00      	add	r7, sp, #0
 8019b92:	4603      	mov	r3, r0
 8019b94:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8019b96:	88fb      	ldrh	r3, [r7, #6]
 8019b98:	0a1b      	lsrs	r3, r3, #8
 8019b9a:	b29b      	uxth	r3, r3
 8019b9c:	b2db      	uxtb	r3, r3
 8019b9e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8019ba0:	88fb      	ldrh	r3, [r7, #6]
 8019ba2:	b2db      	uxtb	r3, r3
 8019ba4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019ba6:	f000 fb4b 	bl	801a240 <SUBGRF_GetPacketType>
 8019baa:	4603      	mov	r3, r0
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d108      	bne.n	8019bc2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8019bb0:	f107 030c 	add.w	r3, r7, #12
 8019bb4:	2202      	movs	r2, #2
 8019bb6:	4619      	mov	r1, r3
 8019bb8:	f240 60be 	movw	r0, #1726	@ 0x6be
 8019bbc:	f000 fe5a 	bl	801a874 <SUBGRF_WriteRegisters>
            break;
 8019bc0:	e000      	b.n	8019bc4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8019bc2:	bf00      	nop
    }
}
 8019bc4:	bf00      	nop
 8019bc6:	3710      	adds	r7, #16
 8019bc8:	46bd      	mov	sp, r7
 8019bca:	bd80      	pop	{r7, pc}

08019bcc <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8019bcc:	b580      	push	{r7, lr}
 8019bce:	b084      	sub	sp, #16
 8019bd0:	af00      	add	r7, sp, #0
 8019bd2:	4603      	mov	r3, r0
 8019bd4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8019bd6:	2300      	movs	r3, #0
 8019bd8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8019bda:	f000 fb31 	bl	801a240 <SUBGRF_GetPacketType>
 8019bde:	4603      	mov	r3, r0
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d121      	bne.n	8019c28 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8019be4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019be8:	f000 fe30 	bl	801a84c <SUBGRF_ReadRegister>
 8019bec:	4603      	mov	r3, r0
 8019bee:	f023 0301 	bic.w	r3, r3, #1
 8019bf2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8019bf4:	88fb      	ldrh	r3, [r7, #6]
 8019bf6:	0a1b      	lsrs	r3, r3, #8
 8019bf8:	b29b      	uxth	r3, r3
 8019bfa:	b25b      	sxtb	r3, r3
 8019bfc:	f003 0301 	and.w	r3, r3, #1
 8019c00:	b25a      	sxtb	r2, r3
 8019c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019c06:	4313      	orrs	r3, r2
 8019c08:	b25b      	sxtb	r3, r3
 8019c0a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8019c0c:	7bfb      	ldrb	r3, [r7, #15]
 8019c0e:	4619      	mov	r1, r3
 8019c10:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019c14:	f000 fe06 	bl	801a824 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8019c18:	88fb      	ldrh	r3, [r7, #6]
 8019c1a:	b2db      	uxtb	r3, r3
 8019c1c:	4619      	mov	r1, r3
 8019c1e:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8019c22:	f000 fdff 	bl	801a824 <SUBGRF_WriteRegister>
            break;
 8019c26:	e000      	b.n	8019c2a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8019c28:	bf00      	nop
    }
}
 8019c2a:	bf00      	nop
 8019c2c:	3710      	adds	r7, #16
 8019c2e:	46bd      	mov	sp, r7
 8019c30:	bd80      	pop	{r7, pc}

08019c32 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8019c32:	b580      	push	{r7, lr}
 8019c34:	b082      	sub	sp, #8
 8019c36:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8019c38:	2300      	movs	r3, #0
 8019c3a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8019c3c:	2300      	movs	r3, #0
 8019c3e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8019c40:	2300      	movs	r3, #0
 8019c42:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8019c44:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019c48:	f000 fe00 	bl	801a84c <SUBGRF_ReadRegister>
 8019c4c:	4603      	mov	r3, r0
 8019c4e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8019c50:	79fb      	ldrb	r3, [r7, #7]
 8019c52:	f023 0301 	bic.w	r3, r3, #1
 8019c56:	b2db      	uxtb	r3, r3
 8019c58:	4619      	mov	r1, r3
 8019c5a:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019c5e:	f000 fde1 	bl	801a824 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8019c62:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019c66:	f000 fdf1 	bl	801a84c <SUBGRF_ReadRegister>
 8019c6a:	4603      	mov	r3, r0
 8019c6c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8019c6e:	79bb      	ldrb	r3, [r7, #6]
 8019c70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019c74:	b2db      	uxtb	r3, r3
 8019c76:	4619      	mov	r1, r3
 8019c78:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019c7c:	f000 fdd2 	bl	801a824 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019c80:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019c84:	f000 f88a 	bl	8019d9c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8019c88:	463b      	mov	r3, r7
 8019c8a:	2204      	movs	r2, #4
 8019c8c:	4619      	mov	r1, r3
 8019c8e:	f640 0019 	movw	r0, #2073	@ 0x819
 8019c92:	f000 fe11 	bl	801a8b8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8019c96:	2000      	movs	r0, #0
 8019c98:	f000 f844 	bl	8019d24 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8019c9c:	79fb      	ldrb	r3, [r7, #7]
 8019c9e:	4619      	mov	r1, r3
 8019ca0:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019ca4:	f000 fdbe 	bl	801a824 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8019ca8:	79bb      	ldrb	r3, [r7, #6]
 8019caa:	4619      	mov	r1, r3
 8019cac:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019cb0:	f000 fdb8 	bl	801a824 <SUBGRF_WriteRegister>

    return number;
 8019cb4:	683b      	ldr	r3, [r7, #0]
}
 8019cb6:	4618      	mov	r0, r3
 8019cb8:	3708      	adds	r7, #8
 8019cba:	46bd      	mov	sp, r7
 8019cbc:	bd80      	pop	{r7, pc}
	...

08019cc0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b084      	sub	sp, #16
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8019cc8:	2000      	movs	r0, #0
 8019cca:	f7f1 fc30 	bl	800b52e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019cce:	2002      	movs	r0, #2
 8019cd0:	f000 ff90 	bl	801abf4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019cd4:	793b      	ldrb	r3, [r7, #4]
 8019cd6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019cda:	b2db      	uxtb	r3, r3
 8019cdc:	009b      	lsls	r3, r3, #2
 8019cde:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019ce0:	793b      	ldrb	r3, [r7, #4]
 8019ce2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019ce6:	b2db      	uxtb	r3, r3
 8019ce8:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019cea:	b25b      	sxtb	r3, r3
 8019cec:	4313      	orrs	r3, r2
 8019cee:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8019cf0:	793b      	ldrb	r3, [r7, #4]
 8019cf2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019cf6:	b2db      	uxtb	r3, r3
 8019cf8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019cfa:	4313      	orrs	r3, r2
 8019cfc:	b25b      	sxtb	r3, r3
 8019cfe:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019d00:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8019d02:	f107 030f 	add.w	r3, r7, #15
 8019d06:	2201      	movs	r2, #1
 8019d08:	4619      	mov	r1, r3
 8019d0a:	2084      	movs	r0, #132	@ 0x84
 8019d0c:	f000 fe3a 	bl	801a984 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8019d10:	4b03      	ldr	r3, [pc, #12]	@ (8019d20 <SUBGRF_SetSleep+0x60>)
 8019d12:	2200      	movs	r2, #0
 8019d14:	701a      	strb	r2, [r3, #0]
}
 8019d16:	bf00      	nop
 8019d18:	3710      	adds	r7, #16
 8019d1a:	46bd      	mov	sp, r7
 8019d1c:	bd80      	pop	{r7, pc}
 8019d1e:	bf00      	nop
 8019d20:	20001dc8 	.word	0x20001dc8

08019d24 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8019d24:	b580      	push	{r7, lr}
 8019d26:	b082      	sub	sp, #8
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	4603      	mov	r3, r0
 8019d2c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8019d2e:	1dfb      	adds	r3, r7, #7
 8019d30:	2201      	movs	r2, #1
 8019d32:	4619      	mov	r1, r3
 8019d34:	2080      	movs	r0, #128	@ 0x80
 8019d36:	f000 fe25 	bl	801a984 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8019d3a:	79fb      	ldrb	r3, [r7, #7]
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d103      	bne.n	8019d48 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8019d40:	4b05      	ldr	r3, [pc, #20]	@ (8019d58 <SUBGRF_SetStandby+0x34>)
 8019d42:	2201      	movs	r2, #1
 8019d44:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8019d46:	e002      	b.n	8019d4e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8019d48:	4b03      	ldr	r3, [pc, #12]	@ (8019d58 <SUBGRF_SetStandby+0x34>)
 8019d4a:	2202      	movs	r2, #2
 8019d4c:	701a      	strb	r2, [r3, #0]
}
 8019d4e:	bf00      	nop
 8019d50:	3708      	adds	r7, #8
 8019d52:	46bd      	mov	sp, r7
 8019d54:	bd80      	pop	{r7, pc}
 8019d56:	bf00      	nop
 8019d58:	20001dc8 	.word	0x20001dc8

08019d5c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8019d5c:	b580      	push	{r7, lr}
 8019d5e:	b084      	sub	sp, #16
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8019d64:	4b0c      	ldr	r3, [pc, #48]	@ (8019d98 <SUBGRF_SetTx+0x3c>)
 8019d66:	2204      	movs	r2, #4
 8019d68:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	0c1b      	lsrs	r3, r3, #16
 8019d6e:	b2db      	uxtb	r3, r3
 8019d70:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	0a1b      	lsrs	r3, r3, #8
 8019d76:	b2db      	uxtb	r3, r3
 8019d78:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	b2db      	uxtb	r3, r3
 8019d7e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8019d80:	f107 030c 	add.w	r3, r7, #12
 8019d84:	2203      	movs	r2, #3
 8019d86:	4619      	mov	r1, r3
 8019d88:	2083      	movs	r0, #131	@ 0x83
 8019d8a:	f000 fdfb 	bl	801a984 <SUBGRF_WriteCommand>
}
 8019d8e:	bf00      	nop
 8019d90:	3710      	adds	r7, #16
 8019d92:	46bd      	mov	sp, r7
 8019d94:	bd80      	pop	{r7, pc}
 8019d96:	bf00      	nop
 8019d98:	20001dc8 	.word	0x20001dc8

08019d9c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8019d9c:	b580      	push	{r7, lr}
 8019d9e:	b084      	sub	sp, #16
 8019da0:	af00      	add	r7, sp, #0
 8019da2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019da4:	4b0c      	ldr	r3, [pc, #48]	@ (8019dd8 <SUBGRF_SetRx+0x3c>)
 8019da6:	2205      	movs	r2, #5
 8019da8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	0c1b      	lsrs	r3, r3, #16
 8019dae:	b2db      	uxtb	r3, r3
 8019db0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	0a1b      	lsrs	r3, r3, #8
 8019db6:	b2db      	uxtb	r3, r3
 8019db8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	b2db      	uxtb	r3, r3
 8019dbe:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019dc0:	f107 030c 	add.w	r3, r7, #12
 8019dc4:	2203      	movs	r2, #3
 8019dc6:	4619      	mov	r1, r3
 8019dc8:	2082      	movs	r0, #130	@ 0x82
 8019dca:	f000 fddb 	bl	801a984 <SUBGRF_WriteCommand>
}
 8019dce:	bf00      	nop
 8019dd0:	3710      	adds	r7, #16
 8019dd2:	46bd      	mov	sp, r7
 8019dd4:	bd80      	pop	{r7, pc}
 8019dd6:	bf00      	nop
 8019dd8:	20001dc8 	.word	0x20001dc8

08019ddc <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8019ddc:	b580      	push	{r7, lr}
 8019dde:	b084      	sub	sp, #16
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019de4:	4b0e      	ldr	r3, [pc, #56]	@ (8019e20 <SUBGRF_SetRxBoosted+0x44>)
 8019de6:	2205      	movs	r2, #5
 8019de8:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8019dea:	2197      	movs	r1, #151	@ 0x97
 8019dec:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8019df0:	f000 fd18 	bl	801a824 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	0c1b      	lsrs	r3, r3, #16
 8019df8:	b2db      	uxtb	r3, r3
 8019dfa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	0a1b      	lsrs	r3, r3, #8
 8019e00:	b2db      	uxtb	r3, r3
 8019e02:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	b2db      	uxtb	r3, r3
 8019e08:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019e0a:	f107 030c 	add.w	r3, r7, #12
 8019e0e:	2203      	movs	r2, #3
 8019e10:	4619      	mov	r1, r3
 8019e12:	2082      	movs	r0, #130	@ 0x82
 8019e14:	f000 fdb6 	bl	801a984 <SUBGRF_WriteCommand>
}
 8019e18:	bf00      	nop
 8019e1a:	3710      	adds	r7, #16
 8019e1c:	46bd      	mov	sp, r7
 8019e1e:	bd80      	pop	{r7, pc}
 8019e20:	20001dc8 	.word	0x20001dc8

08019e24 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019e24:	b580      	push	{r7, lr}
 8019e26:	b084      	sub	sp, #16
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	6078      	str	r0, [r7, #4]
 8019e2c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	0c1b      	lsrs	r3, r3, #16
 8019e32:	b2db      	uxtb	r3, r3
 8019e34:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	0a1b      	lsrs	r3, r3, #8
 8019e3a:	b2db      	uxtb	r3, r3
 8019e3c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	b2db      	uxtb	r3, r3
 8019e42:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8019e44:	683b      	ldr	r3, [r7, #0]
 8019e46:	0c1b      	lsrs	r3, r3, #16
 8019e48:	b2db      	uxtb	r3, r3
 8019e4a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8019e4c:	683b      	ldr	r3, [r7, #0]
 8019e4e:	0a1b      	lsrs	r3, r3, #8
 8019e50:	b2db      	uxtb	r3, r3
 8019e52:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8019e54:	683b      	ldr	r3, [r7, #0]
 8019e56:	b2db      	uxtb	r3, r3
 8019e58:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8019e5a:	f107 0308 	add.w	r3, r7, #8
 8019e5e:	2206      	movs	r2, #6
 8019e60:	4619      	mov	r1, r3
 8019e62:	2094      	movs	r0, #148	@ 0x94
 8019e64:	f000 fd8e 	bl	801a984 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8019e68:	4b03      	ldr	r3, [pc, #12]	@ (8019e78 <SUBGRF_SetRxDutyCycle+0x54>)
 8019e6a:	2206      	movs	r2, #6
 8019e6c:	701a      	strb	r2, [r3, #0]
}
 8019e6e:	bf00      	nop
 8019e70:	3710      	adds	r7, #16
 8019e72:	46bd      	mov	sp, r7
 8019e74:	bd80      	pop	{r7, pc}
 8019e76:	bf00      	nop
 8019e78:	20001dc8 	.word	0x20001dc8

08019e7c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8019e7c:	b580      	push	{r7, lr}
 8019e7e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8019e80:	2200      	movs	r2, #0
 8019e82:	2100      	movs	r1, #0
 8019e84:	20c5      	movs	r0, #197	@ 0xc5
 8019e86:	f000 fd7d 	bl	801a984 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8019e8a:	4b02      	ldr	r3, [pc, #8]	@ (8019e94 <SUBGRF_SetCad+0x18>)
 8019e8c:	2207      	movs	r2, #7
 8019e8e:	701a      	strb	r2, [r3, #0]
}
 8019e90:	bf00      	nop
 8019e92:	bd80      	pop	{r7, pc}
 8019e94:	20001dc8 	.word	0x20001dc8

08019e98 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8019e98:	b580      	push	{r7, lr}
 8019e9a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8019e9c:	2200      	movs	r2, #0
 8019e9e:	2100      	movs	r1, #0
 8019ea0:	20d1      	movs	r0, #209	@ 0xd1
 8019ea2:	f000 fd6f 	bl	801a984 <SUBGRF_WriteCommand>
}
 8019ea6:	bf00      	nop
 8019ea8:	bd80      	pop	{r7, pc}

08019eaa <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8019eaa:	b580      	push	{r7, lr}
 8019eac:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8019eae:	2200      	movs	r2, #0
 8019eb0:	2100      	movs	r1, #0
 8019eb2:	20d2      	movs	r0, #210	@ 0xd2
 8019eb4:	f000 fd66 	bl	801a984 <SUBGRF_WriteCommand>
}
 8019eb8:	bf00      	nop
 8019eba:	bd80      	pop	{r7, pc}

08019ebc <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8019ebc:	b580      	push	{r7, lr}
 8019ebe:	b082      	sub	sp, #8
 8019ec0:	af00      	add	r7, sp, #0
 8019ec2:	4603      	mov	r3, r0
 8019ec4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8019ec6:	1dfb      	adds	r3, r7, #7
 8019ec8:	2201      	movs	r2, #1
 8019eca:	4619      	mov	r1, r3
 8019ecc:	209f      	movs	r0, #159	@ 0x9f
 8019ece:	f000 fd59 	bl	801a984 <SUBGRF_WriteCommand>
}
 8019ed2:	bf00      	nop
 8019ed4:	3708      	adds	r7, #8
 8019ed6:	46bd      	mov	sp, r7
 8019ed8:	bd80      	pop	{r7, pc}

08019eda <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8019eda:	b580      	push	{r7, lr}
 8019edc:	b084      	sub	sp, #16
 8019ede:	af00      	add	r7, sp, #0
 8019ee0:	4603      	mov	r3, r0
 8019ee2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8019ee4:	1dfb      	adds	r3, r7, #7
 8019ee6:	2201      	movs	r2, #1
 8019ee8:	4619      	mov	r1, r3
 8019eea:	20a0      	movs	r0, #160	@ 0xa0
 8019eec:	f000 fd4a 	bl	801a984 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8019ef0:	79fb      	ldrb	r3, [r7, #7]
 8019ef2:	2b3f      	cmp	r3, #63	@ 0x3f
 8019ef4:	d91c      	bls.n	8019f30 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8019ef6:	79fb      	ldrb	r3, [r7, #7]
 8019ef8:	085b      	lsrs	r3, r3, #1
 8019efa:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8019efc:	2300      	movs	r3, #0
 8019efe:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8019f00:	2300      	movs	r3, #0
 8019f02:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8019f04:	e005      	b.n	8019f12 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8019f06:	7bfb      	ldrb	r3, [r7, #15]
 8019f08:	089b      	lsrs	r3, r3, #2
 8019f0a:	73fb      	strb	r3, [r7, #15]
            exp++;
 8019f0c:	7bbb      	ldrb	r3, [r7, #14]
 8019f0e:	3301      	adds	r3, #1
 8019f10:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8019f12:	7bfb      	ldrb	r3, [r7, #15]
 8019f14:	2b1f      	cmp	r3, #31
 8019f16:	d8f6      	bhi.n	8019f06 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8019f18:	7bfb      	ldrb	r3, [r7, #15]
 8019f1a:	00db      	lsls	r3, r3, #3
 8019f1c:	b2da      	uxtb	r2, r3
 8019f1e:	7bbb      	ldrb	r3, [r7, #14]
 8019f20:	4413      	add	r3, r2
 8019f22:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8019f24:	7b7b      	ldrb	r3, [r7, #13]
 8019f26:	4619      	mov	r1, r3
 8019f28:	f240 7006 	movw	r0, #1798	@ 0x706
 8019f2c:	f000 fc7a 	bl	801a824 <SUBGRF_WriteRegister>
    }
}
 8019f30:	bf00      	nop
 8019f32:	3710      	adds	r7, #16
 8019f34:	46bd      	mov	sp, r7
 8019f36:	bd80      	pop	{r7, pc}

08019f38 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8019f38:	b580      	push	{r7, lr}
 8019f3a:	b082      	sub	sp, #8
 8019f3c:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8019f3e:	f7f1 fb12 	bl	800b566 <RBI_IsDCDC>
 8019f42:	4603      	mov	r3, r0
 8019f44:	2b01      	cmp	r3, #1
 8019f46:	d102      	bne.n	8019f4e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8019f48:	2301      	movs	r3, #1
 8019f4a:	71fb      	strb	r3, [r7, #7]
 8019f4c:	e001      	b.n	8019f52 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8019f4e:	2300      	movs	r3, #0
 8019f50:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8019f52:	1dfb      	adds	r3, r7, #7
 8019f54:	2201      	movs	r2, #1
 8019f56:	4619      	mov	r1, r3
 8019f58:	2096      	movs	r0, #150	@ 0x96
 8019f5a:	f000 fd13 	bl	801a984 <SUBGRF_WriteCommand>
}
 8019f5e:	bf00      	nop
 8019f60:	3708      	adds	r7, #8
 8019f62:	46bd      	mov	sp, r7
 8019f64:	bd80      	pop	{r7, pc}

08019f66 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8019f66:	b580      	push	{r7, lr}
 8019f68:	b084      	sub	sp, #16
 8019f6a:	af00      	add	r7, sp, #0
 8019f6c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019f6e:	793b      	ldrb	r3, [r7, #4]
 8019f70:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8019f74:	b2db      	uxtb	r3, r3
 8019f76:	019b      	lsls	r3, r3, #6
 8019f78:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019f7a:	793b      	ldrb	r3, [r7, #4]
 8019f7c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019f80:	b2db      	uxtb	r3, r3
 8019f82:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019f84:	b25b      	sxtb	r3, r3
 8019f86:	4313      	orrs	r3, r2
 8019f88:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019f8a:	793b      	ldrb	r3, [r7, #4]
 8019f8c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8019f90:	b2db      	uxtb	r3, r3
 8019f92:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019f94:	b25b      	sxtb	r3, r3
 8019f96:	4313      	orrs	r3, r2
 8019f98:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019f9a:	793b      	ldrb	r3, [r7, #4]
 8019f9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019fa0:	b2db      	uxtb	r3, r3
 8019fa2:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019fa4:	b25b      	sxtb	r3, r3
 8019fa6:	4313      	orrs	r3, r2
 8019fa8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019faa:	793b      	ldrb	r3, [r7, #4]
 8019fac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019fb0:	b2db      	uxtb	r3, r3
 8019fb2:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019fb4:	b25b      	sxtb	r3, r3
 8019fb6:	4313      	orrs	r3, r2
 8019fb8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019fba:	793b      	ldrb	r3, [r7, #4]
 8019fbc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019fc0:	b2db      	uxtb	r3, r3
 8019fc2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019fc4:	b25b      	sxtb	r3, r3
 8019fc6:	4313      	orrs	r3, r2
 8019fc8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8019fca:	793b      	ldrb	r3, [r7, #4]
 8019fcc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019fd0:	b2db      	uxtb	r3, r3
 8019fd2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019fd4:	4313      	orrs	r3, r2
 8019fd6:	b25b      	sxtb	r3, r3
 8019fd8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019fda:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8019fdc:	f107 030f 	add.w	r3, r7, #15
 8019fe0:	2201      	movs	r2, #1
 8019fe2:	4619      	mov	r1, r3
 8019fe4:	2089      	movs	r0, #137	@ 0x89
 8019fe6:	f000 fccd 	bl	801a984 <SUBGRF_WriteCommand>
}
 8019fea:	bf00      	nop
 8019fec:	3710      	adds	r7, #16
 8019fee:	46bd      	mov	sp, r7
 8019ff0:	bd80      	pop	{r7, pc}
	...

08019ff4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8019ff4:	b580      	push	{r7, lr}
 8019ff6:	b084      	sub	sp, #16
 8019ff8:	af00      	add	r7, sp, #0
 8019ffa:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	4a1b      	ldr	r2, [pc, #108]	@ (801a06c <SUBGRF_CalibrateImage+0x78>)
 801a000:	4293      	cmp	r3, r2
 801a002:	d904      	bls.n	801a00e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801a004:	23e1      	movs	r3, #225	@ 0xe1
 801a006:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801a008:	23e9      	movs	r3, #233	@ 0xe9
 801a00a:	737b      	strb	r3, [r7, #13]
 801a00c:	e022      	b.n	801a054 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	4a17      	ldr	r2, [pc, #92]	@ (801a070 <SUBGRF_CalibrateImage+0x7c>)
 801a012:	4293      	cmp	r3, r2
 801a014:	d904      	bls.n	801a020 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801a016:	23d7      	movs	r3, #215	@ 0xd7
 801a018:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801a01a:	23db      	movs	r3, #219	@ 0xdb
 801a01c:	737b      	strb	r3, [r7, #13]
 801a01e:	e019      	b.n	801a054 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	4a14      	ldr	r2, [pc, #80]	@ (801a074 <SUBGRF_CalibrateImage+0x80>)
 801a024:	4293      	cmp	r3, r2
 801a026:	d904      	bls.n	801a032 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801a028:	23c1      	movs	r3, #193	@ 0xc1
 801a02a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801a02c:	23c5      	movs	r3, #197	@ 0xc5
 801a02e:	737b      	strb	r3, [r7, #13]
 801a030:	e010      	b.n	801a054 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	4a10      	ldr	r2, [pc, #64]	@ (801a078 <SUBGRF_CalibrateImage+0x84>)
 801a036:	4293      	cmp	r3, r2
 801a038:	d904      	bls.n	801a044 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801a03a:	2375      	movs	r3, #117	@ 0x75
 801a03c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801a03e:	2381      	movs	r3, #129	@ 0x81
 801a040:	737b      	strb	r3, [r7, #13]
 801a042:	e007      	b.n	801a054 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	4a0d      	ldr	r2, [pc, #52]	@ (801a07c <SUBGRF_CalibrateImage+0x88>)
 801a048:	4293      	cmp	r3, r2
 801a04a:	d903      	bls.n	801a054 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801a04c:	236b      	movs	r3, #107	@ 0x6b
 801a04e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801a050:	236f      	movs	r3, #111	@ 0x6f
 801a052:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801a054:	f107 030c 	add.w	r3, r7, #12
 801a058:	2202      	movs	r2, #2
 801a05a:	4619      	mov	r1, r3
 801a05c:	2098      	movs	r0, #152	@ 0x98
 801a05e:	f000 fc91 	bl	801a984 <SUBGRF_WriteCommand>
}
 801a062:	bf00      	nop
 801a064:	3710      	adds	r7, #16
 801a066:	46bd      	mov	sp, r7
 801a068:	bd80      	pop	{r7, pc}
 801a06a:	bf00      	nop
 801a06c:	35a4e900 	.word	0x35a4e900
 801a070:	32a9f880 	.word	0x32a9f880
 801a074:	2de54480 	.word	0x2de54480
 801a078:	1b6b0b00 	.word	0x1b6b0b00
 801a07c:	1954fc40 	.word	0x1954fc40

0801a080 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801a080:	b590      	push	{r4, r7, lr}
 801a082:	b085      	sub	sp, #20
 801a084:	af00      	add	r7, sp, #0
 801a086:	4604      	mov	r4, r0
 801a088:	4608      	mov	r0, r1
 801a08a:	4611      	mov	r1, r2
 801a08c:	461a      	mov	r2, r3
 801a08e:	4623      	mov	r3, r4
 801a090:	71fb      	strb	r3, [r7, #7]
 801a092:	4603      	mov	r3, r0
 801a094:	71bb      	strb	r3, [r7, #6]
 801a096:	460b      	mov	r3, r1
 801a098:	717b      	strb	r3, [r7, #5]
 801a09a:	4613      	mov	r3, r2
 801a09c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801a09e:	79fb      	ldrb	r3, [r7, #7]
 801a0a0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801a0a2:	79bb      	ldrb	r3, [r7, #6]
 801a0a4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801a0a6:	797b      	ldrb	r3, [r7, #5]
 801a0a8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801a0aa:	793b      	ldrb	r3, [r7, #4]
 801a0ac:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801a0ae:	f107 030c 	add.w	r3, r7, #12
 801a0b2:	2204      	movs	r2, #4
 801a0b4:	4619      	mov	r1, r3
 801a0b6:	2095      	movs	r0, #149	@ 0x95
 801a0b8:	f000 fc64 	bl	801a984 <SUBGRF_WriteCommand>
}
 801a0bc:	bf00      	nop
 801a0be:	3714      	adds	r7, #20
 801a0c0:	46bd      	mov	sp, r7
 801a0c2:	bd90      	pop	{r4, r7, pc}

0801a0c4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801a0c4:	b590      	push	{r4, r7, lr}
 801a0c6:	b085      	sub	sp, #20
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	4604      	mov	r4, r0
 801a0cc:	4608      	mov	r0, r1
 801a0ce:	4611      	mov	r1, r2
 801a0d0:	461a      	mov	r2, r3
 801a0d2:	4623      	mov	r3, r4
 801a0d4:	80fb      	strh	r3, [r7, #6]
 801a0d6:	4603      	mov	r3, r0
 801a0d8:	80bb      	strh	r3, [r7, #4]
 801a0da:	460b      	mov	r3, r1
 801a0dc:	807b      	strh	r3, [r7, #2]
 801a0de:	4613      	mov	r3, r2
 801a0e0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801a0e2:	88fb      	ldrh	r3, [r7, #6]
 801a0e4:	0a1b      	lsrs	r3, r3, #8
 801a0e6:	b29b      	uxth	r3, r3
 801a0e8:	b2db      	uxtb	r3, r3
 801a0ea:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801a0ec:	88fb      	ldrh	r3, [r7, #6]
 801a0ee:	b2db      	uxtb	r3, r3
 801a0f0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801a0f2:	88bb      	ldrh	r3, [r7, #4]
 801a0f4:	0a1b      	lsrs	r3, r3, #8
 801a0f6:	b29b      	uxth	r3, r3
 801a0f8:	b2db      	uxtb	r3, r3
 801a0fa:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801a0fc:	88bb      	ldrh	r3, [r7, #4]
 801a0fe:	b2db      	uxtb	r3, r3
 801a100:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801a102:	887b      	ldrh	r3, [r7, #2]
 801a104:	0a1b      	lsrs	r3, r3, #8
 801a106:	b29b      	uxth	r3, r3
 801a108:	b2db      	uxtb	r3, r3
 801a10a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801a10c:	887b      	ldrh	r3, [r7, #2]
 801a10e:	b2db      	uxtb	r3, r3
 801a110:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801a112:	883b      	ldrh	r3, [r7, #0]
 801a114:	0a1b      	lsrs	r3, r3, #8
 801a116:	b29b      	uxth	r3, r3
 801a118:	b2db      	uxtb	r3, r3
 801a11a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801a11c:	883b      	ldrh	r3, [r7, #0]
 801a11e:	b2db      	uxtb	r3, r3
 801a120:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801a122:	f107 0308 	add.w	r3, r7, #8
 801a126:	2208      	movs	r2, #8
 801a128:	4619      	mov	r1, r3
 801a12a:	2008      	movs	r0, #8
 801a12c:	f000 fc2a 	bl	801a984 <SUBGRF_WriteCommand>
}
 801a130:	bf00      	nop
 801a132:	3714      	adds	r7, #20
 801a134:	46bd      	mov	sp, r7
 801a136:	bd90      	pop	{r4, r7, pc}

0801a138 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801a138:	b580      	push	{r7, lr}
 801a13a:	b084      	sub	sp, #16
 801a13c:	af00      	add	r7, sp, #0
 801a13e:	4603      	mov	r3, r0
 801a140:	6039      	str	r1, [r7, #0]
 801a142:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801a144:	79fb      	ldrb	r3, [r7, #7]
 801a146:	f003 0307 	and.w	r3, r3, #7
 801a14a:	b2db      	uxtb	r3, r3
 801a14c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a14e:	683b      	ldr	r3, [r7, #0]
 801a150:	0c1b      	lsrs	r3, r3, #16
 801a152:	b2db      	uxtb	r3, r3
 801a154:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a156:	683b      	ldr	r3, [r7, #0]
 801a158:	0a1b      	lsrs	r3, r3, #8
 801a15a:	b2db      	uxtb	r3, r3
 801a15c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801a15e:	683b      	ldr	r3, [r7, #0]
 801a160:	b2db      	uxtb	r3, r3
 801a162:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801a164:	f107 030c 	add.w	r3, r7, #12
 801a168:	2204      	movs	r2, #4
 801a16a:	4619      	mov	r1, r3
 801a16c:	2097      	movs	r0, #151	@ 0x97
 801a16e:	f000 fc09 	bl	801a984 <SUBGRF_WriteCommand>
}
 801a172:	bf00      	nop
 801a174:	3710      	adds	r7, #16
 801a176:	46bd      	mov	sp, r7
 801a178:	bd80      	pop	{r7, pc}
	...

0801a17c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801a17c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a180:	b084      	sub	sp, #16
 801a182:	af00      	add	r7, sp, #0
 801a184:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801a186:	2300      	movs	r3, #0
 801a188:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801a18a:	4b1d      	ldr	r3, [pc, #116]	@ (801a200 <SUBGRF_SetRfFrequency+0x84>)
 801a18c:	781b      	ldrb	r3, [r3, #0]
 801a18e:	f083 0301 	eor.w	r3, r3, #1
 801a192:	b2db      	uxtb	r3, r3
 801a194:	2b00      	cmp	r3, #0
 801a196:	d005      	beq.n	801a1a4 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801a198:	6878      	ldr	r0, [r7, #4]
 801a19a:	f7ff ff2b 	bl	8019ff4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801a19e:	4b18      	ldr	r3, [pc, #96]	@ (801a200 <SUBGRF_SetRfFrequency+0x84>)
 801a1a0:	2201      	movs	r2, #1
 801a1a2:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	2200      	movs	r2, #0
 801a1a8:	461c      	mov	r4, r3
 801a1aa:	4615      	mov	r5, r2
 801a1ac:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a1b0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a1b4:	4a13      	ldr	r2, [pc, #76]	@ (801a204 <SUBGRF_SetRfFrequency+0x88>)
 801a1b6:	f04f 0300 	mov.w	r3, #0
 801a1ba:	4640      	mov	r0, r8
 801a1bc:	4649      	mov	r1, r9
 801a1be:	f7e6 ff6f 	bl	80010a0 <__aeabi_uldivmod>
 801a1c2:	4602      	mov	r2, r0
 801a1c4:	460b      	mov	r3, r1
 801a1c6:	4613      	mov	r3, r2
 801a1c8:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801a1ca:	68fb      	ldr	r3, [r7, #12]
 801a1cc:	0e1b      	lsrs	r3, r3, #24
 801a1ce:	b2db      	uxtb	r3, r3
 801a1d0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801a1d2:	68fb      	ldr	r3, [r7, #12]
 801a1d4:	0c1b      	lsrs	r3, r3, #16
 801a1d6:	b2db      	uxtb	r3, r3
 801a1d8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	0a1b      	lsrs	r3, r3, #8
 801a1de:	b2db      	uxtb	r3, r3
 801a1e0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801a1e2:	68fb      	ldr	r3, [r7, #12]
 801a1e4:	b2db      	uxtb	r3, r3
 801a1e6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801a1e8:	f107 0308 	add.w	r3, r7, #8
 801a1ec:	2204      	movs	r2, #4
 801a1ee:	4619      	mov	r1, r3
 801a1f0:	2086      	movs	r0, #134	@ 0x86
 801a1f2:	f000 fbc7 	bl	801a984 <SUBGRF_WriteCommand>
}
 801a1f6:	bf00      	nop
 801a1f8:	3710      	adds	r7, #16
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a200:	20001dd0 	.word	0x20001dd0
 801a204:	01e84800 	.word	0x01e84800

0801a208 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801a208:	b580      	push	{r7, lr}
 801a20a:	b082      	sub	sp, #8
 801a20c:	af00      	add	r7, sp, #0
 801a20e:	4603      	mov	r3, r0
 801a210:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801a212:	79fa      	ldrb	r2, [r7, #7]
 801a214:	4b09      	ldr	r3, [pc, #36]	@ (801a23c <SUBGRF_SetPacketType+0x34>)
 801a216:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801a218:	79fb      	ldrb	r3, [r7, #7]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d104      	bne.n	801a228 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801a21e:	2100      	movs	r1, #0
 801a220:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801a224:	f000 fafe 	bl	801a824 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801a228:	1dfb      	adds	r3, r7, #7
 801a22a:	2201      	movs	r2, #1
 801a22c:	4619      	mov	r1, r3
 801a22e:	208a      	movs	r0, #138	@ 0x8a
 801a230:	f000 fba8 	bl	801a984 <SUBGRF_WriteCommand>
}
 801a234:	bf00      	nop
 801a236:	3708      	adds	r7, #8
 801a238:	46bd      	mov	sp, r7
 801a23a:	bd80      	pop	{r7, pc}
 801a23c:	20001dc9 	.word	0x20001dc9

0801a240 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801a240:	b480      	push	{r7}
 801a242:	af00      	add	r7, sp, #0
    return PacketType;
 801a244:	4b02      	ldr	r3, [pc, #8]	@ (801a250 <SUBGRF_GetPacketType+0x10>)
 801a246:	781b      	ldrb	r3, [r3, #0]
}
 801a248:	4618      	mov	r0, r3
 801a24a:	46bd      	mov	sp, r7
 801a24c:	bc80      	pop	{r7}
 801a24e:	4770      	bx	lr
 801a250:	20001dc9 	.word	0x20001dc9

0801a254 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801a254:	b580      	push	{r7, lr}
 801a256:	b084      	sub	sp, #16
 801a258:	af00      	add	r7, sp, #0
 801a25a:	4603      	mov	r3, r0
 801a25c:	71fb      	strb	r3, [r7, #7]
 801a25e:	460b      	mov	r3, r1
 801a260:	71bb      	strb	r3, [r7, #6]
 801a262:	4613      	mov	r3, r2
 801a264:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801a266:	79fb      	ldrb	r3, [r7, #7]
 801a268:	2b01      	cmp	r3, #1
 801a26a:	d149      	bne.n	801a300 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801a26c:	2000      	movs	r0, #0
 801a26e:	f7f1 f981 	bl	800b574 <RBI_GetRFOMaxPowerConfig>
 801a272:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801a274:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a278:	68fa      	ldr	r2, [r7, #12]
 801a27a:	429a      	cmp	r2, r3
 801a27c:	da01      	bge.n	801a282 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	2b0e      	cmp	r3, #14
 801a286:	d10e      	bne.n	801a2a6 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801a288:	2301      	movs	r3, #1
 801a28a:	2201      	movs	r2, #1
 801a28c:	2100      	movs	r1, #0
 801a28e:	2004      	movs	r0, #4
 801a290:	f7ff fef6 	bl	801a080 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a294:	79ba      	ldrb	r2, [r7, #6]
 801a296:	68fb      	ldr	r3, [r7, #12]
 801a298:	b2db      	uxtb	r3, r3
 801a29a:	1ad3      	subs	r3, r2, r3
 801a29c:	b2db      	uxtb	r3, r3
 801a29e:	330e      	adds	r3, #14
 801a2a0:	b2db      	uxtb	r3, r3
 801a2a2:	71bb      	strb	r3, [r7, #6]
 801a2a4:	e01f      	b.n	801a2e6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801a2a6:	68fb      	ldr	r3, [r7, #12]
 801a2a8:	2b0a      	cmp	r3, #10
 801a2aa:	d10e      	bne.n	801a2ca <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801a2ac:	2301      	movs	r3, #1
 801a2ae:	2201      	movs	r2, #1
 801a2b0:	2100      	movs	r1, #0
 801a2b2:	2001      	movs	r0, #1
 801a2b4:	f7ff fee4 	bl	801a080 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801a2b8:	79ba      	ldrb	r2, [r7, #6]
 801a2ba:	68fb      	ldr	r3, [r7, #12]
 801a2bc:	b2db      	uxtb	r3, r3
 801a2be:	1ad3      	subs	r3, r2, r3
 801a2c0:	b2db      	uxtb	r3, r3
 801a2c2:	330d      	adds	r3, #13
 801a2c4:	b2db      	uxtb	r3, r3
 801a2c6:	71bb      	strb	r3, [r7, #6]
 801a2c8:	e00d      	b.n	801a2e6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801a2ca:	2301      	movs	r3, #1
 801a2cc:	2201      	movs	r2, #1
 801a2ce:	2100      	movs	r1, #0
 801a2d0:	2006      	movs	r0, #6
 801a2d2:	f7ff fed5 	bl	801a080 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a2d6:	79ba      	ldrb	r2, [r7, #6]
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	b2db      	uxtb	r3, r3
 801a2dc:	1ad3      	subs	r3, r2, r3
 801a2de:	b2db      	uxtb	r3, r3
 801a2e0:	330e      	adds	r3, #14
 801a2e2:	b2db      	uxtb	r3, r3
 801a2e4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801a2e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a2ea:	f113 0f11 	cmn.w	r3, #17
 801a2ee:	da01      	bge.n	801a2f4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801a2f0:	23ef      	movs	r3, #239	@ 0xef
 801a2f2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801a2f4:	2118      	movs	r1, #24
 801a2f6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a2fa:	f000 fa93 	bl	801a824 <SUBGRF_WriteRegister>
 801a2fe:	e067      	b.n	801a3d0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801a300:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801a304:	f000 faa2 	bl	801a84c <SUBGRF_ReadRegister>
 801a308:	4603      	mov	r3, r0
 801a30a:	f043 031e 	orr.w	r3, r3, #30
 801a30e:	b2db      	uxtb	r3, r3
 801a310:	4619      	mov	r1, r3
 801a312:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801a316:	f000 fa85 	bl	801a824 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801a31a:	2001      	movs	r0, #1
 801a31c:	f7f1 f92a 	bl	800b574 <RBI_GetRFOMaxPowerConfig>
 801a320:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801a322:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a326:	68fa      	ldr	r2, [r7, #12]
 801a328:	429a      	cmp	r2, r3
 801a32a:	da01      	bge.n	801a330 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801a32c:	68fb      	ldr	r3, [r7, #12]
 801a32e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	2b14      	cmp	r3, #20
 801a334:	d10e      	bne.n	801a354 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801a336:	2301      	movs	r3, #1
 801a338:	2200      	movs	r2, #0
 801a33a:	2105      	movs	r1, #5
 801a33c:	2003      	movs	r0, #3
 801a33e:	f7ff fe9f 	bl	801a080 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a342:	79ba      	ldrb	r2, [r7, #6]
 801a344:	68fb      	ldr	r3, [r7, #12]
 801a346:	b2db      	uxtb	r3, r3
 801a348:	1ad3      	subs	r3, r2, r3
 801a34a:	b2db      	uxtb	r3, r3
 801a34c:	3316      	adds	r3, #22
 801a34e:	b2db      	uxtb	r3, r3
 801a350:	71bb      	strb	r3, [r7, #6]
 801a352:	e031      	b.n	801a3b8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	2b11      	cmp	r3, #17
 801a358:	d10e      	bne.n	801a378 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801a35a:	2301      	movs	r3, #1
 801a35c:	2200      	movs	r2, #0
 801a35e:	2103      	movs	r1, #3
 801a360:	2002      	movs	r0, #2
 801a362:	f7ff fe8d 	bl	801a080 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a366:	79ba      	ldrb	r2, [r7, #6]
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	b2db      	uxtb	r3, r3
 801a36c:	1ad3      	subs	r3, r2, r3
 801a36e:	b2db      	uxtb	r3, r3
 801a370:	3316      	adds	r3, #22
 801a372:	b2db      	uxtb	r3, r3
 801a374:	71bb      	strb	r3, [r7, #6]
 801a376:	e01f      	b.n	801a3b8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801a378:	68fb      	ldr	r3, [r7, #12]
 801a37a:	2b0e      	cmp	r3, #14
 801a37c:	d10e      	bne.n	801a39c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801a37e:	2301      	movs	r3, #1
 801a380:	2200      	movs	r2, #0
 801a382:	2102      	movs	r1, #2
 801a384:	2002      	movs	r0, #2
 801a386:	f7ff fe7b 	bl	801a080 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a38a:	79ba      	ldrb	r2, [r7, #6]
 801a38c:	68fb      	ldr	r3, [r7, #12]
 801a38e:	b2db      	uxtb	r3, r3
 801a390:	1ad3      	subs	r3, r2, r3
 801a392:	b2db      	uxtb	r3, r3
 801a394:	330e      	adds	r3, #14
 801a396:	b2db      	uxtb	r3, r3
 801a398:	71bb      	strb	r3, [r7, #6]
 801a39a:	e00d      	b.n	801a3b8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801a39c:	2301      	movs	r3, #1
 801a39e:	2200      	movs	r2, #0
 801a3a0:	2107      	movs	r1, #7
 801a3a2:	2004      	movs	r0, #4
 801a3a4:	f7ff fe6c 	bl	801a080 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a3a8:	79ba      	ldrb	r2, [r7, #6]
 801a3aa:	68fb      	ldr	r3, [r7, #12]
 801a3ac:	b2db      	uxtb	r3, r3
 801a3ae:	1ad3      	subs	r3, r2, r3
 801a3b0:	b2db      	uxtb	r3, r3
 801a3b2:	3316      	adds	r3, #22
 801a3b4:	b2db      	uxtb	r3, r3
 801a3b6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801a3b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a3bc:	f113 0f09 	cmn.w	r3, #9
 801a3c0:	da01      	bge.n	801a3c6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801a3c2:	23f7      	movs	r3, #247	@ 0xf7
 801a3c4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801a3c6:	2138      	movs	r1, #56	@ 0x38
 801a3c8:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a3cc:	f000 fa2a 	bl	801a824 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801a3d0:	79bb      	ldrb	r3, [r7, #6]
 801a3d2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801a3d4:	797b      	ldrb	r3, [r7, #5]
 801a3d6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801a3d8:	f107 0308 	add.w	r3, r7, #8
 801a3dc:	2202      	movs	r2, #2
 801a3de:	4619      	mov	r1, r3
 801a3e0:	208e      	movs	r0, #142	@ 0x8e
 801a3e2:	f000 facf 	bl	801a984 <SUBGRF_WriteCommand>
}
 801a3e6:	bf00      	nop
 801a3e8:	3710      	adds	r7, #16
 801a3ea:	46bd      	mov	sp, r7
 801a3ec:	bd80      	pop	{r7, pc}
	...

0801a3f0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801a3f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a3f4:	b086      	sub	sp, #24
 801a3f6:	af00      	add	r7, sp, #0
 801a3f8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801a3fa:	2300      	movs	r3, #0
 801a3fc:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a3fe:	4a61      	ldr	r2, [pc, #388]	@ (801a584 <SUBGRF_SetModulationParams+0x194>)
 801a400:	f107 0308 	add.w	r3, r7, #8
 801a404:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a408:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	781a      	ldrb	r2, [r3, #0]
 801a410:	4b5d      	ldr	r3, [pc, #372]	@ (801a588 <SUBGRF_SetModulationParams+0x198>)
 801a412:	781b      	ldrb	r3, [r3, #0]
 801a414:	429a      	cmp	r2, r3
 801a416:	d004      	beq.n	801a422 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	781b      	ldrb	r3, [r3, #0]
 801a41c:	4618      	mov	r0, r3
 801a41e:	f7ff fef3 	bl	801a208 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	781b      	ldrb	r3, [r3, #0]
 801a426:	2b03      	cmp	r3, #3
 801a428:	f200 80a5 	bhi.w	801a576 <SUBGRF_SetModulationParams+0x186>
 801a42c:	a201      	add	r2, pc, #4	@ (adr r2, 801a434 <SUBGRF_SetModulationParams+0x44>)
 801a42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a432:	bf00      	nop
 801a434:	0801a445 	.word	0x0801a445
 801a438:	0801a505 	.word	0x0801a505
 801a43c:	0801a4c7 	.word	0x0801a4c7
 801a440:	0801a533 	.word	0x0801a533
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801a444:	2308      	movs	r3, #8
 801a446:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	685b      	ldr	r3, [r3, #4]
 801a44c:	4a4f      	ldr	r2, [pc, #316]	@ (801a58c <SUBGRF_SetModulationParams+0x19c>)
 801a44e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a452:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a454:	697b      	ldr	r3, [r7, #20]
 801a456:	0c1b      	lsrs	r3, r3, #16
 801a458:	b2db      	uxtb	r3, r3
 801a45a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a45c:	697b      	ldr	r3, [r7, #20]
 801a45e:	0a1b      	lsrs	r3, r3, #8
 801a460:	b2db      	uxtb	r3, r3
 801a462:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a464:	697b      	ldr	r3, [r7, #20]
 801a466:	b2db      	uxtb	r3, r3
 801a468:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	7b1b      	ldrb	r3, [r3, #12]
 801a46e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	7b5b      	ldrb	r3, [r3, #13]
 801a474:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	689b      	ldr	r3, [r3, #8]
 801a47a:	2200      	movs	r2, #0
 801a47c:	461c      	mov	r4, r3
 801a47e:	4615      	mov	r5, r2
 801a480:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a484:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a488:	4a41      	ldr	r2, [pc, #260]	@ (801a590 <SUBGRF_SetModulationParams+0x1a0>)
 801a48a:	f04f 0300 	mov.w	r3, #0
 801a48e:	4640      	mov	r0, r8
 801a490:	4649      	mov	r1, r9
 801a492:	f7e6 fe05 	bl	80010a0 <__aeabi_uldivmod>
 801a496:	4602      	mov	r2, r0
 801a498:	460b      	mov	r3, r1
 801a49a:	4613      	mov	r3, r2
 801a49c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801a49e:	697b      	ldr	r3, [r7, #20]
 801a4a0:	0c1b      	lsrs	r3, r3, #16
 801a4a2:	b2db      	uxtb	r3, r3
 801a4a4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801a4a6:	697b      	ldr	r3, [r7, #20]
 801a4a8:	0a1b      	lsrs	r3, r3, #8
 801a4aa:	b2db      	uxtb	r3, r3
 801a4ac:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801a4ae:	697b      	ldr	r3, [r7, #20]
 801a4b0:	b2db      	uxtb	r3, r3
 801a4b2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a4b4:	7cfb      	ldrb	r3, [r7, #19]
 801a4b6:	b29a      	uxth	r2, r3
 801a4b8:	f107 0308 	add.w	r3, r7, #8
 801a4bc:	4619      	mov	r1, r3
 801a4be:	208b      	movs	r0, #139	@ 0x8b
 801a4c0:	f000 fa60 	bl	801a984 <SUBGRF_WriteCommand>
        break;
 801a4c4:	e058      	b.n	801a578 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801a4c6:	2304      	movs	r3, #4
 801a4c8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	691b      	ldr	r3, [r3, #16]
 801a4ce:	4a2f      	ldr	r2, [pc, #188]	@ (801a58c <SUBGRF_SetModulationParams+0x19c>)
 801a4d0:	fbb2 f3f3 	udiv	r3, r2, r3
 801a4d4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a4d6:	697b      	ldr	r3, [r7, #20]
 801a4d8:	0c1b      	lsrs	r3, r3, #16
 801a4da:	b2db      	uxtb	r3, r3
 801a4dc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a4de:	697b      	ldr	r3, [r7, #20]
 801a4e0:	0a1b      	lsrs	r3, r3, #8
 801a4e2:	b2db      	uxtb	r3, r3
 801a4e4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a4e6:	697b      	ldr	r3, [r7, #20]
 801a4e8:	b2db      	uxtb	r3, r3
 801a4ea:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	7d1b      	ldrb	r3, [r3, #20]
 801a4f0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a4f2:	7cfb      	ldrb	r3, [r7, #19]
 801a4f4:	b29a      	uxth	r2, r3
 801a4f6:	f107 0308 	add.w	r3, r7, #8
 801a4fa:	4619      	mov	r1, r3
 801a4fc:	208b      	movs	r0, #139	@ 0x8b
 801a4fe:	f000 fa41 	bl	801a984 <SUBGRF_WriteCommand>
        break;
 801a502:	e039      	b.n	801a578 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801a504:	2304      	movs	r3, #4
 801a506:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	7e1b      	ldrb	r3, [r3, #24]
 801a50c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	7e5b      	ldrb	r3, [r3, #25]
 801a512:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	7e9b      	ldrb	r3, [r3, #26]
 801a518:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	7edb      	ldrb	r3, [r3, #27]
 801a51e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a520:	7cfb      	ldrb	r3, [r7, #19]
 801a522:	b29a      	uxth	r2, r3
 801a524:	f107 0308 	add.w	r3, r7, #8
 801a528:	4619      	mov	r1, r3
 801a52a:	208b      	movs	r0, #139	@ 0x8b
 801a52c:	f000 fa2a 	bl	801a984 <SUBGRF_WriteCommand>

        break;
 801a530:	e022      	b.n	801a578 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801a532:	2305      	movs	r3, #5
 801a534:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	685b      	ldr	r3, [r3, #4]
 801a53a:	4a14      	ldr	r2, [pc, #80]	@ (801a58c <SUBGRF_SetModulationParams+0x19c>)
 801a53c:	fbb2 f3f3 	udiv	r3, r2, r3
 801a540:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a542:	697b      	ldr	r3, [r7, #20]
 801a544:	0c1b      	lsrs	r3, r3, #16
 801a546:	b2db      	uxtb	r3, r3
 801a548:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a54a:	697b      	ldr	r3, [r7, #20]
 801a54c:	0a1b      	lsrs	r3, r3, #8
 801a54e:	b2db      	uxtb	r3, r3
 801a550:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a552:	697b      	ldr	r3, [r7, #20]
 801a554:	b2db      	uxtb	r3, r3
 801a556:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	7b1b      	ldrb	r3, [r3, #12]
 801a55c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	7b5b      	ldrb	r3, [r3, #13]
 801a562:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a564:	7cfb      	ldrb	r3, [r7, #19]
 801a566:	b29a      	uxth	r2, r3
 801a568:	f107 0308 	add.w	r3, r7, #8
 801a56c:	4619      	mov	r1, r3
 801a56e:	208b      	movs	r0, #139	@ 0x8b
 801a570:	f000 fa08 	bl	801a984 <SUBGRF_WriteCommand>
        break;
 801a574:	e000      	b.n	801a578 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801a576:	bf00      	nop
    }
}
 801a578:	bf00      	nop
 801a57a:	3718      	adds	r7, #24
 801a57c:	46bd      	mov	sp, r7
 801a57e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a582:	bf00      	nop
 801a584:	0801f970 	.word	0x0801f970
 801a588:	20001dc9 	.word	0x20001dc9
 801a58c:	3d090000 	.word	0x3d090000
 801a590:	01e84800 	.word	0x01e84800

0801a594 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801a594:	b580      	push	{r7, lr}
 801a596:	b086      	sub	sp, #24
 801a598:	af00      	add	r7, sp, #0
 801a59a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801a59c:	2300      	movs	r3, #0
 801a59e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a5a0:	4a48      	ldr	r2, [pc, #288]	@ (801a6c4 <SUBGRF_SetPacketParams+0x130>)
 801a5a2:	f107 030c 	add.w	r3, r7, #12
 801a5a6:	ca07      	ldmia	r2, {r0, r1, r2}
 801a5a8:	c303      	stmia	r3!, {r0, r1}
 801a5aa:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	781a      	ldrb	r2, [r3, #0]
 801a5b0:	4b45      	ldr	r3, [pc, #276]	@ (801a6c8 <SUBGRF_SetPacketParams+0x134>)
 801a5b2:	781b      	ldrb	r3, [r3, #0]
 801a5b4:	429a      	cmp	r2, r3
 801a5b6:	d004      	beq.n	801a5c2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	781b      	ldrb	r3, [r3, #0]
 801a5bc:	4618      	mov	r0, r3
 801a5be:	f7ff fe23 	bl	801a208 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	781b      	ldrb	r3, [r3, #0]
 801a5c6:	2b03      	cmp	r3, #3
 801a5c8:	d878      	bhi.n	801a6bc <SUBGRF_SetPacketParams+0x128>
 801a5ca:	a201      	add	r2, pc, #4	@ (adr r2, 801a5d0 <SUBGRF_SetPacketParams+0x3c>)
 801a5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5d0:	0801a5e1 	.word	0x0801a5e1
 801a5d4:	0801a671 	.word	0x0801a671
 801a5d8:	0801a665 	.word	0x0801a665
 801a5dc:	0801a5e1 	.word	0x0801a5e1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	7a5b      	ldrb	r3, [r3, #9]
 801a5e4:	2bf1      	cmp	r3, #241	@ 0xf1
 801a5e6:	d10a      	bne.n	801a5fe <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801a5e8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801a5ec:	f7ff faae 	bl	8019b4c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801a5f0:	f248 0005 	movw	r0, #32773	@ 0x8005
 801a5f4:	f7ff faca 	bl	8019b8c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801a5f8:	2302      	movs	r3, #2
 801a5fa:	75bb      	strb	r3, [r7, #22]
 801a5fc:	e011      	b.n	801a622 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	7a5b      	ldrb	r3, [r3, #9]
 801a602:	2bf2      	cmp	r3, #242	@ 0xf2
 801a604:	d10a      	bne.n	801a61c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801a606:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801a60a:	f7ff fa9f 	bl	8019b4c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801a60e:	f241 0021 	movw	r0, #4129	@ 0x1021
 801a612:	f7ff fabb 	bl	8019b8c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801a616:	2306      	movs	r3, #6
 801a618:	75bb      	strb	r3, [r7, #22]
 801a61a:	e002      	b.n	801a622 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	7a5b      	ldrb	r3, [r3, #9]
 801a620:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801a622:	2309      	movs	r3, #9
 801a624:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	885b      	ldrh	r3, [r3, #2]
 801a62a:	0a1b      	lsrs	r3, r3, #8
 801a62c:	b29b      	uxth	r3, r3
 801a62e:	b2db      	uxtb	r3, r3
 801a630:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	885b      	ldrh	r3, [r3, #2]
 801a636:	b2db      	uxtb	r3, r3
 801a638:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	791b      	ldrb	r3, [r3, #4]
 801a63e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	795b      	ldrb	r3, [r3, #5]
 801a644:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	799b      	ldrb	r3, [r3, #6]
 801a64a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	79db      	ldrb	r3, [r3, #7]
 801a650:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	7a1b      	ldrb	r3, [r3, #8]
 801a656:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801a658:	7dbb      	ldrb	r3, [r7, #22]
 801a65a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	7a9b      	ldrb	r3, [r3, #10]
 801a660:	753b      	strb	r3, [r7, #20]
        break;
 801a662:	e022      	b.n	801a6aa <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801a664:	2301      	movs	r3, #1
 801a666:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	7b1b      	ldrb	r3, [r3, #12]
 801a66c:	733b      	strb	r3, [r7, #12]
        break;
 801a66e:	e01c      	b.n	801a6aa <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801a670:	2306      	movs	r3, #6
 801a672:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	89db      	ldrh	r3, [r3, #14]
 801a678:	0a1b      	lsrs	r3, r3, #8
 801a67a:	b29b      	uxth	r3, r3
 801a67c:	b2db      	uxtb	r3, r3
 801a67e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	89db      	ldrh	r3, [r3, #14]
 801a684:	b2db      	uxtb	r3, r3
 801a686:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	7c1a      	ldrb	r2, [r3, #16]
 801a68c:	4b0f      	ldr	r3, [pc, #60]	@ (801a6cc <SUBGRF_SetPacketParams+0x138>)
 801a68e:	4611      	mov	r1, r2
 801a690:	7019      	strb	r1, [r3, #0]
 801a692:	4613      	mov	r3, r2
 801a694:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	7c5b      	ldrb	r3, [r3, #17]
 801a69a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	7c9b      	ldrb	r3, [r3, #18]
 801a6a0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	7cdb      	ldrb	r3, [r3, #19]
 801a6a6:	747b      	strb	r3, [r7, #17]
        break;
 801a6a8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801a6aa:	7dfb      	ldrb	r3, [r7, #23]
 801a6ac:	b29a      	uxth	r2, r3
 801a6ae:	f107 030c 	add.w	r3, r7, #12
 801a6b2:	4619      	mov	r1, r3
 801a6b4:	208c      	movs	r0, #140	@ 0x8c
 801a6b6:	f000 f965 	bl	801a984 <SUBGRF_WriteCommand>
 801a6ba:	e000      	b.n	801a6be <SUBGRF_SetPacketParams+0x12a>
        return;
 801a6bc:	bf00      	nop
}
 801a6be:	3718      	adds	r7, #24
 801a6c0:	46bd      	mov	sp, r7
 801a6c2:	bd80      	pop	{r7, pc}
 801a6c4:	0801f978 	.word	0x0801f978
 801a6c8:	20001dc9 	.word	0x20001dc9
 801a6cc:	20001dca 	.word	0x20001dca

0801a6d0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801a6d0:	b580      	push	{r7, lr}
 801a6d2:	b084      	sub	sp, #16
 801a6d4:	af00      	add	r7, sp, #0
 801a6d6:	4603      	mov	r3, r0
 801a6d8:	460a      	mov	r2, r1
 801a6da:	71fb      	strb	r3, [r7, #7]
 801a6dc:	4613      	mov	r3, r2
 801a6de:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801a6e0:	79fb      	ldrb	r3, [r7, #7]
 801a6e2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801a6e4:	79bb      	ldrb	r3, [r7, #6]
 801a6e6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801a6e8:	f107 030c 	add.w	r3, r7, #12
 801a6ec:	2202      	movs	r2, #2
 801a6ee:	4619      	mov	r1, r3
 801a6f0:	208f      	movs	r0, #143	@ 0x8f
 801a6f2:	f000 f947 	bl	801a984 <SUBGRF_WriteCommand>
}
 801a6f6:	bf00      	nop
 801a6f8:	3710      	adds	r7, #16
 801a6fa:	46bd      	mov	sp, r7
 801a6fc:	bd80      	pop	{r7, pc}

0801a6fe <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801a6fe:	b580      	push	{r7, lr}
 801a700:	b082      	sub	sp, #8
 801a702:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801a704:	2300      	movs	r3, #0
 801a706:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801a708:	1d3b      	adds	r3, r7, #4
 801a70a:	2201      	movs	r2, #1
 801a70c:	4619      	mov	r1, r3
 801a70e:	2015      	movs	r0, #21
 801a710:	f000 f95a 	bl	801a9c8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801a714:	793b      	ldrb	r3, [r7, #4]
 801a716:	425b      	negs	r3, r3
 801a718:	105b      	asrs	r3, r3, #1
 801a71a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801a71c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a720:	4618      	mov	r0, r3
 801a722:	3708      	adds	r7, #8
 801a724:	46bd      	mov	sp, r7
 801a726:	bd80      	pop	{r7, pc}

0801a728 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801a728:	b580      	push	{r7, lr}
 801a72a:	b084      	sub	sp, #16
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	6078      	str	r0, [r7, #4]
 801a730:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801a732:	f107 030c 	add.w	r3, r7, #12
 801a736:	2202      	movs	r2, #2
 801a738:	4619      	mov	r1, r3
 801a73a:	2013      	movs	r0, #19
 801a73c:	f000 f944 	bl	801a9c8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801a740:	f7ff fd7e 	bl	801a240 <SUBGRF_GetPacketType>
 801a744:	4603      	mov	r3, r0
 801a746:	2b01      	cmp	r3, #1
 801a748:	d10d      	bne.n	801a766 <SUBGRF_GetRxBufferStatus+0x3e>
 801a74a:	4b0c      	ldr	r3, [pc, #48]	@ (801a77c <SUBGRF_GetRxBufferStatus+0x54>)
 801a74c:	781b      	ldrb	r3, [r3, #0]
 801a74e:	b2db      	uxtb	r3, r3
 801a750:	2b01      	cmp	r3, #1
 801a752:	d108      	bne.n	801a766 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801a754:	f240 7002 	movw	r0, #1794	@ 0x702
 801a758:	f000 f878 	bl	801a84c <SUBGRF_ReadRegister>
 801a75c:	4603      	mov	r3, r0
 801a75e:	461a      	mov	r2, r3
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	701a      	strb	r2, [r3, #0]
 801a764:	e002      	b.n	801a76c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801a766:	7b3a      	ldrb	r2, [r7, #12]
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801a76c:	7b7a      	ldrb	r2, [r7, #13]
 801a76e:	683b      	ldr	r3, [r7, #0]
 801a770:	701a      	strb	r2, [r3, #0]
}
 801a772:	bf00      	nop
 801a774:	3710      	adds	r7, #16
 801a776:	46bd      	mov	sp, r7
 801a778:	bd80      	pop	{r7, pc}
 801a77a:	bf00      	nop
 801a77c:	20001dca 	.word	0x20001dca

0801a780 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801a780:	b580      	push	{r7, lr}
 801a782:	b084      	sub	sp, #16
 801a784:	af00      	add	r7, sp, #0
 801a786:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801a788:	f107 030c 	add.w	r3, r7, #12
 801a78c:	2203      	movs	r2, #3
 801a78e:	4619      	mov	r1, r3
 801a790:	2014      	movs	r0, #20
 801a792:	f000 f919 	bl	801a9c8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801a796:	f7ff fd53 	bl	801a240 <SUBGRF_GetPacketType>
 801a79a:	4603      	mov	r3, r0
 801a79c:	461a      	mov	r2, r3
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	781b      	ldrb	r3, [r3, #0]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d002      	beq.n	801a7b0 <SUBGRF_GetPacketStatus+0x30>
 801a7aa:	2b01      	cmp	r3, #1
 801a7ac:	d013      	beq.n	801a7d6 <SUBGRF_GetPacketStatus+0x56>
 801a7ae:	e02a      	b.n	801a806 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801a7b0:	7b3a      	ldrb	r2, [r7, #12]
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801a7b6:	7b7b      	ldrb	r3, [r7, #13]
 801a7b8:	425b      	negs	r3, r3
 801a7ba:	105b      	asrs	r3, r3, #1
 801a7bc:	b25a      	sxtb	r2, r3
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801a7c2:	7bbb      	ldrb	r3, [r7, #14]
 801a7c4:	425b      	negs	r3, r3
 801a7c6:	105b      	asrs	r3, r3, #1
 801a7c8:	b25a      	sxtb	r2, r3
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	2200      	movs	r2, #0
 801a7d2:	609a      	str	r2, [r3, #8]
            break;
 801a7d4:	e020      	b.n	801a818 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801a7d6:	7b3b      	ldrb	r3, [r7, #12]
 801a7d8:	425b      	negs	r3, r3
 801a7da:	105b      	asrs	r3, r3, #1
 801a7dc:	b25a      	sxtb	r2, r3
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801a7e2:	7b7b      	ldrb	r3, [r7, #13]
 801a7e4:	b25b      	sxtb	r3, r3
 801a7e6:	3302      	adds	r3, #2
 801a7e8:	109b      	asrs	r3, r3, #2
 801a7ea:	b25a      	sxtb	r2, r3
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801a7f0:	7bbb      	ldrb	r3, [r7, #14]
 801a7f2:	425b      	negs	r3, r3
 801a7f4:	105b      	asrs	r3, r3, #1
 801a7f6:	b25a      	sxtb	r2, r3
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801a7fc:	4b08      	ldr	r3, [pc, #32]	@ (801a820 <SUBGRF_GetPacketStatus+0xa0>)
 801a7fe:	681a      	ldr	r2, [r3, #0]
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	611a      	str	r2, [r3, #16]
            break;
 801a804:	e008      	b.n	801a818 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801a806:	2214      	movs	r2, #20
 801a808:	2100      	movs	r1, #0
 801a80a:	6878      	ldr	r0, [r7, #4]
 801a80c:	f000 fbf3 	bl	801aff6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	220f      	movs	r2, #15
 801a814:	701a      	strb	r2, [r3, #0]
            break;
 801a816:	bf00      	nop
    }
}
 801a818:	bf00      	nop
 801a81a:	3710      	adds	r7, #16
 801a81c:	46bd      	mov	sp, r7
 801a81e:	bd80      	pop	{r7, pc}
 801a820:	20001dcc 	.word	0x20001dcc

0801a824 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801a824:	b580      	push	{r7, lr}
 801a826:	b082      	sub	sp, #8
 801a828:	af00      	add	r7, sp, #0
 801a82a:	4603      	mov	r3, r0
 801a82c:	460a      	mov	r2, r1
 801a82e:	80fb      	strh	r3, [r7, #6]
 801a830:	4613      	mov	r3, r2
 801a832:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801a834:	1d7a      	adds	r2, r7, #5
 801a836:	88f9      	ldrh	r1, [r7, #6]
 801a838:	2301      	movs	r3, #1
 801a83a:	4803      	ldr	r0, [pc, #12]	@ (801a848 <SUBGRF_WriteRegister+0x24>)
 801a83c:	f7ed f8c0 	bl	80079c0 <HAL_SUBGHZ_WriteRegisters>
}
 801a840:	bf00      	nop
 801a842:	3708      	adds	r7, #8
 801a844:	46bd      	mov	sp, r7
 801a846:	bd80      	pop	{r7, pc}
 801a848:	20000410 	.word	0x20000410

0801a84c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801a84c:	b580      	push	{r7, lr}
 801a84e:	b084      	sub	sp, #16
 801a850:	af00      	add	r7, sp, #0
 801a852:	4603      	mov	r3, r0
 801a854:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801a856:	f107 020f 	add.w	r2, r7, #15
 801a85a:	88f9      	ldrh	r1, [r7, #6]
 801a85c:	2301      	movs	r3, #1
 801a85e:	4804      	ldr	r0, [pc, #16]	@ (801a870 <SUBGRF_ReadRegister+0x24>)
 801a860:	f7ed f90d 	bl	8007a7e <HAL_SUBGHZ_ReadRegisters>
    return data;
 801a864:	7bfb      	ldrb	r3, [r7, #15]
}
 801a866:	4618      	mov	r0, r3
 801a868:	3710      	adds	r7, #16
 801a86a:	46bd      	mov	sp, r7
 801a86c:	bd80      	pop	{r7, pc}
 801a86e:	bf00      	nop
 801a870:	20000410 	.word	0x20000410

0801a874 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a874:	b580      	push	{r7, lr}
 801a876:	b086      	sub	sp, #24
 801a878:	af00      	add	r7, sp, #0
 801a87a:	4603      	mov	r3, r0
 801a87c:	6039      	str	r1, [r7, #0]
 801a87e:	80fb      	strh	r3, [r7, #6]
 801a880:	4613      	mov	r3, r2
 801a882:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a884:	f3ef 8310 	mrs	r3, PRIMASK
 801a888:	60fb      	str	r3, [r7, #12]
  return(result);
 801a88a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a88c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a88e:	b672      	cpsid	i
}
 801a890:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801a892:	88bb      	ldrh	r3, [r7, #4]
 801a894:	88f9      	ldrh	r1, [r7, #6]
 801a896:	683a      	ldr	r2, [r7, #0]
 801a898:	4806      	ldr	r0, [pc, #24]	@ (801a8b4 <SUBGRF_WriteRegisters+0x40>)
 801a89a:	f7ed f891 	bl	80079c0 <HAL_SUBGHZ_WriteRegisters>
 801a89e:	697b      	ldr	r3, [r7, #20]
 801a8a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8a2:	693b      	ldr	r3, [r7, #16]
 801a8a4:	f383 8810 	msr	PRIMASK, r3
}
 801a8a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a8aa:	bf00      	nop
 801a8ac:	3718      	adds	r7, #24
 801a8ae:	46bd      	mov	sp, r7
 801a8b0:	bd80      	pop	{r7, pc}
 801a8b2:	bf00      	nop
 801a8b4:	20000410 	.word	0x20000410

0801a8b8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b086      	sub	sp, #24
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	4603      	mov	r3, r0
 801a8c0:	6039      	str	r1, [r7, #0]
 801a8c2:	80fb      	strh	r3, [r7, #6]
 801a8c4:	4613      	mov	r3, r2
 801a8c6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a8c8:	f3ef 8310 	mrs	r3, PRIMASK
 801a8cc:	60fb      	str	r3, [r7, #12]
  return(result);
 801a8ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a8d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a8d2:	b672      	cpsid	i
}
 801a8d4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801a8d6:	88bb      	ldrh	r3, [r7, #4]
 801a8d8:	88f9      	ldrh	r1, [r7, #6]
 801a8da:	683a      	ldr	r2, [r7, #0]
 801a8dc:	4806      	ldr	r0, [pc, #24]	@ (801a8f8 <SUBGRF_ReadRegisters+0x40>)
 801a8de:	f7ed f8ce 	bl	8007a7e <HAL_SUBGHZ_ReadRegisters>
 801a8e2:	697b      	ldr	r3, [r7, #20]
 801a8e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8e6:	693b      	ldr	r3, [r7, #16]
 801a8e8:	f383 8810 	msr	PRIMASK, r3
}
 801a8ec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a8ee:	bf00      	nop
 801a8f0:	3718      	adds	r7, #24
 801a8f2:	46bd      	mov	sp, r7
 801a8f4:	bd80      	pop	{r7, pc}
 801a8f6:	bf00      	nop
 801a8f8:	20000410 	.word	0x20000410

0801a8fc <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a8fc:	b580      	push	{r7, lr}
 801a8fe:	b086      	sub	sp, #24
 801a900:	af00      	add	r7, sp, #0
 801a902:	4603      	mov	r3, r0
 801a904:	6039      	str	r1, [r7, #0]
 801a906:	71fb      	strb	r3, [r7, #7]
 801a908:	4613      	mov	r3, r2
 801a90a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a90c:	f3ef 8310 	mrs	r3, PRIMASK
 801a910:	60fb      	str	r3, [r7, #12]
  return(result);
 801a912:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a914:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a916:	b672      	cpsid	i
}
 801a918:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801a91a:	79bb      	ldrb	r3, [r7, #6]
 801a91c:	b29b      	uxth	r3, r3
 801a91e:	79f9      	ldrb	r1, [r7, #7]
 801a920:	683a      	ldr	r2, [r7, #0]
 801a922:	4806      	ldr	r0, [pc, #24]	@ (801a93c <SUBGRF_WriteBuffer+0x40>)
 801a924:	f7ed f9bf 	bl	8007ca6 <HAL_SUBGHZ_WriteBuffer>
 801a928:	697b      	ldr	r3, [r7, #20]
 801a92a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a92c:	693b      	ldr	r3, [r7, #16]
 801a92e:	f383 8810 	msr	PRIMASK, r3
}
 801a932:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a934:	bf00      	nop
 801a936:	3718      	adds	r7, #24
 801a938:	46bd      	mov	sp, r7
 801a93a:	bd80      	pop	{r7, pc}
 801a93c:	20000410 	.word	0x20000410

0801a940 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a940:	b580      	push	{r7, lr}
 801a942:	b086      	sub	sp, #24
 801a944:	af00      	add	r7, sp, #0
 801a946:	4603      	mov	r3, r0
 801a948:	6039      	str	r1, [r7, #0]
 801a94a:	71fb      	strb	r3, [r7, #7]
 801a94c:	4613      	mov	r3, r2
 801a94e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a950:	f3ef 8310 	mrs	r3, PRIMASK
 801a954:	60fb      	str	r3, [r7, #12]
  return(result);
 801a956:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a958:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a95a:	b672      	cpsid	i
}
 801a95c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801a95e:	79bb      	ldrb	r3, [r7, #6]
 801a960:	b29b      	uxth	r3, r3
 801a962:	79f9      	ldrb	r1, [r7, #7]
 801a964:	683a      	ldr	r2, [r7, #0]
 801a966:	4806      	ldr	r0, [pc, #24]	@ (801a980 <SUBGRF_ReadBuffer+0x40>)
 801a968:	f7ed f9f0 	bl	8007d4c <HAL_SUBGHZ_ReadBuffer>
 801a96c:	697b      	ldr	r3, [r7, #20]
 801a96e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a970:	693b      	ldr	r3, [r7, #16]
 801a972:	f383 8810 	msr	PRIMASK, r3
}
 801a976:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a978:	bf00      	nop
 801a97a:	3718      	adds	r7, #24
 801a97c:	46bd      	mov	sp, r7
 801a97e:	bd80      	pop	{r7, pc}
 801a980:	20000410 	.word	0x20000410

0801a984 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a984:	b580      	push	{r7, lr}
 801a986:	b086      	sub	sp, #24
 801a988:	af00      	add	r7, sp, #0
 801a98a:	4603      	mov	r3, r0
 801a98c:	6039      	str	r1, [r7, #0]
 801a98e:	71fb      	strb	r3, [r7, #7]
 801a990:	4613      	mov	r3, r2
 801a992:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a994:	f3ef 8310 	mrs	r3, PRIMASK
 801a998:	60fb      	str	r3, [r7, #12]
  return(result);
 801a99a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a99c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a99e:	b672      	cpsid	i
}
 801a9a0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801a9a2:	88bb      	ldrh	r3, [r7, #4]
 801a9a4:	79f9      	ldrb	r1, [r7, #7]
 801a9a6:	683a      	ldr	r2, [r7, #0]
 801a9a8:	4806      	ldr	r0, [pc, #24]	@ (801a9c4 <SUBGRF_WriteCommand+0x40>)
 801a9aa:	f7ed f8c9 	bl	8007b40 <HAL_SUBGHZ_ExecSetCmd>
 801a9ae:	697b      	ldr	r3, [r7, #20]
 801a9b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a9b2:	693b      	ldr	r3, [r7, #16]
 801a9b4:	f383 8810 	msr	PRIMASK, r3
}
 801a9b8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a9ba:	bf00      	nop
 801a9bc:	3718      	adds	r7, #24
 801a9be:	46bd      	mov	sp, r7
 801a9c0:	bd80      	pop	{r7, pc}
 801a9c2:	bf00      	nop
 801a9c4:	20000410 	.word	0x20000410

0801a9c8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a9c8:	b580      	push	{r7, lr}
 801a9ca:	b086      	sub	sp, #24
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	4603      	mov	r3, r0
 801a9d0:	6039      	str	r1, [r7, #0]
 801a9d2:	71fb      	strb	r3, [r7, #7]
 801a9d4:	4613      	mov	r3, r2
 801a9d6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9d8:	f3ef 8310 	mrs	r3, PRIMASK
 801a9dc:	60fb      	str	r3, [r7, #12]
  return(result);
 801a9de:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a9e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a9e2:	b672      	cpsid	i
}
 801a9e4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801a9e6:	88bb      	ldrh	r3, [r7, #4]
 801a9e8:	79f9      	ldrb	r1, [r7, #7]
 801a9ea:	683a      	ldr	r2, [r7, #0]
 801a9ec:	4806      	ldr	r0, [pc, #24]	@ (801aa08 <SUBGRF_ReadCommand+0x40>)
 801a9ee:	f7ed f906 	bl	8007bfe <HAL_SUBGHZ_ExecGetCmd>
 801a9f2:	697b      	ldr	r3, [r7, #20]
 801a9f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a9f6:	693b      	ldr	r3, [r7, #16]
 801a9f8:	f383 8810 	msr	PRIMASK, r3
}
 801a9fc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a9fe:	bf00      	nop
 801aa00:	3718      	adds	r7, #24
 801aa02:	46bd      	mov	sp, r7
 801aa04:	bd80      	pop	{r7, pc}
 801aa06:	bf00      	nop
 801aa08:	20000410 	.word	0x20000410

0801aa0c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801aa0c:	b580      	push	{r7, lr}
 801aa0e:	b084      	sub	sp, #16
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	4603      	mov	r3, r0
 801aa14:	460a      	mov	r2, r1
 801aa16:	71fb      	strb	r3, [r7, #7]
 801aa18:	4613      	mov	r3, r2
 801aa1a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801aa1c:	2301      	movs	r3, #1
 801aa1e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801aa20:	79bb      	ldrb	r3, [r7, #6]
 801aa22:	2b01      	cmp	r3, #1
 801aa24:	d10d      	bne.n	801aa42 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801aa26:	79fb      	ldrb	r3, [r7, #7]
 801aa28:	2b01      	cmp	r3, #1
 801aa2a:	d104      	bne.n	801aa36 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801aa2c:	2302      	movs	r3, #2
 801aa2e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801aa30:	2004      	movs	r0, #4
 801aa32:	f000 f8df 	bl	801abf4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801aa36:	79fb      	ldrb	r3, [r7, #7]
 801aa38:	2b02      	cmp	r3, #2
 801aa3a:	d107      	bne.n	801aa4c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801aa3c:	2303      	movs	r3, #3
 801aa3e:	73fb      	strb	r3, [r7, #15]
 801aa40:	e004      	b.n	801aa4c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801aa42:	79bb      	ldrb	r3, [r7, #6]
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d101      	bne.n	801aa4c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801aa48:	2301      	movs	r3, #1
 801aa4a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801aa4c:	7bfb      	ldrb	r3, [r7, #15]
 801aa4e:	4618      	mov	r0, r3
 801aa50:	f7f0 fd6d 	bl	800b52e <RBI_ConfigRFSwitch>
}
 801aa54:	bf00      	nop
 801aa56:	3710      	adds	r7, #16
 801aa58:	46bd      	mov	sp, r7
 801aa5a:	bd80      	pop	{r7, pc}

0801aa5c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801aa5c:	b580      	push	{r7, lr}
 801aa5e:	b084      	sub	sp, #16
 801aa60:	af00      	add	r7, sp, #0
 801aa62:	4603      	mov	r3, r0
 801aa64:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801aa66:	2301      	movs	r3, #1
 801aa68:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801aa6a:	f7f0 fd6e 	bl	800b54a <RBI_GetTxConfig>
 801aa6e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801aa70:	68bb      	ldr	r3, [r7, #8]
 801aa72:	2b02      	cmp	r3, #2
 801aa74:	d016      	beq.n	801aaa4 <SUBGRF_SetRfTxPower+0x48>
 801aa76:	68bb      	ldr	r3, [r7, #8]
 801aa78:	2b02      	cmp	r3, #2
 801aa7a:	dc16      	bgt.n	801aaaa <SUBGRF_SetRfTxPower+0x4e>
 801aa7c:	68bb      	ldr	r3, [r7, #8]
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d003      	beq.n	801aa8a <SUBGRF_SetRfTxPower+0x2e>
 801aa82:	68bb      	ldr	r3, [r7, #8]
 801aa84:	2b01      	cmp	r3, #1
 801aa86:	d00a      	beq.n	801aa9e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801aa88:	e00f      	b.n	801aaaa <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801aa8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aa8e:	2b0f      	cmp	r3, #15
 801aa90:	dd02      	ble.n	801aa98 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801aa92:	2302      	movs	r3, #2
 801aa94:	73fb      	strb	r3, [r7, #15]
            break;
 801aa96:	e009      	b.n	801aaac <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801aa98:	2301      	movs	r3, #1
 801aa9a:	73fb      	strb	r3, [r7, #15]
            break;
 801aa9c:	e006      	b.n	801aaac <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801aa9e:	2301      	movs	r3, #1
 801aaa0:	73fb      	strb	r3, [r7, #15]
            break;
 801aaa2:	e003      	b.n	801aaac <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801aaa4:	2302      	movs	r3, #2
 801aaa6:	73fb      	strb	r3, [r7, #15]
            break;
 801aaa8:	e000      	b.n	801aaac <SUBGRF_SetRfTxPower+0x50>
            break;
 801aaaa:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801aaac:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801aab0:	7bfb      	ldrb	r3, [r7, #15]
 801aab2:	2202      	movs	r2, #2
 801aab4:	4618      	mov	r0, r3
 801aab6:	f7ff fbcd 	bl	801a254 <SUBGRF_SetTxParams>

    return paSelect;
 801aaba:	7bfb      	ldrb	r3, [r7, #15]
}
 801aabc:	4618      	mov	r0, r3
 801aabe:	3710      	adds	r7, #16
 801aac0:	46bd      	mov	sp, r7
 801aac2:	bd80      	pop	{r7, pc}

0801aac4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801aac4:	b480      	push	{r7}
 801aac6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801aac8:	2301      	movs	r3, #1
}
 801aaca:	4618      	mov	r0, r3
 801aacc:	46bd      	mov	sp, r7
 801aace:	bc80      	pop	{r7}
 801aad0:	4770      	bx	lr
	...

0801aad4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aad4:	b580      	push	{r7, lr}
 801aad6:	b082      	sub	sp, #8
 801aad8:	af00      	add	r7, sp, #0
 801aada:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801aadc:	4b03      	ldr	r3, [pc, #12]	@ (801aaec <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	2001      	movs	r0, #1
 801aae2:	4798      	blx	r3
}
 801aae4:	bf00      	nop
 801aae6:	3708      	adds	r7, #8
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bd80      	pop	{r7, pc}
 801aaec:	20001dd4 	.word	0x20001dd4

0801aaf0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	b082      	sub	sp, #8
 801aaf4:	af00      	add	r7, sp, #0
 801aaf6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801aaf8:	4b03      	ldr	r3, [pc, #12]	@ (801ab08 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	2002      	movs	r0, #2
 801aafe:	4798      	blx	r3
}
 801ab00:	bf00      	nop
 801ab02:	3708      	adds	r7, #8
 801ab04:	46bd      	mov	sp, r7
 801ab06:	bd80      	pop	{r7, pc}
 801ab08:	20001dd4 	.word	0x20001dd4

0801ab0c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801ab0c:	b580      	push	{r7, lr}
 801ab0e:	b082      	sub	sp, #8
 801ab10:	af00      	add	r7, sp, #0
 801ab12:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801ab14:	4b03      	ldr	r3, [pc, #12]	@ (801ab24 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	2040      	movs	r0, #64	@ 0x40
 801ab1a:	4798      	blx	r3
}
 801ab1c:	bf00      	nop
 801ab1e:	3708      	adds	r7, #8
 801ab20:	46bd      	mov	sp, r7
 801ab22:	bd80      	pop	{r7, pc}
 801ab24:	20001dd4 	.word	0x20001dd4

0801ab28 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801ab28:	b580      	push	{r7, lr}
 801ab2a:	b082      	sub	sp, #8
 801ab2c:	af00      	add	r7, sp, #0
 801ab2e:	6078      	str	r0, [r7, #4]
 801ab30:	460b      	mov	r3, r1
 801ab32:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801ab34:	78fb      	ldrb	r3, [r7, #3]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d002      	beq.n	801ab40 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801ab3a:	2b01      	cmp	r3, #1
 801ab3c:	d005      	beq.n	801ab4a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801ab3e:	e00a      	b.n	801ab56 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801ab40:	4b07      	ldr	r3, [pc, #28]	@ (801ab60 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	2080      	movs	r0, #128	@ 0x80
 801ab46:	4798      	blx	r3
            break;
 801ab48:	e005      	b.n	801ab56 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801ab4a:	4b05      	ldr	r3, [pc, #20]	@ (801ab60 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801ab52:	4798      	blx	r3
            break;
 801ab54:	bf00      	nop
    }
}
 801ab56:	bf00      	nop
 801ab58:	3708      	adds	r7, #8
 801ab5a:	46bd      	mov	sp, r7
 801ab5c:	bd80      	pop	{r7, pc}
 801ab5e:	bf00      	nop
 801ab60:	20001dd4 	.word	0x20001dd4

0801ab64 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ab64:	b580      	push	{r7, lr}
 801ab66:	b082      	sub	sp, #8
 801ab68:	af00      	add	r7, sp, #0
 801ab6a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801ab6c:	4b04      	ldr	r3, [pc, #16]	@ (801ab80 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801ab74:	4798      	blx	r3
}
 801ab76:	bf00      	nop
 801ab78:	3708      	adds	r7, #8
 801ab7a:	46bd      	mov	sp, r7
 801ab7c:	bd80      	pop	{r7, pc}
 801ab7e:	bf00      	nop
 801ab80:	20001dd4 	.word	0x20001dd4

0801ab84 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b082      	sub	sp, #8
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801ab8c:	4b03      	ldr	r3, [pc, #12]	@ (801ab9c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	2020      	movs	r0, #32
 801ab92:	4798      	blx	r3
}
 801ab94:	bf00      	nop
 801ab96:	3708      	adds	r7, #8
 801ab98:	46bd      	mov	sp, r7
 801ab9a:	bd80      	pop	{r7, pc}
 801ab9c:	20001dd4 	.word	0x20001dd4

0801aba0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aba0:	b580      	push	{r7, lr}
 801aba2:	b082      	sub	sp, #8
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801aba8:	4b03      	ldr	r3, [pc, #12]	@ (801abb8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	2004      	movs	r0, #4
 801abae:	4798      	blx	r3
}
 801abb0:	bf00      	nop
 801abb2:	3708      	adds	r7, #8
 801abb4:	46bd      	mov	sp, r7
 801abb6:	bd80      	pop	{r7, pc}
 801abb8:	20001dd4 	.word	0x20001dd4

0801abbc <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801abbc:	b580      	push	{r7, lr}
 801abbe:	b082      	sub	sp, #8
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801abc4:	4b03      	ldr	r3, [pc, #12]	@ (801abd4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	2008      	movs	r0, #8
 801abca:	4798      	blx	r3
}
 801abcc:	bf00      	nop
 801abce:	3708      	adds	r7, #8
 801abd0:	46bd      	mov	sp, r7
 801abd2:	bd80      	pop	{r7, pc}
 801abd4:	20001dd4 	.word	0x20001dd4

0801abd8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801abd8:	b580      	push	{r7, lr}
 801abda:	b082      	sub	sp, #8
 801abdc:	af00      	add	r7, sp, #0
 801abde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801abe0:	4b03      	ldr	r3, [pc, #12]	@ (801abf0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	2010      	movs	r0, #16
 801abe6:	4798      	blx	r3
}
 801abe8:	bf00      	nop
 801abea:	3708      	adds	r7, #8
 801abec:	46bd      	mov	sp, r7
 801abee:	bd80      	pop	{r7, pc}
 801abf0:	20001dd4 	.word	0x20001dd4

0801abf4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801abf4:	b580      	push	{r7, lr}
 801abf6:	b084      	sub	sp, #16
 801abf8:	af00      	add	r7, sp, #0
 801abfa:	4603      	mov	r3, r0
 801abfc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801abfe:	f7f0 fcb2 	bl	800b566 <RBI_IsDCDC>
 801ac02:	4603      	mov	r3, r0
 801ac04:	2b01      	cmp	r3, #1
 801ac06:	d112      	bne.n	801ac2e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801ac08:	f640 1023 	movw	r0, #2339	@ 0x923
 801ac0c:	f7ff fe1e 	bl	801a84c <SUBGRF_ReadRegister>
 801ac10:	4603      	mov	r3, r0
 801ac12:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801ac14:	7bfb      	ldrb	r3, [r7, #15]
 801ac16:	f023 0306 	bic.w	r3, r3, #6
 801ac1a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801ac1c:	7bfa      	ldrb	r2, [r7, #15]
 801ac1e:	79fb      	ldrb	r3, [r7, #7]
 801ac20:	4313      	orrs	r3, r2
 801ac22:	b2db      	uxtb	r3, r3
 801ac24:	4619      	mov	r1, r3
 801ac26:	f640 1023 	movw	r0, #2339	@ 0x923
 801ac2a:	f7ff fdfb 	bl	801a824 <SUBGRF_WriteRegister>
  }
}
 801ac2e:	bf00      	nop
 801ac30:	3710      	adds	r7, #16
 801ac32:	46bd      	mov	sp, r7
 801ac34:	bd80      	pop	{r7, pc}
	...

0801ac38 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801ac38:	b480      	push	{r7}
 801ac3a:	b085      	sub	sp, #20
 801ac3c:	af00      	add	r7, sp, #0
 801ac3e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d101      	bne.n	801ac4a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801ac46:	231f      	movs	r3, #31
 801ac48:	e017      	b.n	801ac7a <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801ac4a:	2300      	movs	r3, #0
 801ac4c:	73fb      	strb	r3, [r7, #15]
 801ac4e:	e00f      	b.n	801ac70 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801ac50:	7bfb      	ldrb	r3, [r7, #15]
 801ac52:	4a0c      	ldr	r2, [pc, #48]	@ (801ac84 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801ac54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ac58:	687a      	ldr	r2, [r7, #4]
 801ac5a:	429a      	cmp	r2, r3
 801ac5c:	d205      	bcs.n	801ac6a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801ac5e:	7bfb      	ldrb	r3, [r7, #15]
 801ac60:	4a08      	ldr	r2, [pc, #32]	@ (801ac84 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801ac62:	00db      	lsls	r3, r3, #3
 801ac64:	4413      	add	r3, r2
 801ac66:	791b      	ldrb	r3, [r3, #4]
 801ac68:	e007      	b.n	801ac7a <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801ac6a:	7bfb      	ldrb	r3, [r7, #15]
 801ac6c:	3301      	adds	r3, #1
 801ac6e:	73fb      	strb	r3, [r7, #15]
 801ac70:	7bfb      	ldrb	r3, [r7, #15]
 801ac72:	2b15      	cmp	r3, #21
 801ac74:	d9ec      	bls.n	801ac50 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801ac76:	bf00      	nop
 801ac78:	e7fd      	b.n	801ac76 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	3714      	adds	r7, #20
 801ac7e:	46bd      	mov	sp, r7
 801ac80:	bc80      	pop	{r7}
 801ac82:	4770      	bx	lr
 801ac84:	0801ff64 	.word	0x0801ff64

0801ac88 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801ac88:	b580      	push	{r7, lr}
 801ac8a:	b08a      	sub	sp, #40	@ 0x28
 801ac8c:	af00      	add	r7, sp, #0
 801ac8e:	6078      	str	r0, [r7, #4]
 801ac90:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801ac92:	4b35      	ldr	r3, [pc, #212]	@ (801ad68 <SUBGRF_GetCFO+0xe0>)
 801ac94:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801ac96:	f640 0007 	movw	r0, #2055	@ 0x807
 801ac9a:	f7ff fdd7 	bl	801a84c <SUBGRF_ReadRegister>
 801ac9e:	4603      	mov	r3, r0
 801aca0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801aca2:	7ffb      	ldrb	r3, [r7, #31]
 801aca4:	08db      	lsrs	r3, r3, #3
 801aca6:	b2db      	uxtb	r3, r3
 801aca8:	f003 0303 	and.w	r3, r3, #3
 801acac:	3328      	adds	r3, #40	@ 0x28
 801acae:	443b      	add	r3, r7
 801acb0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801acb4:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801acb6:	7ffb      	ldrb	r3, [r7, #31]
 801acb8:	f003 0307 	and.w	r3, r3, #7
 801acbc:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801acbe:	7fba      	ldrb	r2, [r7, #30]
 801acc0:	7f7b      	ldrb	r3, [r7, #29]
 801acc2:	3b01      	subs	r3, #1
 801acc4:	fa02 f303 	lsl.w	r3, r2, r3
 801acc8:	461a      	mov	r2, r3
 801acca:	4b28      	ldr	r3, [pc, #160]	@ (801ad6c <SUBGRF_GetCFO+0xe4>)
 801accc:	fbb3 f3f2 	udiv	r3, r3, r2
 801acd0:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801acd2:	69ba      	ldr	r2, [r7, #24]
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	fbb2 f3f3 	udiv	r3, r2, r3
 801acda:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801acdc:	2301      	movs	r3, #1
 801acde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801ace2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ace6:	697a      	ldr	r2, [r7, #20]
 801ace8:	fb02 f303 	mul.w	r3, r2, r3
 801acec:	2b07      	cmp	r3, #7
 801acee:	d802      	bhi.n	801acf6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801acf0:	2302      	movs	r3, #2
 801acf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801acf6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801acfa:	697a      	ldr	r2, [r7, #20]
 801acfc:	fb02 f303 	mul.w	r3, r2, r3
 801ad00:	2b03      	cmp	r3, #3
 801ad02:	d802      	bhi.n	801ad0a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801ad04:	2304      	movs	r3, #4
 801ad06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801ad0a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801ad0e:	69bb      	ldr	r3, [r7, #24]
 801ad10:	fb02 f303 	mul.w	r3, r2, r3
 801ad14:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801ad16:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801ad1a:	f7ff fd97 	bl	801a84c <SUBGRF_ReadRegister>
 801ad1e:	4603      	mov	r3, r0
 801ad20:	021b      	lsls	r3, r3, #8
 801ad22:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801ad26:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801ad28:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801ad2c:	f7ff fd8e 	bl	801a84c <SUBGRF_ReadRegister>
 801ad30:	4603      	mov	r3, r0
 801ad32:	461a      	mov	r2, r3
 801ad34:	6a3b      	ldr	r3, [r7, #32]
 801ad36:	4313      	orrs	r3, r2
 801ad38:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801ad3a:	6a3b      	ldr	r3, [r7, #32]
 801ad3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d005      	beq.n	801ad50 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801ad44:	6a3b      	ldr	r3, [r7, #32]
 801ad46:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801ad4a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801ad4e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801ad50:	693b      	ldr	r3, [r7, #16]
 801ad52:	095b      	lsrs	r3, r3, #5
 801ad54:	6a3a      	ldr	r2, [r7, #32]
 801ad56:	fb02 f303 	mul.w	r3, r2, r3
 801ad5a:	11da      	asrs	r2, r3, #7
 801ad5c:	683b      	ldr	r3, [r7, #0]
 801ad5e:	601a      	str	r2, [r3, #0]
}
 801ad60:	bf00      	nop
 801ad62:	3728      	adds	r7, #40	@ 0x28
 801ad64:	46bd      	mov	sp, r7
 801ad66:	bd80      	pop	{r7, pc}
 801ad68:	0c0a0804 	.word	0x0c0a0804
 801ad6c:	01e84800 	.word	0x01e84800

0801ad70 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801ad70:	b480      	push	{r7}
 801ad72:	b087      	sub	sp, #28
 801ad74:	af00      	add	r7, sp, #0
 801ad76:	4603      	mov	r3, r0
 801ad78:	60b9      	str	r1, [r7, #8]
 801ad7a:	607a      	str	r2, [r7, #4]
 801ad7c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801ad7e:	2300      	movs	r3, #0
 801ad80:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801ad82:	f04f 33ff 	mov.w	r3, #4294967295
 801ad86:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801ad88:	697b      	ldr	r3, [r7, #20]
}
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	371c      	adds	r7, #28
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	bc80      	pop	{r7}
 801ad92:	4770      	bx	lr

0801ad94 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801ad94:	b480      	push	{r7}
 801ad96:	b087      	sub	sp, #28
 801ad98:	af00      	add	r7, sp, #0
 801ad9a:	4603      	mov	r3, r0
 801ad9c:	60b9      	str	r1, [r7, #8]
 801ad9e:	607a      	str	r2, [r7, #4]
 801ada0:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801ada2:	2300      	movs	r3, #0
 801ada4:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801ada6:	f04f 33ff 	mov.w	r3, #4294967295
 801adaa:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801adac:	697b      	ldr	r3, [r7, #20]
}
 801adae:	4618      	mov	r0, r3
 801adb0:	371c      	adds	r7, #28
 801adb2:	46bd      	mov	sp, r7
 801adb4:	bc80      	pop	{r7}
 801adb6:	4770      	bx	lr

0801adb8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801adb8:	b480      	push	{r7}
 801adba:	b085      	sub	sp, #20
 801adbc:	af00      	add	r7, sp, #0
 801adbe:	60f8      	str	r0, [r7, #12]
 801adc0:	60b9      	str	r1, [r7, #8]
 801adc2:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801adc4:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801adc8:	4618      	mov	r0, r3
 801adca:	3714      	adds	r7, #20
 801adcc:	46bd      	mov	sp, r7
 801adce:	bc80      	pop	{r7}
 801add0:	4770      	bx	lr

0801add2 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801add2:	b480      	push	{r7}
 801add4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801add6:	bf00      	nop
 801add8:	46bd      	mov	sp, r7
 801adda:	bc80      	pop	{r7}
 801addc:	4770      	bx	lr

0801adde <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801adde:	b480      	push	{r7}
 801ade0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801ade2:	2300      	movs	r3, #0
#endif
}
 801ade4:	4618      	mov	r0, r3
 801ade6:	46bd      	mov	sp, r7
 801ade8:	bc80      	pop	{r7}
 801adea:	4770      	bx	lr

0801adec <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801adec:	b480      	push	{r7}
 801adee:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801adf0:	2300      	movs	r3, #0
#endif
}
 801adf2:	4618      	mov	r0, r3
 801adf4:	46bd      	mov	sp, r7
 801adf6:	bc80      	pop	{r7}
 801adf8:	4770      	bx	lr

0801adfa <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801adfa:	b480      	push	{r7}
 801adfc:	b083      	sub	sp, #12
 801adfe:	af00      	add	r7, sp, #0
 801ae00:	4603      	mov	r3, r0
 801ae02:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801ae04:	bf00      	nop
 801ae06:	370c      	adds	r7, #12
 801ae08:	46bd      	mov	sp, r7
 801ae0a:	bc80      	pop	{r7}
 801ae0c:	4770      	bx	lr

0801ae0e <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801ae0e:	b480      	push	{r7}
 801ae10:	b087      	sub	sp, #28
 801ae12:	af00      	add	r7, sp, #0
 801ae14:	60f8      	str	r0, [r7, #12]
 801ae16:	460b      	mov	r3, r1
 801ae18:	607a      	str	r2, [r7, #4]
 801ae1a:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801ae1c:	f04f 33ff 	mov.w	r3, #4294967295
 801ae20:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801ae22:	697b      	ldr	r3, [r7, #20]
}
 801ae24:	4618      	mov	r0, r3
 801ae26:	371c      	adds	r7, #28
 801ae28:	46bd      	mov	sp, r7
 801ae2a:	bc80      	pop	{r7}
 801ae2c:	4770      	bx	lr

0801ae2e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801ae2e:	b480      	push	{r7}
 801ae30:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801ae32:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801ae36:	4618      	mov	r0, r3
 801ae38:	46bd      	mov	sp, r7
 801ae3a:	bc80      	pop	{r7}
 801ae3c:	4770      	bx	lr

0801ae3e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801ae3e:	b480      	push	{r7}
 801ae40:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801ae42:	bf00      	nop
 801ae44:	46bd      	mov	sp, r7
 801ae46:	bc80      	pop	{r7}
 801ae48:	4770      	bx	lr

0801ae4a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801ae4a:	b480      	push	{r7}
 801ae4c:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801ae4e:	bf00      	nop
 801ae50:	46bd      	mov	sp, r7
 801ae52:	bc80      	pop	{r7}
 801ae54:	4770      	bx	lr

0801ae56 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801ae56:	b480      	push	{r7}
 801ae58:	b083      	sub	sp, #12
 801ae5a:	af00      	add	r7, sp, #0
 801ae5c:	4603      	mov	r3, r0
 801ae5e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801ae60:	bf00      	nop
 801ae62:	370c      	adds	r7, #12
 801ae64:	46bd      	mov	sp, r7
 801ae66:	bc80      	pop	{r7}
 801ae68:	4770      	bx	lr
	...

0801ae6c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ae6c:	b480      	push	{r7}
 801ae6e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ae70:	4b04      	ldr	r3, [pc, #16]	@ (801ae84 <UTIL_LPM_Init+0x18>)
 801ae72:	2200      	movs	r2, #0
 801ae74:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ae76:	4b04      	ldr	r3, [pc, #16]	@ (801ae88 <UTIL_LPM_Init+0x1c>)
 801ae78:	2200      	movs	r2, #0
 801ae7a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ae7c:	bf00      	nop
 801ae7e:	46bd      	mov	sp, r7
 801ae80:	bc80      	pop	{r7}
 801ae82:	4770      	bx	lr
 801ae84:	20001dd8 	.word	0x20001dd8
 801ae88:	20001ddc 	.word	0x20001ddc

0801ae8c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ae8c:	b480      	push	{r7}
 801ae8e:	b087      	sub	sp, #28
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	6078      	str	r0, [r7, #4]
 801ae94:	460b      	mov	r3, r1
 801ae96:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae98:	f3ef 8310 	mrs	r3, PRIMASK
 801ae9c:	613b      	str	r3, [r7, #16]
  return(result);
 801ae9e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801aea0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801aea2:	b672      	cpsid	i
}
 801aea4:	bf00      	nop
  
  switch( state )
 801aea6:	78fb      	ldrb	r3, [r7, #3]
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d008      	beq.n	801aebe <UTIL_LPM_SetStopMode+0x32>
 801aeac:	2b01      	cmp	r3, #1
 801aeae:	d10e      	bne.n	801aece <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801aeb0:	4b0d      	ldr	r3, [pc, #52]	@ (801aee8 <UTIL_LPM_SetStopMode+0x5c>)
 801aeb2:	681a      	ldr	r2, [r3, #0]
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	4313      	orrs	r3, r2
 801aeb8:	4a0b      	ldr	r2, [pc, #44]	@ (801aee8 <UTIL_LPM_SetStopMode+0x5c>)
 801aeba:	6013      	str	r3, [r2, #0]
      break;
 801aebc:	e008      	b.n	801aed0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	43da      	mvns	r2, r3
 801aec2:	4b09      	ldr	r3, [pc, #36]	@ (801aee8 <UTIL_LPM_SetStopMode+0x5c>)
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	4013      	ands	r3, r2
 801aec8:	4a07      	ldr	r2, [pc, #28]	@ (801aee8 <UTIL_LPM_SetStopMode+0x5c>)
 801aeca:	6013      	str	r3, [r2, #0]
      break;
 801aecc:	e000      	b.n	801aed0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801aece:	bf00      	nop
 801aed0:	697b      	ldr	r3, [r7, #20]
 801aed2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aed4:	68fb      	ldr	r3, [r7, #12]
 801aed6:	f383 8810 	msr	PRIMASK, r3
}
 801aeda:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801aedc:	bf00      	nop
 801aede:	371c      	adds	r7, #28
 801aee0:	46bd      	mov	sp, r7
 801aee2:	bc80      	pop	{r7}
 801aee4:	4770      	bx	lr
 801aee6:	bf00      	nop
 801aee8:	20001dd8 	.word	0x20001dd8

0801aeec <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801aeec:	b480      	push	{r7}
 801aeee:	b087      	sub	sp, #28
 801aef0:	af00      	add	r7, sp, #0
 801aef2:	6078      	str	r0, [r7, #4]
 801aef4:	460b      	mov	r3, r1
 801aef6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aef8:	f3ef 8310 	mrs	r3, PRIMASK
 801aefc:	613b      	str	r3, [r7, #16]
  return(result);
 801aefe:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801af00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801af02:	b672      	cpsid	i
}
 801af04:	bf00      	nop
  
  switch(state)
 801af06:	78fb      	ldrb	r3, [r7, #3]
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d008      	beq.n	801af1e <UTIL_LPM_SetOffMode+0x32>
 801af0c:	2b01      	cmp	r3, #1
 801af0e:	d10e      	bne.n	801af2e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801af10:	4b0d      	ldr	r3, [pc, #52]	@ (801af48 <UTIL_LPM_SetOffMode+0x5c>)
 801af12:	681a      	ldr	r2, [r3, #0]
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	4313      	orrs	r3, r2
 801af18:	4a0b      	ldr	r2, [pc, #44]	@ (801af48 <UTIL_LPM_SetOffMode+0x5c>)
 801af1a:	6013      	str	r3, [r2, #0]
      break;
 801af1c:	e008      	b.n	801af30 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	43da      	mvns	r2, r3
 801af22:	4b09      	ldr	r3, [pc, #36]	@ (801af48 <UTIL_LPM_SetOffMode+0x5c>)
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	4013      	ands	r3, r2
 801af28:	4a07      	ldr	r2, [pc, #28]	@ (801af48 <UTIL_LPM_SetOffMode+0x5c>)
 801af2a:	6013      	str	r3, [r2, #0]
      break;
 801af2c:	e000      	b.n	801af30 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801af2e:	bf00      	nop
 801af30:	697b      	ldr	r3, [r7, #20]
 801af32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af34:	68fb      	ldr	r3, [r7, #12]
 801af36:	f383 8810 	msr	PRIMASK, r3
}
 801af3a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801af3c:	bf00      	nop
 801af3e:	371c      	adds	r7, #28
 801af40:	46bd      	mov	sp, r7
 801af42:	bc80      	pop	{r7}
 801af44:	4770      	bx	lr
 801af46:	bf00      	nop
 801af48:	20001ddc 	.word	0x20001ddc

0801af4c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801af4c:	b580      	push	{r7, lr}
 801af4e:	b084      	sub	sp, #16
 801af50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af52:	f3ef 8310 	mrs	r3, PRIMASK
 801af56:	60bb      	str	r3, [r7, #8]
  return(result);
 801af58:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801af5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801af5c:	b672      	cpsid	i
}
 801af5e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801af60:	4b12      	ldr	r3, [pc, #72]	@ (801afac <UTIL_LPM_EnterLowPower+0x60>)
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	2b00      	cmp	r3, #0
 801af66:	d006      	beq.n	801af76 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801af68:	4b11      	ldr	r3, [pc, #68]	@ (801afb0 <UTIL_LPM_EnterLowPower+0x64>)
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801af6e:	4b10      	ldr	r3, [pc, #64]	@ (801afb0 <UTIL_LPM_EnterLowPower+0x64>)
 801af70:	685b      	ldr	r3, [r3, #4]
 801af72:	4798      	blx	r3
 801af74:	e010      	b.n	801af98 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801af76:	4b0f      	ldr	r3, [pc, #60]	@ (801afb4 <UTIL_LPM_EnterLowPower+0x68>)
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d006      	beq.n	801af8c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801af7e:	4b0c      	ldr	r3, [pc, #48]	@ (801afb0 <UTIL_LPM_EnterLowPower+0x64>)
 801af80:	689b      	ldr	r3, [r3, #8]
 801af82:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801af84:	4b0a      	ldr	r3, [pc, #40]	@ (801afb0 <UTIL_LPM_EnterLowPower+0x64>)
 801af86:	68db      	ldr	r3, [r3, #12]
 801af88:	4798      	blx	r3
 801af8a:	e005      	b.n	801af98 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801af8c:	4b08      	ldr	r3, [pc, #32]	@ (801afb0 <UTIL_LPM_EnterLowPower+0x64>)
 801af8e:	691b      	ldr	r3, [r3, #16]
 801af90:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801af92:	4b07      	ldr	r3, [pc, #28]	@ (801afb0 <UTIL_LPM_EnterLowPower+0x64>)
 801af94:	695b      	ldr	r3, [r3, #20]
 801af96:	4798      	blx	r3
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	f383 8810 	msr	PRIMASK, r3
}
 801afa2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801afa4:	bf00      	nop
 801afa6:	3710      	adds	r7, #16
 801afa8:	46bd      	mov	sp, r7
 801afaa:	bd80      	pop	{r7, pc}
 801afac:	20001dd8 	.word	0x20001dd8
 801afb0:	0801f9dc 	.word	0x0801f9dc
 801afb4:	20001ddc 	.word	0x20001ddc

0801afb8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801afb8:	b480      	push	{r7}
 801afba:	b087      	sub	sp, #28
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	60f8      	str	r0, [r7, #12]
 801afc0:	60b9      	str	r1, [r7, #8]
 801afc2:	4613      	mov	r3, r2
 801afc4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801afca:	68bb      	ldr	r3, [r7, #8]
 801afcc:	613b      	str	r3, [r7, #16]

  while( size-- )
 801afce:	e007      	b.n	801afe0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801afd0:	693a      	ldr	r2, [r7, #16]
 801afd2:	1c53      	adds	r3, r2, #1
 801afd4:	613b      	str	r3, [r7, #16]
 801afd6:	697b      	ldr	r3, [r7, #20]
 801afd8:	1c59      	adds	r1, r3, #1
 801afda:	6179      	str	r1, [r7, #20]
 801afdc:	7812      	ldrb	r2, [r2, #0]
 801afde:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801afe0:	88fb      	ldrh	r3, [r7, #6]
 801afe2:	1e5a      	subs	r2, r3, #1
 801afe4:	80fa      	strh	r2, [r7, #6]
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d1f2      	bne.n	801afd0 <UTIL_MEM_cpy_8+0x18>
    }
}
 801afea:	bf00      	nop
 801afec:	bf00      	nop
 801afee:	371c      	adds	r7, #28
 801aff0:	46bd      	mov	sp, r7
 801aff2:	bc80      	pop	{r7}
 801aff4:	4770      	bx	lr

0801aff6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801aff6:	b480      	push	{r7}
 801aff8:	b085      	sub	sp, #20
 801affa:	af00      	add	r7, sp, #0
 801affc:	6078      	str	r0, [r7, #4]
 801affe:	460b      	mov	r3, r1
 801b000:	70fb      	strb	r3, [r7, #3]
 801b002:	4613      	mov	r3, r2
 801b004:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801b00a:	e004      	b.n	801b016 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801b00c:	68fb      	ldr	r3, [r7, #12]
 801b00e:	1c5a      	adds	r2, r3, #1
 801b010:	60fa      	str	r2, [r7, #12]
 801b012:	78fa      	ldrb	r2, [r7, #3]
 801b014:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b016:	883b      	ldrh	r3, [r7, #0]
 801b018:	1e5a      	subs	r2, r3, #1
 801b01a:	803a      	strh	r2, [r7, #0]
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d1f5      	bne.n	801b00c <UTIL_MEM_set_8+0x16>
  }
}
 801b020:	bf00      	nop
 801b022:	bf00      	nop
 801b024:	3714      	adds	r7, #20
 801b026:	46bd      	mov	sp, r7
 801b028:	bc80      	pop	{r7}
 801b02a:	4770      	bx	lr

0801b02c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801b02c:	b082      	sub	sp, #8
 801b02e:	b480      	push	{r7}
 801b030:	b087      	sub	sp, #28
 801b032:	af00      	add	r7, sp, #0
 801b034:	60f8      	str	r0, [r7, #12]
 801b036:	1d38      	adds	r0, r7, #4
 801b038:	e880 0006 	stmia.w	r0, {r1, r2}
 801b03c:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801b03e:	2300      	movs	r3, #0
 801b040:	613b      	str	r3, [r7, #16]
 801b042:	2300      	movs	r3, #0
 801b044:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801b046:	687a      	ldr	r2, [r7, #4]
 801b048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b04a:	4413      	add	r3, r2
 801b04c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801b04e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b052:	b29a      	uxth	r2, r3
 801b054:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801b058:	b29b      	uxth	r3, r3
 801b05a:	4413      	add	r3, r2
 801b05c:	b29b      	uxth	r3, r3
 801b05e:	b21b      	sxth	r3, r3
 801b060:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801b062:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b066:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801b06a:	db0a      	blt.n	801b082 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801b06c:	693b      	ldr	r3, [r7, #16]
 801b06e:	3301      	adds	r3, #1
 801b070:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801b072:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b076:	b29b      	uxth	r3, r3
 801b078:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801b07c:	b29b      	uxth	r3, r3
 801b07e:	b21b      	sxth	r3, r3
 801b080:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b082:	68fb      	ldr	r3, [r7, #12]
 801b084:	461a      	mov	r2, r3
 801b086:	f107 0310 	add.w	r3, r7, #16
 801b08a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b08e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b092:	68f8      	ldr	r0, [r7, #12]
 801b094:	371c      	adds	r7, #28
 801b096:	46bd      	mov	sp, r7
 801b098:	bc80      	pop	{r7}
 801b09a:	b002      	add	sp, #8
 801b09c:	4770      	bx	lr

0801b09e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801b09e:	b082      	sub	sp, #8
 801b0a0:	b480      	push	{r7}
 801b0a2:	b087      	sub	sp, #28
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	60f8      	str	r0, [r7, #12]
 801b0a8:	1d38      	adds	r0, r7, #4
 801b0aa:	e880 0006 	stmia.w	r0, {r1, r2}
 801b0ae:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	613b      	str	r3, [r7, #16]
 801b0b4:	2300      	movs	r3, #0
 801b0b6:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801b0b8:	687a      	ldr	r2, [r7, #4]
 801b0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0bc:	1ad3      	subs	r3, r2, r3
 801b0be:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801b0c0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b0c4:	b29a      	uxth	r2, r3
 801b0c6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801b0ca:	b29b      	uxth	r3, r3
 801b0cc:	1ad3      	subs	r3, r2, r3
 801b0ce:	b29b      	uxth	r3, r3
 801b0d0:	b21b      	sxth	r3, r3
 801b0d2:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801b0d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	da0a      	bge.n	801b0f2 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801b0dc:	693b      	ldr	r3, [r7, #16]
 801b0de:	3b01      	subs	r3, #1
 801b0e0:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801b0e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b0e6:	b29b      	uxth	r3, r3
 801b0e8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801b0ec:	b29b      	uxth	r3, r3
 801b0ee:	b21b      	sxth	r3, r3
 801b0f0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	461a      	mov	r2, r3
 801b0f6:	f107 0310 	add.w	r3, r7, #16
 801b0fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b0fe:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b102:	68f8      	ldr	r0, [r7, #12]
 801b104:	371c      	adds	r7, #28
 801b106:	46bd      	mov	sp, r7
 801b108:	bc80      	pop	{r7}
 801b10a:	b002      	add	sp, #8
 801b10c:	4770      	bx	lr
	...

0801b110 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801b110:	b580      	push	{r7, lr}
 801b112:	b088      	sub	sp, #32
 801b114:	af02      	add	r7, sp, #8
 801b116:	463b      	mov	r3, r7
 801b118:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b11c:	2300      	movs	r3, #0
 801b11e:	60bb      	str	r3, [r7, #8]
 801b120:	2300      	movs	r3, #0
 801b122:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b124:	4b10      	ldr	r3, [pc, #64]	@ (801b168 <SysTimeSet+0x58>)
 801b126:	691b      	ldr	r3, [r3, #16]
 801b128:	f107 0208 	add.w	r2, r7, #8
 801b12c:	3204      	adds	r2, #4
 801b12e:	4610      	mov	r0, r2
 801b130:	4798      	blx	r3
 801b132:	4603      	mov	r3, r0
 801b134:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801b136:	f107 0010 	add.w	r0, r7, #16
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	9300      	str	r3, [sp, #0]
 801b13e:	68bb      	ldr	r3, [r7, #8]
 801b140:	463a      	mov	r2, r7
 801b142:	ca06      	ldmia	r2, {r1, r2}
 801b144:	f7ff ffab 	bl	801b09e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801b148:	4b07      	ldr	r3, [pc, #28]	@ (801b168 <SysTimeSet+0x58>)
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	693a      	ldr	r2, [r7, #16]
 801b14e:	4610      	mov	r0, r2
 801b150:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801b152:	4b05      	ldr	r3, [pc, #20]	@ (801b168 <SysTimeSet+0x58>)
 801b154:	689b      	ldr	r3, [r3, #8]
 801b156:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b15a:	4610      	mov	r0, r2
 801b15c:	4798      	blx	r3
}
 801b15e:	bf00      	nop
 801b160:	3718      	adds	r7, #24
 801b162:	46bd      	mov	sp, r7
 801b164:	bd80      	pop	{r7, pc}
 801b166:	bf00      	nop
 801b168:	0801fac0 	.word	0x0801fac0

0801b16c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801b16c:	b580      	push	{r7, lr}
 801b16e:	b08a      	sub	sp, #40	@ 0x28
 801b170:	af02      	add	r7, sp, #8
 801b172:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b174:	2300      	movs	r3, #0
 801b176:	61bb      	str	r3, [r7, #24]
 801b178:	2300      	movs	r3, #0
 801b17a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801b17c:	2300      	movs	r3, #0
 801b17e:	613b      	str	r3, [r7, #16]
 801b180:	2300      	movs	r3, #0
 801b182:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b184:	4b14      	ldr	r3, [pc, #80]	@ (801b1d8 <SysTimeGet+0x6c>)
 801b186:	691b      	ldr	r3, [r3, #16]
 801b188:	f107 0218 	add.w	r2, r7, #24
 801b18c:	3204      	adds	r2, #4
 801b18e:	4610      	mov	r0, r2
 801b190:	4798      	blx	r3
 801b192:	4603      	mov	r3, r0
 801b194:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b196:	4b10      	ldr	r3, [pc, #64]	@ (801b1d8 <SysTimeGet+0x6c>)
 801b198:	68db      	ldr	r3, [r3, #12]
 801b19a:	4798      	blx	r3
 801b19c:	4603      	mov	r3, r0
 801b19e:	b21b      	sxth	r3, r3
 801b1a0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b1a2:	4b0d      	ldr	r3, [pc, #52]	@ (801b1d8 <SysTimeGet+0x6c>)
 801b1a4:	685b      	ldr	r3, [r3, #4]
 801b1a6:	4798      	blx	r3
 801b1a8:	4603      	mov	r3, r0
 801b1aa:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801b1ac:	f107 0010 	add.w	r0, r7, #16
 801b1b0:	69fb      	ldr	r3, [r7, #28]
 801b1b2:	9300      	str	r3, [sp, #0]
 801b1b4:	69bb      	ldr	r3, [r7, #24]
 801b1b6:	f107 0208 	add.w	r2, r7, #8
 801b1ba:	ca06      	ldmia	r2, {r1, r2}
 801b1bc:	f7ff ff36 	bl	801b02c <SysTimeAdd>

  return sysTime;
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	461a      	mov	r2, r3
 801b1c4:	f107 0310 	add.w	r3, r7, #16
 801b1c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b1cc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b1d0:	6878      	ldr	r0, [r7, #4]
 801b1d2:	3720      	adds	r7, #32
 801b1d4:	46bd      	mov	sp, r7
 801b1d6:	bd80      	pop	{r7, pc}
 801b1d8:	0801fac0 	.word	0x0801fac0

0801b1dc <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801b1dc:	b580      	push	{r7, lr}
 801b1de:	b084      	sub	sp, #16
 801b1e0:	af00      	add	r7, sp, #0
 801b1e2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b1e4:	2300      	movs	r3, #0
 801b1e6:	60bb      	str	r3, [r7, #8]
 801b1e8:	2300      	movs	r3, #0
 801b1ea:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b1ec:	4b0a      	ldr	r3, [pc, #40]	@ (801b218 <SysTimeGetMcuTime+0x3c>)
 801b1ee:	691b      	ldr	r3, [r3, #16]
 801b1f0:	f107 0208 	add.w	r2, r7, #8
 801b1f4:	3204      	adds	r2, #4
 801b1f6:	4610      	mov	r0, r2
 801b1f8:	4798      	blx	r3
 801b1fa:	4603      	mov	r3, r0
 801b1fc:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	461a      	mov	r2, r3
 801b202:	f107 0308 	add.w	r3, r7, #8
 801b206:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b20a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b20e:	6878      	ldr	r0, [r7, #4]
 801b210:	3710      	adds	r7, #16
 801b212:	46bd      	mov	sp, r7
 801b214:	bd80      	pop	{r7, pc}
 801b216:	bf00      	nop
 801b218:	0801fac0 	.word	0x0801fac0

0801b21c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801b21c:	b580      	push	{r7, lr}
 801b21e:	b088      	sub	sp, #32
 801b220:	af02      	add	r7, sp, #8
 801b222:	463b      	mov	r3, r7
 801b224:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b228:	4b0f      	ldr	r3, [pc, #60]	@ (801b268 <SysTimeToMs+0x4c>)
 801b22a:	68db      	ldr	r3, [r3, #12]
 801b22c:	4798      	blx	r3
 801b22e:	4603      	mov	r3, r0
 801b230:	b21b      	sxth	r3, r3
 801b232:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b234:	4b0c      	ldr	r3, [pc, #48]	@ (801b268 <SysTimeToMs+0x4c>)
 801b236:	685b      	ldr	r3, [r3, #4]
 801b238:	4798      	blx	r3
 801b23a:	4603      	mov	r3, r0
 801b23c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801b23e:	f107 0008 	add.w	r0, r7, #8
 801b242:	697b      	ldr	r3, [r7, #20]
 801b244:	9300      	str	r3, [sp, #0]
 801b246:	693b      	ldr	r3, [r7, #16]
 801b248:	463a      	mov	r2, r7
 801b24a:	ca06      	ldmia	r2, {r1, r2}
 801b24c:	f7ff ff27 	bl	801b09e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801b250:	68bb      	ldr	r3, [r7, #8]
 801b252:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801b256:	fb02 f303 	mul.w	r3, r2, r3
 801b25a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801b25e:	4413      	add	r3, r2
}
 801b260:	4618      	mov	r0, r3
 801b262:	3718      	adds	r7, #24
 801b264:	46bd      	mov	sp, r7
 801b266:	bd80      	pop	{r7, pc}
 801b268:	0801fac0 	.word	0x0801fac0

0801b26c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801b26c:	b580      	push	{r7, lr}
 801b26e:	b08a      	sub	sp, #40	@ 0x28
 801b270:	af02      	add	r7, sp, #8
 801b272:	6078      	str	r0, [r7, #4]
 801b274:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801b276:	683b      	ldr	r3, [r7, #0]
 801b278:	4a19      	ldr	r2, [pc, #100]	@ (801b2e0 <SysTimeFromMs+0x74>)
 801b27a:	fba2 2303 	umull	r2, r3, r2, r3
 801b27e:	099b      	lsrs	r3, r3, #6
 801b280:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801b282:	69fb      	ldr	r3, [r7, #28]
 801b284:	617b      	str	r3, [r7, #20]
 801b286:	683b      	ldr	r3, [r7, #0]
 801b288:	b29a      	uxth	r2, r3
 801b28a:	69fb      	ldr	r3, [r7, #28]
 801b28c:	b29b      	uxth	r3, r3
 801b28e:	4619      	mov	r1, r3
 801b290:	0149      	lsls	r1, r1, #5
 801b292:	1ac9      	subs	r1, r1, r3
 801b294:	0089      	lsls	r1, r1, #2
 801b296:	440b      	add	r3, r1
 801b298:	00db      	lsls	r3, r3, #3
 801b29a:	b29b      	uxth	r3, r3
 801b29c:	1ad3      	subs	r3, r2, r3
 801b29e:	b29b      	uxth	r3, r3
 801b2a0:	b21b      	sxth	r3, r3
 801b2a2:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801b2a4:	f107 030c 	add.w	r3, r7, #12
 801b2a8:	2200      	movs	r2, #0
 801b2aa:	601a      	str	r2, [r3, #0]
 801b2ac:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b2ae:	4b0d      	ldr	r3, [pc, #52]	@ (801b2e4 <SysTimeFromMs+0x78>)
 801b2b0:	68db      	ldr	r3, [r3, #12]
 801b2b2:	4798      	blx	r3
 801b2b4:	4603      	mov	r3, r0
 801b2b6:	b21b      	sxth	r3, r3
 801b2b8:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b2ba:	4b0a      	ldr	r3, [pc, #40]	@ (801b2e4 <SysTimeFromMs+0x78>)
 801b2bc:	685b      	ldr	r3, [r3, #4]
 801b2be:	4798      	blx	r3
 801b2c0:	4603      	mov	r3, r0
 801b2c2:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801b2c4:	6878      	ldr	r0, [r7, #4]
 801b2c6:	693b      	ldr	r3, [r7, #16]
 801b2c8:	9300      	str	r3, [sp, #0]
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	f107 0214 	add.w	r2, r7, #20
 801b2d0:	ca06      	ldmia	r2, {r1, r2}
 801b2d2:	f7ff feab 	bl	801b02c <SysTimeAdd>
}
 801b2d6:	6878      	ldr	r0, [r7, #4]
 801b2d8:	3720      	adds	r7, #32
 801b2da:	46bd      	mov	sp, r7
 801b2dc:	bd80      	pop	{r7, pc}
 801b2de:	bf00      	nop
 801b2e0:	10624dd3 	.word	0x10624dd3
 801b2e4:	0801fac0 	.word	0x0801fac0

0801b2e8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801b2e8:	b480      	push	{r7}
 801b2ea:	b085      	sub	sp, #20
 801b2ec:	af00      	add	r7, sp, #0
 801b2ee:	6078      	str	r0, [r7, #4]
  int i = 0;
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801b2f4:	e00e      	b.n	801b314 <ee_skip_atoi+0x2c>
 801b2f6:	68fa      	ldr	r2, [r7, #12]
 801b2f8:	4613      	mov	r3, r2
 801b2fa:	009b      	lsls	r3, r3, #2
 801b2fc:	4413      	add	r3, r2
 801b2fe:	005b      	lsls	r3, r3, #1
 801b300:	4618      	mov	r0, r3
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	1c59      	adds	r1, r3, #1
 801b308:	687a      	ldr	r2, [r7, #4]
 801b30a:	6011      	str	r1, [r2, #0]
 801b30c:	781b      	ldrb	r3, [r3, #0]
 801b30e:	4403      	add	r3, r0
 801b310:	3b30      	subs	r3, #48	@ 0x30
 801b312:	60fb      	str	r3, [r7, #12]
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	781b      	ldrb	r3, [r3, #0]
 801b31a:	2b2f      	cmp	r3, #47	@ 0x2f
 801b31c:	d904      	bls.n	801b328 <ee_skip_atoi+0x40>
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	781b      	ldrb	r3, [r3, #0]
 801b324:	2b39      	cmp	r3, #57	@ 0x39
 801b326:	d9e6      	bls.n	801b2f6 <ee_skip_atoi+0xe>
  return i;
 801b328:	68fb      	ldr	r3, [r7, #12]
}
 801b32a:	4618      	mov	r0, r3
 801b32c:	3714      	adds	r7, #20
 801b32e:	46bd      	mov	sp, r7
 801b330:	bc80      	pop	{r7}
 801b332:	4770      	bx	lr

0801b334 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801b334:	b480      	push	{r7}
 801b336:	b099      	sub	sp, #100	@ 0x64
 801b338:	af00      	add	r7, sp, #0
 801b33a:	60f8      	str	r0, [r7, #12]
 801b33c:	60b9      	str	r1, [r7, #8]
 801b33e:	607a      	str	r2, [r7, #4]
 801b340:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801b342:	4b71      	ldr	r3, [pc, #452]	@ (801b508 <ee_number+0x1d4>)
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801b348:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b34a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d002      	beq.n	801b358 <ee_number+0x24>
 801b352:	4b6e      	ldr	r3, [pc, #440]	@ (801b50c <ee_number+0x1d8>)
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801b358:	683b      	ldr	r3, [r7, #0]
 801b35a:	2b01      	cmp	r3, #1
 801b35c:	dd02      	ble.n	801b364 <ee_number+0x30>
 801b35e:	683b      	ldr	r3, [r7, #0]
 801b360:	2b24      	cmp	r3, #36	@ 0x24
 801b362:	dd01      	ble.n	801b368 <ee_number+0x34>
 801b364:	2300      	movs	r3, #0
 801b366:	e0ca      	b.n	801b4fe <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801b368:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b36a:	f003 0301 	and.w	r3, r3, #1
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d001      	beq.n	801b376 <ee_number+0x42>
 801b372:	2330      	movs	r3, #48	@ 0x30
 801b374:	e000      	b.n	801b378 <ee_number+0x44>
 801b376:	2320      	movs	r3, #32
 801b378:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801b37c:	2300      	movs	r3, #0
 801b37e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801b382:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b384:	f003 0302 	and.w	r3, r3, #2
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d00b      	beq.n	801b3a4 <ee_number+0x70>
  {
    if (num < 0)
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	2b00      	cmp	r3, #0
 801b390:	da08      	bge.n	801b3a4 <ee_number+0x70>
    {
      sign = '-';
 801b392:	232d      	movs	r3, #45	@ 0x2d
 801b394:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	425b      	negs	r3, r3
 801b39c:	607b      	str	r3, [r7, #4]
      size--;
 801b39e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b3a0:	3b01      	subs	r3, #1
 801b3a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801b3a4:	2300      	movs	r3, #0
 801b3a6:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d11e      	bne.n	801b3ec <ee_number+0xb8>
    tmp[i++] = '0';
 801b3ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b3b0:	1c5a      	adds	r2, r3, #1
 801b3b2:	657a      	str	r2, [r7, #84]	@ 0x54
 801b3b4:	3360      	adds	r3, #96	@ 0x60
 801b3b6:	443b      	add	r3, r7
 801b3b8:	2230      	movs	r2, #48	@ 0x30
 801b3ba:	f803 2c50 	strb.w	r2, [r3, #-80]
 801b3be:	e018      	b.n	801b3f2 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	683a      	ldr	r2, [r7, #0]
 801b3c4:	fbb3 f1f2 	udiv	r1, r3, r2
 801b3c8:	fb01 f202 	mul.w	r2, r1, r2
 801b3cc:	1a9b      	subs	r3, r3, r2
 801b3ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b3d0:	441a      	add	r2, r3
 801b3d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b3d4:	1c59      	adds	r1, r3, #1
 801b3d6:	6579      	str	r1, [r7, #84]	@ 0x54
 801b3d8:	7812      	ldrb	r2, [r2, #0]
 801b3da:	3360      	adds	r3, #96	@ 0x60
 801b3dc:	443b      	add	r3, r7
 801b3de:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801b3e2:	687a      	ldr	r2, [r7, #4]
 801b3e4:	683b      	ldr	r3, [r7, #0]
 801b3e6:	fbb2 f3f3 	udiv	r3, r2, r3
 801b3ea:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d1e6      	bne.n	801b3c0 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801b3f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b3f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b3f6:	429a      	cmp	r2, r3
 801b3f8:	dd01      	ble.n	801b3fe <ee_number+0xca>
 801b3fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b3fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801b3fe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b402:	1ad3      	subs	r3, r2, r3
 801b404:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801b406:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b408:	f003 0301 	and.w	r3, r3, #1
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d112      	bne.n	801b436 <ee_number+0x102>
 801b410:	e00c      	b.n	801b42c <ee_number+0xf8>
 801b412:	68fb      	ldr	r3, [r7, #12]
 801b414:	1c5a      	adds	r2, r3, #1
 801b416:	60fa      	str	r2, [r7, #12]
 801b418:	2220      	movs	r2, #32
 801b41a:	701a      	strb	r2, [r3, #0]
 801b41c:	68bb      	ldr	r3, [r7, #8]
 801b41e:	3b01      	subs	r3, #1
 801b420:	60bb      	str	r3, [r7, #8]
 801b422:	68bb      	ldr	r3, [r7, #8]
 801b424:	2b00      	cmp	r3, #0
 801b426:	d101      	bne.n	801b42c <ee_number+0xf8>
 801b428:	68fb      	ldr	r3, [r7, #12]
 801b42a:	e068      	b.n	801b4fe <ee_number+0x1ca>
 801b42c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b42e:	1e5a      	subs	r2, r3, #1
 801b430:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b432:	2b00      	cmp	r3, #0
 801b434:	dced      	bgt.n	801b412 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801b436:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d01b      	beq.n	801b476 <ee_number+0x142>
 801b43e:	68fb      	ldr	r3, [r7, #12]
 801b440:	1c5a      	adds	r2, r3, #1
 801b442:	60fa      	str	r2, [r7, #12]
 801b444:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801b448:	701a      	strb	r2, [r3, #0]
 801b44a:	68bb      	ldr	r3, [r7, #8]
 801b44c:	3b01      	subs	r3, #1
 801b44e:	60bb      	str	r3, [r7, #8]
 801b450:	68bb      	ldr	r3, [r7, #8]
 801b452:	2b00      	cmp	r3, #0
 801b454:	d10f      	bne.n	801b476 <ee_number+0x142>
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	e051      	b.n	801b4fe <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801b45a:	68fb      	ldr	r3, [r7, #12]
 801b45c:	1c5a      	adds	r2, r3, #1
 801b45e:	60fa      	str	r2, [r7, #12]
 801b460:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801b464:	701a      	strb	r2, [r3, #0]
 801b466:	68bb      	ldr	r3, [r7, #8]
 801b468:	3b01      	subs	r3, #1
 801b46a:	60bb      	str	r3, [r7, #8]
 801b46c:	68bb      	ldr	r3, [r7, #8]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d101      	bne.n	801b476 <ee_number+0x142>
 801b472:	68fb      	ldr	r3, [r7, #12]
 801b474:	e043      	b.n	801b4fe <ee_number+0x1ca>
 801b476:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b478:	1e5a      	subs	r2, r3, #1
 801b47a:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	dcec      	bgt.n	801b45a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801b480:	e00c      	b.n	801b49c <ee_number+0x168>
 801b482:	68fb      	ldr	r3, [r7, #12]
 801b484:	1c5a      	adds	r2, r3, #1
 801b486:	60fa      	str	r2, [r7, #12]
 801b488:	2230      	movs	r2, #48	@ 0x30
 801b48a:	701a      	strb	r2, [r3, #0]
 801b48c:	68bb      	ldr	r3, [r7, #8]
 801b48e:	3b01      	subs	r3, #1
 801b490:	60bb      	str	r3, [r7, #8]
 801b492:	68bb      	ldr	r3, [r7, #8]
 801b494:	2b00      	cmp	r3, #0
 801b496:	d101      	bne.n	801b49c <ee_number+0x168>
 801b498:	68fb      	ldr	r3, [r7, #12]
 801b49a:	e030      	b.n	801b4fe <ee_number+0x1ca>
 801b49c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b49e:	1e5a      	subs	r2, r3, #1
 801b4a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801b4a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b4a4:	429a      	cmp	r2, r3
 801b4a6:	dbec      	blt.n	801b482 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801b4a8:	e010      	b.n	801b4cc <ee_number+0x198>
 801b4aa:	68fb      	ldr	r3, [r7, #12]
 801b4ac:	1c5a      	adds	r2, r3, #1
 801b4ae:	60fa      	str	r2, [r7, #12]
 801b4b0:	f107 0110 	add.w	r1, r7, #16
 801b4b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b4b6:	440a      	add	r2, r1
 801b4b8:	7812      	ldrb	r2, [r2, #0]
 801b4ba:	701a      	strb	r2, [r3, #0]
 801b4bc:	68bb      	ldr	r3, [r7, #8]
 801b4be:	3b01      	subs	r3, #1
 801b4c0:	60bb      	str	r3, [r7, #8]
 801b4c2:	68bb      	ldr	r3, [r7, #8]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d101      	bne.n	801b4cc <ee_number+0x198>
 801b4c8:	68fb      	ldr	r3, [r7, #12]
 801b4ca:	e018      	b.n	801b4fe <ee_number+0x1ca>
 801b4cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b4ce:	1e5a      	subs	r2, r3, #1
 801b4d0:	657a      	str	r2, [r7, #84]	@ 0x54
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	dce9      	bgt.n	801b4aa <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801b4d6:	e00c      	b.n	801b4f2 <ee_number+0x1be>
 801b4d8:	68fb      	ldr	r3, [r7, #12]
 801b4da:	1c5a      	adds	r2, r3, #1
 801b4dc:	60fa      	str	r2, [r7, #12]
 801b4de:	2220      	movs	r2, #32
 801b4e0:	701a      	strb	r2, [r3, #0]
 801b4e2:	68bb      	ldr	r3, [r7, #8]
 801b4e4:	3b01      	subs	r3, #1
 801b4e6:	60bb      	str	r3, [r7, #8]
 801b4e8:	68bb      	ldr	r3, [r7, #8]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d101      	bne.n	801b4f2 <ee_number+0x1be>
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	e005      	b.n	801b4fe <ee_number+0x1ca>
 801b4f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b4f4:	1e5a      	subs	r2, r3, #1
 801b4f6:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	dced      	bgt.n	801b4d8 <ee_number+0x1a4>

  return str;
 801b4fc:	68fb      	ldr	r3, [r7, #12]
}
 801b4fe:	4618      	mov	r0, r3
 801b500:	3764      	adds	r7, #100	@ 0x64
 801b502:	46bd      	mov	sp, r7
 801b504:	bc80      	pop	{r7}
 801b506:	4770      	bx	lr
 801b508:	20000148 	.word	0x20000148
 801b50c:	2000014c 	.word	0x2000014c

0801b510 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801b510:	b580      	push	{r7, lr}
 801b512:	b092      	sub	sp, #72	@ 0x48
 801b514:	af04      	add	r7, sp, #16
 801b516:	60f8      	str	r0, [r7, #12]
 801b518:	60b9      	str	r1, [r7, #8]
 801b51a:	607a      	str	r2, [r7, #4]
 801b51c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801b51e:	68bb      	ldr	r3, [r7, #8]
 801b520:	2b00      	cmp	r3, #0
 801b522:	dc01      	bgt.n	801b528 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801b524:	2300      	movs	r3, #0
 801b526:	e13e      	b.n	801b7a6 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b52c:	e128      	b.n	801b780 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801b52e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	1ad2      	subs	r2, r2, r3
 801b534:	68bb      	ldr	r3, [r7, #8]
 801b536:	3b01      	subs	r3, #1
 801b538:	429a      	cmp	r2, r3
 801b53a:	f280 812e 	bge.w	801b79a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	781b      	ldrb	r3, [r3, #0]
 801b542:	2b25      	cmp	r3, #37	@ 0x25
 801b544:	d006      	beq.n	801b554 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801b546:	687a      	ldr	r2, [r7, #4]
 801b548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b54a:	1c59      	adds	r1, r3, #1
 801b54c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b54e:	7812      	ldrb	r2, [r2, #0]
 801b550:	701a      	strb	r2, [r3, #0]
      continue;
 801b552:	e112      	b.n	801b77a <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801b554:	2300      	movs	r3, #0
 801b556:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	3301      	adds	r3, #1
 801b55c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	781b      	ldrb	r3, [r3, #0]
 801b562:	2b30      	cmp	r3, #48	@ 0x30
 801b564:	d103      	bne.n	801b56e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801b566:	6a3b      	ldr	r3, [r7, #32]
 801b568:	f043 0301 	orr.w	r3, r3, #1
 801b56c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801b56e:	f04f 33ff 	mov.w	r3, #4294967295
 801b572:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	781b      	ldrb	r3, [r3, #0]
 801b578:	2b2f      	cmp	r3, #47	@ 0x2f
 801b57a:	d908      	bls.n	801b58e <tiny_vsnprintf_like+0x7e>
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	781b      	ldrb	r3, [r3, #0]
 801b580:	2b39      	cmp	r3, #57	@ 0x39
 801b582:	d804      	bhi.n	801b58e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801b584:	1d3b      	adds	r3, r7, #4
 801b586:	4618      	mov	r0, r3
 801b588:	f7ff feae 	bl	801b2e8 <ee_skip_atoi>
 801b58c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801b58e:	f04f 33ff 	mov.w	r3, #4294967295
 801b592:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801b594:	f04f 33ff 	mov.w	r3, #4294967295
 801b598:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801b59a:	230a      	movs	r3, #10
 801b59c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	781b      	ldrb	r3, [r3, #0]
 801b5a2:	3b58      	subs	r3, #88	@ 0x58
 801b5a4:	2b20      	cmp	r3, #32
 801b5a6:	f200 8094 	bhi.w	801b6d2 <tiny_vsnprintf_like+0x1c2>
 801b5aa:	a201      	add	r2, pc, #4	@ (adr r2, 801b5b0 <tiny_vsnprintf_like+0xa0>)
 801b5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b5b0:	0801b6bb 	.word	0x0801b6bb
 801b5b4:	0801b6d3 	.word	0x0801b6d3
 801b5b8:	0801b6d3 	.word	0x0801b6d3
 801b5bc:	0801b6d3 	.word	0x0801b6d3
 801b5c0:	0801b6d3 	.word	0x0801b6d3
 801b5c4:	0801b6d3 	.word	0x0801b6d3
 801b5c8:	0801b6d3 	.word	0x0801b6d3
 801b5cc:	0801b6d3 	.word	0x0801b6d3
 801b5d0:	0801b6d3 	.word	0x0801b6d3
 801b5d4:	0801b6d3 	.word	0x0801b6d3
 801b5d8:	0801b6d3 	.word	0x0801b6d3
 801b5dc:	0801b63f 	.word	0x0801b63f
 801b5e0:	0801b6c9 	.word	0x0801b6c9
 801b5e4:	0801b6d3 	.word	0x0801b6d3
 801b5e8:	0801b6d3 	.word	0x0801b6d3
 801b5ec:	0801b6d3 	.word	0x0801b6d3
 801b5f0:	0801b6d3 	.word	0x0801b6d3
 801b5f4:	0801b6c9 	.word	0x0801b6c9
 801b5f8:	0801b6d3 	.word	0x0801b6d3
 801b5fc:	0801b6d3 	.word	0x0801b6d3
 801b600:	0801b6d3 	.word	0x0801b6d3
 801b604:	0801b6d3 	.word	0x0801b6d3
 801b608:	0801b6d3 	.word	0x0801b6d3
 801b60c:	0801b6d3 	.word	0x0801b6d3
 801b610:	0801b6d3 	.word	0x0801b6d3
 801b614:	0801b6d3 	.word	0x0801b6d3
 801b618:	0801b6d3 	.word	0x0801b6d3
 801b61c:	0801b65f 	.word	0x0801b65f
 801b620:	0801b6d3 	.word	0x0801b6d3
 801b624:	0801b71f 	.word	0x0801b71f
 801b628:	0801b6d3 	.word	0x0801b6d3
 801b62c:	0801b6d3 	.word	0x0801b6d3
 801b630:	0801b6c3 	.word	0x0801b6c3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801b634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b636:	1c5a      	adds	r2, r3, #1
 801b638:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b63a:	2220      	movs	r2, #32
 801b63c:	701a      	strb	r2, [r3, #0]
 801b63e:	69fb      	ldr	r3, [r7, #28]
 801b640:	3b01      	subs	r3, #1
 801b642:	61fb      	str	r3, [r7, #28]
 801b644:	69fb      	ldr	r3, [r7, #28]
 801b646:	2b00      	cmp	r3, #0
 801b648:	dcf4      	bgt.n	801b634 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801b64a:	683b      	ldr	r3, [r7, #0]
 801b64c:	1d1a      	adds	r2, r3, #4
 801b64e:	603a      	str	r2, [r7, #0]
 801b650:	6819      	ldr	r1, [r3, #0]
 801b652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b654:	1c5a      	adds	r2, r3, #1
 801b656:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b658:	b2ca      	uxtb	r2, r1
 801b65a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801b65c:	e08d      	b.n	801b77a <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801b65e:	683b      	ldr	r3, [r7, #0]
 801b660:	1d1a      	adds	r2, r3, #4
 801b662:	603a      	str	r2, [r7, #0]
 801b664:	681b      	ldr	r3, [r3, #0]
 801b666:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801b668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d101      	bne.n	801b672 <tiny_vsnprintf_like+0x162>
 801b66e:	4b50      	ldr	r3, [pc, #320]	@ (801b7b0 <tiny_vsnprintf_like+0x2a0>)
 801b670:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801b672:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b674:	f7e4 fdd4 	bl	8000220 <strlen>
 801b678:	4603      	mov	r3, r0
 801b67a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801b67c:	e004      	b.n	801b688 <tiny_vsnprintf_like+0x178>
 801b67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b680:	1c5a      	adds	r2, r3, #1
 801b682:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b684:	2220      	movs	r2, #32
 801b686:	701a      	strb	r2, [r3, #0]
 801b688:	69fb      	ldr	r3, [r7, #28]
 801b68a:	1e5a      	subs	r2, r3, #1
 801b68c:	61fa      	str	r2, [r7, #28]
 801b68e:	693a      	ldr	r2, [r7, #16]
 801b690:	429a      	cmp	r2, r3
 801b692:	dbf4      	blt.n	801b67e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801b694:	2300      	movs	r3, #0
 801b696:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b698:	e00a      	b.n	801b6b0 <tiny_vsnprintf_like+0x1a0>
 801b69a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b69c:	1c53      	adds	r3, r2, #1
 801b69e:	627b      	str	r3, [r7, #36]	@ 0x24
 801b6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6a2:	1c59      	adds	r1, r3, #1
 801b6a4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b6a6:	7812      	ldrb	r2, [r2, #0]
 801b6a8:	701a      	strb	r2, [r3, #0]
 801b6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b6ac:	3301      	adds	r3, #1
 801b6ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b6b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b6b2:	693b      	ldr	r3, [r7, #16]
 801b6b4:	429a      	cmp	r2, r3
 801b6b6:	dbf0      	blt.n	801b69a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801b6b8:	e05f      	b.n	801b77a <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801b6ba:	6a3b      	ldr	r3, [r7, #32]
 801b6bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b6c0:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801b6c2:	2310      	movs	r3, #16
 801b6c4:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801b6c6:	e02b      	b.n	801b720 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801b6c8:	6a3b      	ldr	r3, [r7, #32]
 801b6ca:	f043 0302 	orr.w	r3, r3, #2
 801b6ce:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801b6d0:	e025      	b.n	801b71e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	781b      	ldrb	r3, [r3, #0]
 801b6d6:	2b25      	cmp	r3, #37	@ 0x25
 801b6d8:	d004      	beq.n	801b6e4 <tiny_vsnprintf_like+0x1d4>
 801b6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6dc:	1c5a      	adds	r2, r3, #1
 801b6de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b6e0:	2225      	movs	r2, #37	@ 0x25
 801b6e2:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801b6e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b6e6:	68fb      	ldr	r3, [r7, #12]
 801b6e8:	1ad2      	subs	r2, r2, r3
 801b6ea:	68bb      	ldr	r3, [r7, #8]
 801b6ec:	3b01      	subs	r3, #1
 801b6ee:	429a      	cmp	r2, r3
 801b6f0:	da16      	bge.n	801b720 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	781b      	ldrb	r3, [r3, #0]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d006      	beq.n	801b708 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801b6fa:	687a      	ldr	r2, [r7, #4]
 801b6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6fe:	1c59      	adds	r1, r3, #1
 801b700:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b702:	7812      	ldrb	r2, [r2, #0]
 801b704:	701a      	strb	r2, [r3, #0]
 801b706:	e002      	b.n	801b70e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	3b01      	subs	r3, #1
 801b70c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801b70e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	1ad2      	subs	r2, r2, r3
 801b714:	68bb      	ldr	r3, [r7, #8]
 801b716:	3b01      	subs	r3, #1
 801b718:	429a      	cmp	r2, r3
 801b71a:	db2d      	blt.n	801b778 <tiny_vsnprintf_like+0x268>
 801b71c:	e000      	b.n	801b720 <tiny_vsnprintf_like+0x210>
        break;
 801b71e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801b720:	697b      	ldr	r3, [r7, #20]
 801b722:	2b6c      	cmp	r3, #108	@ 0x6c
 801b724:	d105      	bne.n	801b732 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801b726:	683b      	ldr	r3, [r7, #0]
 801b728:	1d1a      	adds	r2, r3, #4
 801b72a:	603a      	str	r2, [r7, #0]
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	637b      	str	r3, [r7, #52]	@ 0x34
 801b730:	e00f      	b.n	801b752 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801b732:	6a3b      	ldr	r3, [r7, #32]
 801b734:	f003 0302 	and.w	r3, r3, #2
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d005      	beq.n	801b748 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801b73c:	683b      	ldr	r3, [r7, #0]
 801b73e:	1d1a      	adds	r2, r3, #4
 801b740:	603a      	str	r2, [r7, #0]
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	637b      	str	r3, [r7, #52]	@ 0x34
 801b746:	e004      	b.n	801b752 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801b748:	683b      	ldr	r3, [r7, #0]
 801b74a:	1d1a      	adds	r2, r3, #4
 801b74c:	603a      	str	r2, [r7, #0]
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801b752:	68bb      	ldr	r3, [r7, #8]
 801b754:	1e5a      	subs	r2, r3, #1
 801b756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b758:	68fb      	ldr	r3, [r7, #12]
 801b75a:	1acb      	subs	r3, r1, r3
 801b75c:	1ad1      	subs	r1, r2, r3
 801b75e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b760:	6a3b      	ldr	r3, [r7, #32]
 801b762:	9302      	str	r3, [sp, #8]
 801b764:	69bb      	ldr	r3, [r7, #24]
 801b766:	9301      	str	r3, [sp, #4]
 801b768:	69fb      	ldr	r3, [r7, #28]
 801b76a:	9300      	str	r3, [sp, #0]
 801b76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b76e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b770:	f7ff fde0 	bl	801b334 <ee_number>
 801b774:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801b776:	e000      	b.n	801b77a <tiny_vsnprintf_like+0x26a>
        continue;
 801b778:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	3301      	adds	r3, #1
 801b77e:	607b      	str	r3, [r7, #4]
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	781b      	ldrb	r3, [r3, #0]
 801b784:	2b00      	cmp	r3, #0
 801b786:	f47f aed2 	bne.w	801b52e <tiny_vsnprintf_like+0x1e>
 801b78a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b78c:	68fb      	ldr	r3, [r7, #12]
 801b78e:	1ad2      	subs	r2, r2, r3
 801b790:	68bb      	ldr	r3, [r7, #8]
 801b792:	3b01      	subs	r3, #1
 801b794:	429a      	cmp	r2, r3
 801b796:	f6bf aeca 	bge.w	801b52e <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801b79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b79c:	2200      	movs	r2, #0
 801b79e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801b7a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b7a2:	68fb      	ldr	r3, [r7, #12]
 801b7a4:	1ad3      	subs	r3, r2, r3
}
 801b7a6:	4618      	mov	r0, r3
 801b7a8:	3738      	adds	r7, #56	@ 0x38
 801b7aa:	46bd      	mov	sp, r7
 801b7ac:	bd80      	pop	{r7, pc}
 801b7ae:	bf00      	nop
 801b7b0:	0801f9d4 	.word	0x0801f9d4

0801b7b4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801b7b4:	b580      	push	{r7, lr}
 801b7b6:	b090      	sub	sp, #64	@ 0x40
 801b7b8:	af00      	add	r7, sp, #0
 801b7ba:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801b7bc:	4b73      	ldr	r3, [pc, #460]	@ (801b98c <UTIL_SEQ_Run+0x1d8>)
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801b7c2:	4b72      	ldr	r3, [pc, #456]	@ (801b98c <UTIL_SEQ_Run+0x1d8>)
 801b7c4:	681a      	ldr	r2, [r3, #0]
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	4013      	ands	r3, r2
 801b7ca:	4a70      	ldr	r2, [pc, #448]	@ (801b98c <UTIL_SEQ_Run+0x1d8>)
 801b7cc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801b7ce:	4b70      	ldr	r3, [pc, #448]	@ (801b990 <UTIL_SEQ_Run+0x1dc>)
 801b7d0:	681b      	ldr	r3, [r3, #0]
 801b7d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801b7d4:	4b6f      	ldr	r3, [pc, #444]	@ (801b994 <UTIL_SEQ_Run+0x1e0>)
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801b7da:	4b6f      	ldr	r3, [pc, #444]	@ (801b998 <UTIL_SEQ_Run+0x1e4>)
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801b7e0:	4b6e      	ldr	r3, [pc, #440]	@ (801b99c <UTIL_SEQ_Run+0x1e8>)
 801b7e2:	681b      	ldr	r3, [r3, #0]
 801b7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b7e6:	e08d      	b.n	801b904 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801b7e8:	2300      	movs	r3, #0
 801b7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b7ec:	e002      	b.n	801b7f4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801b7ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b7f0:	3301      	adds	r3, #1
 801b7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b7f4:	4a6a      	ldr	r2, [pc, #424]	@ (801b9a0 <UTIL_SEQ_Run+0x1ec>)
 801b7f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b7f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7fe:	401a      	ands	r2, r3
 801b800:	4b62      	ldr	r3, [pc, #392]	@ (801b98c <UTIL_SEQ_Run+0x1d8>)
 801b802:	681b      	ldr	r3, [r3, #0]
 801b804:	4013      	ands	r3, r2
 801b806:	2b00      	cmp	r3, #0
 801b808:	d0f1      	beq.n	801b7ee <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801b80a:	4a65      	ldr	r2, [pc, #404]	@ (801b9a0 <UTIL_SEQ_Run+0x1ec>)
 801b80c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b80e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b814:	401a      	ands	r2, r3
 801b816:	4b5d      	ldr	r3, [pc, #372]	@ (801b98c <UTIL_SEQ_Run+0x1d8>)
 801b818:	681b      	ldr	r3, [r3, #0]
 801b81a:	4013      	ands	r3, r2
 801b81c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801b81e:	4a60      	ldr	r2, [pc, #384]	@ (801b9a0 <UTIL_SEQ_Run+0x1ec>)
 801b820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b822:	00db      	lsls	r3, r3, #3
 801b824:	4413      	add	r3, r2
 801b826:	685a      	ldr	r2, [r3, #4]
 801b828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b82a:	4013      	ands	r3, r2
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d106      	bne.n	801b83e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801b830:	4a5b      	ldr	r2, [pc, #364]	@ (801b9a0 <UTIL_SEQ_Run+0x1ec>)
 801b832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b834:	00db      	lsls	r3, r3, #3
 801b836:	4413      	add	r3, r2
 801b838:	f04f 32ff 	mov.w	r2, #4294967295
 801b83c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801b83e:	4a58      	ldr	r2, [pc, #352]	@ (801b9a0 <UTIL_SEQ_Run+0x1ec>)
 801b840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b842:	00db      	lsls	r3, r3, #3
 801b844:	4413      	add	r3, r2
 801b846:	685a      	ldr	r2, [r3, #4]
 801b848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b84a:	4013      	ands	r3, r2
 801b84c:	4618      	mov	r0, r3
 801b84e:	f000 f907 	bl	801ba60 <SEQ_BitPosition>
 801b852:	4603      	mov	r3, r0
 801b854:	461a      	mov	r2, r3
 801b856:	4b53      	ldr	r3, [pc, #332]	@ (801b9a4 <UTIL_SEQ_Run+0x1f0>)
 801b858:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801b85a:	4a51      	ldr	r2, [pc, #324]	@ (801b9a0 <UTIL_SEQ_Run+0x1ec>)
 801b85c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b85e:	00db      	lsls	r3, r3, #3
 801b860:	4413      	add	r3, r2
 801b862:	685a      	ldr	r2, [r3, #4]
 801b864:	4b4f      	ldr	r3, [pc, #316]	@ (801b9a4 <UTIL_SEQ_Run+0x1f0>)
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	2101      	movs	r1, #1
 801b86a:	fa01 f303 	lsl.w	r3, r1, r3
 801b86e:	43db      	mvns	r3, r3
 801b870:	401a      	ands	r2, r3
 801b872:	494b      	ldr	r1, [pc, #300]	@ (801b9a0 <UTIL_SEQ_Run+0x1ec>)
 801b874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b876:	00db      	lsls	r3, r3, #3
 801b878:	440b      	add	r3, r1
 801b87a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b87c:	f3ef 8310 	mrs	r3, PRIMASK
 801b880:	61bb      	str	r3, [r7, #24]
  return(result);
 801b882:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b884:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801b886:	b672      	cpsid	i
}
 801b888:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801b88a:	4b46      	ldr	r3, [pc, #280]	@ (801b9a4 <UTIL_SEQ_Run+0x1f0>)
 801b88c:	681b      	ldr	r3, [r3, #0]
 801b88e:	2201      	movs	r2, #1
 801b890:	fa02 f303 	lsl.w	r3, r2, r3
 801b894:	43da      	mvns	r2, r3
 801b896:	4b3e      	ldr	r3, [pc, #248]	@ (801b990 <UTIL_SEQ_Run+0x1dc>)
 801b898:	681b      	ldr	r3, [r3, #0]
 801b89a:	4013      	ands	r3, r2
 801b89c:	4a3c      	ldr	r2, [pc, #240]	@ (801b990 <UTIL_SEQ_Run+0x1dc>)
 801b89e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b8a0:	2301      	movs	r3, #1
 801b8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b8a4:	e013      	b.n	801b8ce <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801b8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b8a8:	3b01      	subs	r3, #1
 801b8aa:	4a3d      	ldr	r2, [pc, #244]	@ (801b9a0 <UTIL_SEQ_Run+0x1ec>)
 801b8ac:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801b8b0:	4b3c      	ldr	r3, [pc, #240]	@ (801b9a4 <UTIL_SEQ_Run+0x1f0>)
 801b8b2:	681b      	ldr	r3, [r3, #0]
 801b8b4:	2201      	movs	r2, #1
 801b8b6:	fa02 f303 	lsl.w	r3, r2, r3
 801b8ba:	43da      	mvns	r2, r3
 801b8bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b8be:	3b01      	subs	r3, #1
 801b8c0:	400a      	ands	r2, r1
 801b8c2:	4937      	ldr	r1, [pc, #220]	@ (801b9a0 <UTIL_SEQ_Run+0x1ec>)
 801b8c4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b8c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b8ca:	3b01      	subs	r3, #1
 801b8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b8ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d1e8      	bne.n	801b8a6 <UTIL_SEQ_Run+0xf2>
 801b8d4:	6a3b      	ldr	r3, [r7, #32]
 801b8d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b8d8:	697b      	ldr	r3, [r7, #20]
 801b8da:	f383 8810 	msr	PRIMASK, r3
}
 801b8de:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801b8e0:	4b30      	ldr	r3, [pc, #192]	@ (801b9a4 <UTIL_SEQ_Run+0x1f0>)
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	4a30      	ldr	r2, [pc, #192]	@ (801b9a8 <UTIL_SEQ_Run+0x1f4>)
 801b8e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b8ea:	4798      	blx	r3

    local_taskset = TaskSet;
 801b8ec:	4b28      	ldr	r3, [pc, #160]	@ (801b990 <UTIL_SEQ_Run+0x1dc>)
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801b8f2:	4b28      	ldr	r3, [pc, #160]	@ (801b994 <UTIL_SEQ_Run+0x1e0>)
 801b8f4:	681b      	ldr	r3, [r3, #0]
 801b8f6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801b8f8:	4b27      	ldr	r3, [pc, #156]	@ (801b998 <UTIL_SEQ_Run+0x1e4>)
 801b8fa:	681b      	ldr	r3, [r3, #0]
 801b8fc:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801b8fe:	4b27      	ldr	r3, [pc, #156]	@ (801b99c <UTIL_SEQ_Run+0x1e8>)
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b904:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b908:	401a      	ands	r2, r3
 801b90a:	4b20      	ldr	r3, [pc, #128]	@ (801b98c <UTIL_SEQ_Run+0x1d8>)
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	4013      	ands	r3, r2
 801b910:	2b00      	cmp	r3, #0
 801b912:	d005      	beq.n	801b920 <UTIL_SEQ_Run+0x16c>
 801b914:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b918:	4013      	ands	r3, r2
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	f43f af64 	beq.w	801b7e8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801b920:	4b20      	ldr	r3, [pc, #128]	@ (801b9a4 <UTIL_SEQ_Run+0x1f0>)
 801b922:	f04f 32ff 	mov.w	r2, #4294967295
 801b926:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801b928:	f000 f88e 	bl	801ba48 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b92c:	f3ef 8310 	mrs	r3, PRIMASK
 801b930:	613b      	str	r3, [r7, #16]
  return(result);
 801b932:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801b934:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b936:	b672      	cpsid	i
}
 801b938:	bf00      	nop
  local_taskset = TaskSet;
 801b93a:	4b15      	ldr	r3, [pc, #84]	@ (801b990 <UTIL_SEQ_Run+0x1dc>)
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801b940:	4b14      	ldr	r3, [pc, #80]	@ (801b994 <UTIL_SEQ_Run+0x1e0>)
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801b946:	4b14      	ldr	r3, [pc, #80]	@ (801b998 <UTIL_SEQ_Run+0x1e4>)
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801b94c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b950:	401a      	ands	r2, r3
 801b952:	4b0e      	ldr	r3, [pc, #56]	@ (801b98c <UTIL_SEQ_Run+0x1d8>)
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	4013      	ands	r3, r2
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d107      	bne.n	801b96c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801b95c:	4b0f      	ldr	r3, [pc, #60]	@ (801b99c <UTIL_SEQ_Run+0x1e8>)
 801b95e:	681a      	ldr	r2, [r3, #0]
 801b960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b962:	4013      	ands	r3, r2
 801b964:	2b00      	cmp	r3, #0
 801b966:	d101      	bne.n	801b96c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801b968:	f7e6 fc6a 	bl	8002240 <UTIL_SEQ_Idle>
 801b96c:	69fb      	ldr	r3, [r7, #28]
 801b96e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b970:	68fb      	ldr	r3, [r7, #12]
 801b972:	f383 8810 	msr	PRIMASK, r3
}
 801b976:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801b978:	f000 f86c 	bl	801ba54 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801b97c:	4a03      	ldr	r2, [pc, #12]	@ (801b98c <UTIL_SEQ_Run+0x1d8>)
 801b97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b980:	6013      	str	r3, [r2, #0]

  return;
 801b982:	bf00      	nop
}
 801b984:	3740      	adds	r7, #64	@ 0x40
 801b986:	46bd      	mov	sp, r7
 801b988:	bd80      	pop	{r7, pc}
 801b98a:	bf00      	nop
 801b98c:	20000154 	.word	0x20000154
 801b990:	20001de0 	.word	0x20001de0
 801b994:	20001de4 	.word	0x20001de4
 801b998:	20000150 	.word	0x20000150
 801b99c:	20001de8 	.word	0x20001de8
 801b9a0:	20001e00 	.word	0x20001e00
 801b9a4:	20001dec 	.word	0x20001dec
 801b9a8:	20001df0 	.word	0x20001df0

0801b9ac <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801b9ac:	b580      	push	{r7, lr}
 801b9ae:	b088      	sub	sp, #32
 801b9b0:	af00      	add	r7, sp, #0
 801b9b2:	60f8      	str	r0, [r7, #12]
 801b9b4:	60b9      	str	r1, [r7, #8]
 801b9b6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b9b8:	f3ef 8310 	mrs	r3, PRIMASK
 801b9bc:	617b      	str	r3, [r7, #20]
  return(result);
 801b9be:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801b9c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b9c2:	b672      	cpsid	i
}
 801b9c4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801b9c6:	68f8      	ldr	r0, [r7, #12]
 801b9c8:	f000 f84a 	bl	801ba60 <SEQ_BitPosition>
 801b9cc:	4603      	mov	r3, r0
 801b9ce:	4619      	mov	r1, r3
 801b9d0:	4a06      	ldr	r2, [pc, #24]	@ (801b9ec <UTIL_SEQ_RegTask+0x40>)
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b9d8:	69fb      	ldr	r3, [r7, #28]
 801b9da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9dc:	69bb      	ldr	r3, [r7, #24]
 801b9de:	f383 8810 	msr	PRIMASK, r3
}
 801b9e2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801b9e4:	bf00      	nop
}
 801b9e6:	3720      	adds	r7, #32
 801b9e8:	46bd      	mov	sp, r7
 801b9ea:	bd80      	pop	{r7, pc}
 801b9ec:	20001df0 	.word	0x20001df0

0801b9f0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801b9f0:	b480      	push	{r7}
 801b9f2:	b087      	sub	sp, #28
 801b9f4:	af00      	add	r7, sp, #0
 801b9f6:	6078      	str	r0, [r7, #4]
 801b9f8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b9fa:	f3ef 8310 	mrs	r3, PRIMASK
 801b9fe:	60fb      	str	r3, [r7, #12]
  return(result);
 801ba00:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ba02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ba04:	b672      	cpsid	i
}
 801ba06:	bf00      	nop

  TaskSet |= TaskId_bm;
 801ba08:	4b0d      	ldr	r3, [pc, #52]	@ (801ba40 <UTIL_SEQ_SetTask+0x50>)
 801ba0a:	681a      	ldr	r2, [r3, #0]
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	4313      	orrs	r3, r2
 801ba10:	4a0b      	ldr	r2, [pc, #44]	@ (801ba40 <UTIL_SEQ_SetTask+0x50>)
 801ba12:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801ba14:	4a0b      	ldr	r2, [pc, #44]	@ (801ba44 <UTIL_SEQ_SetTask+0x54>)
 801ba16:	683b      	ldr	r3, [r7, #0]
 801ba18:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	431a      	orrs	r2, r3
 801ba20:	4908      	ldr	r1, [pc, #32]	@ (801ba44 <UTIL_SEQ_SetTask+0x54>)
 801ba22:	683b      	ldr	r3, [r7, #0]
 801ba24:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801ba28:	697b      	ldr	r3, [r7, #20]
 801ba2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ba2c:	693b      	ldr	r3, [r7, #16]
 801ba2e:	f383 8810 	msr	PRIMASK, r3
}
 801ba32:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801ba34:	bf00      	nop
}
 801ba36:	371c      	adds	r7, #28
 801ba38:	46bd      	mov	sp, r7
 801ba3a:	bc80      	pop	{r7}
 801ba3c:	4770      	bx	lr
 801ba3e:	bf00      	nop
 801ba40:	20001de0 	.word	0x20001de0
 801ba44:	20001e00 	.word	0x20001e00

0801ba48 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801ba48:	b480      	push	{r7}
 801ba4a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ba4c:	bf00      	nop
}
 801ba4e:	46bd      	mov	sp, r7
 801ba50:	bc80      	pop	{r7}
 801ba52:	4770      	bx	lr

0801ba54 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801ba54:	b480      	push	{r7}
 801ba56:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ba58:	bf00      	nop
}
 801ba5a:	46bd      	mov	sp, r7
 801ba5c:	bc80      	pop	{r7}
 801ba5e:	4770      	bx	lr

0801ba60 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801ba60:	b480      	push	{r7}
 801ba62:	b085      	sub	sp, #20
 801ba64:	af00      	add	r7, sp, #0
 801ba66:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801ba68:	2300      	movs	r3, #0
 801ba6a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801ba70:	68bb      	ldr	r3, [r7, #8]
 801ba72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ba76:	d204      	bcs.n	801ba82 <SEQ_BitPosition+0x22>
 801ba78:	2310      	movs	r3, #16
 801ba7a:	73fb      	strb	r3, [r7, #15]
 801ba7c:	68bb      	ldr	r3, [r7, #8]
 801ba7e:	041b      	lsls	r3, r3, #16
 801ba80:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801ba82:	68bb      	ldr	r3, [r7, #8]
 801ba84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ba88:	d205      	bcs.n	801ba96 <SEQ_BitPosition+0x36>
 801ba8a:	7bfb      	ldrb	r3, [r7, #15]
 801ba8c:	3308      	adds	r3, #8
 801ba8e:	73fb      	strb	r3, [r7, #15]
 801ba90:	68bb      	ldr	r3, [r7, #8]
 801ba92:	021b      	lsls	r3, r3, #8
 801ba94:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801ba96:	68bb      	ldr	r3, [r7, #8]
 801ba98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ba9c:	d205      	bcs.n	801baaa <SEQ_BitPosition+0x4a>
 801ba9e:	7bfb      	ldrb	r3, [r7, #15]
 801baa0:	3304      	adds	r3, #4
 801baa2:	73fb      	strb	r3, [r7, #15]
 801baa4:	68bb      	ldr	r3, [r7, #8]
 801baa6:	011b      	lsls	r3, r3, #4
 801baa8:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801baaa:	68bb      	ldr	r3, [r7, #8]
 801baac:	0f1b      	lsrs	r3, r3, #28
 801baae:	4a07      	ldr	r2, [pc, #28]	@ (801bacc <SEQ_BitPosition+0x6c>)
 801bab0:	5cd2      	ldrb	r2, [r2, r3]
 801bab2:	7bfb      	ldrb	r3, [r7, #15]
 801bab4:	4413      	add	r3, r2
 801bab6:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801bab8:	7bfb      	ldrb	r3, [r7, #15]
 801baba:	f1c3 031f 	rsb	r3, r3, #31
 801babe:	b2db      	uxtb	r3, r3
}
 801bac0:	4618      	mov	r0, r3
 801bac2:	3714      	adds	r7, #20
 801bac4:	46bd      	mov	sp, r7
 801bac6:	bc80      	pop	{r7}
 801bac8:	4770      	bx	lr
 801baca:	bf00      	nop
 801bacc:	08020014 	.word	0x08020014

0801bad0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801bad0:	b580      	push	{r7, lr}
 801bad2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801bad4:	4b04      	ldr	r3, [pc, #16]	@ (801bae8 <UTIL_TIMER_Init+0x18>)
 801bad6:	2200      	movs	r2, #0
 801bad8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801bada:	4b04      	ldr	r3, [pc, #16]	@ (801baec <UTIL_TIMER_Init+0x1c>)
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	4798      	blx	r3
 801bae0:	4603      	mov	r3, r0
}
 801bae2:	4618      	mov	r0, r3
 801bae4:	bd80      	pop	{r7, pc}
 801bae6:	bf00      	nop
 801bae8:	20001e08 	.word	0x20001e08
 801baec:	0801fa94 	.word	0x0801fa94

0801baf0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801baf0:	b580      	push	{r7, lr}
 801baf2:	b084      	sub	sp, #16
 801baf4:	af00      	add	r7, sp, #0
 801baf6:	60f8      	str	r0, [r7, #12]
 801baf8:	60b9      	str	r1, [r7, #8]
 801bafa:	603b      	str	r3, [r7, #0]
 801bafc:	4613      	mov	r3, r2
 801bafe:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801bb00:	68fb      	ldr	r3, [r7, #12]
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d023      	beq.n	801bb4e <UTIL_TIMER_Create+0x5e>
 801bb06:	683b      	ldr	r3, [r7, #0]
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	d020      	beq.n	801bb4e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	2200      	movs	r2, #0
 801bb10:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801bb12:	4b11      	ldr	r3, [pc, #68]	@ (801bb58 <UTIL_TIMER_Create+0x68>)
 801bb14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bb16:	68b8      	ldr	r0, [r7, #8]
 801bb18:	4798      	blx	r3
 801bb1a:	4602      	mov	r2, r0
 801bb1c:	68fb      	ldr	r3, [r7, #12]
 801bb1e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801bb20:	68fb      	ldr	r3, [r7, #12]
 801bb22:	2200      	movs	r2, #0
 801bb24:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801bb26:	68fb      	ldr	r3, [r7, #12]
 801bb28:	2200      	movs	r2, #0
 801bb2a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	2200      	movs	r2, #0
 801bb30:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801bb32:	68fb      	ldr	r3, [r7, #12]
 801bb34:	683a      	ldr	r2, [r7, #0]
 801bb36:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801bb38:	68fb      	ldr	r3, [r7, #12]
 801bb3a:	69ba      	ldr	r2, [r7, #24]
 801bb3c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801bb3e:	68fb      	ldr	r3, [r7, #12]
 801bb40:	79fa      	ldrb	r2, [r7, #7]
 801bb42:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801bb44:	68fb      	ldr	r3, [r7, #12]
 801bb46:	2200      	movs	r2, #0
 801bb48:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801bb4a:	2300      	movs	r3, #0
 801bb4c:	e000      	b.n	801bb50 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801bb4e:	2301      	movs	r3, #1
  }
}
 801bb50:	4618      	mov	r0, r3
 801bb52:	3710      	adds	r7, #16
 801bb54:	46bd      	mov	sp, r7
 801bb56:	bd80      	pop	{r7, pc}
 801bb58:	0801fa94 	.word	0x0801fa94

0801bb5c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801bb5c:	b580      	push	{r7, lr}
 801bb5e:	b08a      	sub	sp, #40	@ 0x28
 801bb60:	af00      	add	r7, sp, #0
 801bb62:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bb64:	2300      	movs	r3, #0
 801bb66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d056      	beq.n	801bc1e <UTIL_TIMER_Start+0xc2>
 801bb70:	6878      	ldr	r0, [r7, #4]
 801bb72:	f000 f9a9 	bl	801bec8 <TimerExists>
 801bb76:	4603      	mov	r3, r0
 801bb78:	f083 0301 	eor.w	r3, r3, #1
 801bb7c:	b2db      	uxtb	r3, r3
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d04d      	beq.n	801bc1e <UTIL_TIMER_Start+0xc2>
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	7a5b      	ldrb	r3, [r3, #9]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d149      	bne.n	801bc1e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb8a:	f3ef 8310 	mrs	r3, PRIMASK
 801bb8e:	613b      	str	r3, [r7, #16]
  return(result);
 801bb90:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bb92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb94:	b672      	cpsid	i
}
 801bb96:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	685b      	ldr	r3, [r3, #4]
 801bb9c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801bb9e:	4b24      	ldr	r3, [pc, #144]	@ (801bc30 <UTIL_TIMER_Start+0xd4>)
 801bba0:	6a1b      	ldr	r3, [r3, #32]
 801bba2:	4798      	blx	r3
 801bba4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801bba6:	6a3a      	ldr	r2, [r7, #32]
 801bba8:	69bb      	ldr	r3, [r7, #24]
 801bbaa:	429a      	cmp	r2, r3
 801bbac:	d201      	bcs.n	801bbb2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801bbae:	69bb      	ldr	r3, [r7, #24]
 801bbb0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	6a3a      	ldr	r2, [r7, #32]
 801bbb6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	2200      	movs	r2, #0
 801bbbc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	2201      	movs	r2, #1
 801bbc2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	2200      	movs	r2, #0
 801bbc8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801bbca:	4b1a      	ldr	r3, [pc, #104]	@ (801bc34 <UTIL_TIMER_Start+0xd8>)
 801bbcc:	681b      	ldr	r3, [r3, #0]
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	d106      	bne.n	801bbe0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801bbd2:	4b17      	ldr	r3, [pc, #92]	@ (801bc30 <UTIL_TIMER_Start+0xd4>)
 801bbd4:	691b      	ldr	r3, [r3, #16]
 801bbd6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801bbd8:	6878      	ldr	r0, [r7, #4]
 801bbda:	f000 f9eb 	bl	801bfb4 <TimerInsertNewHeadTimer>
 801bbde:	e017      	b.n	801bc10 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801bbe0:	4b13      	ldr	r3, [pc, #76]	@ (801bc30 <UTIL_TIMER_Start+0xd4>)
 801bbe2:	699b      	ldr	r3, [r3, #24]
 801bbe4:	4798      	blx	r3
 801bbe6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	681a      	ldr	r2, [r3, #0]
 801bbec:	697b      	ldr	r3, [r7, #20]
 801bbee:	441a      	add	r2, r3
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	681a      	ldr	r2, [r3, #0]
 801bbf8:	4b0e      	ldr	r3, [pc, #56]	@ (801bc34 <UTIL_TIMER_Start+0xd8>)
 801bbfa:	681b      	ldr	r3, [r3, #0]
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	429a      	cmp	r2, r3
 801bc00:	d203      	bcs.n	801bc0a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801bc02:	6878      	ldr	r0, [r7, #4]
 801bc04:	f000 f9d6 	bl	801bfb4 <TimerInsertNewHeadTimer>
 801bc08:	e002      	b.n	801bc10 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801bc0a:	6878      	ldr	r0, [r7, #4]
 801bc0c:	f000 f9a2 	bl	801bf54 <TimerInsertTimer>
 801bc10:	69fb      	ldr	r3, [r7, #28]
 801bc12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	f383 8810 	msr	PRIMASK, r3
}
 801bc1a:	bf00      	nop
  {
 801bc1c:	e002      	b.n	801bc24 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801bc1e:	2301      	movs	r3, #1
 801bc20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801bc24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801bc28:	4618      	mov	r0, r3
 801bc2a:	3728      	adds	r7, #40	@ 0x28
 801bc2c:	46bd      	mov	sp, r7
 801bc2e:	bd80      	pop	{r7, pc}
 801bc30:	0801fa94 	.word	0x0801fa94
 801bc34:	20001e08 	.word	0x20001e08

0801bc38 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801bc38:	b580      	push	{r7, lr}
 801bc3a:	b088      	sub	sp, #32
 801bc3c:	af00      	add	r7, sp, #0
 801bc3e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bc40:	2300      	movs	r3, #0
 801bc42:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d05b      	beq.n	801bd02 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc4a:	f3ef 8310 	mrs	r3, PRIMASK
 801bc4e:	60fb      	str	r3, [r7, #12]
  return(result);
 801bc50:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bc52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc54:	b672      	cpsid	i
}
 801bc56:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801bc58:	4b2d      	ldr	r3, [pc, #180]	@ (801bd10 <UTIL_TIMER_Stop+0xd8>)
 801bc5a:	681b      	ldr	r3, [r3, #0]
 801bc5c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801bc5e:	4b2c      	ldr	r3, [pc, #176]	@ (801bd10 <UTIL_TIMER_Stop+0xd8>)
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	2201      	movs	r2, #1
 801bc68:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801bc6a:	4b29      	ldr	r3, [pc, #164]	@ (801bd10 <UTIL_TIMER_Stop+0xd8>)
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d041      	beq.n	801bcf6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	2200      	movs	r2, #0
 801bc76:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801bc78:	4b25      	ldr	r3, [pc, #148]	@ (801bd10 <UTIL_TIMER_Stop+0xd8>)
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	687a      	ldr	r2, [r7, #4]
 801bc7e:	429a      	cmp	r2, r3
 801bc80:	d134      	bne.n	801bcec <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801bc82:	4b23      	ldr	r3, [pc, #140]	@ (801bd10 <UTIL_TIMER_Stop+0xd8>)
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	2200      	movs	r2, #0
 801bc88:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801bc8a:	4b21      	ldr	r3, [pc, #132]	@ (801bd10 <UTIL_TIMER_Stop+0xd8>)
 801bc8c:	681b      	ldr	r3, [r3, #0]
 801bc8e:	695b      	ldr	r3, [r3, #20]
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d00a      	beq.n	801bcaa <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801bc94:	4b1e      	ldr	r3, [pc, #120]	@ (801bd10 <UTIL_TIMER_Stop+0xd8>)
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	695b      	ldr	r3, [r3, #20]
 801bc9a:	4a1d      	ldr	r2, [pc, #116]	@ (801bd10 <UTIL_TIMER_Stop+0xd8>)
 801bc9c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801bc9e:	4b1c      	ldr	r3, [pc, #112]	@ (801bd10 <UTIL_TIMER_Stop+0xd8>)
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	4618      	mov	r0, r3
 801bca4:	f000 f92c 	bl	801bf00 <TimerSetTimeout>
 801bca8:	e023      	b.n	801bcf2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801bcaa:	4b1a      	ldr	r3, [pc, #104]	@ (801bd14 <UTIL_TIMER_Stop+0xdc>)
 801bcac:	68db      	ldr	r3, [r3, #12]
 801bcae:	4798      	blx	r3
            TimerListHead = NULL;
 801bcb0:	4b17      	ldr	r3, [pc, #92]	@ (801bd10 <UTIL_TIMER_Stop+0xd8>)
 801bcb2:	2200      	movs	r2, #0
 801bcb4:	601a      	str	r2, [r3, #0]
 801bcb6:	e01c      	b.n	801bcf2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801bcb8:	697a      	ldr	r2, [r7, #20]
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	429a      	cmp	r2, r3
 801bcbe:	d110      	bne.n	801bce2 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801bcc0:	697b      	ldr	r3, [r7, #20]
 801bcc2:	695b      	ldr	r3, [r3, #20]
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	d006      	beq.n	801bcd6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801bcc8:	697b      	ldr	r3, [r7, #20]
 801bcca:	695b      	ldr	r3, [r3, #20]
 801bccc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801bcce:	69bb      	ldr	r3, [r7, #24]
 801bcd0:	697a      	ldr	r2, [r7, #20]
 801bcd2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801bcd4:	e00d      	b.n	801bcf2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801bcd6:	2300      	movs	r3, #0
 801bcd8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801bcda:	69bb      	ldr	r3, [r7, #24]
 801bcdc:	697a      	ldr	r2, [r7, #20]
 801bcde:	615a      	str	r2, [r3, #20]
            break;
 801bce0:	e007      	b.n	801bcf2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801bce2:	697b      	ldr	r3, [r7, #20]
 801bce4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801bce6:	697b      	ldr	r3, [r7, #20]
 801bce8:	695b      	ldr	r3, [r3, #20]
 801bcea:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801bcec:	697b      	ldr	r3, [r7, #20]
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d1e2      	bne.n	801bcb8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801bcf2:	2300      	movs	r3, #0
 801bcf4:	77fb      	strb	r3, [r7, #31]
 801bcf6:	693b      	ldr	r3, [r7, #16]
 801bcf8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcfa:	68bb      	ldr	r3, [r7, #8]
 801bcfc:	f383 8810 	msr	PRIMASK, r3
}
 801bd00:	e001      	b.n	801bd06 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801bd02:	2301      	movs	r3, #1
 801bd04:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801bd06:	7ffb      	ldrb	r3, [r7, #31]
}
 801bd08:	4618      	mov	r0, r3
 801bd0a:	3720      	adds	r7, #32
 801bd0c:	46bd      	mov	sp, r7
 801bd0e:	bd80      	pop	{r7, pc}
 801bd10:	20001e08 	.word	0x20001e08
 801bd14:	0801fa94 	.word	0x0801fa94

0801bd18 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801bd18:	b580      	push	{r7, lr}
 801bd1a:	b084      	sub	sp, #16
 801bd1c:	af00      	add	r7, sp, #0
 801bd1e:	6078      	str	r0, [r7, #4]
 801bd20:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bd22:	2300      	movs	r3, #0
 801bd24:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d102      	bne.n	801bd32 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801bd2c:	2301      	movs	r3, #1
 801bd2e:	73fb      	strb	r3, [r7, #15]
 801bd30:	e014      	b.n	801bd5c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801bd32:	4b0d      	ldr	r3, [pc, #52]	@ (801bd68 <UTIL_TIMER_SetPeriod+0x50>)
 801bd34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bd36:	6838      	ldr	r0, [r7, #0]
 801bd38:	4798      	blx	r3
 801bd3a:	4602      	mov	r2, r0
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801bd40:	6878      	ldr	r0, [r7, #4]
 801bd42:	f000 f8c1 	bl	801bec8 <TimerExists>
 801bd46:	4603      	mov	r3, r0
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d007      	beq.n	801bd5c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801bd4c:	6878      	ldr	r0, [r7, #4]
 801bd4e:	f7ff ff73 	bl	801bc38 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801bd52:	6878      	ldr	r0, [r7, #4]
 801bd54:	f7ff ff02 	bl	801bb5c <UTIL_TIMER_Start>
 801bd58:	4603      	mov	r3, r0
 801bd5a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801bd5c:	7bfb      	ldrb	r3, [r7, #15]
}
 801bd5e:	4618      	mov	r0, r3
 801bd60:	3710      	adds	r7, #16
 801bd62:	46bd      	mov	sp, r7
 801bd64:	bd80      	pop	{r7, pc}
 801bd66:	bf00      	nop
 801bd68:	0801fa94 	.word	0x0801fa94

0801bd6c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801bd6c:	b590      	push	{r4, r7, lr}
 801bd6e:	b089      	sub	sp, #36	@ 0x24
 801bd70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd72:	f3ef 8310 	mrs	r3, PRIMASK
 801bd76:	60bb      	str	r3, [r7, #8]
  return(result);
 801bd78:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bd7a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd7c:	b672      	cpsid	i
}
 801bd7e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801bd80:	4b38      	ldr	r3, [pc, #224]	@ (801be64 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801bd82:	695b      	ldr	r3, [r3, #20]
 801bd84:	4798      	blx	r3
 801bd86:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801bd88:	4b36      	ldr	r3, [pc, #216]	@ (801be64 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801bd8a:	691b      	ldr	r3, [r3, #16]
 801bd8c:	4798      	blx	r3
 801bd8e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801bd90:	693a      	ldr	r2, [r7, #16]
 801bd92:	697b      	ldr	r3, [r7, #20]
 801bd94:	1ad3      	subs	r3, r2, r3
 801bd96:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801bd98:	4b33      	ldr	r3, [pc, #204]	@ (801be68 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d037      	beq.n	801be10 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801bda0:	4b31      	ldr	r3, [pc, #196]	@ (801be68 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801bda6:	69fb      	ldr	r3, [r7, #28]
 801bda8:	681b      	ldr	r3, [r3, #0]
 801bdaa:	68fa      	ldr	r2, [r7, #12]
 801bdac:	429a      	cmp	r2, r3
 801bdae:	d206      	bcs.n	801bdbe <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801bdb0:	69fb      	ldr	r3, [r7, #28]
 801bdb2:	681a      	ldr	r2, [r3, #0]
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	1ad2      	subs	r2, r2, r3
 801bdb8:	69fb      	ldr	r3, [r7, #28]
 801bdba:	601a      	str	r2, [r3, #0]
 801bdbc:	e002      	b.n	801bdc4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801bdbe:	69fb      	ldr	r3, [r7, #28]
 801bdc0:	2200      	movs	r2, #0
 801bdc2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801bdc4:	69fb      	ldr	r3, [r7, #28]
 801bdc6:	695b      	ldr	r3, [r3, #20]
 801bdc8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801bdca:	69fb      	ldr	r3, [r7, #28]
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d1ea      	bne.n	801bda6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801bdd0:	e01e      	b.n	801be10 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801bdd2:	4b25      	ldr	r3, [pc, #148]	@ (801be68 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bdd4:	681b      	ldr	r3, [r3, #0]
 801bdd6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801bdd8:	4b23      	ldr	r3, [pc, #140]	@ (801be68 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	695b      	ldr	r3, [r3, #20]
 801bdde:	4a22      	ldr	r2, [pc, #136]	@ (801be68 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bde0:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801bde2:	69fb      	ldr	r3, [r7, #28]
 801bde4:	2200      	movs	r2, #0
 801bde6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801bde8:	69fb      	ldr	r3, [r7, #28]
 801bdea:	2200      	movs	r2, #0
 801bdec:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801bdee:	69fb      	ldr	r3, [r7, #28]
 801bdf0:	68db      	ldr	r3, [r3, #12]
 801bdf2:	69fa      	ldr	r2, [r7, #28]
 801bdf4:	6912      	ldr	r2, [r2, #16]
 801bdf6:	4610      	mov	r0, r2
 801bdf8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801bdfa:	69fb      	ldr	r3, [r7, #28]
 801bdfc:	7adb      	ldrb	r3, [r3, #11]
 801bdfe:	2b01      	cmp	r3, #1
 801be00:	d106      	bne.n	801be10 <UTIL_TIMER_IRQ_Handler+0xa4>
 801be02:	69fb      	ldr	r3, [r7, #28]
 801be04:	7a9b      	ldrb	r3, [r3, #10]
 801be06:	2b00      	cmp	r3, #0
 801be08:	d102      	bne.n	801be10 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801be0a:	69f8      	ldr	r0, [r7, #28]
 801be0c:	f7ff fea6 	bl	801bb5c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801be10:	4b15      	ldr	r3, [pc, #84]	@ (801be68 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be12:	681b      	ldr	r3, [r3, #0]
 801be14:	2b00      	cmp	r3, #0
 801be16:	d00d      	beq.n	801be34 <UTIL_TIMER_IRQ_Handler+0xc8>
 801be18:	4b13      	ldr	r3, [pc, #76]	@ (801be68 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be1a:	681b      	ldr	r3, [r3, #0]
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d0d7      	beq.n	801bdd2 <UTIL_TIMER_IRQ_Handler+0x66>
 801be22:	4b11      	ldr	r3, [pc, #68]	@ (801be68 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be24:	681b      	ldr	r3, [r3, #0]
 801be26:	681c      	ldr	r4, [r3, #0]
 801be28:	4b0e      	ldr	r3, [pc, #56]	@ (801be64 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801be2a:	699b      	ldr	r3, [r3, #24]
 801be2c:	4798      	blx	r3
 801be2e:	4603      	mov	r3, r0
 801be30:	429c      	cmp	r4, r3
 801be32:	d3ce      	bcc.n	801bdd2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801be34:	4b0c      	ldr	r3, [pc, #48]	@ (801be68 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be36:	681b      	ldr	r3, [r3, #0]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d009      	beq.n	801be50 <UTIL_TIMER_IRQ_Handler+0xe4>
 801be3c:	4b0a      	ldr	r3, [pc, #40]	@ (801be68 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	7a1b      	ldrb	r3, [r3, #8]
 801be42:	2b00      	cmp	r3, #0
 801be44:	d104      	bne.n	801be50 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801be46:	4b08      	ldr	r3, [pc, #32]	@ (801be68 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801be48:	681b      	ldr	r3, [r3, #0]
 801be4a:	4618      	mov	r0, r3
 801be4c:	f000 f858 	bl	801bf00 <TimerSetTimeout>
 801be50:	69bb      	ldr	r3, [r7, #24]
 801be52:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	f383 8810 	msr	PRIMASK, r3
}
 801be5a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801be5c:	bf00      	nop
 801be5e:	3724      	adds	r7, #36	@ 0x24
 801be60:	46bd      	mov	sp, r7
 801be62:	bd90      	pop	{r4, r7, pc}
 801be64:	0801fa94 	.word	0x0801fa94
 801be68:	20001e08 	.word	0x20001e08

0801be6c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801be6c:	b580      	push	{r7, lr}
 801be6e:	b082      	sub	sp, #8
 801be70:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801be72:	4b06      	ldr	r3, [pc, #24]	@ (801be8c <UTIL_TIMER_GetCurrentTime+0x20>)
 801be74:	69db      	ldr	r3, [r3, #28]
 801be76:	4798      	blx	r3
 801be78:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801be7a:	4b04      	ldr	r3, [pc, #16]	@ (801be8c <UTIL_TIMER_GetCurrentTime+0x20>)
 801be7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801be7e:	6878      	ldr	r0, [r7, #4]
 801be80:	4798      	blx	r3
 801be82:	4603      	mov	r3, r0
}
 801be84:	4618      	mov	r0, r3
 801be86:	3708      	adds	r7, #8
 801be88:	46bd      	mov	sp, r7
 801be8a:	bd80      	pop	{r7, pc}
 801be8c:	0801fa94 	.word	0x0801fa94

0801be90 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801be90:	b580      	push	{r7, lr}
 801be92:	b084      	sub	sp, #16
 801be94:	af00      	add	r7, sp, #0
 801be96:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801be98:	4b0a      	ldr	r3, [pc, #40]	@ (801bec4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801be9a:	69db      	ldr	r3, [r3, #28]
 801be9c:	4798      	blx	r3
 801be9e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801bea0:	4b08      	ldr	r3, [pc, #32]	@ (801bec4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801bea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bea4:	6878      	ldr	r0, [r7, #4]
 801bea6:	4798      	blx	r3
 801bea8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801beaa:	4b06      	ldr	r3, [pc, #24]	@ (801bec4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801beac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801beae:	68f9      	ldr	r1, [r7, #12]
 801beb0:	68ba      	ldr	r2, [r7, #8]
 801beb2:	1a8a      	subs	r2, r1, r2
 801beb4:	4610      	mov	r0, r2
 801beb6:	4798      	blx	r3
 801beb8:	4603      	mov	r3, r0
}
 801beba:	4618      	mov	r0, r3
 801bebc:	3710      	adds	r7, #16
 801bebe:	46bd      	mov	sp, r7
 801bec0:	bd80      	pop	{r7, pc}
 801bec2:	bf00      	nop
 801bec4:	0801fa94 	.word	0x0801fa94

0801bec8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801bec8:	b480      	push	{r7}
 801beca:	b085      	sub	sp, #20
 801becc:	af00      	add	r7, sp, #0
 801bece:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bed0:	4b0a      	ldr	r3, [pc, #40]	@ (801befc <TimerExists+0x34>)
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801bed6:	e008      	b.n	801beea <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801bed8:	68fa      	ldr	r2, [r7, #12]
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	429a      	cmp	r2, r3
 801bede:	d101      	bne.n	801bee4 <TimerExists+0x1c>
    {
      return true;
 801bee0:	2301      	movs	r3, #1
 801bee2:	e006      	b.n	801bef2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	695b      	ldr	r3, [r3, #20]
 801bee8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801beea:	68fb      	ldr	r3, [r7, #12]
 801beec:	2b00      	cmp	r3, #0
 801beee:	d1f3      	bne.n	801bed8 <TimerExists+0x10>
  }
  return false;
 801bef0:	2300      	movs	r3, #0
}
 801bef2:	4618      	mov	r0, r3
 801bef4:	3714      	adds	r7, #20
 801bef6:	46bd      	mov	sp, r7
 801bef8:	bc80      	pop	{r7}
 801befa:	4770      	bx	lr
 801befc:	20001e08 	.word	0x20001e08

0801bf00 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801bf00:	b590      	push	{r4, r7, lr}
 801bf02:	b085      	sub	sp, #20
 801bf04:	af00      	add	r7, sp, #0
 801bf06:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801bf08:	4b11      	ldr	r3, [pc, #68]	@ (801bf50 <TimerSetTimeout+0x50>)
 801bf0a:	6a1b      	ldr	r3, [r3, #32]
 801bf0c:	4798      	blx	r3
 801bf0e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	2201      	movs	r2, #1
 801bf14:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	681c      	ldr	r4, [r3, #0]
 801bf1a:	4b0d      	ldr	r3, [pc, #52]	@ (801bf50 <TimerSetTimeout+0x50>)
 801bf1c:	699b      	ldr	r3, [r3, #24]
 801bf1e:	4798      	blx	r3
 801bf20:	4602      	mov	r2, r0
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	4413      	add	r3, r2
 801bf26:	429c      	cmp	r4, r3
 801bf28:	d207      	bcs.n	801bf3a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801bf2a:	4b09      	ldr	r3, [pc, #36]	@ (801bf50 <TimerSetTimeout+0x50>)
 801bf2c:	699b      	ldr	r3, [r3, #24]
 801bf2e:	4798      	blx	r3
 801bf30:	4602      	mov	r2, r0
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	441a      	add	r2, r3
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801bf3a:	4b05      	ldr	r3, [pc, #20]	@ (801bf50 <TimerSetTimeout+0x50>)
 801bf3c:	689b      	ldr	r3, [r3, #8]
 801bf3e:	687a      	ldr	r2, [r7, #4]
 801bf40:	6812      	ldr	r2, [r2, #0]
 801bf42:	4610      	mov	r0, r2
 801bf44:	4798      	blx	r3
}
 801bf46:	bf00      	nop
 801bf48:	3714      	adds	r7, #20
 801bf4a:	46bd      	mov	sp, r7
 801bf4c:	bd90      	pop	{r4, r7, pc}
 801bf4e:	bf00      	nop
 801bf50:	0801fa94 	.word	0x0801fa94

0801bf54 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801bf54:	b480      	push	{r7}
 801bf56:	b085      	sub	sp, #20
 801bf58:	af00      	add	r7, sp, #0
 801bf5a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bf5c:	4b14      	ldr	r3, [pc, #80]	@ (801bfb0 <TimerInsertTimer+0x5c>)
 801bf5e:	681b      	ldr	r3, [r3, #0]
 801bf60:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801bf62:	4b13      	ldr	r3, [pc, #76]	@ (801bfb0 <TimerInsertTimer+0x5c>)
 801bf64:	681b      	ldr	r3, [r3, #0]
 801bf66:	695b      	ldr	r3, [r3, #20]
 801bf68:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801bf6a:	e012      	b.n	801bf92 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	681a      	ldr	r2, [r3, #0]
 801bf70:	68bb      	ldr	r3, [r7, #8]
 801bf72:	681b      	ldr	r3, [r3, #0]
 801bf74:	429a      	cmp	r2, r3
 801bf76:	d905      	bls.n	801bf84 <TimerInsertTimer+0x30>
    {
        cur = next;
 801bf78:	68bb      	ldr	r3, [r7, #8]
 801bf7a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801bf7c:	68bb      	ldr	r3, [r7, #8]
 801bf7e:	695b      	ldr	r3, [r3, #20]
 801bf80:	60bb      	str	r3, [r7, #8]
 801bf82:	e006      	b.n	801bf92 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801bf84:	68fb      	ldr	r3, [r7, #12]
 801bf86:	687a      	ldr	r2, [r7, #4]
 801bf88:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	68ba      	ldr	r2, [r7, #8]
 801bf8e:	615a      	str	r2, [r3, #20]
        return;
 801bf90:	e009      	b.n	801bfa6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801bf92:	68fb      	ldr	r3, [r7, #12]
 801bf94:	695b      	ldr	r3, [r3, #20]
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d1e8      	bne.n	801bf6c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801bf9a:	68fb      	ldr	r3, [r7, #12]
 801bf9c:	687a      	ldr	r2, [r7, #4]
 801bf9e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	2200      	movs	r2, #0
 801bfa4:	615a      	str	r2, [r3, #20]
}
 801bfa6:	3714      	adds	r7, #20
 801bfa8:	46bd      	mov	sp, r7
 801bfaa:	bc80      	pop	{r7}
 801bfac:	4770      	bx	lr
 801bfae:	bf00      	nop
 801bfb0:	20001e08 	.word	0x20001e08

0801bfb4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	b084      	sub	sp, #16
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bfbc:	4b0b      	ldr	r3, [pc, #44]	@ (801bfec <TimerInsertNewHeadTimer+0x38>)
 801bfbe:	681b      	ldr	r3, [r3, #0]
 801bfc0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801bfc2:	68fb      	ldr	r3, [r7, #12]
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	d002      	beq.n	801bfce <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801bfc8:	68fb      	ldr	r3, [r7, #12]
 801bfca:	2200      	movs	r2, #0
 801bfcc:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	68fa      	ldr	r2, [r7, #12]
 801bfd2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801bfd4:	4a05      	ldr	r2, [pc, #20]	@ (801bfec <TimerInsertNewHeadTimer+0x38>)
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801bfda:	4b04      	ldr	r3, [pc, #16]	@ (801bfec <TimerInsertNewHeadTimer+0x38>)
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	4618      	mov	r0, r3
 801bfe0:	f7ff ff8e 	bl	801bf00 <TimerSetTimeout>
}
 801bfe4:	bf00      	nop
 801bfe6:	3710      	adds	r7, #16
 801bfe8:	46bd      	mov	sp, r7
 801bfea:	bd80      	pop	{r7, pc}
 801bfec:	20001e08 	.word	0x20001e08

0801bff0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801bff0:	b580      	push	{r7, lr}
 801bff2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801bff4:	2218      	movs	r2, #24
 801bff6:	2100      	movs	r1, #0
 801bff8:	4807      	ldr	r0, [pc, #28]	@ (801c018 <UTIL_ADV_TRACE_Init+0x28>)
 801bffa:	f7fe fffc 	bl	801aff6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801bffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801c002:	2100      	movs	r1, #0
 801c004:	4805      	ldr	r0, [pc, #20]	@ (801c01c <UTIL_ADV_TRACE_Init+0x2c>)
 801c006:	f7fe fff6 	bl	801aff6 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801c00a:	4b05      	ldr	r3, [pc, #20]	@ (801c020 <UTIL_ADV_TRACE_Init+0x30>)
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	4805      	ldr	r0, [pc, #20]	@ (801c024 <UTIL_ADV_TRACE_Init+0x34>)
 801c010:	4798      	blx	r3
 801c012:	4603      	mov	r3, r0
}
 801c014:	4618      	mov	r0, r3
 801c016:	bd80      	pop	{r7, pc}
 801c018:	20001e0c 	.word	0x20001e0c
 801c01c:	20001e24 	.word	0x20001e24
 801c020:	0801fad4 	.word	0x0801fad4
 801c024:	0801c291 	.word	0x0801c291

0801c028 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801c028:	b480      	push	{r7}
 801c02a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c02c:	4b06      	ldr	r3, [pc, #24]	@ (801c048 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c02e:	8a5a      	ldrh	r2, [r3, #18]
 801c030:	4b05      	ldr	r3, [pc, #20]	@ (801c048 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c032:	8a1b      	ldrh	r3, [r3, #16]
 801c034:	429a      	cmp	r2, r3
 801c036:	d101      	bne.n	801c03c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801c038:	2301      	movs	r3, #1
 801c03a:	e000      	b.n	801c03e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801c03c:	2300      	movs	r3, #0
}
 801c03e:	4618      	mov	r0, r3
 801c040:	46bd      	mov	sp, r7
 801c042:	bc80      	pop	{r7}
 801c044:	4770      	bx	lr
 801c046:	bf00      	nop
 801c048:	20001e0c 	.word	0x20001e0c

0801c04c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801c04c:	b408      	push	{r3}
 801c04e:	b580      	push	{r7, lr}
 801c050:	b08d      	sub	sp, #52	@ 0x34
 801c052:	af00      	add	r7, sp, #0
 801c054:	60f8      	str	r0, [r7, #12]
 801c056:	60b9      	str	r1, [r7, #8]
 801c058:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801c05a:	2300      	movs	r3, #0
 801c05c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801c05e:	2300      	movs	r3, #0
 801c060:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801c062:	4b37      	ldr	r3, [pc, #220]	@ (801c140 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c064:	7a1b      	ldrb	r3, [r3, #8]
 801c066:	461a      	mov	r2, r3
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	4293      	cmp	r3, r2
 801c06c:	d902      	bls.n	801c074 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801c06e:	f06f 0304 	mvn.w	r3, #4
 801c072:	e05e      	b.n	801c132 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801c074:	4b32      	ldr	r3, [pc, #200]	@ (801c140 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c076:	68da      	ldr	r2, [r3, #12]
 801c078:	68bb      	ldr	r3, [r7, #8]
 801c07a:	4013      	ands	r3, r2
 801c07c:	68ba      	ldr	r2, [r7, #8]
 801c07e:	429a      	cmp	r2, r3
 801c080:	d002      	beq.n	801c088 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801c082:	f06f 0305 	mvn.w	r3, #5
 801c086:	e054      	b.n	801c132 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801c088:	4b2d      	ldr	r3, [pc, #180]	@ (801c140 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c08a:	685b      	ldr	r3, [r3, #4]
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d00a      	beq.n	801c0a6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	2b00      	cmp	r3, #0
 801c094:	d007      	beq.n	801c0a6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801c096:	4b2a      	ldr	r3, [pc, #168]	@ (801c140 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c098:	685b      	ldr	r3, [r3, #4]
 801c09a:	f107 0116 	add.w	r1, r7, #22
 801c09e:	f107 0218 	add.w	r2, r7, #24
 801c0a2:	4610      	mov	r0, r2
 801c0a4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801c0a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801c0aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c0b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c0b4:	4823      	ldr	r0, [pc, #140]	@ (801c144 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801c0b6:	f7ff fa2b 	bl	801b510 <tiny_vsnprintf_like>
 801c0ba:	4603      	mov	r3, r0
 801c0bc:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801c0be:	f000 f9f1 	bl	801c4a4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801c0c2:	8afa      	ldrh	r2, [r7, #22]
 801c0c4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801c0c6:	4413      	add	r3, r2
 801c0c8:	b29b      	uxth	r3, r3
 801c0ca:	f107 0214 	add.w	r2, r7, #20
 801c0ce:	4611      	mov	r1, r2
 801c0d0:	4618      	mov	r0, r3
 801c0d2:	f000 f969 	bl	801c3a8 <TRACE_AllocateBufer>
 801c0d6:	4603      	mov	r3, r0
 801c0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c0dc:	d025      	beq.n	801c12a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801c0de:	2300      	movs	r3, #0
 801c0e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801c0e2:	e00e      	b.n	801c102 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801c0e4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c0e6:	8aba      	ldrh	r2, [r7, #20]
 801c0e8:	3330      	adds	r3, #48	@ 0x30
 801c0ea:	443b      	add	r3, r7
 801c0ec:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801c0f0:	4b15      	ldr	r3, [pc, #84]	@ (801c148 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c0f2:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801c0f4:	8abb      	ldrh	r3, [r7, #20]
 801c0f6:	3301      	adds	r3, #1
 801c0f8:	b29b      	uxth	r3, r3
 801c0fa:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801c0fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c0fe:	3301      	adds	r3, #1
 801c100:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801c102:	8afb      	ldrh	r3, [r7, #22]
 801c104:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c106:	429a      	cmp	r2, r3
 801c108:	d3ec      	bcc.n	801c0e4 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c10a:	8abb      	ldrh	r3, [r7, #20]
 801c10c:	461a      	mov	r2, r3
 801c10e:	4b0e      	ldr	r3, [pc, #56]	@ (801c148 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c110:	18d0      	adds	r0, r2, r3
 801c112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c114:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c116:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c11a:	f7ff f9f9 	bl	801b510 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c11e:	f000 f9df 	bl	801c4e0 <TRACE_UnLock>

    return TRACE_Send();
 801c122:	f000 f831 	bl	801c188 <TRACE_Send>
 801c126:	4603      	mov	r3, r0
 801c128:	e003      	b.n	801c132 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c12a:	f000 f9d9 	bl	801c4e0 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c12e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c132:	4618      	mov	r0, r3
 801c134:	3734      	adds	r7, #52	@ 0x34
 801c136:	46bd      	mov	sp, r7
 801c138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c13c:	b001      	add	sp, #4
 801c13e:	4770      	bx	lr
 801c140:	20001e0c 	.word	0x20001e0c
 801c144:	20002224 	.word	0x20002224
 801c148:	20001e24 	.word	0x20001e24

0801c14c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c14c:	b480      	push	{r7}
 801c14e:	b083      	sub	sp, #12
 801c150:	af00      	add	r7, sp, #0
 801c152:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801c154:	4a03      	ldr	r2, [pc, #12]	@ (801c164 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	6053      	str	r3, [r2, #4]
}
 801c15a:	bf00      	nop
 801c15c:	370c      	adds	r7, #12
 801c15e:	46bd      	mov	sp, r7
 801c160:	bc80      	pop	{r7}
 801c162:	4770      	bx	lr
 801c164:	20001e0c 	.word	0x20001e0c

0801c168 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c168:	b480      	push	{r7}
 801c16a:	b083      	sub	sp, #12
 801c16c:	af00      	add	r7, sp, #0
 801c16e:	4603      	mov	r3, r0
 801c170:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c172:	4a04      	ldr	r2, [pc, #16]	@ (801c184 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c174:	79fb      	ldrb	r3, [r7, #7]
 801c176:	7213      	strb	r3, [r2, #8]
}
 801c178:	bf00      	nop
 801c17a:	370c      	adds	r7, #12
 801c17c:	46bd      	mov	sp, r7
 801c17e:	bc80      	pop	{r7}
 801c180:	4770      	bx	lr
 801c182:	bf00      	nop
 801c184:	20001e0c 	.word	0x20001e0c

0801c188 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801c188:	b580      	push	{r7, lr}
 801c18a:	b088      	sub	sp, #32
 801c18c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801c18e:	2300      	movs	r3, #0
 801c190:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801c192:	2300      	movs	r3, #0
 801c194:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c196:	f3ef 8310 	mrs	r3, PRIMASK
 801c19a:	613b      	str	r3, [r7, #16]
  return(result);
 801c19c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c19e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c1a0:	b672      	cpsid	i
}
 801c1a2:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801c1a4:	f000 f9ba 	bl	801c51c <TRACE_IsLocked>
 801c1a8:	4603      	mov	r3, r0
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d15d      	bne.n	801c26a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801c1ae:	f000 f979 	bl	801c4a4 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c1b2:	4b34      	ldr	r3, [pc, #208]	@ (801c284 <TRACE_Send+0xfc>)
 801c1b4:	8a1a      	ldrh	r2, [r3, #16]
 801c1b6:	4b33      	ldr	r3, [pc, #204]	@ (801c284 <TRACE_Send+0xfc>)
 801c1b8:	8a5b      	ldrh	r3, [r3, #18]
 801c1ba:	429a      	cmp	r2, r3
 801c1bc:	d04d      	beq.n	801c25a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c1be:	4b31      	ldr	r3, [pc, #196]	@ (801c284 <TRACE_Send+0xfc>)
 801c1c0:	789b      	ldrb	r3, [r3, #2]
 801c1c2:	2b01      	cmp	r3, #1
 801c1c4:	d117      	bne.n	801c1f6 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801c1c6:	4b2f      	ldr	r3, [pc, #188]	@ (801c284 <TRACE_Send+0xfc>)
 801c1c8:	881a      	ldrh	r2, [r3, #0]
 801c1ca:	4b2e      	ldr	r3, [pc, #184]	@ (801c284 <TRACE_Send+0xfc>)
 801c1cc:	8a1b      	ldrh	r3, [r3, #16]
 801c1ce:	1ad3      	subs	r3, r2, r3
 801c1d0:	b29a      	uxth	r2, r3
 801c1d2:	4b2c      	ldr	r3, [pc, #176]	@ (801c284 <TRACE_Send+0xfc>)
 801c1d4:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c1d6:	4b2b      	ldr	r3, [pc, #172]	@ (801c284 <TRACE_Send+0xfc>)
 801c1d8:	2202      	movs	r2, #2
 801c1da:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c1dc:	4b29      	ldr	r3, [pc, #164]	@ (801c284 <TRACE_Send+0xfc>)
 801c1de:	2200      	movs	r2, #0
 801c1e0:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c1e2:	4b28      	ldr	r3, [pc, #160]	@ (801c284 <TRACE_Send+0xfc>)
 801c1e4:	8a9b      	ldrh	r3, [r3, #20]
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d105      	bne.n	801c1f6 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c1ea:	4b26      	ldr	r3, [pc, #152]	@ (801c284 <TRACE_Send+0xfc>)
 801c1ec:	2200      	movs	r2, #0
 801c1ee:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c1f0:	4b24      	ldr	r3, [pc, #144]	@ (801c284 <TRACE_Send+0xfc>)
 801c1f2:	2200      	movs	r2, #0
 801c1f4:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c1f6:	4b23      	ldr	r3, [pc, #140]	@ (801c284 <TRACE_Send+0xfc>)
 801c1f8:	789b      	ldrb	r3, [r3, #2]
 801c1fa:	2b00      	cmp	r3, #0
 801c1fc:	d115      	bne.n	801c22a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c1fe:	4b21      	ldr	r3, [pc, #132]	@ (801c284 <TRACE_Send+0xfc>)
 801c200:	8a5a      	ldrh	r2, [r3, #18]
 801c202:	4b20      	ldr	r3, [pc, #128]	@ (801c284 <TRACE_Send+0xfc>)
 801c204:	8a1b      	ldrh	r3, [r3, #16]
 801c206:	429a      	cmp	r2, r3
 801c208:	d908      	bls.n	801c21c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c20a:	4b1e      	ldr	r3, [pc, #120]	@ (801c284 <TRACE_Send+0xfc>)
 801c20c:	8a5a      	ldrh	r2, [r3, #18]
 801c20e:	4b1d      	ldr	r3, [pc, #116]	@ (801c284 <TRACE_Send+0xfc>)
 801c210:	8a1b      	ldrh	r3, [r3, #16]
 801c212:	1ad3      	subs	r3, r2, r3
 801c214:	b29a      	uxth	r2, r3
 801c216:	4b1b      	ldr	r3, [pc, #108]	@ (801c284 <TRACE_Send+0xfc>)
 801c218:	829a      	strh	r2, [r3, #20]
 801c21a:	e006      	b.n	801c22a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c21c:	4b19      	ldr	r3, [pc, #100]	@ (801c284 <TRACE_Send+0xfc>)
 801c21e:	8a1b      	ldrh	r3, [r3, #16]
 801c220:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c224:	b29a      	uxth	r2, r3
 801c226:	4b17      	ldr	r3, [pc, #92]	@ (801c284 <TRACE_Send+0xfc>)
 801c228:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c22a:	4b16      	ldr	r3, [pc, #88]	@ (801c284 <TRACE_Send+0xfc>)
 801c22c:	8a1b      	ldrh	r3, [r3, #16]
 801c22e:	461a      	mov	r2, r3
 801c230:	4b15      	ldr	r3, [pc, #84]	@ (801c288 <TRACE_Send+0x100>)
 801c232:	4413      	add	r3, r2
 801c234:	61bb      	str	r3, [r7, #24]
 801c236:	697b      	ldr	r3, [r7, #20]
 801c238:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c23a:	68fb      	ldr	r3, [r7, #12]
 801c23c:	f383 8810 	msr	PRIMASK, r3
}
 801c240:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801c242:	f7e6 f8ff 	bl	8002444 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c246:	4b11      	ldr	r3, [pc, #68]	@ (801c28c <TRACE_Send+0x104>)
 801c248:	68db      	ldr	r3, [r3, #12]
 801c24a:	4a0e      	ldr	r2, [pc, #56]	@ (801c284 <TRACE_Send+0xfc>)
 801c24c:	8a92      	ldrh	r2, [r2, #20]
 801c24e:	4611      	mov	r1, r2
 801c250:	69b8      	ldr	r0, [r7, #24]
 801c252:	4798      	blx	r3
 801c254:	4603      	mov	r3, r0
 801c256:	77fb      	strb	r3, [r7, #31]
 801c258:	e00d      	b.n	801c276 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801c25a:	f000 f941 	bl	801c4e0 <TRACE_UnLock>
 801c25e:	697b      	ldr	r3, [r7, #20]
 801c260:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c262:	68bb      	ldr	r3, [r7, #8]
 801c264:	f383 8810 	msr	PRIMASK, r3
}
 801c268:	e005      	b.n	801c276 <TRACE_Send+0xee>
 801c26a:	697b      	ldr	r3, [r7, #20]
 801c26c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	f383 8810 	msr	PRIMASK, r3
}
 801c274:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801c276:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c27a:	4618      	mov	r0, r3
 801c27c:	3720      	adds	r7, #32
 801c27e:	46bd      	mov	sp, r7
 801c280:	bd80      	pop	{r7, pc}
 801c282:	bf00      	nop
 801c284:	20001e0c 	.word	0x20001e0c
 801c288:	20001e24 	.word	0x20001e24
 801c28c:	0801fad4 	.word	0x0801fad4

0801c290 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801c290:	b580      	push	{r7, lr}
 801c292:	b088      	sub	sp, #32
 801c294:	af00      	add	r7, sp, #0
 801c296:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801c298:	2300      	movs	r3, #0
 801c29a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c29c:	f3ef 8310 	mrs	r3, PRIMASK
 801c2a0:	617b      	str	r3, [r7, #20]
  return(result);
 801c2a2:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c2a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c2a6:	b672      	cpsid	i
}
 801c2a8:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c2aa:	4b3c      	ldr	r3, [pc, #240]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c2ac:	789b      	ldrb	r3, [r3, #2]
 801c2ae:	2b02      	cmp	r3, #2
 801c2b0:	d106      	bne.n	801c2c0 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c2b2:	4b3a      	ldr	r3, [pc, #232]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c2b4:	2200      	movs	r2, #0
 801c2b6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c2b8:	4b38      	ldr	r3, [pc, #224]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c2ba:	2200      	movs	r2, #0
 801c2bc:	821a      	strh	r2, [r3, #16]
 801c2be:	e00a      	b.n	801c2d6 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c2c0:	4b36      	ldr	r3, [pc, #216]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c2c2:	8a1a      	ldrh	r2, [r3, #16]
 801c2c4:	4b35      	ldr	r3, [pc, #212]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c2c6:	8a9b      	ldrh	r3, [r3, #20]
 801c2c8:	4413      	add	r3, r2
 801c2ca:	b29b      	uxth	r3, r3
 801c2cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c2d0:	b29a      	uxth	r2, r3
 801c2d2:	4b32      	ldr	r3, [pc, #200]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c2d4:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c2d6:	4b31      	ldr	r3, [pc, #196]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c2d8:	8a1a      	ldrh	r2, [r3, #16]
 801c2da:	4b30      	ldr	r3, [pc, #192]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c2dc:	8a5b      	ldrh	r3, [r3, #18]
 801c2de:	429a      	cmp	r2, r3
 801c2e0:	d04d      	beq.n	801c37e <TRACE_TxCpltCallback+0xee>
 801c2e2:	4b2e      	ldr	r3, [pc, #184]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c2e4:	8adb      	ldrh	r3, [r3, #22]
 801c2e6:	2b01      	cmp	r3, #1
 801c2e8:	d149      	bne.n	801c37e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c2ea:	4b2c      	ldr	r3, [pc, #176]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c2ec:	789b      	ldrb	r3, [r3, #2]
 801c2ee:	2b01      	cmp	r3, #1
 801c2f0:	d117      	bne.n	801c322 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c2f2:	4b2a      	ldr	r3, [pc, #168]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c2f4:	881a      	ldrh	r2, [r3, #0]
 801c2f6:	4b29      	ldr	r3, [pc, #164]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c2f8:	8a1b      	ldrh	r3, [r3, #16]
 801c2fa:	1ad3      	subs	r3, r2, r3
 801c2fc:	b29a      	uxth	r2, r3
 801c2fe:	4b27      	ldr	r3, [pc, #156]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c300:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c302:	4b26      	ldr	r3, [pc, #152]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c304:	2202      	movs	r2, #2
 801c306:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c308:	4b24      	ldr	r3, [pc, #144]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c30a:	2200      	movs	r2, #0
 801c30c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c30e:	4b23      	ldr	r3, [pc, #140]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c310:	8a9b      	ldrh	r3, [r3, #20]
 801c312:	2b00      	cmp	r3, #0
 801c314:	d105      	bne.n	801c322 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c316:	4b21      	ldr	r3, [pc, #132]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c318:	2200      	movs	r2, #0
 801c31a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c31c:	4b1f      	ldr	r3, [pc, #124]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c31e:	2200      	movs	r2, #0
 801c320:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c322:	4b1e      	ldr	r3, [pc, #120]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c324:	789b      	ldrb	r3, [r3, #2]
 801c326:	2b00      	cmp	r3, #0
 801c328:	d115      	bne.n	801c356 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c32a:	4b1c      	ldr	r3, [pc, #112]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c32c:	8a5a      	ldrh	r2, [r3, #18]
 801c32e:	4b1b      	ldr	r3, [pc, #108]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c330:	8a1b      	ldrh	r3, [r3, #16]
 801c332:	429a      	cmp	r2, r3
 801c334:	d908      	bls.n	801c348 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c336:	4b19      	ldr	r3, [pc, #100]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c338:	8a5a      	ldrh	r2, [r3, #18]
 801c33a:	4b18      	ldr	r3, [pc, #96]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c33c:	8a1b      	ldrh	r3, [r3, #16]
 801c33e:	1ad3      	subs	r3, r2, r3
 801c340:	b29a      	uxth	r2, r3
 801c342:	4b16      	ldr	r3, [pc, #88]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c344:	829a      	strh	r2, [r3, #20]
 801c346:	e006      	b.n	801c356 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c348:	4b14      	ldr	r3, [pc, #80]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c34a:	8a1b      	ldrh	r3, [r3, #16]
 801c34c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c350:	b29a      	uxth	r2, r3
 801c352:	4b12      	ldr	r3, [pc, #72]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c354:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c356:	4b11      	ldr	r3, [pc, #68]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c358:	8a1b      	ldrh	r3, [r3, #16]
 801c35a:	461a      	mov	r2, r3
 801c35c:	4b10      	ldr	r3, [pc, #64]	@ (801c3a0 <TRACE_TxCpltCallback+0x110>)
 801c35e:	4413      	add	r3, r2
 801c360:	61fb      	str	r3, [r7, #28]
 801c362:	69bb      	ldr	r3, [r7, #24]
 801c364:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c366:	693b      	ldr	r3, [r7, #16]
 801c368:	f383 8810 	msr	PRIMASK, r3
}
 801c36c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c36e:	4b0d      	ldr	r3, [pc, #52]	@ (801c3a4 <TRACE_TxCpltCallback+0x114>)
 801c370:	68db      	ldr	r3, [r3, #12]
 801c372:	4a0a      	ldr	r2, [pc, #40]	@ (801c39c <TRACE_TxCpltCallback+0x10c>)
 801c374:	8a92      	ldrh	r2, [r2, #20]
 801c376:	4611      	mov	r1, r2
 801c378:	69f8      	ldr	r0, [r7, #28]
 801c37a:	4798      	blx	r3
 801c37c:	e00a      	b.n	801c394 <TRACE_TxCpltCallback+0x104>
 801c37e:	69bb      	ldr	r3, [r7, #24]
 801c380:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	f383 8810 	msr	PRIMASK, r3
}
 801c388:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801c38a:	f7e6 f863 	bl	8002454 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801c38e:	f000 f8a7 	bl	801c4e0 <TRACE_UnLock>
  }
}
 801c392:	bf00      	nop
 801c394:	bf00      	nop
 801c396:	3720      	adds	r7, #32
 801c398:	46bd      	mov	sp, r7
 801c39a:	bd80      	pop	{r7, pc}
 801c39c:	20001e0c 	.word	0x20001e0c
 801c3a0:	20001e24 	.word	0x20001e24
 801c3a4:	0801fad4 	.word	0x0801fad4

0801c3a8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801c3a8:	b480      	push	{r7}
 801c3aa:	b087      	sub	sp, #28
 801c3ac:	af00      	add	r7, sp, #0
 801c3ae:	4603      	mov	r3, r0
 801c3b0:	6039      	str	r1, [r7, #0]
 801c3b2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801c3b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c3b8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c3ba:	f3ef 8310 	mrs	r3, PRIMASK
 801c3be:	60fb      	str	r3, [r7, #12]
  return(result);
 801c3c0:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c3c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c3c4:	b672      	cpsid	i
}
 801c3c6:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c3c8:	4b35      	ldr	r3, [pc, #212]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c3ca:	8a5a      	ldrh	r2, [r3, #18]
 801c3cc:	4b34      	ldr	r3, [pc, #208]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c3ce:	8a1b      	ldrh	r3, [r3, #16]
 801c3d0:	429a      	cmp	r2, r3
 801c3d2:	d11b      	bne.n	801c40c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c3d4:	4b32      	ldr	r3, [pc, #200]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c3d6:	8a5b      	ldrh	r3, [r3, #18]
 801c3d8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c3dc:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801c3de:	88fa      	ldrh	r2, [r7, #6]
 801c3e0:	8afb      	ldrh	r3, [r7, #22]
 801c3e2:	429a      	cmp	r2, r3
 801c3e4:	d33a      	bcc.n	801c45c <TRACE_AllocateBufer+0xb4>
 801c3e6:	4b2e      	ldr	r3, [pc, #184]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c3e8:	8a1b      	ldrh	r3, [r3, #16]
 801c3ea:	88fa      	ldrh	r2, [r7, #6]
 801c3ec:	429a      	cmp	r2, r3
 801c3ee:	d235      	bcs.n	801c45c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c3f0:	4b2b      	ldr	r3, [pc, #172]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c3f2:	2201      	movs	r2, #1
 801c3f4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c3f6:	4b2a      	ldr	r3, [pc, #168]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c3f8:	8a5a      	ldrh	r2, [r3, #18]
 801c3fa:	4b29      	ldr	r3, [pc, #164]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c3fc:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c3fe:	4b28      	ldr	r3, [pc, #160]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c400:	8a1b      	ldrh	r3, [r3, #16]
 801c402:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c404:	4b26      	ldr	r3, [pc, #152]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c406:	2200      	movs	r2, #0
 801c408:	825a      	strh	r2, [r3, #18]
 801c40a:	e027      	b.n	801c45c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c40c:	4b24      	ldr	r3, [pc, #144]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c40e:	8a5a      	ldrh	r2, [r3, #18]
 801c410:	4b23      	ldr	r3, [pc, #140]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c412:	8a1b      	ldrh	r3, [r3, #16]
 801c414:	429a      	cmp	r2, r3
 801c416:	d91b      	bls.n	801c450 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c418:	4b21      	ldr	r3, [pc, #132]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c41a:	8a5b      	ldrh	r3, [r3, #18]
 801c41c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c420:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c422:	88fa      	ldrh	r2, [r7, #6]
 801c424:	8afb      	ldrh	r3, [r7, #22]
 801c426:	429a      	cmp	r2, r3
 801c428:	d318      	bcc.n	801c45c <TRACE_AllocateBufer+0xb4>
 801c42a:	4b1d      	ldr	r3, [pc, #116]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c42c:	8a1b      	ldrh	r3, [r3, #16]
 801c42e:	88fa      	ldrh	r2, [r7, #6]
 801c430:	429a      	cmp	r2, r3
 801c432:	d213      	bcs.n	801c45c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c434:	4b1a      	ldr	r3, [pc, #104]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c436:	2201      	movs	r2, #1
 801c438:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c43a:	4b19      	ldr	r3, [pc, #100]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c43c:	8a5a      	ldrh	r2, [r3, #18]
 801c43e:	4b18      	ldr	r3, [pc, #96]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c440:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c442:	4b17      	ldr	r3, [pc, #92]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c444:	8a1b      	ldrh	r3, [r3, #16]
 801c446:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c448:	4b15      	ldr	r3, [pc, #84]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c44a:	2200      	movs	r2, #0
 801c44c:	825a      	strh	r2, [r3, #18]
 801c44e:	e005      	b.n	801c45c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c450:	4b13      	ldr	r3, [pc, #76]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c452:	8a1a      	ldrh	r2, [r3, #16]
 801c454:	4b12      	ldr	r3, [pc, #72]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c456:	8a5b      	ldrh	r3, [r3, #18]
 801c458:	1ad3      	subs	r3, r2, r3
 801c45a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801c45c:	8afa      	ldrh	r2, [r7, #22]
 801c45e:	88fb      	ldrh	r3, [r7, #6]
 801c460:	429a      	cmp	r2, r3
 801c462:	d90f      	bls.n	801c484 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c464:	4b0e      	ldr	r3, [pc, #56]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c466:	8a5a      	ldrh	r2, [r3, #18]
 801c468:	683b      	ldr	r3, [r7, #0]
 801c46a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c46c:	4b0c      	ldr	r3, [pc, #48]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c46e:	8a5a      	ldrh	r2, [r3, #18]
 801c470:	88fb      	ldrh	r3, [r7, #6]
 801c472:	4413      	add	r3, r2
 801c474:	b29b      	uxth	r3, r3
 801c476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c47a:	b29a      	uxth	r2, r3
 801c47c:	4b08      	ldr	r3, [pc, #32]	@ (801c4a0 <TRACE_AllocateBufer+0xf8>)
 801c47e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c480:	2300      	movs	r3, #0
 801c482:	82bb      	strh	r3, [r7, #20]
 801c484:	693b      	ldr	r3, [r7, #16]
 801c486:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c488:	68bb      	ldr	r3, [r7, #8]
 801c48a:	f383 8810 	msr	PRIMASK, r3
}
 801c48e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801c490:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801c494:	4618      	mov	r0, r3
 801c496:	371c      	adds	r7, #28
 801c498:	46bd      	mov	sp, r7
 801c49a:	bc80      	pop	{r7}
 801c49c:	4770      	bx	lr
 801c49e:	bf00      	nop
 801c4a0:	20001e0c 	.word	0x20001e0c

0801c4a4 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801c4a4:	b480      	push	{r7}
 801c4a6:	b085      	sub	sp, #20
 801c4a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4aa:	f3ef 8310 	mrs	r3, PRIMASK
 801c4ae:	607b      	str	r3, [r7, #4]
  return(result);
 801c4b0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c4b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4b4:	b672      	cpsid	i
}
 801c4b6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801c4b8:	4b08      	ldr	r3, [pc, #32]	@ (801c4dc <TRACE_Lock+0x38>)
 801c4ba:	8adb      	ldrh	r3, [r3, #22]
 801c4bc:	3301      	adds	r3, #1
 801c4be:	b29a      	uxth	r2, r3
 801c4c0:	4b06      	ldr	r3, [pc, #24]	@ (801c4dc <TRACE_Lock+0x38>)
 801c4c2:	82da      	strh	r2, [r3, #22]
 801c4c4:	68fb      	ldr	r3, [r7, #12]
 801c4c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4c8:	68bb      	ldr	r3, [r7, #8]
 801c4ca:	f383 8810 	msr	PRIMASK, r3
}
 801c4ce:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c4d0:	bf00      	nop
 801c4d2:	3714      	adds	r7, #20
 801c4d4:	46bd      	mov	sp, r7
 801c4d6:	bc80      	pop	{r7}
 801c4d8:	4770      	bx	lr
 801c4da:	bf00      	nop
 801c4dc:	20001e0c 	.word	0x20001e0c

0801c4e0 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801c4e0:	b480      	push	{r7}
 801c4e2:	b085      	sub	sp, #20
 801c4e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4e6:	f3ef 8310 	mrs	r3, PRIMASK
 801c4ea:	607b      	str	r3, [r7, #4]
  return(result);
 801c4ec:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c4ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4f0:	b672      	cpsid	i
}
 801c4f2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801c4f4:	4b08      	ldr	r3, [pc, #32]	@ (801c518 <TRACE_UnLock+0x38>)
 801c4f6:	8adb      	ldrh	r3, [r3, #22]
 801c4f8:	3b01      	subs	r3, #1
 801c4fa:	b29a      	uxth	r2, r3
 801c4fc:	4b06      	ldr	r3, [pc, #24]	@ (801c518 <TRACE_UnLock+0x38>)
 801c4fe:	82da      	strh	r2, [r3, #22]
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c504:	68bb      	ldr	r3, [r7, #8]
 801c506:	f383 8810 	msr	PRIMASK, r3
}
 801c50a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c50c:	bf00      	nop
 801c50e:	3714      	adds	r7, #20
 801c510:	46bd      	mov	sp, r7
 801c512:	bc80      	pop	{r7}
 801c514:	4770      	bx	lr
 801c516:	bf00      	nop
 801c518:	20001e0c 	.word	0x20001e0c

0801c51c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801c51c:	b480      	push	{r7}
 801c51e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c520:	4b05      	ldr	r3, [pc, #20]	@ (801c538 <TRACE_IsLocked+0x1c>)
 801c522:	8adb      	ldrh	r3, [r3, #22]
 801c524:	2b00      	cmp	r3, #0
 801c526:	bf14      	ite	ne
 801c528:	2301      	movne	r3, #1
 801c52a:	2300      	moveq	r3, #0
 801c52c:	b2db      	uxtb	r3, r3
}
 801c52e:	4618      	mov	r0, r3
 801c530:	46bd      	mov	sp, r7
 801c532:	bc80      	pop	{r7}
 801c534:	4770      	bx	lr
 801c536:	bf00      	nop
 801c538:	20001e0c 	.word	0x20001e0c

0801c53c <__cvt>:
 801c53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c540:	b088      	sub	sp, #32
 801c542:	2b00      	cmp	r3, #0
 801c544:	461d      	mov	r5, r3
 801c546:	4614      	mov	r4, r2
 801c548:	bfbc      	itt	lt
 801c54a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 801c54e:	4614      	movlt	r4, r2
 801c550:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c552:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801c554:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 801c558:	bfb6      	itet	lt
 801c55a:	461d      	movlt	r5, r3
 801c55c:	2300      	movge	r3, #0
 801c55e:	232d      	movlt	r3, #45	@ 0x2d
 801c560:	7013      	strb	r3, [r2, #0]
 801c562:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c564:	f023 0820 	bic.w	r8, r3, #32
 801c568:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c56c:	d005      	beq.n	801c57a <__cvt+0x3e>
 801c56e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801c572:	d100      	bne.n	801c576 <__cvt+0x3a>
 801c574:	3601      	adds	r6, #1
 801c576:	2302      	movs	r3, #2
 801c578:	e000      	b.n	801c57c <__cvt+0x40>
 801c57a:	2303      	movs	r3, #3
 801c57c:	aa07      	add	r2, sp, #28
 801c57e:	9204      	str	r2, [sp, #16]
 801c580:	aa06      	add	r2, sp, #24
 801c582:	e9cd a202 	strd	sl, r2, [sp, #8]
 801c586:	e9cd 3600 	strd	r3, r6, [sp]
 801c58a:	4622      	mov	r2, r4
 801c58c:	462b      	mov	r3, r5
 801c58e:	f000 fedf 	bl	801d350 <_dtoa_r>
 801c592:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801c596:	4607      	mov	r7, r0
 801c598:	d119      	bne.n	801c5ce <__cvt+0x92>
 801c59a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c59c:	07db      	lsls	r3, r3, #31
 801c59e:	d50e      	bpl.n	801c5be <__cvt+0x82>
 801c5a0:	eb00 0906 	add.w	r9, r0, r6
 801c5a4:	2200      	movs	r2, #0
 801c5a6:	2300      	movs	r3, #0
 801c5a8:	4620      	mov	r0, r4
 801c5aa:	4629      	mov	r1, r5
 801c5ac:	f7e4 fa64 	bl	8000a78 <__aeabi_dcmpeq>
 801c5b0:	b108      	cbz	r0, 801c5b6 <__cvt+0x7a>
 801c5b2:	f8cd 901c 	str.w	r9, [sp, #28]
 801c5b6:	2230      	movs	r2, #48	@ 0x30
 801c5b8:	9b07      	ldr	r3, [sp, #28]
 801c5ba:	454b      	cmp	r3, r9
 801c5bc:	d31e      	bcc.n	801c5fc <__cvt+0xc0>
 801c5be:	9b07      	ldr	r3, [sp, #28]
 801c5c0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c5c2:	1bdb      	subs	r3, r3, r7
 801c5c4:	4638      	mov	r0, r7
 801c5c6:	6013      	str	r3, [r2, #0]
 801c5c8:	b008      	add	sp, #32
 801c5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c5ce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c5d2:	eb00 0906 	add.w	r9, r0, r6
 801c5d6:	d1e5      	bne.n	801c5a4 <__cvt+0x68>
 801c5d8:	7803      	ldrb	r3, [r0, #0]
 801c5da:	2b30      	cmp	r3, #48	@ 0x30
 801c5dc:	d10a      	bne.n	801c5f4 <__cvt+0xb8>
 801c5de:	2200      	movs	r2, #0
 801c5e0:	2300      	movs	r3, #0
 801c5e2:	4620      	mov	r0, r4
 801c5e4:	4629      	mov	r1, r5
 801c5e6:	f7e4 fa47 	bl	8000a78 <__aeabi_dcmpeq>
 801c5ea:	b918      	cbnz	r0, 801c5f4 <__cvt+0xb8>
 801c5ec:	f1c6 0601 	rsb	r6, r6, #1
 801c5f0:	f8ca 6000 	str.w	r6, [sl]
 801c5f4:	f8da 3000 	ldr.w	r3, [sl]
 801c5f8:	4499      	add	r9, r3
 801c5fa:	e7d3      	b.n	801c5a4 <__cvt+0x68>
 801c5fc:	1c59      	adds	r1, r3, #1
 801c5fe:	9107      	str	r1, [sp, #28]
 801c600:	701a      	strb	r2, [r3, #0]
 801c602:	e7d9      	b.n	801c5b8 <__cvt+0x7c>

0801c604 <__exponent>:
 801c604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c606:	2900      	cmp	r1, #0
 801c608:	bfba      	itte	lt
 801c60a:	4249      	neglt	r1, r1
 801c60c:	232d      	movlt	r3, #45	@ 0x2d
 801c60e:	232b      	movge	r3, #43	@ 0x2b
 801c610:	2909      	cmp	r1, #9
 801c612:	7002      	strb	r2, [r0, #0]
 801c614:	7043      	strb	r3, [r0, #1]
 801c616:	dd29      	ble.n	801c66c <__exponent+0x68>
 801c618:	f10d 0307 	add.w	r3, sp, #7
 801c61c:	461d      	mov	r5, r3
 801c61e:	270a      	movs	r7, #10
 801c620:	461a      	mov	r2, r3
 801c622:	fbb1 f6f7 	udiv	r6, r1, r7
 801c626:	fb07 1416 	mls	r4, r7, r6, r1
 801c62a:	3430      	adds	r4, #48	@ 0x30
 801c62c:	f802 4c01 	strb.w	r4, [r2, #-1]
 801c630:	460c      	mov	r4, r1
 801c632:	2c63      	cmp	r4, #99	@ 0x63
 801c634:	f103 33ff 	add.w	r3, r3, #4294967295
 801c638:	4631      	mov	r1, r6
 801c63a:	dcf1      	bgt.n	801c620 <__exponent+0x1c>
 801c63c:	3130      	adds	r1, #48	@ 0x30
 801c63e:	1e94      	subs	r4, r2, #2
 801c640:	f803 1c01 	strb.w	r1, [r3, #-1]
 801c644:	1c41      	adds	r1, r0, #1
 801c646:	4623      	mov	r3, r4
 801c648:	42ab      	cmp	r3, r5
 801c64a:	d30a      	bcc.n	801c662 <__exponent+0x5e>
 801c64c:	f10d 0309 	add.w	r3, sp, #9
 801c650:	1a9b      	subs	r3, r3, r2
 801c652:	42ac      	cmp	r4, r5
 801c654:	bf88      	it	hi
 801c656:	2300      	movhi	r3, #0
 801c658:	3302      	adds	r3, #2
 801c65a:	4403      	add	r3, r0
 801c65c:	1a18      	subs	r0, r3, r0
 801c65e:	b003      	add	sp, #12
 801c660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c662:	f813 6b01 	ldrb.w	r6, [r3], #1
 801c666:	f801 6f01 	strb.w	r6, [r1, #1]!
 801c66a:	e7ed      	b.n	801c648 <__exponent+0x44>
 801c66c:	2330      	movs	r3, #48	@ 0x30
 801c66e:	3130      	adds	r1, #48	@ 0x30
 801c670:	7083      	strb	r3, [r0, #2]
 801c672:	70c1      	strb	r1, [r0, #3]
 801c674:	1d03      	adds	r3, r0, #4
 801c676:	e7f1      	b.n	801c65c <__exponent+0x58>

0801c678 <_printf_float>:
 801c678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c67c:	b091      	sub	sp, #68	@ 0x44
 801c67e:	460c      	mov	r4, r1
 801c680:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 801c684:	4616      	mov	r6, r2
 801c686:	461f      	mov	r7, r3
 801c688:	4605      	mov	r5, r0
 801c68a:	f000 fd51 	bl	801d130 <_localeconv_r>
 801c68e:	6803      	ldr	r3, [r0, #0]
 801c690:	9308      	str	r3, [sp, #32]
 801c692:	4618      	mov	r0, r3
 801c694:	f7e3 fdc4 	bl	8000220 <strlen>
 801c698:	2300      	movs	r3, #0
 801c69a:	930e      	str	r3, [sp, #56]	@ 0x38
 801c69c:	f8d8 3000 	ldr.w	r3, [r8]
 801c6a0:	9009      	str	r0, [sp, #36]	@ 0x24
 801c6a2:	3307      	adds	r3, #7
 801c6a4:	f023 0307 	bic.w	r3, r3, #7
 801c6a8:	f103 0208 	add.w	r2, r3, #8
 801c6ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 801c6b0:	f8d4 b000 	ldr.w	fp, [r4]
 801c6b4:	f8c8 2000 	str.w	r2, [r8]
 801c6b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c6bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801c6c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c6c2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801c6c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801c6ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801c6ce:	4b9d      	ldr	r3, [pc, #628]	@ (801c944 <_printf_float+0x2cc>)
 801c6d0:	f04f 32ff 	mov.w	r2, #4294967295
 801c6d4:	f7e4 fa02 	bl	8000adc <__aeabi_dcmpun>
 801c6d8:	bb70      	cbnz	r0, 801c738 <_printf_float+0xc0>
 801c6da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801c6de:	4b99      	ldr	r3, [pc, #612]	@ (801c944 <_printf_float+0x2cc>)
 801c6e0:	f04f 32ff 	mov.w	r2, #4294967295
 801c6e4:	f7e4 f9dc 	bl	8000aa0 <__aeabi_dcmple>
 801c6e8:	bb30      	cbnz	r0, 801c738 <_printf_float+0xc0>
 801c6ea:	2200      	movs	r2, #0
 801c6ec:	2300      	movs	r3, #0
 801c6ee:	4640      	mov	r0, r8
 801c6f0:	4649      	mov	r1, r9
 801c6f2:	f7e4 f9cb 	bl	8000a8c <__aeabi_dcmplt>
 801c6f6:	b110      	cbz	r0, 801c6fe <_printf_float+0x86>
 801c6f8:	232d      	movs	r3, #45	@ 0x2d
 801c6fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c6fe:	4a92      	ldr	r2, [pc, #584]	@ (801c948 <_printf_float+0x2d0>)
 801c700:	4b92      	ldr	r3, [pc, #584]	@ (801c94c <_printf_float+0x2d4>)
 801c702:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801c706:	bf94      	ite	ls
 801c708:	4690      	movls	r8, r2
 801c70a:	4698      	movhi	r8, r3
 801c70c:	2303      	movs	r3, #3
 801c70e:	6123      	str	r3, [r4, #16]
 801c710:	f02b 0304 	bic.w	r3, fp, #4
 801c714:	6023      	str	r3, [r4, #0]
 801c716:	f04f 0900 	mov.w	r9, #0
 801c71a:	9700      	str	r7, [sp, #0]
 801c71c:	4633      	mov	r3, r6
 801c71e:	aa0f      	add	r2, sp, #60	@ 0x3c
 801c720:	4621      	mov	r1, r4
 801c722:	4628      	mov	r0, r5
 801c724:	f000 f9d4 	bl	801cad0 <_printf_common>
 801c728:	3001      	adds	r0, #1
 801c72a:	f040 808f 	bne.w	801c84c <_printf_float+0x1d4>
 801c72e:	f04f 30ff 	mov.w	r0, #4294967295
 801c732:	b011      	add	sp, #68	@ 0x44
 801c734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c738:	4642      	mov	r2, r8
 801c73a:	464b      	mov	r3, r9
 801c73c:	4640      	mov	r0, r8
 801c73e:	4649      	mov	r1, r9
 801c740:	f7e4 f9cc 	bl	8000adc <__aeabi_dcmpun>
 801c744:	b140      	cbz	r0, 801c758 <_printf_float+0xe0>
 801c746:	464b      	mov	r3, r9
 801c748:	2b00      	cmp	r3, #0
 801c74a:	bfbc      	itt	lt
 801c74c:	232d      	movlt	r3, #45	@ 0x2d
 801c74e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801c752:	4a7f      	ldr	r2, [pc, #508]	@ (801c950 <_printf_float+0x2d8>)
 801c754:	4b7f      	ldr	r3, [pc, #508]	@ (801c954 <_printf_float+0x2dc>)
 801c756:	e7d4      	b.n	801c702 <_printf_float+0x8a>
 801c758:	6863      	ldr	r3, [r4, #4]
 801c75a:	1c5a      	adds	r2, r3, #1
 801c75c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 801c760:	d13f      	bne.n	801c7e2 <_printf_float+0x16a>
 801c762:	2306      	movs	r3, #6
 801c764:	6063      	str	r3, [r4, #4]
 801c766:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 801c76a:	2200      	movs	r2, #0
 801c76c:	6023      	str	r3, [r4, #0]
 801c76e:	9206      	str	r2, [sp, #24]
 801c770:	aa0e      	add	r2, sp, #56	@ 0x38
 801c772:	e9cd a204 	strd	sl, r2, [sp, #16]
 801c776:	aa0d      	add	r2, sp, #52	@ 0x34
 801c778:	9203      	str	r2, [sp, #12]
 801c77a:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 801c77e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801c782:	6863      	ldr	r3, [r4, #4]
 801c784:	9300      	str	r3, [sp, #0]
 801c786:	4642      	mov	r2, r8
 801c788:	464b      	mov	r3, r9
 801c78a:	4628      	mov	r0, r5
 801c78c:	910a      	str	r1, [sp, #40]	@ 0x28
 801c78e:	f7ff fed5 	bl	801c53c <__cvt>
 801c792:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c794:	2947      	cmp	r1, #71	@ 0x47
 801c796:	4680      	mov	r8, r0
 801c798:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801c79a:	d128      	bne.n	801c7ee <_printf_float+0x176>
 801c79c:	1cc8      	adds	r0, r1, #3
 801c79e:	db02      	blt.n	801c7a6 <_printf_float+0x12e>
 801c7a0:	6863      	ldr	r3, [r4, #4]
 801c7a2:	4299      	cmp	r1, r3
 801c7a4:	dd40      	ble.n	801c828 <_printf_float+0x1b0>
 801c7a6:	f1aa 0a02 	sub.w	sl, sl, #2
 801c7aa:	fa5f fa8a 	uxtb.w	sl, sl
 801c7ae:	3901      	subs	r1, #1
 801c7b0:	4652      	mov	r2, sl
 801c7b2:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801c7b6:	910d      	str	r1, [sp, #52]	@ 0x34
 801c7b8:	f7ff ff24 	bl	801c604 <__exponent>
 801c7bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c7be:	1813      	adds	r3, r2, r0
 801c7c0:	2a01      	cmp	r2, #1
 801c7c2:	4681      	mov	r9, r0
 801c7c4:	6123      	str	r3, [r4, #16]
 801c7c6:	dc02      	bgt.n	801c7ce <_printf_float+0x156>
 801c7c8:	6822      	ldr	r2, [r4, #0]
 801c7ca:	07d2      	lsls	r2, r2, #31
 801c7cc:	d501      	bpl.n	801c7d2 <_printf_float+0x15a>
 801c7ce:	3301      	adds	r3, #1
 801c7d0:	6123      	str	r3, [r4, #16]
 801c7d2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	d09f      	beq.n	801c71a <_printf_float+0xa2>
 801c7da:	232d      	movs	r3, #45	@ 0x2d
 801c7dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c7e0:	e79b      	b.n	801c71a <_printf_float+0xa2>
 801c7e2:	2947      	cmp	r1, #71	@ 0x47
 801c7e4:	d1bf      	bne.n	801c766 <_printf_float+0xee>
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d1bd      	bne.n	801c766 <_printf_float+0xee>
 801c7ea:	2301      	movs	r3, #1
 801c7ec:	e7ba      	b.n	801c764 <_printf_float+0xec>
 801c7ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c7f2:	d9dc      	bls.n	801c7ae <_printf_float+0x136>
 801c7f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801c7f8:	d118      	bne.n	801c82c <_printf_float+0x1b4>
 801c7fa:	2900      	cmp	r1, #0
 801c7fc:	6863      	ldr	r3, [r4, #4]
 801c7fe:	dd0b      	ble.n	801c818 <_printf_float+0x1a0>
 801c800:	6121      	str	r1, [r4, #16]
 801c802:	b913      	cbnz	r3, 801c80a <_printf_float+0x192>
 801c804:	6822      	ldr	r2, [r4, #0]
 801c806:	07d0      	lsls	r0, r2, #31
 801c808:	d502      	bpl.n	801c810 <_printf_float+0x198>
 801c80a:	3301      	adds	r3, #1
 801c80c:	440b      	add	r3, r1
 801c80e:	6123      	str	r3, [r4, #16]
 801c810:	65a1      	str	r1, [r4, #88]	@ 0x58
 801c812:	f04f 0900 	mov.w	r9, #0
 801c816:	e7dc      	b.n	801c7d2 <_printf_float+0x15a>
 801c818:	b913      	cbnz	r3, 801c820 <_printf_float+0x1a8>
 801c81a:	6822      	ldr	r2, [r4, #0]
 801c81c:	07d2      	lsls	r2, r2, #31
 801c81e:	d501      	bpl.n	801c824 <_printf_float+0x1ac>
 801c820:	3302      	adds	r3, #2
 801c822:	e7f4      	b.n	801c80e <_printf_float+0x196>
 801c824:	2301      	movs	r3, #1
 801c826:	e7f2      	b.n	801c80e <_printf_float+0x196>
 801c828:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801c82c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c82e:	4299      	cmp	r1, r3
 801c830:	db05      	blt.n	801c83e <_printf_float+0x1c6>
 801c832:	6823      	ldr	r3, [r4, #0]
 801c834:	6121      	str	r1, [r4, #16]
 801c836:	07d8      	lsls	r0, r3, #31
 801c838:	d5ea      	bpl.n	801c810 <_printf_float+0x198>
 801c83a:	1c4b      	adds	r3, r1, #1
 801c83c:	e7e7      	b.n	801c80e <_printf_float+0x196>
 801c83e:	2900      	cmp	r1, #0
 801c840:	bfd4      	ite	le
 801c842:	f1c1 0202 	rsble	r2, r1, #2
 801c846:	2201      	movgt	r2, #1
 801c848:	4413      	add	r3, r2
 801c84a:	e7e0      	b.n	801c80e <_printf_float+0x196>
 801c84c:	6823      	ldr	r3, [r4, #0]
 801c84e:	055a      	lsls	r2, r3, #21
 801c850:	d407      	bmi.n	801c862 <_printf_float+0x1ea>
 801c852:	6923      	ldr	r3, [r4, #16]
 801c854:	4642      	mov	r2, r8
 801c856:	4631      	mov	r1, r6
 801c858:	4628      	mov	r0, r5
 801c85a:	47b8      	blx	r7
 801c85c:	3001      	adds	r0, #1
 801c85e:	d12b      	bne.n	801c8b8 <_printf_float+0x240>
 801c860:	e765      	b.n	801c72e <_printf_float+0xb6>
 801c862:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c866:	f240 80dd 	bls.w	801ca24 <_printf_float+0x3ac>
 801c86a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c86e:	2200      	movs	r2, #0
 801c870:	2300      	movs	r3, #0
 801c872:	f7e4 f901 	bl	8000a78 <__aeabi_dcmpeq>
 801c876:	2800      	cmp	r0, #0
 801c878:	d033      	beq.n	801c8e2 <_printf_float+0x26a>
 801c87a:	4a37      	ldr	r2, [pc, #220]	@ (801c958 <_printf_float+0x2e0>)
 801c87c:	2301      	movs	r3, #1
 801c87e:	4631      	mov	r1, r6
 801c880:	4628      	mov	r0, r5
 801c882:	47b8      	blx	r7
 801c884:	3001      	adds	r0, #1
 801c886:	f43f af52 	beq.w	801c72e <_printf_float+0xb6>
 801c88a:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 801c88e:	4543      	cmp	r3, r8
 801c890:	db02      	blt.n	801c898 <_printf_float+0x220>
 801c892:	6823      	ldr	r3, [r4, #0]
 801c894:	07d8      	lsls	r0, r3, #31
 801c896:	d50f      	bpl.n	801c8b8 <_printf_float+0x240>
 801c898:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c89c:	4631      	mov	r1, r6
 801c89e:	4628      	mov	r0, r5
 801c8a0:	47b8      	blx	r7
 801c8a2:	3001      	adds	r0, #1
 801c8a4:	f43f af43 	beq.w	801c72e <_printf_float+0xb6>
 801c8a8:	f04f 0900 	mov.w	r9, #0
 801c8ac:	f108 38ff 	add.w	r8, r8, #4294967295
 801c8b0:	f104 0a1a 	add.w	sl, r4, #26
 801c8b4:	45c8      	cmp	r8, r9
 801c8b6:	dc09      	bgt.n	801c8cc <_printf_float+0x254>
 801c8b8:	6823      	ldr	r3, [r4, #0]
 801c8ba:	079b      	lsls	r3, r3, #30
 801c8bc:	f100 8103 	bmi.w	801cac6 <_printf_float+0x44e>
 801c8c0:	68e0      	ldr	r0, [r4, #12]
 801c8c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c8c4:	4298      	cmp	r0, r3
 801c8c6:	bfb8      	it	lt
 801c8c8:	4618      	movlt	r0, r3
 801c8ca:	e732      	b.n	801c732 <_printf_float+0xba>
 801c8cc:	2301      	movs	r3, #1
 801c8ce:	4652      	mov	r2, sl
 801c8d0:	4631      	mov	r1, r6
 801c8d2:	4628      	mov	r0, r5
 801c8d4:	47b8      	blx	r7
 801c8d6:	3001      	adds	r0, #1
 801c8d8:	f43f af29 	beq.w	801c72e <_printf_float+0xb6>
 801c8dc:	f109 0901 	add.w	r9, r9, #1
 801c8e0:	e7e8      	b.n	801c8b4 <_printf_float+0x23c>
 801c8e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c8e4:	2b00      	cmp	r3, #0
 801c8e6:	dc39      	bgt.n	801c95c <_printf_float+0x2e4>
 801c8e8:	4a1b      	ldr	r2, [pc, #108]	@ (801c958 <_printf_float+0x2e0>)
 801c8ea:	2301      	movs	r3, #1
 801c8ec:	4631      	mov	r1, r6
 801c8ee:	4628      	mov	r0, r5
 801c8f0:	47b8      	blx	r7
 801c8f2:	3001      	adds	r0, #1
 801c8f4:	f43f af1b 	beq.w	801c72e <_printf_float+0xb6>
 801c8f8:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 801c8fc:	ea59 0303 	orrs.w	r3, r9, r3
 801c900:	d102      	bne.n	801c908 <_printf_float+0x290>
 801c902:	6823      	ldr	r3, [r4, #0]
 801c904:	07d9      	lsls	r1, r3, #31
 801c906:	d5d7      	bpl.n	801c8b8 <_printf_float+0x240>
 801c908:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c90c:	4631      	mov	r1, r6
 801c90e:	4628      	mov	r0, r5
 801c910:	47b8      	blx	r7
 801c912:	3001      	adds	r0, #1
 801c914:	f43f af0b 	beq.w	801c72e <_printf_float+0xb6>
 801c918:	f04f 0a00 	mov.w	sl, #0
 801c91c:	f104 0b1a 	add.w	fp, r4, #26
 801c920:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c922:	425b      	negs	r3, r3
 801c924:	4553      	cmp	r3, sl
 801c926:	dc01      	bgt.n	801c92c <_printf_float+0x2b4>
 801c928:	464b      	mov	r3, r9
 801c92a:	e793      	b.n	801c854 <_printf_float+0x1dc>
 801c92c:	2301      	movs	r3, #1
 801c92e:	465a      	mov	r2, fp
 801c930:	4631      	mov	r1, r6
 801c932:	4628      	mov	r0, r5
 801c934:	47b8      	blx	r7
 801c936:	3001      	adds	r0, #1
 801c938:	f43f aef9 	beq.w	801c72e <_printf_float+0xb6>
 801c93c:	f10a 0a01 	add.w	sl, sl, #1
 801c940:	e7ee      	b.n	801c920 <_printf_float+0x2a8>
 801c942:	bf00      	nop
 801c944:	7fefffff 	.word	0x7fefffff
 801c948:	08020024 	.word	0x08020024
 801c94c:	08020028 	.word	0x08020028
 801c950:	0802002c 	.word	0x0802002c
 801c954:	08020030 	.word	0x08020030
 801c958:	08020034 	.word	0x08020034
 801c95c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c95e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801c962:	4553      	cmp	r3, sl
 801c964:	bfa8      	it	ge
 801c966:	4653      	movge	r3, sl
 801c968:	2b00      	cmp	r3, #0
 801c96a:	4699      	mov	r9, r3
 801c96c:	dc36      	bgt.n	801c9dc <_printf_float+0x364>
 801c96e:	f04f 0b00 	mov.w	fp, #0
 801c972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c976:	f104 021a 	add.w	r2, r4, #26
 801c97a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c97c:	930a      	str	r3, [sp, #40]	@ 0x28
 801c97e:	eba3 0309 	sub.w	r3, r3, r9
 801c982:	455b      	cmp	r3, fp
 801c984:	dc31      	bgt.n	801c9ea <_printf_float+0x372>
 801c986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c988:	459a      	cmp	sl, r3
 801c98a:	dc3a      	bgt.n	801ca02 <_printf_float+0x38a>
 801c98c:	6823      	ldr	r3, [r4, #0]
 801c98e:	07da      	lsls	r2, r3, #31
 801c990:	d437      	bmi.n	801ca02 <_printf_float+0x38a>
 801c992:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c994:	ebaa 0903 	sub.w	r9, sl, r3
 801c998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c99a:	ebaa 0303 	sub.w	r3, sl, r3
 801c99e:	4599      	cmp	r9, r3
 801c9a0:	bfa8      	it	ge
 801c9a2:	4699      	movge	r9, r3
 801c9a4:	f1b9 0f00 	cmp.w	r9, #0
 801c9a8:	dc33      	bgt.n	801ca12 <_printf_float+0x39a>
 801c9aa:	f04f 0800 	mov.w	r8, #0
 801c9ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c9b2:	f104 0b1a 	add.w	fp, r4, #26
 801c9b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c9b8:	ebaa 0303 	sub.w	r3, sl, r3
 801c9bc:	eba3 0309 	sub.w	r3, r3, r9
 801c9c0:	4543      	cmp	r3, r8
 801c9c2:	f77f af79 	ble.w	801c8b8 <_printf_float+0x240>
 801c9c6:	2301      	movs	r3, #1
 801c9c8:	465a      	mov	r2, fp
 801c9ca:	4631      	mov	r1, r6
 801c9cc:	4628      	mov	r0, r5
 801c9ce:	47b8      	blx	r7
 801c9d0:	3001      	adds	r0, #1
 801c9d2:	f43f aeac 	beq.w	801c72e <_printf_float+0xb6>
 801c9d6:	f108 0801 	add.w	r8, r8, #1
 801c9da:	e7ec      	b.n	801c9b6 <_printf_float+0x33e>
 801c9dc:	4642      	mov	r2, r8
 801c9de:	4631      	mov	r1, r6
 801c9e0:	4628      	mov	r0, r5
 801c9e2:	47b8      	blx	r7
 801c9e4:	3001      	adds	r0, #1
 801c9e6:	d1c2      	bne.n	801c96e <_printf_float+0x2f6>
 801c9e8:	e6a1      	b.n	801c72e <_printf_float+0xb6>
 801c9ea:	2301      	movs	r3, #1
 801c9ec:	4631      	mov	r1, r6
 801c9ee:	4628      	mov	r0, r5
 801c9f0:	920a      	str	r2, [sp, #40]	@ 0x28
 801c9f2:	47b8      	blx	r7
 801c9f4:	3001      	adds	r0, #1
 801c9f6:	f43f ae9a 	beq.w	801c72e <_printf_float+0xb6>
 801c9fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c9fc:	f10b 0b01 	add.w	fp, fp, #1
 801ca00:	e7bb      	b.n	801c97a <_printf_float+0x302>
 801ca02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ca06:	4631      	mov	r1, r6
 801ca08:	4628      	mov	r0, r5
 801ca0a:	47b8      	blx	r7
 801ca0c:	3001      	adds	r0, #1
 801ca0e:	d1c0      	bne.n	801c992 <_printf_float+0x31a>
 801ca10:	e68d      	b.n	801c72e <_printf_float+0xb6>
 801ca12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ca14:	464b      	mov	r3, r9
 801ca16:	4442      	add	r2, r8
 801ca18:	4631      	mov	r1, r6
 801ca1a:	4628      	mov	r0, r5
 801ca1c:	47b8      	blx	r7
 801ca1e:	3001      	adds	r0, #1
 801ca20:	d1c3      	bne.n	801c9aa <_printf_float+0x332>
 801ca22:	e684      	b.n	801c72e <_printf_float+0xb6>
 801ca24:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801ca28:	f1ba 0f01 	cmp.w	sl, #1
 801ca2c:	dc01      	bgt.n	801ca32 <_printf_float+0x3ba>
 801ca2e:	07db      	lsls	r3, r3, #31
 801ca30:	d536      	bpl.n	801caa0 <_printf_float+0x428>
 801ca32:	2301      	movs	r3, #1
 801ca34:	4642      	mov	r2, r8
 801ca36:	4631      	mov	r1, r6
 801ca38:	4628      	mov	r0, r5
 801ca3a:	47b8      	blx	r7
 801ca3c:	3001      	adds	r0, #1
 801ca3e:	f43f ae76 	beq.w	801c72e <_printf_float+0xb6>
 801ca42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ca46:	4631      	mov	r1, r6
 801ca48:	4628      	mov	r0, r5
 801ca4a:	47b8      	blx	r7
 801ca4c:	3001      	adds	r0, #1
 801ca4e:	f43f ae6e 	beq.w	801c72e <_printf_float+0xb6>
 801ca52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801ca56:	2200      	movs	r2, #0
 801ca58:	2300      	movs	r3, #0
 801ca5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ca5e:	f7e4 f80b 	bl	8000a78 <__aeabi_dcmpeq>
 801ca62:	b9c0      	cbnz	r0, 801ca96 <_printf_float+0x41e>
 801ca64:	4653      	mov	r3, sl
 801ca66:	f108 0201 	add.w	r2, r8, #1
 801ca6a:	4631      	mov	r1, r6
 801ca6c:	4628      	mov	r0, r5
 801ca6e:	47b8      	blx	r7
 801ca70:	3001      	adds	r0, #1
 801ca72:	d10c      	bne.n	801ca8e <_printf_float+0x416>
 801ca74:	e65b      	b.n	801c72e <_printf_float+0xb6>
 801ca76:	2301      	movs	r3, #1
 801ca78:	465a      	mov	r2, fp
 801ca7a:	4631      	mov	r1, r6
 801ca7c:	4628      	mov	r0, r5
 801ca7e:	47b8      	blx	r7
 801ca80:	3001      	adds	r0, #1
 801ca82:	f43f ae54 	beq.w	801c72e <_printf_float+0xb6>
 801ca86:	f108 0801 	add.w	r8, r8, #1
 801ca8a:	45d0      	cmp	r8, sl
 801ca8c:	dbf3      	blt.n	801ca76 <_printf_float+0x3fe>
 801ca8e:	464b      	mov	r3, r9
 801ca90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801ca94:	e6df      	b.n	801c856 <_printf_float+0x1de>
 801ca96:	f04f 0800 	mov.w	r8, #0
 801ca9a:	f104 0b1a 	add.w	fp, r4, #26
 801ca9e:	e7f4      	b.n	801ca8a <_printf_float+0x412>
 801caa0:	2301      	movs	r3, #1
 801caa2:	4642      	mov	r2, r8
 801caa4:	e7e1      	b.n	801ca6a <_printf_float+0x3f2>
 801caa6:	2301      	movs	r3, #1
 801caa8:	464a      	mov	r2, r9
 801caaa:	4631      	mov	r1, r6
 801caac:	4628      	mov	r0, r5
 801caae:	47b8      	blx	r7
 801cab0:	3001      	adds	r0, #1
 801cab2:	f43f ae3c 	beq.w	801c72e <_printf_float+0xb6>
 801cab6:	f108 0801 	add.w	r8, r8, #1
 801caba:	68e3      	ldr	r3, [r4, #12]
 801cabc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801cabe:	1a5b      	subs	r3, r3, r1
 801cac0:	4543      	cmp	r3, r8
 801cac2:	dcf0      	bgt.n	801caa6 <_printf_float+0x42e>
 801cac4:	e6fc      	b.n	801c8c0 <_printf_float+0x248>
 801cac6:	f04f 0800 	mov.w	r8, #0
 801caca:	f104 0919 	add.w	r9, r4, #25
 801cace:	e7f4      	b.n	801caba <_printf_float+0x442>

0801cad0 <_printf_common>:
 801cad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cad4:	4616      	mov	r6, r2
 801cad6:	4698      	mov	r8, r3
 801cad8:	688a      	ldr	r2, [r1, #8]
 801cada:	690b      	ldr	r3, [r1, #16]
 801cadc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801cae0:	4293      	cmp	r3, r2
 801cae2:	bfb8      	it	lt
 801cae4:	4613      	movlt	r3, r2
 801cae6:	6033      	str	r3, [r6, #0]
 801cae8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801caec:	4607      	mov	r7, r0
 801caee:	460c      	mov	r4, r1
 801caf0:	b10a      	cbz	r2, 801caf6 <_printf_common+0x26>
 801caf2:	3301      	adds	r3, #1
 801caf4:	6033      	str	r3, [r6, #0]
 801caf6:	6823      	ldr	r3, [r4, #0]
 801caf8:	0699      	lsls	r1, r3, #26
 801cafa:	bf42      	ittt	mi
 801cafc:	6833      	ldrmi	r3, [r6, #0]
 801cafe:	3302      	addmi	r3, #2
 801cb00:	6033      	strmi	r3, [r6, #0]
 801cb02:	6825      	ldr	r5, [r4, #0]
 801cb04:	f015 0506 	ands.w	r5, r5, #6
 801cb08:	d106      	bne.n	801cb18 <_printf_common+0x48>
 801cb0a:	f104 0a19 	add.w	sl, r4, #25
 801cb0e:	68e3      	ldr	r3, [r4, #12]
 801cb10:	6832      	ldr	r2, [r6, #0]
 801cb12:	1a9b      	subs	r3, r3, r2
 801cb14:	42ab      	cmp	r3, r5
 801cb16:	dc26      	bgt.n	801cb66 <_printf_common+0x96>
 801cb18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801cb1c:	6822      	ldr	r2, [r4, #0]
 801cb1e:	3b00      	subs	r3, #0
 801cb20:	bf18      	it	ne
 801cb22:	2301      	movne	r3, #1
 801cb24:	0692      	lsls	r2, r2, #26
 801cb26:	d42b      	bmi.n	801cb80 <_printf_common+0xb0>
 801cb28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801cb2c:	4641      	mov	r1, r8
 801cb2e:	4638      	mov	r0, r7
 801cb30:	47c8      	blx	r9
 801cb32:	3001      	adds	r0, #1
 801cb34:	d01e      	beq.n	801cb74 <_printf_common+0xa4>
 801cb36:	6823      	ldr	r3, [r4, #0]
 801cb38:	6922      	ldr	r2, [r4, #16]
 801cb3a:	f003 0306 	and.w	r3, r3, #6
 801cb3e:	2b04      	cmp	r3, #4
 801cb40:	bf02      	ittt	eq
 801cb42:	68e5      	ldreq	r5, [r4, #12]
 801cb44:	6833      	ldreq	r3, [r6, #0]
 801cb46:	1aed      	subeq	r5, r5, r3
 801cb48:	68a3      	ldr	r3, [r4, #8]
 801cb4a:	bf0c      	ite	eq
 801cb4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cb50:	2500      	movne	r5, #0
 801cb52:	4293      	cmp	r3, r2
 801cb54:	bfc4      	itt	gt
 801cb56:	1a9b      	subgt	r3, r3, r2
 801cb58:	18ed      	addgt	r5, r5, r3
 801cb5a:	2600      	movs	r6, #0
 801cb5c:	341a      	adds	r4, #26
 801cb5e:	42b5      	cmp	r5, r6
 801cb60:	d11a      	bne.n	801cb98 <_printf_common+0xc8>
 801cb62:	2000      	movs	r0, #0
 801cb64:	e008      	b.n	801cb78 <_printf_common+0xa8>
 801cb66:	2301      	movs	r3, #1
 801cb68:	4652      	mov	r2, sl
 801cb6a:	4641      	mov	r1, r8
 801cb6c:	4638      	mov	r0, r7
 801cb6e:	47c8      	blx	r9
 801cb70:	3001      	adds	r0, #1
 801cb72:	d103      	bne.n	801cb7c <_printf_common+0xac>
 801cb74:	f04f 30ff 	mov.w	r0, #4294967295
 801cb78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb7c:	3501      	adds	r5, #1
 801cb7e:	e7c6      	b.n	801cb0e <_printf_common+0x3e>
 801cb80:	18e1      	adds	r1, r4, r3
 801cb82:	1c5a      	adds	r2, r3, #1
 801cb84:	2030      	movs	r0, #48	@ 0x30
 801cb86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801cb8a:	4422      	add	r2, r4
 801cb8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801cb90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801cb94:	3302      	adds	r3, #2
 801cb96:	e7c7      	b.n	801cb28 <_printf_common+0x58>
 801cb98:	2301      	movs	r3, #1
 801cb9a:	4622      	mov	r2, r4
 801cb9c:	4641      	mov	r1, r8
 801cb9e:	4638      	mov	r0, r7
 801cba0:	47c8      	blx	r9
 801cba2:	3001      	adds	r0, #1
 801cba4:	d0e6      	beq.n	801cb74 <_printf_common+0xa4>
 801cba6:	3601      	adds	r6, #1
 801cba8:	e7d9      	b.n	801cb5e <_printf_common+0x8e>
	...

0801cbac <_printf_i>:
 801cbac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cbb0:	7e0f      	ldrb	r7, [r1, #24]
 801cbb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801cbb4:	2f78      	cmp	r7, #120	@ 0x78
 801cbb6:	4691      	mov	r9, r2
 801cbb8:	4680      	mov	r8, r0
 801cbba:	460c      	mov	r4, r1
 801cbbc:	469a      	mov	sl, r3
 801cbbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801cbc2:	d807      	bhi.n	801cbd4 <_printf_i+0x28>
 801cbc4:	2f62      	cmp	r7, #98	@ 0x62
 801cbc6:	d80a      	bhi.n	801cbde <_printf_i+0x32>
 801cbc8:	2f00      	cmp	r7, #0
 801cbca:	f000 80d2 	beq.w	801cd72 <_printf_i+0x1c6>
 801cbce:	2f58      	cmp	r7, #88	@ 0x58
 801cbd0:	f000 80b9 	beq.w	801cd46 <_printf_i+0x19a>
 801cbd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cbd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801cbdc:	e03a      	b.n	801cc54 <_printf_i+0xa8>
 801cbde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801cbe2:	2b15      	cmp	r3, #21
 801cbe4:	d8f6      	bhi.n	801cbd4 <_printf_i+0x28>
 801cbe6:	a101      	add	r1, pc, #4	@ (adr r1, 801cbec <_printf_i+0x40>)
 801cbe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cbec:	0801cc45 	.word	0x0801cc45
 801cbf0:	0801cc59 	.word	0x0801cc59
 801cbf4:	0801cbd5 	.word	0x0801cbd5
 801cbf8:	0801cbd5 	.word	0x0801cbd5
 801cbfc:	0801cbd5 	.word	0x0801cbd5
 801cc00:	0801cbd5 	.word	0x0801cbd5
 801cc04:	0801cc59 	.word	0x0801cc59
 801cc08:	0801cbd5 	.word	0x0801cbd5
 801cc0c:	0801cbd5 	.word	0x0801cbd5
 801cc10:	0801cbd5 	.word	0x0801cbd5
 801cc14:	0801cbd5 	.word	0x0801cbd5
 801cc18:	0801cd59 	.word	0x0801cd59
 801cc1c:	0801cc83 	.word	0x0801cc83
 801cc20:	0801cd13 	.word	0x0801cd13
 801cc24:	0801cbd5 	.word	0x0801cbd5
 801cc28:	0801cbd5 	.word	0x0801cbd5
 801cc2c:	0801cd7b 	.word	0x0801cd7b
 801cc30:	0801cbd5 	.word	0x0801cbd5
 801cc34:	0801cc83 	.word	0x0801cc83
 801cc38:	0801cbd5 	.word	0x0801cbd5
 801cc3c:	0801cbd5 	.word	0x0801cbd5
 801cc40:	0801cd1b 	.word	0x0801cd1b
 801cc44:	6833      	ldr	r3, [r6, #0]
 801cc46:	1d1a      	adds	r2, r3, #4
 801cc48:	681b      	ldr	r3, [r3, #0]
 801cc4a:	6032      	str	r2, [r6, #0]
 801cc4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cc50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801cc54:	2301      	movs	r3, #1
 801cc56:	e09d      	b.n	801cd94 <_printf_i+0x1e8>
 801cc58:	6833      	ldr	r3, [r6, #0]
 801cc5a:	6820      	ldr	r0, [r4, #0]
 801cc5c:	1d19      	adds	r1, r3, #4
 801cc5e:	6031      	str	r1, [r6, #0]
 801cc60:	0606      	lsls	r6, r0, #24
 801cc62:	d501      	bpl.n	801cc68 <_printf_i+0xbc>
 801cc64:	681d      	ldr	r5, [r3, #0]
 801cc66:	e003      	b.n	801cc70 <_printf_i+0xc4>
 801cc68:	0645      	lsls	r5, r0, #25
 801cc6a:	d5fb      	bpl.n	801cc64 <_printf_i+0xb8>
 801cc6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801cc70:	2d00      	cmp	r5, #0
 801cc72:	da03      	bge.n	801cc7c <_printf_i+0xd0>
 801cc74:	232d      	movs	r3, #45	@ 0x2d
 801cc76:	426d      	negs	r5, r5
 801cc78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cc7c:	4859      	ldr	r0, [pc, #356]	@ (801cde4 <_printf_i+0x238>)
 801cc7e:	230a      	movs	r3, #10
 801cc80:	e011      	b.n	801cca6 <_printf_i+0xfa>
 801cc82:	6821      	ldr	r1, [r4, #0]
 801cc84:	6833      	ldr	r3, [r6, #0]
 801cc86:	0608      	lsls	r0, r1, #24
 801cc88:	f853 5b04 	ldr.w	r5, [r3], #4
 801cc8c:	d402      	bmi.n	801cc94 <_printf_i+0xe8>
 801cc8e:	0649      	lsls	r1, r1, #25
 801cc90:	bf48      	it	mi
 801cc92:	b2ad      	uxthmi	r5, r5
 801cc94:	2f6f      	cmp	r7, #111	@ 0x6f
 801cc96:	4853      	ldr	r0, [pc, #332]	@ (801cde4 <_printf_i+0x238>)
 801cc98:	6033      	str	r3, [r6, #0]
 801cc9a:	bf14      	ite	ne
 801cc9c:	230a      	movne	r3, #10
 801cc9e:	2308      	moveq	r3, #8
 801cca0:	2100      	movs	r1, #0
 801cca2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801cca6:	6866      	ldr	r6, [r4, #4]
 801cca8:	60a6      	str	r6, [r4, #8]
 801ccaa:	2e00      	cmp	r6, #0
 801ccac:	bfa2      	ittt	ge
 801ccae:	6821      	ldrge	r1, [r4, #0]
 801ccb0:	f021 0104 	bicge.w	r1, r1, #4
 801ccb4:	6021      	strge	r1, [r4, #0]
 801ccb6:	b90d      	cbnz	r5, 801ccbc <_printf_i+0x110>
 801ccb8:	2e00      	cmp	r6, #0
 801ccba:	d04b      	beq.n	801cd54 <_printf_i+0x1a8>
 801ccbc:	4616      	mov	r6, r2
 801ccbe:	fbb5 f1f3 	udiv	r1, r5, r3
 801ccc2:	fb03 5711 	mls	r7, r3, r1, r5
 801ccc6:	5dc7      	ldrb	r7, [r0, r7]
 801ccc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801cccc:	462f      	mov	r7, r5
 801ccce:	42bb      	cmp	r3, r7
 801ccd0:	460d      	mov	r5, r1
 801ccd2:	d9f4      	bls.n	801ccbe <_printf_i+0x112>
 801ccd4:	2b08      	cmp	r3, #8
 801ccd6:	d10b      	bne.n	801ccf0 <_printf_i+0x144>
 801ccd8:	6823      	ldr	r3, [r4, #0]
 801ccda:	07df      	lsls	r7, r3, #31
 801ccdc:	d508      	bpl.n	801ccf0 <_printf_i+0x144>
 801ccde:	6923      	ldr	r3, [r4, #16]
 801cce0:	6861      	ldr	r1, [r4, #4]
 801cce2:	4299      	cmp	r1, r3
 801cce4:	bfde      	ittt	le
 801cce6:	2330      	movle	r3, #48	@ 0x30
 801cce8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ccec:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ccf0:	1b92      	subs	r2, r2, r6
 801ccf2:	6122      	str	r2, [r4, #16]
 801ccf4:	f8cd a000 	str.w	sl, [sp]
 801ccf8:	464b      	mov	r3, r9
 801ccfa:	aa03      	add	r2, sp, #12
 801ccfc:	4621      	mov	r1, r4
 801ccfe:	4640      	mov	r0, r8
 801cd00:	f7ff fee6 	bl	801cad0 <_printf_common>
 801cd04:	3001      	adds	r0, #1
 801cd06:	d14a      	bne.n	801cd9e <_printf_i+0x1f2>
 801cd08:	f04f 30ff 	mov.w	r0, #4294967295
 801cd0c:	b004      	add	sp, #16
 801cd0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd12:	6823      	ldr	r3, [r4, #0]
 801cd14:	f043 0320 	orr.w	r3, r3, #32
 801cd18:	6023      	str	r3, [r4, #0]
 801cd1a:	4833      	ldr	r0, [pc, #204]	@ (801cde8 <_printf_i+0x23c>)
 801cd1c:	2778      	movs	r7, #120	@ 0x78
 801cd1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801cd22:	6823      	ldr	r3, [r4, #0]
 801cd24:	6831      	ldr	r1, [r6, #0]
 801cd26:	061f      	lsls	r7, r3, #24
 801cd28:	f851 5b04 	ldr.w	r5, [r1], #4
 801cd2c:	d402      	bmi.n	801cd34 <_printf_i+0x188>
 801cd2e:	065f      	lsls	r7, r3, #25
 801cd30:	bf48      	it	mi
 801cd32:	b2ad      	uxthmi	r5, r5
 801cd34:	6031      	str	r1, [r6, #0]
 801cd36:	07d9      	lsls	r1, r3, #31
 801cd38:	bf44      	itt	mi
 801cd3a:	f043 0320 	orrmi.w	r3, r3, #32
 801cd3e:	6023      	strmi	r3, [r4, #0]
 801cd40:	b11d      	cbz	r5, 801cd4a <_printf_i+0x19e>
 801cd42:	2310      	movs	r3, #16
 801cd44:	e7ac      	b.n	801cca0 <_printf_i+0xf4>
 801cd46:	4827      	ldr	r0, [pc, #156]	@ (801cde4 <_printf_i+0x238>)
 801cd48:	e7e9      	b.n	801cd1e <_printf_i+0x172>
 801cd4a:	6823      	ldr	r3, [r4, #0]
 801cd4c:	f023 0320 	bic.w	r3, r3, #32
 801cd50:	6023      	str	r3, [r4, #0]
 801cd52:	e7f6      	b.n	801cd42 <_printf_i+0x196>
 801cd54:	4616      	mov	r6, r2
 801cd56:	e7bd      	b.n	801ccd4 <_printf_i+0x128>
 801cd58:	6833      	ldr	r3, [r6, #0]
 801cd5a:	6825      	ldr	r5, [r4, #0]
 801cd5c:	6961      	ldr	r1, [r4, #20]
 801cd5e:	1d18      	adds	r0, r3, #4
 801cd60:	6030      	str	r0, [r6, #0]
 801cd62:	062e      	lsls	r6, r5, #24
 801cd64:	681b      	ldr	r3, [r3, #0]
 801cd66:	d501      	bpl.n	801cd6c <_printf_i+0x1c0>
 801cd68:	6019      	str	r1, [r3, #0]
 801cd6a:	e002      	b.n	801cd72 <_printf_i+0x1c6>
 801cd6c:	0668      	lsls	r0, r5, #25
 801cd6e:	d5fb      	bpl.n	801cd68 <_printf_i+0x1bc>
 801cd70:	8019      	strh	r1, [r3, #0]
 801cd72:	2300      	movs	r3, #0
 801cd74:	6123      	str	r3, [r4, #16]
 801cd76:	4616      	mov	r6, r2
 801cd78:	e7bc      	b.n	801ccf4 <_printf_i+0x148>
 801cd7a:	6833      	ldr	r3, [r6, #0]
 801cd7c:	1d1a      	adds	r2, r3, #4
 801cd7e:	6032      	str	r2, [r6, #0]
 801cd80:	681e      	ldr	r6, [r3, #0]
 801cd82:	6862      	ldr	r2, [r4, #4]
 801cd84:	2100      	movs	r1, #0
 801cd86:	4630      	mov	r0, r6
 801cd88:	f7e3 f9fa 	bl	8000180 <memchr>
 801cd8c:	b108      	cbz	r0, 801cd92 <_printf_i+0x1e6>
 801cd8e:	1b80      	subs	r0, r0, r6
 801cd90:	6060      	str	r0, [r4, #4]
 801cd92:	6863      	ldr	r3, [r4, #4]
 801cd94:	6123      	str	r3, [r4, #16]
 801cd96:	2300      	movs	r3, #0
 801cd98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cd9c:	e7aa      	b.n	801ccf4 <_printf_i+0x148>
 801cd9e:	6923      	ldr	r3, [r4, #16]
 801cda0:	4632      	mov	r2, r6
 801cda2:	4649      	mov	r1, r9
 801cda4:	4640      	mov	r0, r8
 801cda6:	47d0      	blx	sl
 801cda8:	3001      	adds	r0, #1
 801cdaa:	d0ad      	beq.n	801cd08 <_printf_i+0x15c>
 801cdac:	6823      	ldr	r3, [r4, #0]
 801cdae:	079b      	lsls	r3, r3, #30
 801cdb0:	d413      	bmi.n	801cdda <_printf_i+0x22e>
 801cdb2:	68e0      	ldr	r0, [r4, #12]
 801cdb4:	9b03      	ldr	r3, [sp, #12]
 801cdb6:	4298      	cmp	r0, r3
 801cdb8:	bfb8      	it	lt
 801cdba:	4618      	movlt	r0, r3
 801cdbc:	e7a6      	b.n	801cd0c <_printf_i+0x160>
 801cdbe:	2301      	movs	r3, #1
 801cdc0:	4632      	mov	r2, r6
 801cdc2:	4649      	mov	r1, r9
 801cdc4:	4640      	mov	r0, r8
 801cdc6:	47d0      	blx	sl
 801cdc8:	3001      	adds	r0, #1
 801cdca:	d09d      	beq.n	801cd08 <_printf_i+0x15c>
 801cdcc:	3501      	adds	r5, #1
 801cdce:	68e3      	ldr	r3, [r4, #12]
 801cdd0:	9903      	ldr	r1, [sp, #12]
 801cdd2:	1a5b      	subs	r3, r3, r1
 801cdd4:	42ab      	cmp	r3, r5
 801cdd6:	dcf2      	bgt.n	801cdbe <_printf_i+0x212>
 801cdd8:	e7eb      	b.n	801cdb2 <_printf_i+0x206>
 801cdda:	2500      	movs	r5, #0
 801cddc:	f104 0619 	add.w	r6, r4, #25
 801cde0:	e7f5      	b.n	801cdce <_printf_i+0x222>
 801cde2:	bf00      	nop
 801cde4:	08020036 	.word	0x08020036
 801cde8:	08020047 	.word	0x08020047

0801cdec <std>:
 801cdec:	2300      	movs	r3, #0
 801cdee:	b510      	push	{r4, lr}
 801cdf0:	4604      	mov	r4, r0
 801cdf2:	e9c0 3300 	strd	r3, r3, [r0]
 801cdf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cdfa:	6083      	str	r3, [r0, #8]
 801cdfc:	8181      	strh	r1, [r0, #12]
 801cdfe:	6643      	str	r3, [r0, #100]	@ 0x64
 801ce00:	81c2      	strh	r2, [r0, #14]
 801ce02:	6183      	str	r3, [r0, #24]
 801ce04:	4619      	mov	r1, r3
 801ce06:	2208      	movs	r2, #8
 801ce08:	305c      	adds	r0, #92	@ 0x5c
 801ce0a:	f000 f989 	bl	801d120 <memset>
 801ce0e:	4b0d      	ldr	r3, [pc, #52]	@ (801ce44 <std+0x58>)
 801ce10:	6263      	str	r3, [r4, #36]	@ 0x24
 801ce12:	4b0d      	ldr	r3, [pc, #52]	@ (801ce48 <std+0x5c>)
 801ce14:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ce16:	4b0d      	ldr	r3, [pc, #52]	@ (801ce4c <std+0x60>)
 801ce18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ce1a:	4b0d      	ldr	r3, [pc, #52]	@ (801ce50 <std+0x64>)
 801ce1c:	6323      	str	r3, [r4, #48]	@ 0x30
 801ce1e:	4b0d      	ldr	r3, [pc, #52]	@ (801ce54 <std+0x68>)
 801ce20:	6224      	str	r4, [r4, #32]
 801ce22:	429c      	cmp	r4, r3
 801ce24:	d006      	beq.n	801ce34 <std+0x48>
 801ce26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801ce2a:	4294      	cmp	r4, r2
 801ce2c:	d002      	beq.n	801ce34 <std+0x48>
 801ce2e:	33d0      	adds	r3, #208	@ 0xd0
 801ce30:	429c      	cmp	r4, r3
 801ce32:	d105      	bne.n	801ce40 <std+0x54>
 801ce34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801ce38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce3c:	f000 b9ec 	b.w	801d218 <__retarget_lock_init_recursive>
 801ce40:	bd10      	pop	{r4, pc}
 801ce42:	bf00      	nop
 801ce44:	0801cf71 	.word	0x0801cf71
 801ce48:	0801cf93 	.word	0x0801cf93
 801ce4c:	0801cfcb 	.word	0x0801cfcb
 801ce50:	0801cfef 	.word	0x0801cfef
 801ce54:	20002424 	.word	0x20002424

0801ce58 <stdio_exit_handler>:
 801ce58:	4a02      	ldr	r2, [pc, #8]	@ (801ce64 <stdio_exit_handler+0xc>)
 801ce5a:	4903      	ldr	r1, [pc, #12]	@ (801ce68 <stdio_exit_handler+0x10>)
 801ce5c:	4803      	ldr	r0, [pc, #12]	@ (801ce6c <stdio_exit_handler+0x14>)
 801ce5e:	f000 b869 	b.w	801cf34 <_fwalk_sglue>
 801ce62:	bf00      	nop
 801ce64:	20000158 	.word	0x20000158
 801ce68:	0801eb61 	.word	0x0801eb61
 801ce6c:	20000168 	.word	0x20000168

0801ce70 <cleanup_stdio>:
 801ce70:	6841      	ldr	r1, [r0, #4]
 801ce72:	4b0c      	ldr	r3, [pc, #48]	@ (801cea4 <cleanup_stdio+0x34>)
 801ce74:	4299      	cmp	r1, r3
 801ce76:	b510      	push	{r4, lr}
 801ce78:	4604      	mov	r4, r0
 801ce7a:	d001      	beq.n	801ce80 <cleanup_stdio+0x10>
 801ce7c:	f001 fe70 	bl	801eb60 <_fflush_r>
 801ce80:	68a1      	ldr	r1, [r4, #8]
 801ce82:	4b09      	ldr	r3, [pc, #36]	@ (801cea8 <cleanup_stdio+0x38>)
 801ce84:	4299      	cmp	r1, r3
 801ce86:	d002      	beq.n	801ce8e <cleanup_stdio+0x1e>
 801ce88:	4620      	mov	r0, r4
 801ce8a:	f001 fe69 	bl	801eb60 <_fflush_r>
 801ce8e:	68e1      	ldr	r1, [r4, #12]
 801ce90:	4b06      	ldr	r3, [pc, #24]	@ (801ceac <cleanup_stdio+0x3c>)
 801ce92:	4299      	cmp	r1, r3
 801ce94:	d004      	beq.n	801cea0 <cleanup_stdio+0x30>
 801ce96:	4620      	mov	r0, r4
 801ce98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ce9c:	f001 be60 	b.w	801eb60 <_fflush_r>
 801cea0:	bd10      	pop	{r4, pc}
 801cea2:	bf00      	nop
 801cea4:	20002424 	.word	0x20002424
 801cea8:	2000248c 	.word	0x2000248c
 801ceac:	200024f4 	.word	0x200024f4

0801ceb0 <global_stdio_init.part.0>:
 801ceb0:	b510      	push	{r4, lr}
 801ceb2:	4b0b      	ldr	r3, [pc, #44]	@ (801cee0 <global_stdio_init.part.0+0x30>)
 801ceb4:	4c0b      	ldr	r4, [pc, #44]	@ (801cee4 <global_stdio_init.part.0+0x34>)
 801ceb6:	4a0c      	ldr	r2, [pc, #48]	@ (801cee8 <global_stdio_init.part.0+0x38>)
 801ceb8:	601a      	str	r2, [r3, #0]
 801ceba:	4620      	mov	r0, r4
 801cebc:	2200      	movs	r2, #0
 801cebe:	2104      	movs	r1, #4
 801cec0:	f7ff ff94 	bl	801cdec <std>
 801cec4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801cec8:	2201      	movs	r2, #1
 801ceca:	2109      	movs	r1, #9
 801cecc:	f7ff ff8e 	bl	801cdec <std>
 801ced0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ced4:	2202      	movs	r2, #2
 801ced6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ceda:	2112      	movs	r1, #18
 801cedc:	f7ff bf86 	b.w	801cdec <std>
 801cee0:	2000255c 	.word	0x2000255c
 801cee4:	20002424 	.word	0x20002424
 801cee8:	0801ce59 	.word	0x0801ce59

0801ceec <__sfp_lock_acquire>:
 801ceec:	4801      	ldr	r0, [pc, #4]	@ (801cef4 <__sfp_lock_acquire+0x8>)
 801ceee:	f000 b994 	b.w	801d21a <__retarget_lock_acquire_recursive>
 801cef2:	bf00      	nop
 801cef4:	20002565 	.word	0x20002565

0801cef8 <__sfp_lock_release>:
 801cef8:	4801      	ldr	r0, [pc, #4]	@ (801cf00 <__sfp_lock_release+0x8>)
 801cefa:	f000 b98f 	b.w	801d21c <__retarget_lock_release_recursive>
 801cefe:	bf00      	nop
 801cf00:	20002565 	.word	0x20002565

0801cf04 <__sinit>:
 801cf04:	b510      	push	{r4, lr}
 801cf06:	4604      	mov	r4, r0
 801cf08:	f7ff fff0 	bl	801ceec <__sfp_lock_acquire>
 801cf0c:	6a23      	ldr	r3, [r4, #32]
 801cf0e:	b11b      	cbz	r3, 801cf18 <__sinit+0x14>
 801cf10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cf14:	f7ff bff0 	b.w	801cef8 <__sfp_lock_release>
 801cf18:	4b04      	ldr	r3, [pc, #16]	@ (801cf2c <__sinit+0x28>)
 801cf1a:	6223      	str	r3, [r4, #32]
 801cf1c:	4b04      	ldr	r3, [pc, #16]	@ (801cf30 <__sinit+0x2c>)
 801cf1e:	681b      	ldr	r3, [r3, #0]
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	d1f5      	bne.n	801cf10 <__sinit+0xc>
 801cf24:	f7ff ffc4 	bl	801ceb0 <global_stdio_init.part.0>
 801cf28:	e7f2      	b.n	801cf10 <__sinit+0xc>
 801cf2a:	bf00      	nop
 801cf2c:	0801ce71 	.word	0x0801ce71
 801cf30:	2000255c 	.word	0x2000255c

0801cf34 <_fwalk_sglue>:
 801cf34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf38:	4607      	mov	r7, r0
 801cf3a:	4688      	mov	r8, r1
 801cf3c:	4614      	mov	r4, r2
 801cf3e:	2600      	movs	r6, #0
 801cf40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cf44:	f1b9 0901 	subs.w	r9, r9, #1
 801cf48:	d505      	bpl.n	801cf56 <_fwalk_sglue+0x22>
 801cf4a:	6824      	ldr	r4, [r4, #0]
 801cf4c:	2c00      	cmp	r4, #0
 801cf4e:	d1f7      	bne.n	801cf40 <_fwalk_sglue+0xc>
 801cf50:	4630      	mov	r0, r6
 801cf52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf56:	89ab      	ldrh	r3, [r5, #12]
 801cf58:	2b01      	cmp	r3, #1
 801cf5a:	d907      	bls.n	801cf6c <_fwalk_sglue+0x38>
 801cf5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cf60:	3301      	adds	r3, #1
 801cf62:	d003      	beq.n	801cf6c <_fwalk_sglue+0x38>
 801cf64:	4629      	mov	r1, r5
 801cf66:	4638      	mov	r0, r7
 801cf68:	47c0      	blx	r8
 801cf6a:	4306      	orrs	r6, r0
 801cf6c:	3568      	adds	r5, #104	@ 0x68
 801cf6e:	e7e9      	b.n	801cf44 <_fwalk_sglue+0x10>

0801cf70 <__sread>:
 801cf70:	b510      	push	{r4, lr}
 801cf72:	460c      	mov	r4, r1
 801cf74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf78:	f000 f900 	bl	801d17c <_read_r>
 801cf7c:	2800      	cmp	r0, #0
 801cf7e:	bfab      	itete	ge
 801cf80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801cf82:	89a3      	ldrhlt	r3, [r4, #12]
 801cf84:	181b      	addge	r3, r3, r0
 801cf86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801cf8a:	bfac      	ite	ge
 801cf8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801cf8e:	81a3      	strhlt	r3, [r4, #12]
 801cf90:	bd10      	pop	{r4, pc}

0801cf92 <__swrite>:
 801cf92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf96:	461f      	mov	r7, r3
 801cf98:	898b      	ldrh	r3, [r1, #12]
 801cf9a:	05db      	lsls	r3, r3, #23
 801cf9c:	4605      	mov	r5, r0
 801cf9e:	460c      	mov	r4, r1
 801cfa0:	4616      	mov	r6, r2
 801cfa2:	d505      	bpl.n	801cfb0 <__swrite+0x1e>
 801cfa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cfa8:	2302      	movs	r3, #2
 801cfaa:	2200      	movs	r2, #0
 801cfac:	f000 f8d4 	bl	801d158 <_lseek_r>
 801cfb0:	89a3      	ldrh	r3, [r4, #12]
 801cfb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cfb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801cfba:	81a3      	strh	r3, [r4, #12]
 801cfbc:	4632      	mov	r2, r6
 801cfbe:	463b      	mov	r3, r7
 801cfc0:	4628      	mov	r0, r5
 801cfc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cfc6:	f000 b8eb 	b.w	801d1a0 <_write_r>

0801cfca <__sseek>:
 801cfca:	b510      	push	{r4, lr}
 801cfcc:	460c      	mov	r4, r1
 801cfce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cfd2:	f000 f8c1 	bl	801d158 <_lseek_r>
 801cfd6:	1c43      	adds	r3, r0, #1
 801cfd8:	89a3      	ldrh	r3, [r4, #12]
 801cfda:	bf15      	itete	ne
 801cfdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 801cfde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801cfe2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801cfe6:	81a3      	strheq	r3, [r4, #12]
 801cfe8:	bf18      	it	ne
 801cfea:	81a3      	strhne	r3, [r4, #12]
 801cfec:	bd10      	pop	{r4, pc}

0801cfee <__sclose>:
 801cfee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cff2:	f000 b8a1 	b.w	801d138 <_close_r>

0801cff6 <__swbuf_r>:
 801cff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cff8:	460e      	mov	r6, r1
 801cffa:	4614      	mov	r4, r2
 801cffc:	4605      	mov	r5, r0
 801cffe:	b118      	cbz	r0, 801d008 <__swbuf_r+0x12>
 801d000:	6a03      	ldr	r3, [r0, #32]
 801d002:	b90b      	cbnz	r3, 801d008 <__swbuf_r+0x12>
 801d004:	f7ff ff7e 	bl	801cf04 <__sinit>
 801d008:	69a3      	ldr	r3, [r4, #24]
 801d00a:	60a3      	str	r3, [r4, #8]
 801d00c:	89a3      	ldrh	r3, [r4, #12]
 801d00e:	071a      	lsls	r2, r3, #28
 801d010:	d501      	bpl.n	801d016 <__swbuf_r+0x20>
 801d012:	6923      	ldr	r3, [r4, #16]
 801d014:	b943      	cbnz	r3, 801d028 <__swbuf_r+0x32>
 801d016:	4621      	mov	r1, r4
 801d018:	4628      	mov	r0, r5
 801d01a:	f000 f82b 	bl	801d074 <__swsetup_r>
 801d01e:	b118      	cbz	r0, 801d028 <__swbuf_r+0x32>
 801d020:	f04f 37ff 	mov.w	r7, #4294967295
 801d024:	4638      	mov	r0, r7
 801d026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d028:	6823      	ldr	r3, [r4, #0]
 801d02a:	6922      	ldr	r2, [r4, #16]
 801d02c:	1a98      	subs	r0, r3, r2
 801d02e:	6963      	ldr	r3, [r4, #20]
 801d030:	b2f6      	uxtb	r6, r6
 801d032:	4283      	cmp	r3, r0
 801d034:	4637      	mov	r7, r6
 801d036:	dc05      	bgt.n	801d044 <__swbuf_r+0x4e>
 801d038:	4621      	mov	r1, r4
 801d03a:	4628      	mov	r0, r5
 801d03c:	f001 fd90 	bl	801eb60 <_fflush_r>
 801d040:	2800      	cmp	r0, #0
 801d042:	d1ed      	bne.n	801d020 <__swbuf_r+0x2a>
 801d044:	68a3      	ldr	r3, [r4, #8]
 801d046:	3b01      	subs	r3, #1
 801d048:	60a3      	str	r3, [r4, #8]
 801d04a:	6823      	ldr	r3, [r4, #0]
 801d04c:	1c5a      	adds	r2, r3, #1
 801d04e:	6022      	str	r2, [r4, #0]
 801d050:	701e      	strb	r6, [r3, #0]
 801d052:	6962      	ldr	r2, [r4, #20]
 801d054:	1c43      	adds	r3, r0, #1
 801d056:	429a      	cmp	r2, r3
 801d058:	d004      	beq.n	801d064 <__swbuf_r+0x6e>
 801d05a:	89a3      	ldrh	r3, [r4, #12]
 801d05c:	07db      	lsls	r3, r3, #31
 801d05e:	d5e1      	bpl.n	801d024 <__swbuf_r+0x2e>
 801d060:	2e0a      	cmp	r6, #10
 801d062:	d1df      	bne.n	801d024 <__swbuf_r+0x2e>
 801d064:	4621      	mov	r1, r4
 801d066:	4628      	mov	r0, r5
 801d068:	f001 fd7a 	bl	801eb60 <_fflush_r>
 801d06c:	2800      	cmp	r0, #0
 801d06e:	d0d9      	beq.n	801d024 <__swbuf_r+0x2e>
 801d070:	e7d6      	b.n	801d020 <__swbuf_r+0x2a>
	...

0801d074 <__swsetup_r>:
 801d074:	b538      	push	{r3, r4, r5, lr}
 801d076:	4b29      	ldr	r3, [pc, #164]	@ (801d11c <__swsetup_r+0xa8>)
 801d078:	4605      	mov	r5, r0
 801d07a:	6818      	ldr	r0, [r3, #0]
 801d07c:	460c      	mov	r4, r1
 801d07e:	b118      	cbz	r0, 801d088 <__swsetup_r+0x14>
 801d080:	6a03      	ldr	r3, [r0, #32]
 801d082:	b90b      	cbnz	r3, 801d088 <__swsetup_r+0x14>
 801d084:	f7ff ff3e 	bl	801cf04 <__sinit>
 801d088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d08c:	0719      	lsls	r1, r3, #28
 801d08e:	d422      	bmi.n	801d0d6 <__swsetup_r+0x62>
 801d090:	06da      	lsls	r2, r3, #27
 801d092:	d407      	bmi.n	801d0a4 <__swsetup_r+0x30>
 801d094:	2209      	movs	r2, #9
 801d096:	602a      	str	r2, [r5, #0]
 801d098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d09c:	81a3      	strh	r3, [r4, #12]
 801d09e:	f04f 30ff 	mov.w	r0, #4294967295
 801d0a2:	e033      	b.n	801d10c <__swsetup_r+0x98>
 801d0a4:	0758      	lsls	r0, r3, #29
 801d0a6:	d512      	bpl.n	801d0ce <__swsetup_r+0x5a>
 801d0a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d0aa:	b141      	cbz	r1, 801d0be <__swsetup_r+0x4a>
 801d0ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d0b0:	4299      	cmp	r1, r3
 801d0b2:	d002      	beq.n	801d0ba <__swsetup_r+0x46>
 801d0b4:	4628      	mov	r0, r5
 801d0b6:	f000 ff13 	bl	801dee0 <_free_r>
 801d0ba:	2300      	movs	r3, #0
 801d0bc:	6363      	str	r3, [r4, #52]	@ 0x34
 801d0be:	89a3      	ldrh	r3, [r4, #12]
 801d0c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d0c4:	81a3      	strh	r3, [r4, #12]
 801d0c6:	2300      	movs	r3, #0
 801d0c8:	6063      	str	r3, [r4, #4]
 801d0ca:	6923      	ldr	r3, [r4, #16]
 801d0cc:	6023      	str	r3, [r4, #0]
 801d0ce:	89a3      	ldrh	r3, [r4, #12]
 801d0d0:	f043 0308 	orr.w	r3, r3, #8
 801d0d4:	81a3      	strh	r3, [r4, #12]
 801d0d6:	6923      	ldr	r3, [r4, #16]
 801d0d8:	b94b      	cbnz	r3, 801d0ee <__swsetup_r+0x7a>
 801d0da:	89a3      	ldrh	r3, [r4, #12]
 801d0dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d0e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d0e4:	d003      	beq.n	801d0ee <__swsetup_r+0x7a>
 801d0e6:	4621      	mov	r1, r4
 801d0e8:	4628      	mov	r0, r5
 801d0ea:	f001 fd87 	bl	801ebfc <__smakebuf_r>
 801d0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d0f2:	f013 0201 	ands.w	r2, r3, #1
 801d0f6:	d00a      	beq.n	801d10e <__swsetup_r+0x9a>
 801d0f8:	2200      	movs	r2, #0
 801d0fa:	60a2      	str	r2, [r4, #8]
 801d0fc:	6962      	ldr	r2, [r4, #20]
 801d0fe:	4252      	negs	r2, r2
 801d100:	61a2      	str	r2, [r4, #24]
 801d102:	6922      	ldr	r2, [r4, #16]
 801d104:	b942      	cbnz	r2, 801d118 <__swsetup_r+0xa4>
 801d106:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d10a:	d1c5      	bne.n	801d098 <__swsetup_r+0x24>
 801d10c:	bd38      	pop	{r3, r4, r5, pc}
 801d10e:	0799      	lsls	r1, r3, #30
 801d110:	bf58      	it	pl
 801d112:	6962      	ldrpl	r2, [r4, #20]
 801d114:	60a2      	str	r2, [r4, #8]
 801d116:	e7f4      	b.n	801d102 <__swsetup_r+0x8e>
 801d118:	2000      	movs	r0, #0
 801d11a:	e7f7      	b.n	801d10c <__swsetup_r+0x98>
 801d11c:	20000164 	.word	0x20000164

0801d120 <memset>:
 801d120:	4402      	add	r2, r0
 801d122:	4603      	mov	r3, r0
 801d124:	4293      	cmp	r3, r2
 801d126:	d100      	bne.n	801d12a <memset+0xa>
 801d128:	4770      	bx	lr
 801d12a:	f803 1b01 	strb.w	r1, [r3], #1
 801d12e:	e7f9      	b.n	801d124 <memset+0x4>

0801d130 <_localeconv_r>:
 801d130:	4800      	ldr	r0, [pc, #0]	@ (801d134 <_localeconv_r+0x4>)
 801d132:	4770      	bx	lr
 801d134:	200002a4 	.word	0x200002a4

0801d138 <_close_r>:
 801d138:	b538      	push	{r3, r4, r5, lr}
 801d13a:	4d06      	ldr	r5, [pc, #24]	@ (801d154 <_close_r+0x1c>)
 801d13c:	2300      	movs	r3, #0
 801d13e:	4604      	mov	r4, r0
 801d140:	4608      	mov	r0, r1
 801d142:	602b      	str	r3, [r5, #0]
 801d144:	f7e5 fad2 	bl	80026ec <_close>
 801d148:	1c43      	adds	r3, r0, #1
 801d14a:	d102      	bne.n	801d152 <_close_r+0x1a>
 801d14c:	682b      	ldr	r3, [r5, #0]
 801d14e:	b103      	cbz	r3, 801d152 <_close_r+0x1a>
 801d150:	6023      	str	r3, [r4, #0]
 801d152:	bd38      	pop	{r3, r4, r5, pc}
 801d154:	20002560 	.word	0x20002560

0801d158 <_lseek_r>:
 801d158:	b538      	push	{r3, r4, r5, lr}
 801d15a:	4d07      	ldr	r5, [pc, #28]	@ (801d178 <_lseek_r+0x20>)
 801d15c:	4604      	mov	r4, r0
 801d15e:	4608      	mov	r0, r1
 801d160:	4611      	mov	r1, r2
 801d162:	2200      	movs	r2, #0
 801d164:	602a      	str	r2, [r5, #0]
 801d166:	461a      	mov	r2, r3
 801d168:	f7e5 fae4 	bl	8002734 <_lseek>
 801d16c:	1c43      	adds	r3, r0, #1
 801d16e:	d102      	bne.n	801d176 <_lseek_r+0x1e>
 801d170:	682b      	ldr	r3, [r5, #0]
 801d172:	b103      	cbz	r3, 801d176 <_lseek_r+0x1e>
 801d174:	6023      	str	r3, [r4, #0]
 801d176:	bd38      	pop	{r3, r4, r5, pc}
 801d178:	20002560 	.word	0x20002560

0801d17c <_read_r>:
 801d17c:	b538      	push	{r3, r4, r5, lr}
 801d17e:	4d07      	ldr	r5, [pc, #28]	@ (801d19c <_read_r+0x20>)
 801d180:	4604      	mov	r4, r0
 801d182:	4608      	mov	r0, r1
 801d184:	4611      	mov	r1, r2
 801d186:	2200      	movs	r2, #0
 801d188:	602a      	str	r2, [r5, #0]
 801d18a:	461a      	mov	r2, r3
 801d18c:	f7e5 fa75 	bl	800267a <_read>
 801d190:	1c43      	adds	r3, r0, #1
 801d192:	d102      	bne.n	801d19a <_read_r+0x1e>
 801d194:	682b      	ldr	r3, [r5, #0]
 801d196:	b103      	cbz	r3, 801d19a <_read_r+0x1e>
 801d198:	6023      	str	r3, [r4, #0]
 801d19a:	bd38      	pop	{r3, r4, r5, pc}
 801d19c:	20002560 	.word	0x20002560

0801d1a0 <_write_r>:
 801d1a0:	b538      	push	{r3, r4, r5, lr}
 801d1a2:	4d07      	ldr	r5, [pc, #28]	@ (801d1c0 <_write_r+0x20>)
 801d1a4:	4604      	mov	r4, r0
 801d1a6:	4608      	mov	r0, r1
 801d1a8:	4611      	mov	r1, r2
 801d1aa:	2200      	movs	r2, #0
 801d1ac:	602a      	str	r2, [r5, #0]
 801d1ae:	461a      	mov	r2, r3
 801d1b0:	f7e5 fa80 	bl	80026b4 <_write>
 801d1b4:	1c43      	adds	r3, r0, #1
 801d1b6:	d102      	bne.n	801d1be <_write_r+0x1e>
 801d1b8:	682b      	ldr	r3, [r5, #0]
 801d1ba:	b103      	cbz	r3, 801d1be <_write_r+0x1e>
 801d1bc:	6023      	str	r3, [r4, #0]
 801d1be:	bd38      	pop	{r3, r4, r5, pc}
 801d1c0:	20002560 	.word	0x20002560

0801d1c4 <__errno>:
 801d1c4:	4b01      	ldr	r3, [pc, #4]	@ (801d1cc <__errno+0x8>)
 801d1c6:	6818      	ldr	r0, [r3, #0]
 801d1c8:	4770      	bx	lr
 801d1ca:	bf00      	nop
 801d1cc:	20000164 	.word	0x20000164

0801d1d0 <__libc_init_array>:
 801d1d0:	b570      	push	{r4, r5, r6, lr}
 801d1d2:	4d0d      	ldr	r5, [pc, #52]	@ (801d208 <__libc_init_array+0x38>)
 801d1d4:	4c0d      	ldr	r4, [pc, #52]	@ (801d20c <__libc_init_array+0x3c>)
 801d1d6:	1b64      	subs	r4, r4, r5
 801d1d8:	10a4      	asrs	r4, r4, #2
 801d1da:	2600      	movs	r6, #0
 801d1dc:	42a6      	cmp	r6, r4
 801d1de:	d109      	bne.n	801d1f4 <__libc_init_array+0x24>
 801d1e0:	4d0b      	ldr	r5, [pc, #44]	@ (801d210 <__libc_init_array+0x40>)
 801d1e2:	4c0c      	ldr	r4, [pc, #48]	@ (801d214 <__libc_init_array+0x44>)
 801d1e4:	f001 fea8 	bl	801ef38 <_init>
 801d1e8:	1b64      	subs	r4, r4, r5
 801d1ea:	10a4      	asrs	r4, r4, #2
 801d1ec:	2600      	movs	r6, #0
 801d1ee:	42a6      	cmp	r6, r4
 801d1f0:	d105      	bne.n	801d1fe <__libc_init_array+0x2e>
 801d1f2:	bd70      	pop	{r4, r5, r6, pc}
 801d1f4:	f855 3b04 	ldr.w	r3, [r5], #4
 801d1f8:	4798      	blx	r3
 801d1fa:	3601      	adds	r6, #1
 801d1fc:	e7ee      	b.n	801d1dc <__libc_init_array+0xc>
 801d1fe:	f855 3b04 	ldr.w	r3, [r5], #4
 801d202:	4798      	blx	r3
 801d204:	3601      	adds	r6, #1
 801d206:	e7f2      	b.n	801d1ee <__libc_init_array+0x1e>
 801d208:	08020460 	.word	0x08020460
 801d20c:	08020460 	.word	0x08020460
 801d210:	08020460 	.word	0x08020460
 801d214:	08020464 	.word	0x08020464

0801d218 <__retarget_lock_init_recursive>:
 801d218:	4770      	bx	lr

0801d21a <__retarget_lock_acquire_recursive>:
 801d21a:	4770      	bx	lr

0801d21c <__retarget_lock_release_recursive>:
 801d21c:	4770      	bx	lr

0801d21e <memcpy>:
 801d21e:	440a      	add	r2, r1
 801d220:	4291      	cmp	r1, r2
 801d222:	f100 33ff 	add.w	r3, r0, #4294967295
 801d226:	d100      	bne.n	801d22a <memcpy+0xc>
 801d228:	4770      	bx	lr
 801d22a:	b510      	push	{r4, lr}
 801d22c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d230:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d234:	4291      	cmp	r1, r2
 801d236:	d1f9      	bne.n	801d22c <memcpy+0xe>
 801d238:	bd10      	pop	{r4, pc}

0801d23a <quorem>:
 801d23a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d23e:	6903      	ldr	r3, [r0, #16]
 801d240:	690c      	ldr	r4, [r1, #16]
 801d242:	42a3      	cmp	r3, r4
 801d244:	4607      	mov	r7, r0
 801d246:	db7e      	blt.n	801d346 <quorem+0x10c>
 801d248:	3c01      	subs	r4, #1
 801d24a:	f101 0814 	add.w	r8, r1, #20
 801d24e:	00a3      	lsls	r3, r4, #2
 801d250:	f100 0514 	add.w	r5, r0, #20
 801d254:	9300      	str	r3, [sp, #0]
 801d256:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d25a:	9301      	str	r3, [sp, #4]
 801d25c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d260:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d264:	3301      	adds	r3, #1
 801d266:	429a      	cmp	r2, r3
 801d268:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d26c:	fbb2 f6f3 	udiv	r6, r2, r3
 801d270:	d32e      	bcc.n	801d2d0 <quorem+0x96>
 801d272:	f04f 0a00 	mov.w	sl, #0
 801d276:	46c4      	mov	ip, r8
 801d278:	46ae      	mov	lr, r5
 801d27a:	46d3      	mov	fp, sl
 801d27c:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d280:	b298      	uxth	r0, r3
 801d282:	fb06 a000 	mla	r0, r6, r0, sl
 801d286:	0c02      	lsrs	r2, r0, #16
 801d288:	0c1b      	lsrs	r3, r3, #16
 801d28a:	fb06 2303 	mla	r3, r6, r3, r2
 801d28e:	f8de 2000 	ldr.w	r2, [lr]
 801d292:	b280      	uxth	r0, r0
 801d294:	b292      	uxth	r2, r2
 801d296:	1a12      	subs	r2, r2, r0
 801d298:	445a      	add	r2, fp
 801d29a:	f8de 0000 	ldr.w	r0, [lr]
 801d29e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d2a2:	b29b      	uxth	r3, r3
 801d2a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d2a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d2ac:	b292      	uxth	r2, r2
 801d2ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d2b2:	45e1      	cmp	r9, ip
 801d2b4:	f84e 2b04 	str.w	r2, [lr], #4
 801d2b8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d2bc:	d2de      	bcs.n	801d27c <quorem+0x42>
 801d2be:	9b00      	ldr	r3, [sp, #0]
 801d2c0:	58eb      	ldr	r3, [r5, r3]
 801d2c2:	b92b      	cbnz	r3, 801d2d0 <quorem+0x96>
 801d2c4:	9b01      	ldr	r3, [sp, #4]
 801d2c6:	3b04      	subs	r3, #4
 801d2c8:	429d      	cmp	r5, r3
 801d2ca:	461a      	mov	r2, r3
 801d2cc:	d32f      	bcc.n	801d32e <quorem+0xf4>
 801d2ce:	613c      	str	r4, [r7, #16]
 801d2d0:	4638      	mov	r0, r7
 801d2d2:	f001 f97f 	bl	801e5d4 <__mcmp>
 801d2d6:	2800      	cmp	r0, #0
 801d2d8:	db25      	blt.n	801d326 <quorem+0xec>
 801d2da:	4629      	mov	r1, r5
 801d2dc:	2000      	movs	r0, #0
 801d2de:	f858 2b04 	ldr.w	r2, [r8], #4
 801d2e2:	f8d1 c000 	ldr.w	ip, [r1]
 801d2e6:	fa1f fe82 	uxth.w	lr, r2
 801d2ea:	fa1f f38c 	uxth.w	r3, ip
 801d2ee:	eba3 030e 	sub.w	r3, r3, lr
 801d2f2:	4403      	add	r3, r0
 801d2f4:	0c12      	lsrs	r2, r2, #16
 801d2f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d2fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d2fe:	b29b      	uxth	r3, r3
 801d300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d304:	45c1      	cmp	r9, r8
 801d306:	f841 3b04 	str.w	r3, [r1], #4
 801d30a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d30e:	d2e6      	bcs.n	801d2de <quorem+0xa4>
 801d310:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d314:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d318:	b922      	cbnz	r2, 801d324 <quorem+0xea>
 801d31a:	3b04      	subs	r3, #4
 801d31c:	429d      	cmp	r5, r3
 801d31e:	461a      	mov	r2, r3
 801d320:	d30b      	bcc.n	801d33a <quorem+0x100>
 801d322:	613c      	str	r4, [r7, #16]
 801d324:	3601      	adds	r6, #1
 801d326:	4630      	mov	r0, r6
 801d328:	b003      	add	sp, #12
 801d32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d32e:	6812      	ldr	r2, [r2, #0]
 801d330:	3b04      	subs	r3, #4
 801d332:	2a00      	cmp	r2, #0
 801d334:	d1cb      	bne.n	801d2ce <quorem+0x94>
 801d336:	3c01      	subs	r4, #1
 801d338:	e7c6      	b.n	801d2c8 <quorem+0x8e>
 801d33a:	6812      	ldr	r2, [r2, #0]
 801d33c:	3b04      	subs	r3, #4
 801d33e:	2a00      	cmp	r2, #0
 801d340:	d1ef      	bne.n	801d322 <quorem+0xe8>
 801d342:	3c01      	subs	r4, #1
 801d344:	e7ea      	b.n	801d31c <quorem+0xe2>
 801d346:	2000      	movs	r0, #0
 801d348:	e7ee      	b.n	801d328 <quorem+0xee>
 801d34a:	0000      	movs	r0, r0
 801d34c:	0000      	movs	r0, r0
	...

0801d350 <_dtoa_r>:
 801d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d354:	69c7      	ldr	r7, [r0, #28]
 801d356:	b097      	sub	sp, #92	@ 0x5c
 801d358:	4614      	mov	r4, r2
 801d35a:	461d      	mov	r5, r3
 801d35c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801d360:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801d362:	4683      	mov	fp, r0
 801d364:	b97f      	cbnz	r7, 801d386 <_dtoa_r+0x36>
 801d366:	2010      	movs	r0, #16
 801d368:	f000 fe04 	bl	801df74 <malloc>
 801d36c:	4602      	mov	r2, r0
 801d36e:	f8cb 001c 	str.w	r0, [fp, #28]
 801d372:	b920      	cbnz	r0, 801d37e <_dtoa_r+0x2e>
 801d374:	4ba8      	ldr	r3, [pc, #672]	@ (801d618 <_dtoa_r+0x2c8>)
 801d376:	21ef      	movs	r1, #239	@ 0xef
 801d378:	48a8      	ldr	r0, [pc, #672]	@ (801d61c <_dtoa_r+0x2cc>)
 801d37a:	f001 fcad 	bl	801ecd8 <__assert_func>
 801d37e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801d382:	6007      	str	r7, [r0, #0]
 801d384:	60c7      	str	r7, [r0, #12]
 801d386:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d38a:	6819      	ldr	r1, [r3, #0]
 801d38c:	b159      	cbz	r1, 801d3a6 <_dtoa_r+0x56>
 801d38e:	685a      	ldr	r2, [r3, #4]
 801d390:	604a      	str	r2, [r1, #4]
 801d392:	2301      	movs	r3, #1
 801d394:	4093      	lsls	r3, r2
 801d396:	608b      	str	r3, [r1, #8]
 801d398:	4658      	mov	r0, fp
 801d39a:	f000 fee1 	bl	801e160 <_Bfree>
 801d39e:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d3a2:	2200      	movs	r2, #0
 801d3a4:	601a      	str	r2, [r3, #0]
 801d3a6:	1e2b      	subs	r3, r5, #0
 801d3a8:	bfb9      	ittee	lt
 801d3aa:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d3ae:	9303      	strlt	r3, [sp, #12]
 801d3b0:	2300      	movge	r3, #0
 801d3b2:	6033      	strge	r3, [r6, #0]
 801d3b4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801d3b8:	4b99      	ldr	r3, [pc, #612]	@ (801d620 <_dtoa_r+0x2d0>)
 801d3ba:	bfbc      	itt	lt
 801d3bc:	2201      	movlt	r2, #1
 801d3be:	6032      	strlt	r2, [r6, #0]
 801d3c0:	ea33 0308 	bics.w	r3, r3, r8
 801d3c4:	d112      	bne.n	801d3ec <_dtoa_r+0x9c>
 801d3c6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801d3c8:	f242 730f 	movw	r3, #9999	@ 0x270f
 801d3cc:	6013      	str	r3, [r2, #0]
 801d3ce:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801d3d2:	4323      	orrs	r3, r4
 801d3d4:	f000 8551 	beq.w	801de7a <_dtoa_r+0xb2a>
 801d3d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d3da:	f8df a248 	ldr.w	sl, [pc, #584]	@ 801d624 <_dtoa_r+0x2d4>
 801d3de:	2b00      	cmp	r3, #0
 801d3e0:	f000 8553 	beq.w	801de8a <_dtoa_r+0xb3a>
 801d3e4:	f10a 0303 	add.w	r3, sl, #3
 801d3e8:	f000 bd4d 	b.w	801de86 <_dtoa_r+0xb36>
 801d3ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d3f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801d3f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d3f8:	2200      	movs	r2, #0
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	f7e3 fb3c 	bl	8000a78 <__aeabi_dcmpeq>
 801d400:	4607      	mov	r7, r0
 801d402:	b158      	cbz	r0, 801d41c <_dtoa_r+0xcc>
 801d404:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801d406:	2301      	movs	r3, #1
 801d408:	6013      	str	r3, [r2, #0]
 801d40a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d40c:	b113      	cbz	r3, 801d414 <_dtoa_r+0xc4>
 801d40e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801d410:	4b85      	ldr	r3, [pc, #532]	@ (801d628 <_dtoa_r+0x2d8>)
 801d412:	6013      	str	r3, [r2, #0]
 801d414:	f8df a214 	ldr.w	sl, [pc, #532]	@ 801d62c <_dtoa_r+0x2dc>
 801d418:	f000 bd37 	b.w	801de8a <_dtoa_r+0xb3a>
 801d41c:	ab14      	add	r3, sp, #80	@ 0x50
 801d41e:	9301      	str	r3, [sp, #4]
 801d420:	ab15      	add	r3, sp, #84	@ 0x54
 801d422:	9300      	str	r3, [sp, #0]
 801d424:	4658      	mov	r0, fp
 801d426:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801d42a:	f001 f981 	bl	801e730 <__d2b>
 801d42e:	f3c8 560a 	ubfx	r6, r8, #20, #11
 801d432:	4681      	mov	r9, r0
 801d434:	2e00      	cmp	r6, #0
 801d436:	d076      	beq.n	801d526 <_dtoa_r+0x1d6>
 801d438:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d43a:	9712      	str	r7, [sp, #72]	@ 0x48
 801d43c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d444:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801d448:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801d44c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801d450:	4619      	mov	r1, r3
 801d452:	2200      	movs	r2, #0
 801d454:	4b76      	ldr	r3, [pc, #472]	@ (801d630 <_dtoa_r+0x2e0>)
 801d456:	f7e2 feef 	bl	8000238 <__aeabi_dsub>
 801d45a:	a369      	add	r3, pc, #420	@ (adr r3, 801d600 <_dtoa_r+0x2b0>)
 801d45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d460:	f7e3 f8a2 	bl	80005a8 <__aeabi_dmul>
 801d464:	a368      	add	r3, pc, #416	@ (adr r3, 801d608 <_dtoa_r+0x2b8>)
 801d466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d46a:	f7e2 fee7 	bl	800023c <__adddf3>
 801d46e:	4604      	mov	r4, r0
 801d470:	4630      	mov	r0, r6
 801d472:	460d      	mov	r5, r1
 801d474:	f7e3 f82e 	bl	80004d4 <__aeabi_i2d>
 801d478:	a365      	add	r3, pc, #404	@ (adr r3, 801d610 <_dtoa_r+0x2c0>)
 801d47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d47e:	f7e3 f893 	bl	80005a8 <__aeabi_dmul>
 801d482:	4602      	mov	r2, r0
 801d484:	460b      	mov	r3, r1
 801d486:	4620      	mov	r0, r4
 801d488:	4629      	mov	r1, r5
 801d48a:	f7e2 fed7 	bl	800023c <__adddf3>
 801d48e:	4604      	mov	r4, r0
 801d490:	460d      	mov	r5, r1
 801d492:	f7e3 fb39 	bl	8000b08 <__aeabi_d2iz>
 801d496:	2200      	movs	r2, #0
 801d498:	4607      	mov	r7, r0
 801d49a:	2300      	movs	r3, #0
 801d49c:	4620      	mov	r0, r4
 801d49e:	4629      	mov	r1, r5
 801d4a0:	f7e3 faf4 	bl	8000a8c <__aeabi_dcmplt>
 801d4a4:	b140      	cbz	r0, 801d4b8 <_dtoa_r+0x168>
 801d4a6:	4638      	mov	r0, r7
 801d4a8:	f7e3 f814 	bl	80004d4 <__aeabi_i2d>
 801d4ac:	4622      	mov	r2, r4
 801d4ae:	462b      	mov	r3, r5
 801d4b0:	f7e3 fae2 	bl	8000a78 <__aeabi_dcmpeq>
 801d4b4:	b900      	cbnz	r0, 801d4b8 <_dtoa_r+0x168>
 801d4b6:	3f01      	subs	r7, #1
 801d4b8:	2f16      	cmp	r7, #22
 801d4ba:	d852      	bhi.n	801d562 <_dtoa_r+0x212>
 801d4bc:	4b5d      	ldr	r3, [pc, #372]	@ (801d634 <_dtoa_r+0x2e4>)
 801d4be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d4ca:	f7e3 fadf 	bl	8000a8c <__aeabi_dcmplt>
 801d4ce:	2800      	cmp	r0, #0
 801d4d0:	d049      	beq.n	801d566 <_dtoa_r+0x216>
 801d4d2:	3f01      	subs	r7, #1
 801d4d4:	2300      	movs	r3, #0
 801d4d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d4d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d4da:	1b9b      	subs	r3, r3, r6
 801d4dc:	1e5a      	subs	r2, r3, #1
 801d4de:	bf44      	itt	mi
 801d4e0:	f1c3 0801 	rsbmi	r8, r3, #1
 801d4e4:	2300      	movmi	r3, #0
 801d4e6:	9209      	str	r2, [sp, #36]	@ 0x24
 801d4e8:	bf54      	ite	pl
 801d4ea:	f04f 0800 	movpl.w	r8, #0
 801d4ee:	9309      	strmi	r3, [sp, #36]	@ 0x24
 801d4f0:	2f00      	cmp	r7, #0
 801d4f2:	db3a      	blt.n	801d56a <_dtoa_r+0x21a>
 801d4f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d4f6:	970e      	str	r7, [sp, #56]	@ 0x38
 801d4f8:	443b      	add	r3, r7
 801d4fa:	9309      	str	r3, [sp, #36]	@ 0x24
 801d4fc:	2300      	movs	r3, #0
 801d4fe:	930a      	str	r3, [sp, #40]	@ 0x28
 801d500:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d502:	2b09      	cmp	r3, #9
 801d504:	d865      	bhi.n	801d5d2 <_dtoa_r+0x282>
 801d506:	2b05      	cmp	r3, #5
 801d508:	bfc4      	itt	gt
 801d50a:	3b04      	subgt	r3, #4
 801d50c:	9320      	strgt	r3, [sp, #128]	@ 0x80
 801d50e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d510:	f1a3 0302 	sub.w	r3, r3, #2
 801d514:	bfcc      	ite	gt
 801d516:	2400      	movgt	r4, #0
 801d518:	2401      	movle	r4, #1
 801d51a:	2b03      	cmp	r3, #3
 801d51c:	d864      	bhi.n	801d5e8 <_dtoa_r+0x298>
 801d51e:	e8df f003 	tbb	[pc, r3]
 801d522:	382b      	.short	0x382b
 801d524:	5636      	.short	0x5636
 801d526:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801d52a:	441e      	add	r6, r3
 801d52c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801d530:	2b20      	cmp	r3, #32
 801d532:	bfc1      	itttt	gt
 801d534:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801d538:	fa08 f803 	lslgt.w	r8, r8, r3
 801d53c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801d540:	fa24 f303 	lsrgt.w	r3, r4, r3
 801d544:	bfd6      	itet	le
 801d546:	f1c3 0320 	rsble	r3, r3, #32
 801d54a:	ea48 0003 	orrgt.w	r0, r8, r3
 801d54e:	fa04 f003 	lslle.w	r0, r4, r3
 801d552:	f7e2 ffaf 	bl	80004b4 <__aeabi_ui2d>
 801d556:	2201      	movs	r2, #1
 801d558:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801d55c:	3e01      	subs	r6, #1
 801d55e:	9212      	str	r2, [sp, #72]	@ 0x48
 801d560:	e776      	b.n	801d450 <_dtoa_r+0x100>
 801d562:	2301      	movs	r3, #1
 801d564:	e7b7      	b.n	801d4d6 <_dtoa_r+0x186>
 801d566:	900f      	str	r0, [sp, #60]	@ 0x3c
 801d568:	e7b6      	b.n	801d4d8 <_dtoa_r+0x188>
 801d56a:	427b      	negs	r3, r7
 801d56c:	930a      	str	r3, [sp, #40]	@ 0x28
 801d56e:	2300      	movs	r3, #0
 801d570:	eba8 0807 	sub.w	r8, r8, r7
 801d574:	930e      	str	r3, [sp, #56]	@ 0x38
 801d576:	e7c3      	b.n	801d500 <_dtoa_r+0x1b0>
 801d578:	2300      	movs	r3, #0
 801d57a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d57c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d57e:	2b00      	cmp	r3, #0
 801d580:	dc35      	bgt.n	801d5ee <_dtoa_r+0x29e>
 801d582:	2301      	movs	r3, #1
 801d584:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801d588:	461a      	mov	r2, r3
 801d58a:	9221      	str	r2, [sp, #132]	@ 0x84
 801d58c:	e00b      	b.n	801d5a6 <_dtoa_r+0x256>
 801d58e:	2301      	movs	r3, #1
 801d590:	e7f3      	b.n	801d57a <_dtoa_r+0x22a>
 801d592:	2300      	movs	r3, #0
 801d594:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d596:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d598:	18fb      	adds	r3, r7, r3
 801d59a:	9308      	str	r3, [sp, #32]
 801d59c:	3301      	adds	r3, #1
 801d59e:	2b01      	cmp	r3, #1
 801d5a0:	9307      	str	r3, [sp, #28]
 801d5a2:	bfb8      	it	lt
 801d5a4:	2301      	movlt	r3, #1
 801d5a6:	f8db 001c 	ldr.w	r0, [fp, #28]
 801d5aa:	2100      	movs	r1, #0
 801d5ac:	2204      	movs	r2, #4
 801d5ae:	f102 0514 	add.w	r5, r2, #20
 801d5b2:	429d      	cmp	r5, r3
 801d5b4:	d91f      	bls.n	801d5f6 <_dtoa_r+0x2a6>
 801d5b6:	6041      	str	r1, [r0, #4]
 801d5b8:	4658      	mov	r0, fp
 801d5ba:	f000 fd91 	bl	801e0e0 <_Balloc>
 801d5be:	4682      	mov	sl, r0
 801d5c0:	2800      	cmp	r0, #0
 801d5c2:	d13b      	bne.n	801d63c <_dtoa_r+0x2ec>
 801d5c4:	4b1c      	ldr	r3, [pc, #112]	@ (801d638 <_dtoa_r+0x2e8>)
 801d5c6:	4602      	mov	r2, r0
 801d5c8:	f240 11af 	movw	r1, #431	@ 0x1af
 801d5cc:	e6d4      	b.n	801d378 <_dtoa_r+0x28>
 801d5ce:	2301      	movs	r3, #1
 801d5d0:	e7e0      	b.n	801d594 <_dtoa_r+0x244>
 801d5d2:	2401      	movs	r4, #1
 801d5d4:	2300      	movs	r3, #0
 801d5d6:	9320      	str	r3, [sp, #128]	@ 0x80
 801d5d8:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d5da:	f04f 33ff 	mov.w	r3, #4294967295
 801d5de:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801d5e2:	2200      	movs	r2, #0
 801d5e4:	2312      	movs	r3, #18
 801d5e6:	e7d0      	b.n	801d58a <_dtoa_r+0x23a>
 801d5e8:	2301      	movs	r3, #1
 801d5ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d5ec:	e7f5      	b.n	801d5da <_dtoa_r+0x28a>
 801d5ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d5f0:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801d5f4:	e7d7      	b.n	801d5a6 <_dtoa_r+0x256>
 801d5f6:	3101      	adds	r1, #1
 801d5f8:	0052      	lsls	r2, r2, #1
 801d5fa:	e7d8      	b.n	801d5ae <_dtoa_r+0x25e>
 801d5fc:	f3af 8000 	nop.w
 801d600:	636f4361 	.word	0x636f4361
 801d604:	3fd287a7 	.word	0x3fd287a7
 801d608:	8b60c8b3 	.word	0x8b60c8b3
 801d60c:	3fc68a28 	.word	0x3fc68a28
 801d610:	509f79fb 	.word	0x509f79fb
 801d614:	3fd34413 	.word	0x3fd34413
 801d618:	08020065 	.word	0x08020065
 801d61c:	0802007c 	.word	0x0802007c
 801d620:	7ff00000 	.word	0x7ff00000
 801d624:	08020061 	.word	0x08020061
 801d628:	08020035 	.word	0x08020035
 801d62c:	08020034 	.word	0x08020034
 801d630:	3ff80000 	.word	0x3ff80000
 801d634:	08020178 	.word	0x08020178
 801d638:	080200d4 	.word	0x080200d4
 801d63c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d640:	6018      	str	r0, [r3, #0]
 801d642:	9b07      	ldr	r3, [sp, #28]
 801d644:	2b0e      	cmp	r3, #14
 801d646:	f200 80a4 	bhi.w	801d792 <_dtoa_r+0x442>
 801d64a:	2c00      	cmp	r4, #0
 801d64c:	f000 80a1 	beq.w	801d792 <_dtoa_r+0x442>
 801d650:	2f00      	cmp	r7, #0
 801d652:	dd33      	ble.n	801d6bc <_dtoa_r+0x36c>
 801d654:	4b86      	ldr	r3, [pc, #536]	@ (801d870 <_dtoa_r+0x520>)
 801d656:	f007 020f 	and.w	r2, r7, #15
 801d65a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d65e:	e9d3 3400 	ldrd	r3, r4, [r3]
 801d662:	05f8      	lsls	r0, r7, #23
 801d664:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801d668:	ea4f 1427 	mov.w	r4, r7, asr #4
 801d66c:	d516      	bpl.n	801d69c <_dtoa_r+0x34c>
 801d66e:	4b81      	ldr	r3, [pc, #516]	@ (801d874 <_dtoa_r+0x524>)
 801d670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d674:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d678:	f7e3 f8c0 	bl	80007fc <__aeabi_ddiv>
 801d67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d680:	f004 040f 	and.w	r4, r4, #15
 801d684:	2603      	movs	r6, #3
 801d686:	4d7b      	ldr	r5, [pc, #492]	@ (801d874 <_dtoa_r+0x524>)
 801d688:	b954      	cbnz	r4, 801d6a0 <_dtoa_r+0x350>
 801d68a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d68e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d692:	f7e3 f8b3 	bl	80007fc <__aeabi_ddiv>
 801d696:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d69a:	e028      	b.n	801d6ee <_dtoa_r+0x39e>
 801d69c:	2602      	movs	r6, #2
 801d69e:	e7f2      	b.n	801d686 <_dtoa_r+0x336>
 801d6a0:	07e1      	lsls	r1, r4, #31
 801d6a2:	d508      	bpl.n	801d6b6 <_dtoa_r+0x366>
 801d6a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d6a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d6ac:	f7e2 ff7c 	bl	80005a8 <__aeabi_dmul>
 801d6b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d6b4:	3601      	adds	r6, #1
 801d6b6:	1064      	asrs	r4, r4, #1
 801d6b8:	3508      	adds	r5, #8
 801d6ba:	e7e5      	b.n	801d688 <_dtoa_r+0x338>
 801d6bc:	f000 80d2 	beq.w	801d864 <_dtoa_r+0x514>
 801d6c0:	427c      	negs	r4, r7
 801d6c2:	4b6b      	ldr	r3, [pc, #428]	@ (801d870 <_dtoa_r+0x520>)
 801d6c4:	4d6b      	ldr	r5, [pc, #428]	@ (801d874 <_dtoa_r+0x524>)
 801d6c6:	f004 020f 	and.w	r2, r4, #15
 801d6ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d6d6:	f7e2 ff67 	bl	80005a8 <__aeabi_dmul>
 801d6da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d6de:	1124      	asrs	r4, r4, #4
 801d6e0:	2300      	movs	r3, #0
 801d6e2:	2602      	movs	r6, #2
 801d6e4:	2c00      	cmp	r4, #0
 801d6e6:	f040 80b2 	bne.w	801d84e <_dtoa_r+0x4fe>
 801d6ea:	2b00      	cmp	r3, #0
 801d6ec:	d1d3      	bne.n	801d696 <_dtoa_r+0x346>
 801d6ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d6f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	f000 80b7 	beq.w	801d868 <_dtoa_r+0x518>
 801d6fa:	4b5f      	ldr	r3, [pc, #380]	@ (801d878 <_dtoa_r+0x528>)
 801d6fc:	2200      	movs	r2, #0
 801d6fe:	4620      	mov	r0, r4
 801d700:	4629      	mov	r1, r5
 801d702:	f7e3 f9c3 	bl	8000a8c <__aeabi_dcmplt>
 801d706:	2800      	cmp	r0, #0
 801d708:	f000 80ae 	beq.w	801d868 <_dtoa_r+0x518>
 801d70c:	9b07      	ldr	r3, [sp, #28]
 801d70e:	2b00      	cmp	r3, #0
 801d710:	f000 80aa 	beq.w	801d868 <_dtoa_r+0x518>
 801d714:	9b08      	ldr	r3, [sp, #32]
 801d716:	2b00      	cmp	r3, #0
 801d718:	dd37      	ble.n	801d78a <_dtoa_r+0x43a>
 801d71a:	1e7b      	subs	r3, r7, #1
 801d71c:	9304      	str	r3, [sp, #16]
 801d71e:	4620      	mov	r0, r4
 801d720:	4b56      	ldr	r3, [pc, #344]	@ (801d87c <_dtoa_r+0x52c>)
 801d722:	2200      	movs	r2, #0
 801d724:	4629      	mov	r1, r5
 801d726:	f7e2 ff3f 	bl	80005a8 <__aeabi_dmul>
 801d72a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d72e:	9c08      	ldr	r4, [sp, #32]
 801d730:	3601      	adds	r6, #1
 801d732:	4630      	mov	r0, r6
 801d734:	f7e2 fece 	bl	80004d4 <__aeabi_i2d>
 801d738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d73c:	f7e2 ff34 	bl	80005a8 <__aeabi_dmul>
 801d740:	4b4f      	ldr	r3, [pc, #316]	@ (801d880 <_dtoa_r+0x530>)
 801d742:	2200      	movs	r2, #0
 801d744:	f7e2 fd7a 	bl	800023c <__adddf3>
 801d748:	4605      	mov	r5, r0
 801d74a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801d74e:	2c00      	cmp	r4, #0
 801d750:	f040 809a 	bne.w	801d888 <_dtoa_r+0x538>
 801d754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d758:	4b4a      	ldr	r3, [pc, #296]	@ (801d884 <_dtoa_r+0x534>)
 801d75a:	2200      	movs	r2, #0
 801d75c:	f7e2 fd6c 	bl	8000238 <__aeabi_dsub>
 801d760:	4602      	mov	r2, r0
 801d762:	460b      	mov	r3, r1
 801d764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d768:	462a      	mov	r2, r5
 801d76a:	4633      	mov	r3, r6
 801d76c:	f7e3 f9ac 	bl	8000ac8 <__aeabi_dcmpgt>
 801d770:	2800      	cmp	r0, #0
 801d772:	f040 828e 	bne.w	801dc92 <_dtoa_r+0x942>
 801d776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d77a:	462a      	mov	r2, r5
 801d77c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801d780:	f7e3 f984 	bl	8000a8c <__aeabi_dcmplt>
 801d784:	2800      	cmp	r0, #0
 801d786:	f040 8127 	bne.w	801d9d8 <_dtoa_r+0x688>
 801d78a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801d78e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801d792:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d794:	2b00      	cmp	r3, #0
 801d796:	f2c0 8163 	blt.w	801da60 <_dtoa_r+0x710>
 801d79a:	2f0e      	cmp	r7, #14
 801d79c:	f300 8160 	bgt.w	801da60 <_dtoa_r+0x710>
 801d7a0:	4b33      	ldr	r3, [pc, #204]	@ (801d870 <_dtoa_r+0x520>)
 801d7a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d7a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 801d7aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801d7ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	da03      	bge.n	801d7bc <_dtoa_r+0x46c>
 801d7b4:	9b07      	ldr	r3, [sp, #28]
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	f340 8100 	ble.w	801d9bc <_dtoa_r+0x66c>
 801d7bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801d7c0:	4656      	mov	r6, sl
 801d7c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d7c6:	4620      	mov	r0, r4
 801d7c8:	4629      	mov	r1, r5
 801d7ca:	f7e3 f817 	bl	80007fc <__aeabi_ddiv>
 801d7ce:	f7e3 f99b 	bl	8000b08 <__aeabi_d2iz>
 801d7d2:	4680      	mov	r8, r0
 801d7d4:	f7e2 fe7e 	bl	80004d4 <__aeabi_i2d>
 801d7d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d7dc:	f7e2 fee4 	bl	80005a8 <__aeabi_dmul>
 801d7e0:	4602      	mov	r2, r0
 801d7e2:	460b      	mov	r3, r1
 801d7e4:	4620      	mov	r0, r4
 801d7e6:	4629      	mov	r1, r5
 801d7e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801d7ec:	f7e2 fd24 	bl	8000238 <__aeabi_dsub>
 801d7f0:	f806 4b01 	strb.w	r4, [r6], #1
 801d7f4:	9d07      	ldr	r5, [sp, #28]
 801d7f6:	eba6 040a 	sub.w	r4, r6, sl
 801d7fa:	42a5      	cmp	r5, r4
 801d7fc:	4602      	mov	r2, r0
 801d7fe:	460b      	mov	r3, r1
 801d800:	f040 8116 	bne.w	801da30 <_dtoa_r+0x6e0>
 801d804:	f7e2 fd1a 	bl	800023c <__adddf3>
 801d808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d80c:	4604      	mov	r4, r0
 801d80e:	460d      	mov	r5, r1
 801d810:	f7e3 f95a 	bl	8000ac8 <__aeabi_dcmpgt>
 801d814:	2800      	cmp	r0, #0
 801d816:	f040 80f8 	bne.w	801da0a <_dtoa_r+0x6ba>
 801d81a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d81e:	4620      	mov	r0, r4
 801d820:	4629      	mov	r1, r5
 801d822:	f7e3 f929 	bl	8000a78 <__aeabi_dcmpeq>
 801d826:	b118      	cbz	r0, 801d830 <_dtoa_r+0x4e0>
 801d828:	f018 0f01 	tst.w	r8, #1
 801d82c:	f040 80ed 	bne.w	801da0a <_dtoa_r+0x6ba>
 801d830:	4649      	mov	r1, r9
 801d832:	4658      	mov	r0, fp
 801d834:	f000 fc94 	bl	801e160 <_Bfree>
 801d838:	2300      	movs	r3, #0
 801d83a:	7033      	strb	r3, [r6, #0]
 801d83c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d83e:	3701      	adds	r7, #1
 801d840:	601f      	str	r7, [r3, #0]
 801d842:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d844:	2b00      	cmp	r3, #0
 801d846:	f000 8320 	beq.w	801de8a <_dtoa_r+0xb3a>
 801d84a:	601e      	str	r6, [r3, #0]
 801d84c:	e31d      	b.n	801de8a <_dtoa_r+0xb3a>
 801d84e:	07e2      	lsls	r2, r4, #31
 801d850:	d505      	bpl.n	801d85e <_dtoa_r+0x50e>
 801d852:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d856:	f7e2 fea7 	bl	80005a8 <__aeabi_dmul>
 801d85a:	3601      	adds	r6, #1
 801d85c:	2301      	movs	r3, #1
 801d85e:	1064      	asrs	r4, r4, #1
 801d860:	3508      	adds	r5, #8
 801d862:	e73f      	b.n	801d6e4 <_dtoa_r+0x394>
 801d864:	2602      	movs	r6, #2
 801d866:	e742      	b.n	801d6ee <_dtoa_r+0x39e>
 801d868:	9c07      	ldr	r4, [sp, #28]
 801d86a:	9704      	str	r7, [sp, #16]
 801d86c:	e761      	b.n	801d732 <_dtoa_r+0x3e2>
 801d86e:	bf00      	nop
 801d870:	08020178 	.word	0x08020178
 801d874:	08020150 	.word	0x08020150
 801d878:	3ff00000 	.word	0x3ff00000
 801d87c:	40240000 	.word	0x40240000
 801d880:	401c0000 	.word	0x401c0000
 801d884:	40140000 	.word	0x40140000
 801d888:	4b70      	ldr	r3, [pc, #448]	@ (801da4c <_dtoa_r+0x6fc>)
 801d88a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d88c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d890:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d894:	4454      	add	r4, sl
 801d896:	2900      	cmp	r1, #0
 801d898:	d045      	beq.n	801d926 <_dtoa_r+0x5d6>
 801d89a:	496d      	ldr	r1, [pc, #436]	@ (801da50 <_dtoa_r+0x700>)
 801d89c:	2000      	movs	r0, #0
 801d89e:	f7e2 ffad 	bl	80007fc <__aeabi_ddiv>
 801d8a2:	4633      	mov	r3, r6
 801d8a4:	462a      	mov	r2, r5
 801d8a6:	f7e2 fcc7 	bl	8000238 <__aeabi_dsub>
 801d8aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d8ae:	4656      	mov	r6, sl
 801d8b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d8b4:	f7e3 f928 	bl	8000b08 <__aeabi_d2iz>
 801d8b8:	4605      	mov	r5, r0
 801d8ba:	f7e2 fe0b 	bl	80004d4 <__aeabi_i2d>
 801d8be:	4602      	mov	r2, r0
 801d8c0:	460b      	mov	r3, r1
 801d8c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d8c6:	f7e2 fcb7 	bl	8000238 <__aeabi_dsub>
 801d8ca:	3530      	adds	r5, #48	@ 0x30
 801d8cc:	4602      	mov	r2, r0
 801d8ce:	460b      	mov	r3, r1
 801d8d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d8d4:	f806 5b01 	strb.w	r5, [r6], #1
 801d8d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d8dc:	f7e3 f8d6 	bl	8000a8c <__aeabi_dcmplt>
 801d8e0:	2800      	cmp	r0, #0
 801d8e2:	d163      	bne.n	801d9ac <_dtoa_r+0x65c>
 801d8e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d8e8:	495a      	ldr	r1, [pc, #360]	@ (801da54 <_dtoa_r+0x704>)
 801d8ea:	2000      	movs	r0, #0
 801d8ec:	f7e2 fca4 	bl	8000238 <__aeabi_dsub>
 801d8f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d8f4:	f7e3 f8ca 	bl	8000a8c <__aeabi_dcmplt>
 801d8f8:	2800      	cmp	r0, #0
 801d8fa:	f040 8087 	bne.w	801da0c <_dtoa_r+0x6bc>
 801d8fe:	42a6      	cmp	r6, r4
 801d900:	f43f af43 	beq.w	801d78a <_dtoa_r+0x43a>
 801d904:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801d908:	4b53      	ldr	r3, [pc, #332]	@ (801da58 <_dtoa_r+0x708>)
 801d90a:	2200      	movs	r2, #0
 801d90c:	f7e2 fe4c 	bl	80005a8 <__aeabi_dmul>
 801d910:	4b51      	ldr	r3, [pc, #324]	@ (801da58 <_dtoa_r+0x708>)
 801d912:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d916:	2200      	movs	r2, #0
 801d918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d91c:	f7e2 fe44 	bl	80005a8 <__aeabi_dmul>
 801d920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d924:	e7c4      	b.n	801d8b0 <_dtoa_r+0x560>
 801d926:	4631      	mov	r1, r6
 801d928:	4628      	mov	r0, r5
 801d92a:	f7e2 fe3d 	bl	80005a8 <__aeabi_dmul>
 801d92e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d932:	9413      	str	r4, [sp, #76]	@ 0x4c
 801d934:	4656      	mov	r6, sl
 801d936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d93a:	f7e3 f8e5 	bl	8000b08 <__aeabi_d2iz>
 801d93e:	4605      	mov	r5, r0
 801d940:	f7e2 fdc8 	bl	80004d4 <__aeabi_i2d>
 801d944:	4602      	mov	r2, r0
 801d946:	460b      	mov	r3, r1
 801d948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d94c:	f7e2 fc74 	bl	8000238 <__aeabi_dsub>
 801d950:	3530      	adds	r5, #48	@ 0x30
 801d952:	f806 5b01 	strb.w	r5, [r6], #1
 801d956:	4602      	mov	r2, r0
 801d958:	460b      	mov	r3, r1
 801d95a:	42a6      	cmp	r6, r4
 801d95c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d960:	f04f 0200 	mov.w	r2, #0
 801d964:	d124      	bne.n	801d9b0 <_dtoa_r+0x660>
 801d966:	4b3a      	ldr	r3, [pc, #232]	@ (801da50 <_dtoa_r+0x700>)
 801d968:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801d96c:	f7e2 fc66 	bl	800023c <__adddf3>
 801d970:	4602      	mov	r2, r0
 801d972:	460b      	mov	r3, r1
 801d974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d978:	f7e3 f8a6 	bl	8000ac8 <__aeabi_dcmpgt>
 801d97c:	2800      	cmp	r0, #0
 801d97e:	d145      	bne.n	801da0c <_dtoa_r+0x6bc>
 801d980:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d984:	4932      	ldr	r1, [pc, #200]	@ (801da50 <_dtoa_r+0x700>)
 801d986:	2000      	movs	r0, #0
 801d988:	f7e2 fc56 	bl	8000238 <__aeabi_dsub>
 801d98c:	4602      	mov	r2, r0
 801d98e:	460b      	mov	r3, r1
 801d990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d994:	f7e3 f87a 	bl	8000a8c <__aeabi_dcmplt>
 801d998:	2800      	cmp	r0, #0
 801d99a:	f43f aef6 	beq.w	801d78a <_dtoa_r+0x43a>
 801d99e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d9a0:	1e73      	subs	r3, r6, #1
 801d9a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d9a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d9a8:	2b30      	cmp	r3, #48	@ 0x30
 801d9aa:	d0f8      	beq.n	801d99e <_dtoa_r+0x64e>
 801d9ac:	9f04      	ldr	r7, [sp, #16]
 801d9ae:	e73f      	b.n	801d830 <_dtoa_r+0x4e0>
 801d9b0:	4b29      	ldr	r3, [pc, #164]	@ (801da58 <_dtoa_r+0x708>)
 801d9b2:	f7e2 fdf9 	bl	80005a8 <__aeabi_dmul>
 801d9b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d9ba:	e7bc      	b.n	801d936 <_dtoa_r+0x5e6>
 801d9bc:	d10c      	bne.n	801d9d8 <_dtoa_r+0x688>
 801d9be:	4b27      	ldr	r3, [pc, #156]	@ (801da5c <_dtoa_r+0x70c>)
 801d9c0:	2200      	movs	r2, #0
 801d9c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d9c6:	f7e2 fdef 	bl	80005a8 <__aeabi_dmul>
 801d9ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d9ce:	f7e3 f871 	bl	8000ab4 <__aeabi_dcmpge>
 801d9d2:	2800      	cmp	r0, #0
 801d9d4:	f000 815b 	beq.w	801dc8e <_dtoa_r+0x93e>
 801d9d8:	2400      	movs	r4, #0
 801d9da:	4625      	mov	r5, r4
 801d9dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d9de:	43db      	mvns	r3, r3
 801d9e0:	9304      	str	r3, [sp, #16]
 801d9e2:	4656      	mov	r6, sl
 801d9e4:	2700      	movs	r7, #0
 801d9e6:	4621      	mov	r1, r4
 801d9e8:	4658      	mov	r0, fp
 801d9ea:	f000 fbb9 	bl	801e160 <_Bfree>
 801d9ee:	2d00      	cmp	r5, #0
 801d9f0:	d0dc      	beq.n	801d9ac <_dtoa_r+0x65c>
 801d9f2:	b12f      	cbz	r7, 801da00 <_dtoa_r+0x6b0>
 801d9f4:	42af      	cmp	r7, r5
 801d9f6:	d003      	beq.n	801da00 <_dtoa_r+0x6b0>
 801d9f8:	4639      	mov	r1, r7
 801d9fa:	4658      	mov	r0, fp
 801d9fc:	f000 fbb0 	bl	801e160 <_Bfree>
 801da00:	4629      	mov	r1, r5
 801da02:	4658      	mov	r0, fp
 801da04:	f000 fbac 	bl	801e160 <_Bfree>
 801da08:	e7d0      	b.n	801d9ac <_dtoa_r+0x65c>
 801da0a:	9704      	str	r7, [sp, #16]
 801da0c:	4633      	mov	r3, r6
 801da0e:	461e      	mov	r6, r3
 801da10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801da14:	2a39      	cmp	r2, #57	@ 0x39
 801da16:	d107      	bne.n	801da28 <_dtoa_r+0x6d8>
 801da18:	459a      	cmp	sl, r3
 801da1a:	d1f8      	bne.n	801da0e <_dtoa_r+0x6be>
 801da1c:	9a04      	ldr	r2, [sp, #16]
 801da1e:	3201      	adds	r2, #1
 801da20:	9204      	str	r2, [sp, #16]
 801da22:	2230      	movs	r2, #48	@ 0x30
 801da24:	f88a 2000 	strb.w	r2, [sl]
 801da28:	781a      	ldrb	r2, [r3, #0]
 801da2a:	3201      	adds	r2, #1
 801da2c:	701a      	strb	r2, [r3, #0]
 801da2e:	e7bd      	b.n	801d9ac <_dtoa_r+0x65c>
 801da30:	4b09      	ldr	r3, [pc, #36]	@ (801da58 <_dtoa_r+0x708>)
 801da32:	2200      	movs	r2, #0
 801da34:	f7e2 fdb8 	bl	80005a8 <__aeabi_dmul>
 801da38:	2200      	movs	r2, #0
 801da3a:	2300      	movs	r3, #0
 801da3c:	4604      	mov	r4, r0
 801da3e:	460d      	mov	r5, r1
 801da40:	f7e3 f81a 	bl	8000a78 <__aeabi_dcmpeq>
 801da44:	2800      	cmp	r0, #0
 801da46:	f43f aebc 	beq.w	801d7c2 <_dtoa_r+0x472>
 801da4a:	e6f1      	b.n	801d830 <_dtoa_r+0x4e0>
 801da4c:	08020178 	.word	0x08020178
 801da50:	3fe00000 	.word	0x3fe00000
 801da54:	3ff00000 	.word	0x3ff00000
 801da58:	40240000 	.word	0x40240000
 801da5c:	40140000 	.word	0x40140000
 801da60:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801da62:	2a00      	cmp	r2, #0
 801da64:	f000 80db 	beq.w	801dc1e <_dtoa_r+0x8ce>
 801da68:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801da6a:	2a01      	cmp	r2, #1
 801da6c:	f300 80bf 	bgt.w	801dbee <_dtoa_r+0x89e>
 801da70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801da72:	2a00      	cmp	r2, #0
 801da74:	f000 80b7 	beq.w	801dbe6 <_dtoa_r+0x896>
 801da78:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801da7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801da7e:	4646      	mov	r6, r8
 801da80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da82:	2101      	movs	r1, #1
 801da84:	441a      	add	r2, r3
 801da86:	4658      	mov	r0, fp
 801da88:	4498      	add	r8, r3
 801da8a:	9209      	str	r2, [sp, #36]	@ 0x24
 801da8c:	f000 fc1c 	bl	801e2c8 <__i2b>
 801da90:	4605      	mov	r5, r0
 801da92:	b15e      	cbz	r6, 801daac <_dtoa_r+0x75c>
 801da94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da96:	2b00      	cmp	r3, #0
 801da98:	dd08      	ble.n	801daac <_dtoa_r+0x75c>
 801da9a:	42b3      	cmp	r3, r6
 801da9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da9e:	bfa8      	it	ge
 801daa0:	4633      	movge	r3, r6
 801daa2:	eba8 0803 	sub.w	r8, r8, r3
 801daa6:	1af6      	subs	r6, r6, r3
 801daa8:	1ad3      	subs	r3, r2, r3
 801daaa:	9309      	str	r3, [sp, #36]	@ 0x24
 801daac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801daae:	b1f3      	cbz	r3, 801daee <_dtoa_r+0x79e>
 801dab0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dab2:	2b00      	cmp	r3, #0
 801dab4:	f000 80b7 	beq.w	801dc26 <_dtoa_r+0x8d6>
 801dab8:	b18c      	cbz	r4, 801dade <_dtoa_r+0x78e>
 801daba:	4629      	mov	r1, r5
 801dabc:	4622      	mov	r2, r4
 801dabe:	4658      	mov	r0, fp
 801dac0:	f000 fcc2 	bl	801e448 <__pow5mult>
 801dac4:	464a      	mov	r2, r9
 801dac6:	4601      	mov	r1, r0
 801dac8:	4605      	mov	r5, r0
 801daca:	4658      	mov	r0, fp
 801dacc:	f000 fc12 	bl	801e2f4 <__multiply>
 801dad0:	4649      	mov	r1, r9
 801dad2:	9004      	str	r0, [sp, #16]
 801dad4:	4658      	mov	r0, fp
 801dad6:	f000 fb43 	bl	801e160 <_Bfree>
 801dada:	9b04      	ldr	r3, [sp, #16]
 801dadc:	4699      	mov	r9, r3
 801dade:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dae0:	1b1a      	subs	r2, r3, r4
 801dae2:	d004      	beq.n	801daee <_dtoa_r+0x79e>
 801dae4:	4649      	mov	r1, r9
 801dae6:	4658      	mov	r0, fp
 801dae8:	f000 fcae 	bl	801e448 <__pow5mult>
 801daec:	4681      	mov	r9, r0
 801daee:	2101      	movs	r1, #1
 801daf0:	4658      	mov	r0, fp
 801daf2:	f000 fbe9 	bl	801e2c8 <__i2b>
 801daf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801daf8:	4604      	mov	r4, r0
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	f000 81c9 	beq.w	801de92 <_dtoa_r+0xb42>
 801db00:	461a      	mov	r2, r3
 801db02:	4601      	mov	r1, r0
 801db04:	4658      	mov	r0, fp
 801db06:	f000 fc9f 	bl	801e448 <__pow5mult>
 801db0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801db0c:	2b01      	cmp	r3, #1
 801db0e:	4604      	mov	r4, r0
 801db10:	f300 808f 	bgt.w	801dc32 <_dtoa_r+0x8e2>
 801db14:	9b02      	ldr	r3, [sp, #8]
 801db16:	2b00      	cmp	r3, #0
 801db18:	f040 8087 	bne.w	801dc2a <_dtoa_r+0x8da>
 801db1c:	9b03      	ldr	r3, [sp, #12]
 801db1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801db22:	2b00      	cmp	r3, #0
 801db24:	f040 8083 	bne.w	801dc2e <_dtoa_r+0x8de>
 801db28:	9b03      	ldr	r3, [sp, #12]
 801db2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801db2e:	0d1b      	lsrs	r3, r3, #20
 801db30:	051b      	lsls	r3, r3, #20
 801db32:	b12b      	cbz	r3, 801db40 <_dtoa_r+0x7f0>
 801db34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db36:	3301      	adds	r3, #1
 801db38:	9309      	str	r3, [sp, #36]	@ 0x24
 801db3a:	f108 0801 	add.w	r8, r8, #1
 801db3e:	2301      	movs	r3, #1
 801db40:	930a      	str	r3, [sp, #40]	@ 0x28
 801db42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801db44:	2b00      	cmp	r3, #0
 801db46:	f000 81aa 	beq.w	801de9e <_dtoa_r+0xb4e>
 801db4a:	6923      	ldr	r3, [r4, #16]
 801db4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801db50:	6918      	ldr	r0, [r3, #16]
 801db52:	f000 fb6d 	bl	801e230 <__hi0bits>
 801db56:	f1c0 0020 	rsb	r0, r0, #32
 801db5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db5c:	4418      	add	r0, r3
 801db5e:	f010 001f 	ands.w	r0, r0, #31
 801db62:	d071      	beq.n	801dc48 <_dtoa_r+0x8f8>
 801db64:	f1c0 0320 	rsb	r3, r0, #32
 801db68:	2b04      	cmp	r3, #4
 801db6a:	dd65      	ble.n	801dc38 <_dtoa_r+0x8e8>
 801db6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db6e:	f1c0 001c 	rsb	r0, r0, #28
 801db72:	4403      	add	r3, r0
 801db74:	4480      	add	r8, r0
 801db76:	4406      	add	r6, r0
 801db78:	9309      	str	r3, [sp, #36]	@ 0x24
 801db7a:	f1b8 0f00 	cmp.w	r8, #0
 801db7e:	dd05      	ble.n	801db8c <_dtoa_r+0x83c>
 801db80:	4649      	mov	r1, r9
 801db82:	4642      	mov	r2, r8
 801db84:	4658      	mov	r0, fp
 801db86:	f000 fcb9 	bl	801e4fc <__lshift>
 801db8a:	4681      	mov	r9, r0
 801db8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db8e:	2b00      	cmp	r3, #0
 801db90:	dd05      	ble.n	801db9e <_dtoa_r+0x84e>
 801db92:	4621      	mov	r1, r4
 801db94:	461a      	mov	r2, r3
 801db96:	4658      	mov	r0, fp
 801db98:	f000 fcb0 	bl	801e4fc <__lshift>
 801db9c:	4604      	mov	r4, r0
 801db9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d053      	beq.n	801dc4c <_dtoa_r+0x8fc>
 801dba4:	4621      	mov	r1, r4
 801dba6:	4648      	mov	r0, r9
 801dba8:	f000 fd14 	bl	801e5d4 <__mcmp>
 801dbac:	2800      	cmp	r0, #0
 801dbae:	da4d      	bge.n	801dc4c <_dtoa_r+0x8fc>
 801dbb0:	1e7b      	subs	r3, r7, #1
 801dbb2:	9304      	str	r3, [sp, #16]
 801dbb4:	4649      	mov	r1, r9
 801dbb6:	2300      	movs	r3, #0
 801dbb8:	220a      	movs	r2, #10
 801dbba:	4658      	mov	r0, fp
 801dbbc:	f000 faf2 	bl	801e1a4 <__multadd>
 801dbc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dbc2:	4681      	mov	r9, r0
 801dbc4:	2b00      	cmp	r3, #0
 801dbc6:	f000 816c 	beq.w	801dea2 <_dtoa_r+0xb52>
 801dbca:	2300      	movs	r3, #0
 801dbcc:	4629      	mov	r1, r5
 801dbce:	220a      	movs	r2, #10
 801dbd0:	4658      	mov	r0, fp
 801dbd2:	f000 fae7 	bl	801e1a4 <__multadd>
 801dbd6:	9b08      	ldr	r3, [sp, #32]
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	4605      	mov	r5, r0
 801dbdc:	dc61      	bgt.n	801dca2 <_dtoa_r+0x952>
 801dbde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801dbe0:	2b02      	cmp	r3, #2
 801dbe2:	dc3b      	bgt.n	801dc5c <_dtoa_r+0x90c>
 801dbe4:	e05d      	b.n	801dca2 <_dtoa_r+0x952>
 801dbe6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dbe8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801dbec:	e746      	b.n	801da7c <_dtoa_r+0x72c>
 801dbee:	9b07      	ldr	r3, [sp, #28]
 801dbf0:	1e5c      	subs	r4, r3, #1
 801dbf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dbf4:	42a3      	cmp	r3, r4
 801dbf6:	bfbf      	itttt	lt
 801dbf8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801dbfa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 801dbfc:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801dbfe:	1ae3      	sublt	r3, r4, r3
 801dc00:	bfb4      	ite	lt
 801dc02:	18d2      	addlt	r2, r2, r3
 801dc04:	1b1c      	subge	r4, r3, r4
 801dc06:	9b07      	ldr	r3, [sp, #28]
 801dc08:	bfbc      	itt	lt
 801dc0a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 801dc0c:	2400      	movlt	r4, #0
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	bfb5      	itete	lt
 801dc12:	eba8 0603 	sublt.w	r6, r8, r3
 801dc16:	9b07      	ldrge	r3, [sp, #28]
 801dc18:	2300      	movlt	r3, #0
 801dc1a:	4646      	movge	r6, r8
 801dc1c:	e730      	b.n	801da80 <_dtoa_r+0x730>
 801dc1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dc20:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801dc22:	4646      	mov	r6, r8
 801dc24:	e735      	b.n	801da92 <_dtoa_r+0x742>
 801dc26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dc28:	e75c      	b.n	801dae4 <_dtoa_r+0x794>
 801dc2a:	2300      	movs	r3, #0
 801dc2c:	e788      	b.n	801db40 <_dtoa_r+0x7f0>
 801dc2e:	9b02      	ldr	r3, [sp, #8]
 801dc30:	e786      	b.n	801db40 <_dtoa_r+0x7f0>
 801dc32:	2300      	movs	r3, #0
 801dc34:	930a      	str	r3, [sp, #40]	@ 0x28
 801dc36:	e788      	b.n	801db4a <_dtoa_r+0x7fa>
 801dc38:	d09f      	beq.n	801db7a <_dtoa_r+0x82a>
 801dc3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dc3c:	331c      	adds	r3, #28
 801dc3e:	441a      	add	r2, r3
 801dc40:	4498      	add	r8, r3
 801dc42:	441e      	add	r6, r3
 801dc44:	9209      	str	r2, [sp, #36]	@ 0x24
 801dc46:	e798      	b.n	801db7a <_dtoa_r+0x82a>
 801dc48:	4603      	mov	r3, r0
 801dc4a:	e7f6      	b.n	801dc3a <_dtoa_r+0x8ea>
 801dc4c:	9b07      	ldr	r3, [sp, #28]
 801dc4e:	9704      	str	r7, [sp, #16]
 801dc50:	2b00      	cmp	r3, #0
 801dc52:	dc20      	bgt.n	801dc96 <_dtoa_r+0x946>
 801dc54:	9308      	str	r3, [sp, #32]
 801dc56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801dc58:	2b02      	cmp	r3, #2
 801dc5a:	dd1e      	ble.n	801dc9a <_dtoa_r+0x94a>
 801dc5c:	9b08      	ldr	r3, [sp, #32]
 801dc5e:	2b00      	cmp	r3, #0
 801dc60:	f47f aebc 	bne.w	801d9dc <_dtoa_r+0x68c>
 801dc64:	4621      	mov	r1, r4
 801dc66:	2205      	movs	r2, #5
 801dc68:	4658      	mov	r0, fp
 801dc6a:	f000 fa9b 	bl	801e1a4 <__multadd>
 801dc6e:	4601      	mov	r1, r0
 801dc70:	4604      	mov	r4, r0
 801dc72:	4648      	mov	r0, r9
 801dc74:	f000 fcae 	bl	801e5d4 <__mcmp>
 801dc78:	2800      	cmp	r0, #0
 801dc7a:	f77f aeaf 	ble.w	801d9dc <_dtoa_r+0x68c>
 801dc7e:	4656      	mov	r6, sl
 801dc80:	2331      	movs	r3, #49	@ 0x31
 801dc82:	f806 3b01 	strb.w	r3, [r6], #1
 801dc86:	9b04      	ldr	r3, [sp, #16]
 801dc88:	3301      	adds	r3, #1
 801dc8a:	9304      	str	r3, [sp, #16]
 801dc8c:	e6aa      	b.n	801d9e4 <_dtoa_r+0x694>
 801dc8e:	9c07      	ldr	r4, [sp, #28]
 801dc90:	9704      	str	r7, [sp, #16]
 801dc92:	4625      	mov	r5, r4
 801dc94:	e7f3      	b.n	801dc7e <_dtoa_r+0x92e>
 801dc96:	9b07      	ldr	r3, [sp, #28]
 801dc98:	9308      	str	r3, [sp, #32]
 801dc9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dc9c:	2b00      	cmp	r3, #0
 801dc9e:	f000 8104 	beq.w	801deaa <_dtoa_r+0xb5a>
 801dca2:	2e00      	cmp	r6, #0
 801dca4:	dd05      	ble.n	801dcb2 <_dtoa_r+0x962>
 801dca6:	4629      	mov	r1, r5
 801dca8:	4632      	mov	r2, r6
 801dcaa:	4658      	mov	r0, fp
 801dcac:	f000 fc26 	bl	801e4fc <__lshift>
 801dcb0:	4605      	mov	r5, r0
 801dcb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	d05a      	beq.n	801dd6e <_dtoa_r+0xa1e>
 801dcb8:	6869      	ldr	r1, [r5, #4]
 801dcba:	4658      	mov	r0, fp
 801dcbc:	f000 fa10 	bl	801e0e0 <_Balloc>
 801dcc0:	4606      	mov	r6, r0
 801dcc2:	b928      	cbnz	r0, 801dcd0 <_dtoa_r+0x980>
 801dcc4:	4b84      	ldr	r3, [pc, #528]	@ (801ded8 <_dtoa_r+0xb88>)
 801dcc6:	4602      	mov	r2, r0
 801dcc8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801dccc:	f7ff bb54 	b.w	801d378 <_dtoa_r+0x28>
 801dcd0:	692a      	ldr	r2, [r5, #16]
 801dcd2:	3202      	adds	r2, #2
 801dcd4:	0092      	lsls	r2, r2, #2
 801dcd6:	f105 010c 	add.w	r1, r5, #12
 801dcda:	300c      	adds	r0, #12
 801dcdc:	f7ff fa9f 	bl	801d21e <memcpy>
 801dce0:	2201      	movs	r2, #1
 801dce2:	4631      	mov	r1, r6
 801dce4:	4658      	mov	r0, fp
 801dce6:	f000 fc09 	bl	801e4fc <__lshift>
 801dcea:	f10a 0301 	add.w	r3, sl, #1
 801dcee:	9307      	str	r3, [sp, #28]
 801dcf0:	9b08      	ldr	r3, [sp, #32]
 801dcf2:	4453      	add	r3, sl
 801dcf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dcf6:	9b02      	ldr	r3, [sp, #8]
 801dcf8:	f003 0301 	and.w	r3, r3, #1
 801dcfc:	462f      	mov	r7, r5
 801dcfe:	930a      	str	r3, [sp, #40]	@ 0x28
 801dd00:	4605      	mov	r5, r0
 801dd02:	9b07      	ldr	r3, [sp, #28]
 801dd04:	4621      	mov	r1, r4
 801dd06:	3b01      	subs	r3, #1
 801dd08:	4648      	mov	r0, r9
 801dd0a:	9302      	str	r3, [sp, #8]
 801dd0c:	f7ff fa95 	bl	801d23a <quorem>
 801dd10:	4639      	mov	r1, r7
 801dd12:	9008      	str	r0, [sp, #32]
 801dd14:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801dd18:	4648      	mov	r0, r9
 801dd1a:	f000 fc5b 	bl	801e5d4 <__mcmp>
 801dd1e:	462a      	mov	r2, r5
 801dd20:	9009      	str	r0, [sp, #36]	@ 0x24
 801dd22:	4621      	mov	r1, r4
 801dd24:	4658      	mov	r0, fp
 801dd26:	f000 fc71 	bl	801e60c <__mdiff>
 801dd2a:	68c2      	ldr	r2, [r0, #12]
 801dd2c:	4606      	mov	r6, r0
 801dd2e:	bb02      	cbnz	r2, 801dd72 <_dtoa_r+0xa22>
 801dd30:	4601      	mov	r1, r0
 801dd32:	4648      	mov	r0, r9
 801dd34:	f000 fc4e 	bl	801e5d4 <__mcmp>
 801dd38:	4602      	mov	r2, r0
 801dd3a:	4631      	mov	r1, r6
 801dd3c:	4658      	mov	r0, fp
 801dd3e:	920c      	str	r2, [sp, #48]	@ 0x30
 801dd40:	f000 fa0e 	bl	801e160 <_Bfree>
 801dd44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801dd46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dd48:	9e07      	ldr	r6, [sp, #28]
 801dd4a:	ea43 0102 	orr.w	r1, r3, r2
 801dd4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dd50:	4319      	orrs	r1, r3
 801dd52:	d110      	bne.n	801dd76 <_dtoa_r+0xa26>
 801dd54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801dd58:	d029      	beq.n	801ddae <_dtoa_r+0xa5e>
 801dd5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd5c:	2b00      	cmp	r3, #0
 801dd5e:	dd02      	ble.n	801dd66 <_dtoa_r+0xa16>
 801dd60:	9b08      	ldr	r3, [sp, #32]
 801dd62:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801dd66:	9b02      	ldr	r3, [sp, #8]
 801dd68:	f883 8000 	strb.w	r8, [r3]
 801dd6c:	e63b      	b.n	801d9e6 <_dtoa_r+0x696>
 801dd6e:	4628      	mov	r0, r5
 801dd70:	e7bb      	b.n	801dcea <_dtoa_r+0x99a>
 801dd72:	2201      	movs	r2, #1
 801dd74:	e7e1      	b.n	801dd3a <_dtoa_r+0x9ea>
 801dd76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd78:	2b00      	cmp	r3, #0
 801dd7a:	db04      	blt.n	801dd86 <_dtoa_r+0xa36>
 801dd7c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801dd7e:	430b      	orrs	r3, r1
 801dd80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dd82:	430b      	orrs	r3, r1
 801dd84:	d120      	bne.n	801ddc8 <_dtoa_r+0xa78>
 801dd86:	2a00      	cmp	r2, #0
 801dd88:	dded      	ble.n	801dd66 <_dtoa_r+0xa16>
 801dd8a:	4649      	mov	r1, r9
 801dd8c:	2201      	movs	r2, #1
 801dd8e:	4658      	mov	r0, fp
 801dd90:	f000 fbb4 	bl	801e4fc <__lshift>
 801dd94:	4621      	mov	r1, r4
 801dd96:	4681      	mov	r9, r0
 801dd98:	f000 fc1c 	bl	801e5d4 <__mcmp>
 801dd9c:	2800      	cmp	r0, #0
 801dd9e:	dc03      	bgt.n	801dda8 <_dtoa_r+0xa58>
 801dda0:	d1e1      	bne.n	801dd66 <_dtoa_r+0xa16>
 801dda2:	f018 0f01 	tst.w	r8, #1
 801dda6:	d0de      	beq.n	801dd66 <_dtoa_r+0xa16>
 801dda8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ddac:	d1d8      	bne.n	801dd60 <_dtoa_r+0xa10>
 801ddae:	9a02      	ldr	r2, [sp, #8]
 801ddb0:	2339      	movs	r3, #57	@ 0x39
 801ddb2:	7013      	strb	r3, [r2, #0]
 801ddb4:	4633      	mov	r3, r6
 801ddb6:	461e      	mov	r6, r3
 801ddb8:	3b01      	subs	r3, #1
 801ddba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801ddbe:	2a39      	cmp	r2, #57	@ 0x39
 801ddc0:	d052      	beq.n	801de68 <_dtoa_r+0xb18>
 801ddc2:	3201      	adds	r2, #1
 801ddc4:	701a      	strb	r2, [r3, #0]
 801ddc6:	e60e      	b.n	801d9e6 <_dtoa_r+0x696>
 801ddc8:	2a00      	cmp	r2, #0
 801ddca:	dd07      	ble.n	801dddc <_dtoa_r+0xa8c>
 801ddcc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ddd0:	d0ed      	beq.n	801ddae <_dtoa_r+0xa5e>
 801ddd2:	9a02      	ldr	r2, [sp, #8]
 801ddd4:	f108 0301 	add.w	r3, r8, #1
 801ddd8:	7013      	strb	r3, [r2, #0]
 801ddda:	e604      	b.n	801d9e6 <_dtoa_r+0x696>
 801dddc:	9b07      	ldr	r3, [sp, #28]
 801ddde:	9a07      	ldr	r2, [sp, #28]
 801dde0:	f803 8c01 	strb.w	r8, [r3, #-1]
 801dde4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dde6:	4293      	cmp	r3, r2
 801dde8:	d028      	beq.n	801de3c <_dtoa_r+0xaec>
 801ddea:	4649      	mov	r1, r9
 801ddec:	2300      	movs	r3, #0
 801ddee:	220a      	movs	r2, #10
 801ddf0:	4658      	mov	r0, fp
 801ddf2:	f000 f9d7 	bl	801e1a4 <__multadd>
 801ddf6:	42af      	cmp	r7, r5
 801ddf8:	4681      	mov	r9, r0
 801ddfa:	f04f 0300 	mov.w	r3, #0
 801ddfe:	f04f 020a 	mov.w	r2, #10
 801de02:	4639      	mov	r1, r7
 801de04:	4658      	mov	r0, fp
 801de06:	d107      	bne.n	801de18 <_dtoa_r+0xac8>
 801de08:	f000 f9cc 	bl	801e1a4 <__multadd>
 801de0c:	4607      	mov	r7, r0
 801de0e:	4605      	mov	r5, r0
 801de10:	9b07      	ldr	r3, [sp, #28]
 801de12:	3301      	adds	r3, #1
 801de14:	9307      	str	r3, [sp, #28]
 801de16:	e774      	b.n	801dd02 <_dtoa_r+0x9b2>
 801de18:	f000 f9c4 	bl	801e1a4 <__multadd>
 801de1c:	4629      	mov	r1, r5
 801de1e:	4607      	mov	r7, r0
 801de20:	2300      	movs	r3, #0
 801de22:	220a      	movs	r2, #10
 801de24:	4658      	mov	r0, fp
 801de26:	f000 f9bd 	bl	801e1a4 <__multadd>
 801de2a:	4605      	mov	r5, r0
 801de2c:	e7f0      	b.n	801de10 <_dtoa_r+0xac0>
 801de2e:	9b08      	ldr	r3, [sp, #32]
 801de30:	2b00      	cmp	r3, #0
 801de32:	bfcc      	ite	gt
 801de34:	461e      	movgt	r6, r3
 801de36:	2601      	movle	r6, #1
 801de38:	4456      	add	r6, sl
 801de3a:	2700      	movs	r7, #0
 801de3c:	4649      	mov	r1, r9
 801de3e:	2201      	movs	r2, #1
 801de40:	4658      	mov	r0, fp
 801de42:	f000 fb5b 	bl	801e4fc <__lshift>
 801de46:	4621      	mov	r1, r4
 801de48:	4681      	mov	r9, r0
 801de4a:	f000 fbc3 	bl	801e5d4 <__mcmp>
 801de4e:	2800      	cmp	r0, #0
 801de50:	dcb0      	bgt.n	801ddb4 <_dtoa_r+0xa64>
 801de52:	d102      	bne.n	801de5a <_dtoa_r+0xb0a>
 801de54:	f018 0f01 	tst.w	r8, #1
 801de58:	d1ac      	bne.n	801ddb4 <_dtoa_r+0xa64>
 801de5a:	4633      	mov	r3, r6
 801de5c:	461e      	mov	r6, r3
 801de5e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801de62:	2a30      	cmp	r2, #48	@ 0x30
 801de64:	d0fa      	beq.n	801de5c <_dtoa_r+0xb0c>
 801de66:	e5be      	b.n	801d9e6 <_dtoa_r+0x696>
 801de68:	459a      	cmp	sl, r3
 801de6a:	d1a4      	bne.n	801ddb6 <_dtoa_r+0xa66>
 801de6c:	9b04      	ldr	r3, [sp, #16]
 801de6e:	3301      	adds	r3, #1
 801de70:	9304      	str	r3, [sp, #16]
 801de72:	2331      	movs	r3, #49	@ 0x31
 801de74:	f88a 3000 	strb.w	r3, [sl]
 801de78:	e5b5      	b.n	801d9e6 <_dtoa_r+0x696>
 801de7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801de7c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801dedc <_dtoa_r+0xb8c>
 801de80:	b11b      	cbz	r3, 801de8a <_dtoa_r+0xb3a>
 801de82:	f10a 0308 	add.w	r3, sl, #8
 801de86:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801de88:	6013      	str	r3, [r2, #0]
 801de8a:	4650      	mov	r0, sl
 801de8c:	b017      	add	sp, #92	@ 0x5c
 801de8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801de94:	2b01      	cmp	r3, #1
 801de96:	f77f ae3d 	ble.w	801db14 <_dtoa_r+0x7c4>
 801de9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de9c:	930a      	str	r3, [sp, #40]	@ 0x28
 801de9e:	2001      	movs	r0, #1
 801dea0:	e65b      	b.n	801db5a <_dtoa_r+0x80a>
 801dea2:	9b08      	ldr	r3, [sp, #32]
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	f77f aed6 	ble.w	801dc56 <_dtoa_r+0x906>
 801deaa:	4656      	mov	r6, sl
 801deac:	4621      	mov	r1, r4
 801deae:	4648      	mov	r0, r9
 801deb0:	f7ff f9c3 	bl	801d23a <quorem>
 801deb4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801deb8:	f806 8b01 	strb.w	r8, [r6], #1
 801debc:	9b08      	ldr	r3, [sp, #32]
 801debe:	eba6 020a 	sub.w	r2, r6, sl
 801dec2:	4293      	cmp	r3, r2
 801dec4:	ddb3      	ble.n	801de2e <_dtoa_r+0xade>
 801dec6:	4649      	mov	r1, r9
 801dec8:	2300      	movs	r3, #0
 801deca:	220a      	movs	r2, #10
 801decc:	4658      	mov	r0, fp
 801dece:	f000 f969 	bl	801e1a4 <__multadd>
 801ded2:	4681      	mov	r9, r0
 801ded4:	e7ea      	b.n	801deac <_dtoa_r+0xb5c>
 801ded6:	bf00      	nop
 801ded8:	080200d4 	.word	0x080200d4
 801dedc:	08020058 	.word	0x08020058

0801dee0 <_free_r>:
 801dee0:	b538      	push	{r3, r4, r5, lr}
 801dee2:	4605      	mov	r5, r0
 801dee4:	2900      	cmp	r1, #0
 801dee6:	d041      	beq.n	801df6c <_free_r+0x8c>
 801dee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801deec:	1f0c      	subs	r4, r1, #4
 801deee:	2b00      	cmp	r3, #0
 801def0:	bfb8      	it	lt
 801def2:	18e4      	addlt	r4, r4, r3
 801def4:	f000 f8e8 	bl	801e0c8 <__malloc_lock>
 801def8:	4a1d      	ldr	r2, [pc, #116]	@ (801df70 <_free_r+0x90>)
 801defa:	6813      	ldr	r3, [r2, #0]
 801defc:	b933      	cbnz	r3, 801df0c <_free_r+0x2c>
 801defe:	6063      	str	r3, [r4, #4]
 801df00:	6014      	str	r4, [r2, #0]
 801df02:	4628      	mov	r0, r5
 801df04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801df08:	f000 b8e4 	b.w	801e0d4 <__malloc_unlock>
 801df0c:	42a3      	cmp	r3, r4
 801df0e:	d908      	bls.n	801df22 <_free_r+0x42>
 801df10:	6820      	ldr	r0, [r4, #0]
 801df12:	1821      	adds	r1, r4, r0
 801df14:	428b      	cmp	r3, r1
 801df16:	bf01      	itttt	eq
 801df18:	6819      	ldreq	r1, [r3, #0]
 801df1a:	685b      	ldreq	r3, [r3, #4]
 801df1c:	1809      	addeq	r1, r1, r0
 801df1e:	6021      	streq	r1, [r4, #0]
 801df20:	e7ed      	b.n	801defe <_free_r+0x1e>
 801df22:	461a      	mov	r2, r3
 801df24:	685b      	ldr	r3, [r3, #4]
 801df26:	b10b      	cbz	r3, 801df2c <_free_r+0x4c>
 801df28:	42a3      	cmp	r3, r4
 801df2a:	d9fa      	bls.n	801df22 <_free_r+0x42>
 801df2c:	6811      	ldr	r1, [r2, #0]
 801df2e:	1850      	adds	r0, r2, r1
 801df30:	42a0      	cmp	r0, r4
 801df32:	d10b      	bne.n	801df4c <_free_r+0x6c>
 801df34:	6820      	ldr	r0, [r4, #0]
 801df36:	4401      	add	r1, r0
 801df38:	1850      	adds	r0, r2, r1
 801df3a:	4283      	cmp	r3, r0
 801df3c:	6011      	str	r1, [r2, #0]
 801df3e:	d1e0      	bne.n	801df02 <_free_r+0x22>
 801df40:	6818      	ldr	r0, [r3, #0]
 801df42:	685b      	ldr	r3, [r3, #4]
 801df44:	6053      	str	r3, [r2, #4]
 801df46:	4408      	add	r0, r1
 801df48:	6010      	str	r0, [r2, #0]
 801df4a:	e7da      	b.n	801df02 <_free_r+0x22>
 801df4c:	d902      	bls.n	801df54 <_free_r+0x74>
 801df4e:	230c      	movs	r3, #12
 801df50:	602b      	str	r3, [r5, #0]
 801df52:	e7d6      	b.n	801df02 <_free_r+0x22>
 801df54:	6820      	ldr	r0, [r4, #0]
 801df56:	1821      	adds	r1, r4, r0
 801df58:	428b      	cmp	r3, r1
 801df5a:	bf04      	itt	eq
 801df5c:	6819      	ldreq	r1, [r3, #0]
 801df5e:	685b      	ldreq	r3, [r3, #4]
 801df60:	6063      	str	r3, [r4, #4]
 801df62:	bf04      	itt	eq
 801df64:	1809      	addeq	r1, r1, r0
 801df66:	6021      	streq	r1, [r4, #0]
 801df68:	6054      	str	r4, [r2, #4]
 801df6a:	e7ca      	b.n	801df02 <_free_r+0x22>
 801df6c:	bd38      	pop	{r3, r4, r5, pc}
 801df6e:	bf00      	nop
 801df70:	2000256c 	.word	0x2000256c

0801df74 <malloc>:
 801df74:	4b02      	ldr	r3, [pc, #8]	@ (801df80 <malloc+0xc>)
 801df76:	4601      	mov	r1, r0
 801df78:	6818      	ldr	r0, [r3, #0]
 801df7a:	f000 b825 	b.w	801dfc8 <_malloc_r>
 801df7e:	bf00      	nop
 801df80:	20000164 	.word	0x20000164

0801df84 <sbrk_aligned>:
 801df84:	b570      	push	{r4, r5, r6, lr}
 801df86:	4e0f      	ldr	r6, [pc, #60]	@ (801dfc4 <sbrk_aligned+0x40>)
 801df88:	460c      	mov	r4, r1
 801df8a:	6831      	ldr	r1, [r6, #0]
 801df8c:	4605      	mov	r5, r0
 801df8e:	b911      	cbnz	r1, 801df96 <sbrk_aligned+0x12>
 801df90:	f000 fe92 	bl	801ecb8 <_sbrk_r>
 801df94:	6030      	str	r0, [r6, #0]
 801df96:	4621      	mov	r1, r4
 801df98:	4628      	mov	r0, r5
 801df9a:	f000 fe8d 	bl	801ecb8 <_sbrk_r>
 801df9e:	1c43      	adds	r3, r0, #1
 801dfa0:	d103      	bne.n	801dfaa <sbrk_aligned+0x26>
 801dfa2:	f04f 34ff 	mov.w	r4, #4294967295
 801dfa6:	4620      	mov	r0, r4
 801dfa8:	bd70      	pop	{r4, r5, r6, pc}
 801dfaa:	1cc4      	adds	r4, r0, #3
 801dfac:	f024 0403 	bic.w	r4, r4, #3
 801dfb0:	42a0      	cmp	r0, r4
 801dfb2:	d0f8      	beq.n	801dfa6 <sbrk_aligned+0x22>
 801dfb4:	1a21      	subs	r1, r4, r0
 801dfb6:	4628      	mov	r0, r5
 801dfb8:	f000 fe7e 	bl	801ecb8 <_sbrk_r>
 801dfbc:	3001      	adds	r0, #1
 801dfbe:	d1f2      	bne.n	801dfa6 <sbrk_aligned+0x22>
 801dfc0:	e7ef      	b.n	801dfa2 <sbrk_aligned+0x1e>
 801dfc2:	bf00      	nop
 801dfc4:	20002568 	.word	0x20002568

0801dfc8 <_malloc_r>:
 801dfc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dfcc:	1ccd      	adds	r5, r1, #3
 801dfce:	f025 0503 	bic.w	r5, r5, #3
 801dfd2:	3508      	adds	r5, #8
 801dfd4:	2d0c      	cmp	r5, #12
 801dfd6:	bf38      	it	cc
 801dfd8:	250c      	movcc	r5, #12
 801dfda:	2d00      	cmp	r5, #0
 801dfdc:	4606      	mov	r6, r0
 801dfde:	db01      	blt.n	801dfe4 <_malloc_r+0x1c>
 801dfe0:	42a9      	cmp	r1, r5
 801dfe2:	d904      	bls.n	801dfee <_malloc_r+0x26>
 801dfe4:	230c      	movs	r3, #12
 801dfe6:	6033      	str	r3, [r6, #0]
 801dfe8:	2000      	movs	r0, #0
 801dfea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dfee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e0c4 <_malloc_r+0xfc>
 801dff2:	f000 f869 	bl	801e0c8 <__malloc_lock>
 801dff6:	f8d8 3000 	ldr.w	r3, [r8]
 801dffa:	461c      	mov	r4, r3
 801dffc:	bb44      	cbnz	r4, 801e050 <_malloc_r+0x88>
 801dffe:	4629      	mov	r1, r5
 801e000:	4630      	mov	r0, r6
 801e002:	f7ff ffbf 	bl	801df84 <sbrk_aligned>
 801e006:	1c43      	adds	r3, r0, #1
 801e008:	4604      	mov	r4, r0
 801e00a:	d158      	bne.n	801e0be <_malloc_r+0xf6>
 801e00c:	f8d8 4000 	ldr.w	r4, [r8]
 801e010:	4627      	mov	r7, r4
 801e012:	2f00      	cmp	r7, #0
 801e014:	d143      	bne.n	801e09e <_malloc_r+0xd6>
 801e016:	2c00      	cmp	r4, #0
 801e018:	d04b      	beq.n	801e0b2 <_malloc_r+0xea>
 801e01a:	6823      	ldr	r3, [r4, #0]
 801e01c:	4639      	mov	r1, r7
 801e01e:	4630      	mov	r0, r6
 801e020:	eb04 0903 	add.w	r9, r4, r3
 801e024:	f000 fe48 	bl	801ecb8 <_sbrk_r>
 801e028:	4581      	cmp	r9, r0
 801e02a:	d142      	bne.n	801e0b2 <_malloc_r+0xea>
 801e02c:	6821      	ldr	r1, [r4, #0]
 801e02e:	1a6d      	subs	r5, r5, r1
 801e030:	4629      	mov	r1, r5
 801e032:	4630      	mov	r0, r6
 801e034:	f7ff ffa6 	bl	801df84 <sbrk_aligned>
 801e038:	3001      	adds	r0, #1
 801e03a:	d03a      	beq.n	801e0b2 <_malloc_r+0xea>
 801e03c:	6823      	ldr	r3, [r4, #0]
 801e03e:	442b      	add	r3, r5
 801e040:	6023      	str	r3, [r4, #0]
 801e042:	f8d8 3000 	ldr.w	r3, [r8]
 801e046:	685a      	ldr	r2, [r3, #4]
 801e048:	bb62      	cbnz	r2, 801e0a4 <_malloc_r+0xdc>
 801e04a:	f8c8 7000 	str.w	r7, [r8]
 801e04e:	e00f      	b.n	801e070 <_malloc_r+0xa8>
 801e050:	6822      	ldr	r2, [r4, #0]
 801e052:	1b52      	subs	r2, r2, r5
 801e054:	d420      	bmi.n	801e098 <_malloc_r+0xd0>
 801e056:	2a0b      	cmp	r2, #11
 801e058:	d917      	bls.n	801e08a <_malloc_r+0xc2>
 801e05a:	1961      	adds	r1, r4, r5
 801e05c:	42a3      	cmp	r3, r4
 801e05e:	6025      	str	r5, [r4, #0]
 801e060:	bf18      	it	ne
 801e062:	6059      	strne	r1, [r3, #4]
 801e064:	6863      	ldr	r3, [r4, #4]
 801e066:	bf08      	it	eq
 801e068:	f8c8 1000 	streq.w	r1, [r8]
 801e06c:	5162      	str	r2, [r4, r5]
 801e06e:	604b      	str	r3, [r1, #4]
 801e070:	4630      	mov	r0, r6
 801e072:	f000 f82f 	bl	801e0d4 <__malloc_unlock>
 801e076:	f104 000b 	add.w	r0, r4, #11
 801e07a:	1d23      	adds	r3, r4, #4
 801e07c:	f020 0007 	bic.w	r0, r0, #7
 801e080:	1ac2      	subs	r2, r0, r3
 801e082:	bf1c      	itt	ne
 801e084:	1a1b      	subne	r3, r3, r0
 801e086:	50a3      	strne	r3, [r4, r2]
 801e088:	e7af      	b.n	801dfea <_malloc_r+0x22>
 801e08a:	6862      	ldr	r2, [r4, #4]
 801e08c:	42a3      	cmp	r3, r4
 801e08e:	bf0c      	ite	eq
 801e090:	f8c8 2000 	streq.w	r2, [r8]
 801e094:	605a      	strne	r2, [r3, #4]
 801e096:	e7eb      	b.n	801e070 <_malloc_r+0xa8>
 801e098:	4623      	mov	r3, r4
 801e09a:	6864      	ldr	r4, [r4, #4]
 801e09c:	e7ae      	b.n	801dffc <_malloc_r+0x34>
 801e09e:	463c      	mov	r4, r7
 801e0a0:	687f      	ldr	r7, [r7, #4]
 801e0a2:	e7b6      	b.n	801e012 <_malloc_r+0x4a>
 801e0a4:	461a      	mov	r2, r3
 801e0a6:	685b      	ldr	r3, [r3, #4]
 801e0a8:	42a3      	cmp	r3, r4
 801e0aa:	d1fb      	bne.n	801e0a4 <_malloc_r+0xdc>
 801e0ac:	2300      	movs	r3, #0
 801e0ae:	6053      	str	r3, [r2, #4]
 801e0b0:	e7de      	b.n	801e070 <_malloc_r+0xa8>
 801e0b2:	230c      	movs	r3, #12
 801e0b4:	6033      	str	r3, [r6, #0]
 801e0b6:	4630      	mov	r0, r6
 801e0b8:	f000 f80c 	bl	801e0d4 <__malloc_unlock>
 801e0bc:	e794      	b.n	801dfe8 <_malloc_r+0x20>
 801e0be:	6005      	str	r5, [r0, #0]
 801e0c0:	e7d6      	b.n	801e070 <_malloc_r+0xa8>
 801e0c2:	bf00      	nop
 801e0c4:	2000256c 	.word	0x2000256c

0801e0c8 <__malloc_lock>:
 801e0c8:	4801      	ldr	r0, [pc, #4]	@ (801e0d0 <__malloc_lock+0x8>)
 801e0ca:	f7ff b8a6 	b.w	801d21a <__retarget_lock_acquire_recursive>
 801e0ce:	bf00      	nop
 801e0d0:	20002564 	.word	0x20002564

0801e0d4 <__malloc_unlock>:
 801e0d4:	4801      	ldr	r0, [pc, #4]	@ (801e0dc <__malloc_unlock+0x8>)
 801e0d6:	f7ff b8a1 	b.w	801d21c <__retarget_lock_release_recursive>
 801e0da:	bf00      	nop
 801e0dc:	20002564 	.word	0x20002564

0801e0e0 <_Balloc>:
 801e0e0:	b570      	push	{r4, r5, r6, lr}
 801e0e2:	69c6      	ldr	r6, [r0, #28]
 801e0e4:	4604      	mov	r4, r0
 801e0e6:	460d      	mov	r5, r1
 801e0e8:	b976      	cbnz	r6, 801e108 <_Balloc+0x28>
 801e0ea:	2010      	movs	r0, #16
 801e0ec:	f7ff ff42 	bl	801df74 <malloc>
 801e0f0:	4602      	mov	r2, r0
 801e0f2:	61e0      	str	r0, [r4, #28]
 801e0f4:	b920      	cbnz	r0, 801e100 <_Balloc+0x20>
 801e0f6:	4b18      	ldr	r3, [pc, #96]	@ (801e158 <_Balloc+0x78>)
 801e0f8:	4818      	ldr	r0, [pc, #96]	@ (801e15c <_Balloc+0x7c>)
 801e0fa:	216b      	movs	r1, #107	@ 0x6b
 801e0fc:	f000 fdec 	bl	801ecd8 <__assert_func>
 801e100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e104:	6006      	str	r6, [r0, #0]
 801e106:	60c6      	str	r6, [r0, #12]
 801e108:	69e6      	ldr	r6, [r4, #28]
 801e10a:	68f3      	ldr	r3, [r6, #12]
 801e10c:	b183      	cbz	r3, 801e130 <_Balloc+0x50>
 801e10e:	69e3      	ldr	r3, [r4, #28]
 801e110:	68db      	ldr	r3, [r3, #12]
 801e112:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e116:	b9b8      	cbnz	r0, 801e148 <_Balloc+0x68>
 801e118:	2101      	movs	r1, #1
 801e11a:	fa01 f605 	lsl.w	r6, r1, r5
 801e11e:	1d72      	adds	r2, r6, #5
 801e120:	0092      	lsls	r2, r2, #2
 801e122:	4620      	mov	r0, r4
 801e124:	f000 fdf6 	bl	801ed14 <_calloc_r>
 801e128:	b160      	cbz	r0, 801e144 <_Balloc+0x64>
 801e12a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e12e:	e00e      	b.n	801e14e <_Balloc+0x6e>
 801e130:	2221      	movs	r2, #33	@ 0x21
 801e132:	2104      	movs	r1, #4
 801e134:	4620      	mov	r0, r4
 801e136:	f000 fded 	bl	801ed14 <_calloc_r>
 801e13a:	69e3      	ldr	r3, [r4, #28]
 801e13c:	60f0      	str	r0, [r6, #12]
 801e13e:	68db      	ldr	r3, [r3, #12]
 801e140:	2b00      	cmp	r3, #0
 801e142:	d1e4      	bne.n	801e10e <_Balloc+0x2e>
 801e144:	2000      	movs	r0, #0
 801e146:	bd70      	pop	{r4, r5, r6, pc}
 801e148:	6802      	ldr	r2, [r0, #0]
 801e14a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e14e:	2300      	movs	r3, #0
 801e150:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e154:	e7f7      	b.n	801e146 <_Balloc+0x66>
 801e156:	bf00      	nop
 801e158:	08020065 	.word	0x08020065
 801e15c:	080200e5 	.word	0x080200e5

0801e160 <_Bfree>:
 801e160:	b570      	push	{r4, r5, r6, lr}
 801e162:	69c6      	ldr	r6, [r0, #28]
 801e164:	4605      	mov	r5, r0
 801e166:	460c      	mov	r4, r1
 801e168:	b976      	cbnz	r6, 801e188 <_Bfree+0x28>
 801e16a:	2010      	movs	r0, #16
 801e16c:	f7ff ff02 	bl	801df74 <malloc>
 801e170:	4602      	mov	r2, r0
 801e172:	61e8      	str	r0, [r5, #28]
 801e174:	b920      	cbnz	r0, 801e180 <_Bfree+0x20>
 801e176:	4b09      	ldr	r3, [pc, #36]	@ (801e19c <_Bfree+0x3c>)
 801e178:	4809      	ldr	r0, [pc, #36]	@ (801e1a0 <_Bfree+0x40>)
 801e17a:	218f      	movs	r1, #143	@ 0x8f
 801e17c:	f000 fdac 	bl	801ecd8 <__assert_func>
 801e180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e184:	6006      	str	r6, [r0, #0]
 801e186:	60c6      	str	r6, [r0, #12]
 801e188:	b13c      	cbz	r4, 801e19a <_Bfree+0x3a>
 801e18a:	69eb      	ldr	r3, [r5, #28]
 801e18c:	6862      	ldr	r2, [r4, #4]
 801e18e:	68db      	ldr	r3, [r3, #12]
 801e190:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e194:	6021      	str	r1, [r4, #0]
 801e196:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e19a:	bd70      	pop	{r4, r5, r6, pc}
 801e19c:	08020065 	.word	0x08020065
 801e1a0:	080200e5 	.word	0x080200e5

0801e1a4 <__multadd>:
 801e1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1a8:	690d      	ldr	r5, [r1, #16]
 801e1aa:	4607      	mov	r7, r0
 801e1ac:	460c      	mov	r4, r1
 801e1ae:	461e      	mov	r6, r3
 801e1b0:	f101 0c14 	add.w	ip, r1, #20
 801e1b4:	2000      	movs	r0, #0
 801e1b6:	f8dc 3000 	ldr.w	r3, [ip]
 801e1ba:	b299      	uxth	r1, r3
 801e1bc:	fb02 6101 	mla	r1, r2, r1, r6
 801e1c0:	0c1e      	lsrs	r6, r3, #16
 801e1c2:	0c0b      	lsrs	r3, r1, #16
 801e1c4:	fb02 3306 	mla	r3, r2, r6, r3
 801e1c8:	b289      	uxth	r1, r1
 801e1ca:	3001      	adds	r0, #1
 801e1cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e1d0:	4285      	cmp	r5, r0
 801e1d2:	f84c 1b04 	str.w	r1, [ip], #4
 801e1d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e1da:	dcec      	bgt.n	801e1b6 <__multadd+0x12>
 801e1dc:	b30e      	cbz	r6, 801e222 <__multadd+0x7e>
 801e1de:	68a3      	ldr	r3, [r4, #8]
 801e1e0:	42ab      	cmp	r3, r5
 801e1e2:	dc19      	bgt.n	801e218 <__multadd+0x74>
 801e1e4:	6861      	ldr	r1, [r4, #4]
 801e1e6:	4638      	mov	r0, r7
 801e1e8:	3101      	adds	r1, #1
 801e1ea:	f7ff ff79 	bl	801e0e0 <_Balloc>
 801e1ee:	4680      	mov	r8, r0
 801e1f0:	b928      	cbnz	r0, 801e1fe <__multadd+0x5a>
 801e1f2:	4602      	mov	r2, r0
 801e1f4:	4b0c      	ldr	r3, [pc, #48]	@ (801e228 <__multadd+0x84>)
 801e1f6:	480d      	ldr	r0, [pc, #52]	@ (801e22c <__multadd+0x88>)
 801e1f8:	21ba      	movs	r1, #186	@ 0xba
 801e1fa:	f000 fd6d 	bl	801ecd8 <__assert_func>
 801e1fe:	6922      	ldr	r2, [r4, #16]
 801e200:	3202      	adds	r2, #2
 801e202:	f104 010c 	add.w	r1, r4, #12
 801e206:	0092      	lsls	r2, r2, #2
 801e208:	300c      	adds	r0, #12
 801e20a:	f7ff f808 	bl	801d21e <memcpy>
 801e20e:	4621      	mov	r1, r4
 801e210:	4638      	mov	r0, r7
 801e212:	f7ff ffa5 	bl	801e160 <_Bfree>
 801e216:	4644      	mov	r4, r8
 801e218:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e21c:	3501      	adds	r5, #1
 801e21e:	615e      	str	r6, [r3, #20]
 801e220:	6125      	str	r5, [r4, #16]
 801e222:	4620      	mov	r0, r4
 801e224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e228:	080200d4 	.word	0x080200d4
 801e22c:	080200e5 	.word	0x080200e5

0801e230 <__hi0bits>:
 801e230:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e234:	4603      	mov	r3, r0
 801e236:	bf36      	itet	cc
 801e238:	0403      	lslcc	r3, r0, #16
 801e23a:	2000      	movcs	r0, #0
 801e23c:	2010      	movcc	r0, #16
 801e23e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e242:	bf3c      	itt	cc
 801e244:	021b      	lslcc	r3, r3, #8
 801e246:	3008      	addcc	r0, #8
 801e248:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e24c:	bf3c      	itt	cc
 801e24e:	011b      	lslcc	r3, r3, #4
 801e250:	3004      	addcc	r0, #4
 801e252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e256:	bf3c      	itt	cc
 801e258:	009b      	lslcc	r3, r3, #2
 801e25a:	3002      	addcc	r0, #2
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	db05      	blt.n	801e26c <__hi0bits+0x3c>
 801e260:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e264:	f100 0001 	add.w	r0, r0, #1
 801e268:	bf08      	it	eq
 801e26a:	2020      	moveq	r0, #32
 801e26c:	4770      	bx	lr

0801e26e <__lo0bits>:
 801e26e:	6803      	ldr	r3, [r0, #0]
 801e270:	4602      	mov	r2, r0
 801e272:	f013 0007 	ands.w	r0, r3, #7
 801e276:	d00b      	beq.n	801e290 <__lo0bits+0x22>
 801e278:	07d9      	lsls	r1, r3, #31
 801e27a:	d421      	bmi.n	801e2c0 <__lo0bits+0x52>
 801e27c:	0798      	lsls	r0, r3, #30
 801e27e:	bf49      	itett	mi
 801e280:	085b      	lsrmi	r3, r3, #1
 801e282:	089b      	lsrpl	r3, r3, #2
 801e284:	2001      	movmi	r0, #1
 801e286:	6013      	strmi	r3, [r2, #0]
 801e288:	bf5c      	itt	pl
 801e28a:	6013      	strpl	r3, [r2, #0]
 801e28c:	2002      	movpl	r0, #2
 801e28e:	4770      	bx	lr
 801e290:	b299      	uxth	r1, r3
 801e292:	b909      	cbnz	r1, 801e298 <__lo0bits+0x2a>
 801e294:	0c1b      	lsrs	r3, r3, #16
 801e296:	2010      	movs	r0, #16
 801e298:	b2d9      	uxtb	r1, r3
 801e29a:	b909      	cbnz	r1, 801e2a0 <__lo0bits+0x32>
 801e29c:	3008      	adds	r0, #8
 801e29e:	0a1b      	lsrs	r3, r3, #8
 801e2a0:	0719      	lsls	r1, r3, #28
 801e2a2:	bf04      	itt	eq
 801e2a4:	091b      	lsreq	r3, r3, #4
 801e2a6:	3004      	addeq	r0, #4
 801e2a8:	0799      	lsls	r1, r3, #30
 801e2aa:	bf04      	itt	eq
 801e2ac:	089b      	lsreq	r3, r3, #2
 801e2ae:	3002      	addeq	r0, #2
 801e2b0:	07d9      	lsls	r1, r3, #31
 801e2b2:	d403      	bmi.n	801e2bc <__lo0bits+0x4e>
 801e2b4:	085b      	lsrs	r3, r3, #1
 801e2b6:	f100 0001 	add.w	r0, r0, #1
 801e2ba:	d003      	beq.n	801e2c4 <__lo0bits+0x56>
 801e2bc:	6013      	str	r3, [r2, #0]
 801e2be:	4770      	bx	lr
 801e2c0:	2000      	movs	r0, #0
 801e2c2:	4770      	bx	lr
 801e2c4:	2020      	movs	r0, #32
 801e2c6:	4770      	bx	lr

0801e2c8 <__i2b>:
 801e2c8:	b510      	push	{r4, lr}
 801e2ca:	460c      	mov	r4, r1
 801e2cc:	2101      	movs	r1, #1
 801e2ce:	f7ff ff07 	bl	801e0e0 <_Balloc>
 801e2d2:	4602      	mov	r2, r0
 801e2d4:	b928      	cbnz	r0, 801e2e2 <__i2b+0x1a>
 801e2d6:	4b05      	ldr	r3, [pc, #20]	@ (801e2ec <__i2b+0x24>)
 801e2d8:	4805      	ldr	r0, [pc, #20]	@ (801e2f0 <__i2b+0x28>)
 801e2da:	f240 1145 	movw	r1, #325	@ 0x145
 801e2de:	f000 fcfb 	bl	801ecd8 <__assert_func>
 801e2e2:	2301      	movs	r3, #1
 801e2e4:	6144      	str	r4, [r0, #20]
 801e2e6:	6103      	str	r3, [r0, #16]
 801e2e8:	bd10      	pop	{r4, pc}
 801e2ea:	bf00      	nop
 801e2ec:	080200d4 	.word	0x080200d4
 801e2f0:	080200e5 	.word	0x080200e5

0801e2f4 <__multiply>:
 801e2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2f8:	4614      	mov	r4, r2
 801e2fa:	690a      	ldr	r2, [r1, #16]
 801e2fc:	6923      	ldr	r3, [r4, #16]
 801e2fe:	429a      	cmp	r2, r3
 801e300:	bfa8      	it	ge
 801e302:	4623      	movge	r3, r4
 801e304:	460f      	mov	r7, r1
 801e306:	bfa4      	itt	ge
 801e308:	460c      	movge	r4, r1
 801e30a:	461f      	movge	r7, r3
 801e30c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801e310:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801e314:	68a3      	ldr	r3, [r4, #8]
 801e316:	6861      	ldr	r1, [r4, #4]
 801e318:	eb0a 0609 	add.w	r6, sl, r9
 801e31c:	42b3      	cmp	r3, r6
 801e31e:	b085      	sub	sp, #20
 801e320:	bfb8      	it	lt
 801e322:	3101      	addlt	r1, #1
 801e324:	f7ff fedc 	bl	801e0e0 <_Balloc>
 801e328:	b930      	cbnz	r0, 801e338 <__multiply+0x44>
 801e32a:	4602      	mov	r2, r0
 801e32c:	4b44      	ldr	r3, [pc, #272]	@ (801e440 <__multiply+0x14c>)
 801e32e:	4845      	ldr	r0, [pc, #276]	@ (801e444 <__multiply+0x150>)
 801e330:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e334:	f000 fcd0 	bl	801ecd8 <__assert_func>
 801e338:	f100 0514 	add.w	r5, r0, #20
 801e33c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e340:	462b      	mov	r3, r5
 801e342:	2200      	movs	r2, #0
 801e344:	4543      	cmp	r3, r8
 801e346:	d321      	bcc.n	801e38c <__multiply+0x98>
 801e348:	f107 0114 	add.w	r1, r7, #20
 801e34c:	f104 0214 	add.w	r2, r4, #20
 801e350:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801e354:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801e358:	9302      	str	r3, [sp, #8]
 801e35a:	1b13      	subs	r3, r2, r4
 801e35c:	3b15      	subs	r3, #21
 801e35e:	f023 0303 	bic.w	r3, r3, #3
 801e362:	3304      	adds	r3, #4
 801e364:	f104 0715 	add.w	r7, r4, #21
 801e368:	42ba      	cmp	r2, r7
 801e36a:	bf38      	it	cc
 801e36c:	2304      	movcc	r3, #4
 801e36e:	9301      	str	r3, [sp, #4]
 801e370:	9b02      	ldr	r3, [sp, #8]
 801e372:	9103      	str	r1, [sp, #12]
 801e374:	428b      	cmp	r3, r1
 801e376:	d80c      	bhi.n	801e392 <__multiply+0x9e>
 801e378:	2e00      	cmp	r6, #0
 801e37a:	dd03      	ble.n	801e384 <__multiply+0x90>
 801e37c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e380:	2b00      	cmp	r3, #0
 801e382:	d05a      	beq.n	801e43a <__multiply+0x146>
 801e384:	6106      	str	r6, [r0, #16]
 801e386:	b005      	add	sp, #20
 801e388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e38c:	f843 2b04 	str.w	r2, [r3], #4
 801e390:	e7d8      	b.n	801e344 <__multiply+0x50>
 801e392:	f8b1 a000 	ldrh.w	sl, [r1]
 801e396:	f1ba 0f00 	cmp.w	sl, #0
 801e39a:	d023      	beq.n	801e3e4 <__multiply+0xf0>
 801e39c:	f104 0e14 	add.w	lr, r4, #20
 801e3a0:	46a9      	mov	r9, r5
 801e3a2:	f04f 0c00 	mov.w	ip, #0
 801e3a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e3aa:	f8d9 3000 	ldr.w	r3, [r9]
 801e3ae:	fa1f fb87 	uxth.w	fp, r7
 801e3b2:	b29b      	uxth	r3, r3
 801e3b4:	fb0a 330b 	mla	r3, sl, fp, r3
 801e3b8:	4463      	add	r3, ip
 801e3ba:	f8d9 c000 	ldr.w	ip, [r9]
 801e3be:	0c3f      	lsrs	r7, r7, #16
 801e3c0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e3c4:	fb0a c707 	mla	r7, sl, r7, ip
 801e3c8:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801e3cc:	b29b      	uxth	r3, r3
 801e3ce:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e3d2:	4572      	cmp	r2, lr
 801e3d4:	f849 3b04 	str.w	r3, [r9], #4
 801e3d8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e3dc:	d8e3      	bhi.n	801e3a6 <__multiply+0xb2>
 801e3de:	9b01      	ldr	r3, [sp, #4]
 801e3e0:	f845 c003 	str.w	ip, [r5, r3]
 801e3e4:	9b03      	ldr	r3, [sp, #12]
 801e3e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e3ea:	3104      	adds	r1, #4
 801e3ec:	f1b9 0f00 	cmp.w	r9, #0
 801e3f0:	d021      	beq.n	801e436 <__multiply+0x142>
 801e3f2:	682b      	ldr	r3, [r5, #0]
 801e3f4:	f104 0c14 	add.w	ip, r4, #20
 801e3f8:	46ae      	mov	lr, r5
 801e3fa:	f04f 0a00 	mov.w	sl, #0
 801e3fe:	f8bc b000 	ldrh.w	fp, [ip]
 801e402:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801e406:	fb09 770b 	mla	r7, r9, fp, r7
 801e40a:	4457      	add	r7, sl
 801e40c:	b29b      	uxth	r3, r3
 801e40e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e412:	f84e 3b04 	str.w	r3, [lr], #4
 801e416:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e41a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e41e:	f8be 3000 	ldrh.w	r3, [lr]
 801e422:	fb09 330a 	mla	r3, r9, sl, r3
 801e426:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801e42a:	4562      	cmp	r2, ip
 801e42c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e430:	d8e5      	bhi.n	801e3fe <__multiply+0x10a>
 801e432:	9f01      	ldr	r7, [sp, #4]
 801e434:	51eb      	str	r3, [r5, r7]
 801e436:	3504      	adds	r5, #4
 801e438:	e79a      	b.n	801e370 <__multiply+0x7c>
 801e43a:	3e01      	subs	r6, #1
 801e43c:	e79c      	b.n	801e378 <__multiply+0x84>
 801e43e:	bf00      	nop
 801e440:	080200d4 	.word	0x080200d4
 801e444:	080200e5 	.word	0x080200e5

0801e448 <__pow5mult>:
 801e448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e44c:	4615      	mov	r5, r2
 801e44e:	f012 0203 	ands.w	r2, r2, #3
 801e452:	4607      	mov	r7, r0
 801e454:	460e      	mov	r6, r1
 801e456:	d007      	beq.n	801e468 <__pow5mult+0x20>
 801e458:	4c25      	ldr	r4, [pc, #148]	@ (801e4f0 <__pow5mult+0xa8>)
 801e45a:	3a01      	subs	r2, #1
 801e45c:	2300      	movs	r3, #0
 801e45e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e462:	f7ff fe9f 	bl	801e1a4 <__multadd>
 801e466:	4606      	mov	r6, r0
 801e468:	10ad      	asrs	r5, r5, #2
 801e46a:	d03d      	beq.n	801e4e8 <__pow5mult+0xa0>
 801e46c:	69fc      	ldr	r4, [r7, #28]
 801e46e:	b97c      	cbnz	r4, 801e490 <__pow5mult+0x48>
 801e470:	2010      	movs	r0, #16
 801e472:	f7ff fd7f 	bl	801df74 <malloc>
 801e476:	4602      	mov	r2, r0
 801e478:	61f8      	str	r0, [r7, #28]
 801e47a:	b928      	cbnz	r0, 801e488 <__pow5mult+0x40>
 801e47c:	4b1d      	ldr	r3, [pc, #116]	@ (801e4f4 <__pow5mult+0xac>)
 801e47e:	481e      	ldr	r0, [pc, #120]	@ (801e4f8 <__pow5mult+0xb0>)
 801e480:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801e484:	f000 fc28 	bl	801ecd8 <__assert_func>
 801e488:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e48c:	6004      	str	r4, [r0, #0]
 801e48e:	60c4      	str	r4, [r0, #12]
 801e490:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801e494:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e498:	b94c      	cbnz	r4, 801e4ae <__pow5mult+0x66>
 801e49a:	f240 2171 	movw	r1, #625	@ 0x271
 801e49e:	4638      	mov	r0, r7
 801e4a0:	f7ff ff12 	bl	801e2c8 <__i2b>
 801e4a4:	2300      	movs	r3, #0
 801e4a6:	f8c8 0008 	str.w	r0, [r8, #8]
 801e4aa:	4604      	mov	r4, r0
 801e4ac:	6003      	str	r3, [r0, #0]
 801e4ae:	f04f 0900 	mov.w	r9, #0
 801e4b2:	07eb      	lsls	r3, r5, #31
 801e4b4:	d50a      	bpl.n	801e4cc <__pow5mult+0x84>
 801e4b6:	4631      	mov	r1, r6
 801e4b8:	4622      	mov	r2, r4
 801e4ba:	4638      	mov	r0, r7
 801e4bc:	f7ff ff1a 	bl	801e2f4 <__multiply>
 801e4c0:	4631      	mov	r1, r6
 801e4c2:	4680      	mov	r8, r0
 801e4c4:	4638      	mov	r0, r7
 801e4c6:	f7ff fe4b 	bl	801e160 <_Bfree>
 801e4ca:	4646      	mov	r6, r8
 801e4cc:	106d      	asrs	r5, r5, #1
 801e4ce:	d00b      	beq.n	801e4e8 <__pow5mult+0xa0>
 801e4d0:	6820      	ldr	r0, [r4, #0]
 801e4d2:	b938      	cbnz	r0, 801e4e4 <__pow5mult+0x9c>
 801e4d4:	4622      	mov	r2, r4
 801e4d6:	4621      	mov	r1, r4
 801e4d8:	4638      	mov	r0, r7
 801e4da:	f7ff ff0b 	bl	801e2f4 <__multiply>
 801e4de:	6020      	str	r0, [r4, #0]
 801e4e0:	f8c0 9000 	str.w	r9, [r0]
 801e4e4:	4604      	mov	r4, r0
 801e4e6:	e7e4      	b.n	801e4b2 <__pow5mult+0x6a>
 801e4e8:	4630      	mov	r0, r6
 801e4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e4ee:	bf00      	nop
 801e4f0:	08020140 	.word	0x08020140
 801e4f4:	08020065 	.word	0x08020065
 801e4f8:	080200e5 	.word	0x080200e5

0801e4fc <__lshift>:
 801e4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e500:	460c      	mov	r4, r1
 801e502:	6849      	ldr	r1, [r1, #4]
 801e504:	6923      	ldr	r3, [r4, #16]
 801e506:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e50a:	68a3      	ldr	r3, [r4, #8]
 801e50c:	4607      	mov	r7, r0
 801e50e:	4691      	mov	r9, r2
 801e510:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e514:	f108 0601 	add.w	r6, r8, #1
 801e518:	42b3      	cmp	r3, r6
 801e51a:	db0b      	blt.n	801e534 <__lshift+0x38>
 801e51c:	4638      	mov	r0, r7
 801e51e:	f7ff fddf 	bl	801e0e0 <_Balloc>
 801e522:	4605      	mov	r5, r0
 801e524:	b948      	cbnz	r0, 801e53a <__lshift+0x3e>
 801e526:	4602      	mov	r2, r0
 801e528:	4b28      	ldr	r3, [pc, #160]	@ (801e5cc <__lshift+0xd0>)
 801e52a:	4829      	ldr	r0, [pc, #164]	@ (801e5d0 <__lshift+0xd4>)
 801e52c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801e530:	f000 fbd2 	bl	801ecd8 <__assert_func>
 801e534:	3101      	adds	r1, #1
 801e536:	005b      	lsls	r3, r3, #1
 801e538:	e7ee      	b.n	801e518 <__lshift+0x1c>
 801e53a:	2300      	movs	r3, #0
 801e53c:	f100 0114 	add.w	r1, r0, #20
 801e540:	f100 0210 	add.w	r2, r0, #16
 801e544:	4618      	mov	r0, r3
 801e546:	4553      	cmp	r3, sl
 801e548:	db33      	blt.n	801e5b2 <__lshift+0xb6>
 801e54a:	6920      	ldr	r0, [r4, #16]
 801e54c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e550:	f104 0314 	add.w	r3, r4, #20
 801e554:	f019 091f 	ands.w	r9, r9, #31
 801e558:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e55c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e560:	d02b      	beq.n	801e5ba <__lshift+0xbe>
 801e562:	f1c9 0e20 	rsb	lr, r9, #32
 801e566:	468a      	mov	sl, r1
 801e568:	2200      	movs	r2, #0
 801e56a:	6818      	ldr	r0, [r3, #0]
 801e56c:	fa00 f009 	lsl.w	r0, r0, r9
 801e570:	4310      	orrs	r0, r2
 801e572:	f84a 0b04 	str.w	r0, [sl], #4
 801e576:	f853 2b04 	ldr.w	r2, [r3], #4
 801e57a:	459c      	cmp	ip, r3
 801e57c:	fa22 f20e 	lsr.w	r2, r2, lr
 801e580:	d8f3      	bhi.n	801e56a <__lshift+0x6e>
 801e582:	ebac 0304 	sub.w	r3, ip, r4
 801e586:	3b15      	subs	r3, #21
 801e588:	f023 0303 	bic.w	r3, r3, #3
 801e58c:	3304      	adds	r3, #4
 801e58e:	f104 0015 	add.w	r0, r4, #21
 801e592:	4584      	cmp	ip, r0
 801e594:	bf38      	it	cc
 801e596:	2304      	movcc	r3, #4
 801e598:	50ca      	str	r2, [r1, r3]
 801e59a:	b10a      	cbz	r2, 801e5a0 <__lshift+0xa4>
 801e59c:	f108 0602 	add.w	r6, r8, #2
 801e5a0:	3e01      	subs	r6, #1
 801e5a2:	4638      	mov	r0, r7
 801e5a4:	612e      	str	r6, [r5, #16]
 801e5a6:	4621      	mov	r1, r4
 801e5a8:	f7ff fdda 	bl	801e160 <_Bfree>
 801e5ac:	4628      	mov	r0, r5
 801e5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e5b2:	f842 0f04 	str.w	r0, [r2, #4]!
 801e5b6:	3301      	adds	r3, #1
 801e5b8:	e7c5      	b.n	801e546 <__lshift+0x4a>
 801e5ba:	3904      	subs	r1, #4
 801e5bc:	f853 2b04 	ldr.w	r2, [r3], #4
 801e5c0:	f841 2f04 	str.w	r2, [r1, #4]!
 801e5c4:	459c      	cmp	ip, r3
 801e5c6:	d8f9      	bhi.n	801e5bc <__lshift+0xc0>
 801e5c8:	e7ea      	b.n	801e5a0 <__lshift+0xa4>
 801e5ca:	bf00      	nop
 801e5cc:	080200d4 	.word	0x080200d4
 801e5d0:	080200e5 	.word	0x080200e5

0801e5d4 <__mcmp>:
 801e5d4:	690a      	ldr	r2, [r1, #16]
 801e5d6:	4603      	mov	r3, r0
 801e5d8:	6900      	ldr	r0, [r0, #16]
 801e5da:	1a80      	subs	r0, r0, r2
 801e5dc:	b530      	push	{r4, r5, lr}
 801e5de:	d10e      	bne.n	801e5fe <__mcmp+0x2a>
 801e5e0:	3314      	adds	r3, #20
 801e5e2:	3114      	adds	r1, #20
 801e5e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e5e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e5ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e5f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e5f4:	4295      	cmp	r5, r2
 801e5f6:	d003      	beq.n	801e600 <__mcmp+0x2c>
 801e5f8:	d205      	bcs.n	801e606 <__mcmp+0x32>
 801e5fa:	f04f 30ff 	mov.w	r0, #4294967295
 801e5fe:	bd30      	pop	{r4, r5, pc}
 801e600:	42a3      	cmp	r3, r4
 801e602:	d3f3      	bcc.n	801e5ec <__mcmp+0x18>
 801e604:	e7fb      	b.n	801e5fe <__mcmp+0x2a>
 801e606:	2001      	movs	r0, #1
 801e608:	e7f9      	b.n	801e5fe <__mcmp+0x2a>
	...

0801e60c <__mdiff>:
 801e60c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e610:	4689      	mov	r9, r1
 801e612:	4606      	mov	r6, r0
 801e614:	4611      	mov	r1, r2
 801e616:	4648      	mov	r0, r9
 801e618:	4614      	mov	r4, r2
 801e61a:	f7ff ffdb 	bl	801e5d4 <__mcmp>
 801e61e:	1e05      	subs	r5, r0, #0
 801e620:	d112      	bne.n	801e648 <__mdiff+0x3c>
 801e622:	4629      	mov	r1, r5
 801e624:	4630      	mov	r0, r6
 801e626:	f7ff fd5b 	bl	801e0e0 <_Balloc>
 801e62a:	4602      	mov	r2, r0
 801e62c:	b928      	cbnz	r0, 801e63a <__mdiff+0x2e>
 801e62e:	4b3e      	ldr	r3, [pc, #248]	@ (801e728 <__mdiff+0x11c>)
 801e630:	f240 2137 	movw	r1, #567	@ 0x237
 801e634:	483d      	ldr	r0, [pc, #244]	@ (801e72c <__mdiff+0x120>)
 801e636:	f000 fb4f 	bl	801ecd8 <__assert_func>
 801e63a:	2301      	movs	r3, #1
 801e63c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e640:	4610      	mov	r0, r2
 801e642:	b003      	add	sp, #12
 801e644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e648:	bfbc      	itt	lt
 801e64a:	464b      	movlt	r3, r9
 801e64c:	46a1      	movlt	r9, r4
 801e64e:	4630      	mov	r0, r6
 801e650:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e654:	bfba      	itte	lt
 801e656:	461c      	movlt	r4, r3
 801e658:	2501      	movlt	r5, #1
 801e65a:	2500      	movge	r5, #0
 801e65c:	f7ff fd40 	bl	801e0e0 <_Balloc>
 801e660:	4602      	mov	r2, r0
 801e662:	b918      	cbnz	r0, 801e66c <__mdiff+0x60>
 801e664:	4b30      	ldr	r3, [pc, #192]	@ (801e728 <__mdiff+0x11c>)
 801e666:	f240 2145 	movw	r1, #581	@ 0x245
 801e66a:	e7e3      	b.n	801e634 <__mdiff+0x28>
 801e66c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801e670:	6926      	ldr	r6, [r4, #16]
 801e672:	60c5      	str	r5, [r0, #12]
 801e674:	f109 0310 	add.w	r3, r9, #16
 801e678:	f109 0514 	add.w	r5, r9, #20
 801e67c:	f104 0e14 	add.w	lr, r4, #20
 801e680:	f100 0b14 	add.w	fp, r0, #20
 801e684:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801e688:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801e68c:	9301      	str	r3, [sp, #4]
 801e68e:	46d9      	mov	r9, fp
 801e690:	f04f 0c00 	mov.w	ip, #0
 801e694:	9b01      	ldr	r3, [sp, #4]
 801e696:	f85e 0b04 	ldr.w	r0, [lr], #4
 801e69a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801e69e:	9301      	str	r3, [sp, #4]
 801e6a0:	b281      	uxth	r1, r0
 801e6a2:	fa1f f38a 	uxth.w	r3, sl
 801e6a6:	1a5b      	subs	r3, r3, r1
 801e6a8:	0c00      	lsrs	r0, r0, #16
 801e6aa:	4463      	add	r3, ip
 801e6ac:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801e6b0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801e6b4:	b29b      	uxth	r3, r3
 801e6b6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801e6ba:	4576      	cmp	r6, lr
 801e6bc:	f849 3b04 	str.w	r3, [r9], #4
 801e6c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e6c4:	d8e6      	bhi.n	801e694 <__mdiff+0x88>
 801e6c6:	1b33      	subs	r3, r6, r4
 801e6c8:	3b15      	subs	r3, #21
 801e6ca:	f023 0303 	bic.w	r3, r3, #3
 801e6ce:	3415      	adds	r4, #21
 801e6d0:	3304      	adds	r3, #4
 801e6d2:	42a6      	cmp	r6, r4
 801e6d4:	bf38      	it	cc
 801e6d6:	2304      	movcc	r3, #4
 801e6d8:	441d      	add	r5, r3
 801e6da:	445b      	add	r3, fp
 801e6dc:	461e      	mov	r6, r3
 801e6de:	462c      	mov	r4, r5
 801e6e0:	4544      	cmp	r4, r8
 801e6e2:	d30e      	bcc.n	801e702 <__mdiff+0xf6>
 801e6e4:	f108 0103 	add.w	r1, r8, #3
 801e6e8:	1b49      	subs	r1, r1, r5
 801e6ea:	f021 0103 	bic.w	r1, r1, #3
 801e6ee:	3d03      	subs	r5, #3
 801e6f0:	45a8      	cmp	r8, r5
 801e6f2:	bf38      	it	cc
 801e6f4:	2100      	movcc	r1, #0
 801e6f6:	440b      	add	r3, r1
 801e6f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e6fc:	b191      	cbz	r1, 801e724 <__mdiff+0x118>
 801e6fe:	6117      	str	r7, [r2, #16]
 801e700:	e79e      	b.n	801e640 <__mdiff+0x34>
 801e702:	f854 1b04 	ldr.w	r1, [r4], #4
 801e706:	46e6      	mov	lr, ip
 801e708:	0c08      	lsrs	r0, r1, #16
 801e70a:	fa1c fc81 	uxtah	ip, ip, r1
 801e70e:	4471      	add	r1, lr
 801e710:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801e714:	b289      	uxth	r1, r1
 801e716:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801e71a:	f846 1b04 	str.w	r1, [r6], #4
 801e71e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e722:	e7dd      	b.n	801e6e0 <__mdiff+0xd4>
 801e724:	3f01      	subs	r7, #1
 801e726:	e7e7      	b.n	801e6f8 <__mdiff+0xec>
 801e728:	080200d4 	.word	0x080200d4
 801e72c:	080200e5 	.word	0x080200e5

0801e730 <__d2b>:
 801e730:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 801e734:	2101      	movs	r1, #1
 801e736:	9e08      	ldr	r6, [sp, #32]
 801e738:	4690      	mov	r8, r2
 801e73a:	4699      	mov	r9, r3
 801e73c:	f7ff fcd0 	bl	801e0e0 <_Balloc>
 801e740:	4604      	mov	r4, r0
 801e742:	b930      	cbnz	r0, 801e752 <__d2b+0x22>
 801e744:	4602      	mov	r2, r0
 801e746:	4b24      	ldr	r3, [pc, #144]	@ (801e7d8 <__d2b+0xa8>)
 801e748:	4824      	ldr	r0, [pc, #144]	@ (801e7dc <__d2b+0xac>)
 801e74a:	f240 310f 	movw	r1, #783	@ 0x30f
 801e74e:	f000 fac3 	bl	801ecd8 <__assert_func>
 801e752:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e756:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e75a:	b10d      	cbz	r5, 801e760 <__d2b+0x30>
 801e75c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e760:	9301      	str	r3, [sp, #4]
 801e762:	f1b8 0300 	subs.w	r3, r8, #0
 801e766:	d024      	beq.n	801e7b2 <__d2b+0x82>
 801e768:	4668      	mov	r0, sp
 801e76a:	9300      	str	r3, [sp, #0]
 801e76c:	f7ff fd7f 	bl	801e26e <__lo0bits>
 801e770:	e9dd 1200 	ldrd	r1, r2, [sp]
 801e774:	b1d8      	cbz	r0, 801e7ae <__d2b+0x7e>
 801e776:	f1c0 0320 	rsb	r3, r0, #32
 801e77a:	fa02 f303 	lsl.w	r3, r2, r3
 801e77e:	430b      	orrs	r3, r1
 801e780:	40c2      	lsrs	r2, r0
 801e782:	6163      	str	r3, [r4, #20]
 801e784:	9201      	str	r2, [sp, #4]
 801e786:	9b01      	ldr	r3, [sp, #4]
 801e788:	61a3      	str	r3, [r4, #24]
 801e78a:	2b00      	cmp	r3, #0
 801e78c:	bf0c      	ite	eq
 801e78e:	2201      	moveq	r2, #1
 801e790:	2202      	movne	r2, #2
 801e792:	6122      	str	r2, [r4, #16]
 801e794:	b1ad      	cbz	r5, 801e7c2 <__d2b+0x92>
 801e796:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801e79a:	4405      	add	r5, r0
 801e79c:	6035      	str	r5, [r6, #0]
 801e79e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801e7a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e7a4:	6018      	str	r0, [r3, #0]
 801e7a6:	4620      	mov	r0, r4
 801e7a8:	b002      	add	sp, #8
 801e7aa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801e7ae:	6161      	str	r1, [r4, #20]
 801e7b0:	e7e9      	b.n	801e786 <__d2b+0x56>
 801e7b2:	a801      	add	r0, sp, #4
 801e7b4:	f7ff fd5b 	bl	801e26e <__lo0bits>
 801e7b8:	9b01      	ldr	r3, [sp, #4]
 801e7ba:	6163      	str	r3, [r4, #20]
 801e7bc:	3020      	adds	r0, #32
 801e7be:	2201      	movs	r2, #1
 801e7c0:	e7e7      	b.n	801e792 <__d2b+0x62>
 801e7c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e7c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801e7ca:	6030      	str	r0, [r6, #0]
 801e7cc:	6918      	ldr	r0, [r3, #16]
 801e7ce:	f7ff fd2f 	bl	801e230 <__hi0bits>
 801e7d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e7d6:	e7e4      	b.n	801e7a2 <__d2b+0x72>
 801e7d8:	080200d4 	.word	0x080200d4
 801e7dc:	080200e5 	.word	0x080200e5

0801e7e0 <__sfputc_r>:
 801e7e0:	6893      	ldr	r3, [r2, #8]
 801e7e2:	3b01      	subs	r3, #1
 801e7e4:	2b00      	cmp	r3, #0
 801e7e6:	b410      	push	{r4}
 801e7e8:	6093      	str	r3, [r2, #8]
 801e7ea:	da07      	bge.n	801e7fc <__sfputc_r+0x1c>
 801e7ec:	6994      	ldr	r4, [r2, #24]
 801e7ee:	42a3      	cmp	r3, r4
 801e7f0:	db01      	blt.n	801e7f6 <__sfputc_r+0x16>
 801e7f2:	290a      	cmp	r1, #10
 801e7f4:	d102      	bne.n	801e7fc <__sfputc_r+0x1c>
 801e7f6:	bc10      	pop	{r4}
 801e7f8:	f7fe bbfd 	b.w	801cff6 <__swbuf_r>
 801e7fc:	6813      	ldr	r3, [r2, #0]
 801e7fe:	1c58      	adds	r0, r3, #1
 801e800:	6010      	str	r0, [r2, #0]
 801e802:	7019      	strb	r1, [r3, #0]
 801e804:	4608      	mov	r0, r1
 801e806:	bc10      	pop	{r4}
 801e808:	4770      	bx	lr

0801e80a <__sfputs_r>:
 801e80a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e80c:	4606      	mov	r6, r0
 801e80e:	460f      	mov	r7, r1
 801e810:	4614      	mov	r4, r2
 801e812:	18d5      	adds	r5, r2, r3
 801e814:	42ac      	cmp	r4, r5
 801e816:	d101      	bne.n	801e81c <__sfputs_r+0x12>
 801e818:	2000      	movs	r0, #0
 801e81a:	e007      	b.n	801e82c <__sfputs_r+0x22>
 801e81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e820:	463a      	mov	r2, r7
 801e822:	4630      	mov	r0, r6
 801e824:	f7ff ffdc 	bl	801e7e0 <__sfputc_r>
 801e828:	1c43      	adds	r3, r0, #1
 801e82a:	d1f3      	bne.n	801e814 <__sfputs_r+0xa>
 801e82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e830 <_vfiprintf_r>:
 801e830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e834:	460d      	mov	r5, r1
 801e836:	b09d      	sub	sp, #116	@ 0x74
 801e838:	4614      	mov	r4, r2
 801e83a:	4698      	mov	r8, r3
 801e83c:	4606      	mov	r6, r0
 801e83e:	b118      	cbz	r0, 801e848 <_vfiprintf_r+0x18>
 801e840:	6a03      	ldr	r3, [r0, #32]
 801e842:	b90b      	cbnz	r3, 801e848 <_vfiprintf_r+0x18>
 801e844:	f7fe fb5e 	bl	801cf04 <__sinit>
 801e848:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e84a:	07d9      	lsls	r1, r3, #31
 801e84c:	d405      	bmi.n	801e85a <_vfiprintf_r+0x2a>
 801e84e:	89ab      	ldrh	r3, [r5, #12]
 801e850:	059a      	lsls	r2, r3, #22
 801e852:	d402      	bmi.n	801e85a <_vfiprintf_r+0x2a>
 801e854:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e856:	f7fe fce0 	bl	801d21a <__retarget_lock_acquire_recursive>
 801e85a:	89ab      	ldrh	r3, [r5, #12]
 801e85c:	071b      	lsls	r3, r3, #28
 801e85e:	d501      	bpl.n	801e864 <_vfiprintf_r+0x34>
 801e860:	692b      	ldr	r3, [r5, #16]
 801e862:	b99b      	cbnz	r3, 801e88c <_vfiprintf_r+0x5c>
 801e864:	4629      	mov	r1, r5
 801e866:	4630      	mov	r0, r6
 801e868:	f7fe fc04 	bl	801d074 <__swsetup_r>
 801e86c:	b170      	cbz	r0, 801e88c <_vfiprintf_r+0x5c>
 801e86e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e870:	07dc      	lsls	r4, r3, #31
 801e872:	d504      	bpl.n	801e87e <_vfiprintf_r+0x4e>
 801e874:	f04f 30ff 	mov.w	r0, #4294967295
 801e878:	b01d      	add	sp, #116	@ 0x74
 801e87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e87e:	89ab      	ldrh	r3, [r5, #12]
 801e880:	0598      	lsls	r0, r3, #22
 801e882:	d4f7      	bmi.n	801e874 <_vfiprintf_r+0x44>
 801e884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e886:	f7fe fcc9 	bl	801d21c <__retarget_lock_release_recursive>
 801e88a:	e7f3      	b.n	801e874 <_vfiprintf_r+0x44>
 801e88c:	2300      	movs	r3, #0
 801e88e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e890:	2320      	movs	r3, #32
 801e892:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e896:	f8cd 800c 	str.w	r8, [sp, #12]
 801e89a:	2330      	movs	r3, #48	@ 0x30
 801e89c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ea4c <_vfiprintf_r+0x21c>
 801e8a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e8a4:	f04f 0901 	mov.w	r9, #1
 801e8a8:	4623      	mov	r3, r4
 801e8aa:	469a      	mov	sl, r3
 801e8ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e8b0:	b10a      	cbz	r2, 801e8b6 <_vfiprintf_r+0x86>
 801e8b2:	2a25      	cmp	r2, #37	@ 0x25
 801e8b4:	d1f9      	bne.n	801e8aa <_vfiprintf_r+0x7a>
 801e8b6:	ebba 0b04 	subs.w	fp, sl, r4
 801e8ba:	d00b      	beq.n	801e8d4 <_vfiprintf_r+0xa4>
 801e8bc:	465b      	mov	r3, fp
 801e8be:	4622      	mov	r2, r4
 801e8c0:	4629      	mov	r1, r5
 801e8c2:	4630      	mov	r0, r6
 801e8c4:	f7ff ffa1 	bl	801e80a <__sfputs_r>
 801e8c8:	3001      	adds	r0, #1
 801e8ca:	f000 80a7 	beq.w	801ea1c <_vfiprintf_r+0x1ec>
 801e8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e8d0:	445a      	add	r2, fp
 801e8d2:	9209      	str	r2, [sp, #36]	@ 0x24
 801e8d4:	f89a 3000 	ldrb.w	r3, [sl]
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	f000 809f 	beq.w	801ea1c <_vfiprintf_r+0x1ec>
 801e8de:	2300      	movs	r3, #0
 801e8e0:	f04f 32ff 	mov.w	r2, #4294967295
 801e8e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e8e8:	f10a 0a01 	add.w	sl, sl, #1
 801e8ec:	9304      	str	r3, [sp, #16]
 801e8ee:	9307      	str	r3, [sp, #28]
 801e8f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e8f4:	931a      	str	r3, [sp, #104]	@ 0x68
 801e8f6:	4654      	mov	r4, sl
 801e8f8:	2205      	movs	r2, #5
 801e8fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e8fe:	4853      	ldr	r0, [pc, #332]	@ (801ea4c <_vfiprintf_r+0x21c>)
 801e900:	f7e1 fc3e 	bl	8000180 <memchr>
 801e904:	9a04      	ldr	r2, [sp, #16]
 801e906:	b9d8      	cbnz	r0, 801e940 <_vfiprintf_r+0x110>
 801e908:	06d1      	lsls	r1, r2, #27
 801e90a:	bf44      	itt	mi
 801e90c:	2320      	movmi	r3, #32
 801e90e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e912:	0713      	lsls	r3, r2, #28
 801e914:	bf44      	itt	mi
 801e916:	232b      	movmi	r3, #43	@ 0x2b
 801e918:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e91c:	f89a 3000 	ldrb.w	r3, [sl]
 801e920:	2b2a      	cmp	r3, #42	@ 0x2a
 801e922:	d015      	beq.n	801e950 <_vfiprintf_r+0x120>
 801e924:	9a07      	ldr	r2, [sp, #28]
 801e926:	4654      	mov	r4, sl
 801e928:	2000      	movs	r0, #0
 801e92a:	f04f 0c0a 	mov.w	ip, #10
 801e92e:	4621      	mov	r1, r4
 801e930:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e934:	3b30      	subs	r3, #48	@ 0x30
 801e936:	2b09      	cmp	r3, #9
 801e938:	d94b      	bls.n	801e9d2 <_vfiprintf_r+0x1a2>
 801e93a:	b1b0      	cbz	r0, 801e96a <_vfiprintf_r+0x13a>
 801e93c:	9207      	str	r2, [sp, #28]
 801e93e:	e014      	b.n	801e96a <_vfiprintf_r+0x13a>
 801e940:	eba0 0308 	sub.w	r3, r0, r8
 801e944:	fa09 f303 	lsl.w	r3, r9, r3
 801e948:	4313      	orrs	r3, r2
 801e94a:	9304      	str	r3, [sp, #16]
 801e94c:	46a2      	mov	sl, r4
 801e94e:	e7d2      	b.n	801e8f6 <_vfiprintf_r+0xc6>
 801e950:	9b03      	ldr	r3, [sp, #12]
 801e952:	1d19      	adds	r1, r3, #4
 801e954:	681b      	ldr	r3, [r3, #0]
 801e956:	9103      	str	r1, [sp, #12]
 801e958:	2b00      	cmp	r3, #0
 801e95a:	bfbb      	ittet	lt
 801e95c:	425b      	neglt	r3, r3
 801e95e:	f042 0202 	orrlt.w	r2, r2, #2
 801e962:	9307      	strge	r3, [sp, #28]
 801e964:	9307      	strlt	r3, [sp, #28]
 801e966:	bfb8      	it	lt
 801e968:	9204      	strlt	r2, [sp, #16]
 801e96a:	7823      	ldrb	r3, [r4, #0]
 801e96c:	2b2e      	cmp	r3, #46	@ 0x2e
 801e96e:	d10a      	bne.n	801e986 <_vfiprintf_r+0x156>
 801e970:	7863      	ldrb	r3, [r4, #1]
 801e972:	2b2a      	cmp	r3, #42	@ 0x2a
 801e974:	d132      	bne.n	801e9dc <_vfiprintf_r+0x1ac>
 801e976:	9b03      	ldr	r3, [sp, #12]
 801e978:	1d1a      	adds	r2, r3, #4
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	9203      	str	r2, [sp, #12]
 801e97e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e982:	3402      	adds	r4, #2
 801e984:	9305      	str	r3, [sp, #20]
 801e986:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801ea50 <_vfiprintf_r+0x220>
 801e98a:	7821      	ldrb	r1, [r4, #0]
 801e98c:	2203      	movs	r2, #3
 801e98e:	4650      	mov	r0, sl
 801e990:	f7e1 fbf6 	bl	8000180 <memchr>
 801e994:	b138      	cbz	r0, 801e9a6 <_vfiprintf_r+0x176>
 801e996:	9b04      	ldr	r3, [sp, #16]
 801e998:	eba0 000a 	sub.w	r0, r0, sl
 801e99c:	2240      	movs	r2, #64	@ 0x40
 801e99e:	4082      	lsls	r2, r0
 801e9a0:	4313      	orrs	r3, r2
 801e9a2:	3401      	adds	r4, #1
 801e9a4:	9304      	str	r3, [sp, #16]
 801e9a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e9aa:	482a      	ldr	r0, [pc, #168]	@ (801ea54 <_vfiprintf_r+0x224>)
 801e9ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e9b0:	2206      	movs	r2, #6
 801e9b2:	f7e1 fbe5 	bl	8000180 <memchr>
 801e9b6:	2800      	cmp	r0, #0
 801e9b8:	d03f      	beq.n	801ea3a <_vfiprintf_r+0x20a>
 801e9ba:	4b27      	ldr	r3, [pc, #156]	@ (801ea58 <_vfiprintf_r+0x228>)
 801e9bc:	bb1b      	cbnz	r3, 801ea06 <_vfiprintf_r+0x1d6>
 801e9be:	9b03      	ldr	r3, [sp, #12]
 801e9c0:	3307      	adds	r3, #7
 801e9c2:	f023 0307 	bic.w	r3, r3, #7
 801e9c6:	3308      	adds	r3, #8
 801e9c8:	9303      	str	r3, [sp, #12]
 801e9ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e9cc:	443b      	add	r3, r7
 801e9ce:	9309      	str	r3, [sp, #36]	@ 0x24
 801e9d0:	e76a      	b.n	801e8a8 <_vfiprintf_r+0x78>
 801e9d2:	fb0c 3202 	mla	r2, ip, r2, r3
 801e9d6:	460c      	mov	r4, r1
 801e9d8:	2001      	movs	r0, #1
 801e9da:	e7a8      	b.n	801e92e <_vfiprintf_r+0xfe>
 801e9dc:	2300      	movs	r3, #0
 801e9de:	3401      	adds	r4, #1
 801e9e0:	9305      	str	r3, [sp, #20]
 801e9e2:	4619      	mov	r1, r3
 801e9e4:	f04f 0c0a 	mov.w	ip, #10
 801e9e8:	4620      	mov	r0, r4
 801e9ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e9ee:	3a30      	subs	r2, #48	@ 0x30
 801e9f0:	2a09      	cmp	r2, #9
 801e9f2:	d903      	bls.n	801e9fc <_vfiprintf_r+0x1cc>
 801e9f4:	2b00      	cmp	r3, #0
 801e9f6:	d0c6      	beq.n	801e986 <_vfiprintf_r+0x156>
 801e9f8:	9105      	str	r1, [sp, #20]
 801e9fa:	e7c4      	b.n	801e986 <_vfiprintf_r+0x156>
 801e9fc:	fb0c 2101 	mla	r1, ip, r1, r2
 801ea00:	4604      	mov	r4, r0
 801ea02:	2301      	movs	r3, #1
 801ea04:	e7f0      	b.n	801e9e8 <_vfiprintf_r+0x1b8>
 801ea06:	ab03      	add	r3, sp, #12
 801ea08:	9300      	str	r3, [sp, #0]
 801ea0a:	462a      	mov	r2, r5
 801ea0c:	4b13      	ldr	r3, [pc, #76]	@ (801ea5c <_vfiprintf_r+0x22c>)
 801ea0e:	a904      	add	r1, sp, #16
 801ea10:	4630      	mov	r0, r6
 801ea12:	f7fd fe31 	bl	801c678 <_printf_float>
 801ea16:	4607      	mov	r7, r0
 801ea18:	1c78      	adds	r0, r7, #1
 801ea1a:	d1d6      	bne.n	801e9ca <_vfiprintf_r+0x19a>
 801ea1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ea1e:	07d9      	lsls	r1, r3, #31
 801ea20:	d405      	bmi.n	801ea2e <_vfiprintf_r+0x1fe>
 801ea22:	89ab      	ldrh	r3, [r5, #12]
 801ea24:	059a      	lsls	r2, r3, #22
 801ea26:	d402      	bmi.n	801ea2e <_vfiprintf_r+0x1fe>
 801ea28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ea2a:	f7fe fbf7 	bl	801d21c <__retarget_lock_release_recursive>
 801ea2e:	89ab      	ldrh	r3, [r5, #12]
 801ea30:	065b      	lsls	r3, r3, #25
 801ea32:	f53f af1f 	bmi.w	801e874 <_vfiprintf_r+0x44>
 801ea36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ea38:	e71e      	b.n	801e878 <_vfiprintf_r+0x48>
 801ea3a:	ab03      	add	r3, sp, #12
 801ea3c:	9300      	str	r3, [sp, #0]
 801ea3e:	462a      	mov	r2, r5
 801ea40:	4b06      	ldr	r3, [pc, #24]	@ (801ea5c <_vfiprintf_r+0x22c>)
 801ea42:	a904      	add	r1, sp, #16
 801ea44:	4630      	mov	r0, r6
 801ea46:	f7fe f8b1 	bl	801cbac <_printf_i>
 801ea4a:	e7e4      	b.n	801ea16 <_vfiprintf_r+0x1e6>
 801ea4c:	08020240 	.word	0x08020240
 801ea50:	08020246 	.word	0x08020246
 801ea54:	0802024a 	.word	0x0802024a
 801ea58:	0801c679 	.word	0x0801c679
 801ea5c:	0801e80b 	.word	0x0801e80b

0801ea60 <__sflush_r>:
 801ea60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ea64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea66:	0716      	lsls	r6, r2, #28
 801ea68:	4605      	mov	r5, r0
 801ea6a:	460c      	mov	r4, r1
 801ea6c:	d454      	bmi.n	801eb18 <__sflush_r+0xb8>
 801ea6e:	684b      	ldr	r3, [r1, #4]
 801ea70:	2b00      	cmp	r3, #0
 801ea72:	dc02      	bgt.n	801ea7a <__sflush_r+0x1a>
 801ea74:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ea76:	2b00      	cmp	r3, #0
 801ea78:	dd48      	ble.n	801eb0c <__sflush_r+0xac>
 801ea7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ea7c:	2e00      	cmp	r6, #0
 801ea7e:	d045      	beq.n	801eb0c <__sflush_r+0xac>
 801ea80:	2300      	movs	r3, #0
 801ea82:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ea86:	682f      	ldr	r7, [r5, #0]
 801ea88:	6a21      	ldr	r1, [r4, #32]
 801ea8a:	602b      	str	r3, [r5, #0]
 801ea8c:	d030      	beq.n	801eaf0 <__sflush_r+0x90>
 801ea8e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ea90:	89a3      	ldrh	r3, [r4, #12]
 801ea92:	0759      	lsls	r1, r3, #29
 801ea94:	d505      	bpl.n	801eaa2 <__sflush_r+0x42>
 801ea96:	6863      	ldr	r3, [r4, #4]
 801ea98:	1ad2      	subs	r2, r2, r3
 801ea9a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ea9c:	b10b      	cbz	r3, 801eaa2 <__sflush_r+0x42>
 801ea9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801eaa0:	1ad2      	subs	r2, r2, r3
 801eaa2:	2300      	movs	r3, #0
 801eaa4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801eaa6:	6a21      	ldr	r1, [r4, #32]
 801eaa8:	4628      	mov	r0, r5
 801eaaa:	47b0      	blx	r6
 801eaac:	1c43      	adds	r3, r0, #1
 801eaae:	89a3      	ldrh	r3, [r4, #12]
 801eab0:	d106      	bne.n	801eac0 <__sflush_r+0x60>
 801eab2:	6829      	ldr	r1, [r5, #0]
 801eab4:	291d      	cmp	r1, #29
 801eab6:	d82b      	bhi.n	801eb10 <__sflush_r+0xb0>
 801eab8:	4a28      	ldr	r2, [pc, #160]	@ (801eb5c <__sflush_r+0xfc>)
 801eaba:	410a      	asrs	r2, r1
 801eabc:	07d6      	lsls	r6, r2, #31
 801eabe:	d427      	bmi.n	801eb10 <__sflush_r+0xb0>
 801eac0:	2200      	movs	r2, #0
 801eac2:	6062      	str	r2, [r4, #4]
 801eac4:	04d9      	lsls	r1, r3, #19
 801eac6:	6922      	ldr	r2, [r4, #16]
 801eac8:	6022      	str	r2, [r4, #0]
 801eaca:	d504      	bpl.n	801ead6 <__sflush_r+0x76>
 801eacc:	1c42      	adds	r2, r0, #1
 801eace:	d101      	bne.n	801ead4 <__sflush_r+0x74>
 801ead0:	682b      	ldr	r3, [r5, #0]
 801ead2:	b903      	cbnz	r3, 801ead6 <__sflush_r+0x76>
 801ead4:	6560      	str	r0, [r4, #84]	@ 0x54
 801ead6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ead8:	602f      	str	r7, [r5, #0]
 801eada:	b1b9      	cbz	r1, 801eb0c <__sflush_r+0xac>
 801eadc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801eae0:	4299      	cmp	r1, r3
 801eae2:	d002      	beq.n	801eaea <__sflush_r+0x8a>
 801eae4:	4628      	mov	r0, r5
 801eae6:	f7ff f9fb 	bl	801dee0 <_free_r>
 801eaea:	2300      	movs	r3, #0
 801eaec:	6363      	str	r3, [r4, #52]	@ 0x34
 801eaee:	e00d      	b.n	801eb0c <__sflush_r+0xac>
 801eaf0:	2301      	movs	r3, #1
 801eaf2:	4628      	mov	r0, r5
 801eaf4:	47b0      	blx	r6
 801eaf6:	4602      	mov	r2, r0
 801eaf8:	1c50      	adds	r0, r2, #1
 801eafa:	d1c9      	bne.n	801ea90 <__sflush_r+0x30>
 801eafc:	682b      	ldr	r3, [r5, #0]
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	d0c6      	beq.n	801ea90 <__sflush_r+0x30>
 801eb02:	2b1d      	cmp	r3, #29
 801eb04:	d001      	beq.n	801eb0a <__sflush_r+0xaa>
 801eb06:	2b16      	cmp	r3, #22
 801eb08:	d11d      	bne.n	801eb46 <__sflush_r+0xe6>
 801eb0a:	602f      	str	r7, [r5, #0]
 801eb0c:	2000      	movs	r0, #0
 801eb0e:	e021      	b.n	801eb54 <__sflush_r+0xf4>
 801eb10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801eb14:	b21b      	sxth	r3, r3
 801eb16:	e01a      	b.n	801eb4e <__sflush_r+0xee>
 801eb18:	690f      	ldr	r7, [r1, #16]
 801eb1a:	2f00      	cmp	r7, #0
 801eb1c:	d0f6      	beq.n	801eb0c <__sflush_r+0xac>
 801eb1e:	0793      	lsls	r3, r2, #30
 801eb20:	680e      	ldr	r6, [r1, #0]
 801eb22:	bf08      	it	eq
 801eb24:	694b      	ldreq	r3, [r1, #20]
 801eb26:	600f      	str	r7, [r1, #0]
 801eb28:	bf18      	it	ne
 801eb2a:	2300      	movne	r3, #0
 801eb2c:	1bf6      	subs	r6, r6, r7
 801eb2e:	608b      	str	r3, [r1, #8]
 801eb30:	2e00      	cmp	r6, #0
 801eb32:	ddeb      	ble.n	801eb0c <__sflush_r+0xac>
 801eb34:	6a21      	ldr	r1, [r4, #32]
 801eb36:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801eb3a:	4633      	mov	r3, r6
 801eb3c:	463a      	mov	r2, r7
 801eb3e:	4628      	mov	r0, r5
 801eb40:	47e0      	blx	ip
 801eb42:	2800      	cmp	r0, #0
 801eb44:	dc07      	bgt.n	801eb56 <__sflush_r+0xf6>
 801eb46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eb4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801eb4e:	81a3      	strh	r3, [r4, #12]
 801eb50:	f04f 30ff 	mov.w	r0, #4294967295
 801eb54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb56:	4407      	add	r7, r0
 801eb58:	1a36      	subs	r6, r6, r0
 801eb5a:	e7e9      	b.n	801eb30 <__sflush_r+0xd0>
 801eb5c:	dfbffffe 	.word	0xdfbffffe

0801eb60 <_fflush_r>:
 801eb60:	b538      	push	{r3, r4, r5, lr}
 801eb62:	690b      	ldr	r3, [r1, #16]
 801eb64:	4605      	mov	r5, r0
 801eb66:	460c      	mov	r4, r1
 801eb68:	b913      	cbnz	r3, 801eb70 <_fflush_r+0x10>
 801eb6a:	2500      	movs	r5, #0
 801eb6c:	4628      	mov	r0, r5
 801eb6e:	bd38      	pop	{r3, r4, r5, pc}
 801eb70:	b118      	cbz	r0, 801eb7a <_fflush_r+0x1a>
 801eb72:	6a03      	ldr	r3, [r0, #32]
 801eb74:	b90b      	cbnz	r3, 801eb7a <_fflush_r+0x1a>
 801eb76:	f7fe f9c5 	bl	801cf04 <__sinit>
 801eb7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eb7e:	2b00      	cmp	r3, #0
 801eb80:	d0f3      	beq.n	801eb6a <_fflush_r+0xa>
 801eb82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801eb84:	07d0      	lsls	r0, r2, #31
 801eb86:	d404      	bmi.n	801eb92 <_fflush_r+0x32>
 801eb88:	0599      	lsls	r1, r3, #22
 801eb8a:	d402      	bmi.n	801eb92 <_fflush_r+0x32>
 801eb8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eb8e:	f7fe fb44 	bl	801d21a <__retarget_lock_acquire_recursive>
 801eb92:	4628      	mov	r0, r5
 801eb94:	4621      	mov	r1, r4
 801eb96:	f7ff ff63 	bl	801ea60 <__sflush_r>
 801eb9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eb9c:	07da      	lsls	r2, r3, #31
 801eb9e:	4605      	mov	r5, r0
 801eba0:	d4e4      	bmi.n	801eb6c <_fflush_r+0xc>
 801eba2:	89a3      	ldrh	r3, [r4, #12]
 801eba4:	059b      	lsls	r3, r3, #22
 801eba6:	d4e1      	bmi.n	801eb6c <_fflush_r+0xc>
 801eba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ebaa:	f7fe fb37 	bl	801d21c <__retarget_lock_release_recursive>
 801ebae:	e7dd      	b.n	801eb6c <_fflush_r+0xc>

0801ebb0 <__swhatbuf_r>:
 801ebb0:	b570      	push	{r4, r5, r6, lr}
 801ebb2:	460c      	mov	r4, r1
 801ebb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebb8:	2900      	cmp	r1, #0
 801ebba:	b096      	sub	sp, #88	@ 0x58
 801ebbc:	4615      	mov	r5, r2
 801ebbe:	461e      	mov	r6, r3
 801ebc0:	da0d      	bge.n	801ebde <__swhatbuf_r+0x2e>
 801ebc2:	89a3      	ldrh	r3, [r4, #12]
 801ebc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ebc8:	f04f 0100 	mov.w	r1, #0
 801ebcc:	bf14      	ite	ne
 801ebce:	2340      	movne	r3, #64	@ 0x40
 801ebd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ebd4:	2000      	movs	r0, #0
 801ebd6:	6031      	str	r1, [r6, #0]
 801ebd8:	602b      	str	r3, [r5, #0]
 801ebda:	b016      	add	sp, #88	@ 0x58
 801ebdc:	bd70      	pop	{r4, r5, r6, pc}
 801ebde:	466a      	mov	r2, sp
 801ebe0:	f000 f848 	bl	801ec74 <_fstat_r>
 801ebe4:	2800      	cmp	r0, #0
 801ebe6:	dbec      	blt.n	801ebc2 <__swhatbuf_r+0x12>
 801ebe8:	9901      	ldr	r1, [sp, #4]
 801ebea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ebee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ebf2:	4259      	negs	r1, r3
 801ebf4:	4159      	adcs	r1, r3
 801ebf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ebfa:	e7eb      	b.n	801ebd4 <__swhatbuf_r+0x24>

0801ebfc <__smakebuf_r>:
 801ebfc:	898b      	ldrh	r3, [r1, #12]
 801ebfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ec00:	079d      	lsls	r5, r3, #30
 801ec02:	4606      	mov	r6, r0
 801ec04:	460c      	mov	r4, r1
 801ec06:	d507      	bpl.n	801ec18 <__smakebuf_r+0x1c>
 801ec08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ec0c:	6023      	str	r3, [r4, #0]
 801ec0e:	6123      	str	r3, [r4, #16]
 801ec10:	2301      	movs	r3, #1
 801ec12:	6163      	str	r3, [r4, #20]
 801ec14:	b003      	add	sp, #12
 801ec16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ec18:	ab01      	add	r3, sp, #4
 801ec1a:	466a      	mov	r2, sp
 801ec1c:	f7ff ffc8 	bl	801ebb0 <__swhatbuf_r>
 801ec20:	9f00      	ldr	r7, [sp, #0]
 801ec22:	4605      	mov	r5, r0
 801ec24:	4639      	mov	r1, r7
 801ec26:	4630      	mov	r0, r6
 801ec28:	f7ff f9ce 	bl	801dfc8 <_malloc_r>
 801ec2c:	b948      	cbnz	r0, 801ec42 <__smakebuf_r+0x46>
 801ec2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec32:	059a      	lsls	r2, r3, #22
 801ec34:	d4ee      	bmi.n	801ec14 <__smakebuf_r+0x18>
 801ec36:	f023 0303 	bic.w	r3, r3, #3
 801ec3a:	f043 0302 	orr.w	r3, r3, #2
 801ec3e:	81a3      	strh	r3, [r4, #12]
 801ec40:	e7e2      	b.n	801ec08 <__smakebuf_r+0xc>
 801ec42:	89a3      	ldrh	r3, [r4, #12]
 801ec44:	6020      	str	r0, [r4, #0]
 801ec46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ec4a:	81a3      	strh	r3, [r4, #12]
 801ec4c:	9b01      	ldr	r3, [sp, #4]
 801ec4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ec52:	b15b      	cbz	r3, 801ec6c <__smakebuf_r+0x70>
 801ec54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ec58:	4630      	mov	r0, r6
 801ec5a:	f000 f81d 	bl	801ec98 <_isatty_r>
 801ec5e:	b128      	cbz	r0, 801ec6c <__smakebuf_r+0x70>
 801ec60:	89a3      	ldrh	r3, [r4, #12]
 801ec62:	f023 0303 	bic.w	r3, r3, #3
 801ec66:	f043 0301 	orr.w	r3, r3, #1
 801ec6a:	81a3      	strh	r3, [r4, #12]
 801ec6c:	89a3      	ldrh	r3, [r4, #12]
 801ec6e:	431d      	orrs	r5, r3
 801ec70:	81a5      	strh	r5, [r4, #12]
 801ec72:	e7cf      	b.n	801ec14 <__smakebuf_r+0x18>

0801ec74 <_fstat_r>:
 801ec74:	b538      	push	{r3, r4, r5, lr}
 801ec76:	4d07      	ldr	r5, [pc, #28]	@ (801ec94 <_fstat_r+0x20>)
 801ec78:	2300      	movs	r3, #0
 801ec7a:	4604      	mov	r4, r0
 801ec7c:	4608      	mov	r0, r1
 801ec7e:	4611      	mov	r1, r2
 801ec80:	602b      	str	r3, [r5, #0]
 801ec82:	f7e3 fd3e 	bl	8002702 <_fstat>
 801ec86:	1c43      	adds	r3, r0, #1
 801ec88:	d102      	bne.n	801ec90 <_fstat_r+0x1c>
 801ec8a:	682b      	ldr	r3, [r5, #0]
 801ec8c:	b103      	cbz	r3, 801ec90 <_fstat_r+0x1c>
 801ec8e:	6023      	str	r3, [r4, #0]
 801ec90:	bd38      	pop	{r3, r4, r5, pc}
 801ec92:	bf00      	nop
 801ec94:	20002560 	.word	0x20002560

0801ec98 <_isatty_r>:
 801ec98:	b538      	push	{r3, r4, r5, lr}
 801ec9a:	4d06      	ldr	r5, [pc, #24]	@ (801ecb4 <_isatty_r+0x1c>)
 801ec9c:	2300      	movs	r3, #0
 801ec9e:	4604      	mov	r4, r0
 801eca0:	4608      	mov	r0, r1
 801eca2:	602b      	str	r3, [r5, #0]
 801eca4:	f7e3 fd3c 	bl	8002720 <_isatty>
 801eca8:	1c43      	adds	r3, r0, #1
 801ecaa:	d102      	bne.n	801ecb2 <_isatty_r+0x1a>
 801ecac:	682b      	ldr	r3, [r5, #0]
 801ecae:	b103      	cbz	r3, 801ecb2 <_isatty_r+0x1a>
 801ecb0:	6023      	str	r3, [r4, #0]
 801ecb2:	bd38      	pop	{r3, r4, r5, pc}
 801ecb4:	20002560 	.word	0x20002560

0801ecb8 <_sbrk_r>:
 801ecb8:	b538      	push	{r3, r4, r5, lr}
 801ecba:	4d06      	ldr	r5, [pc, #24]	@ (801ecd4 <_sbrk_r+0x1c>)
 801ecbc:	2300      	movs	r3, #0
 801ecbe:	4604      	mov	r4, r0
 801ecc0:	4608      	mov	r0, r1
 801ecc2:	602b      	str	r3, [r5, #0]
 801ecc4:	f7e3 fd42 	bl	800274c <_sbrk>
 801ecc8:	1c43      	adds	r3, r0, #1
 801ecca:	d102      	bne.n	801ecd2 <_sbrk_r+0x1a>
 801eccc:	682b      	ldr	r3, [r5, #0]
 801ecce:	b103      	cbz	r3, 801ecd2 <_sbrk_r+0x1a>
 801ecd0:	6023      	str	r3, [r4, #0]
 801ecd2:	bd38      	pop	{r3, r4, r5, pc}
 801ecd4:	20002560 	.word	0x20002560

0801ecd8 <__assert_func>:
 801ecd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ecda:	4614      	mov	r4, r2
 801ecdc:	461a      	mov	r2, r3
 801ecde:	4b09      	ldr	r3, [pc, #36]	@ (801ed04 <__assert_func+0x2c>)
 801ece0:	681b      	ldr	r3, [r3, #0]
 801ece2:	4605      	mov	r5, r0
 801ece4:	68d8      	ldr	r0, [r3, #12]
 801ece6:	b954      	cbnz	r4, 801ecfe <__assert_func+0x26>
 801ece8:	4b07      	ldr	r3, [pc, #28]	@ (801ed08 <__assert_func+0x30>)
 801ecea:	461c      	mov	r4, r3
 801ecec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ecf0:	9100      	str	r1, [sp, #0]
 801ecf2:	462b      	mov	r3, r5
 801ecf4:	4905      	ldr	r1, [pc, #20]	@ (801ed0c <__assert_func+0x34>)
 801ecf6:	f000 f841 	bl	801ed7c <fiprintf>
 801ecfa:	f000 f851 	bl	801eda0 <abort>
 801ecfe:	4b04      	ldr	r3, [pc, #16]	@ (801ed10 <__assert_func+0x38>)
 801ed00:	e7f4      	b.n	801ecec <__assert_func+0x14>
 801ed02:	bf00      	nop
 801ed04:	20000164 	.word	0x20000164
 801ed08:	08020296 	.word	0x08020296
 801ed0c:	08020268 	.word	0x08020268
 801ed10:	0802025b 	.word	0x0802025b

0801ed14 <_calloc_r>:
 801ed14:	b570      	push	{r4, r5, r6, lr}
 801ed16:	fba1 5402 	umull	r5, r4, r1, r2
 801ed1a:	b93c      	cbnz	r4, 801ed2c <_calloc_r+0x18>
 801ed1c:	4629      	mov	r1, r5
 801ed1e:	f7ff f953 	bl	801dfc8 <_malloc_r>
 801ed22:	4606      	mov	r6, r0
 801ed24:	b928      	cbnz	r0, 801ed32 <_calloc_r+0x1e>
 801ed26:	2600      	movs	r6, #0
 801ed28:	4630      	mov	r0, r6
 801ed2a:	bd70      	pop	{r4, r5, r6, pc}
 801ed2c:	220c      	movs	r2, #12
 801ed2e:	6002      	str	r2, [r0, #0]
 801ed30:	e7f9      	b.n	801ed26 <_calloc_r+0x12>
 801ed32:	462a      	mov	r2, r5
 801ed34:	4621      	mov	r1, r4
 801ed36:	f7fe f9f3 	bl	801d120 <memset>
 801ed3a:	e7f5      	b.n	801ed28 <_calloc_r+0x14>

0801ed3c <__ascii_mbtowc>:
 801ed3c:	b082      	sub	sp, #8
 801ed3e:	b901      	cbnz	r1, 801ed42 <__ascii_mbtowc+0x6>
 801ed40:	a901      	add	r1, sp, #4
 801ed42:	b142      	cbz	r2, 801ed56 <__ascii_mbtowc+0x1a>
 801ed44:	b14b      	cbz	r3, 801ed5a <__ascii_mbtowc+0x1e>
 801ed46:	7813      	ldrb	r3, [r2, #0]
 801ed48:	600b      	str	r3, [r1, #0]
 801ed4a:	7812      	ldrb	r2, [r2, #0]
 801ed4c:	1e10      	subs	r0, r2, #0
 801ed4e:	bf18      	it	ne
 801ed50:	2001      	movne	r0, #1
 801ed52:	b002      	add	sp, #8
 801ed54:	4770      	bx	lr
 801ed56:	4610      	mov	r0, r2
 801ed58:	e7fb      	b.n	801ed52 <__ascii_mbtowc+0x16>
 801ed5a:	f06f 0001 	mvn.w	r0, #1
 801ed5e:	e7f8      	b.n	801ed52 <__ascii_mbtowc+0x16>

0801ed60 <__ascii_wctomb>:
 801ed60:	4603      	mov	r3, r0
 801ed62:	4608      	mov	r0, r1
 801ed64:	b141      	cbz	r1, 801ed78 <__ascii_wctomb+0x18>
 801ed66:	2aff      	cmp	r2, #255	@ 0xff
 801ed68:	d904      	bls.n	801ed74 <__ascii_wctomb+0x14>
 801ed6a:	228a      	movs	r2, #138	@ 0x8a
 801ed6c:	601a      	str	r2, [r3, #0]
 801ed6e:	f04f 30ff 	mov.w	r0, #4294967295
 801ed72:	4770      	bx	lr
 801ed74:	700a      	strb	r2, [r1, #0]
 801ed76:	2001      	movs	r0, #1
 801ed78:	4770      	bx	lr
	...

0801ed7c <fiprintf>:
 801ed7c:	b40e      	push	{r1, r2, r3}
 801ed7e:	b503      	push	{r0, r1, lr}
 801ed80:	4601      	mov	r1, r0
 801ed82:	ab03      	add	r3, sp, #12
 801ed84:	4805      	ldr	r0, [pc, #20]	@ (801ed9c <fiprintf+0x20>)
 801ed86:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed8a:	6800      	ldr	r0, [r0, #0]
 801ed8c:	9301      	str	r3, [sp, #4]
 801ed8e:	f7ff fd4f 	bl	801e830 <_vfiprintf_r>
 801ed92:	b002      	add	sp, #8
 801ed94:	f85d eb04 	ldr.w	lr, [sp], #4
 801ed98:	b003      	add	sp, #12
 801ed9a:	4770      	bx	lr
 801ed9c:	20000164 	.word	0x20000164

0801eda0 <abort>:
 801eda0:	b508      	push	{r3, lr}
 801eda2:	2006      	movs	r0, #6
 801eda4:	f000 f82c 	bl	801ee00 <raise>
 801eda8:	2001      	movs	r0, #1
 801edaa:	f7e3 fc5b 	bl	8002664 <_exit>

0801edae <_raise_r>:
 801edae:	291f      	cmp	r1, #31
 801edb0:	b538      	push	{r3, r4, r5, lr}
 801edb2:	4605      	mov	r5, r0
 801edb4:	460c      	mov	r4, r1
 801edb6:	d904      	bls.n	801edc2 <_raise_r+0x14>
 801edb8:	2316      	movs	r3, #22
 801edba:	6003      	str	r3, [r0, #0]
 801edbc:	f04f 30ff 	mov.w	r0, #4294967295
 801edc0:	bd38      	pop	{r3, r4, r5, pc}
 801edc2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801edc4:	b112      	cbz	r2, 801edcc <_raise_r+0x1e>
 801edc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801edca:	b94b      	cbnz	r3, 801ede0 <_raise_r+0x32>
 801edcc:	4628      	mov	r0, r5
 801edce:	f000 f831 	bl	801ee34 <_getpid_r>
 801edd2:	4622      	mov	r2, r4
 801edd4:	4601      	mov	r1, r0
 801edd6:	4628      	mov	r0, r5
 801edd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eddc:	f000 b818 	b.w	801ee10 <_kill_r>
 801ede0:	2b01      	cmp	r3, #1
 801ede2:	d00a      	beq.n	801edfa <_raise_r+0x4c>
 801ede4:	1c59      	adds	r1, r3, #1
 801ede6:	d103      	bne.n	801edf0 <_raise_r+0x42>
 801ede8:	2316      	movs	r3, #22
 801edea:	6003      	str	r3, [r0, #0]
 801edec:	2001      	movs	r0, #1
 801edee:	e7e7      	b.n	801edc0 <_raise_r+0x12>
 801edf0:	2100      	movs	r1, #0
 801edf2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801edf6:	4620      	mov	r0, r4
 801edf8:	4798      	blx	r3
 801edfa:	2000      	movs	r0, #0
 801edfc:	e7e0      	b.n	801edc0 <_raise_r+0x12>
	...

0801ee00 <raise>:
 801ee00:	4b02      	ldr	r3, [pc, #8]	@ (801ee0c <raise+0xc>)
 801ee02:	4601      	mov	r1, r0
 801ee04:	6818      	ldr	r0, [r3, #0]
 801ee06:	f7ff bfd2 	b.w	801edae <_raise_r>
 801ee0a:	bf00      	nop
 801ee0c:	20000164 	.word	0x20000164

0801ee10 <_kill_r>:
 801ee10:	b538      	push	{r3, r4, r5, lr}
 801ee12:	4d07      	ldr	r5, [pc, #28]	@ (801ee30 <_kill_r+0x20>)
 801ee14:	2300      	movs	r3, #0
 801ee16:	4604      	mov	r4, r0
 801ee18:	4608      	mov	r0, r1
 801ee1a:	4611      	mov	r1, r2
 801ee1c:	602b      	str	r3, [r5, #0]
 801ee1e:	f7e3 fc11 	bl	8002644 <_kill>
 801ee22:	1c43      	adds	r3, r0, #1
 801ee24:	d102      	bne.n	801ee2c <_kill_r+0x1c>
 801ee26:	682b      	ldr	r3, [r5, #0]
 801ee28:	b103      	cbz	r3, 801ee2c <_kill_r+0x1c>
 801ee2a:	6023      	str	r3, [r4, #0]
 801ee2c:	bd38      	pop	{r3, r4, r5, pc}
 801ee2e:	bf00      	nop
 801ee30:	20002560 	.word	0x20002560

0801ee34 <_getpid_r>:
 801ee34:	f7e3 bbff 	b.w	8002636 <_getpid>

0801ee38 <floor>:
 801ee38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee3c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801ee40:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801ee44:	2e13      	cmp	r6, #19
 801ee46:	4602      	mov	r2, r0
 801ee48:	460b      	mov	r3, r1
 801ee4a:	460c      	mov	r4, r1
 801ee4c:	4605      	mov	r5, r0
 801ee4e:	4680      	mov	r8, r0
 801ee50:	dc35      	bgt.n	801eebe <floor+0x86>
 801ee52:	2e00      	cmp	r6, #0
 801ee54:	da17      	bge.n	801ee86 <floor+0x4e>
 801ee56:	a334      	add	r3, pc, #208	@ (adr r3, 801ef28 <floor+0xf0>)
 801ee58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee5c:	f7e1 f9ee 	bl	800023c <__adddf3>
 801ee60:	2200      	movs	r2, #0
 801ee62:	2300      	movs	r3, #0
 801ee64:	f7e1 fe30 	bl	8000ac8 <__aeabi_dcmpgt>
 801ee68:	b150      	cbz	r0, 801ee80 <floor+0x48>
 801ee6a:	2c00      	cmp	r4, #0
 801ee6c:	da57      	bge.n	801ef1e <floor+0xe6>
 801ee6e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801ee72:	432c      	orrs	r4, r5
 801ee74:	2500      	movs	r5, #0
 801ee76:	42ac      	cmp	r4, r5
 801ee78:	4c2d      	ldr	r4, [pc, #180]	@ (801ef30 <floor+0xf8>)
 801ee7a:	bf08      	it	eq
 801ee7c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801ee80:	4623      	mov	r3, r4
 801ee82:	462a      	mov	r2, r5
 801ee84:	e024      	b.n	801eed0 <floor+0x98>
 801ee86:	4f2b      	ldr	r7, [pc, #172]	@ (801ef34 <floor+0xfc>)
 801ee88:	4137      	asrs	r7, r6
 801ee8a:	ea01 0c07 	and.w	ip, r1, r7
 801ee8e:	ea5c 0c00 	orrs.w	ip, ip, r0
 801ee92:	d01d      	beq.n	801eed0 <floor+0x98>
 801ee94:	a324      	add	r3, pc, #144	@ (adr r3, 801ef28 <floor+0xf0>)
 801ee96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee9a:	f7e1 f9cf 	bl	800023c <__adddf3>
 801ee9e:	2200      	movs	r2, #0
 801eea0:	2300      	movs	r3, #0
 801eea2:	f7e1 fe11 	bl	8000ac8 <__aeabi_dcmpgt>
 801eea6:	2800      	cmp	r0, #0
 801eea8:	d0ea      	beq.n	801ee80 <floor+0x48>
 801eeaa:	2c00      	cmp	r4, #0
 801eeac:	bfbe      	ittt	lt
 801eeae:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801eeb2:	4133      	asrlt	r3, r6
 801eeb4:	18e4      	addlt	r4, r4, r3
 801eeb6:	ea24 0407 	bic.w	r4, r4, r7
 801eeba:	2500      	movs	r5, #0
 801eebc:	e7e0      	b.n	801ee80 <floor+0x48>
 801eebe:	2e33      	cmp	r6, #51	@ 0x33
 801eec0:	dd0a      	ble.n	801eed8 <floor+0xa0>
 801eec2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801eec6:	d103      	bne.n	801eed0 <floor+0x98>
 801eec8:	f7e1 f9b8 	bl	800023c <__adddf3>
 801eecc:	4602      	mov	r2, r0
 801eece:	460b      	mov	r3, r1
 801eed0:	4610      	mov	r0, r2
 801eed2:	4619      	mov	r1, r3
 801eed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eed8:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801eedc:	f04f 3cff 	mov.w	ip, #4294967295
 801eee0:	fa2c f707 	lsr.w	r7, ip, r7
 801eee4:	4207      	tst	r7, r0
 801eee6:	d0f3      	beq.n	801eed0 <floor+0x98>
 801eee8:	a30f      	add	r3, pc, #60	@ (adr r3, 801ef28 <floor+0xf0>)
 801eeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eeee:	f7e1 f9a5 	bl	800023c <__adddf3>
 801eef2:	2200      	movs	r2, #0
 801eef4:	2300      	movs	r3, #0
 801eef6:	f7e1 fde7 	bl	8000ac8 <__aeabi_dcmpgt>
 801eefa:	2800      	cmp	r0, #0
 801eefc:	d0c0      	beq.n	801ee80 <floor+0x48>
 801eefe:	2c00      	cmp	r4, #0
 801ef00:	da0a      	bge.n	801ef18 <floor+0xe0>
 801ef02:	2e14      	cmp	r6, #20
 801ef04:	d101      	bne.n	801ef0a <floor+0xd2>
 801ef06:	3401      	adds	r4, #1
 801ef08:	e006      	b.n	801ef18 <floor+0xe0>
 801ef0a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801ef0e:	2301      	movs	r3, #1
 801ef10:	40b3      	lsls	r3, r6
 801ef12:	441d      	add	r5, r3
 801ef14:	4545      	cmp	r5, r8
 801ef16:	d3f6      	bcc.n	801ef06 <floor+0xce>
 801ef18:	ea25 0507 	bic.w	r5, r5, r7
 801ef1c:	e7b0      	b.n	801ee80 <floor+0x48>
 801ef1e:	2500      	movs	r5, #0
 801ef20:	462c      	mov	r4, r5
 801ef22:	e7ad      	b.n	801ee80 <floor+0x48>
 801ef24:	f3af 8000 	nop.w
 801ef28:	8800759c 	.word	0x8800759c
 801ef2c:	7e37e43c 	.word	0x7e37e43c
 801ef30:	bff00000 	.word	0xbff00000
 801ef34:	000fffff 	.word	0x000fffff

0801ef38 <_init>:
 801ef38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef3a:	bf00      	nop
 801ef3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef3e:	bc08      	pop	{r3}
 801ef40:	469e      	mov	lr, r3
 801ef42:	4770      	bx	lr

0801ef44 <_fini>:
 801ef44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef46:	bf00      	nop
 801ef48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef4a:	bc08      	pop	{r3}
 801ef4c:	469e      	mov	lr, r3
 801ef4e:	4770      	bx	lr
