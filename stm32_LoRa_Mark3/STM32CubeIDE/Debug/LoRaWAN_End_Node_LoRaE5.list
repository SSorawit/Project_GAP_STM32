
LoRaWAN_End_Node_LoRaE5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123c0  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  080124f8  080124f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012bc0  08012bc0  000140e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012bc0  08012bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012bc8  08012bc8  000140e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012bc8  08012bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012bcc  08012bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  08012bd0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001388  200000e8  08012cb8  000140e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20001470  08012cb8  00014470  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000140e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003aa38  00000000  00000000  00014112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007ae5  00000000  00000000  0004eb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ad8  00000000  00000000  00056630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000020c8  00000000  00000000  00059108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000beac  00000000  00000000  0005b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036c88  00000000  00000000  0006707c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8d18  00000000  00000000  0009dd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166a1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b278  00000000  00000000  00166a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00171cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	200000e8 	.word	0x200000e8
 8000154:	00000000 	.word	0x00000000
 8000158:	080124e0 	.word	0x080124e0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	200000ec 	.word	0x200000ec
 8000174:	080124e0 	.word	0x080124e0

08000178 <__aeabi_drsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800017c:	e002      	b.n	8000184 <__adddf3>
 800017e:	bf00      	nop

08000180 <__aeabi_dsub>:
 8000180:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000184 <__adddf3>:
 8000184:	b530      	push	{r4, r5, lr}
 8000186:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018e:	ea94 0f05 	teq	r4, r5
 8000192:	bf08      	it	eq
 8000194:	ea90 0f02 	teqeq	r0, r2
 8000198:	bf1f      	itttt	ne
 800019a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001aa:	f000 80e2 	beq.w	8000372 <__adddf3+0x1ee>
 80001ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b6:	bfb8      	it	lt
 80001b8:	426d      	neglt	r5, r5
 80001ba:	dd0c      	ble.n	80001d6 <__adddf3+0x52>
 80001bc:	442c      	add	r4, r5
 80001be:	ea80 0202 	eor.w	r2, r0, r2
 80001c2:	ea81 0303 	eor.w	r3, r1, r3
 80001c6:	ea82 0000 	eor.w	r0, r2, r0
 80001ca:	ea83 0101 	eor.w	r1, r3, r1
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	2d36      	cmp	r5, #54	@ 0x36
 80001d8:	bf88      	it	hi
 80001da:	bd30      	pophi	{r4, r5, pc}
 80001dc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x70>
 80001ee:	4240      	negs	r0, r0
 80001f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000200:	d002      	beq.n	8000208 <__adddf3+0x84>
 8000202:	4252      	negs	r2, r2
 8000204:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000208:	ea94 0f05 	teq	r4, r5
 800020c:	f000 80a7 	beq.w	800035e <__adddf3+0x1da>
 8000210:	f1a4 0401 	sub.w	r4, r4, #1
 8000214:	f1d5 0e20 	rsbs	lr, r5, #32
 8000218:	db0d      	blt.n	8000236 <__adddf3+0xb2>
 800021a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021e:	fa22 f205 	lsr.w	r2, r2, r5
 8000222:	1880      	adds	r0, r0, r2
 8000224:	f141 0100 	adc.w	r1, r1, #0
 8000228:	fa03 f20e 	lsl.w	r2, r3, lr
 800022c:	1880      	adds	r0, r0, r2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	4159      	adcs	r1, r3
 8000234:	e00e      	b.n	8000254 <__adddf3+0xd0>
 8000236:	f1a5 0520 	sub.w	r5, r5, #32
 800023a:	f10e 0e20 	add.w	lr, lr, #32
 800023e:	2a01      	cmp	r2, #1
 8000240:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000244:	bf28      	it	cs
 8000246:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	18c0      	adds	r0, r0, r3
 8000250:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000254:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000258:	d507      	bpl.n	800026a <__adddf3+0xe6>
 800025a:	f04f 0e00 	mov.w	lr, #0
 800025e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000262:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000266:	eb6e 0101 	sbc.w	r1, lr, r1
 800026a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026e:	d31b      	bcc.n	80002a8 <__adddf3+0x124>
 8000270:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000274:	d30c      	bcc.n	8000290 <__adddf3+0x10c>
 8000276:	0849      	lsrs	r1, r1, #1
 8000278:	ea5f 0030 	movs.w	r0, r0, rrx
 800027c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000280:	f104 0401 	add.w	r4, r4, #1
 8000284:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000288:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800028c:	f080 809a 	bcs.w	80003c4 <__adddf3+0x240>
 8000290:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	ea41 0105 	orr.w	r1, r1, r5
 80002a6:	bd30      	pop	{r4, r5, pc}
 80002a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002ac:	4140      	adcs	r0, r0
 80002ae:	eb41 0101 	adc.w	r1, r1, r1
 80002b2:	3c01      	subs	r4, #1
 80002b4:	bf28      	it	cs
 80002b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ba:	d2e9      	bcs.n	8000290 <__adddf3+0x10c>
 80002bc:	f091 0f00 	teq	r1, #0
 80002c0:	bf04      	itt	eq
 80002c2:	4601      	moveq	r1, r0
 80002c4:	2000      	moveq	r0, #0
 80002c6:	fab1 f381 	clz	r3, r1
 80002ca:	bf08      	it	eq
 80002cc:	3320      	addeq	r3, #32
 80002ce:	f1a3 030b 	sub.w	r3, r3, #11
 80002d2:	f1b3 0220 	subs.w	r2, r3, #32
 80002d6:	da0c      	bge.n	80002f2 <__adddf3+0x16e>
 80002d8:	320c      	adds	r2, #12
 80002da:	dd08      	ble.n	80002ee <__adddf3+0x16a>
 80002dc:	f102 0c14 	add.w	ip, r2, #20
 80002e0:	f1c2 020c 	rsb	r2, r2, #12
 80002e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e8:	fa21 f102 	lsr.w	r1, r1, r2
 80002ec:	e00c      	b.n	8000308 <__adddf3+0x184>
 80002ee:	f102 0214 	add.w	r2, r2, #20
 80002f2:	bfd8      	it	le
 80002f4:	f1c2 0c20 	rsble	ip, r2, #32
 80002f8:	fa01 f102 	lsl.w	r1, r1, r2
 80002fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000300:	bfdc      	itt	le
 8000302:	ea41 010c 	orrle.w	r1, r1, ip
 8000306:	4090      	lslle	r0, r2
 8000308:	1ae4      	subs	r4, r4, r3
 800030a:	bfa2      	ittt	ge
 800030c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000310:	4329      	orrge	r1, r5
 8000312:	bd30      	popge	{r4, r5, pc}
 8000314:	ea6f 0404 	mvn.w	r4, r4
 8000318:	3c1f      	subs	r4, #31
 800031a:	da1c      	bge.n	8000356 <__adddf3+0x1d2>
 800031c:	340c      	adds	r4, #12
 800031e:	dc0e      	bgt.n	800033e <__adddf3+0x1ba>
 8000320:	f104 0414 	add.w	r4, r4, #20
 8000324:	f1c4 0220 	rsb	r2, r4, #32
 8000328:	fa20 f004 	lsr.w	r0, r0, r4
 800032c:	fa01 f302 	lsl.w	r3, r1, r2
 8000330:	ea40 0003 	orr.w	r0, r0, r3
 8000334:	fa21 f304 	lsr.w	r3, r1, r4
 8000338:	ea45 0103 	orr.w	r1, r5, r3
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	f1c4 040c 	rsb	r4, r4, #12
 8000342:	f1c4 0220 	rsb	r2, r4, #32
 8000346:	fa20 f002 	lsr.w	r0, r0, r2
 800034a:	fa01 f304 	lsl.w	r3, r1, r4
 800034e:	ea40 0003 	orr.w	r0, r0, r3
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	fa21 f004 	lsr.w	r0, r1, r4
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	f094 0f00 	teq	r4, #0
 8000362:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000366:	bf06      	itte	eq
 8000368:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800036c:	3401      	addeq	r4, #1
 800036e:	3d01      	subne	r5, #1
 8000370:	e74e      	b.n	8000210 <__adddf3+0x8c>
 8000372:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000376:	bf18      	it	ne
 8000378:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800037c:	d029      	beq.n	80003d2 <__adddf3+0x24e>
 800037e:	ea94 0f05 	teq	r4, r5
 8000382:	bf08      	it	eq
 8000384:	ea90 0f02 	teqeq	r0, r2
 8000388:	d005      	beq.n	8000396 <__adddf3+0x212>
 800038a:	ea54 0c00 	orrs.w	ip, r4, r0
 800038e:	bf04      	itt	eq
 8000390:	4619      	moveq	r1, r3
 8000392:	4610      	moveq	r0, r2
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	ea91 0f03 	teq	r1, r3
 800039a:	bf1e      	ittt	ne
 800039c:	2100      	movne	r1, #0
 800039e:	2000      	movne	r0, #0
 80003a0:	bd30      	popne	{r4, r5, pc}
 80003a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a6:	d105      	bne.n	80003b4 <__adddf3+0x230>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	4149      	adcs	r1, r1
 80003ac:	bf28      	it	cs
 80003ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003b2:	bd30      	pop	{r4, r5, pc}
 80003b4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b8:	bf3c      	itt	cc
 80003ba:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003be:	bd30      	popcc	{r4, r5, pc}
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003cc:	f04f 0000 	mov.w	r0, #0
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf1a      	itte	ne
 80003d8:	4619      	movne	r1, r3
 80003da:	4610      	movne	r0, r2
 80003dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e0:	bf1c      	itt	ne
 80003e2:	460b      	movne	r3, r1
 80003e4:	4602      	movne	r2, r0
 80003e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ea:	bf06      	itte	eq
 80003ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f0:	ea91 0f03 	teqeq	r1, r3
 80003f4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	bf00      	nop

080003fc <__aeabi_ui2d>:
 80003fc:	f090 0f00 	teq	r0, #0
 8000400:	bf04      	itt	eq
 8000402:	2100      	moveq	r1, #0
 8000404:	4770      	bxeq	lr
 8000406:	b530      	push	{r4, r5, lr}
 8000408:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800040c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000410:	f04f 0500 	mov.w	r5, #0
 8000414:	f04f 0100 	mov.w	r1, #0
 8000418:	e750      	b.n	80002bc <__adddf3+0x138>
 800041a:	bf00      	nop

0800041c <__aeabi_i2d>:
 800041c:	f090 0f00 	teq	r0, #0
 8000420:	bf04      	itt	eq
 8000422:	2100      	moveq	r1, #0
 8000424:	4770      	bxeq	lr
 8000426:	b530      	push	{r4, r5, lr}
 8000428:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800042c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000430:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000434:	bf48      	it	mi
 8000436:	4240      	negmi	r0, r0
 8000438:	f04f 0100 	mov.w	r1, #0
 800043c:	e73e      	b.n	80002bc <__adddf3+0x138>
 800043e:	bf00      	nop

08000440 <__aeabi_f2d>:
 8000440:	0042      	lsls	r2, r0, #1
 8000442:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000446:	ea4f 0131 	mov.w	r1, r1, rrx
 800044a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044e:	bf1f      	itttt	ne
 8000450:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000454:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000458:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800045c:	4770      	bxne	lr
 800045e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000462:	bf08      	it	eq
 8000464:	4770      	bxeq	lr
 8000466:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800046a:	bf04      	itt	eq
 800046c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e71c      	b.n	80002bc <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aed8 	beq.w	800026a <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6bd      	b.n	800026a <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__gedf2>:
 80004f0:	f04f 3cff 	mov.w	ip, #4294967295
 80004f4:	e006      	b.n	8000504 <__cmpdf2+0x4>
 80004f6:	bf00      	nop

080004f8 <__ledf2>:
 80004f8:	f04f 0c01 	mov.w	ip, #1
 80004fc:	e002      	b.n	8000504 <__cmpdf2+0x4>
 80004fe:	bf00      	nop

08000500 <__cmpdf2>:
 8000500:	f04f 0c01 	mov.w	ip, #1
 8000504:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000508:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800050c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000510:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000514:	bf18      	it	ne
 8000516:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800051a:	d01b      	beq.n	8000554 <__cmpdf2+0x54>
 800051c:	b001      	add	sp, #4
 800051e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000522:	bf0c      	ite	eq
 8000524:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000528:	ea91 0f03 	teqne	r1, r3
 800052c:	bf02      	ittt	eq
 800052e:	ea90 0f02 	teqeq	r0, r2
 8000532:	2000      	moveq	r0, #0
 8000534:	4770      	bxeq	lr
 8000536:	f110 0f00 	cmn.w	r0, #0
 800053a:	ea91 0f03 	teq	r1, r3
 800053e:	bf58      	it	pl
 8000540:	4299      	cmppl	r1, r3
 8000542:	bf08      	it	eq
 8000544:	4290      	cmpeq	r0, r2
 8000546:	bf2c      	ite	cs
 8000548:	17d8      	asrcs	r0, r3, #31
 800054a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800054e:	f040 0001 	orr.w	r0, r0, #1
 8000552:	4770      	bx	lr
 8000554:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000558:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800055c:	d102      	bne.n	8000564 <__cmpdf2+0x64>
 800055e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000562:	d107      	bne.n	8000574 <__cmpdf2+0x74>
 8000564:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d1d6      	bne.n	800051c <__cmpdf2+0x1c>
 800056e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000572:	d0d3      	beq.n	800051c <__cmpdf2+0x1c>
 8000574:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <__aeabi_cdrcmple>:
 800057c:	4684      	mov	ip, r0
 800057e:	4610      	mov	r0, r2
 8000580:	4662      	mov	r2, ip
 8000582:	468c      	mov	ip, r1
 8000584:	4619      	mov	r1, r3
 8000586:	4663      	mov	r3, ip
 8000588:	e000      	b.n	800058c <__aeabi_cdcmpeq>
 800058a:	bf00      	nop

0800058c <__aeabi_cdcmpeq>:
 800058c:	b501      	push	{r0, lr}
 800058e:	f7ff ffb7 	bl	8000500 <__cmpdf2>
 8000592:	2800      	cmp	r0, #0
 8000594:	bf48      	it	mi
 8000596:	f110 0f00 	cmnmi.w	r0, #0
 800059a:	bd01      	pop	{r0, pc}

0800059c <__aeabi_dcmpeq>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff fff4 	bl	800058c <__aeabi_cdcmpeq>
 80005a4:	bf0c      	ite	eq
 80005a6:	2001      	moveq	r0, #1
 80005a8:	2000      	movne	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmplt>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffea 	bl	800058c <__aeabi_cdcmpeq>
 80005b8:	bf34      	ite	cc
 80005ba:	2001      	movcc	r0, #1
 80005bc:	2000      	movcs	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmple>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffe0 	bl	800058c <__aeabi_cdcmpeq>
 80005cc:	bf94      	ite	ls
 80005ce:	2001      	movls	r0, #1
 80005d0:	2000      	movhi	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_dcmpge>:
 80005d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005dc:	f7ff ffce 	bl	800057c <__aeabi_cdrcmple>
 80005e0:	bf94      	ite	ls
 80005e2:	2001      	movls	r0, #1
 80005e4:	2000      	movhi	r0, #0
 80005e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ea:	bf00      	nop

080005ec <__aeabi_dcmpgt>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff ffc4 	bl	800057c <__aeabi_cdrcmple>
 80005f4:	bf34      	ite	cc
 80005f6:	2001      	movcc	r0, #1
 80005f8:	2000      	movcs	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_d2iz>:
 8000600:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000604:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000608:	d215      	bcs.n	8000636 <__aeabi_d2iz+0x36>
 800060a:	d511      	bpl.n	8000630 <__aeabi_d2iz+0x30>
 800060c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000610:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000614:	d912      	bls.n	800063c <__aeabi_d2iz+0x3c>
 8000616:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800061a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800061e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000622:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000626:	fa23 f002 	lsr.w	r0, r3, r2
 800062a:	bf18      	it	ne
 800062c:	4240      	negne	r0, r0
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800063a:	d105      	bne.n	8000648 <__aeabi_d2iz+0x48>
 800063c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000640:	bf08      	it	eq
 8000642:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop

08000650 <__aeabi_frsub>:
 8000650:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000654:	e002      	b.n	800065c <__addsf3>
 8000656:	bf00      	nop

08000658 <__aeabi_fsub>:
 8000658:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800065c <__addsf3>:
 800065c:	0042      	lsls	r2, r0, #1
 800065e:	bf1f      	itttt	ne
 8000660:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000664:	ea92 0f03 	teqne	r2, r3
 8000668:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800066c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000670:	d06a      	beq.n	8000748 <__addsf3+0xec>
 8000672:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000676:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800067a:	bfc1      	itttt	gt
 800067c:	18d2      	addgt	r2, r2, r3
 800067e:	4041      	eorgt	r1, r0
 8000680:	4048      	eorgt	r0, r1
 8000682:	4041      	eorgt	r1, r0
 8000684:	bfb8      	it	lt
 8000686:	425b      	neglt	r3, r3
 8000688:	2b19      	cmp	r3, #25
 800068a:	bf88      	it	hi
 800068c:	4770      	bxhi	lr
 800068e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000692:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000696:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800069a:	bf18      	it	ne
 800069c:	4240      	negne	r0, r0
 800069e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4249      	negne	r1, r1
 80006ae:	ea92 0f03 	teq	r2, r3
 80006b2:	d03f      	beq.n	8000734 <__addsf3+0xd8>
 80006b4:	f1a2 0201 	sub.w	r2, r2, #1
 80006b8:	fa41 fc03 	asr.w	ip, r1, r3
 80006bc:	eb10 000c 	adds.w	r0, r0, ip
 80006c0:	f1c3 0320 	rsb	r3, r3, #32
 80006c4:	fa01 f103 	lsl.w	r1, r1, r3
 80006c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006cc:	d502      	bpl.n	80006d4 <__addsf3+0x78>
 80006ce:	4249      	negs	r1, r1
 80006d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006d8:	d313      	bcc.n	8000702 <__addsf3+0xa6>
 80006da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006de:	d306      	bcc.n	80006ee <__addsf3+0x92>
 80006e0:	0840      	lsrs	r0, r0, #1
 80006e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006e6:	f102 0201 	add.w	r2, r2, #1
 80006ea:	2afe      	cmp	r2, #254	@ 0xfe
 80006ec:	d251      	bcs.n	8000792 <__addsf3+0x136>
 80006ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80006f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006f6:	bf08      	it	eq
 80006f8:	f020 0001 	biceq.w	r0, r0, #1
 80006fc:	ea40 0003 	orr.w	r0, r0, r3
 8000700:	4770      	bx	lr
 8000702:	0049      	lsls	r1, r1, #1
 8000704:	eb40 0000 	adc.w	r0, r0, r0
 8000708:	3a01      	subs	r2, #1
 800070a:	bf28      	it	cs
 800070c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000710:	d2ed      	bcs.n	80006ee <__addsf3+0x92>
 8000712:	fab0 fc80 	clz	ip, r0
 8000716:	f1ac 0c08 	sub.w	ip, ip, #8
 800071a:	ebb2 020c 	subs.w	r2, r2, ip
 800071e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000722:	bfaa      	itet	ge
 8000724:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000728:	4252      	neglt	r2, r2
 800072a:	4318      	orrge	r0, r3
 800072c:	bfbc      	itt	lt
 800072e:	40d0      	lsrlt	r0, r2
 8000730:	4318      	orrlt	r0, r3
 8000732:	4770      	bx	lr
 8000734:	f092 0f00 	teq	r2, #0
 8000738:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800073c:	bf06      	itte	eq
 800073e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000742:	3201      	addeq	r2, #1
 8000744:	3b01      	subne	r3, #1
 8000746:	e7b5      	b.n	80006b4 <__addsf3+0x58>
 8000748:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800074c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000750:	bf18      	it	ne
 8000752:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000756:	d021      	beq.n	800079c <__addsf3+0x140>
 8000758:	ea92 0f03 	teq	r2, r3
 800075c:	d004      	beq.n	8000768 <__addsf3+0x10c>
 800075e:	f092 0f00 	teq	r2, #0
 8000762:	bf08      	it	eq
 8000764:	4608      	moveq	r0, r1
 8000766:	4770      	bx	lr
 8000768:	ea90 0f01 	teq	r0, r1
 800076c:	bf1c      	itt	ne
 800076e:	2000      	movne	r0, #0
 8000770:	4770      	bxne	lr
 8000772:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000776:	d104      	bne.n	8000782 <__addsf3+0x126>
 8000778:	0040      	lsls	r0, r0, #1
 800077a:	bf28      	it	cs
 800077c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000780:	4770      	bx	lr
 8000782:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000786:	bf3c      	itt	cc
 8000788:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800078c:	4770      	bxcc	lr
 800078e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000792:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000796:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800079a:	4770      	bx	lr
 800079c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007a0:	bf16      	itet	ne
 80007a2:	4608      	movne	r0, r1
 80007a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007a8:	4601      	movne	r1, r0
 80007aa:	0242      	lsls	r2, r0, #9
 80007ac:	bf06      	itte	eq
 80007ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007b2:	ea90 0f01 	teqeq	r0, r1
 80007b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007ba:	4770      	bx	lr

080007bc <__aeabi_ui2f>:
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	e004      	b.n	80007cc <__aeabi_i2f+0x8>
 80007c2:	bf00      	nop

080007c4 <__aeabi_i2f>:
 80007c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007c8:	bf48      	it	mi
 80007ca:	4240      	negmi	r0, r0
 80007cc:	ea5f 0c00 	movs.w	ip, r0
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007d8:	4601      	mov	r1, r0
 80007da:	f04f 0000 	mov.w	r0, #0
 80007de:	e01c      	b.n	800081a <__aeabi_l2f+0x2a>

080007e0 <__aeabi_ul2f>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	f04f 0300 	mov.w	r3, #0
 80007ec:	e00a      	b.n	8000804 <__aeabi_l2f+0x14>
 80007ee:	bf00      	nop

080007f0 <__aeabi_l2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80007fc:	d502      	bpl.n	8000804 <__aeabi_l2f+0x14>
 80007fe:	4240      	negs	r0, r0
 8000800:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000804:	ea5f 0c01 	movs.w	ip, r1
 8000808:	bf02      	ittt	eq
 800080a:	4684      	moveq	ip, r0
 800080c:	4601      	moveq	r1, r0
 800080e:	2000      	moveq	r0, #0
 8000810:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000814:	bf08      	it	eq
 8000816:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800081a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800081e:	fabc f28c 	clz	r2, ip
 8000822:	3a08      	subs	r2, #8
 8000824:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000828:	db10      	blt.n	800084c <__aeabi_l2f+0x5c>
 800082a:	fa01 fc02 	lsl.w	ip, r1, r2
 800082e:	4463      	add	r3, ip
 8000830:	fa00 fc02 	lsl.w	ip, r0, r2
 8000834:	f1c2 0220 	rsb	r2, r2, #32
 8000838:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800083c:	fa20 f202 	lsr.w	r2, r0, r2
 8000840:	eb43 0002 	adc.w	r0, r3, r2
 8000844:	bf08      	it	eq
 8000846:	f020 0001 	biceq.w	r0, r0, #1
 800084a:	4770      	bx	lr
 800084c:	f102 0220 	add.w	r2, r2, #32
 8000850:	fa01 fc02 	lsl.w	ip, r1, r2
 8000854:	f1c2 0220 	rsb	r2, r2, #32
 8000858:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800085c:	fa21 f202 	lsr.w	r2, r1, r2
 8000860:	eb43 0002 	adc.w	r0, r3, r2
 8000864:	bf08      	it	eq
 8000866:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800086a:	4770      	bx	lr

0800086c <__aeabi_uldivmod>:
 800086c:	b953      	cbnz	r3, 8000884 <__aeabi_uldivmod+0x18>
 800086e:	b94a      	cbnz	r2, 8000884 <__aeabi_uldivmod+0x18>
 8000870:	2900      	cmp	r1, #0
 8000872:	bf08      	it	eq
 8000874:	2800      	cmpeq	r0, #0
 8000876:	bf1c      	itt	ne
 8000878:	f04f 31ff 	movne.w	r1, #4294967295
 800087c:	f04f 30ff 	movne.w	r0, #4294967295
 8000880:	f000 b96a 	b.w	8000b58 <__aeabi_idiv0>
 8000884:	f1ad 0c08 	sub.w	ip, sp, #8
 8000888:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800088c:	f000 f806 	bl	800089c <__udivmoddi4>
 8000890:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000898:	b004      	add	sp, #16
 800089a:	4770      	bx	lr

0800089c <__udivmoddi4>:
 800089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a0:	9d08      	ldr	r5, [sp, #32]
 80008a2:	460c      	mov	r4, r1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d14e      	bne.n	8000946 <__udivmoddi4+0xaa>
 80008a8:	4694      	mov	ip, r2
 80008aa:	458c      	cmp	ip, r1
 80008ac:	4686      	mov	lr, r0
 80008ae:	fab2 f282 	clz	r2, r2
 80008b2:	d962      	bls.n	800097a <__udivmoddi4+0xde>
 80008b4:	b14a      	cbz	r2, 80008ca <__udivmoddi4+0x2e>
 80008b6:	f1c2 0320 	rsb	r3, r2, #32
 80008ba:	4091      	lsls	r1, r2
 80008bc:	fa20 f303 	lsr.w	r3, r0, r3
 80008c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008c4:	4319      	orrs	r1, r3
 80008c6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ce:	fa1f f68c 	uxth.w	r6, ip
 80008d2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008da:	fb07 1114 	mls	r1, r7, r4, r1
 80008de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008e2:	fb04 f106 	mul.w	r1, r4, r6
 80008e6:	4299      	cmp	r1, r3
 80008e8:	d90a      	bls.n	8000900 <__udivmoddi4+0x64>
 80008ea:	eb1c 0303 	adds.w	r3, ip, r3
 80008ee:	f104 30ff 	add.w	r0, r4, #4294967295
 80008f2:	f080 8112 	bcs.w	8000b1a <__udivmoddi4+0x27e>
 80008f6:	4299      	cmp	r1, r3
 80008f8:	f240 810f 	bls.w	8000b1a <__udivmoddi4+0x27e>
 80008fc:	3c02      	subs	r4, #2
 80008fe:	4463      	add	r3, ip
 8000900:	1a59      	subs	r1, r3, r1
 8000902:	fa1f f38e 	uxth.w	r3, lr
 8000906:	fbb1 f0f7 	udiv	r0, r1, r7
 800090a:	fb07 1110 	mls	r1, r7, r0, r1
 800090e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000912:	fb00 f606 	mul.w	r6, r0, r6
 8000916:	429e      	cmp	r6, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x94>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000922:	f080 80fc 	bcs.w	8000b1e <__udivmoddi4+0x282>
 8000926:	429e      	cmp	r6, r3
 8000928:	f240 80f9 	bls.w	8000b1e <__udivmoddi4+0x282>
 800092c:	4463      	add	r3, ip
 800092e:	3802      	subs	r0, #2
 8000930:	1b9b      	subs	r3, r3, r6
 8000932:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000936:	2100      	movs	r1, #0
 8000938:	b11d      	cbz	r5, 8000942 <__udivmoddi4+0xa6>
 800093a:	40d3      	lsrs	r3, r2
 800093c:	2200      	movs	r2, #0
 800093e:	e9c5 3200 	strd	r3, r2, [r5]
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	428b      	cmp	r3, r1
 8000948:	d905      	bls.n	8000956 <__udivmoddi4+0xba>
 800094a:	b10d      	cbz	r5, 8000950 <__udivmoddi4+0xb4>
 800094c:	e9c5 0100 	strd	r0, r1, [r5]
 8000950:	2100      	movs	r1, #0
 8000952:	4608      	mov	r0, r1
 8000954:	e7f5      	b.n	8000942 <__udivmoddi4+0xa6>
 8000956:	fab3 f183 	clz	r1, r3
 800095a:	2900      	cmp	r1, #0
 800095c:	d146      	bne.n	80009ec <__udivmoddi4+0x150>
 800095e:	42a3      	cmp	r3, r4
 8000960:	d302      	bcc.n	8000968 <__udivmoddi4+0xcc>
 8000962:	4290      	cmp	r0, r2
 8000964:	f0c0 80f0 	bcc.w	8000b48 <__udivmoddi4+0x2ac>
 8000968:	1a86      	subs	r6, r0, r2
 800096a:	eb64 0303 	sbc.w	r3, r4, r3
 800096e:	2001      	movs	r0, #1
 8000970:	2d00      	cmp	r5, #0
 8000972:	d0e6      	beq.n	8000942 <__udivmoddi4+0xa6>
 8000974:	e9c5 6300 	strd	r6, r3, [r5]
 8000978:	e7e3      	b.n	8000942 <__udivmoddi4+0xa6>
 800097a:	2a00      	cmp	r2, #0
 800097c:	f040 8090 	bne.w	8000aa0 <__udivmoddi4+0x204>
 8000980:	eba1 040c 	sub.w	r4, r1, ip
 8000984:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000988:	fa1f f78c 	uxth.w	r7, ip
 800098c:	2101      	movs	r1, #1
 800098e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000992:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000996:	fb08 4416 	mls	r4, r8, r6, r4
 800099a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800099e:	fb07 f006 	mul.w	r0, r7, r6
 80009a2:	4298      	cmp	r0, r3
 80009a4:	d908      	bls.n	80009b8 <__udivmoddi4+0x11c>
 80009a6:	eb1c 0303 	adds.w	r3, ip, r3
 80009aa:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x11a>
 80009b0:	4298      	cmp	r0, r3
 80009b2:	f200 80cd 	bhi.w	8000b50 <__udivmoddi4+0x2b4>
 80009b6:	4626      	mov	r6, r4
 80009b8:	1a1c      	subs	r4, r3, r0
 80009ba:	fa1f f38e 	uxth.w	r3, lr
 80009be:	fbb4 f0f8 	udiv	r0, r4, r8
 80009c2:	fb08 4410 	mls	r4, r8, r0, r4
 80009c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ca:	fb00 f707 	mul.w	r7, r0, r7
 80009ce:	429f      	cmp	r7, r3
 80009d0:	d908      	bls.n	80009e4 <__udivmoddi4+0x148>
 80009d2:	eb1c 0303 	adds.w	r3, ip, r3
 80009d6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009da:	d202      	bcs.n	80009e2 <__udivmoddi4+0x146>
 80009dc:	429f      	cmp	r7, r3
 80009de:	f200 80b0 	bhi.w	8000b42 <__udivmoddi4+0x2a6>
 80009e2:	4620      	mov	r0, r4
 80009e4:	1bdb      	subs	r3, r3, r7
 80009e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ea:	e7a5      	b.n	8000938 <__udivmoddi4+0x9c>
 80009ec:	f1c1 0620 	rsb	r6, r1, #32
 80009f0:	408b      	lsls	r3, r1
 80009f2:	fa22 f706 	lsr.w	r7, r2, r6
 80009f6:	431f      	orrs	r7, r3
 80009f8:	fa20 fc06 	lsr.w	ip, r0, r6
 80009fc:	fa04 f301 	lsl.w	r3, r4, r1
 8000a00:	ea43 030c 	orr.w	r3, r3, ip
 8000a04:	40f4      	lsrs	r4, r6
 8000a06:	fa00 f801 	lsl.w	r8, r0, r1
 8000a0a:	0c38      	lsrs	r0, r7, #16
 8000a0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a10:	fbb4 fef0 	udiv	lr, r4, r0
 8000a14:	fa1f fc87 	uxth.w	ip, r7
 8000a18:	fb00 441e 	mls	r4, r0, lr, r4
 8000a1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a20:	fb0e f90c 	mul.w	r9, lr, ip
 8000a24:	45a1      	cmp	r9, r4
 8000a26:	fa02 f201 	lsl.w	r2, r2, r1
 8000a2a:	d90a      	bls.n	8000a42 <__udivmoddi4+0x1a6>
 8000a2c:	193c      	adds	r4, r7, r4
 8000a2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a32:	f080 8084 	bcs.w	8000b3e <__udivmoddi4+0x2a2>
 8000a36:	45a1      	cmp	r9, r4
 8000a38:	f240 8081 	bls.w	8000b3e <__udivmoddi4+0x2a2>
 8000a3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a40:	443c      	add	r4, r7
 8000a42:	eba4 0409 	sub.w	r4, r4, r9
 8000a46:	fa1f f983 	uxth.w	r9, r3
 8000a4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a5a:	45a4      	cmp	ip, r4
 8000a5c:	d907      	bls.n	8000a6e <__udivmoddi4+0x1d2>
 8000a5e:	193c      	adds	r4, r7, r4
 8000a60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a64:	d267      	bcs.n	8000b36 <__udivmoddi4+0x29a>
 8000a66:	45a4      	cmp	ip, r4
 8000a68:	d965      	bls.n	8000b36 <__udivmoddi4+0x29a>
 8000a6a:	3b02      	subs	r3, #2
 8000a6c:	443c      	add	r4, r7
 8000a6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a72:	fba0 9302 	umull	r9, r3, r0, r2
 8000a76:	eba4 040c 	sub.w	r4, r4, ip
 8000a7a:	429c      	cmp	r4, r3
 8000a7c:	46ce      	mov	lr, r9
 8000a7e:	469c      	mov	ip, r3
 8000a80:	d351      	bcc.n	8000b26 <__udivmoddi4+0x28a>
 8000a82:	d04e      	beq.n	8000b22 <__udivmoddi4+0x286>
 8000a84:	b155      	cbz	r5, 8000a9c <__udivmoddi4+0x200>
 8000a86:	ebb8 030e 	subs.w	r3, r8, lr
 8000a8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a92:	40cb      	lsrs	r3, r1
 8000a94:	431e      	orrs	r6, r3
 8000a96:	40cc      	lsrs	r4, r1
 8000a98:	e9c5 6400 	strd	r6, r4, [r5]
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	e750      	b.n	8000942 <__udivmoddi4+0xa6>
 8000aa0:	f1c2 0320 	rsb	r3, r2, #32
 8000aa4:	fa20 f103 	lsr.w	r1, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	fa24 f303 	lsr.w	r3, r4, r3
 8000ab0:	4094      	lsls	r4, r2
 8000ab2:	430c      	orrs	r4, r1
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000abc:	fa1f f78c 	uxth.w	r7, ip
 8000ac0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ac4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ac8:	0c23      	lsrs	r3, r4, #16
 8000aca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ace:	fb00 f107 	mul.w	r1, r0, r7
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	d908      	bls.n	8000ae8 <__udivmoddi4+0x24c>
 8000ad6:	eb1c 0303 	adds.w	r3, ip, r3
 8000ada:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ade:	d22c      	bcs.n	8000b3a <__udivmoddi4+0x29e>
 8000ae0:	4299      	cmp	r1, r3
 8000ae2:	d92a      	bls.n	8000b3a <__udivmoddi4+0x29e>
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000af0:	fb08 3311 	mls	r3, r8, r1, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb01 f307 	mul.w	r3, r1, r7
 8000afc:	42a3      	cmp	r3, r4
 8000afe:	d908      	bls.n	8000b12 <__udivmoddi4+0x276>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b08:	d213      	bcs.n	8000b32 <__udivmoddi4+0x296>
 8000b0a:	42a3      	cmp	r3, r4
 8000b0c:	d911      	bls.n	8000b32 <__udivmoddi4+0x296>
 8000b0e:	3902      	subs	r1, #2
 8000b10:	4464      	add	r4, ip
 8000b12:	1ae4      	subs	r4, r4, r3
 8000b14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b18:	e739      	b.n	800098e <__udivmoddi4+0xf2>
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	e6f0      	b.n	8000900 <__udivmoddi4+0x64>
 8000b1e:	4608      	mov	r0, r1
 8000b20:	e706      	b.n	8000930 <__udivmoddi4+0x94>
 8000b22:	45c8      	cmp	r8, r9
 8000b24:	d2ae      	bcs.n	8000a84 <__udivmoddi4+0x1e8>
 8000b26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b2e:	3801      	subs	r0, #1
 8000b30:	e7a8      	b.n	8000a84 <__udivmoddi4+0x1e8>
 8000b32:	4631      	mov	r1, r6
 8000b34:	e7ed      	b.n	8000b12 <__udivmoddi4+0x276>
 8000b36:	4603      	mov	r3, r0
 8000b38:	e799      	b.n	8000a6e <__udivmoddi4+0x1d2>
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	e7d4      	b.n	8000ae8 <__udivmoddi4+0x24c>
 8000b3e:	46d6      	mov	lr, sl
 8000b40:	e77f      	b.n	8000a42 <__udivmoddi4+0x1a6>
 8000b42:	4463      	add	r3, ip
 8000b44:	3802      	subs	r0, #2
 8000b46:	e74d      	b.n	80009e4 <__udivmoddi4+0x148>
 8000b48:	4606      	mov	r6, r0
 8000b4a:	4623      	mov	r3, r4
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	e70f      	b.n	8000970 <__udivmoddi4+0xd4>
 8000b50:	3e02      	subs	r6, #2
 8000b52:	4463      	add	r3, ip
 8000b54:	e730      	b.n	80009b8 <__udivmoddi4+0x11c>
 8000b56:	bf00      	nop

08000b58 <__aeabi_idiv0>:
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b6c:	f023 0218 	bic.w	r2, r3, #24
 8000b70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8a:	f000 fdd7 	bl	800173c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8e:	f000 f809 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 8000b92:	f000 fcdd 	bl	8001550 <MX_LoRaWAN_Init>
  MX_LPUART1_UART_Init();
 8000b96:	f000 fb3b 	bl	8001210 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000b9a:	f000 fb91 	bl	80012c0 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8000b9e:	f000 fcdf 	bl	8001560 <MX_LoRaWAN_Process>
 8000ba2:	e7fc      	b.n	8000b9e <main+0x18>

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b09a      	sub	sp, #104	@ 0x68
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	2248      	movs	r2, #72	@ 0x48
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f011 fbe8 	bl	8012388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
 8000bc8:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bca:	f001 faed 	bl	80021a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff ffc4 	bl	8000b5c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c54 <SystemClock_Config+0xb0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c54 <SystemClock_Config+0xb0>)
 8000bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <SystemClock_Config+0xb0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000bf0:	2324      	movs	r3, #36	@ 0x24
 8000bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bf4:	2381      	movs	r3, #129	@ 0x81
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000c00:	23b0      	movs	r3, #176	@ 0xb0
 8000c02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fd75 	bl	80026fc <HAL_RCC_OscConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c18:	f000 f81e 	bl	8000c58 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000c1c:	234f      	movs	r3, #79	@ 0x4f
 8000c1e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 f8e0 	bl	8002e00 <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c46:	f000 f807 	bl	8000c58 <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3768      	adds	r7, #104	@ 0x68
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	58000400 	.word	0x58000400

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <Error_Handler+0x8>

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <NMI_Handler+0x4>

08000c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <MemManage_Handler+0x4>

08000c88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000ccc:	4802      	ldr	r0, [pc, #8]	@ (8000cd8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8000cce:	f002 fd87 	bl	80037e0 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000104 	.word	0x20000104

08000cdc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f001 fa3f 	bl	8002164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f001 fa38 	bl	8002164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000cfc:	4802      	ldr	r0, [pc, #8]	@ (8000d08 <DMA1_Channel5_IRQHandler+0x10>)
 8000cfe:	f000 ff9f 	bl	8001c40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000030c 	.word	0x2000030c

08000d0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d10:	4802      	ldr	r0, [pc, #8]	@ (8000d1c <USART1_IRQHandler+0x10>)
 8000d12:	f003 fac1 	bl	8004298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200001e4 	.word	0x200001e4

08000d20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <USART2_IRQHandler+0x10>)
 8000d26:	f003 fab7 	bl	8004298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000278 	.word	0x20000278

08000d34 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <LPUART1_IRQHandler+0x10>)
 8000d3a:	f003 faad 	bl	8004298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000150 	.word	0x20000150

08000d48 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000d4c:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <RTC_Alarm_IRQHandler+0x10>)
 8000d4e:	f002 fd13 	bl	8003778 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000104 	.word	0x20000104

08000d5c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <SUBGHZ_Radio_IRQHandler+0x10>)
 8000d62:	f003 f885 	bl	8003e70 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000013c 	.word	0x2000013c

08000d70 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d7c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000d7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d8c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d94:	68fb      	ldr	r3, [r7, #12]
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <MX_SUBGHZ_Init+0x20>)
 8000da6:	2208      	movs	r2, #8
 8000da8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_SUBGHZ_Init+0x20>)
 8000dac:	f002 fdde 	bl	800396c <HAL_SUBGHZ_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000db6:	f7ff ff4f 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000013c 	.word	0x2000013c

08000dc4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f7ff ffcf 	bl	8000d70 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2032      	movs	r0, #50	@ 0x32
 8000dd8:	f000 fda3 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000ddc:	2032      	movs	r0, #50	@ 0x32
 8000dde:	f000 fdba 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8000df0:	4b02      	ldr	r3, [pc, #8]	@ (8000dfc <LL_FLASH_GetUDN+0x10>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	1fff7580 	.word	0x1fff7580

08000e00 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8000e04:	4b03      	ldr	r3, [pc, #12]	@ (8000e14 <LL_FLASH_GetDeviceID+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	b2db      	uxtb	r3, r3
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	1fff7584 	.word	0x1fff7584

08000e18 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8000e1c:	4b03      	ldr	r3, [pc, #12]	@ (8000e2c <LL_FLASH_GetSTCompanyID+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	0a1b      	lsrs	r3, r3, #8
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	1fff7584 	.word	0x1fff7584

08000e30 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8000e46:	79fb      	ldrb	r3, [r7, #7]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	80fb      	strh	r3, [r7, #6]

  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8000e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8000e6a:	b590      	push	{r4, r7, lr}
 8000e6c:	b087      	sub	sp, #28
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8000e76:	f7ff ffb9 	bl	8000dec <LL_FLASH_GetUDN>
 8000e7a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e82:	d138      	bne.n	8000ef6 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8000e84:	f000 fc7a 	bl	800177c <HAL_GetUIDw0>
 8000e88:	4604      	mov	r4, r0
 8000e8a:	f000 fc8b 	bl	80017a4 <HAL_GetUIDw2>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4423      	add	r3, r4
 8000e92:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8000e94:	f000 fc7c 	bl	8001790 <HAL_GetUIDw1>
 8000e98:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	0e1a      	lsrs	r2, r3, #24
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3307      	adds	r3, #7
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	0c1a      	lsrs	r2, r3, #16
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3306      	adds	r3, #6
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	0a1a      	lsrs	r2, r3, #8
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3305      	adds	r3, #5
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	0e1a      	lsrs	r2, r3, #24
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3303      	adds	r3, #3
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	0c1a      	lsrs	r2, r3, #16
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3302      	adds	r3, #2
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	0a1a      	lsrs	r2, r3, #8
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8000ef4:	e031      	b.n	8000f5a <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3307      	adds	r3, #7
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	0a1a      	lsrs	r2, r3, #8
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3306      	adds	r3, #6
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	0c1a      	lsrs	r2, r3, #16
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3305      	adds	r3, #5
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	0e1a      	lsrs	r2, r3, #24
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8000f24:	f7ff ff6c 	bl	8000e00 <LL_FLASH_GetDeviceID>
 8000f28:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3303      	adds	r3, #3
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8000f34:	f7ff ff70 	bl	8000e18 <LL_FLASH_GetSTCompanyID>
 8000f38:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	0a1a      	lsrs	r2, r3, #8
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	0c1b      	lsrs	r3, r3, #16
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	701a      	strb	r2, [r3, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	371c      	adds	r7, #28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd90      	pop	{r4, r7, pc}

08000f62 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8000f62:	b590      	push	{r4, r7, lr}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8000f6a:	f7ff ff3f 	bl	8000dec <LL_FLASH_GetUDN>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d10d      	bne.n	8000f9a <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8000f7e:	f000 fbfd 	bl	800177c <HAL_GetUIDw0>
 8000f82:	4604      	mov	r4, r0
 8000f84:	f000 fc04 	bl	8001790 <HAL_GetUIDw1>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	405c      	eors	r4, r3
 8000f8c:	f000 fc0a 	bl	80017a4 <HAL_GetUIDw2>
 8000f90:	4603      	mov	r3, r0
 8000f92:	ea84 0203 	eor.w	r2, r4, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd90      	pop	{r4, r7, pc}

08000fa2 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
	...

08000fb8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_GetTick+0x24>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000fca:	f000 f856 	bl	800107a <TIMER_IF_GetTimerValue>
 8000fce:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000148 	.word	0x20000148

08000fe0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f873 	bl	80010d6 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8001002:	79fb      	ldrb	r3, [r7, #7]
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr

0800100e <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800100e:	b480      	push	{r7}
 8001010:	b085      	sub	sp, #20
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8001030:	79fb      	ldrb	r3, [r7, #7]
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001040:	4b02      	ldr	r3, [pc, #8]	@ (800104c <TIMER_IF_SetTimerContext+0x10>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	2000014c 	.word	0x2000014c

08001050 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001054:	4b02      	ldr	r3, [pc, #8]	@ (8001060 <TIMER_IF_GetTimerContext+0x10>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	2000014c 	.word	0x2000014c

08001064 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 800106e:	687b      	ldr	r3, [r7, #4]
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 800109a:	687b      	ldr	r3, [r7, #4]
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  return seconds;
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  return ret;
 800112e:	687b      	ldr	r3, [r7, #4]
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr

0800113a <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  return ret;
 8001144:	687b      	ldr	r3, [r7, #4]
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <LL_AHB2_GRP1_EnableClock>:
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800115c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800115e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4313      	orrs	r3, r2
 8001166:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800116c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4013      	ands	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001174:	68fb      	ldr	r3, [r7, #12]
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <LL_APB1_GRP1_EnableClock>:
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800118c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800118e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4313      	orrs	r3, r2
 8001196:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800119c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4013      	ands	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011a4:	68fb      	ldr	r3, [r7, #12]
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <LL_APB1_GRP2_EnableClock>:
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80011b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80011be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80011c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4013      	ands	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011d4:	68fb      	ldr	r3, [r7, #12]
}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <LL_APB2_GRP1_EnableClock>:
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80011e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4013      	ands	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001204:	68fb      	ldr	r3, [r7, #12]
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001214:	4b28      	ldr	r3, [pc, #160]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 8001216:	4a29      	ldr	r2, [pc, #164]	@ (80012bc <MX_LPUART1_UART_Init+0xac>)
 8001218:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800121a:	4b27      	ldr	r3, [pc, #156]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 800121c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001220:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b25      	ldr	r3, [pc, #148]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b23      	ldr	r3, [pc, #140]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800122e:	4b22      	ldr	r3, [pc, #136]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b20      	ldr	r3, [pc, #128]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001240:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 8001242:	2200      	movs	r2, #0
 8001244:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001246:	4b1c      	ldr	r3, [pc, #112]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124c:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 800124e:	2200      	movs	r2, #0
 8001250:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001252:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 8001254:	2200      	movs	r2, #0
 8001256:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001258:	4817      	ldr	r0, [pc, #92]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 800125a:	f002 ffcc 	bl	80041f6 <HAL_UART_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001264:	f7ff fcf8 	bl	8000c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001268:	2100      	movs	r1, #0
 800126a:	4813      	ldr	r0, [pc, #76]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 800126c:	f004 f8e9 	bl	8005442 <HAL_UARTEx_SetTxFifoThreshold>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001276:	f7ff fcef 	bl	8000c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800127a:	2100      	movs	r1, #0
 800127c:	480e      	ldr	r0, [pc, #56]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 800127e:	f004 f91e 	bl	80054be <HAL_UARTEx_SetRxFifoThreshold>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001288:	f7ff fce6 	bl	8000c58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800128c:	480a      	ldr	r0, [pc, #40]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 800128e:	f004 f8a0 	bl	80053d2 <HAL_UARTEx_DisableFifoMode>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001298:	f7ff fcde 	bl	8000c58 <Error_Handler>
  }
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800129c:	2300      	movs	r3, #0
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_LPUART1_UART_Init+0xa8>)
 80012a4:	f004 f811 	bl	80052ca <HAL_RS485Ex_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_LPUART1_UART_Init+0xa2>
  {
    Error_Handler();
 80012ae:	f7ff fcd3 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000150 	.word	0x20000150
 80012bc:	40008000 	.word	0x40008000

080012c0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c4:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012c6:	4a23      	ldr	r2, [pc, #140]	@ (8001354 <MX_USART1_UART_Init+0x94>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012ca:	4b21      	ldr	r3, [pc, #132]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f6:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012fc:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001302:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001308:	4811      	ldr	r0, [pc, #68]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 800130a:	f002 ff74 	bl	80041f6 <HAL_UART_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001314:	f7ff fca0 	bl	8000c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001318:	2100      	movs	r1, #0
 800131a:	480d      	ldr	r0, [pc, #52]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 800131c:	f004 f891 	bl	8005442 <HAL_UARTEx_SetTxFifoThreshold>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001326:	f7ff fc97 	bl	8000c58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132a:	2100      	movs	r1, #0
 800132c:	4808      	ldr	r0, [pc, #32]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 800132e:	f004 f8c6 	bl	80054be <HAL_UARTEx_SetRxFifoThreshold>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001338:	f7ff fc8e 	bl	8000c58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 800133e:	f004 f848 	bl	80053d2 <HAL_UARTEx_DisableFifoMode>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001348:	f7ff fc86 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200001e4 	.word	0x200001e4
 8001354:	40013800 	.word	0x40013800

08001358 <HAL_UART_MspInit>:
  /* USER CODE END USART2_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b096      	sub	sp, #88	@ 0x58
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2238      	movs	r2, #56	@ 0x38
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f011 f805 	bl	8012388 <memset>
  if(uartHandle->Instance==LPUART1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a6b      	ldr	r2, [pc, #428]	@ (8001530 <HAL_UART_MspInit+0x1d8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d13f      	bne.n	8001408 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001388:	2320      	movs	r3, #32
 800138a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	4618      	mov	r0, r3
 8001396:	f002 f8d5 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013a0:	f7ff fc5a 	bl	8000c58 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80013a4:	2001      	movs	r0, #1
 80013a6:	f7ff ff03 	bl	80011b0 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	2002      	movs	r0, #2
 80013ac:	f7ff fed0 	bl	8001150 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b0:	2004      	movs	r0, #4
 80013b2:	f7ff fecd 	bl	8001150 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB1     ------> LPUART1_DE
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013b6:	2302      	movs	r3, #2
 80013b8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80013c6:	2308      	movs	r3, #8
 80013c8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ca:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80013ce:	4619      	mov	r1, r3
 80013d0:	4858      	ldr	r0, [pc, #352]	@ (8001534 <HAL_UART_MspInit+0x1dc>)
 80013d2:	f000 fd67 	bl	8001ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80013d6:	2303      	movs	r3, #3
 80013d8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80013e6:	2308      	movs	r3, #8
 80013e8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80013ee:	4619      	mov	r1, r3
 80013f0:	4851      	ldr	r0, [pc, #324]	@ (8001538 <HAL_UART_MspInit+0x1e0>)
 80013f2:	f000 fd57 	bl	8001ea4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2026      	movs	r0, #38	@ 0x26
 80013fc:	f000 fa91 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001400:	2026      	movs	r0, #38	@ 0x26
 8001402:	f000 faa8 	bl	8001956 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001406:	e08f      	b.n	8001528 <HAL_UART_MspInit+0x1d0>
  else if(uartHandle->Instance==USART1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a4b      	ldr	r2, [pc, #300]	@ (800153c <HAL_UART_MspInit+0x1e4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d12e      	bne.n	8001470 <HAL_UART_MspInit+0x118>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001412:	2301      	movs	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001416:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800141a:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	4618      	mov	r0, r3
 8001422:	f002 f88f 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800142c:	f7ff fc14 	bl	8000c58 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001430:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001434:	f7ff fed4 	bl	80011e0 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001438:	2002      	movs	r0, #2
 800143a:	f7ff fe89 	bl	8001150 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800143e:	23c0      	movs	r3, #192	@ 0xc0
 8001440:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800144e:	2307      	movs	r3, #7
 8001450:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001456:	4619      	mov	r1, r3
 8001458:	4836      	ldr	r0, [pc, #216]	@ (8001534 <HAL_UART_MspInit+0x1dc>)
 800145a:	f000 fd23 	bl	8001ea4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2024      	movs	r0, #36	@ 0x24
 8001464:	f000 fa5d 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001468:	2024      	movs	r0, #36	@ 0x24
 800146a:	f000 fa74 	bl	8001956 <HAL_NVIC_EnableIRQ>
}
 800146e:	e05b      	b.n	8001528 <HAL_UART_MspInit+0x1d0>
  else if(uartHandle->Instance==USART2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a32      	ldr	r2, [pc, #200]	@ (8001540 <HAL_UART_MspInit+0x1e8>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d156      	bne.n	8001528 <HAL_UART_MspInit+0x1d0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800147a:	2302      	movs	r3, #2
 800147c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800147e:	4b31      	ldr	r3, [pc, #196]	@ (8001544 <HAL_UART_MspInit+0x1ec>)
 8001480:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	4618      	mov	r0, r3
 8001488:	f002 f85c 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_UART_MspInit+0x13e>
      Error_Handler();
 8001492:	f7ff fbe1 	bl	8000c58 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001496:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800149a:	f7ff fe71 	bl	8001180 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff fe56 	bl	8001150 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80014a4:	230c      	movs	r3, #12
 80014a6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b4:	2307      	movs	r3, #7
 80014b6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80014bc:	4619      	mov	r1, r3
 80014be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c2:	f000 fcef 	bl	8001ea4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80014c6:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <HAL_UART_MspInit+0x1f0>)
 80014c8:	4a20      	ldr	r2, [pc, #128]	@ (800154c <HAL_UART_MspInit+0x1f4>)
 80014ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80014cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <HAL_UART_MspInit+0x1f0>)
 80014ce:	2214      	movs	r2, #20
 80014d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001548 <HAL_UART_MspInit+0x1f0>)
 80014d4:	2210      	movs	r2, #16
 80014d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <HAL_UART_MspInit+0x1f0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <HAL_UART_MspInit+0x1f0>)
 80014e0:	2280      	movs	r2, #128	@ 0x80
 80014e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <HAL_UART_MspInit+0x1f0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ea:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <HAL_UART_MspInit+0x1f0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80014f0:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <HAL_UART_MspInit+0x1f0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_UART_MspInit+0x1f0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014fc:	4812      	ldr	r0, [pc, #72]	@ (8001548 <HAL_UART_MspInit+0x1f0>)
 80014fe:	f000 fa39 	bl	8001974 <HAL_DMA_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8001508:	f7ff fba6 	bl	8000c58 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a0e      	ldr	r2, [pc, #56]	@ (8001548 <HAL_UART_MspInit+0x1f0>)
 8001510:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001512:	4a0d      	ldr	r2, [pc, #52]	@ (8001548 <HAL_UART_MspInit+0x1f0>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2102      	movs	r1, #2
 800151c:	2025      	movs	r0, #37	@ 0x25
 800151e:	f000 fa00 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001522:	2025      	movs	r0, #37	@ 0x25
 8001524:	f000 fa17 	bl	8001956 <HAL_NVIC_EnableIRQ>
}
 8001528:	bf00      	nop
 800152a:	3758      	adds	r7, #88	@ 0x58
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40008000 	.word	0x40008000
 8001534:	48000400 	.word	0x48000400
 8001538:	48000800 	.word	0x48000800
 800153c:	40013800 	.word	0x40013800
 8001540:	40004400 	.word	0x40004400
 8001544:	000c0004 	.word	0x000c0004
 8001548:	2000030c 	.word	0x2000030c
 800154c:	40020058 	.word	0x40020058

08001550 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001554:	f7ff fc6c 	bl	8000e30 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001558:	f000 f808 	bl	800156c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END MX_LoRaWAN_Process_1 */
  /* USER CODE BEGIN MX_LoRaWAN_Process_OS */

  /* USER CODE END MX_LoRaWAN_Process_OS */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* USER CODE END LoRaWAN_Init_1 */

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8001570:	4902      	ldr	r1, [pc, #8]	@ (800157c <LoRaWAN_Init+0x10>)
 8001572:	4803      	ldr	r0, [pc, #12]	@ (8001580 <LoRaWAN_Init+0x14>)
 8001574:	f004 f82e 	bl	80055d4 <LmHandlerInit>

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	01030100 	.word	0x01030100
 8001580:	20000000 	.word	0x20000000

08001584 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  /* USER CODE END OnRxData_1 */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  /* USER CODE END OnTxData_1 */
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  /* USER CODE END OnJoinRequest_1 */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  /* USER CODE END OnBeaconStatusChange_1 */
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  /* USER CODE END OnClassChange_1 */
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <OnSystemReset>:

static void OnSystemReset(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800164a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8001664:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800167a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800168c:	2301      	movs	r3, #1
 800168e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 8001690:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 80016a2:	2301      	movs	r3, #1
 80016a4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 80016a6:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 80016c6:	230f      	movs	r3, #15
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e001      	b.n	80016d0 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 80016cc:	2316      	movs	r3, #22
 80016ce:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 80016d0:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016dc:	480d      	ldr	r0, [pc, #52]	@ (8001714 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016e0:	f000 f825 	bl	800172e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e4:	480c      	ldr	r0, [pc, #48]	@ (8001718 <LoopForever+0x6>)
  ldr r1, =_edata
 80016e6:	490d      	ldr	r1, [pc, #52]	@ (800171c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <LoopForever+0xe>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ec:	e002      	b.n	80016f4 <LoopCopyDataInit>

080016ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f2:	3304      	adds	r3, #4

080016f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f8:	d3f9      	bcc.n	80016ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001728 <LoopForever+0x16>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001700:	e001      	b.n	8001706 <LoopFillZerobss>

08001702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001704:	3204      	adds	r2, #4

08001706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001708:	d3fb      	bcc.n	8001702 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800170a:	f010 fe45 	bl	8012398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800170e:	f7ff fa3a 	bl	8000b86 <main>

08001712 <LoopForever>:

LoopForever:
    b LoopForever
 8001712:	e7fe      	b.n	8001712 <LoopForever>
  ldr   r0, =_estack
 8001714:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800171c:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001720:	08012bd0 	.word	0x08012bd0
  ldr r2, =_sbss
 8001724:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001728:	20001470 	.word	0x20001470

0800172c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC_IRQHandler>

0800172e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
	...

0800173c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001746:	2003      	movs	r0, #3
 8001748:	f000 f8e0 	bl	800190c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800174c:	f001 fd1c 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 8001750:	4603      	mov	r3, r0
 8001752:	4a09      	ldr	r2, [pc, #36]	@ (8001778 <HAL_Init+0x3c>)
 8001754:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001756:	200f      	movs	r0, #15
 8001758:	f7ff fc23 	bl	8000fa2 <HAL_InitTick>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	e001      	b.n	800176c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001768:	f7ff fa7c 	bl	8000c64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800176c:	79fb      	ldrb	r3, [r7, #7]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000004c 	.word	0x2000004c

0800177c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8001780:	4b02      	ldr	r3, [pc, #8]	@ (800178c <HAL_GetUIDw0+0x10>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	1fff7590 	.word	0x1fff7590

08001790 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001794:	4b02      	ldr	r3, [pc, #8]	@ (80017a0 <HAL_GetUIDw1+0x10>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	1fff7594 	.word	0x1fff7594

080017a4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80017a8:	4b02      	ldr	r3, [pc, #8]	@ (80017b4 <HAL_GetUIDw2+0x10>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	1fff7598 	.word	0x1fff7598

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4906      	ldr	r1, [pc, #24]	@ (8001850 <__NVIC_EnableIRQ+0x34>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100

08001854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	db0a      	blt.n	800187e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	490c      	ldr	r1, [pc, #48]	@ (80018a0 <__NVIC_SetPriority+0x4c>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	440b      	add	r3, r1
 8001878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800187c:	e00a      	b.n	8001894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4908      	ldr	r1, [pc, #32]	@ (80018a4 <__NVIC_SetPriority+0x50>)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3b04      	subs	r3, #4
 800188c:	0112      	lsls	r2, r2, #4
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	440b      	add	r3, r1
 8001892:	761a      	strb	r2, [r3, #24]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	@ 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f1c3 0307 	rsb	r3, r3, #7
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	bf28      	it	cs
 80018c6:	2304      	movcs	r3, #4
 80018c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3304      	adds	r3, #4
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d902      	bls.n	80018d8 <NVIC_EncodePriority+0x30>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3b03      	subs	r3, #3
 80018d6:	e000      	b.n	80018da <NVIC_EncodePriority+0x32>
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43d9      	mvns	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	4313      	orrs	r3, r2
         );
}
 8001902:	4618      	mov	r0, r3
 8001904:	3724      	adds	r7, #36	@ 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff4f 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff66 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ffb4 	bl	80018a8 <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff83 	bl	8001854 <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff59 	bl	800181c <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e08e      	b.n	8001aa4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	4b47      	ldr	r3, [pc, #284]	@ (8001aac <HAL_DMA_Init+0x138>)
 800198e:	429a      	cmp	r2, r3
 8001990:	d80f      	bhi.n	80019b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	4b45      	ldr	r3, [pc, #276]	@ (8001ab0 <HAL_DMA_Init+0x13c>)
 800199a:	4413      	add	r3, r2
 800199c:	4a45      	ldr	r2, [pc, #276]	@ (8001ab4 <HAL_DMA_Init+0x140>)
 800199e:	fba2 2303 	umull	r2, r3, r2, r3
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	009a      	lsls	r2, r3, #2
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a42      	ldr	r2, [pc, #264]	@ (8001ab8 <HAL_DMA_Init+0x144>)
 80019ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80019b0:	e00e      	b.n	80019d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b40      	ldr	r3, [pc, #256]	@ (8001abc <HAL_DMA_Init+0x148>)
 80019ba:	4413      	add	r3, r2
 80019bc:	4a3d      	ldr	r2, [pc, #244]	@ (8001ab4 <HAL_DMA_Init+0x140>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	091b      	lsrs	r3, r3, #4
 80019c4:	009a      	lsls	r2, r3, #2
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a3c      	ldr	r2, [pc, #240]	@ (8001ac0 <HAL_DMA_Init+0x14c>)
 80019ce:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80019e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019ea:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6819      	ldr	r1, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f9d2 	bl	8001dcc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a30:	d102      	bne.n	8001a38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001a44:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a4e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d010      	beq.n	8001a7a <HAL_DMA_Init+0x106>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d80c      	bhi.n	8001a7a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f9fb 	bl	8001e5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	e008      	b.n	8001a8c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40020407 	.word	0x40020407
 8001ab0:	bffdfff8 	.word	0xbffdfff8
 8001ab4:	cccccccd 	.word	0xcccccccd
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	bffdfbf8 	.word	0xbffdfbf8
 8001ac0:	40020400 	.word	0x40020400

08001ac4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e04f      	b.n	8001b76 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d008      	beq.n	8001af4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e040      	b.n	8001b76 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 020e 	bic.w	r2, r2, #14
 8001b02:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b28:	f003 021c 	and.w	r2, r3, #28
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	2101      	movs	r1, #1
 8001b32:	fa01 f202 	lsl.w	r2, r1, r2
 8001b36:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b40:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00c      	beq.n	8001b64 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b58:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b62:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d005      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	e047      	b.n	8001c34 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 020e 	bic.w	r2, r2, #14
 8001bb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd8:	f003 021c 	and.w	r2, r3, #28
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	2101      	movs	r1, #1
 8001be2:	fa01 f202 	lsl.w	r2, r1, r2
 8001be6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bf0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00c      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c08:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c12:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	4798      	blx	r3
    }
  }
  return status;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5c:	f003 031c 	and.w	r3, r3, #28
 8001c60:	2204      	movs	r2, #4
 8001c62:	409a      	lsls	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d027      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x7c>
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d022      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0320 	and.w	r3, r3, #32
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d107      	bne.n	8001c94 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0204 	bic.w	r2, r2, #4
 8001c92:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c98:	f003 021c 	and.w	r2, r3, #28
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	2104      	movs	r1, #4
 8001ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8081 	beq.w	8001db4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001cba:	e07b      	b.n	8001db4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc0:	f003 031c 	and.w	r3, r3, #28
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d03d      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x10c>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d038      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10b      	bne.n	8001d00 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 020a 	bic.w	r2, r2, #10
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <HAL_DMA_IRQHandler+0x180>)
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d909      	bls.n	8001d20 <HAL_DMA_IRQHandler+0xe0>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d10:	f003 031c 	and.w	r3, r3, #28
 8001d14:	4a2b      	ldr	r2, [pc, #172]	@ (8001dc4 <HAL_DMA_IRQHandler+0x184>)
 8001d16:	2102      	movs	r1, #2
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	6053      	str	r3, [r2, #4]
 8001d1e:	e008      	b.n	8001d32 <HAL_DMA_IRQHandler+0xf2>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d24:	f003 031c 	and.w	r3, r3, #28
 8001d28:	4a27      	ldr	r2, [pc, #156]	@ (8001dc8 <HAL_DMA_IRQHandler+0x188>)
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d038      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001d4a:	e033      	b.n	8001db4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d50:	f003 031c 	and.w	r3, r3, #28
 8001d54:	2208      	movs	r2, #8
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d02a      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x176>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d025      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 020e 	bic.w	r2, r2, #14
 8001d78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	f003 021c 	and.w	r2, r3, #28
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	2101      	movs	r1, #1
 8001d88:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d004      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
}
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40020080 	.word	0x40020080
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	40020000 	.word	0x40020000

08001dcc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d813      	bhi.n	8001e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001dec:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	3b08      	subs	r3, #8
 8001dfc:	4a14      	ldr	r2, [pc, #80]	@ (8001e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	091b      	lsrs	r3, r3, #4
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	e011      	b.n	8001e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	009a      	lsls	r2, r3, #2
 8001e10:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001e12:	4413      	add	r3, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	3b08      	subs	r3, #8
 8001e20:	4a0b      	ldr	r2, [pc, #44]	@ (8001e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001e22:	fba2 2303 	umull	r2, r3, r2, r3
 8001e26:	091b      	lsrs	r3, r3, #4
 8001e28:	3307      	adds	r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001e30:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2201      	movs	r2, #1
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40020407 	.word	0x40020407
 8001e50:	cccccccd 	.word	0xcccccccd
 8001e54:	4002081c 	.word	0x4002081c
 8001e58:	40020880 	.word	0x40020880

08001e5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	461a      	mov	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001e80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	1000823f 	.word	0x1000823f
 8001ea0:	40020940 	.word	0x40020940

08001ea4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb2:	e140      	b.n	8002136 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 8132 	beq.w	8002130 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d005      	beq.n	8001ee4 <HAL_GPIO_Init+0x40>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d130      	bne.n	8001f46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	2203      	movs	r2, #3
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	f003 0201 	and.w	r2, r3, #1
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d017      	beq.n	8001f82 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d123      	bne.n	8001fd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	6939      	ldr	r1, [r7, #16]
 8001fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0203 	and.w	r2, r3, #3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 808c 	beq.w	8002130 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002018:	4a4e      	ldr	r2, [pc, #312]	@ (8002154 <HAL_GPIO_Init+0x2b0>)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	2207      	movs	r2, #7
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002042:	d00d      	beq.n	8002060 <HAL_GPIO_Init+0x1bc>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a44      	ldr	r2, [pc, #272]	@ (8002158 <HAL_GPIO_Init+0x2b4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d007      	beq.n	800205c <HAL_GPIO_Init+0x1b8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a43      	ldr	r2, [pc, #268]	@ (800215c <HAL_GPIO_Init+0x2b8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d101      	bne.n	8002058 <HAL_GPIO_Init+0x1b4>
 8002054:	2302      	movs	r3, #2
 8002056:	e004      	b.n	8002062 <HAL_GPIO_Init+0x1be>
 8002058:	2307      	movs	r3, #7
 800205a:	e002      	b.n	8002062 <HAL_GPIO_Init+0x1be>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_GPIO_Init+0x1be>
 8002060:	2300      	movs	r3, #0
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	f002 0203 	and.w	r2, r2, #3
 8002068:	0092      	lsls	r2, r2, #2
 800206a:	4093      	lsls	r3, r2
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002072:	4938      	ldr	r1, [pc, #224]	@ (8002154 <HAL_GPIO_Init+0x2b0>)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	3302      	adds	r3, #2
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002080:	4b37      	ldr	r3, [pc, #220]	@ (8002160 <HAL_GPIO_Init+0x2bc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002160 <HAL_GPIO_Init+0x2bc>)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002160 <HAL_GPIO_Init+0x2bc>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ce:	4a24      	ldr	r2, [pc, #144]	@ (8002160 <HAL_GPIO_Init+0x2bc>)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80020d4:	4b22      	ldr	r3, [pc, #136]	@ (8002160 <HAL_GPIO_Init+0x2bc>)
 80020d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020da:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80020fa:	4a19      	ldr	r2, [pc, #100]	@ (8002160 <HAL_GPIO_Init+0x2bc>)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002102:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <HAL_GPIO_Init+0x2bc>)
 8002104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002108:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002128:	4a0d      	ldr	r2, [pc, #52]	@ (8002160 <HAL_GPIO_Init+0x2bc>)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3301      	adds	r3, #1
 8002134:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	f47f aeb7 	bne.w	8001eb4 <HAL_GPIO_Init+0x10>
  }
}
 8002146:	bf00      	nop
 8002148:	bf00      	nop
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40010000 	.word	0x40010000
 8002158:	48000400 	.word	0x48000400
 800215c:	48000800 	.word	0x48000800
 8002160:	58000800 	.word	0x58000800

08002164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800216e:	4b08      	ldr	r3, [pc, #32]	@ (8002190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d006      	beq.n	8002188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800217a:	4a05      	ldr	r2, [pc, #20]	@ (8002190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f806 	bl	8002194 <HAL_GPIO_EXTI_Callback>
  }
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	58000800 	.word	0x58000800

08002194 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr

080021a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021ac:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a03      	ldr	r2, [pc, #12]	@ (80021c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80021b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	58000400 	.word	0x58000400

080021c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80021c8:	4b03      	ldr	r3, [pc, #12]	@ (80021d8 <HAL_PWREx_GetVoltageRange+0x14>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	58000400 	.word	0x58000400

080021dc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ec:	d101      	bne.n	80021f2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	58000400 	.word	0x58000400

08002200 <LL_RCC_HSE_EnableTcxo>:
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800220e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <LL_RCC_HSE_DisableTcxo>:
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800222a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800223c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002246:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800224a:	d101      	bne.n	8002250 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <LL_RCC_HSE_Enable>:
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226c:	6013      	str	r3, [r2, #0]
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <LL_RCC_HSE_Disable>:
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002284:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002288:	6013      	str	r3, [r2, #0]
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <LL_RCC_HSE_IsReady>:
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80022a4:	d101      	bne.n	80022aa <LL_RCC_HSE_IsReady+0x18>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <LL_RCC_HSE_IsReady+0x1a>
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <LL_RCC_HSI_Enable>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80022b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c6:	6013      	str	r3, [r2, #0]
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <LL_RCC_HSI_Disable>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <LL_RCC_HSI_IsReady>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80022f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022fe:	d101      	bne.n	8002304 <LL_RCC_HSI_IsReady+0x18>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <LL_RCC_HSI_IsReady+0x1a>
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <LL_RCC_HSI_SetCalibTrimming>:
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	061b      	lsls	r3, r3, #24
 8002324:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800233a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b02      	cmp	r3, #2
 8002348:	d101      	bne.n	800234e <LL_RCC_LSE_IsReady+0x18>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <LL_RCC_LSE_IsReady+0x1a>
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800235c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002364:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002380:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002384:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800239c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d101      	bne.n	80023b0 <LL_RCC_LSI_IsReady+0x18>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <LL_RCC_LSI_IsReady+0x1a>
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80023be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6013      	str	r3, [r2, #0]
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80023da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	6013      	str	r3, [r2, #0]
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80023f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b02      	cmp	r3, #2
 8002402:	d101      	bne.n	8002408 <LL_RCC_MSI_IsReady+0x16>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <LL_RCC_MSI_IsReady+0x18>
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	2b08      	cmp	r3, #8
 8002422:	d101      	bne.n	8002428 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002436:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800244c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002454:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800247a:	4313      	orrs	r3, r2
 800247c:	604b      	str	r3, [r1, #4]
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f023 0203 	bic.w	r2, r3, #3
 800249a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	608b      	str	r3, [r1, #8]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 030c 	and.w	r3, r3, #12
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80024cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4313      	orrs	r3, r2
 80024de:	608b      	str	r3, [r1, #8]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80024fa:	f023 020f 	bic.w	r2, r3, #15
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800251e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002528:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800254e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4313      	orrs	r3, r2
 8002556:	608b      	str	r3, [r1, #8]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr

08002562 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002580:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80025c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025d0:	6013      	str	r3, [r2, #0]
}
 80025d2:	bf00      	nop
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr

080025da <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80025de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025ec:	6013      	str	r3, [r2, #0]
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80025fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002604:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002608:	d101      	bne.n	800260e <LL_RCC_PLL_IsReady+0x18>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <LL_RCC_PLL_IsReady+0x1a>
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800261c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f003 0303 	and.w	r3, r3, #3
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002684:	d101      	bne.n	800268a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800269c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80026a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a8:	d101      	bne.n	80026ae <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80026bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026ca:	d101      	bne.n	80026d0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80026de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026ec:	d101      	bne.n	80026f2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e36f      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270e:	f7ff fece 	bl	80024ae <LL_RCC_GetSysClkSource>
 8002712:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002714:	f7ff ffa2 	bl	800265c <LL_RCC_PLL_GetMainSource>
 8002718:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80c4 	beq.w	80028b0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_RCC_OscConfig+0x3e>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	2b0c      	cmp	r3, #12
 8002732:	d176      	bne.n	8002822 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d173      	bne.n	8002822 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e353      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800274a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_OscConfig+0x68>
 8002758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002762:	e006      	b.n	8002772 <HAL_RCC_OscConfig+0x76>
 8002764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002768:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002772:	4293      	cmp	r3, r2
 8002774:	d222      	bcs.n	80027bc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fd3c 	bl	80031f8 <RCC_SetFlashLatencyFromMSIRange>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e331      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800278a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002794:	f043 0308 	orr.w	r3, r3, #8
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fe53 	bl	8002460 <LL_RCC_MSI_SetCalibTrimming>
 80027ba:	e021      	b.n	8002800 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027c6:	f043 0308 	orr.w	r3, r3, #8
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fe3a 	bl	8002460 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 fd01 	bl	80031f8 <RCC_SetFlashLatencyFromMSIRange>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e2f6      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002800:	f000 fcc2 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 8002804:	4603      	mov	r3, r0
 8002806:	4aa7      	ldr	r2, [pc, #668]	@ (8002aa4 <HAL_RCC_OscConfig+0x3a8>)
 8002808:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800280a:	4ba7      	ldr	r3, [pc, #668]	@ (8002aa8 <HAL_RCC_OscConfig+0x3ac>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fbc7 	bl	8000fa2 <HAL_InitTick>
 8002814:	4603      	mov	r3, r0
 8002816:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d047      	beq.n	80028ae <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	e2e5      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d02c      	beq.n	8002884 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800282a:	f7ff fdc6 	bl	80023ba <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800282e:	f7fe fbc3 	bl	8000fb8 <HAL_GetTick>
 8002832:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002836:	f7fe fbbf 	bl	8000fb8 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e2d2      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002848:	f7ff fdd3 	bl	80023f2 <LL_RCC_MSI_IsReady>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f1      	beq.n	8002836 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800285c:	f043 0308 	orr.w	r3, r3, #8
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002870:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fdef 	bl	8002460 <LL_RCC_MSI_SetCalibTrimming>
 8002882:	e015      	b.n	80028b0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002884:	f7ff fda7 	bl	80023d6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002888:	f7fe fb96 	bl	8000fb8 <HAL_GetTick>
 800288c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002890:	f7fe fb92 	bl	8000fb8 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e2a5      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80028a2:	f7ff fda6 	bl	80023f2 <LL_RCC_MSI_IsReady>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f1      	bne.n	8002890 <HAL_RCC_OscConfig+0x194>
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80028ae:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d058      	beq.n	800296e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d005      	beq.n	80028ce <HAL_RCC_OscConfig+0x1d2>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	2b0c      	cmp	r3, #12
 80028c6:	d108      	bne.n	80028da <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d105      	bne.n	80028da <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d14b      	bne.n	800296e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e289      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80028da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f8:	d102      	bne.n	8002900 <HAL_RCC_OscConfig+0x204>
 80028fa:	f7ff fcae 	bl	800225a <LL_RCC_HSE_Enable>
 80028fe:	e00d      	b.n	800291c <HAL_RCC_OscConfig+0x220>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002908:	d104      	bne.n	8002914 <HAL_RCC_OscConfig+0x218>
 800290a:	f7ff fc79 	bl	8002200 <LL_RCC_HSE_EnableTcxo>
 800290e:	f7ff fca4 	bl	800225a <LL_RCC_HSE_Enable>
 8002912:	e003      	b.n	800291c <HAL_RCC_OscConfig+0x220>
 8002914:	f7ff fcaf 	bl	8002276 <LL_RCC_HSE_Disable>
 8002918:	f7ff fc80 	bl	800221c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d012      	beq.n	800294a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fe fb48 	bl	8000fb8 <HAL_GetTick>
 8002928:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800292c:	f7fe fb44 	bl	8000fb8 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	@ 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e257      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800293e:	f7ff fca8 	bl	8002292 <LL_RCC_HSE_IsReady>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f1      	beq.n	800292c <HAL_RCC_OscConfig+0x230>
 8002948:	e011      	b.n	800296e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe fb35 	bl	8000fb8 <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002952:	f7fe fb31 	bl	8000fb8 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b64      	cmp	r3, #100	@ 0x64
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e244      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002964:	f7ff fc95 	bl	8002292 <LL_RCC_HSE_IsReady>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f1      	bne.n	8002952 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d046      	beq.n	8002a08 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	2b04      	cmp	r3, #4
 800297e:	d005      	beq.n	800298c <HAL_RCC_OscConfig+0x290>
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d10e      	bne.n	80029a4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d10b      	bne.n	80029a4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e22a      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fcb6 	bl	800230e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80029a2:	e031      	b.n	8002a08 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d019      	beq.n	80029e0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ac:	f7ff fc82 	bl	80022b4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fb02 	bl	8000fb8 <HAL_GetTick>
 80029b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b8:	f7fe fafe 	bl	8000fb8 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e211      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80029ca:	f7ff fc8f 	bl	80022ec <LL_RCC_HSI_IsReady>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f1      	beq.n	80029b8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fc98 	bl	800230e <LL_RCC_HSI_SetCalibTrimming>
 80029de:	e013      	b.n	8002a08 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029e0:	f7ff fc76 	bl	80022d0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe fae8 	bl	8000fb8 <HAL_GetTick>
 80029e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7fe fae4 	bl	8000fb8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e1f7      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80029fe:	f7ff fc75 	bl	80022ec <LL_RCC_HSI_IsReady>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f1      	bne.n	80029ec <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d06e      	beq.n	8002af2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d056      	beq.n	8002aca <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a24:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69da      	ldr	r2, [r3, #28]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d031      	beq.n	8002a98 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d006      	beq.n	8002a4c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e1d0      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d013      	beq.n	8002a7e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002a56:	f7ff fc8f 	bl	8002378 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a5a:	f7fe faad 	bl	8000fb8 <HAL_GetTick>
 8002a5e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a62:	f7fe faa9 	bl	8000fb8 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b11      	cmp	r3, #17
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1bc      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002a74:	f7ff fc90 	bl	8002398 <LL_RCC_LSI_IsReady>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f1      	bne.n	8002a62 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a86:	f023 0210 	bic.w	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a98:	f7ff fc5e 	bl	8002358 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9c:	f7fe fa8c 	bl	8000fb8 <HAL_GetTick>
 8002aa0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002aa2:	e00c      	b.n	8002abe <HAL_RCC_OscConfig+0x3c2>
 8002aa4:	2000004c 	.word	0x2000004c
 8002aa8:	20000050 	.word	0x20000050
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aac:	f7fe fa84 	bl	8000fb8 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b11      	cmp	r3, #17
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e197      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002abe:	f7ff fc6b 	bl	8002398 <LL_RCC_LSI_IsReady>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f1      	beq.n	8002aac <HAL_RCC_OscConfig+0x3b0>
 8002ac8:	e013      	b.n	8002af2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aca:	f7ff fc55 	bl	8002378 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ace:	f7fe fa73 	bl	8000fb8 <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad6:	f7fe fa6f 	bl	8000fb8 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b11      	cmp	r3, #17
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e182      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002ae8:	f7ff fc56 	bl	8002398 <LL_RCC_LSI_IsReady>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f1      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80d8 	beq.w	8002cb0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002b00:	f7ff fb6c 	bl	80021dc <LL_PWR_IsEnabledBkUpAccess>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d113      	bne.n	8002b32 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002b0a:	f7ff fb4d 	bl	80021a8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b0e:	f7fe fa53 	bl	8000fb8 <HAL_GetTick>
 8002b12:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b16:	f7fe fa4f 	bl	8000fb8 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e162      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002b28:	f7ff fb58 	bl	80021dc <LL_PWR_IsEnabledBkUpAccess>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f1      	beq.n	8002b16 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d07b      	beq.n	8002c32 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b85      	cmp	r3, #133	@ 0x85
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2b05      	cmp	r3, #5
 8002b48:	d109      	bne.n	8002b5e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b56:	f043 0304 	orr.w	r3, r3, #4
 8002b5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5e:	f7fe fa2b 	bl	8000fb8 <HAL_GetTick>
 8002b62:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7a:	f7fe fa1d 	bl	8000fb8 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e12e      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002b90:	f7ff fbd1 	bl	8002336 <LL_RCC_LSE_IsReady>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0ef      	beq.n	8002b7a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	2b81      	cmp	r3, #129	@ 0x81
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b85      	cmp	r3, #133	@ 0x85
 8002ba8:	d121      	bne.n	8002bee <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fe fa05 	bl	8000fb8 <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7fe f9f7 	bl	8000fb8 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e108      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0ec      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002bec:	e060      	b.n	8002cb0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bee:	f7fe f9e3 	bl	8000fb8 <HAL_GetTick>
 8002bf2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c08:	e00a      	b.n	8002c20 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0a:	f7fe f9d5 	bl	8000fb8 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e0e6      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1ec      	bne.n	8002c0a <HAL_RCC_OscConfig+0x50e>
 8002c30:	e03e      	b.n	8002cb0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c32:	f7fe f9c1 	bl	8000fb8 <HAL_GetTick>
 8002c36:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c4c:	e00a      	b.n	8002c64 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4e:	f7fe f9b3 	bl	8000fb8 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e0c4      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1ec      	bne.n	8002c4e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7fe f9a0 	bl	8000fb8 <HAL_GetTick>
 8002c78:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7fe f992 	bl	8000fb8 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e0a3      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002ca6:	f7ff fb46 	bl	8002336 <LL_RCC_LSE_IsReady>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1ef      	bne.n	8002c90 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8099 	beq.w	8002dec <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	d06c      	beq.n	8002d9a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d14b      	bne.n	8002d60 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc8:	f7ff fc87 	bl	80025da <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fe f974 	bl	8000fb8 <HAL_GetTick>
 8002cd0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe f970 	bl	8000fb8 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b0a      	cmp	r3, #10
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e083      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002ce6:	f7ff fc86 	bl	80025f6 <LL_RCC_PLL_IsReady>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f1      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	4b40      	ldr	r3, [pc, #256]	@ (8002df8 <HAL_RCC_OscConfig+0x6fc>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d02:	4311      	orrs	r1, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d08:	0212      	lsls	r2, r2, #8
 8002d0a:	4311      	orrs	r1, r2
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d10:	4311      	orrs	r1, r2
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d16:	4311      	orrs	r1, r2
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d26:	f7ff fc4a 	bl	80025be <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3a:	f7fe f93d 	bl	8000fb8 <HAL_GetTick>
 8002d3e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fe f939 	bl	8000fb8 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b0a      	cmp	r3, #10
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e04c      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002d54:	f7ff fc4f 	bl	80025f6 <LL_RCC_PLL_IsReady>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f1      	beq.n	8002d42 <HAL_RCC_OscConfig+0x646>
 8002d5e:	e045      	b.n	8002dec <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d60:	f7ff fc3b 	bl	80025da <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe f928 	bl	8000fb8 <HAL_GetTick>
 8002d68:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fe f924 	bl	8000fb8 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b0a      	cmp	r3, #10
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e037      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002d7e:	f7ff fc3a 	bl	80025f6 <LL_RCC_PLL_IsReady>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f1      	bne.n	8002d6c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d92:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <HAL_RCC_OscConfig+0x700>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	60cb      	str	r3, [r1, #12]
 8002d98:	e028      	b.n	8002dec <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e023      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f003 0203 	and.w	r2, r3, #3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d115      	bne.n	8002de8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d10e      	bne.n	8002de8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d106      	bne.n	8002de8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	11c1808c 	.word	0x11c1808c
 8002dfc:	eefefffc 	.word	0xeefefffc

08002e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e10f      	b.n	8003034 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e14:	4b89      	ldr	r3, [pc, #548]	@ (800303c <HAL_RCC_ClockConfig+0x23c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d91b      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b86      	ldr	r3, [pc, #536]	@ (800303c <HAL_RCC_ClockConfig+0x23c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 0207 	bic.w	r2, r3, #7
 8002e2a:	4984      	ldr	r1, [pc, #528]	@ (800303c <HAL_RCC_ClockConfig+0x23c>)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e32:	f7fe f8c1 	bl	8000fb8 <HAL_GetTick>
 8002e36:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e3a:	f7fe f8bd 	bl	8000fb8 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e0f3      	b.n	8003034 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4c:	4b7b      	ldr	r3, [pc, #492]	@ (800303c <HAL_RCC_ClockConfig+0x23c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d1ef      	bne.n	8002e3a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d016      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fb2a 	bl	80024c4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e70:	f7fe f8a2 	bl	8000fb8 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e78:	f7fe f89e 	bl	8000fb8 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e0d4      	b.n	8003034 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002e8a:	f7ff fbf2 	bl	8002672 <LL_RCC_IsActiveFlag_HPRE>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f1      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d016      	beq.n	8002ece <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fb20 	bl	80024ea <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002eaa:	f7fe f885 	bl	8000fb8 <HAL_GetTick>
 8002eae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002eb2:	f7fe f881 	bl	8000fb8 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e0b7      	b.n	8003034 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ec4:	f7ff fbe6 	bl	8002694 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f1      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fb19 	bl	8002516 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ee4:	f7fe f868 	bl	8000fb8 <HAL_GetTick>
 8002ee8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002eec:	f7fe f864 	bl	8000fb8 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e09a      	b.n	8003034 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002efe:	f7ff fbdb 	bl	80026b8 <LL_RCC_IsActiveFlag_PPRE1>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f1      	beq.n	8002eec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d017      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fb0e 	bl	800253c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f20:	f7fe f84a 	bl	8000fb8 <HAL_GetTick>
 8002f24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f28:	f7fe f846 	bl	8000fb8 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e07c      	b.n	8003034 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002f3a:	f7ff fbce 	bl	80026da <LL_RCC_IsActiveFlag_PPRE2>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f1      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d043      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d106      	bne.n	8002f66 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002f58:	f7ff f99b 	bl	8002292 <LL_RCC_HSE_IsReady>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d11e      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e066      	b.n	8003034 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d106      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002f6e:	f7ff fb42 	bl	80025f6 <LL_RCC_PLL_IsReady>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d113      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e05b      	b.n	8003034 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002f84:	f7ff fa35 	bl	80023f2 <LL_RCC_MSI_IsReady>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d108      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e050      	b.n	8003034 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002f92:	f7ff f9ab 	bl	80022ec <LL_RCC_HSI_IsReady>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e049      	b.n	8003034 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fa6f 	bl	8002488 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002faa:	f7fe f805 	bl	8000fb8 <HAL_GetTick>
 8002fae:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb2:	f7fe f801 	bl	8000fb8 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e035      	b.n	8003034 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc8:	f7ff fa71 	bl	80024ae <LL_RCC_GetSysClkSource>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d1ec      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b18      	ldr	r3, [pc, #96]	@ (800303c <HAL_RCC_ClockConfig+0x23c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d21b      	bcs.n	800301e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b15      	ldr	r3, [pc, #84]	@ (800303c <HAL_RCC_ClockConfig+0x23c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 0207 	bic.w	r2, r3, #7
 8002fee:	4913      	ldr	r1, [pc, #76]	@ (800303c <HAL_RCC_ClockConfig+0x23c>)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff6:	f7fd ffdf 	bl	8000fb8 <HAL_GetTick>
 8002ffa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ffe:	f7fd ffdb 	bl	8000fb8 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e011      	b.n	8003034 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003010:	4b0a      	ldr	r3, [pc, #40]	@ (800303c <HAL_RCC_ClockConfig+0x23c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d1ef      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800301e:	f000 f8b3 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 8003022:	4603      	mov	r3, r0
 8003024:	4a06      	ldr	r2, [pc, #24]	@ (8003040 <HAL_RCC_ClockConfig+0x240>)
 8003026:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003028:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <HAL_RCC_ClockConfig+0x244>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd ffb8 	bl	8000fa2 <HAL_InitTick>
 8003032:	4603      	mov	r3, r0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	58004000 	.word	0x58004000
 8003040:	2000004c 	.word	0x2000004c
 8003044:	20000050 	.word	0x20000050

08003048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003056:	f7ff fa2a 	bl	80024ae <LL_RCC_GetSysClkSource>
 800305a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800305c:	f7ff fafe 	bl	800265c <LL_RCC_PLL_GetMainSource>
 8003060:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x2c>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d139      	bne.n	80030e2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d136      	bne.n	80030e2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003074:	f7ff f9cd 	bl	8002412 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d115      	bne.n	80030aa <HAL_RCC_GetSysClockFreq+0x62>
 800307e:	f7ff f9c8 	bl	8002412 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003082:	4603      	mov	r3, r0
 8003084:	2b01      	cmp	r3, #1
 8003086:	d106      	bne.n	8003096 <HAL_RCC_GetSysClockFreq+0x4e>
 8003088:	f7ff f9d3 	bl	8002432 <LL_RCC_MSI_GetRange>
 800308c:	4603      	mov	r3, r0
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	e005      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x5a>
 8003096:	f7ff f9d7 	bl	8002448 <LL_RCC_MSI_GetRangeAfterStandby>
 800309a:	4603      	mov	r3, r0
 800309c:	0a1b      	lsrs	r3, r3, #8
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	4a36      	ldr	r2, [pc, #216]	@ (800317c <HAL_RCC_GetSysClockFreq+0x134>)
 80030a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a8:	e014      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x8c>
 80030aa:	f7ff f9b2 	bl	8002412 <LL_RCC_MSI_IsEnabledRangeSelect>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d106      	bne.n	80030c2 <HAL_RCC_GetSysClockFreq+0x7a>
 80030b4:	f7ff f9bd 	bl	8002432 <LL_RCC_MSI_GetRange>
 80030b8:	4603      	mov	r3, r0
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	e005      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x86>
 80030c2:	f7ff f9c1 	bl	8002448 <LL_RCC_MSI_GetRangeAfterStandby>
 80030c6:	4603      	mov	r3, r0
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	4a2b      	ldr	r2, [pc, #172]	@ (800317c <HAL_RCC_GetSysClockFreq+0x134>)
 80030d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d115      	bne.n	8003108 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80030e0:	e012      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d102      	bne.n	80030ee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030e8:	4b25      	ldr	r3, [pc, #148]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x138>)
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	e00c      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d109      	bne.n	8003108 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80030f4:	f7ff f8a0 	bl	8002238 <LL_RCC_HSE_IsEnabledDiv2>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d102      	bne.n	8003104 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80030fe:	4b20      	ldr	r3, [pc, #128]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x138>)
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	e001      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003104:	4b1f      	ldr	r3, [pc, #124]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003106:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003108:	f7ff f9d1 	bl	80024ae <LL_RCC_GetSysClkSource>
 800310c:	4603      	mov	r3, r0
 800310e:	2b0c      	cmp	r3, #12
 8003110:	d12f      	bne.n	8003172 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003112:	f7ff faa3 	bl	800265c <LL_RCC_PLL_GetMainSource>
 8003116:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d003      	beq.n	8003126 <HAL_RCC_GetSysClockFreq+0xde>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d003      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0xe4>
 8003124:	e00d      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003126:	4b16      	ldr	r3, [pc, #88]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x138>)
 8003128:	60fb      	str	r3, [r7, #12]
        break;
 800312a:	e00d      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800312c:	f7ff f884 	bl	8002238 <LL_RCC_HSE_IsEnabledDiv2>
 8003130:	4603      	mov	r3, r0
 8003132:	2b01      	cmp	r3, #1
 8003134:	d102      	bne.n	800313c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003136:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x138>)
 8003138:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800313a:	e005      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800313c:	4b11      	ldr	r3, [pc, #68]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x13c>)
 800313e:	60fb      	str	r3, [r7, #12]
        break;
 8003140:	e002      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	60fb      	str	r3, [r7, #12]
        break;
 8003146:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003148:	f7ff fa66 	bl	8002618 <LL_RCC_PLL_GetN>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	fb03 f402 	mul.w	r4, r3, r2
 8003154:	f7ff fa77 	bl	8002646 <LL_RCC_PLL_GetDivider>
 8003158:	4603      	mov	r3, r0
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	3301      	adds	r3, #1
 800315e:	fbb4 f4f3 	udiv	r4, r4, r3
 8003162:	f7ff fa65 	bl	8002630 <LL_RCC_PLL_GetR>
 8003166:	4603      	mov	r3, r0
 8003168:	0f5b      	lsrs	r3, r3, #29
 800316a:	3301      	adds	r3, #1
 800316c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003170:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003172:	697b      	ldr	r3, [r7, #20]
}
 8003174:	4618      	mov	r0, r3
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}
 800317c:	08012614 	.word	0x08012614
 8003180:	00f42400 	.word	0x00f42400
 8003184:	01e84800 	.word	0x01e84800

08003188 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003188:	b598      	push	{r3, r4, r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800318c:	f7ff ff5c 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8003190:	4604      	mov	r4, r0
 8003192:	f7ff f9e6 	bl	8002562 <LL_RCC_GetAHBPrescaler>
 8003196:	4603      	mov	r3, r0
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	4a03      	ldr	r2, [pc, #12]	@ (80031ac <HAL_RCC_GetHCLKFreq+0x24>)
 80031a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	bd98      	pop	{r3, r4, r7, pc}
 80031ac:	080125b4 	.word	0x080125b4

080031b0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b0:	b598      	push	{r3, r4, r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80031b4:	f7ff ffe8 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031b8:	4604      	mov	r4, r0
 80031ba:	f7ff f9ea 	bl	8002592 <LL_RCC_GetAPB1Prescaler>
 80031be:	4603      	mov	r3, r0
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	4a03      	ldr	r2, [pc, #12]	@ (80031d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd98      	pop	{r3, r4, r7, pc}
 80031d0:	080125f4 	.word	0x080125f4

080031d4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d4:	b598      	push	{r3, r4, r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80031d8:	f7ff ffd6 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031dc:	4604      	mov	r4, r0
 80031de:	f7ff f9e3 	bl	80025a8 <LL_RCC_GetAPB2Prescaler>
 80031e2:	4603      	mov	r3, r0
 80031e4:	0adb      	lsrs	r3, r3, #11
 80031e6:	4a03      	ldr	r2, [pc, #12]	@ (80031f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ec:	fa24 f303 	lsr.w	r3, r4, r3
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd98      	pop	{r3, r4, r7, pc}
 80031f4:	080125f4 	.word	0x080125f4

080031f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	091b      	lsrs	r3, r3, #4
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	4a10      	ldr	r2, [pc, #64]	@ (800324c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800320a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003210:	f7ff f9b2 	bl	8002578 <LL_RCC_GetAHB3Prescaler>
 8003214:	4603      	mov	r3, r0
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	4a0c      	ldr	r2, [pc, #48]	@ (8003250 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800321e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4a09      	ldr	r2, [pc, #36]	@ (8003254 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	0c9c      	lsrs	r4, r3, #18
 8003234:	f7fe ffc6 	bl	80021c4 <HAL_PWREx_GetVoltageRange>
 8003238:	4603      	mov	r3, r0
 800323a:	4619      	mov	r1, r3
 800323c:	4620      	mov	r0, r4
 800323e:	f000 f80b 	bl	8003258 <RCC_SetFlashLatency>
 8003242:	4603      	mov	r3, r0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	bd90      	pop	{r4, r7, pc}
 800324c:	08012614 	.word	0x08012614
 8003250:	080125b4 	.word	0x080125b4
 8003254:	431bde83 	.word	0x431bde83

08003258 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08e      	sub	sp, #56	@ 0x38
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003262:	4a3a      	ldr	r2, [pc, #232]	@ (800334c <RCC_SetFlashLatency+0xf4>)
 8003264:	f107 0320 	add.w	r3, r7, #32
 8003268:	e892 0003 	ldmia.w	r2, {r0, r1}
 800326c:	6018      	str	r0, [r3, #0]
 800326e:	3304      	adds	r3, #4
 8003270:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003272:	4a37      	ldr	r2, [pc, #220]	@ (8003350 <RCC_SetFlashLatency+0xf8>)
 8003274:	f107 0318 	add.w	r3, r7, #24
 8003278:	e892 0003 	ldmia.w	r2, {r0, r1}
 800327c:	6018      	str	r0, [r3, #0]
 800327e:	3304      	adds	r3, #4
 8003280:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003282:	4a34      	ldr	r2, [pc, #208]	@ (8003354 <RCC_SetFlashLatency+0xfc>)
 8003284:	f107 030c 	add.w	r3, r7, #12
 8003288:	ca07      	ldmia	r2, {r0, r1, r2}
 800328a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800328e:	2300      	movs	r3, #0
 8003290:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003298:	d11b      	bne.n	80032d2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800329a:	2300      	movs	r3, #0
 800329c:	633b      	str	r3, [r7, #48]	@ 0x30
 800329e:	e014      	b.n	80032ca <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80032a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	3338      	adds	r3, #56	@ 0x38
 80032a6:	443b      	add	r3, r7
 80032a8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80032ac:	461a      	mov	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d807      	bhi.n	80032c4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80032b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	3338      	adds	r3, #56	@ 0x38
 80032ba:	443b      	add	r3, r7
 80032bc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80032c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032c2:	e021      	b.n	8003308 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80032c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c6:	3301      	adds	r3, #1
 80032c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d9e7      	bls.n	80032a0 <RCC_SetFlashLatency+0x48>
 80032d0:	e01a      	b.n	8003308 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032d6:	e014      	b.n	8003302 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80032d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	3338      	adds	r3, #56	@ 0x38
 80032de:	443b      	add	r3, r7
 80032e0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80032e4:	461a      	mov	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d807      	bhi.n	80032fc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80032ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	3338      	adds	r3, #56	@ 0x38
 80032f2:	443b      	add	r3, r7
 80032f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80032f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80032fa:	e005      	b.n	8003308 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80032fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032fe:	3301      	adds	r3, #1
 8003300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003304:	2b02      	cmp	r3, #2
 8003306:	d9e7      	bls.n	80032d8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003308:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <RCC_SetFlashLatency+0x100>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f023 0207 	bic.w	r2, r3, #7
 8003310:	4911      	ldr	r1, [pc, #68]	@ (8003358 <RCC_SetFlashLatency+0x100>)
 8003312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003314:	4313      	orrs	r3, r2
 8003316:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003318:	f7fd fe4e 	bl	8000fb8 <HAL_GetTick>
 800331c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800331e:	e008      	b.n	8003332 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003320:	f7fd fe4a 	bl	8000fb8 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e007      	b.n	8003342 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003332:	4b09      	ldr	r3, [pc, #36]	@ (8003358 <RCC_SetFlashLatency+0x100>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800333c:	429a      	cmp	r2, r3
 800333e:	d1ef      	bne.n	8003320 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3738      	adds	r7, #56	@ 0x38
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	080124f8 	.word	0x080124f8
 8003350:	08012500 	.word	0x08012500
 8003354:	08012508 	.word	0x08012508
 8003358:	58004000 	.word	0x58004000

0800335c <LL_RCC_LSE_IsReady>:
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b02      	cmp	r3, #2
 800336e:	d101      	bne.n	8003374 <LL_RCC_LSE_IsReady+0x18>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <LL_RCC_LSE_IsReady+0x1a>
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr

0800337e <LL_RCC_SetUSARTClockSource>:
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800338a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	43db      	mvns	r3, r3
 8003394:	401a      	ands	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	b29b      	uxth	r3, r3
 800339a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <LL_RCC_SetI2SClockSource>:
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80033b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <LL_RCC_SetLPUARTClockSource>:
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80033e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <LL_RCC_SetI2CClockSource>:
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800340a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800340e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800341a:	43db      	mvns	r3, r3
 800341c:	401a      	ands	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003426:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <LL_RCC_SetLPTIMClockSource>:
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003446:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	041b      	lsls	r3, r3, #16
 8003450:	43db      	mvns	r3, r3
 8003452:	401a      	ands	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <LL_RCC_SetRNGClockSource>:
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003480:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr

08003496 <LL_RCC_SetADCClockSource>:
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800349e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <LL_RCC_SetRTCClockSource>:
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80034c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <LL_RCC_GetRTCClockSource>:
{
 80034ea:	b480      	push	{r7}
 80034ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80034ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <LL_RCC_ForceBackupDomainReset>:
{
 8003502:	b480      	push	{r7}
 8003504:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003506:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003516:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800351a:	bf00      	nop
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr

08003522 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003536:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800353a:	bf00      	nop
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr
	...

08003544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003550:	2300      	movs	r3, #0
 8003552:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003554:	2300      	movs	r3, #0
 8003556:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d058      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003564:	f7fe fe20 	bl	80021a8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003568:	f7fd fd26 	bl	8000fb8 <HAL_GetTick>
 800356c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800356e:	e009      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003570:	f7fd fd22 	bl	8000fb8 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d902      	bls.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	74fb      	strb	r3, [r7, #19]
        break;
 8003582:	e006      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003584:	4b7b      	ldr	r3, [pc, #492]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800358c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003590:	d1ee      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003592:	7cfb      	ldrb	r3, [r7, #19]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d13c      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003598:	f7ff ffa7 	bl	80034ea <LL_RCC_GetRTCClockSource>
 800359c:	4602      	mov	r2, r0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d00f      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035b2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035b4:	f7ff ffa5 	bl	8003502 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035b8:	f7ff ffb3 	bl	8003522 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d014      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fd fcf2 	bl	8000fb8 <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80035d6:	e00b      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d8:	f7fd fcee 	bl	8000fb8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d902      	bls.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	74fb      	strb	r3, [r7, #19]
            break;
 80035ee:	e004      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80035f0:	f7ff feb4 	bl	800335c <LL_RCC_LSE_IsReady>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d1ee      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80035fa:	7cfb      	ldrb	r3, [r7, #19]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d105      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff ff5b 	bl	80034c0 <LL_RCC_SetRTCClockSource>
 800360a:	e004      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800360c:	7cfb      	ldrb	r3, [r7, #19]
 800360e:	74bb      	strb	r3, [r7, #18]
 8003610:	e001      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003612:	7cfb      	ldrb	r3, [r7, #19]
 8003614:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fea9 	bl	800337e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d004      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fe9e 	bl	800337e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	d004      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fec0 	bl	80033d8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003660:	2b00      	cmp	r3, #0
 8003662:	d004      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fee6 	bl	800343a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003676:	2b00      	cmp	r3, #0
 8003678:	d004      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff fedb 	bl	800343a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800368c:	2b00      	cmp	r3, #0
 800368e:	d004      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fed0 	bl	800343a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fea9 	bl	8003402 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d004      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff fe9e 	bl	8003402 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d004      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fe93 	bl	8003402 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d011      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fe5e 	bl	80033ae <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036fa:	d107      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80036fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800370a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d010      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fea5 	bl	800346c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	2b00      	cmp	r3, #0
 8003728:	d107      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800372a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003734:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003738:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d011      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fea3 	bl	8003496 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003758:	d107      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800375a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003768:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800376a:	7cbb      	ldrb	r3, [r7, #18]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	58000400 	.word	0x58000400

08003778 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8003780:	4b11      	ldr	r3, [pc, #68]	@ (80037c8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003782:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003788:	4013      	ands	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003796:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003798:	2201      	movs	r2, #1
 800379a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f815 	bl	80037cc <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80037ac:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <HAL_RTC_AlarmIRQHandler+0x50>)
 80037ae:	2202      	movs	r2, #2
 80037b0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f837 	bl	8003826 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40002800 	.word	0x40002800

080037cc <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
	...

080037e0 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80037e8:	4b09      	ldr	r3, [pc, #36]	@ (8003810 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80037ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80037f4:	4b06      	ldr	r3, [pc, #24]	@ (8003810 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80037f6:	2240      	movs	r2, #64	@ 0x40
 80037f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f80a 	bl	8003814 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40002800 	.word	0x40002800

08003814 <HAL_RTCEx_SSRUEventCallback>:
  * @brief  SSR underflow callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_SSRUEventCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003840:	4b06      	ldr	r3, [pc, #24]	@ (800385c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003848:	4904      	ldr	r1, [pc, #16]	@ (800385c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4313      	orrs	r3, r2
 800384e:	608b      	str	r3, [r1, #8]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	58000400 	.word	0x58000400

08003860 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003864:	4b05      	ldr	r3, [pc, #20]	@ (800387c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386a:	4a04      	ldr	r2, [pc, #16]	@ (800387c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800386c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	58000400 	.word	0x58000400

08003880 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003884:	4b05      	ldr	r3, [pc, #20]	@ (800389c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388a:	4a04      	ldr	r2, [pc, #16]	@ (800389c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800388c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	58000400 	.word	0x58000400

080038a0 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80038a4:	4b03      	ldr	r3, [pc, #12]	@ (80038b4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80038a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038aa:	619a      	str	r2, [r3, #24]
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	58000400 	.word	0x58000400

080038b8 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80038bc:	4b06      	ldr	r3, [pc, #24]	@ (80038d8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d101      	bne.n	80038cc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	58000400 	.word	0x58000400

080038dc <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80038e0:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d101      	bne.n	80038f0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	58000400 	.word	0x58000400

08003900 <LL_RCC_RF_DisableReset>:
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800390c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003910:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003914:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <LL_RCC_IsRFUnderReset>:
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003928:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800392c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003930:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003934:	d101      	bne.n	800393a <LL_RCC_IsRFUnderReset+0x1a>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <LL_RCC_IsRFUnderReset+0x1c>
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800394c:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <LL_EXTI_EnableIT_32_63+0x24>)
 800394e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003952:	4905      	ldr	r1, [pc, #20]	@ (8003968 <LL_EXTI_EnableIT_32_63+0x24>)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	58000800 	.word	0x58000800

0800396c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d103      	bne.n	8003982 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
    return status;
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	e052      	b.n	8003a28 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	799b      	ldrb	r3, [r3, #6]
 800398a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800398c:	7bbb      	ldrb	r3, [r7, #14]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_SUBGHZ_Init+0x2c>
 8003992:	7bbb      	ldrb	r3, [r7, #14]
 8003994:	2b03      	cmp	r3, #3
 8003996:	d109      	bne.n	80039ac <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fd fa10 	bl	8000dc4 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80039a4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80039a8:	f7ff ffcc 	bl	8003944 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80039ac:	7bbb      	ldrb	r3, [r7, #14]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d126      	bne.n	8003a00 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80039b8:	f7ff ffa2 	bl	8003900 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80039bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003a30 <HAL_SUBGHZ_Init+0xc4>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	0cdb      	lsrs	r3, r3, #19
 80039ca:	2264      	movs	r2, #100	@ 0x64
 80039cc:	fb02 f303 	mul.w	r3, r2, r3
 80039d0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d105      	bne.n	80039e4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	609a      	str	r2, [r3, #8]
        break;
 80039e2:	e007      	b.n	80039f4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80039ea:	f7ff ff99 	bl	8003920 <LL_RCC_IsRFUnderReset>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ee      	bne.n	80039d2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80039f4:	f7ff ff34 	bl	8003860 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80039f8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80039fc:	f7ff ff1c 	bl	8003838 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003a00:	f7ff ff4e 	bl	80038a0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10a      	bne.n	8003a20 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fab0 	bl	8003f74 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	719a      	strb	r2, [r3, #6]

  return status;
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	2000004c 	.word	0x2000004c

08003a34 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	460b      	mov	r3, r1
 8003a42:	817b      	strh	r3, [r7, #10]
 8003a44:	4613      	mov	r3, r2
 8003a46:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	799b      	ldrb	r3, [r3, #6]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d14a      	bne.n	8003ae8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	795b      	ldrb	r3, [r3, #5]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e045      	b.n	8003aea <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2202      	movs	r2, #2
 8003a68:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fb50 	bl	8004110 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003a70:	f7ff ff06 	bl	8003880 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003a74:	210d      	movs	r1, #13
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 fa9c 	bl	8003fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003a7c:	897b      	ldrh	r3, [r7, #10]
 8003a7e:	0a1b      	lsrs	r3, r3, #8
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	4619      	mov	r1, r3
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fa94 	bl	8003fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003a8c:	897b      	ldrh	r3, [r7, #10]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	4619      	mov	r1, r3
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fa8e 	bl	8003fb4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003a98:	2300      	movs	r3, #0
 8003a9a:	82bb      	strh	r3, [r7, #20]
 8003a9c:	e00a      	b.n	8003ab4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003a9e:	8abb      	ldrh	r3, [r7, #20]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fa83 	bl	8003fb4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003aae:	8abb      	ldrh	r3, [r7, #20]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	82bb      	strh	r3, [r7, #20]
 8003ab4:	8aba      	ldrh	r2, [r7, #20]
 8003ab6:	893b      	ldrh	r3, [r7, #8]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d3f0      	bcc.n	8003a9e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003abc:	f7ff fed0 	bl	8003860 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 fb49 	bl	8004158 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	75fb      	strb	r3, [r7, #23]
 8003ad2:	e001      	b.n	8003ad8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	715a      	strb	r2, [r3, #5]

    return status;
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
 8003ae6:	e000      	b.n	8003aea <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
  }
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b088      	sub	sp, #32
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	461a      	mov	r2, r3
 8003afe:	460b      	mov	r3, r1
 8003b00:	817b      	strh	r3, [r7, #10]
 8003b02:	4613      	mov	r3, r2
 8003b04:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	799b      	ldrb	r3, [r3, #6]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d14a      	bne.n	8003baa <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	795b      	ldrb	r3, [r3, #5]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e045      	b.n	8003bac <HAL_SUBGHZ_ReadRegisters+0xba>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 faf2 	bl	8004110 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003b2c:	f7ff fea8 	bl	8003880 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003b30:	211d      	movs	r1, #29
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fa3e 	bl	8003fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003b38:	897b      	ldrh	r3, [r7, #10]
 8003b3a:	0a1b      	lsrs	r3, r3, #8
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	4619      	mov	r1, r3
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fa36 	bl	8003fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003b48:	897b      	ldrh	r3, [r7, #10]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fa30 	bl	8003fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003b54:	2100      	movs	r1, #0
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fa2c 	bl	8003fb4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	82fb      	strh	r3, [r7, #22]
 8003b60:	e009      	b.n	8003b76 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003b62:	69b9      	ldr	r1, [r7, #24]
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fa7b 	bl	8004060 <SUBGHZSPI_Receive>
      pData++;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003b70:	8afb      	ldrh	r3, [r7, #22]
 8003b72:	3301      	adds	r3, #1
 8003b74:	82fb      	strh	r3, [r7, #22]
 8003b76:	8afa      	ldrh	r2, [r7, #22]
 8003b78:	893b      	ldrh	r3, [r7, #8]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d3f1      	bcc.n	8003b62 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003b7e:	f7ff fe6f 	bl	8003860 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fae8 	bl	8004158 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e001      	b.n	8003b9a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	715a      	strb	r2, [r3, #5]

    return status;
 8003ba6:	7ffb      	ldrb	r3, [r7, #31]
 8003ba8:	e000      	b.n	8003bac <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003baa:	2302      	movs	r3, #2
  }
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3720      	adds	r7, #32
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	72fb      	strb	r3, [r7, #11]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	799b      	ldrb	r3, [r3, #6]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d14a      	bne.n	8003c68 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	795b      	ldrb	r3, [r3, #5]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e045      	b.n	8003c6a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fa93 	bl	8004110 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003bea:	7afb      	ldrb	r3, [r7, #11]
 8003bec:	2b84      	cmp	r3, #132	@ 0x84
 8003bee:	d002      	beq.n	8003bf6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003bf0:	7afb      	ldrb	r3, [r7, #11]
 8003bf2:	2b94      	cmp	r3, #148	@ 0x94
 8003bf4:	d103      	bne.n	8003bfe <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	711a      	strb	r2, [r3, #4]
 8003bfc:	e002      	b.n	8003c04 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003c04:	f7ff fe3c 	bl	8003880 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003c08:	7afb      	ldrb	r3, [r7, #11]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f9d1 	bl	8003fb4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003c12:	2300      	movs	r3, #0
 8003c14:	82bb      	strh	r3, [r7, #20]
 8003c16:	e00a      	b.n	8003c2e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003c18:	8abb      	ldrh	r3, [r7, #20]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	4619      	mov	r1, r3
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f9c6 	bl	8003fb4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003c28:	8abb      	ldrh	r3, [r7, #20]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	82bb      	strh	r3, [r7, #20]
 8003c2e:	8aba      	ldrh	r2, [r7, #20]
 8003c30:	893b      	ldrh	r3, [r7, #8]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d3f0      	bcc.n	8003c18 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003c36:	f7ff fe13 	bl	8003860 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003c3a:	7afb      	ldrb	r3, [r7, #11]
 8003c3c:	2b84      	cmp	r3, #132	@ 0x84
 8003c3e:	d002      	beq.n	8003c46 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fa89 	bl	8004158 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	75fb      	strb	r3, [r7, #23]
 8003c52:	e001      	b.n	8003c58 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	715a      	strb	r2, [r3, #5]

    return status;
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	e000      	b.n	8003c6a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b088      	sub	sp, #32
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	460b      	mov	r3, r1
 8003c80:	72fb      	strb	r3, [r7, #11]
 8003c82:	4613      	mov	r3, r2
 8003c84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	799b      	ldrb	r3, [r3, #6]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d13d      	bne.n	8003d10 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	795b      	ldrb	r3, [r3, #5]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e038      	b.n	8003d12 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 fa32 	bl	8004110 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003cac:	f7ff fde8 	bl	8003880 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003cb0:	7afb      	ldrb	r3, [r7, #11]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f97d 	bl	8003fb4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003cba:	2100      	movs	r1, #0
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f979 	bl	8003fb4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	82fb      	strh	r3, [r7, #22]
 8003cc6:	e009      	b.n	8003cdc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f9c8 	bl	8004060 <SUBGHZSPI_Receive>
      pData++;
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003cd6:	8afb      	ldrh	r3, [r7, #22]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	82fb      	strh	r3, [r7, #22]
 8003cdc:	8afa      	ldrh	r2, [r7, #22]
 8003cde:	893b      	ldrh	r3, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d3f1      	bcc.n	8003cc8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003ce4:	f7ff fdbc 	bl	8003860 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fa35 	bl	8004158 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e001      	b.n	8003d00 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	715a      	strb	r2, [r3, #5]

    return status;
 8003d0c:	7ffb      	ldrb	r3, [r7, #31]
 8003d0e:	e000      	b.n	8003d12 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
  }
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	461a      	mov	r2, r3
 8003d26:	460b      	mov	r3, r1
 8003d28:	72fb      	strb	r3, [r7, #11]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	799b      	ldrb	r3, [r3, #6]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d13e      	bne.n	8003db6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	795b      	ldrb	r3, [r3, #5]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e039      	b.n	8003db8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 f9e0 	bl	8004110 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003d50:	f7ff fd96 	bl	8003880 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003d54:	210e      	movs	r1, #14
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f92c 	bl	8003fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003d5c:	7afb      	ldrb	r3, [r7, #11]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f927 	bl	8003fb4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003d66:	2300      	movs	r3, #0
 8003d68:	82bb      	strh	r3, [r7, #20]
 8003d6a:	e00a      	b.n	8003d82 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003d6c:	8abb      	ldrh	r3, [r7, #20]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	4619      	mov	r1, r3
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 f91c 	bl	8003fb4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003d7c:	8abb      	ldrh	r3, [r7, #20]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	82bb      	strh	r3, [r7, #20]
 8003d82:	8aba      	ldrh	r2, [r7, #20]
 8003d84:	893b      	ldrh	r3, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d3f0      	bcc.n	8003d6c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d8a:	f7ff fd69 	bl	8003860 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f9e2 	bl	8004158 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	75fb      	strb	r3, [r7, #23]
 8003da0:	e001      	b.n	8003da6 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	715a      	strb	r2, [r3, #5]

    return status;
 8003db2:	7dfb      	ldrb	r3, [r7, #23]
 8003db4:	e000      	b.n	8003db8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003db6:	2302      	movs	r3, #2
  }
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	607a      	str	r2, [r7, #4]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	460b      	mov	r3, r1
 8003dce:	72fb      	strb	r3, [r7, #11]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	799b      	ldrb	r3, [r3, #6]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d141      	bne.n	8003e66 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	795b      	ldrb	r3, [r3, #5]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e03c      	b.n	8003e68 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f98b 	bl	8004110 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003dfa:	f7ff fd41 	bl	8003880 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003dfe:	211e      	movs	r1, #30
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 f8d7 	bl	8003fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003e06:	7afb      	ldrb	r3, [r7, #11]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f8d2 	bl	8003fb4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003e10:	2100      	movs	r1, #0
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f8ce 	bl	8003fb4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	82fb      	strh	r3, [r7, #22]
 8003e1c:	e009      	b.n	8003e32 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003e1e:	69b9      	ldr	r1, [r7, #24]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f91d 	bl	8004060 <SUBGHZSPI_Receive>
      pData++;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003e2c:	8afb      	ldrh	r3, [r7, #22]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	82fb      	strh	r3, [r7, #22]
 8003e32:	8afa      	ldrh	r2, [r7, #22]
 8003e34:	893b      	ldrh	r3, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d3f1      	bcc.n	8003e1e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003e3a:	f7ff fd11 	bl	8003860 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f98a 	bl	8004158 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e001      	b.n	8003e56 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	715a      	strb	r2, [r3, #5]

    return status;
 8003e62:	7ffb      	ldrb	r3, [r7, #31]
 8003e64:	e000      	b.n	8003e68 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
  }
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3720      	adds	r7, #32
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8003e78:	2300      	movs	r3, #0
 8003e7a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8003e7c:	f107 020c 	add.w	r2, r7, #12
 8003e80:	2302      	movs	r3, #2
 8003e82:	2112      	movs	r1, #18
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff fef4 	bl	8003c72 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8003e8a:	7b3b      	ldrb	r3, [r7, #12]
 8003e8c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8003e8e:	89fb      	ldrh	r3, [r7, #14]
 8003e90:	021b      	lsls	r3, r3, #8
 8003e92:	b21a      	sxth	r2, r3
 8003e94:	7b7b      	ldrb	r3, [r7, #13]
 8003e96:	b21b      	sxth	r3, r3
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	b21b      	sxth	r3, r3
 8003e9c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8003e9e:	f107 020c 	add.w	r2, r7, #12
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff fe84 	bl	8003bb4 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003eac:	89fb      	ldrh	r3, [r7, #14]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f00d fd5a 	bl	8011970 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8003ebc:	89fb      	ldrh	r3, [r7, #14]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <HAL_SUBGHZ_IRQHandler+0x66>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8003ec6:	89fb      	ldrh	r3, [r7, #14]
 8003ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d102      	bne.n	8003ed6 <HAL_SUBGHZ_IRQHandler+0x66>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f00d fd5b 	bl	801198c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003ed6:	89fb      	ldrh	r3, [r7, #14]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f00d fdab 	bl	8011a3c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003ee6:	89fb      	ldrh	r3, [r7, #14]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f00d fdb1 	bl	8011a58 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003ef6:	89fb      	ldrh	r3, [r7, #14]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f00d fdb7 	bl	8011a74 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003f06:	89fb      	ldrh	r3, [r7, #14]
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f00d fd85 	bl	8011a20 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003f16:	89fb      	ldrh	r3, [r7, #14]
 8003f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_SUBGHZ_IRQHandler+0xb6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f00d fd41 	bl	80119a8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003f26:	89fb      	ldrh	r3, [r7, #14]
 8003f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00d      	beq.n	8003f4c <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003f30:	89fb      	ldrh	r3, [r7, #14]
 8003f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f00d fd41 	bl	80119c4 <HAL_SUBGHZ_CADStatusCallback>
 8003f42:	e003      	b.n	8003f4c <HAL_SUBGHZ_IRQHandler+0xdc>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003f44:	2100      	movs	r1, #0
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f00d fd3c 	bl	80119c4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003f4c:	89fb      	ldrh	r3, [r7, #14]
 8003f4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f00d fd52 	bl	8011a00 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8003f5c:	89fb      	ldrh	r3, [r7, #14]
 8003f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_SUBGHZ_IRQHandler+0xfc>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f00d fd92 	bl	8011a90 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb0 <SUBGHZSPI_Init+0x3c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0b      	ldr	r2, [pc, #44]	@ (8003fb0 <SUBGHZSPI_Init+0x3c>)
 8003f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f86:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003f88:	4a09      	ldr	r2, [pc, #36]	@ (8003fb0 <SUBGHZSPI_Init+0x3c>)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8003f90:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003f92:	4b07      	ldr	r3, [pc, #28]	@ (8003fb0 <SUBGHZSPI_Init+0x3c>)
 8003f94:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8003f98:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003f9a:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <SUBGHZSPI_Init+0x3c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a04      	ldr	r2, [pc, #16]	@ (8003fb0 <SUBGHZSPI_Init+0x3c>)
 8003fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fa4:	6013      	str	r3, [r2, #0]
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr
 8003fb0:	58010000 	.word	0x58010000

08003fb4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003fc4:	4b23      	ldr	r3, [pc, #140]	@ (8004054 <SUBGHZSPI_Transmit+0xa0>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	0cdb      	lsrs	r3, r3, #19
 8003fd2:	2264      	movs	r2, #100	@ 0x64
 8003fd4:	fb02 f303 	mul.w	r3, r2, r3
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	609a      	str	r2, [r3, #8]
      break;
 8003fea:	e008      	b.n	8003ffe <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003ff2:	4b19      	ldr	r3, [pc, #100]	@ (8004058 <SUBGHZSPI_Transmit+0xa4>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d1ed      	bne.n	8003fda <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003ffe:	4b17      	ldr	r3, [pc, #92]	@ (800405c <SUBGHZSPI_Transmit+0xa8>)
 8004000:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004008:	4b12      	ldr	r3, [pc, #72]	@ (8004054 <SUBGHZSPI_Transmit+0xa0>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4613      	mov	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	1a9b      	subs	r3, r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	0cdb      	lsrs	r3, r3, #19
 8004016:	2264      	movs	r2, #100	@ 0x64
 8004018:	fb02 f303 	mul.w	r3, r2, r3
 800401c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d105      	bne.n	8004030 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	609a      	str	r2, [r3, #8]
      break;
 800402e:	e008      	b.n	8004042 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3b01      	subs	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004036:	4b08      	ldr	r3, [pc, #32]	@ (8004058 <SUBGHZSPI_Transmit+0xa4>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d1ed      	bne.n	800401e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004042:	4b05      	ldr	r3, [pc, #20]	@ (8004058 <SUBGHZSPI_Transmit+0xa4>)
 8004044:	68db      	ldr	r3, [r3, #12]

  return status;
 8004046:	7dfb      	ldrb	r3, [r7, #23]
}
 8004048:	4618      	mov	r0, r3
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	2000004c 	.word	0x2000004c
 8004058:	58010000 	.word	0x58010000
 800405c:	5801000c 	.word	0x5801000c

08004060 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800406e:	4b25      	ldr	r3, [pc, #148]	@ (8004104 <SUBGHZSPI_Receive+0xa4>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	0cdb      	lsrs	r3, r3, #19
 800407c:	2264      	movs	r2, #100	@ 0x64
 800407e:	fb02 f303 	mul.w	r3, r2, r3
 8004082:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d105      	bne.n	8004096 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	609a      	str	r2, [r3, #8]
      break;
 8004094:	e008      	b.n	80040a8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3b01      	subs	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800409c:	4b1a      	ldr	r3, [pc, #104]	@ (8004108 <SUBGHZSPI_Receive+0xa8>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d1ed      	bne.n	8004084 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80040a8:	4b18      	ldr	r3, [pc, #96]	@ (800410c <SUBGHZSPI_Receive+0xac>)
 80040aa:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	22ff      	movs	r2, #255	@ 0xff
 80040b0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80040b2:	4b14      	ldr	r3, [pc, #80]	@ (8004104 <SUBGHZSPI_Receive+0xa4>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	4613      	mov	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	0cdb      	lsrs	r3, r3, #19
 80040c0:	2264      	movs	r2, #100	@ 0x64
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d105      	bne.n	80040da <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	609a      	str	r2, [r3, #8]
      break;
 80040d8:	e008      	b.n	80040ec <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3b01      	subs	r3, #1
 80040de:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80040e0:	4b09      	ldr	r3, [pc, #36]	@ (8004108 <SUBGHZSPI_Receive+0xa8>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d1ed      	bne.n	80040c8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80040ec:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <SUBGHZSPI_Receive+0xa8>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	701a      	strb	r2, [r3, #0]

  return status;
 80040f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	2000004c 	.word	0x2000004c
 8004108:	58010000 	.word	0x58010000
 800410c:	5801000c 	.word	0x5801000c

08004110 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	791b      	ldrb	r3, [r3, #4]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d111      	bne.n	8004144 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004120:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <SUBGHZ_CheckDeviceReady+0x44>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	4413      	add	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	0c1b      	lsrs	r3, r3, #16
 800412e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004130:	f7ff fba6 	bl	8003880 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3b01      	subs	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f9      	bne.n	8004134 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004140:	f7ff fb8e 	bl	8003860 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f807 	bl	8004158 <SUBGHZ_WaitOnBusy>
 800414a:	4603      	mov	r3, r0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	2000004c 	.word	0x2000004c

08004158 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004164:	4b12      	ldr	r3, [pc, #72]	@ (80041b0 <SUBGHZ_WaitOnBusy+0x58>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	4413      	add	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	0d1b      	lsrs	r3, r3, #20
 8004172:	2264      	movs	r2, #100	@ 0x64
 8004174:	fb02 f303 	mul.w	r3, r2, r3
 8004178:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800417a:	f7ff fbaf 	bl	80038dc <LL_PWR_IsActiveFlag_RFBUSYMS>
 800417e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d105      	bne.n	8004192 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2202      	movs	r2, #2
 800418e:	609a      	str	r2, [r3, #8]
      break;
 8004190:	e009      	b.n	80041a6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3b01      	subs	r3, #1
 8004196:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004198:	f7ff fb8e 	bl	80038b8 <LL_PWR_IsActiveFlag_RFBUSYS>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d0e9      	beq.n	800417a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	2000004c 	.word	0x2000004c

080041b4 <LL_RCC_GetUSARTClockSource>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80041bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	401a      	ands	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	041b      	lsls	r3, r3, #16
 80041cc:	4313      	orrs	r3, r2
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <LL_RCC_GetLPUARTClockSource>:
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80041e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4013      	ands	r3, r2
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr

080041f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e042      	b.n	800428e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fd f89c 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2224      	movs	r2, #36	@ 0x24
 8004224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fddf 	bl	8004e04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fb68 	bl	800491c <UART_SetConfig>
 800424c:	4603      	mov	r3, r0
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e01b      	b.n	800428e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004264:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004274:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0201 	orr.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fe5d 	bl	8004f46 <UART_CheckIdleState>
 800428c:	4603      	mov	r3, r0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b0ba      	sub	sp, #232	@ 0xe8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80042c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80042c6:	4013      	ands	r3, r2
 80042c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80042cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d11b      	bne.n	800430c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d015      	beq.n	800430c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d105      	bne.n	80042f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 82e3 	beq.w	80048c8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	4798      	blx	r3
      }
      return;
 800430a:	e2dd      	b.n	80048c8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800430c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8123 	beq.w	800455c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004316:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800431a:	4b8d      	ldr	r3, [pc, #564]	@ (8004550 <HAL_UART_IRQHandler+0x2b8>)
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004322:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004326:	4b8b      	ldr	r3, [pc, #556]	@ (8004554 <HAL_UART_IRQHandler+0x2bc>)
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 8116 	beq.w	800455c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d011      	beq.n	8004360 <HAL_UART_IRQHandler+0xc8>
 800433c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2201      	movs	r2, #1
 800434e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004356:	f043 0201 	orr.w	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d011      	beq.n	8004390 <HAL_UART_IRQHandler+0xf8>
 800436c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00b      	beq.n	8004390 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2202      	movs	r2, #2
 800437e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004386:	f043 0204 	orr.w	r2, r3, #4
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d011      	beq.n	80043c0 <HAL_UART_IRQHandler+0x128>
 800439c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00b      	beq.n	80043c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2204      	movs	r2, #4
 80043ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b6:	f043 0202 	orr.w	r2, r3, #2
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d017      	beq.n	80043fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80043d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80043dc:	4b5c      	ldr	r3, [pc, #368]	@ (8004550 <HAL_UART_IRQHandler+0x2b8>)
 80043de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2208      	movs	r2, #8
 80043ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f2:	f043 0208 	orr.w	r2, r3, #8
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004404:	2b00      	cmp	r3, #0
 8004406:	d012      	beq.n	800442e <HAL_UART_IRQHandler+0x196>
 8004408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800440c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00c      	beq.n	800442e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800441c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004424:	f043 0220 	orr.w	r2, r3, #32
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 8249 	beq.w	80048cc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800443a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d013      	beq.n	800446e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004474:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004482:	2b40      	cmp	r3, #64	@ 0x40
 8004484:	d005      	beq.n	8004492 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800448a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800448e:	2b00      	cmp	r3, #0
 8004490:	d054      	beq.n	800453c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fe73 	bl	800517e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a2:	2b40      	cmp	r3, #64	@ 0x40
 80044a4:	d146      	bne.n	8004534 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3308      	adds	r3, #8
 80044ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80044bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3308      	adds	r3, #8
 80044ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80044de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80044ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1d9      	bne.n	80044a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d017      	beq.n	800452c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004502:	4a15      	ldr	r2, [pc, #84]	@ (8004558 <HAL_UART_IRQHandler+0x2c0>)
 8004504:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800450c:	4618      	mov	r0, r3
 800450e:	f7fd fb37 	bl	8001b80 <HAL_DMA_Abort_IT>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d019      	beq.n	800454c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800451e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004526:	4610      	mov	r0, r2
 8004528:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800452a:	e00f      	b.n	800454c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f9e0 	bl	80048f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004532:	e00b      	b.n	800454c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f9dc 	bl	80048f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800453a:	e007      	b.n	800454c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f9d8 	bl	80048f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800454a:	e1bf      	b.n	80048cc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454c:	bf00      	nop
    return;
 800454e:	e1bd      	b.n	80048cc <HAL_UART_IRQHandler+0x634>
 8004550:	10000001 	.word	0x10000001
 8004554:	04000120 	.word	0x04000120
 8004558:	08005249 	.word	0x08005249

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004560:	2b01      	cmp	r3, #1
 8004562:	f040 8153 	bne.w	800480c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 814c 	beq.w	800480c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 8145 	beq.w	800480c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2210      	movs	r2, #16
 8004588:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004594:	2b40      	cmp	r3, #64	@ 0x40
 8004596:	f040 80bb 	bne.w	8004710 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 818f 	beq.w	80048d0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80045b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045bc:	429a      	cmp	r2, r3
 80045be:	f080 8187 	bcs.w	80048d0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f040 8087 	bne.w	80046ee <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80045f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800460a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800460e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004616:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004622:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1da      	bne.n	80045e0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3308      	adds	r3, #8
 8004630:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800463a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3308      	adds	r3, #8
 800464a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800464e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004652:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004656:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004660:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e1      	bne.n	800462a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3308      	adds	r3, #8
 800466c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004678:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800467c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3308      	adds	r3, #8
 8004686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800468a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800468c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004690:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004698:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1e3      	bne.n	8004666 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046bc:	f023 0310 	bic.w	r3, r3, #16
 80046c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046d6:	e841 2300 	strex	r3, r2, [r1]
 80046da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1e4      	bne.n	80046ac <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fd f9eb 	bl	8001ac4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004700:	b29b      	uxth	r3, r3
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	b29b      	uxth	r3, r3
 8004706:	4619      	mov	r1, r3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f8fb 	bl	8004904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800470e:	e0df      	b.n	80048d0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800471c:	b29b      	uxth	r3, r3
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80d1 	beq.w	80048d4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004732:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80cc 	beq.w	80048d4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004744:	e853 3f00 	ldrex	r3, [r3]
 8004748:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800474a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004750:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800475e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004760:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004764:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800476c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e4      	bne.n	800473c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3308      	adds	r3, #8
 8004778:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	623b      	str	r3, [r7, #32]
   return(result);
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3308      	adds	r3, #8
 8004796:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800479a:	633a      	str	r2, [r7, #48]	@ 0x30
 800479c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e1      	bne.n	8004772 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	e853 3f00 	ldrex	r3, [r3]
 80047ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0310 	bic.w	r3, r3, #16
 80047d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047e4:	61fb      	str	r3, [r7, #28]
 80047e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	69b9      	ldr	r1, [r7, #24]
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	e841 2300 	strex	r3, r2, [r1]
 80047f0:	617b      	str	r3, [r7, #20]
   return(result);
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e4      	bne.n	80047c2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004802:	4619      	mov	r1, r3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f87d 	bl	8004904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800480a:	e063      	b.n	80048d4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800480c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00e      	beq.n	8004836 <HAL_UART_IRQHandler+0x59e>
 8004818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800481c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800482c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fdb4 	bl	800539c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004834:	e051      	b.n	80048da <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800483a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483e:	2b00      	cmp	r3, #0
 8004840:	d014      	beq.n	800486c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800484a:	2b00      	cmp	r3, #0
 800484c:	d105      	bne.n	800485a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800484e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004852:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d008      	beq.n	800486c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800485e:	2b00      	cmp	r3, #0
 8004860:	d03a      	beq.n	80048d8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	4798      	blx	r3
    }
    return;
 800486a:	e035      	b.n	80048d8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800486c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	d009      	beq.n	800488c <HAL_UART_IRQHandler+0x5f4>
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800487c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fcf5 	bl	8005274 <UART_EndTransmit_IT>
    return;
 800488a:	e026      	b.n	80048da <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004890:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <HAL_UART_IRQHandler+0x614>
 8004898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800489c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fd8b 	bl	80053c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048aa:	e016      	b.n	80048da <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80048ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d010      	beq.n	80048da <HAL_UART_IRQHandler+0x642>
 80048b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	da0c      	bge.n	80048da <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fd74 	bl	80053ae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048c6:	e008      	b.n	80048da <HAL_UART_IRQHandler+0x642>
      return;
 80048c8:	bf00      	nop
 80048ca:	e006      	b.n	80048da <HAL_UART_IRQHandler+0x642>
    return;
 80048cc:	bf00      	nop
 80048ce:	e004      	b.n	80048da <HAL_UART_IRQHandler+0x642>
      return;
 80048d0:	bf00      	nop
 80048d2:	e002      	b.n	80048da <HAL_UART_IRQHandler+0x642>
      return;
 80048d4:	bf00      	nop
 80048d6:	e000      	b.n	80048da <HAL_UART_IRQHandler+0x642>
    return;
 80048d8:	bf00      	nop
  }
}
 80048da:	37e8      	adds	r7, #232	@ 0xe8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr

080048f2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
	...

0800491c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800491c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004920:	b08c      	sub	sp, #48	@ 0x30
 8004922:	af00      	add	r7, sp, #0
 8004924:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	431a      	orrs	r2, r3
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	431a      	orrs	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	4313      	orrs	r3, r2
 8004942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b94      	ldr	r3, [pc, #592]	@ (8004b9c <UART_SetConfig+0x280>)
 800494c:	4013      	ands	r3, r2
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004954:	430b      	orrs	r3, r1
 8004956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a89      	ldr	r2, [pc, #548]	@ (8004ba0 <UART_SetConfig+0x284>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004984:	4313      	orrs	r3, r2
 8004986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004992:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	6812      	ldr	r2, [r2, #0]
 800499a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800499c:	430b      	orrs	r3, r1
 800499e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a6:	f023 010f 	bic.w	r1, r3, #15
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a7a      	ldr	r2, [pc, #488]	@ (8004ba4 <UART_SetConfig+0x288>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d127      	bne.n	8004a10 <UART_SetConfig+0xf4>
 80049c0:	2003      	movs	r0, #3
 80049c2:	f7ff fbf7 	bl	80041b4 <LL_RCC_GetUSARTClockSource>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d81b      	bhi.n	8004a08 <UART_SetConfig+0xec>
 80049d0:	a201      	add	r2, pc, #4	@ (adr r2, 80049d8 <UART_SetConfig+0xbc>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049f9 	.word	0x080049f9
 80049e0:	080049f1 	.word	0x080049f1
 80049e4:	08004a01 	.word	0x08004a01
 80049e8:	2301      	movs	r3, #1
 80049ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ee:	e080      	b.n	8004af2 <UART_SetConfig+0x1d6>
 80049f0:	2302      	movs	r3, #2
 80049f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049f6:	e07c      	b.n	8004af2 <UART_SetConfig+0x1d6>
 80049f8:	2304      	movs	r3, #4
 80049fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049fe:	e078      	b.n	8004af2 <UART_SetConfig+0x1d6>
 8004a00:	2308      	movs	r3, #8
 8004a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a06:	e074      	b.n	8004af2 <UART_SetConfig+0x1d6>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a0e:	e070      	b.n	8004af2 <UART_SetConfig+0x1d6>
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a64      	ldr	r2, [pc, #400]	@ (8004ba8 <UART_SetConfig+0x28c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d138      	bne.n	8004a8c <UART_SetConfig+0x170>
 8004a1a:	200c      	movs	r0, #12
 8004a1c:	f7ff fbca 	bl	80041b4 <LL_RCC_GetUSARTClockSource>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d82c      	bhi.n	8004a84 <UART_SetConfig+0x168>
 8004a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a30 <UART_SetConfig+0x114>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a65 	.word	0x08004a65
 8004a34:	08004a85 	.word	0x08004a85
 8004a38:	08004a85 	.word	0x08004a85
 8004a3c:	08004a85 	.word	0x08004a85
 8004a40:	08004a75 	.word	0x08004a75
 8004a44:	08004a85 	.word	0x08004a85
 8004a48:	08004a85 	.word	0x08004a85
 8004a4c:	08004a85 	.word	0x08004a85
 8004a50:	08004a6d 	.word	0x08004a6d
 8004a54:	08004a85 	.word	0x08004a85
 8004a58:	08004a85 	.word	0x08004a85
 8004a5c:	08004a85 	.word	0x08004a85
 8004a60:	08004a7d 	.word	0x08004a7d
 8004a64:	2300      	movs	r3, #0
 8004a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a6a:	e042      	b.n	8004af2 <UART_SetConfig+0x1d6>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a72:	e03e      	b.n	8004af2 <UART_SetConfig+0x1d6>
 8004a74:	2304      	movs	r3, #4
 8004a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a7a:	e03a      	b.n	8004af2 <UART_SetConfig+0x1d6>
 8004a7c:	2308      	movs	r3, #8
 8004a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a82:	e036      	b.n	8004af2 <UART_SetConfig+0x1d6>
 8004a84:	2310      	movs	r3, #16
 8004a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a8a:	e032      	b.n	8004af2 <UART_SetConfig+0x1d6>
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a43      	ldr	r2, [pc, #268]	@ (8004ba0 <UART_SetConfig+0x284>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d12a      	bne.n	8004aec <UART_SetConfig+0x1d0>
 8004a96:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004a9a:	f7ff fb9d 	bl	80041d8 <LL_RCC_GetLPUARTClockSource>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004aa4:	d01a      	beq.n	8004adc <UART_SetConfig+0x1c0>
 8004aa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004aaa:	d81b      	bhi.n	8004ae4 <UART_SetConfig+0x1c8>
 8004aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ab0:	d00c      	beq.n	8004acc <UART_SetConfig+0x1b0>
 8004ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ab6:	d815      	bhi.n	8004ae4 <UART_SetConfig+0x1c8>
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <UART_SetConfig+0x1a8>
 8004abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac0:	d008      	beq.n	8004ad4 <UART_SetConfig+0x1b8>
 8004ac2:	e00f      	b.n	8004ae4 <UART_SetConfig+0x1c8>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aca:	e012      	b.n	8004af2 <UART_SetConfig+0x1d6>
 8004acc:	2302      	movs	r3, #2
 8004ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ad2:	e00e      	b.n	8004af2 <UART_SetConfig+0x1d6>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ada:	e00a      	b.n	8004af2 <UART_SetConfig+0x1d6>
 8004adc:	2308      	movs	r3, #8
 8004ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae2:	e006      	b.n	8004af2 <UART_SetConfig+0x1d6>
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aea:	e002      	b.n	8004af2 <UART_SetConfig+0x1d6>
 8004aec:	2310      	movs	r3, #16
 8004aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2a      	ldr	r2, [pc, #168]	@ (8004ba0 <UART_SetConfig+0x284>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	f040 80a4 	bne.w	8004c46 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004afe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d823      	bhi.n	8004b4e <UART_SetConfig+0x232>
 8004b06:	a201      	add	r2, pc, #4	@ (adr r2, 8004b0c <UART_SetConfig+0x1f0>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b4f 	.word	0x08004b4f
 8004b14:	08004b39 	.word	0x08004b39
 8004b18:	08004b4f 	.word	0x08004b4f
 8004b1c:	08004b3f 	.word	0x08004b3f
 8004b20:	08004b4f 	.word	0x08004b4f
 8004b24:	08004b4f 	.word	0x08004b4f
 8004b28:	08004b4f 	.word	0x08004b4f
 8004b2c:	08004b47 	.word	0x08004b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b30:	f7fe fb3e 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 8004b34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b36:	e010      	b.n	8004b5a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b38:	4b1c      	ldr	r3, [pc, #112]	@ (8004bac <UART_SetConfig+0x290>)
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b3c:	e00d      	b.n	8004b5a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b3e:	f7fe fa83 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8004b42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b44:	e009      	b.n	8004b5a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b4c:	e005      	b.n	8004b5a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8137 	beq.w	8004dd0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b66:	4a12      	ldr	r2, [pc, #72]	@ (8004bb0 <UART_SetConfig+0x294>)
 8004b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	4413      	add	r3, r2
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d305      	bcc.n	8004b92 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d910      	bls.n	8004bb4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b98:	e11a      	b.n	8004dd0 <UART_SetConfig+0x4b4>
 8004b9a:	bf00      	nop
 8004b9c:	cfff69f3 	.word	0xcfff69f3
 8004ba0:	40008000 	.word	0x40008000
 8004ba4:	40013800 	.word	0x40013800
 8004ba8:	40004400 	.word	0x40004400
 8004bac:	00f42400 	.word	0x00f42400
 8004bb0:	08012654 	.word	0x08012654
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	60fa      	str	r2, [r7, #12]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc0:	4a8e      	ldr	r2, [pc, #568]	@ (8004dfc <UART_SetConfig+0x4e0>)
 8004bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2200      	movs	r2, #0
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bd6:	f7fb fe49 	bl	800086c <__aeabi_uldivmod>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4610      	mov	r0, r2
 8004be0:	4619      	mov	r1, r3
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	020b      	lsls	r3, r1, #8
 8004bec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004bf0:	0202      	lsls	r2, r0, #8
 8004bf2:	6979      	ldr	r1, [r7, #20]
 8004bf4:	6849      	ldr	r1, [r1, #4]
 8004bf6:	0849      	lsrs	r1, r1, #1
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	4605      	mov	r5, r0
 8004bfe:	eb12 0804 	adds.w	r8, r2, r4
 8004c02:	eb43 0905 	adc.w	r9, r3, r5
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	469a      	mov	sl, r3
 8004c0e:	4693      	mov	fp, r2
 8004c10:	4652      	mov	r2, sl
 8004c12:	465b      	mov	r3, fp
 8004c14:	4640      	mov	r0, r8
 8004c16:	4649      	mov	r1, r9
 8004c18:	f7fb fe28 	bl	800086c <__aeabi_uldivmod>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4613      	mov	r3, r2
 8004c22:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c2a:	d308      	bcc.n	8004c3e <UART_SetConfig+0x322>
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c32:	d204      	bcs.n	8004c3e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6a3a      	ldr	r2, [r7, #32]
 8004c3a:	60da      	str	r2, [r3, #12]
 8004c3c:	e0c8      	b.n	8004dd0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c44:	e0c4      	b.n	8004dd0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c4e:	d167      	bne.n	8004d20 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004c50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d828      	bhi.n	8004caa <UART_SetConfig+0x38e>
 8004c58:	a201      	add	r2, pc, #4	@ (adr r2, 8004c60 <UART_SetConfig+0x344>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004c85 	.word	0x08004c85
 8004c64:	08004c8d 	.word	0x08004c8d
 8004c68:	08004c95 	.word	0x08004c95
 8004c6c:	08004cab 	.word	0x08004cab
 8004c70:	08004c9b 	.word	0x08004c9b
 8004c74:	08004cab 	.word	0x08004cab
 8004c78:	08004cab 	.word	0x08004cab
 8004c7c:	08004cab 	.word	0x08004cab
 8004c80:	08004ca3 	.word	0x08004ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c84:	f7fe fa94 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 8004c88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c8a:	e014      	b.n	8004cb6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c8c:	f7fe faa2 	bl	80031d4 <HAL_RCC_GetPCLK2Freq>
 8004c90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c92:	e010      	b.n	8004cb6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c94:	4b5a      	ldr	r3, [pc, #360]	@ (8004e00 <UART_SetConfig+0x4e4>)
 8004c96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c98:	e00d      	b.n	8004cb6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9a:	f7fe f9d5 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8004c9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ca0:	e009      	b.n	8004cb6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ca8:	e005      	b.n	8004cb6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004cb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 8089 	beq.w	8004dd0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	4a4e      	ldr	r2, [pc, #312]	@ (8004dfc <UART_SetConfig+0x4e0>)
 8004cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cd0:	005a      	lsls	r2, r3, #1
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	085b      	lsrs	r3, r3, #1
 8004cd8:	441a      	add	r2, r3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	2b0f      	cmp	r3, #15
 8004ce8:	d916      	bls.n	8004d18 <UART_SetConfig+0x3fc>
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf0:	d212      	bcs.n	8004d18 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f023 030f 	bic.w	r3, r3, #15
 8004cfa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	8bfb      	ldrh	r3, [r7, #30]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	8bfa      	ldrh	r2, [r7, #30]
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	e05b      	b.n	8004dd0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d1e:	e057      	b.n	8004dd0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d828      	bhi.n	8004d7a <UART_SetConfig+0x45e>
 8004d28:	a201      	add	r2, pc, #4	@ (adr r2, 8004d30 <UART_SetConfig+0x414>)
 8004d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2e:	bf00      	nop
 8004d30:	08004d55 	.word	0x08004d55
 8004d34:	08004d5d 	.word	0x08004d5d
 8004d38:	08004d65 	.word	0x08004d65
 8004d3c:	08004d7b 	.word	0x08004d7b
 8004d40:	08004d6b 	.word	0x08004d6b
 8004d44:	08004d7b 	.word	0x08004d7b
 8004d48:	08004d7b 	.word	0x08004d7b
 8004d4c:	08004d7b 	.word	0x08004d7b
 8004d50:	08004d73 	.word	0x08004d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d54:	f7fe fa2c 	bl	80031b0 <HAL_RCC_GetPCLK1Freq>
 8004d58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d5a:	e014      	b.n	8004d86 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d5c:	f7fe fa3a 	bl	80031d4 <HAL_RCC_GetPCLK2Freq>
 8004d60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d62:	e010      	b.n	8004d86 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d64:	4b26      	ldr	r3, [pc, #152]	@ (8004e00 <UART_SetConfig+0x4e4>)
 8004d66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d68:	e00d      	b.n	8004d86 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d6a:	f7fe f96d 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8004d6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d70:	e009      	b.n	8004d86 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d78:	e005      	b.n	8004d86 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d84:	bf00      	nop
    }

    if (pclk != 0U)
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d021      	beq.n	8004dd0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	4a1a      	ldr	r2, [pc, #104]	@ (8004dfc <UART_SetConfig+0x4e0>)
 8004d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d96:	461a      	mov	r2, r3
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	085b      	lsrs	r3, r3, #1
 8004da4:	441a      	add	r2, r3
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	2b0f      	cmp	r3, #15
 8004db4:	d909      	bls.n	8004dca <UART_SetConfig+0x4ae>
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dbc:	d205      	bcs.n	8004dca <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60da      	str	r2, [r3, #12]
 8004dc8:	e002      	b.n	8004dd0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2200      	movs	r2, #0
 8004de4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2200      	movs	r2, #0
 8004dea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004dec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3730      	adds	r7, #48	@ 0x30
 8004df4:	46bd      	mov	sp, r7
 8004df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dfa:	bf00      	nop
 8004dfc:	08012654 	.word	0x08012654
 8004e00:	00f42400 	.word	0x00f42400

08004e04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01a      	beq.n	8004f1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f02:	d10a      	bne.n	8004f1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	605a      	str	r2, [r3, #4]
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr

08004f46 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b086      	sub	sp, #24
 8004f4a:	af02      	add	r7, sp, #8
 8004f4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f56:	f7fc f82f 	bl	8000fb8 <HAL_GetTick>
 8004f5a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d10e      	bne.n	8004f88 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f832 	bl	8004fe2 <UART_WaitOnFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e028      	b.n	8004fda <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d10e      	bne.n	8004fb4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f96:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f81c 	bl	8004fe2 <UART_WaitOnFlagUntilTimeout>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e012      	b.n	8004fda <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b09c      	sub	sp, #112	@ 0x70
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff2:	e0af      	b.n	8005154 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffa:	f000 80ab 	beq.w	8005154 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffe:	f7fb ffdb 	bl	8000fb8 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <UART_WaitOnFlagUntilTimeout+0x32>
 800500e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005010:	2b00      	cmp	r3, #0
 8005012:	d140      	bne.n	8005096 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005024:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005028:	667b      	str	r3, [r7, #100]	@ 0x64
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005032:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005034:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005038:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e6      	bne.n	8005014 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3308      	adds	r3, #8
 800504c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	663b      	str	r3, [r7, #96]	@ 0x60
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3308      	adds	r3, #8
 8005064:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005066:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005068:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800506c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e5      	bne.n	8005046 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2220      	movs	r2, #32
 8005086:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e06f      	b.n	8005176 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d057      	beq.n	8005154 <UART_WaitOnFlagUntilTimeout+0x172>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b80      	cmp	r3, #128	@ 0x80
 80050a8:	d054      	beq.n	8005154 <UART_WaitOnFlagUntilTimeout+0x172>
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2b40      	cmp	r3, #64	@ 0x40
 80050ae:	d051      	beq.n	8005154 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050be:	d149      	bne.n	8005154 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80050de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80050ea:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80050f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e6      	bne.n	80050ca <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3308      	adds	r3, #8
 8005102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	613b      	str	r3, [r7, #16]
   return(result);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f023 0301 	bic.w	r3, r3, #1
 8005112:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3308      	adds	r3, #8
 800511a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800511c:	623a      	str	r2, [r7, #32]
 800511e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	69f9      	ldr	r1, [r7, #28]
 8005122:	6a3a      	ldr	r2, [r7, #32]
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	61bb      	str	r3, [r7, #24]
   return(result);
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e5      	bne.n	80050fc <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e010      	b.n	8005176 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69da      	ldr	r2, [r3, #28]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	4013      	ands	r3, r2
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	429a      	cmp	r2, r3
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	429a      	cmp	r2, r3
 8005170:	f43f af40 	beq.w	8004ff4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3770      	adds	r7, #112	@ 0x70
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800517e:	b480      	push	{r7}
 8005180:	b095      	sub	sp, #84	@ 0x54
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005196:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800519a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	461a      	mov	r2, r3
 80051a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80051a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e6      	bne.n	8005186 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3308      	adds	r3, #8
 80051be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051ce:	f023 0301 	bic.w	r3, r3, #1
 80051d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3308      	adds	r3, #8
 80051da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e3      	bne.n	80051b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d118      	bne.n	800522a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	60bb      	str	r3, [r7, #8]
   return(result);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f023 0310 	bic.w	r3, r3, #16
 800520c:	647b      	str	r3, [r7, #68]	@ 0x44
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	6979      	ldr	r1, [r7, #20]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	613b      	str	r3, [r7, #16]
   return(result);
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e6      	bne.n	80051f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800523e:	bf00      	nop
 8005240:	3754      	adds	r7, #84	@ 0x54
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr

08005248 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005254:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f7ff fb43 	bl	80048f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	60bb      	str	r3, [r7, #8]
   return(result);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005290:	61fb      	str	r3, [r7, #28]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6979      	ldr	r1, [r7, #20]
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	613b      	str	r3, [r7, #16]
   return(result);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e6      	bne.n	800527c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff fb0f 	bl	80048e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052c2:	bf00      	nop
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b086      	sub	sp, #24
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e058      	b.n	8005394 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d106      	bne.n	80052fa <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7fc f82f 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2224      	movs	r2, #36	@ 0x24
 80052fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0201 	bic.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff fd72 	bl	8004e04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff fafb 	bl	800491c <UART_SetConfig>
 8005326:	4603      	mov	r3, r0
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e031      	b.n	8005394 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800533e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	430a      	orrs	r2, r1
 8005352:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	055b      	lsls	r3, r3, #21
 8005358:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	041b      	lsls	r3, r3, #16
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 800536e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	6812      	ldr	r2, [r2, #0]
 8005376:	6979      	ldr	r1, [r7, #20]
 8005378:	430b      	orrs	r3, r1
 800537a:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f7ff fdda 	bl	8004f46 <UART_CheckIdleState>
 8005392:	4603      	mov	r3, r0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr

080053ae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr

080053c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e027      	b.n	8005438 <HAL_UARTEx_DisableFifoMode+0x66>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2224      	movs	r2, #36	@ 0x24
 80053f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0201 	bic.w	r2, r2, #1
 800540e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005416:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2220      	movs	r2, #32
 800542a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr

08005442 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005456:	2302      	movs	r3, #2
 8005458:	e02d      	b.n	80054b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2224      	movs	r2, #36	@ 0x24
 8005466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0201 	bic.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f850 	bl	800553c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e02d      	b.n	8005532 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2224      	movs	r2, #36	@ 0x24
 80054e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0201 	bic.w	r2, r2, #1
 80054fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f812 	bl	800553c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005548:	2b00      	cmp	r3, #0
 800554a:	d108      	bne.n	800555e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800555c:	e031      	b.n	80055c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800555e:	2308      	movs	r3, #8
 8005560:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005562:	2308      	movs	r3, #8
 8005564:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	0e5b      	lsrs	r3, r3, #25
 800556e:	b2db      	uxtb	r3, r3
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	0f5b      	lsrs	r3, r3, #29
 800557e:	b2db      	uxtb	r3, r3
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005586:	7bbb      	ldrb	r3, [r7, #14]
 8005588:	7b3a      	ldrb	r2, [r7, #12]
 800558a:	4910      	ldr	r1, [pc, #64]	@ (80055cc <UARTEx_SetNbDataToProcess+0x90>)
 800558c:	5c8a      	ldrb	r2, [r1, r2]
 800558e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005592:	7b3a      	ldrb	r2, [r7, #12]
 8005594:	490e      	ldr	r1, [pc, #56]	@ (80055d0 <UARTEx_SetNbDataToProcess+0x94>)
 8005596:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005598:	fb93 f3f2 	sdiv	r3, r3, r2
 800559c:	b29a      	uxth	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	7b7a      	ldrb	r2, [r7, #13]
 80055a8:	4908      	ldr	r1, [pc, #32]	@ (80055cc <UARTEx_SetNbDataToProcess+0x90>)
 80055aa:	5c8a      	ldrb	r2, [r1, r2]
 80055ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055b0:	7b7a      	ldrb	r2, [r7, #13]
 80055b2:	4907      	ldr	r1, [pc, #28]	@ (80055d0 <UARTEx_SetNbDataToProcess+0x94>)
 80055b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80055c2:	bf00      	nop
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr
 80055cc:	0801266c 	.word	0x0801266c
 80055d0:	08012674 	.word	0x08012674

080055d4 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 80055de:	4a22      	ldr	r2, [pc, #136]	@ (8005668 <LmHandlerInit+0x94>)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80055e4:	4b21      	ldr	r3, [pc, #132]	@ (800566c <LmHandlerInit+0x98>)
 80055e6:	4a22      	ldr	r2, [pc, #136]	@ (8005670 <LmHandlerInit+0x9c>)
 80055e8:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80055ea:	4b20      	ldr	r3, [pc, #128]	@ (800566c <LmHandlerInit+0x98>)
 80055ec:	4a21      	ldr	r2, [pc, #132]	@ (8005674 <LmHandlerInit+0xa0>)
 80055ee:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80055f0:	4b1e      	ldr	r3, [pc, #120]	@ (800566c <LmHandlerInit+0x98>)
 80055f2:	4a21      	ldr	r2, [pc, #132]	@ (8005678 <LmHandlerInit+0xa4>)
 80055f4:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80055f6:	4b1d      	ldr	r3, [pc, #116]	@ (800566c <LmHandlerInit+0x98>)
 80055f8:	4a20      	ldr	r2, [pc, #128]	@ (800567c <LmHandlerInit+0xa8>)
 80055fa:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 80055fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005668 <LmHandlerInit+0x94>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a1f      	ldr	r2, [pc, #124]	@ (8005680 <LmHandlerInit+0xac>)
 8005604:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8005606:	4b18      	ldr	r3, [pc, #96]	@ (8005668 <LmHandlerInit+0x94>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	4a1c      	ldr	r2, [pc, #112]	@ (8005680 <LmHandlerInit+0xac>)
 800560e:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8005610:	4b15      	ldr	r3, [pc, #84]	@ (8005668 <LmHandlerInit+0x94>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	4a1a      	ldr	r2, [pc, #104]	@ (8005680 <LmHandlerInit+0xac>)
 8005618:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800561a:	4b13      	ldr	r3, [pc, #76]	@ (8005668 <LmHandlerInit+0x94>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4a17      	ldr	r2, [pc, #92]	@ (8005680 <LmHandlerInit+0xac>)
 8005622:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8005624:	4b16      	ldr	r3, [pc, #88]	@ (8005680 <LmHandlerInit+0xac>)
 8005626:	4a17      	ldr	r2, [pc, #92]	@ (8005684 <LmHandlerInit+0xb0>)
 8005628:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800562a:	4b0f      	ldr	r3, [pc, #60]	@ (8005668 <LmHandlerInit+0x94>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	4a13      	ldr	r2, [pc, #76]	@ (8005680 <LmHandlerInit+0xac>)
 8005632:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 8005634:	4914      	ldr	r1, [pc, #80]	@ (8005688 <LmHandlerInit+0xb4>)
 8005636:	2000      	movs	r0, #0
 8005638:	f000 fc5c 	bl	8005ef4 <LmHandlerPackageRegister>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 8005642:	f04f 33ff 	mov.w	r3, #4294967295
 8005646:	e00a      	b.n	800565e <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 8005648:	463b      	mov	r3, r7
 800564a:	4618      	mov	r0, r3
 800564c:	f001 f878 	bl	8006740 <LmhpPackagesRegistrationInit>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 8005656:	f04f 33ff 	mov.w	r3, #4294967295
 800565a:	e000      	b.n	800565e <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	200003b0 	.word	0x200003b0
 800566c:	200003b4 	.word	0x200003b4
 8005670:	08005bb9 	.word	0x08005bb9
 8005674:	08005c2d 	.word	0x08005c2d
 8005678:	08005d0d 	.word	0x08005d0d
 800567c:	08005e61 	.word	0x08005e61
 8005680:	200003c4 	.word	0x200003c4
 8005684:	0800992d 	.word	0x0800992d
 8005688:	20000054 	.word	0x20000054

0800568c <LmHandlerJoin>:
{
    return DutyCycleWaitTime;
}

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b092      	sub	sp, #72	@ 0x48
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	460a      	mov	r2, r1
 8005696:	71fb      	strb	r3, [r7, #7]
 8005698:	4613      	mov	r3, r2
 800569a:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800569c:	2301      	movs	r3, #1
 800569e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80056a2:	4b47      	ldr	r3, [pc, #284]	@ (80057c0 <LmHandlerJoin+0x134>)
 80056a4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 80056ae:	4b44      	ldr	r3, [pc, #272]	@ (80057c0 <LmHandlerJoin+0x134>)
 80056b0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80056b4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 80056b8:	79fb      	ldrb	r3, [r7, #7]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d110      	bne.n	80056e0 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80056be:	2302      	movs	r3, #2
 80056c0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 80056c4:	4b3f      	ldr	r3, [pc, #252]	@ (80057c4 <LmHandlerJoin+0x138>)
 80056c6:	2202      	movs	r2, #2
 80056c8:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 80056ca:	4a3e      	ldr	r2, [pc, #248]	@ (80057c4 <LmHandlerJoin+0x138>)
 80056cc:	79bb      	ldrb	r3, [r7, #6]
 80056ce:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 80056d0:	f002 f894 	bl	80077fc <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 80056d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80056d8:	4618      	mov	r0, r3
 80056da:	f002 feaf 	bl	800843c <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 80056de:	e06b      	b.n	80057b8 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80056e6:	4b37      	ldr	r3, [pc, #220]	@ (80057c4 <LmHandlerJoin+0x138>)
 80056e8:	2201      	movs	r2, #1
 80056ea:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 80056ec:	4b34      	ldr	r3, [pc, #208]	@ (80057c0 <LmHandlerJoin+0x134>)
 80056ee:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80056f2:	4b34      	ldr	r3, [pc, #208]	@ (80057c4 <LmHandlerJoin+0x138>)
 80056f4:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 80056f6:	4b32      	ldr	r3, [pc, #200]	@ (80057c0 <LmHandlerJoin+0x134>)
 80056f8:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80056fc:	4b31      	ldr	r3, [pc, #196]	@ (80057c4 <LmHandlerJoin+0x138>)
 80056fe:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8005700:	4b30      	ldr	r3, [pc, #192]	@ (80057c4 <LmHandlerJoin+0x138>)
 8005702:	2200      	movs	r2, #0
 8005704:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8005706:	4a2f      	ldr	r2, [pc, #188]	@ (80057c4 <LmHandlerJoin+0x138>)
 8005708:	79bb      	ldrb	r3, [r7, #6]
 800570a:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800570c:	4b2e      	ldr	r3, [pc, #184]	@ (80057c8 <LmHandlerJoin+0x13c>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	f083 0301 	eor.w	r3, r3, #1
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d034      	beq.n	8005784 <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800571a:	231e      	movs	r3, #30
 800571c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800571e:	4b28      	ldr	r3, [pc, #160]	@ (80057c0 <LmHandlerJoin+0x134>)
 8005720:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8005724:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8005726:	f107 030c 	add.w	r3, r7, #12
 800572a:	4618      	mov	r0, r3
 800572c:	f002 fad0 	bl	8007cd0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8005730:	231f      	movs	r3, #31
 8005732:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8005734:	4b22      	ldr	r3, [pc, #136]	@ (80057c0 <LmHandlerJoin+0x134>)
 8005736:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800573a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800573c:	f107 030c 	add.w	r3, r7, #12
 8005740:	4618      	mov	r0, r3
 8005742:	f002 fac5 	bl	8007cd0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8005746:	2321      	movs	r3, #33	@ 0x21
 8005748:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800574a:	4b1d      	ldr	r3, [pc, #116]	@ (80057c0 <LmHandlerJoin+0x134>)
 800574c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005750:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8005752:	f107 030c 	add.w	r3, r7, #12
 8005756:	4618      	mov	r0, r3
 8005758:	f002 faba 	bl	8007cd0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800575c:	2320      	movs	r3, #32
 800575e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 8005760:	4b17      	ldr	r3, [pc, #92]	@ (80057c0 <LmHandlerJoin+0x134>)
 8005762:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005766:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8005768:	f107 030c 	add.w	r3, r7, #12
 800576c:	4618      	mov	r0, r3
 800576e:	f002 faaf 	bl	8007cd0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8005772:	2328      	movs	r3, #40	@ 0x28
 8005774:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8005776:	4b15      	ldr	r3, [pc, #84]	@ (80057cc <LmHandlerJoin+0x140>)
 8005778:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800577a:	f107 030c 	add.w	r3, r7, #12
 800577e:	4618      	mov	r0, r3
 8005780:	f002 faa6 	bl	8007cd0 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 8005784:	f002 f83a 	bl	80077fc <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8005788:	2301      	movs	r3, #1
 800578a:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800578c:	2301      	movs	r3, #1
 800578e:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8005790:	f107 030c 	add.w	r3, r7, #12
 8005794:	4618      	mov	r0, r3
 8005796:	f002 fa9b 	bl	8007cd0 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800579a:	4b0d      	ldr	r3, [pc, #52]	@ (80057d0 <LmHandlerJoin+0x144>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d004      	beq.n	80057ae <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80057a4:	4b0a      	ldr	r3, [pc, #40]	@ (80057d0 <LmHandlerJoin+0x144>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057aa:	4806      	ldr	r0, [pc, #24]	@ (80057c4 <LmHandlerJoin+0x138>)
 80057ac:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 80057ae:	4b04      	ldr	r3, [pc, #16]	@ (80057c0 <LmHandlerJoin+0x134>)
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 f930 	bl	8005a18 <LmHandlerRequestClass>
}
 80057b8:	bf00      	nop
 80057ba:	3748      	adds	r7, #72	@ 0x48
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20000398 	.word	0x20000398
 80057c4:	20000060 	.word	0x20000060
 80057c8:	200004d2 	.word	0x200004d2
 80057cc:	01000300 	.word	0x01000300
 80057d0:	200003b0 	.word	0x200003b0

080057d4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08c      	sub	sp, #48	@ 0x30
 80057d8:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80057da:	2301      	movs	r3, #1
 80057dc:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80057de:	1d3b      	adds	r3, r7, #4
 80057e0:	4618      	mov	r0, r3
 80057e2:	f002 f89f 	bl	8007924 <LoRaMacMibGetRequestConfirm>
 80057e6:	4603      	mov	r3, r0
 80057e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 80057ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 80057f4:	7a3b      	ldrb	r3, [r7, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 80057fa:	2300      	movs	r3, #0
 80057fc:	e002      	b.n	8005804 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 8005802:	2300      	movs	r3, #0
    }
}
 8005804:	4618      	mov	r0, r3
 8005806:	3730      	adds	r7, #48	@ 0x30
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	@ 0x28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	70fb      	strb	r3, [r7, #3]
 8005818:	4613      	mov	r3, r2
 800581a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800581c:	23ff      	movs	r3, #255	@ 0xff
 800581e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 8005822:	f000 ffbd 	bl	80067a0 <LoRaMacIsBusy>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800582c:	f06f 0301 	mvn.w	r3, #1
 8005830:	e0bc      	b.n	80059ac <LmHandlerSend+0x1a0>
    }

    if( LoRaMacIsStopped() == true )
 8005832:	f000 ffd1 	bl	80067d8 <LoRaMacIsStopped>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800583c:	f06f 0302 	mvn.w	r3, #2
 8005840:	e0b4      	b.n	80059ac <LmHandlerSend+0x1a0>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8005842:	f7ff ffc7 	bl	80057d4 <LmHandlerJoinStatus>
 8005846:	4603      	mov	r3, r0
 8005848:	2b01      	cmp	r3, #1
 800584a:	d00a      	beq.n	8005862 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800584c:	4b59      	ldr	r3, [pc, #356]	@ (80059b4 <LmHandlerSend+0x1a8>)
 800584e:	79db      	ldrb	r3, [r3, #7]
 8005850:	4a58      	ldr	r2, [pc, #352]	@ (80059b4 <LmHandlerSend+0x1a8>)
 8005852:	7a12      	ldrb	r2, [r2, #8]
 8005854:	4611      	mov	r1, r2
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff ff18 	bl	800568c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800585c:	f06f 0302 	mvn.w	r3, #2
 8005860:	e0a4      	b.n	80059ac <LmHandlerSend+0x1a0>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 8005862:	4b55      	ldr	r3, [pc, #340]	@ (80059b8 <LmHandlerSend+0x1ac>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4798      	blx	r3
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00d      	beq.n	800588c <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	781a      	ldrb	r2, [r3, #0]
 8005874:	4b50      	ldr	r3, [pc, #320]	@ (80059b8 <LmHandlerSend+0x1ac>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d006      	beq.n	800588c <LmHandlerSend+0x80>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8005886:	f06f 0303 	mvn.w	r3, #3
 800588a:	e08f      	b.n	80059ac <LmHandlerSend+0x1a0>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800588c:	4a4b      	ldr	r2, [pc, #300]	@ (80059bc <LmHandlerSend+0x1b0>)
 800588e:	78fb      	ldrb	r3, [r7, #3]
 8005890:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8005892:	78fb      	ldrb	r3, [r7, #3]
 8005894:	2b00      	cmp	r3, #0
 8005896:	bf14      	ite	ne
 8005898:	2301      	movne	r3, #1
 800589a:	2300      	moveq	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80058a0:	4b47      	ldr	r3, [pc, #284]	@ (80059c0 <LmHandlerSend+0x1b4>)
 80058a2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80058a6:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	785b      	ldrb	r3, [r3, #1]
 80058ac:	f107 020c 	add.w	r2, r7, #12
 80058b0:	4611      	mov	r1, r2
 80058b2:	4618      	mov	r0, r3
 80058b4:	f001 ffb0 	bl	8007818 <LoRaMacQueryTxPossible>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 80058be:	2300      	movs	r3, #0
 80058c0:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 80058ca:	23f9      	movs	r3, #249	@ 0xf9
 80058cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80058d0:	e008      	b.n	80058e4 <LmHandlerSend+0xd8>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 80058e4:	4b35      	ldr	r3, [pc, #212]	@ (80059bc <LmHandlerSend+0x1b0>)
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	3310      	adds	r3, #16
 80058ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058ee:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 80058f2:	4b33      	ldr	r3, [pc, #204]	@ (80059c0 <LmHandlerSend+0x1b4>)
 80058f4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80058f8:	4b30      	ldr	r3, [pc, #192]	@ (80059bc <LmHandlerSend+0x1b0>)
 80058fa:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 80058fc:	78ba      	ldrb	r2, [r7, #2]
 80058fe:	f107 0310 	add.w	r3, r7, #16
 8005902:	4611      	mov	r1, r2
 8005904:	4618      	mov	r0, r3
 8005906:	f002 feeb 	bl	80086e0 <LoRaMacMcpsRequest>
 800590a:	4603      	mov	r3, r0
 800590c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	4a2c      	ldr	r2, [pc, #176]	@ (80059c4 <LmHandlerSend+0x1b8>)
 8005914:	6013      	str	r3, [r2, #0]

    switch( status )
 8005916:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800591a:	2b11      	cmp	r3, #17
 800591c:	d83f      	bhi.n	800599e <LmHandlerSend+0x192>
 800591e:	a201      	add	r2, pc, #4	@ (adr r2, 8005924 <LmHandlerSend+0x118>)
 8005920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005924:	0800596d 	.word	0x0800596d
 8005928:	0800597f 	.word	0x0800597f
 800592c:	0800599f 	.word	0x0800599f
 8005930:	0800599f 	.word	0x0800599f
 8005934:	0800599f 	.word	0x0800599f
 8005938:	0800599f 	.word	0x0800599f
 800593c:	0800599f 	.word	0x0800599f
 8005940:	08005987 	.word	0x08005987
 8005944:	0800599f 	.word	0x0800599f
 8005948:	0800599f 	.word	0x0800599f
 800594c:	0800599f 	.word	0x0800599f
 8005950:	08005997 	.word	0x08005997
 8005954:	0800599f 	.word	0x0800599f
 8005958:	0800599f 	.word	0x0800599f
 800595c:	0800597f 	.word	0x0800597f
 8005960:	0800597f 	.word	0x0800597f
 8005964:	0800597f 	.word	0x0800597f
 8005968:	0800598f 	.word	0x0800598f
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800596c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005970:	f113 0f07 	cmn.w	r3, #7
 8005974:	d017      	beq.n	80059a6 <LmHandlerSend+0x19a>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8005976:	2300      	movs	r3, #0
 8005978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800597c:	e013      	b.n	80059a6 <LmHandlerSend+0x19a>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800597e:	23fe      	movs	r3, #254	@ 0xfe
 8005980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8005984:	e010      	b.n	80059a8 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8005986:	23fd      	movs	r3, #253	@ 0xfd
 8005988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800598c:	e00c      	b.n	80059a8 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800598e:	23fb      	movs	r3, #251	@ 0xfb
 8005990:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8005994:	e008      	b.n	80059a8 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8005996:	23fa      	movs	r3, #250	@ 0xfa
 8005998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800599c:	e004      	b.n	80059a8 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800599e:	23ff      	movs	r3, #255	@ 0xff
 80059a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80059a4:	e000      	b.n	80059a8 <LmHandlerSend+0x19c>
            break;
 80059a6:	bf00      	nop
    }

    return lmhStatus;
 80059a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3728      	adds	r7, #40	@ 0x28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20000060 	.word	0x20000060
 80059b8:	20000384 	.word	0x20000384
 80059bc:	2000006c 	.word	0x2000006c
 80059c0:	20000398 	.word	0x20000398
 80059c4:	200003dc 	.word	0x200003dc

080059c8 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 80059ce:	230a      	movs	r3, #10
 80059d0:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 80059d2:	463b      	mov	r3, r7
 80059d4:	4618      	mov	r0, r3
 80059d6:	f002 fd31 	bl	800843c <LoRaMacMlmeRequest>
 80059da:	4603      	mov	r3, r0
 80059dc:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	4a06      	ldr	r2, [pc, #24]	@ (80059fc <LmHandlerDeviceTimeReq+0x34>)
 80059e2:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e001      	b.n	80059f2 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 80059ee:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	200003dc 	.word	0x200003dc

08005a00 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 8005a0a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	4770      	bx	lr

08005a18 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08e      	sub	sp, #56	@ 0x38
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	4603      	mov	r3, r0
 8005a20:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8005a22:	2300      	movs	r3, #0
 8005a24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 8005a28:	f000 feba 	bl	80067a0 <LoRaMacIsBusy>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8005a32:	f06f 0301 	mvn.w	r3, #1
 8005a36:	e071      	b.n	8005b1c <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8005a38:	f7ff fecc 	bl	80057d4 <LmHandlerJoinStatus>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d002      	beq.n	8005a48 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8005a42:	f06f 0302 	mvn.w	r3, #2
 8005a46:	e069      	b.n	8005b1c <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8005a4c:	f107 030c 	add.w	r3, r7, #12
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 ff67 	bl	8007924 <LoRaMacMibGetRequestConfirm>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 8005a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a60:	e05c      	b.n	8005b1c <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 8005a62:	7c3b      	ldrb	r3, [r7, #16]
 8005a64:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 8005a68:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d052      	beq.n	8005b18 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d028      	beq.n	8005aca <LmHandlerRequestClass+0xb2>
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	dc48      	bgt.n	8005b0e <LmHandlerRequestClass+0xf6>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <LmHandlerRequestClass+0x6e>
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d01e      	beq.n	8005ac2 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 8005a84:	e043      	b.n	8005b0e <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 8005a86:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d041      	beq.n	8005b12 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8005a92:	f107 030c 	add.w	r3, r7, #12
 8005a96:	4618      	mov	r0, r3
 8005a98:	f002 f91a 	bl	8007cd0 <LoRaMacMibSetRequestConfirm>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10b      	bne.n	8005aba <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8005aa2:	4b20      	ldr	r3, [pc, #128]	@ (8005b24 <LmHandlerRequestClass+0x10c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d032      	beq.n	8005b12 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8005aac:	4b1d      	ldr	r3, [pc, #116]	@ (8005b24 <LmHandlerRequestClass+0x10c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab2:	79fa      	ldrb	r2, [r7, #7]
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4798      	blx	r3
                break;
 8005ab8:	e02b      	b.n	8005b12 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8005aba:	23ff      	movs	r3, #255	@ 0xff
 8005abc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 8005ac0:	e027      	b.n	8005b12 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8005ac2:	23ff      	movs	r3, #255	@ 0xff
 8005ac4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 8005ac8:	e026      	b.n	8005b18 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 8005aca:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8005ad2:	23ff      	movs	r3, #255	@ 0xff
 8005ad4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 8005ad8:	e01d      	b.n	8005b16 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8005ade:	f107 030c 	add.w	r3, r7, #12
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f002 f8f4 	bl	8007cd0 <LoRaMacMibSetRequestConfirm>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10b      	bne.n	8005b06 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8005aee:	4b0d      	ldr	r3, [pc, #52]	@ (8005b24 <LmHandlerRequestClass+0x10c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00e      	beq.n	8005b16 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8005af8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b24 <LmHandlerRequestClass+0x10c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afe:	79fa      	ldrb	r2, [r7, #7]
 8005b00:	4610      	mov	r0, r2
 8005b02:	4798      	blx	r3
                break;
 8005b04:	e007      	b.n	8005b16 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8005b06:	23ff      	movs	r3, #255	@ 0xff
 8005b08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 8005b0c:	e003      	b.n	8005b16 <LmHandlerRequestClass+0xfe>
                break;
 8005b0e:	bf00      	nop
 8005b10:	e002      	b.n	8005b18 <LmHandlerRequestClass+0x100>
                break;
 8005b12:	bf00      	nop
 8005b14:	e000      	b.n	8005b18 <LmHandlerRequestClass+0x100>
                break;
 8005b16:	bf00      	nop
        }
    }
    return errorStatus;
 8005b18:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3738      	adds	r7, #56	@ 0x38
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	200003b0 	.word	0x200003b0

08005b28 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08c      	sub	sp, #48	@ 0x30
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d102      	bne.n	8005b3c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3a:	e010      	b.n	8005b5e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8005b40:	f107 0308 	add.w	r3, r7, #8
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 feed 	bl	8007924 <LoRaMacMibGetRequestConfirm>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8005b50:	f04f 33ff 	mov.w	r3, #4294967295
 8005b54:	e003      	b.n	8005b5e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 8005b56:	7b3a      	ldrb	r2, [r7, #12]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3730      	adds	r7, #48	@ 0x30
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08c      	sub	sp, #48	@ 0x30
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8005b76:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7a:	e016      	b.n	8005baa <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 8005b7c:	231f      	movs	r3, #31
 8005b7e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 8005b80:	f107 0308 	add.w	r3, r7, #8
 8005b84:	4618      	mov	r0, r3
 8005b86:	f001 fecd 	bl	8007924 <LoRaMacMibGetRequestConfirm>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8005b90:	f04f 33ff 	mov.w	r3, #4294967295
 8005b94:	e009      	b.n	8005baa <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 8005b96:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f993 2000 	ldrsb.w	r2, [r3]
 8005ba4:	4b03      	ldr	r3, [pc, #12]	@ (8005bb4 <LmHandlerGetTxDatarate+0x4c>)
 8005ba6:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3730      	adds	r7, #48	@ 0x30
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000398 	.word	0x20000398

08005bb8 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 8005bc0:	4b18      	ldr	r3, [pc, #96]	@ (8005c24 <McpsConfirm+0x6c>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	785a      	ldrb	r2, [r3, #1]
 8005bca:	4b16      	ldr	r3, [pc, #88]	@ (8005c24 <McpsConfirm+0x6c>)
 8005bcc:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	789b      	ldrb	r3, [r3, #2]
 8005bd2:	b25a      	sxtb	r2, r3
 8005bd4:	4b13      	ldr	r3, [pc, #76]	@ (8005c24 <McpsConfirm+0x6c>)
 8005bd6:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4a11      	ldr	r2, [pc, #68]	@ (8005c24 <McpsConfirm+0x6c>)
 8005bde:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8005be6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c24 <McpsConfirm+0x6c>)
 8005be8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c24 <McpsConfirm+0x6c>)
 8005bf2:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	791b      	ldrb	r3, [r3, #4]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8005c24 <McpsConfirm+0x6c>)
 8005bfc:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 8005bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8005c28 <McpsConfirm+0x70>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d004      	beq.n	8005c12 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 8005c08:	4b07      	ldr	r3, [pc, #28]	@ (8005c28 <McpsConfirm+0x70>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0e:	4805      	ldr	r0, [pc, #20]	@ (8005c24 <McpsConfirm+0x6c>)
 8005c10:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	2000      	movs	r0, #0
 8005c16:	f000 f9cd 	bl	8005fb4 <LmHandlerPackagesNotify>
}
 8005c1a:	bf00      	nop
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	2000006c 	.word	0x2000006c
 8005c28:	200003b0 	.word	0x200003b0

08005c2c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 8005c36:	2300      	movs	r3, #0
 8005c38:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 8005c3a:	4b32      	ldr	r3, [pc, #200]	@ (8005d04 <McpsIndication+0xd8>)
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	785a      	ldrb	r2, [r3, #1]
 8005c44:	4b2f      	ldr	r3, [pc, #188]	@ (8005d04 <McpsIndication+0xd8>)
 8005c46:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8005c48:	4b2e      	ldr	r3, [pc, #184]	@ (8005d04 <McpsIndication+0xd8>)
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d155      	bne.n	8005cfc <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	791b      	ldrb	r3, [r3, #4]
 8005c54:	b25a      	sxtb	r2, r3
 8005c56:	4b2b      	ldr	r3, [pc, #172]	@ (8005d04 <McpsIndication+0xd8>)
 8005c58:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c60:	b25a      	sxtb	r2, r3
 8005c62:	4b28      	ldr	r3, [pc, #160]	@ (8005d04 <McpsIndication+0xd8>)
 8005c64:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8005c6c:	4b25      	ldr	r3, [pc, #148]	@ (8005d04 <McpsIndication+0xd8>)
 8005c6e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	78da      	ldrb	r2, [r3, #3]
 8005c74:	4b23      	ldr	r3, [pc, #140]	@ (8005d04 <McpsIndication+0xd8>)
 8005c76:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	4a21      	ldr	r2, [pc, #132]	@ (8005d04 <McpsIndication+0xd8>)
 8005c7e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	78db      	ldrb	r3, [r3, #3]
 8005c84:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	7b1b      	ldrb	r3, [r3, #12]
 8005c8a:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 8005c92:	4b1d      	ldr	r3, [pc, #116]	@ (8005d08 <McpsIndication+0xdc>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d007      	beq.n	8005cac <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8005c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005d08 <McpsIndication+0xdc>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca2:	f107 0218 	add.w	r2, r7, #24
 8005ca6:	4917      	ldr	r1, [pc, #92]	@ (8005d04 <McpsIndication+0xd8>)
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 8005cac:	4b16      	ldr	r3, [pc, #88]	@ (8005d08 <McpsIndication+0xdc>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <McpsIndication+0x9a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	7e1b      	ldrb	r3, [r3, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8005cbe:	4b12      	ldr	r3, [pc, #72]	@ (8005d08 <McpsIndication+0xdc>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc4:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	2001      	movs	r0, #1
 8005cca:	f000 f973 	bl	8005fb4 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 8005cce:	f107 0317 	add.w	r3, r7, #23
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff ff28 	bl	8005b28 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	795b      	ldrb	r3, [r3, #5]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00e      	beq.n	8005cfe <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	733b      	strb	r3, [r7, #12]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	737b      	strb	r3, [r7, #13]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 8005cec:	f107 030c 	add.w	r3, r7, #12
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff fd89 	bl	800580c <LmHandlerSend>
 8005cfa:	e000      	b.n	8005cfe <McpsIndication+0xd2>
        return;
 8005cfc:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 8005cfe:	3720      	adds	r7, #32
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000088 	.word	0x20000088
 8005d08:	200003b0 	.word	0x200003b0

08005d0c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08c      	sub	sp, #48	@ 0x30
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 8005d14:	4b4a      	ldr	r3, [pc, #296]	@ (8005e40 <MlmeConfirm+0x134>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	785a      	ldrb	r2, [r3, #1]
 8005d1e:	4b48      	ldr	r3, [pc, #288]	@ (8005e40 <MlmeConfirm+0x134>)
 8005d20:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8005d22:	4b48      	ldr	r3, [pc, #288]	@ (8005e44 <MlmeConfirm+0x138>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d004      	beq.n	8005d36 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 8005d2c:	4b45      	ldr	r3, [pc, #276]	@ (8005e44 <MlmeConfirm+0x138>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d32:	4843      	ldr	r0, [pc, #268]	@ (8005e40 <MlmeConfirm+0x134>)
 8005d34:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	2002      	movs	r0, #2
 8005d3a:	f000 f93b 	bl	8005fb4 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	2b0c      	cmp	r3, #12
 8005d46:	d874      	bhi.n	8005e32 <MlmeConfirm+0x126>
 8005d48:	a201      	add	r2, pc, #4	@ (adr r2, 8005d50 <MlmeConfirm+0x44>)
 8005d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4e:	bf00      	nop
 8005d50:	08005d85 	.word	0x08005d85
 8005d54:	08005e33 	.word	0x08005e33
 8005d58:	08005e33 	.word	0x08005e33
 8005d5c:	08005e33 	.word	0x08005e33
 8005d60:	08005e01 	.word	0x08005e01
 8005d64:	08005e33 	.word	0x08005e33
 8005d68:	08005e33 	.word	0x08005e33
 8005d6c:	08005e33 	.word	0x08005e33
 8005d70:	08005e33 	.word	0x08005e33
 8005d74:	08005e33 	.word	0x08005e33
 8005d78:	08005e33 	.word	0x08005e33
 8005d7c:	08005e19 	.word	0x08005e19
 8005d80:	08005e33 	.word	0x08005e33
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 8005d84:	2306      	movs	r3, #6
 8005d86:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8005d88:	f107 0308 	add.w	r3, r7, #8
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f001 fdc9 	bl	8007924 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 8005d92:	4b2d      	ldr	r3, [pc, #180]	@ (8005e48 <MlmeConfirm+0x13c>)
 8005d94:	79db      	ldrb	r3, [r3, #7]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4611      	mov	r1, r2
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f008 fcf8 	bl	800e790 <SecureElementSetDevAddr>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4a28      	ldr	r2, [pc, #160]	@ (8005e4c <MlmeConfirm+0x140>)
 8005daa:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8005dac:	4828      	ldr	r0, [pc, #160]	@ (8005e50 <MlmeConfirm+0x144>)
 8005dae:	f7ff fedb 	bl	8005b68 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8005db2:	4828      	ldr	r0, [pc, #160]	@ (8005e54 <MlmeConfirm+0x148>)
 8005db4:	f000 f990 	bl	80060d8 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8005db8:	4b21      	ldr	r3, [pc, #132]	@ (8005e40 <MlmeConfirm+0x134>)
 8005dba:	785b      	ldrb	r3, [r3, #1]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d108      	bne.n	8005dd2 <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8005dc0:	4b21      	ldr	r3, [pc, #132]	@ (8005e48 <MlmeConfirm+0x13c>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8005dc6:	4b24      	ldr	r3, [pc, #144]	@ (8005e58 <MlmeConfirm+0x14c>)
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff fe24 	bl	8005a18 <LmHandlerRequestClass>
 8005dd0:	e002      	b.n	8005dd8 <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8005dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e48 <MlmeConfirm+0x13c>)
 8005dd4:	22ff      	movs	r2, #255	@ 0xff
 8005dd6:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8005dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e44 <MlmeConfirm+0x138>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d004      	beq.n	8005dec <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8005de2:	4b18      	ldr	r3, [pc, #96]	@ (8005e44 <MlmeConfirm+0x138>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de8:	4817      	ldr	r0, [pc, #92]	@ (8005e48 <MlmeConfirm+0x13c>)
 8005dea:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8005dec:	4b14      	ldr	r3, [pc, #80]	@ (8005e40 <MlmeConfirm+0x134>)
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d120      	bne.n	8005e36 <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8005df4:	4b14      	ldr	r3, [pc, #80]	@ (8005e48 <MlmeConfirm+0x13c>)
 8005df6:	79db      	ldrb	r3, [r3, #7]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f008 fafd 	bl	800e3f8 <SecureElementPrintSessionKeys>
                }
            }
            break;
 8005dfe:	e01a      	b.n	8005e36 <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 8005e00:	4b16      	ldr	r3, [pc, #88]	@ (8005e5c <MlmeConfirm+0x150>)
 8005e02:	2201      	movs	r2, #1
 8005e04:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	7a1a      	ldrb	r2, [r3, #8]
 8005e0a:	4b14      	ldr	r3, [pc, #80]	@ (8005e5c <MlmeConfirm+0x150>)
 8005e0c:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	7a5a      	ldrb	r2, [r3, #9]
 8005e12:	4b12      	ldr	r3, [pc, #72]	@ (8005e5c <MlmeConfirm+0x150>)
 8005e14:	74da      	strb	r2, [r3, #19]
            }
            break;
 8005e16:	e00f      	b.n	8005e38 <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d105      	bne.n	8005e2c <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8005e20:	4b0d      	ldr	r3, [pc, #52]	@ (8005e58 <MlmeConfirm+0x14c>)
 8005e22:	7c1b      	ldrb	r3, [r3, #16]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff fdeb 	bl	8005a00 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 8005e2a:	e005      	b.n	8005e38 <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 8005e2c:	f7ff fdcc 	bl	80059c8 <LmHandlerDeviceTimeReq>
            break;
 8005e30:	e002      	b.n	8005e38 <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8005e32:	bf00      	nop
 8005e34:	e000      	b.n	8005e38 <MlmeConfirm+0x12c>
            break;
 8005e36:	bf00      	nop
    }
}
 8005e38:	bf00      	nop
 8005e3a:	3730      	adds	r7, #48	@ 0x30
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	2000006c 	.word	0x2000006c
 8005e44:	200003b0 	.word	0x200003b0
 8005e48:	20000060 	.word	0x20000060
 8005e4c:	2000036c 	.word	0x2000036c
 8005e50:	20000064 	.word	0x20000064
 8005e54:	20000065 	.word	0x20000065
 8005e58:	20000398 	.word	0x20000398
 8005e5c:	20000088 	.word	0x20000088

08005e60 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 8005e6a:	4b20      	ldr	r3, [pc, #128]	@ (8005eec <MlmeIndication+0x8c>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	785a      	ldrb	r2, [r3, #1]
 8005e74:	4b1d      	ldr	r3, [pc, #116]	@ (8005eec <MlmeIndication+0x8c>)
 8005e76:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	789b      	ldrb	r3, [r3, #2]
 8005e7c:	b25a      	sxtb	r2, r3
 8005e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005eec <MlmeIndication+0x8c>)
 8005e80:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e88:	b25a      	sxtb	r2, r3
 8005e8a:	4b18      	ldr	r3, [pc, #96]	@ (8005eec <MlmeIndication+0x8c>)
 8005e8c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8005e94:	4b15      	ldr	r3, [pc, #84]	@ (8005eec <MlmeIndication+0x8c>)
 8005e96:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	78da      	ldrb	r2, [r3, #3]
 8005e9c:	4b13      	ldr	r3, [pc, #76]	@ (8005eec <MlmeIndication+0x8c>)
 8005e9e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	4a11      	ldr	r2, [pc, #68]	@ (8005eec <MlmeIndication+0x8c>)
 8005ea6:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8005ea8:	4b11      	ldr	r3, [pc, #68]	@ (8005ef0 <MlmeIndication+0x90>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00d      	beq.n	8005ece <MlmeIndication+0x6e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b0b      	cmp	r3, #11
 8005eb8:	d009      	beq.n	8005ece <MlmeIndication+0x6e>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b0f      	cmp	r3, #15
 8005ec0:	d005      	beq.n	8005ece <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef0 <MlmeIndication+0x90>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec8:	4908      	ldr	r1, [pc, #32]	@ (8005eec <MlmeIndication+0x8c>)
 8005eca:	2000      	movs	r0, #0
 8005ecc:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	2003      	movs	r0, #3
 8005ed2:	f000 f86f 	bl	8005fb4 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b0b      	cmp	r3, #11
 8005edc:	d001      	beq.n	8005ee2 <MlmeIndication+0x82>
 8005ede:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8005ee0:	e000      	b.n	8005ee4 <MlmeIndication+0x84>
            break;
 8005ee2:	bf00      	nop
    }
}
 8005ee4:	bf00      	nop
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	20000088 	.word	0x20000088
 8005ef0:	200003b0 	.word	0x200003b0

08005ef4 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	4603      	mov	r3, r0
 8005efc:	6039      	str	r1, [r7, #0]
 8005efe:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
    switch( id )
 8005f04:	79fb      	ldrb	r3, [r7, #7]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 8005f0a:	f000 f90d 	bl	8006128 <LmhpCompliancePackageFactory>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	60fb      	str	r3, [r7, #12]
                break;
 8005f12:	e00d      	b.n	8005f30 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8005f14:	f107 020c 	add.w	r2, r7, #12
 8005f18:	79fb      	ldrb	r3, [r7, #7]
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fc19 	bl	8006754 <LmhpPackagesRegister>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 8005f28:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2c:	e031      	b.n	8005f92 <LmHandlerPackageRegister+0x9e>
                }
                break;
 8005f2e:	bf00      	nop
            }
    }
    if( package != NULL )
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d02b      	beq.n	8005f8e <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 8005f36:	79fb      	ldrb	r3, [r7, #7]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4918      	ldr	r1, [pc, #96]	@ (8005f9c <LmHandlerPackageRegister+0xa8>)
 8005f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	4a16      	ldr	r2, [pc, #88]	@ (8005f9c <LmHandlerPackageRegister+0xa8>)
 8005f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f48:	4a15      	ldr	r2, [pc, #84]	@ (8005fa0 <LmHandlerPackageRegister+0xac>)
 8005f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8005f4c:	79fb      	ldrb	r3, [r7, #7]
 8005f4e:	4a13      	ldr	r2, [pc, #76]	@ (8005f9c <LmHandlerPackageRegister+0xa8>)
 8005f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f54:	4a13      	ldr	r2, [pc, #76]	@ (8005fa4 <LmHandlerPackageRegister+0xb0>)
 8005f56:	631a      	str	r2, [r3, #48]	@ 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	4a10      	ldr	r2, [pc, #64]	@ (8005f9c <LmHandlerPackageRegister+0xa8>)
 8005f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f60:	4a11      	ldr	r2, [pc, #68]	@ (8005fa8 <LmHandlerPackageRegister+0xb4>)
 8005f62:	635a      	str	r2, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8005f64:	4b11      	ldr	r3, [pc, #68]	@ (8005fac <LmHandlerPackageRegister+0xb8>)
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	490c      	ldr	r1, [pc, #48]	@ (8005f9c <LmHandlerPackageRegister+0xa8>)
 8005f6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f70:	6992      	ldr	r2, [r2, #24]
 8005f72:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	4a09      	ldr	r2, [pc, #36]	@ (8005f9c <LmHandlerPackageRegister+0xa8>)
 8005f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8005fb0 <LmHandlerPackageRegister+0xbc>)
 8005f80:	6851      	ldr	r1, [r2, #4]
 8005f82:	4a0b      	ldr	r2, [pc, #44]	@ (8005fb0 <LmHandlerPackageRegister+0xbc>)
 8005f84:	7852      	ldrb	r2, [r2, #1]
 8005f86:	6838      	ldr	r0, [r7, #0]
 8005f88:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e001      	b.n	8005f92 <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000384 	.word	0x20000384
 8005fa0:	0800568d 	.word	0x0800568d
 8005fa4:	0800580d 	.word	0x0800580d
 8005fa8:	080059c9 	.word	0x080059c9
 8005fac:	200003b0 	.word	0x200003b0
 8005fb0:	2000009c 	.word	0x2000009c

08005fb4 <LmHandlerPackagesNotify>:
        return false;
    }
}

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	6039      	str	r1, [r7, #0]
 8005fbe:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	73fb      	strb	r3, [r7, #15]
 8005fc4:	e07c      	b.n	80060c0 <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 8005fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fca:	4a42      	ldr	r2, [pc, #264]	@ (80060d4 <LmHandlerPackagesNotify+0x120>)
 8005fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d06f      	beq.n	80060b4 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 8005fd4:	79fb      	ldrb	r3, [r7, #7]
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d863      	bhi.n	80060a2 <LmHandlerPackagesNotify+0xee>
 8005fda:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe0 <LmHandlerPackagesNotify+0x2c>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	08005ff1 	.word	0x08005ff1
 8005fe4:	08006013 	.word	0x08006013
 8005fe8:	0800605f 	.word	0x0800605f
 8005fec:	08006081 	.word	0x08006081
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8005ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ff4:	4a37      	ldr	r2, [pc, #220]	@ (80060d4 <LmHandlerPackagesNotify+0x120>)
 8005ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d052      	beq.n	80060a6 <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8006000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006004:	4a33      	ldr	r2, [pc, #204]	@ (80060d4 <LmHandlerPackagesNotify+0x120>)
 8006006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	6838      	ldr	r0, [r7, #0]
 800600e:	4798      	blx	r3
                        }
                        break;
 8006010:	e049      	b.n	80060a6 <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006016:	4a2f      	ldr	r2, [pc, #188]	@ (80060d4 <LmHandlerPackagesNotify+0x120>)
 8006018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d043      	beq.n	80060aa <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 8006022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006026:	4a2b      	ldr	r2, [pc, #172]	@ (80060d4 <LmHandlerPackagesNotify+0x120>)
 8006028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800602c:	781a      	ldrb	r2, [r3, #0]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8006032:	429a      	cmp	r2, r3
 8006034:	d00a      	beq.n	800604c <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 8006036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d135      	bne.n	80060aa <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800603e:	4b25      	ldr	r3, [pc, #148]	@ (80060d4 <LmHandlerPackagesNotify+0x120>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	4798      	blx	r3
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d02e      	beq.n	80060aa <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800604c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006050:	4a20      	ldr	r2, [pc, #128]	@ (80060d4 <LmHandlerPackagesNotify+0x120>)
 8006052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	6838      	ldr	r0, [r7, #0]
 800605a:	4798      	blx	r3
                        }
                        break;
 800605c:	e025      	b.n	80060aa <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800605e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006062:	4a1c      	ldr	r2, [pc, #112]	@ (80060d4 <LmHandlerPackagesNotify+0x120>)
 8006064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01f      	beq.n	80060ae <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800606e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006072:	4a18      	ldr	r2, [pc, #96]	@ (80060d4 <LmHandlerPackagesNotify+0x120>)
 8006074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607a:	6838      	ldr	r0, [r7, #0]
 800607c:	4798      	blx	r3
                        }
                        break;
 800607e:	e016      	b.n	80060ae <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8006080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006084:	4a13      	ldr	r2, [pc, #76]	@ (80060d4 <LmHandlerPackagesNotify+0x120>)
 8006086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800608a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608c:	2b00      	cmp	r3, #0
 800608e:	d010      	beq.n	80060b2 <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8006090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006094:	4a0f      	ldr	r2, [pc, #60]	@ (80060d4 <LmHandlerPackagesNotify+0x120>)
 8006096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800609a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609c:	6838      	ldr	r0, [r7, #0]
 800609e:	4798      	blx	r3
                        }
                        break;
 80060a0:	e007      	b.n	80060b2 <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 80060a2:	bf00      	nop
 80060a4:	e006      	b.n	80060b4 <LmHandlerPackagesNotify+0x100>
                        break;
 80060a6:	bf00      	nop
 80060a8:	e004      	b.n	80060b4 <LmHandlerPackagesNotify+0x100>
                        break;
 80060aa:	bf00      	nop
 80060ac:	e002      	b.n	80060b4 <LmHandlerPackagesNotify+0x100>
                        break;
 80060ae:	bf00      	nop
 80060b0:	e000      	b.n	80060b4 <LmHandlerPackagesNotify+0x100>
                        break;
 80060b2:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80060b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	3301      	adds	r3, #1
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	73fb      	strb	r3, [r7, #15]
 80060c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	f77f af7e 	ble.w	8005fc6 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 80060ca:	bf00      	nop
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000384 	.word	0x20000384

080060d8 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08c      	sub	sp, #48	@ 0x30
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d102      	bne.n	80060ec <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80060e6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ea:	e016      	b.n	800611a <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80060ec:	2320      	movs	r3, #32
 80060ee:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80060f0:	f107 0308 	add.w	r3, r7, #8
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 fc15 	bl	8007924 <LoRaMacMibGetRequestConfirm>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8006100:	f04f 33ff 	mov.w	r3, #4294967295
 8006104:	e009      	b.n	800611a <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8006106:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f993 2000 	ldrsb.w	r2, [r3]
 8006114:	4b03      	ldr	r3, [pc, #12]	@ (8006124 <LmHandlerGetTxPower+0x4c>)
 8006116:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3730      	adds	r7, #48	@ 0x30
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20000398 	.word	0x20000398

08006128 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800612c:	4b02      	ldr	r3, [pc, #8]	@ (8006138 <LmhpCompliancePackageFactory+0x10>)
}
 800612e:	4618      	mov	r0, r3
 8006130:	46bd      	mov	sp, r7
 8006132:	bc80      	pop	{r7}
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	200000a4 	.word	0x200000a4

0800613c <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00f      	beq.n	8006170 <LmhpComplianceInit+0x34>
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00c      	beq.n	8006170 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 8006156:	4a0c      	ldr	r2, [pc, #48]	@ (8006188 <LmhpComplianceInit+0x4c>)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800615c:	4a0b      	ldr	r2, [pc, #44]	@ (800618c <LmhpComplianceInit+0x50>)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8006162:	4a0a      	ldr	r2, [pc, #40]	@ (800618c <LmhpComplianceInit+0x50>)
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 8006168:	4b08      	ldr	r3, [pc, #32]	@ (800618c <LmhpComplianceInit+0x50>)
 800616a:	2201      	movs	r2, #1
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	e006      	b.n	800617e <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 8006170:	4b05      	ldr	r3, [pc, #20]	@ (8006188 <LmhpComplianceInit+0x4c>)
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8006176:	4b05      	ldr	r3, [pc, #20]	@ (800618c <LmhpComplianceInit+0x50>)
 8006178:	2200      	movs	r2, #0
 800617a:	701a      	strb	r2, [r3, #0]
    }
}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	bc80      	pop	{r7}
 8006186:	4770      	bx	lr
 8006188:	20000500 	.word	0x20000500
 800618c:	200004ec 	.word	0x200004ec

08006190 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 8006194:	4b02      	ldr	r3, [pc, #8]	@ (80061a0 <LmhpComplianceIsInitialized+0x10>)
 8006196:	781b      	ldrb	r3, [r3, #0]
}
 8006198:	4618      	mov	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	bc80      	pop	{r7}
 800619e:	4770      	bx	lr
 80061a0:	200004ec 	.word	0x200004ec

080061a4 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 80061a8:	4b07      	ldr	r3, [pc, #28]	@ (80061c8 <LmhpComplianceIsRunning+0x24>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	f083 0301 	eor.w	r3, r3, #1
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <LmhpComplianceIsRunning+0x16>
    {
        return false;
 80061b6:	2300      	movs	r3, #0
 80061b8:	e001      	b.n	80061be <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 80061ba:	4b03      	ldr	r3, [pc, #12]	@ (80061c8 <LmhpComplianceIsRunning+0x24>)
 80061bc:	785b      	ldrb	r3, [r3, #1]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	200004ec 	.word	0x200004ec

080061cc <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80061d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006214 <LmhpComplianceOnMcpsConfirm+0x48>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	f083 0301 	eor.w	r3, r3, #1
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d112      	bne.n	8006208 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 80061e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006214 <LmhpComplianceOnMcpsConfirm+0x48>)
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00f      	beq.n	800620a <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d10b      	bne.n	800620a <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d007      	beq.n	800620a <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 80061fa:	4b06      	ldr	r3, [pc, #24]	@ (8006214 <LmhpComplianceOnMcpsConfirm+0x48>)
 80061fc:	899b      	ldrh	r3, [r3, #12]
 80061fe:	3301      	adds	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	4b04      	ldr	r3, [pc, #16]	@ (8006214 <LmhpComplianceOnMcpsConfirm+0x48>)
 8006204:	819a      	strh	r2, [r3, #12]
 8006206:	e000      	b.n	800620a <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 8006208:	bf00      	nop
    }
}
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	bc80      	pop	{r7}
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	200004ec 	.word	0x200004ec

08006218 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8006220:	4b12      	ldr	r3, [pc, #72]	@ (800626c <LmhpComplianceOnMlmeConfirm+0x54>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	f083 0301 	eor.w	r3, r3, #1
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d116      	bne.n	800625c <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800622e:	4b0f      	ldr	r3, [pc, #60]	@ (800626c <LmhpComplianceOnMlmeConfirm+0x54>)
 8006230:	785b      	ldrb	r3, [r3, #1]
 8006232:	f083 0301 	eor.w	r3, r3, #1
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d111      	bne.n	8006260 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b05      	cmp	r3, #5
 8006242:	d10e      	bne.n	8006262 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 8006244:	4b09      	ldr	r3, [pc, #36]	@ (800626c <LmhpComplianceOnMlmeConfirm+0x54>)
 8006246:	2201      	movs	r2, #1
 8006248:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	7a1a      	ldrb	r2, [r3, #8]
 800624e:	4b07      	ldr	r3, [pc, #28]	@ (800626c <LmhpComplianceOnMlmeConfirm+0x54>)
 8006250:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	7a5a      	ldrb	r2, [r3, #9]
 8006256:	4b05      	ldr	r3, [pc, #20]	@ (800626c <LmhpComplianceOnMlmeConfirm+0x54>)
 8006258:	741a      	strb	r2, [r3, #16]
 800625a:	e002      	b.n	8006262 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800625c:	bf00      	nop
 800625e:	e000      	b.n	8006262 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8006260:	bf00      	nop
    }
}
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	bc80      	pop	{r7}
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	200004ec 	.word	0x200004ec

08006270 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8006276:	4b36      	ldr	r3, [pc, #216]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	f083 0301 	eor.w	r3, r3, #1
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 8006284:	f04f 33ff 	mov.w	r3, #4294967295
 8006288:	e05e      	b.n	8006348 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 800628a:	4b31      	ldr	r3, [pc, #196]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	f083 0301 	eor.w	r3, r3, #1
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8006298:	2300      	movs	r3, #0
 800629a:	e055      	b.n	8006348 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 800629c:	4b2c      	ldr	r3, [pc, #176]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 800629e:	7b9b      	ldrb	r3, [r3, #14]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d019      	beq.n	80062d8 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 80062a4:	4b2a      	ldr	r3, [pc, #168]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 80062aa:	4b29      	ldr	r3, [pc, #164]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 80062ac:	2203      	movs	r2, #3
 80062ae:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 80062b0:	4b27      	ldr	r3, [pc, #156]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	2205      	movs	r2, #5
 80062b6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 80062b8:	4b25      	ldr	r3, [pc, #148]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	3301      	adds	r3, #1
 80062be:	4a24      	ldr	r2, [pc, #144]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 80062c0:	7bd2      	ldrb	r2, [r2, #15]
 80062c2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 80062c4:	4b22      	ldr	r3, [pc, #136]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	3302      	adds	r3, #2
 80062ca:	4a21      	ldr	r2, [pc, #132]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 80062cc:	7c12      	ldrb	r2, [r2, #16]
 80062ce:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 80062d0:	4b1f      	ldr	r3, [pc, #124]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 80062d2:	2201      	movs	r2, #1
 80062d4:	709a      	strb	r2, [r3, #2]
 80062d6:	e01c      	b.n	8006312 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 80062d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 80062da:	789b      	ldrb	r3, [r3, #2]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d005      	beq.n	80062ec <LmhpComplianceTxProcess+0x7c>
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d116      	bne.n	8006312 <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 80062e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	709a      	strb	r2, [r3, #2]
                break;
 80062ea:	e012      	b.n	8006312 <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 80062ec:	4b18      	ldr	r3, [pc, #96]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 80062ee:	2202      	movs	r2, #2
 80062f0:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 80062f2:	4b17      	ldr	r3, [pc, #92]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 80062f4:	899b      	ldrh	r3, [r3, #12]
 80062f6:	0a1b      	lsrs	r3, r3, #8
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	4b15      	ldr	r3, [pc, #84]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8006302:	4b13      	ldr	r3, [pc, #76]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 8006304:	899a      	ldrh	r2, [r3, #12]
 8006306:	4b12      	ldr	r3, [pc, #72]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	3301      	adds	r3, #1
 800630c:	b2d2      	uxtb	r2, r2
 800630e:	701a      	strb	r2, [r3, #0]
                break;
 8006310:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 8006312:	23e0      	movs	r3, #224	@ 0xe0
 8006314:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 8006316:	4b0e      	ldr	r3, [pc, #56]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 8006318:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800631a:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800631c:	4b0c      	ldr	r3, [pc, #48]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 800631e:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 8006320:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 8006322:	480c      	ldr	r0, [pc, #48]	@ (8006354 <LmhpComplianceTxProcess+0xe4>)
 8006324:	f00b fe66 	bl	8011ff4 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 8006328:	4b0b      	ldr	r3, [pc, #44]	@ (8006358 <LmhpComplianceTxProcess+0xe8>)
 800632a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800632c:	2b00      	cmp	r3, #0
 800632e:	d102      	bne.n	8006336 <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 8006330:	f04f 33ff 	mov.w	r3, #4294967295
 8006334:	e008      	b.n	8006348 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 8006336:	4b08      	ldr	r3, [pc, #32]	@ (8006358 <LmhpComplianceTxProcess+0xe8>)
 8006338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800633a:	4a05      	ldr	r2, [pc, #20]	@ (8006350 <LmhpComplianceTxProcess+0xe0>)
 800633c:	78d2      	ldrb	r2, [r2, #3]
 800633e:	4611      	mov	r1, r2
 8006340:	4638      	mov	r0, r7
 8006342:	2201      	movs	r2, #1
 8006344:	4798      	blx	r3
 8006346:	4603      	mov	r3, r0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	200004ec 	.word	0x200004ec
 8006354:	200004d4 	.word	0x200004d4
 8006358:	200000a4 	.word	0x200000a4

0800635c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b0a4      	sub	sp, #144	@ 0x90
 8006360:	af02      	add	r7, sp, #8
 8006362:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8006364:	4ba5      	ldr	r3, [pc, #660]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	f083 0301 	eor.w	r3, r3, #1
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	f040 81c6 	bne.w	8006700 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	7b5b      	ldrb	r3, [r3, #13]
 8006378:	f083 0301 	eor.w	r3, r3, #1
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	f040 81c0 	bne.w	8006704 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 8006384:	4b9d      	ldr	r3, [pc, #628]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006386:	785b      	ldrb	r3, [r3, #1]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00c      	beq.n	80063a6 <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	7b9b      	ldrb	r3, [r3, #14]
 8006390:	f083 0301 	eor.w	r3, r3, #1
 8006394:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800639a:	4b98      	ldr	r3, [pc, #608]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800639c:	899b      	ldrh	r3, [r3, #12]
 800639e:	3301      	adds	r3, #1
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	4b96      	ldr	r3, [pc, #600]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80063a4:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	78db      	ldrb	r3, [r3, #3]
 80063aa:	2be0      	cmp	r3, #224	@ 0xe0
 80063ac:	f040 81ac 	bne.w	8006708 <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 80063b0:	4b92      	ldr	r3, [pc, #584]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80063b2:	785b      	ldrb	r3, [r3, #1]
 80063b4:	f083 0301 	eor.w	r3, r3, #1
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d060      	beq.n	8006480 <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	7b1b      	ldrb	r3, [r3, #12]
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	f040 81a7 	bne.w	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	f040 81a1 	bne.w	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	3301      	adds	r3, #1
 80063da:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80063dc:	2b01      	cmp	r3, #1
 80063de:	f040 819a 	bne.w	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	3302      	adds	r3, #2
 80063e8:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	f040 8193 	bne.w	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	3303      	adds	r3, #3
 80063f6:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	f040 818c 	bne.w	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 80063fe:	4b7f      	ldr	r3, [pc, #508]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006400:	2200      	movs	r2, #0
 8006402:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 8006404:	4b7d      	ldr	r3, [pc, #500]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006406:	22e0      	movs	r2, #224	@ 0xe0
 8006408:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800640a:	4b7c      	ldr	r3, [pc, #496]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800640c:	2202      	movs	r2, #2
 800640e:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8006410:	4b7a      	ldr	r3, [pc, #488]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006412:	2200      	movs	r2, #0
 8006414:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8006416:	4b79      	ldr	r3, [pc, #484]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006418:	2200      	movs	r2, #0
 800641a:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800641c:	4b77      	ldr	r3, [pc, #476]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800641e:	2200      	movs	r2, #0
 8006420:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8006422:	4b76      	ldr	r3, [pc, #472]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006424:	2200      	movs	r2, #0
 8006426:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8006428:	4b74      	ldr	r3, [pc, #464]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800642a:	2201      	movs	r2, #1
 800642c:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800642e:	4b73      	ldr	r3, [pc, #460]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006430:	2201      	movs	r2, #1
 8006432:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 8006434:	2304      	movs	r3, #4
 8006436:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 8006438:	2301      	movs	r3, #1
 800643a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800643c:	f107 030c 	add.w	r3, r7, #12
 8006440:	4618      	mov	r0, r3
 8006442:	f001 fc45 	bl	8007cd0 <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 8006446:	2000      	movs	r0, #0
 8006448:	f002 fa40 	bl	80088cc <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800644c:	4b6c      	ldr	r3, [pc, #432]	@ (8006600 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 8006456:	4b6a      	ldr	r3, [pc, #424]	@ (8006600 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800645e:	2300      	movs	r3, #0
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	4b68      	ldr	r3, [pc, #416]	@ (8006604 <LmhpComplianceOnMcpsIndication+0x2a8>)
 8006464:	2200      	movs	r2, #0
 8006466:	f04f 31ff 	mov.w	r1, #4294967295
 800646a:	4867      	ldr	r0, [pc, #412]	@ (8006608 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800646c:	f00b fd8c 	bl	8011f88 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8006470:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006474:	4864      	ldr	r0, [pc, #400]	@ (8006608 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8006476:	f00b fe9b 	bl	80121b0 <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 800647a:	f7ff fef9 	bl	8006270 <LmhpComplianceTxProcess>
 800647e:	e14a      	b.n	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	781a      	ldrb	r2, [r3, #0]
 8006486:	4b5d      	ldr	r3, [pc, #372]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006488:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800648a:	4b5c      	ldr	r3, [pc, #368]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800648c:	789b      	ldrb	r3, [r3, #2]
 800648e:	2b0a      	cmp	r3, #10
 8006490:	f200 813c 	bhi.w	800670c <LmhpComplianceOnMcpsIndication+0x3b0>
 8006494:	a201      	add	r2, pc, #4	@ (adr r2, 800649c <LmhpComplianceOnMcpsIndication+0x140>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	080064c9 	.word	0x080064c9
 80064a0:	08006513 	.word	0x08006513
 80064a4:	0800651b 	.word	0x0800651b
 80064a8:	08006529 	.word	0x08006529
 80064ac:	08006537 	.word	0x08006537
 80064b0:	0800658f 	.word	0x0800658f
 80064b4:	080065a1 	.word	0x080065a1
 80064b8:	08006611 	.word	0x08006611
 80064bc:	080066b9 	.word	0x080066b9
 80064c0:	080066cb 	.word	0x080066cb
 80064c4:	080066e5 	.word	0x080066e5
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 80064c8:	484f      	ldr	r0, [pc, #316]	@ (8006608 <LmhpComplianceOnMcpsIndication+0x2ac>)
 80064ca:	f00b fe01 	bl	80120d0 <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 80064ce:	4b4b      	ldr	r3, [pc, #300]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 80064d4:	4b49      	ldr	r3, [pc, #292]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 80064da:	2304      	movs	r3, #4
 80064dc:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80064de:	4b48      	ldr	r3, [pc, #288]	@ (8006600 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 80064e6:	f107 030c 	add.w	r3, r7, #12
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 fbf0 	bl	8007cd0 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80064f0:	4b43      	ldr	r3, [pc, #268]	@ (8006600 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f002 f9e8 	bl	80088cc <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 80064fc:	4b40      	ldr	r3, [pc, #256]	@ (8006600 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 8104 	beq.w	8006710 <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 8006508:	4b3d      	ldr	r3, [pc, #244]	@ (8006600 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	4798      	blx	r3
                    }
                }
                break;
 8006510:	e0fe      	b.n	8006710 <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 8006512:	4b3a      	ldr	r3, [pc, #232]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006514:	2202      	movs	r2, #2
 8006516:	719a      	strb	r2, [r3, #6]
                break;
 8006518:	e0fd      	b.n	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 800651a:	4b38      	ldr	r3, [pc, #224]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800651c:	2201      	movs	r2, #1
 800651e:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 8006520:	4b36      	ldr	r3, [pc, #216]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006522:	2201      	movs	r2, #1
 8006524:	709a      	strb	r2, [r3, #2]
                break;
 8006526:	e0f6      	b.n	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 8006528:	4b34      	ldr	r3, [pc, #208]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800652a:	2200      	movs	r2, #0
 800652c:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800652e:	4b33      	ldr	r3, [pc, #204]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006530:	2201      	movs	r2, #1
 8006532:	709a      	strb	r2, [r3, #2]
                break;
 8006534:	e0ef      	b.n	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	7b1a      	ldrb	r2, [r3, #12]
 800653a:	4b30      	ldr	r3, [pc, #192]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800653c:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 800653e:	4b2f      	ldr	r3, [pc, #188]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	2204      	movs	r2, #4
 8006544:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8006546:	2301      	movs	r3, #1
 8006548:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800654c:	e012      	b.n	8006574 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689a      	ldr	r2, [r3, #8]
 8006552:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006556:	4413      	add	r3, r2
 8006558:	781a      	ldrb	r2, [r3, #0]
 800655a:	4b28      	ldr	r3, [pc, #160]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800655c:	6899      	ldr	r1, [r3, #8]
 800655e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006562:	440b      	add	r3, r1
 8006564:	3201      	adds	r2, #1
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800656a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800656e:	3301      	adds	r3, #1
 8006570:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8006574:	4b21      	ldr	r3, [pc, #132]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 8006576:	795a      	ldrb	r2, [r3, #5]
 8006578:	4b20      	ldr	r3, [pc, #128]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 800657a:	799b      	ldrb	r3, [r3, #6]
 800657c:	4293      	cmp	r3, r2
 800657e:	bf28      	it	cs
 8006580:	4613      	movcs	r3, r2
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8006588:	429a      	cmp	r2, r3
 800658a:	d3e0      	bcc.n	800654e <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 800658c:	e0c3      	b.n	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 800658e:	2305      	movs	r3, #5
 8006590:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 8006594:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8006598:	4618      	mov	r0, r3
 800659a:	f001 ff4f 	bl	800843c <LoRaMacMlmeRequest>
                }
                break;
 800659e:	e0ba      	b.n	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 80065a0:	4819      	ldr	r0, [pc, #100]	@ (8006608 <LmhpComplianceOnMcpsIndication+0x2ac>)
 80065a2:	f00b fd95 	bl	80120d0 <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 80065a6:	4b15      	ldr	r3, [pc, #84]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 80065ac:	4b13      	ldr	r3, [pc, #76]	@ (80065fc <LmhpComplianceOnMcpsIndication+0x2a0>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 80065b2:	2304      	movs	r3, #4
 80065b4:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80065b6:	4b12      	ldr	r3, [pc, #72]	@ (8006600 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 80065be:	f107 030c 	add.w	r3, r7, #12
 80065c2:	4618      	mov	r0, r3
 80065c4:	f001 fb84 	bl	8007cd0 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80065c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006600 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	785b      	ldrb	r3, [r3, #1]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f002 f97c 	bl	80088cc <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 80065d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006600 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 80065de:	4b08      	ldr	r3, [pc, #32]	@ (8006600 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 80065e6:	4b09      	ldr	r3, [pc, #36]	@ (800660c <LmhpComplianceOnMcpsIndication+0x2b0>)
 80065e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 8092 	beq.w	8006714 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80065f0:	4b06      	ldr	r3, [pc, #24]	@ (800660c <LmhpComplianceOnMcpsIndication+0x2b0>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	2101      	movs	r1, #1
 80065f6:	2002      	movs	r0, #2
 80065f8:	4798      	blx	r3
                    }
                }
                break;
 80065fa:	e08b      	b.n	8006714 <LmhpComplianceOnMcpsIndication+0x3b8>
 80065fc:	200004ec 	.word	0x200004ec
 8006600:	20000500 	.word	0x20000500
 8006604:	0800672d 	.word	0x0800672d
 8006608:	200004d4 	.word	0x200004d4
 800660c:	200000a4 	.word	0x200000a4
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	7b1b      	ldrb	r3, [r3, #12]
 8006614:	2b03      	cmp	r3, #3
 8006616:	d113      	bne.n	8006640 <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 8006618:	2306      	movs	r3, #6
 800661a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	3301      	adds	r3, #1
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	021b      	lsls	r3, r3, #8
 8006628:	b21a      	sxth	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	3302      	adds	r3, #2
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	b21b      	sxth	r3, r3
 8006634:	4313      	orrs	r3, r2
 8006636:	b21b      	sxth	r3, r3
 8006638:	b29b      	uxth	r3, r3
 800663a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800663e:	e032      	b.n	80066a6 <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	7b1b      	ldrb	r3, [r3, #12]
 8006644:	2b07      	cmp	r3, #7
 8006646:	d12e      	bne.n	80066a6 <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 8006648:	2307      	movs	r3, #7
 800664a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	3301      	adds	r3, #1
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	b21a      	sxth	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	3302      	adds	r3, #2
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	b21b      	sxth	r3, r3
 8006664:	4313      	orrs	r3, r2
 8006666:	b21b      	sxth	r3, r3
 8006668:	b29b      	uxth	r3, r3
 800666a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	3303      	adds	r3, #3
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	041a      	lsls	r2, r3, #16
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	3304      	adds	r3, #4
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	4313      	orrs	r3, r2
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6892      	ldr	r2, [r2, #8]
 8006688:	3205      	adds	r2, #5
 800668a:	7812      	ldrb	r2, [r2, #0]
 800668c:	4313      	orrs	r3, r2
 800668e:	461a      	mov	r2, r3
 8006690:	2364      	movs	r3, #100	@ 0x64
 8006692:	fb02 f303 	mul.w	r3, r2, r3
 8006696:	667b      	str	r3, [r7, #100]	@ 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	3306      	adds	r3, #6
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	b25b      	sxtb	r3, r3
 80066a2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 80066a6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 fec6 	bl	800843c <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 80066b0:	4b1a      	ldr	r3, [pc, #104]	@ (800671c <LmhpComplianceOnMcpsIndication+0x3c0>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	709a      	strb	r2, [r3, #2]
                }
                break;
 80066b6:	e02e      	b.n	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 80066b8:	230a      	movs	r3, #10
 80066ba:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 80066be:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 feba 	bl	800843c <LoRaMacMlmeRequest>
                }
                break;
 80066c8:	e025      	b.n	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 80066ca:	2300      	movs	r3, #0
 80066cc:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	3301      	adds	r3, #1
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 80066d8:	f107 030c 	add.w	r3, r7, #12
 80066dc:	4618      	mov	r0, r3
 80066de:	f001 faf7 	bl	8007cd0 <LoRaMacMibSetRequestConfirm>
                }
                break;
 80066e2:	e018      	b.n	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 80066e4:	230d      	movs	r3, #13
 80066e6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	785b      	ldrb	r3, [r3, #1]
 80066f0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 80066f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 fe9f 	bl	800843c <LoRaMacMlmeRequest>
                }
                break;
 80066fe:	e00a      	b.n	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8006700:	bf00      	nop
 8006702:	e008      	b.n	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8006704:	bf00      	nop
 8006706:	e006      	b.n	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8006708:	bf00      	nop
 800670a:	e004      	b.n	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 800670c:	bf00      	nop
 800670e:	e002      	b.n	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8006710:	bf00      	nop
 8006712:	e000      	b.n	8006716 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8006714:	bf00      	nop
        }
    }
}
 8006716:	3788      	adds	r7, #136	@ 0x88
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	200004ec 	.word	0x200004ec

08006720 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 8006724:	bf00      	nop
 8006726:	46bd      	mov	sp, r7
 8006728:	bc80      	pop	{r7}
 800672a:	4770      	bx	lr

0800672c <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 8006734:	f7ff fd9c 	bl	8006270 <LmhpComplianceTxProcess>
}
 8006738:	bf00      	nop
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	bc80      	pop	{r7}
 8006752:	4770      	bx	lr

08006754 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	4603      	mov	r3, r0
 800675c:	6039      	str	r1, [r7, #0]
 800675e:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 8006760:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr
	...

08006770 <UpdateRxSlotIdleState>:
    OnMacProcessNotify( );
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8006774:	4b08      	ldr	r3, [pc, #32]	@ (8006798 <UpdateRxSlotIdleState+0x28>)
 8006776:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800677a:	2b02      	cmp	r3, #2
 800677c:	d004      	beq.n	8006788 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800677e:	4b07      	ldr	r3, [pc, #28]	@ (800679c <UpdateRxSlotIdleState+0x2c>)
 8006780:	2206      	movs	r2, #6
 8006782:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8006786:	e003      	b.n	8006790 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8006788:	4b04      	ldr	r3, [pc, #16]	@ (800679c <UpdateRxSlotIdleState+0x2c>)
 800678a:	2202      	movs	r2, #2
 800678c:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
}
 8006790:	bf00      	nop
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr
 8006798:	20000a0c 	.word	0x20000a0c
 800679c:	20000504 	.word	0x20000504

080067a0 <LoRaMacIsBusy>:
        }
    }
}

bool LoRaMacIsBusy( void )
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80067a4:	4b0b      	ldr	r3, [pc, #44]	@ (80067d4 <LoRaMacIsBusy+0x34>)
 80067a6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <LoRaMacIsBusy+0x12>
    {
        return false;
 80067ae:	2300      	movs	r3, #0
 80067b0:	e00c      	b.n	80067cc <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80067b2:	4b08      	ldr	r3, [pc, #32]	@ (80067d4 <LoRaMacIsBusy+0x34>)
 80067b4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d106      	bne.n	80067ca <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80067bc:	4b05      	ldr	r3, [pc, #20]	@ (80067d4 <LoRaMacIsBusy+0x34>)
 80067be:	f893 3482 	ldrb.w	r3, [r3, #1154]	@ 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d101      	bne.n	80067ca <LoRaMacIsBusy+0x2a>
    {
        return false;
 80067c6:	2300      	movs	r3, #0
 80067c8:	e000      	b.n	80067cc <LoRaMacIsBusy+0x2c>
    }
    return true;
 80067ca:	2301      	movs	r3, #1
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr
 80067d4:	20000504 	.word	0x20000504

080067d8 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80067dc:	4b05      	ldr	r3, [pc, #20]	@ (80067f4 <LoRaMacIsStopped+0x1c>)
 80067de:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <LoRaMacIsStopped+0x12>
    {
        return true;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <LoRaMacIsStopped+0x14>
    }
    return false;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc80      	pop	{r7}
 80067f2:	4770      	bx	lr
 80067f4:	20000504 	.word	0x20000504

080067f8 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80067f8:	b5b0      	push	{r4, r5, r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8006802:	2303      	movs	r3, #3
 8006804:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8006806:	4b6d      	ldr	r3, [pc, #436]	@ (80069bc <SwitchClass+0x1c4>)
 8006808:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800680c:	2b02      	cmp	r3, #2
 800680e:	f000 80b9 	beq.w	8006984 <SwitchClass+0x18c>
 8006812:	2b02      	cmp	r3, #2
 8006814:	f300 80cc 	bgt.w	80069b0 <SwitchClass+0x1b8>
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <SwitchClass+0x2c>
 800681c:	2b01      	cmp	r3, #1
 800681e:	f000 80a3 	beq.w	8006968 <SwitchClass+0x170>
 8006822:	e0c5      	b.n	80069b0 <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d109      	bne.n	800683e <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800682a:	4b64      	ldr	r3, [pc, #400]	@ (80069bc <SwitchClass+0x1c4>)
 800682c:	4a63      	ldr	r2, [pc, #396]	@ (80069bc <SwitchClass+0x1c4>)
 800682e:	3374      	adds	r3, #116	@ 0x74
 8006830:	326c      	adds	r2, #108	@ 0x6c
 8006832:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006836:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800683e:	79fb      	ldrb	r3, [r7, #7]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d10c      	bne.n	800685e <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	4618      	mov	r0, r3
 8006848:	f002 f983 	bl	8008b52 <LoRaMacClassBSwitchClass>
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d103      	bne.n	800685e <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8006856:	4a59      	ldr	r2, [pc, #356]	@ (80069bc <SwitchClass+0x1c4>)
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800685e:	79fb      	ldrb	r3, [r7, #7]
 8006860:	2b02      	cmp	r3, #2
 8006862:	f040 80a0 	bne.w	80069a6 <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8006866:	4a55      	ldr	r2, [pc, #340]	@ (80069bc <SwitchClass+0x1c4>)
 8006868:	79fb      	ldrb	r3, [r7, #7]
 800686a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800686e:	4a54      	ldr	r2, [pc, #336]	@ (80069c0 <SwitchClass+0x1c8>)
 8006870:	4b53      	ldr	r3, [pc, #332]	@ (80069c0 <SwitchClass+0x1c8>)
 8006872:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 8006876:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 800687a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800687c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8006882:	4b4f      	ldr	r3, [pc, #316]	@ (80069c0 <SwitchClass+0x1c8>)
 8006884:	2202      	movs	r2, #2
 8006886:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800688a:	2300      	movs	r3, #0
 800688c:	73bb      	strb	r3, [r7, #14]
 800688e:	e05b      	b.n	8006948 <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8006890:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8006894:	4949      	ldr	r1, [pc, #292]	@ (80069bc <SwitchClass+0x1c4>)
 8006896:	4613      	mov	r3, r2
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	4413      	add	r3, r2
 800689c:	011b      	lsls	r3, r3, #4
 800689e:	440b      	add	r3, r1
 80068a0:	33e9      	adds	r3, #233	@ 0xe9
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d049      	beq.n	800693c <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 80068a8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80068ac:	4943      	ldr	r1, [pc, #268]	@ (80069bc <SwitchClass+0x1c4>)
 80068ae:	4613      	mov	r3, r2
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	4413      	add	r3, r2
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	440b      	add	r3, r1
 80068b8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80068bc:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d13c      	bne.n	800693c <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 80068c2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80068c6:	493d      	ldr	r1, [pc, #244]	@ (80069bc <SwitchClass+0x1c4>)
 80068c8:	4613      	mov	r3, r2
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	4413      	add	r3, r2
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	440b      	add	r3, r1
 80068d2:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a38      	ldr	r2, [pc, #224]	@ (80069bc <SwitchClass+0x1c4>)
 80068da:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 80068dc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80068e0:	4936      	ldr	r1, [pc, #216]	@ (80069bc <SwitchClass+0x1c4>)
 80068e2:	4613      	mov	r3, r2
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	4413      	add	r3, r2
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	440b      	add	r3, r1
 80068ec:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80068f0:	f993 3000 	ldrsb.w	r3, [r3]
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	4b31      	ldr	r3, [pc, #196]	@ (80069bc <SwitchClass+0x1c4>)
 80068f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80068fc:	4b30      	ldr	r3, [pc, #192]	@ (80069c0 <SwitchClass+0x1c8>)
 80068fe:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 8006902:	4b2f      	ldr	r3, [pc, #188]	@ (80069c0 <SwitchClass+0x1c8>)
 8006904:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8006908:	4b2c      	ldr	r3, [pc, #176]	@ (80069bc <SwitchClass+0x1c4>)
 800690a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800690c:	4a2c      	ldr	r2, [pc, #176]	@ (80069c0 <SwitchClass+0x1c8>)
 800690e:	f8c2 33e4 	str.w	r3, [r2, #996]	@ 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8006912:	4b2a      	ldr	r3, [pc, #168]	@ (80069bc <SwitchClass+0x1c4>)
 8006914:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 8006918:	4b29      	ldr	r3, [pc, #164]	@ (80069c0 <SwitchClass+0x1c8>)
 800691a:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800691e:	4b27      	ldr	r3, [pc, #156]	@ (80069bc <SwitchClass+0x1c4>)
 8006920:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8006924:	4b26      	ldr	r3, [pc, #152]	@ (80069c0 <SwitchClass+0x1c8>)
 8006926:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800692a:	4b25      	ldr	r3, [pc, #148]	@ (80069c0 <SwitchClass+0x1c8>)
 800692c:	2203      	movs	r2, #3
 800692e:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8006932:	4b23      	ldr	r3, [pc, #140]	@ (80069c0 <SwitchClass+0x1c8>)
 8006934:	2201      	movs	r2, #1
 8006936:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
                        break;
 800693a:	e009      	b.n	8006950 <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800693c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	3301      	adds	r3, #1
 8006944:	b2db      	uxtb	r3, r3
 8006946:	73bb      	strb	r3, [r7, #14]
 8006948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800694c:	2b00      	cmp	r3, #0
 800694e:	dd9f      	ble.n	8006890 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8006950:	4b1b      	ldr	r3, [pc, #108]	@ (80069c0 <SwitchClass+0x1c8>)
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8006958:	4b1a      	ldr	r3, [pc, #104]	@ (80069c4 <SwitchClass+0x1cc>)
 800695a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800695e:	f000 fce9 	bl	8007334 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006966:	e01e      	b.n	80069a6 <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	4618      	mov	r0, r3
 800696c:	f002 f8f1 	bl	8008b52 <LoRaMacClassBSwitchClass>
 8006970:	4603      	mov	r3, r0
 8006972:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d117      	bne.n	80069aa <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800697a:	4a10      	ldr	r2, [pc, #64]	@ (80069bc <SwitchClass+0x1c4>)
 800697c:	79fb      	ldrb	r3, [r7, #7]
 800697e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 8006982:	e012      	b.n	80069aa <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8006984:	79fb      	ldrb	r3, [r7, #7]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d111      	bne.n	80069ae <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800698a:	4b0d      	ldr	r3, [pc, #52]	@ (80069c0 <SwitchClass+0x1c8>)
 800698c:	2206      	movs	r2, #6
 800698e:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8006992:	4a0a      	ldr	r2, [pc, #40]	@ (80069bc <SwitchClass+0x1c4>)
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800699a:	4b0a      	ldr	r3, [pc, #40]	@ (80069c4 <SwitchClass+0x1cc>)
 800699c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 80069a0:	2300      	movs	r3, #0
 80069a2:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 80069a4:	e003      	b.n	80069ae <SwitchClass+0x1b6>
            break;
 80069a6:	bf00      	nop
 80069a8:	e002      	b.n	80069b0 <SwitchClass+0x1b8>
            break;
 80069aa:	bf00      	nop
 80069ac:	e000      	b.n	80069b0 <SwitchClass+0x1b8>
            break;
 80069ae:	bf00      	nop
        }
    }

    return status;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bdb0      	pop	{r4, r5, r7, pc}
 80069ba:	bf00      	nop
 80069bc:	20000a0c 	.word	0x20000a0c
 80069c0:	20000504 	.word	0x20000504
 80069c4:	08012a80 	.word	0x08012a80

080069c8 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4603      	mov	r3, r0
 80069d0:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80069d2:	4b10      	ldr	r3, [pc, #64]	@ (8006a14 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80069d4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80069d8:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80069de:	230d      	movs	r3, #13
 80069e0:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80069e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006a14 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80069e4:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80069ec:	230e      	movs	r3, #14
 80069ee:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80069f0:	4b08      	ldr	r3, [pc, #32]	@ (8006a14 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80069f2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80069f6:	f107 0210 	add.w	r2, r7, #16
 80069fa:	4611      	mov	r1, r2
 80069fc:	4618      	mov	r0, r3
 80069fe:	f002 ff9f 	bl	8009940 <RegionGetPhyParam>
 8006a02:	4603      	mov	r3, r0
 8006a04:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	b2db      	uxtb	r3, r3
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000a0c 	.word	0x20000a0c

08006a18 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	4603      	mov	r3, r0
 8006a20:	71fb      	strb	r3, [r7, #7]
 8006a22:	460b      	mov	r3, r1
 8006a24:	71bb      	strb	r3, [r7, #6]
 8006a26:	4613      	mov	r3, r2
 8006a28:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8006a32:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff ffc6 	bl	80069c8 <GetMaxAppPayloadWithoutFOptsLength>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8006a40:	79fb      	ldrb	r3, [r7, #7]
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	797b      	ldrb	r3, [r7, #5]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	4413      	add	r3, r2
 8006a4a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8006a4c:	89ba      	ldrh	r2, [r7, #12]
 8006a4e:	89fb      	ldrh	r3, [r7, #14]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d804      	bhi.n	8006a5e <ValidatePayloadLength+0x46>
 8006a54:	89bb      	ldrh	r3, [r7, #12]
 8006a56:	2bff      	cmp	r3, #255	@ 0xff
 8006a58:	d801      	bhi.n	8006a5e <ValidatePayloadLength+0x46>
    {
        return true;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <ValidatePayloadLength+0x48>
    }
    return false;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <Send>:
        }
    }
}

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08e      	sub	sp, #56	@ 0x38
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	607a      	str	r2, [r7, #4]
 8006a72:	461a      	mov	r2, r3
 8006a74:	460b      	mov	r3, r1
 8006a76:	72fb      	strb	r3, [r7, #11]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8006a82:	4b65      	ldr	r3, [pc, #404]	@ (8006c18 <Send+0x1b0>)
 8006a84:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006a88:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8006a8c:	4b62      	ldr	r3, [pc, #392]	@ (8006c18 <Send+0x1b0>)
 8006a8e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a92:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8006a96:	4b60      	ldr	r3, [pc, #384]	@ (8006c18 <Send+0x1b0>)
 8006a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006a9c:	4b5e      	ldr	r3, [pc, #376]	@ (8006c18 <Send+0x1b0>)
 8006a9e:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8006aa6:	2307      	movs	r3, #7
 8006aa8:	e0b1      	b.n	8006c0e <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8006aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8006c18 <Send+0x1b0>)
 8006aac:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d102      	bne.n	8006aba <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8006ab4:	4b58      	ldr	r3, [pc, #352]	@ (8006c18 <Send+0x1b0>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8006ac0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006ac4:	f36f 0303 	bfc	r3, #0, #4
 8006ac8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8006acc:	4b52      	ldr	r3, [pc, #328]	@ (8006c18 <Send+0x1b0>)
 8006ace:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8006ad2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006ad6:	f362 13c7 	bfi	r3, r2, #7, #1
 8006ada:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8006ade:	4b4e      	ldr	r3, [pc, #312]	@ (8006c18 <Send+0x1b0>)
 8006ae0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d106      	bne.n	8006af6 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8006ae8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006aec:	f043 0310 	orr.w	r3, r3, #16
 8006af0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8006af4:	e005      	b.n	8006b02 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8006af6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006afa:	f36f 1304 	bfc	r3, #4, #1
 8006afe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8006b02:	4b45      	ldr	r3, [pc, #276]	@ (8006c18 <Send+0x1b0>)
 8006b04:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d005      	beq.n	8006b18 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8006b0c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006b10:	f043 0320 	orr.w	r3, r3, #32
 8006b14:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8006b1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006b20:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bf14      	ite	ne
 8006b2a:	2301      	movne	r3, #1
 8006b2c:	2300      	moveq	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8006b32:	4b39      	ldr	r3, [pc, #228]	@ (8006c18 <Send+0x1b0>)
 8006b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b36:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8006b38:	4b37      	ldr	r3, [pc, #220]	@ (8006c18 <Send+0x1b0>)
 8006b3a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8006b3e:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8006b40:	4b35      	ldr	r3, [pc, #212]	@ (8006c18 <Send+0x1b0>)
 8006b42:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8006b46:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8006b48:	4b33      	ldr	r3, [pc, #204]	@ (8006c18 <Send+0x1b0>)
 8006b4a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8006b4e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8006b52:	4b31      	ldr	r3, [pc, #196]	@ (8006c18 <Send+0x1b0>)
 8006b54:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8006b58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8006b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8006c18 <Send+0x1b0>)
 8006b5e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8006b62:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8006b66:	4b2c      	ldr	r3, [pc, #176]	@ (8006c18 <Send+0x1b0>)
 8006b68:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8006b6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8006b70:	4b29      	ldr	r3, [pc, #164]	@ (8006c18 <Send+0x1b0>)
 8006b72:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8006b76:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8006b78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006b7c:	f107 0014 	add.w	r0, r7, #20
 8006b80:	4a26      	ldr	r2, [pc, #152]	@ (8006c1c <Send+0x1b4>)
 8006b82:	4927      	ldr	r1, [pc, #156]	@ (8006c20 <Send+0x1b8>)
 8006b84:	f001 ff7c 	bl	8008a80 <LoRaMacAdrCalcNext>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006b90:	f362 1386 	bfi	r3, r2, #6, #1
 8006b94:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8006b98:	7afa      	ldrb	r2, [r7, #11]
 8006b9a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8006b9e:	893b      	ldrh	r3, [r7, #8]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 fc09 	bl	80073bc <PrepareFrame>
 8006baa:	4603      	mov	r3, r0
 8006bac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8006bb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <Send+0x158>
 8006bb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bbc:	2b0a      	cmp	r3, #10
 8006bbe:	d107      	bne.n	8006bd0 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8006bc0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 f961 	bl	8006e8c <ScheduleTx>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8006bd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8006bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8006c18 <Send+0x1b0>)
 8006bda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006bde:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8006be2:	4a0d      	ldr	r2, [pc, #52]	@ (8006c18 <Send+0x1b0>)
 8006be4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006be8:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 8006bec:	e00d      	b.n	8006c0a <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8006bee:	4b0a      	ldr	r3, [pc, #40]	@ (8006c18 <Send+0x1b0>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8006bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf8:	4a07      	ldr	r2, [pc, #28]	@ (8006c18 <Send+0x1b0>)
 8006bfa:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8006bfc:	f002 f97a 	bl	8008ef4 <LoRaMacCommandsRemoveNoneStickyCmds>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8006c06:	2313      	movs	r3, #19
 8006c08:	e001      	b.n	8006c0e <Send+0x1a6>
        }
    }
    return status;
 8006c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3730      	adds	r7, #48	@ 0x30
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20000a0c 	.word	0x20000a0c
 8006c1c:	20000a44 	.word	0x20000a44
 8006c20:	20000a45 	.word	0x20000a45

08006c24 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8006c36:	2301      	movs	r3, #1
 8006c38:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	2bff      	cmp	r3, #255	@ 0xff
 8006c3e:	d11f      	bne.n	8006c80 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8006c40:	2000      	movs	r0, #0
 8006c42:	f7ff fdd9 	bl	80067f8 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8006c46:	4b15      	ldr	r3, [pc, #84]	@ (8006c9c <SendReJoinReq+0x78>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8006c4e:	4b13      	ldr	r3, [pc, #76]	@ (8006c9c <SendReJoinReq+0x78>)
 8006c50:	4a13      	ldr	r2, [pc, #76]	@ (8006ca0 <SendReJoinReq+0x7c>)
 8006c52:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8006c56:	4b11      	ldr	r3, [pc, #68]	@ (8006c9c <SendReJoinReq+0x78>)
 8006c58:	22ff      	movs	r2, #255	@ 0xff
 8006c5a:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8006c5e:	7b3b      	ldrb	r3, [r7, #12]
 8006c60:	f36f 1347 	bfc	r3, #5, #3
 8006c64:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8006c66:	7b3a      	ldrb	r2, [r7, #12]
 8006c68:	4b0c      	ldr	r3, [pc, #48]	@ (8006c9c <SendReJoinReq+0x78>)
 8006c6a:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8006c6e:	480d      	ldr	r0, [pc, #52]	@ (8006ca4 <SendReJoinReq+0x80>)
 8006c70:	f007 fd76 	bl	800e760 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8006c74:	480c      	ldr	r0, [pc, #48]	@ (8006ca8 <SendReJoinReq+0x84>)
 8006c76:	f007 fd43 	bl	800e700 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	73fb      	strb	r3, [r7, #15]

            break;
 8006c7e:	e002      	b.n	8006c86 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8006c80:	2302      	movs	r3, #2
 8006c82:	73bb      	strb	r3, [r7, #14]
            break;
 8006c84:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 f8ff 	bl	8006e8c <ScheduleTx>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	73bb      	strb	r3, [r7, #14]
    return status;
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20000504 	.word	0x20000504
 8006ca0:	20000506 	.word	0x20000506
 8006ca4:	20000612 	.word	0x20000612
 8006ca8:	2000061a 	.word	0x2000061a

08006cac <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8006cb0:	f001 ff23 	bl	8008afa <LoRaMacClassBIsBeaconExpected>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8006cba:	230e      	movs	r3, #14
 8006cbc:	e013      	b.n	8006ce6 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8006cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8006cec <CheckForClassBCollision+0x40>)
 8006cc0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d10d      	bne.n	8006ce4 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8006cc8:	f001 ff1e 	bl	8008b08 <LoRaMacClassBIsPingExpected>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8006cd2:	230f      	movs	r3, #15
 8006cd4:	e007      	b.n	8006ce6 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8006cd6:	f001 ff1e 	bl	8008b16 <LoRaMacClassBIsMulticastExpected>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8006ce0:	230f      	movs	r3, #15
 8006ce2:	e000      	b.n	8006ce6 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20000a0c 	.word	0x20000a0c

08006cf0 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8006cf0:	b590      	push	{r4, r7, lr}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8006cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8006dac <ComputeRxWindowParameters+0xbc>)
 8006cf8:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8006cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8006dac <ComputeRxWindowParameters+0xbc>)
 8006cfe:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8006d02:	4b2a      	ldr	r3, [pc, #168]	@ (8006dac <ComputeRxWindowParameters+0xbc>)
 8006d04:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 8006d08:	4b28      	ldr	r3, [pc, #160]	@ (8006dac <ComputeRxWindowParameters+0xbc>)
 8006d0a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8006d0e:	4b27      	ldr	r3, [pc, #156]	@ (8006dac <ComputeRxWindowParameters+0xbc>)
 8006d10:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8006d14:	b25b      	sxtb	r3, r3
 8006d16:	f002 ffb7 	bl	8009c88 <RegionApplyDrOffset>
 8006d1a:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8006d1c:	b259      	sxtb	r1, r3
 8006d1e:	4b23      	ldr	r3, [pc, #140]	@ (8006dac <ComputeRxWindowParameters+0xbc>)
 8006d20:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8006d24:	4b21      	ldr	r3, [pc, #132]	@ (8006dac <ComputeRxWindowParameters+0xbc>)
 8006d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d28:	4821      	ldr	r0, [pc, #132]	@ (8006db0 <ComputeRxWindowParameters+0xc0>)
 8006d2a:	9000      	str	r0, [sp, #0]
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f002 fea3 	bl	8009a78 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8006d32:	4b1e      	ldr	r3, [pc, #120]	@ (8006dac <ComputeRxWindowParameters+0xbc>)
 8006d34:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8006d38:	4b1c      	ldr	r3, [pc, #112]	@ (8006dac <ComputeRxWindowParameters+0xbc>)
 8006d3a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8006d3e:	b259      	sxtb	r1, r3
 8006d40:	4b1a      	ldr	r3, [pc, #104]	@ (8006dac <ComputeRxWindowParameters+0xbc>)
 8006d42:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8006d46:	4b19      	ldr	r3, [pc, #100]	@ (8006dac <ComputeRxWindowParameters+0xbc>)
 8006d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d4a:	4c1a      	ldr	r4, [pc, #104]	@ (8006db4 <ComputeRxWindowParameters+0xc4>)
 8006d4c:	9400      	str	r4, [sp, #0]
 8006d4e:	f002 fe93 	bl	8009a78 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8006d52:	4b16      	ldr	r3, [pc, #88]	@ (8006dac <ComputeRxWindowParameters+0xbc>)
 8006d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d56:	4a18      	ldr	r2, [pc, #96]	@ (8006db8 <ComputeRxWindowParameters+0xc8>)
 8006d58:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8006d5c:	4413      	add	r3, r2
 8006d5e:	4a16      	ldr	r2, [pc, #88]	@ (8006db8 <ComputeRxWindowParameters+0xc8>)
 8006d60:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8006d64:	4b11      	ldr	r3, [pc, #68]	@ (8006dac <ComputeRxWindowParameters+0xbc>)
 8006d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d68:	4a13      	ldr	r2, [pc, #76]	@ (8006db8 <ComputeRxWindowParameters+0xc8>)
 8006d6a:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 8006d6e:	4413      	add	r3, r2
 8006d70:	4a11      	ldr	r2, [pc, #68]	@ (8006db8 <ComputeRxWindowParameters+0xc8>)
 8006d72:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8006d76:	4b10      	ldr	r3, [pc, #64]	@ (8006db8 <ComputeRxWindowParameters+0xc8>)
 8006d78:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d011      	beq.n	8006da4 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8006d80:	4b0a      	ldr	r3, [pc, #40]	@ (8006dac <ComputeRxWindowParameters+0xbc>)
 8006d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d84:	4a0c      	ldr	r2, [pc, #48]	@ (8006db8 <ComputeRxWindowParameters+0xc8>)
 8006d86:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 8006d8a:	4413      	add	r3, r2
 8006d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8006db8 <ComputeRxWindowParameters+0xc8>)
 8006d8e:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8006d92:	4b06      	ldr	r3, [pc, #24]	@ (8006dac <ComputeRxWindowParameters+0xbc>)
 8006d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d96:	4a08      	ldr	r2, [pc, #32]	@ (8006db8 <ComputeRxWindowParameters+0xc8>)
 8006d98:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 8006d9c:	4413      	add	r3, r2
 8006d9e:	4a06      	ldr	r2, [pc, #24]	@ (8006db8 <ComputeRxWindowParameters+0xc8>)
 8006da0:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8006da4:	bf00      	nop
 8006da6:	3704      	adds	r7, #4
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd90      	pop	{r4, r7, pc}
 8006dac:	20000a0c 	.word	0x20000a0c
 8006db0:	200008bc 	.word	0x200008bc
 8006db4:	200008d0 	.word	0x200008d0
 8006db8:	20000504 	.word	0x20000504

08006dbc <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8006dc6:	4b13      	ldr	r3, [pc, #76]	@ (8006e14 <VerifyTxFrame+0x58>)
 8006dc8:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01b      	beq.n	8006e08 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8006dd0:	1d3b      	adds	r3, r7, #4
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f002 f8b2 	bl	8008f3c <LoRaMacCommandsGetSizeSerializedCmds>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8006dde:	2313      	movs	r3, #19
 8006de0:	e013      	b.n	8006e0a <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8006de2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e18 <VerifyTxFrame+0x5c>)
 8006de4:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8006de8:	4a0a      	ldr	r2, [pc, #40]	@ (8006e14 <VerifyTxFrame+0x58>)
 8006dea:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff fe10 	bl	8006a18 <ValidatePayloadLength>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f083 0301 	eor.w	r3, r3, #1
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8006e04:	2308      	movs	r3, #8
 8006e06:	e000      	b.n	8006e0a <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000a0c 	.word	0x20000a0c
 8006e18:	20000504 	.word	0x20000504

08006e1c <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8006e22:	4b18      	ldr	r3, [pc, #96]	@ (8006e84 <SerializeTxFrame+0x68>)
 8006e24:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <SerializeTxFrame+0x16>
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d011      	beq.n	8006e54 <SerializeTxFrame+0x38>
 8006e30:	e021      	b.n	8006e76 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8006e32:	4815      	ldr	r0, [pc, #84]	@ (8006e88 <SerializeTxFrame+0x6c>)
 8006e34:	f002 fc03 	bl	800963e <LoRaMacSerializerJoinRequest>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8006e3c:	79fb      	ldrb	r3, [r7, #7]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8006e42:	2311      	movs	r3, #17
 8006e44:	e01a      	b.n	8006e7c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8006e46:	4b0f      	ldr	r3, [pc, #60]	@ (8006e84 <SerializeTxFrame+0x68>)
 8006e48:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e84 <SerializeTxFrame+0x68>)
 8006e50:	801a      	strh	r2, [r3, #0]
            break;
 8006e52:	e012      	b.n	8006e7a <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8006e54:	480c      	ldr	r0, [pc, #48]	@ (8006e88 <SerializeTxFrame+0x6c>)
 8006e56:	f002 fc74 	bl	8009742 <LoRaMacSerializerData>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8006e64:	2311      	movs	r3, #17
 8006e66:	e009      	b.n	8006e7c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8006e68:	4b06      	ldr	r3, [pc, #24]	@ (8006e84 <SerializeTxFrame+0x68>)
 8006e6a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8006e6e:	461a      	mov	r2, r3
 8006e70:	4b04      	ldr	r3, [pc, #16]	@ (8006e84 <SerializeTxFrame+0x68>)
 8006e72:	801a      	strh	r2, [r3, #0]
            break;
 8006e74:	e001      	b.n	8006e7a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e000      	b.n	8006e7c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000504 	.word	0x20000504
 8006e88:	2000060c 	.word	0x2000060c

08006e8c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b090      	sub	sp, #64	@ 0x40
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	4603      	mov	r3, r0
 8006e94:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8006e96:	2303      	movs	r3, #3
 8006e98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8006e9c:	f7ff ff06 	bl	8006cac <CheckForClassBCollision>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8006ea6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <ScheduleTx+0x28>
    {
        return status;
 8006eae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006eb2:	e092      	b.n	8006fda <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8006eb4:	f000 f8fe 	bl	80070b4 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8006eb8:	f7ff ffb0 	bl	8006e1c <SerializeTxFrame>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8006ec2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <ScheduleTx+0x44>
    {
        return status;
 8006eca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ece:	e084      	b.n	8006fda <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8006ed0:	4b44      	ldr	r3, [pc, #272]	@ (8006fe4 <ScheduleTx+0x158>)
 8006ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed4:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8006ed6:	4b43      	ldr	r3, [pc, #268]	@ (8006fe4 <ScheduleTx+0x158>)
 8006ed8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8006edc:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8006ede:	4b41      	ldr	r3, [pc, #260]	@ (8006fe4 <ScheduleTx+0x158>)
 8006ee0:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8006ee4:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8006ee6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006eea:	4618      	mov	r0, r3
 8006eec:	f00a ffc6 	bl	8011e7c <SysTimeGetMcuTime>
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	4b3c      	ldr	r3, [pc, #240]	@ (8006fe4 <ScheduleTx+0x158>)
 8006ef4:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 8006ef8:	9200      	str	r2, [sp, #0]
 8006efa:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8006efe:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8006f02:	ca06      	ldmia	r2, {r1, r2}
 8006f04:	f00a ff82 	bl	8011e0c <SysTimeSub>
 8006f08:	f107 0320 	add.w	r3, r7, #32
 8006f0c:	463a      	mov	r2, r7
 8006f0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f12:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8006f16:	4b33      	ldr	r3, [pc, #204]	@ (8006fe4 <ScheduleTx+0x158>)
 8006f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1a:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 8006f22:	2301      	movs	r3, #1
 8006f24:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8006f26:	4b30      	ldr	r3, [pc, #192]	@ (8006fe8 <ScheduleTx+0x15c>)
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8006f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8006fe4 <ScheduleTx+0x158>)
 8006f2e:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d104      	bne.n	8006f40 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8006f40:	4b28      	ldr	r3, [pc, #160]	@ (8006fe4 <ScheduleTx+0x158>)
 8006f42:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8006f46:	f107 0114 	add.w	r1, r7, #20
 8006f4a:	4b28      	ldr	r3, [pc, #160]	@ (8006fec <ScheduleTx+0x160>)
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	4b28      	ldr	r3, [pc, #160]	@ (8006ff0 <ScheduleTx+0x164>)
 8006f50:	4a28      	ldr	r2, [pc, #160]	@ (8006ff4 <ScheduleTx+0x168>)
 8006f52:	f002 fe49 	bl	8009be8 <RegionNextChannel>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 8006f5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d025      	beq.n	8006fb0 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8006f64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006f68:	2b0b      	cmp	r3, #11
 8006f6a:	d11e      	bne.n	8006faa <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8006f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe8 <ScheduleTx+0x15c>)
 8006f6e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d01c      	beq.n	8006fb0 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d013      	beq.n	8006fa4 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8006f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe8 <ScheduleTx+0x15c>)
 8006f7e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8006f82:	f043 0320 	orr.w	r3, r3, #32
 8006f86:	4a18      	ldr	r2, [pc, #96]	@ (8006fe8 <ScheduleTx+0x15c>)
 8006f88:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8006f8c:	4b16      	ldr	r3, [pc, #88]	@ (8006fe8 <ScheduleTx+0x15c>)
 8006f8e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8006f92:	4619      	mov	r1, r3
 8006f94:	4818      	ldr	r0, [pc, #96]	@ (8006ff8 <ScheduleTx+0x16c>)
 8006f96:	f00b f90b 	bl	80121b0 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8006f9a:	4817      	ldr	r0, [pc, #92]	@ (8006ff8 <ScheduleTx+0x16c>)
 8006f9c:	f00b f82a 	bl	8011ff4 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e01a      	b.n	8006fda <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8006fa4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fa8:	e017      	b.n	8006fda <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8006faa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fae:	e014      	b.n	8006fda <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8006fb0:	f7ff fe9e 	bl	8006cf0 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8006fb4:	f7ff ff02 	bl	8006dbc <VerifyTxFrame>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8006fbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <ScheduleTx+0x140>
    {
        return status;
 8006fc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fca:	e006      	b.n	8006fda <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8006fcc:	4b06      	ldr	r3, [pc, #24]	@ (8006fe8 <ScheduleTx+0x15c>)
 8006fce:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fb0c 	bl	80075f0 <SendFrameOnChannel>
 8006fd8:	4603      	mov	r3, r0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3738      	adds	r7, #56	@ 0x38
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20000a0c 	.word	0x20000a0c
 8006fe8:	20000504 	.word	0x20000504
 8006fec:	20000a3c 	.word	0x20000a3c
 8006ff0:	20000988 	.word	0x20000988
 8006ff4:	20000915 	.word	0x20000915
 8006ff8:	2000086c 	.word	0x2000086c

08006ffc <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	460a      	mov	r2, r1
 8007006:	71fb      	strb	r3, [r7, #7]
 8007008:	4613      	mov	r3, r2
 800700a:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800700c:	2313      	movs	r3, #19
 800700e:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8007010:	2300      	movs	r3, #0
 8007012:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8007014:	4b25      	ldr	r3, [pc, #148]	@ (80070ac <SecureFrame+0xb0>)
 8007016:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <SecureFrame+0x28>
 800701e:	2b04      	cmp	r3, #4
 8007020:	d011      	beq.n	8007046 <SecureFrame+0x4a>
 8007022:	e03b      	b.n	800709c <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8007024:	4822      	ldr	r0, [pc, #136]	@ (80070b0 <SecureFrame+0xb4>)
 8007026:	f002 fa13 	bl	8009450 <LoRaMacCryptoPrepareJoinRequest>
 800702a:	4603      	mov	r3, r0
 800702c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800702e:	7bfb      	ldrb	r3, [r7, #15]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8007034:	2311      	movs	r3, #17
 8007036:	e034      	b.n	80070a2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8007038:	4b1c      	ldr	r3, [pc, #112]	@ (80070ac <SecureFrame+0xb0>)
 800703a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800703e:	461a      	mov	r2, r3
 8007040:	4b1a      	ldr	r3, [pc, #104]	@ (80070ac <SecureFrame+0xb0>)
 8007042:	801a      	strh	r2, [r3, #0]
            break;
 8007044:	e02c      	b.n	80070a0 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8007046:	f107 0308 	add.w	r3, r7, #8
 800704a:	4618      	mov	r0, r3
 800704c:	f002 f9b0 	bl	80093b0 <LoRaMacCryptoGetFCntUp>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8007056:	2312      	movs	r3, #18
 8007058:	e023      	b.n	80070a2 <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800705a:	4b14      	ldr	r3, [pc, #80]	@ (80070ac <SecureFrame+0xb0>)
 800705c:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 8007060:	2b00      	cmp	r3, #0
 8007062:	d104      	bne.n	800706e <SecureFrame+0x72>
 8007064:	4b11      	ldr	r3, [pc, #68]	@ (80070ac <SecureFrame+0xb0>)
 8007066:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 800706a:	2b01      	cmp	r3, #1
 800706c:	d902      	bls.n	8007074 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	3b01      	subs	r3, #1
 8007072:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8007074:	68b8      	ldr	r0, [r7, #8]
 8007076:	79ba      	ldrb	r2, [r7, #6]
 8007078:	79f9      	ldrb	r1, [r7, #7]
 800707a:	4b0d      	ldr	r3, [pc, #52]	@ (80070b0 <SecureFrame+0xb4>)
 800707c:	f002 fa2c 	bl	80094d8 <LoRaMacCryptoSecureMessage>
 8007080:	4603      	mov	r3, r0
 8007082:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800708a:	2311      	movs	r3, #17
 800708c:	e009      	b.n	80070a2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800708e:	4b07      	ldr	r3, [pc, #28]	@ (80070ac <SecureFrame+0xb0>)
 8007090:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8007094:	461a      	mov	r2, r3
 8007096:	4b05      	ldr	r3, [pc, #20]	@ (80070ac <SecureFrame+0xb0>)
 8007098:	801a      	strh	r2, [r3, #0]
            break;
 800709a:	e001      	b.n	80070a0 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800709c:	2303      	movs	r3, #3
 800709e:	e000      	b.n	80070a2 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20000504 	.word	0x20000504
 80070b0:	2000060c 	.word	0x2000060c

080070b4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80070b8:	4b09      	ldr	r3, [pc, #36]	@ (80070e0 <CalculateBackOff+0x2c>)
 80070ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80070c0:	4b07      	ldr	r3, [pc, #28]	@ (80070e0 <CalculateBackOff+0x2c>)
 80070c2:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 80070c6:	3b01      	subs	r3, #1
 80070c8:	4a06      	ldr	r2, [pc, #24]	@ (80070e4 <CalculateBackOff+0x30>)
 80070ca:	f8d2 2414 	ldr.w	r2, [r2, #1044]	@ 0x414
 80070ce:	fb02 f303 	mul.w	r3, r2, r3
 80070d2:	4a03      	ldr	r2, [pc, #12]	@ (80070e0 <CalculateBackOff+0x2c>)
 80070d4:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 80070d6:	bf00      	nop
 80070d8:	46bd      	mov	sp, r7
 80070da:	bc80      	pop	{r7}
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20000a0c 	.word	0x20000a0c
 80070e4:	20000504 	.word	0x20000504

080070e8 <ResetMacParameters>:
        }
    }
}

static void ResetMacParameters( bool isRejoin )
{
 80070e8:	b5b0      	push	{r4, r5, r7, lr}
 80070ea:	b090      	sub	sp, #64	@ 0x40
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 80070f2:	79fb      	ldrb	r3, [r7, #7]
 80070f4:	f083 0301 	eor.w	r3, r3, #1
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80070fe:	4b80      	ldr	r3, [pc, #512]	@ (8007300 <ResetMacParameters+0x218>)
 8007100:	2200      	movs	r2, #0
 8007102:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8007106:	4b7e      	ldr	r3, [pc, #504]	@ (8007300 <ResetMacParameters+0x218>)
 8007108:	2200      	movs	r2, #0
 800710a:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800710c:	4b7d      	ldr	r3, [pc, #500]	@ (8007304 <ResetMacParameters+0x21c>)
 800710e:	2200      	movs	r2, #0
 8007110:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8007114:	4b7b      	ldr	r3, [pc, #492]	@ (8007304 <ResetMacParameters+0x21c>)
 8007116:	2201      	movs	r2, #1
 8007118:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 800711c:	4b79      	ldr	r3, [pc, #484]	@ (8007304 <ResetMacParameters+0x21c>)
 800711e:	2201      	movs	r2, #1
 8007120:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetry = false;
 8007124:	4b77      	ldr	r3, [pc, #476]	@ (8007304 <ResetMacParameters+0x21c>)
 8007126:	2200      	movs	r2, #0
 8007128:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 800712c:	4b74      	ldr	r3, [pc, #464]	@ (8007300 <ResetMacParameters+0x218>)
 800712e:	2200      	movs	r2, #0
 8007130:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8007134:	4b72      	ldr	r3, [pc, #456]	@ (8007300 <ResetMacParameters+0x218>)
 8007136:	2201      	movs	r2, #1
 8007138:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800713c:	4b70      	ldr	r3, [pc, #448]	@ (8007300 <ResetMacParameters+0x218>)
 800713e:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8007142:	4b6f      	ldr	r3, [pc, #444]	@ (8007300 <ResetMacParameters+0x218>)
 8007144:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8007148:	4b6d      	ldr	r3, [pc, #436]	@ (8007300 <ResetMacParameters+0x218>)
 800714a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800714e:	4b6c      	ldr	r3, [pc, #432]	@ (8007300 <ResetMacParameters+0x218>)
 8007150:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8007154:	4b6a      	ldr	r3, [pc, #424]	@ (8007300 <ResetMacParameters+0x218>)
 8007156:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 800715a:	4b69      	ldr	r3, [pc, #420]	@ (8007300 <ResetMacParameters+0x218>)
 800715c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8007160:	4b67      	ldr	r3, [pc, #412]	@ (8007300 <ResetMacParameters+0x218>)
 8007162:	4a67      	ldr	r2, [pc, #412]	@ (8007300 <ResetMacParameters+0x218>)
 8007164:	336c      	adds	r3, #108	@ 0x6c
 8007166:	32b4      	adds	r2, #180	@ 0xb4
 8007168:	e892 0003 	ldmia.w	r2, {r0, r1}
 800716c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8007170:	4b63      	ldr	r3, [pc, #396]	@ (8007300 <ResetMacParameters+0x218>)
 8007172:	4a63      	ldr	r2, [pc, #396]	@ (8007300 <ResetMacParameters+0x218>)
 8007174:	3374      	adds	r3, #116	@ 0x74
 8007176:	32bc      	adds	r2, #188	@ 0xbc
 8007178:	e892 0003 	ldmia.w	r2, {r0, r1}
 800717c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8007180:	4b5f      	ldr	r3, [pc, #380]	@ (8007300 <ResetMacParameters+0x218>)
 8007182:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 8007186:	4b5e      	ldr	r3, [pc, #376]	@ (8007300 <ResetMacParameters+0x218>)
 8007188:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800718c:	4b5c      	ldr	r3, [pc, #368]	@ (8007300 <ResetMacParameters+0x218>)
 800718e:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 8007192:	4b5b      	ldr	r3, [pc, #364]	@ (8007300 <ResetMacParameters+0x218>)
 8007194:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8007198:	4b59      	ldr	r3, [pc, #356]	@ (8007300 <ResetMacParameters+0x218>)
 800719a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800719e:	4a58      	ldr	r2, [pc, #352]	@ (8007300 <ResetMacParameters+0x218>)
 80071a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80071a4:	4b56      	ldr	r3, [pc, #344]	@ (8007300 <ResetMacParameters+0x218>)
 80071a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80071aa:	4a55      	ldr	r2, [pc, #340]	@ (8007300 <ResetMacParameters+0x218>)
 80071ac:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80071b0:	4b53      	ldr	r3, [pc, #332]	@ (8007300 <ResetMacParameters+0x218>)
 80071b2:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 80071b6:	4b52      	ldr	r3, [pc, #328]	@ (8007300 <ResetMacParameters+0x218>)
 80071b8:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80071bc:	4b50      	ldr	r3, [pc, #320]	@ (8007300 <ResetMacParameters+0x218>)
 80071be:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 80071c2:	4b4f      	ldr	r3, [pc, #316]	@ (8007300 <ResetMacParameters+0x218>)
 80071c4:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 80071c8:	4b4e      	ldr	r3, [pc, #312]	@ (8007304 <ResetMacParameters+0x21c>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 80071d0:	4b4b      	ldr	r3, [pc, #300]	@ (8007300 <ResetMacParameters+0x218>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 80071d8:	4b49      	ldr	r3, [pc, #292]	@ (8007300 <ResetMacParameters+0x218>)
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80071e0:	4b47      	ldr	r3, [pc, #284]	@ (8007300 <ResetMacParameters+0x218>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 80071e8:	4b45      	ldr	r3, [pc, #276]	@ (8007300 <ResetMacParameters+0x218>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 80071f0:	4b43      	ldr	r3, [pc, #268]	@ (8007300 <ResetMacParameters+0x218>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 80071f8:	4b41      	ldr	r3, [pc, #260]	@ (8007300 <ResetMacParameters+0x218>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8007200:	4b3f      	ldr	r3, [pc, #252]	@ (8007300 <ResetMacParameters+0x218>)
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8007208:	4b3d      	ldr	r3, [pc, #244]	@ (8007300 <ResetMacParameters+0x218>)
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8007210:	4b3b      	ldr	r3, [pc, #236]	@ (8007300 <ResetMacParameters+0x218>)
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8007218:	2301      	movs	r3, #1
 800721a:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800721c:	4b3a      	ldr	r3, [pc, #232]	@ (8007308 <ResetMacParameters+0x220>)
 800721e:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8007220:	4b3a      	ldr	r3, [pc, #232]	@ (800730c <ResetMacParameters+0x224>)
 8007222:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007224:	4b36      	ldr	r3, [pc, #216]	@ (8007300 <ResetMacParameters+0x218>)
 8007226:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800722a:	f107 020c 	add.w	r2, r7, #12
 800722e:	4611      	mov	r1, r2
 8007230:	4618      	mov	r0, r3
 8007232:	f002 fbb0 	bl	8009996 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8007236:	4b33      	ldr	r3, [pc, #204]	@ (8007304 <ResetMacParameters+0x21c>)
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800723e:	4b31      	ldr	r3, [pc, #196]	@ (8007304 <ResetMacParameters+0x21c>)
 8007240:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 8007244:	4b2f      	ldr	r3, [pc, #188]	@ (8007304 <ResetMacParameters+0x21c>)
 8007246:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800724a:	4b2d      	ldr	r3, [pc, #180]	@ (8007300 <ResetMacParameters+0x218>)
 800724c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800724e:	4a2d      	ldr	r2, [pc, #180]	@ (8007304 <ResetMacParameters+0x21c>)
 8007250:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007254:	4b2a      	ldr	r3, [pc, #168]	@ (8007300 <ResetMacParameters+0x218>)
 8007256:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800725a:	4b2a      	ldr	r3, [pc, #168]	@ (8007304 <ResetMacParameters+0x21c>)
 800725c:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8007260:	4b27      	ldr	r3, [pc, #156]	@ (8007300 <ResetMacParameters+0x218>)
 8007262:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8007266:	4b27      	ldr	r3, [pc, #156]	@ (8007304 <ResetMacParameters+0x21c>)
 8007268:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800726c:	4b25      	ldr	r3, [pc, #148]	@ (8007304 <ResetMacParameters+0x21c>)
 800726e:	2200      	movs	r2, #0
 8007270:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8007274:	4b23      	ldr	r3, [pc, #140]	@ (8007304 <ResetMacParameters+0x21c>)
 8007276:	2201      	movs	r2, #1
 8007278:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800727c:	4a21      	ldr	r2, [pc, #132]	@ (8007304 <ResetMacParameters+0x21c>)
 800727e:	4b21      	ldr	r3, [pc, #132]	@ (8007304 <ResetMacParameters+0x21c>)
 8007280:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 8007284:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 8007288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800728a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007290:	4b1c      	ldr	r3, [pc, #112]	@ (8007304 <ResetMacParameters+0x21c>)
 8007292:	2201      	movs	r2, #1
 8007294:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007298:	4b1a      	ldr	r3, [pc, #104]	@ (8007304 <ResetMacParameters+0x21c>)
 800729a:	2202      	movs	r2, #2
 800729c:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80072a0:	2300      	movs	r3, #0
 80072a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 80072a4:	2300      	movs	r3, #0
 80072a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 80072a8:	4b16      	ldr	r3, [pc, #88]	@ (8007304 <ResetMacParameters+0x21c>)
 80072aa:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d009      	beq.n	80072c6 <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80072b2:	4b14      	ldr	r3, [pc, #80]	@ (8007304 <ResetMacParameters+0x21c>)
 80072b4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80072bc:	4b11      	ldr	r3, [pc, #68]	@ (8007304 <ResetMacParameters+0x21c>)
 80072be:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80072c6:	4b12      	ldr	r3, [pc, #72]	@ (8007310 <ResetMacParameters+0x228>)
 80072c8:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80072ca:	4b12      	ldr	r3, [pc, #72]	@ (8007314 <ResetMacParameters+0x22c>)
 80072cc:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80072ce:	4b12      	ldr	r3, [pc, #72]	@ (8007318 <ResetMacParameters+0x230>)
 80072d0:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80072d2:	4b12      	ldr	r3, [pc, #72]	@ (800731c <ResetMacParameters+0x234>)
 80072d4:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80072d6:	4b12      	ldr	r3, [pc, #72]	@ (8007320 <ResetMacParameters+0x238>)
 80072d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80072da:	4b12      	ldr	r3, [pc, #72]	@ (8007324 <ResetMacParameters+0x23c>)
 80072dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80072de:	4b12      	ldr	r3, [pc, #72]	@ (8007328 <ResetMacParameters+0x240>)
 80072e0:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80072e2:	4b12      	ldr	r3, [pc, #72]	@ (800732c <ResetMacParameters+0x244>)
 80072e4:	637b      	str	r3, [r7, #52]	@ 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80072e6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80072ea:	f107 0318 	add.w	r3, r7, #24
 80072ee:	4a10      	ldr	r2, [pc, #64]	@ (8007330 <ResetMacParameters+0x248>)
 80072f0:	4618      	mov	r0, r3
 80072f2:	f001 fbdd 	bl	8008ab0 <LoRaMacClassBInit>
}
 80072f6:	bf00      	nop
 80072f8:	3740      	adds	r7, #64	@ 0x40
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bdb0      	pop	{r4, r5, r7, pc}
 80072fe:	bf00      	nop
 8007300:	20000a0c 	.word	0x20000a0c
 8007304:	20000504 	.word	0x20000504
 8007308:	20000c2c 	.word	0x20000c2c
 800730c:	20000cd0 	.word	0x20000cd0
 8007310:	20000960 	.word	0x20000960
 8007314:	2000091c 	.word	0x2000091c
 8007318:	2000094c 	.word	0x2000094c
 800731c:	20000985 	.word	0x20000985
 8007320:	20000af0 	.word	0x20000af0
 8007324:	20000a54 	.word	0x20000a54
 8007328:	20000a58 	.word	0x20000a58
 800732c:	20000af4 	.word	0x20000af4
 8007330:	20001174 	.word	0x20001174

08007334 <OpenContinuousRxCWindow>:
        MacCtx.RxSlot = rxConfig->RxSlot;
    }
}

static void OpenContinuousRxCWindow( void )
{
 8007334:	b590      	push	{r4, r7, lr}
 8007336:	b083      	sub	sp, #12
 8007338:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800733a:	4b1b      	ldr	r3, [pc, #108]	@ (80073a8 <OpenContinuousRxCWindow+0x74>)
 800733c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8007340:	4b19      	ldr	r3, [pc, #100]	@ (80073a8 <OpenContinuousRxCWindow+0x74>)
 8007342:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007346:	b259      	sxtb	r1, r3
 8007348:	4b17      	ldr	r3, [pc, #92]	@ (80073a8 <OpenContinuousRxCWindow+0x74>)
 800734a:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800734e:	4b16      	ldr	r3, [pc, #88]	@ (80073a8 <OpenContinuousRxCWindow+0x74>)
 8007350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007352:	4c16      	ldr	r4, [pc, #88]	@ (80073ac <OpenContinuousRxCWindow+0x78>)
 8007354:	9400      	str	r4, [sp, #0]
 8007356:	f002 fb8f 	bl	8009a78 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800735a:	4b15      	ldr	r3, [pc, #84]	@ (80073b0 <OpenContinuousRxCWindow+0x7c>)
 800735c:	2202      	movs	r2, #2
 800735e:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007362:	4b13      	ldr	r3, [pc, #76]	@ (80073b0 <OpenContinuousRxCWindow+0x7c>)
 8007364:	2201      	movs	r2, #1
 8007366:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800736a:	4b0f      	ldr	r3, [pc, #60]	@ (80073a8 <OpenContinuousRxCWindow+0x74>)
 800736c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8007370:	4a10      	ldr	r2, [pc, #64]	@ (80073b4 <OpenContinuousRxCWindow+0x80>)
 8007372:	490e      	ldr	r1, [pc, #56]	@ (80073ac <OpenContinuousRxCWindow+0x78>)
 8007374:	4618      	mov	r0, r3
 8007376:	f002 fbb0 	bl	8009ada <RegionRxConfig>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00f      	beq.n	80073a0 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8007380:	4b0b      	ldr	r3, [pc, #44]	@ (80073b0 <OpenContinuousRxCWindow+0x7c>)
 8007382:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8007386:	4b0a      	ldr	r3, [pc, #40]	@ (80073b0 <OpenContinuousRxCWindow+0x7c>)
 8007388:	f883 245e 	strb.w	r2, [r3, #1118]	@ 0x45e
        Radio.Rx( 0 ); // Continuous mode
 800738c:	4b0a      	ldr	r3, [pc, #40]	@ (80073b8 <OpenContinuousRxCWindow+0x84>)
 800738e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007390:	2000      	movs	r0, #0
 8007392:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8007394:	4b06      	ldr	r3, [pc, #24]	@ (80073b0 <OpenContinuousRxCWindow+0x7c>)
 8007396:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
 800739a:	4b05      	ldr	r3, [pc, #20]	@ (80073b0 <OpenContinuousRxCWindow+0x7c>)
 800739c:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 80073a0:	bf00      	nop
 80073a2:	3704      	adds	r7, #4
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd90      	pop	{r4, r7, pc}
 80073a8:	20000a0c 	.word	0x20000a0c
 80073ac:	200008e4 	.word	0x200008e4
 80073b0:	20000504 	.word	0x20000504
 80073b4:	20000920 	.word	0x20000920
 80073b8:	08012a80 	.word	0x08012a80

080073bc <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b088      	sub	sp, #32
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	4613      	mov	r3, r2
 80073ca:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80073cc:	4b81      	ldr	r3, [pc, #516]	@ (80075d4 <PrepareFrame+0x218>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80073d2:	4b80      	ldr	r3, [pc, #512]	@ (80075d4 <PrepareFrame+0x218>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    uint32_t fCntUp = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80073e2:	2300      	movs	r3, #0
 80073e4:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80073ec:	2300      	movs	r3, #0
 80073ee:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80073f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80073f2:	461a      	mov	r2, r3
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	4878      	ldr	r0, [pc, #480]	@ (80075d8 <PrepareFrame+0x21c>)
 80073f8:	f007 fa3f 	bl	800e87a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80073fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	4b74      	ldr	r3, [pc, #464]	@ (80075d4 <PrepareFrame+0x218>)
 8007402:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	781a      	ldrb	r2, [r3, #0]
 800740a:	4b72      	ldr	r3, [pc, #456]	@ (80075d4 <PrepareFrame+0x218>)
 800740c:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b07      	cmp	r3, #7
 800741a:	f000 80b9 	beq.w	8007590 <PrepareFrame+0x1d4>
 800741e:	2b07      	cmp	r3, #7
 8007420:	f300 80ce 	bgt.w	80075c0 <PrepareFrame+0x204>
 8007424:	2b02      	cmp	r3, #2
 8007426:	d006      	beq.n	8007436 <PrepareFrame+0x7a>
 8007428:	2b04      	cmp	r3, #4
 800742a:	f040 80c9 	bne.w	80075c0 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800742e:	4b69      	ldr	r3, [pc, #420]	@ (80075d4 <PrepareFrame+0x218>)
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8007436:	4b67      	ldr	r3, [pc, #412]	@ (80075d4 <PrepareFrame+0x218>)
 8007438:	2204      	movs	r2, #4
 800743a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800743e:	4b65      	ldr	r3, [pc, #404]	@ (80075d4 <PrepareFrame+0x218>)
 8007440:	4a66      	ldr	r2, [pc, #408]	@ (80075dc <PrepareFrame+0x220>)
 8007442:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8007446:	4b63      	ldr	r3, [pc, #396]	@ (80075d4 <PrepareFrame+0x218>)
 8007448:	22ff      	movs	r2, #255	@ 0xff
 800744a:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	781a      	ldrb	r2, [r3, #0]
 8007452:	4b60      	ldr	r3, [pc, #384]	@ (80075d4 <PrepareFrame+0x218>)
 8007454:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8007458:	4a5e      	ldr	r2, [pc, #376]	@ (80075d4 <PrepareFrame+0x218>)
 800745a:	79fb      	ldrb	r3, [r7, #7]
 800745c:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8007460:	4b5f      	ldr	r3, [pc, #380]	@ (80075e0 <PrepareFrame+0x224>)
 8007462:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007466:	4a5b      	ldr	r2, [pc, #364]	@ (80075d4 <PrepareFrame+0x218>)
 8007468:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	781a      	ldrb	r2, [r3, #0]
 8007470:	4b58      	ldr	r3, [pc, #352]	@ (80075d4 <PrepareFrame+0x218>)
 8007472:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8007476:	4b57      	ldr	r3, [pc, #348]	@ (80075d4 <PrepareFrame+0x218>)
 8007478:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 800747c:	4b55      	ldr	r3, [pc, #340]	@ (80075d4 <PrepareFrame+0x218>)
 800747e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8007482:	4b54      	ldr	r3, [pc, #336]	@ (80075d4 <PrepareFrame+0x218>)
 8007484:	4a54      	ldr	r2, [pc, #336]	@ (80075d8 <PrepareFrame+0x21c>)
 8007486:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800748a:	f107 0318 	add.w	r3, r7, #24
 800748e:	4618      	mov	r0, r3
 8007490:	f001 ff8e 	bl	80093b0 <LoRaMacCryptoGetFCntUp>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800749a:	2312      	movs	r3, #18
 800749c:	e096      	b.n	80075cc <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	4b4c      	ldr	r3, [pc, #304]	@ (80075d4 <PrepareFrame+0x218>)
 80074a4:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 80074a8:	4b4a      	ldr	r3, [pc, #296]	@ (80075d4 <PrepareFrame+0x218>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80074b0:	4b48      	ldr	r3, [pc, #288]	@ (80075d4 <PrepareFrame+0x218>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	4a46      	ldr	r2, [pc, #280]	@ (80075d4 <PrepareFrame+0x218>)
 80074bc:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80074c0:	f107 0314 	add.w	r3, r7, #20
 80074c4:	4618      	mov	r0, r3
 80074c6:	f001 fd39 	bl	8008f3c <LoRaMacCommandsGetSizeSerializedCmds>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80074d0:	2313      	movs	r3, #19
 80074d2:	e07b      	b.n	80075cc <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d074      	beq.n	80075c4 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80074da:	4b41      	ldr	r3, [pc, #260]	@ (80075e0 <PrepareFrame+0x224>)
 80074dc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fa71 	bl	80069c8 <GetMaxAppPayloadWithoutFOptsLength>
 80074e6:	4603      	mov	r3, r0
 80074e8:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80074ea:	4b3a      	ldr	r3, [pc, #232]	@ (80075d4 <PrepareFrame+0x218>)
 80074ec:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01d      	beq.n	8007530 <PrepareFrame+0x174>
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	2b0f      	cmp	r3, #15
 80074f8:	d81a      	bhi.n	8007530 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80074fa:	f107 0314 	add.w	r3, r7, #20
 80074fe:	4a39      	ldr	r2, [pc, #228]	@ (80075e4 <PrepareFrame+0x228>)
 8007500:	4619      	mov	r1, r3
 8007502:	200f      	movs	r0, #15
 8007504:	f001 fd30 	bl	8008f68 <LoRaMacCommandsSerializeCmds>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800750e:	2313      	movs	r3, #19
 8007510:	e05c      	b.n	80075cc <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	b2d9      	uxtb	r1, r3
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	7813      	ldrb	r3, [r2, #0]
 800751e:	f361 0303 	bfi	r3, r1, #0, #4
 8007522:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	781a      	ldrb	r2, [r3, #0]
 8007528:	4b2a      	ldr	r3, [pc, #168]	@ (80075d4 <PrepareFrame+0x218>)
 800752a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800752e:	e049      	b.n	80075c4 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8007530:	4b28      	ldr	r3, [pc, #160]	@ (80075d4 <PrepareFrame+0x218>)
 8007532:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8007536:	2b00      	cmp	r3, #0
 8007538:	d010      	beq.n	800755c <PrepareFrame+0x1a0>
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b0f      	cmp	r3, #15
 800753e:	d90d      	bls.n	800755c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8007540:	7ffb      	ldrb	r3, [r7, #31]
 8007542:	f107 0114 	add.w	r1, r7, #20
 8007546:	4a28      	ldr	r2, [pc, #160]	@ (80075e8 <PrepareFrame+0x22c>)
 8007548:	4618      	mov	r0, r3
 800754a:	f001 fd0d 	bl	8008f68 <LoRaMacCommandsSerializeCmds>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007554:	2313      	movs	r3, #19
 8007556:	e039      	b.n	80075cc <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8007558:	230a      	movs	r3, #10
 800755a:	e037      	b.n	80075cc <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800755c:	7ffb      	ldrb	r3, [r7, #31]
 800755e:	f107 0114 	add.w	r1, r7, #20
 8007562:	4a21      	ldr	r2, [pc, #132]	@ (80075e8 <PrepareFrame+0x22c>)
 8007564:	4618      	mov	r0, r3
 8007566:	f001 fcff 	bl	8008f68 <LoRaMacCommandsSerializeCmds>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007570:	2313      	movs	r3, #19
 8007572:	e02b      	b.n	80075cc <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8007574:	4b17      	ldr	r3, [pc, #92]	@ (80075d4 <PrepareFrame+0x218>)
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800757c:	4b15      	ldr	r3, [pc, #84]	@ (80075d4 <PrepareFrame+0x218>)
 800757e:	4a1a      	ldr	r2, [pc, #104]	@ (80075e8 <PrepareFrame+0x22c>)
 8007580:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	b2da      	uxtb	r2, r3
 8007588:	4b12      	ldr	r3, [pc, #72]	@ (80075d4 <PrepareFrame+0x218>)
 800758a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 800758e:	e019      	b.n	80075c4 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d018      	beq.n	80075c8 <PrepareFrame+0x20c>
 8007596:	4b0f      	ldr	r3, [pc, #60]	@ (80075d4 <PrepareFrame+0x218>)
 8007598:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800759c:	2b00      	cmp	r3, #0
 800759e:	d013      	beq.n	80075c8 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80075a0:	4812      	ldr	r0, [pc, #72]	@ (80075ec <PrepareFrame+0x230>)
 80075a2:	4b0c      	ldr	r3, [pc, #48]	@ (80075d4 <PrepareFrame+0x218>)
 80075a4:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80075a8:	461a      	mov	r2, r3
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	f007 f965 	bl	800e87a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80075b0:	4b08      	ldr	r3, [pc, #32]	@ (80075d4 <PrepareFrame+0x218>)
 80075b2:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80075b6:	3301      	adds	r3, #1
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	4b06      	ldr	r3, [pc, #24]	@ (80075d4 <PrepareFrame+0x218>)
 80075bc:	801a      	strh	r2, [r3, #0]
            }
            break;
 80075be:	e003      	b.n	80075c8 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80075c0:	2302      	movs	r3, #2
 80075c2:	e003      	b.n	80075cc <PrepareFrame+0x210>
            break;
 80075c4:	bf00      	nop
 80075c6:	e000      	b.n	80075ca <PrepareFrame+0x20e>
            break;
 80075c8:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3720      	adds	r7, #32
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20000504 	.word	0x20000504
 80075d8:	2000063c 	.word	0x2000063c
 80075dc:	20000506 	.word	0x20000506
 80075e0:	20000a0c 	.word	0x20000a0c
 80075e4:	2000061c 	.word	0x2000061c
 80075e8:	2000098c 	.word	0x2000098c
 80075ec:	20000507 	.word	0x20000507

080075f0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	@ 0x28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80075fa:	2303      	movs	r3, #3
 80075fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8007604:	79fb      	ldrb	r3, [r7, #7]
 8007606:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007608:	4b48      	ldr	r3, [pc, #288]	@ (800772c <SendFrameOnChannel+0x13c>)
 800760a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800760e:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007610:	4b46      	ldr	r3, [pc, #280]	@ (800772c <SendFrameOnChannel+0x13c>)
 8007612:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8007616:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8007618:	4b44      	ldr	r3, [pc, #272]	@ (800772c <SendFrameOnChannel+0x13c>)
 800761a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800761e:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8007620:	4b42      	ldr	r3, [pc, #264]	@ (800772c <SendFrameOnChannel+0x13c>)
 8007622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007626:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8007628:	4b41      	ldr	r3, [pc, #260]	@ (8007730 <SendFrameOnChannel+0x140>)
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800762e:	4b3f      	ldr	r3, [pc, #252]	@ (800772c <SendFrameOnChannel+0x13c>)
 8007630:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8007634:	f107 020f 	add.w	r2, r7, #15
 8007638:	f107 0110 	add.w	r1, r7, #16
 800763c:	4b3d      	ldr	r3, [pc, #244]	@ (8007734 <SendFrameOnChannel+0x144>)
 800763e:	f002 fa74 	bl	8009b2a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007642:	4b3b      	ldr	r3, [pc, #236]	@ (8007730 <SendFrameOnChannel+0x140>)
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800764a:	4b38      	ldr	r3, [pc, #224]	@ (800772c <SendFrameOnChannel+0x13c>)
 800764c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8007650:	b2da      	uxtb	r2, r3
 8007652:	4b37      	ldr	r3, [pc, #220]	@ (8007730 <SendFrameOnChannel+0x140>)
 8007654:	f883 2436 	strb.w	r2, [r3, #1078]	@ 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8007658:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800765c:	4b34      	ldr	r3, [pc, #208]	@ (8007730 <SendFrameOnChannel+0x140>)
 800765e:	f883 2437 	strb.w	r2, [r3, #1079]	@ 0x437
    MacCtx.McpsConfirm.Channel = channel;
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	4a32      	ldr	r2, [pc, #200]	@ (8007730 <SendFrameOnChannel+0x140>)
 8007666:	f8c2 3444 	str.w	r3, [r2, #1092]	@ 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800766a:	4b31      	ldr	r3, [pc, #196]	@ (8007730 <SendFrameOnChannel+0x140>)
 800766c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8007670:	4a2f      	ldr	r2, [pc, #188]	@ (8007730 <SendFrameOnChannel+0x140>)
 8007672:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007676:	4b2e      	ldr	r3, [pc, #184]	@ (8007730 <SendFrameOnChannel+0x140>)
 8007678:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800767c:	4a2c      	ldr	r2, [pc, #176]	@ (8007730 <SendFrameOnChannel+0x140>)
 800767e:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8007682:	f001 fa4f 	bl	8008b24 <LoRaMacClassBIsBeaconModeActive>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00b      	beq.n	80076a4 <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800768c:	4b28      	ldr	r3, [pc, #160]	@ (8007730 <SendFrameOnChannel+0x140>)
 800768e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8007692:	4618      	mov	r0, r3
 8007694:	f001 fa7c 	bl	8008b90 <LoRaMacClassBIsUplinkCollision>
 8007698:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80076a0:	2310      	movs	r3, #16
 80076a2:	e03e      	b.n	8007722 <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80076a4:	4b21      	ldr	r3, [pc, #132]	@ (800772c <SendFrameOnChannel+0x13c>)
 80076a6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d101      	bne.n	80076b2 <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80076ae:	f001 fa79 	bl	8008ba4 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80076b2:	f001 fa48 	bl	8008b46 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80076b6:	4b1d      	ldr	r3, [pc, #116]	@ (800772c <SendFrameOnChannel+0x13c>)
 80076b8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	4a1c      	ldr	r2, [pc, #112]	@ (8007730 <SendFrameOnChannel+0x140>)
 80076c0:	f892 2411 	ldrb.w	r2, [r2, #1041]	@ 0x411
 80076c4:	4611      	mov	r1, r2
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff fc98 	bl	8006ffc <SecureFrame>
 80076cc:	4603      	mov	r3, r0
 80076ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 80076d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <SendFrameOnChannel+0xf0>
    {
        return status;
 80076da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076de:	e020      	b.n	8007722 <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80076e0:	4b13      	ldr	r3, [pc, #76]	@ (8007730 <SendFrameOnChannel+0x140>)
 80076e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80076e6:	f043 0302 	orr.w	r3, r3, #2
 80076ea:	4a11      	ldr	r2, [pc, #68]	@ (8007730 <SendFrameOnChannel+0x140>)
 80076ec:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 80076f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007730 <SendFrameOnChannel+0x140>)
 80076f2:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 80076f6:	f083 0301 	eor.w	r3, r3, #1
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d007      	beq.n	8007710 <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 8007700:	4b0b      	ldr	r3, [pc, #44]	@ (8007730 <SendFrameOnChannel+0x140>)
 8007702:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 8007706:	3301      	adds	r3, #1
 8007708:	b2da      	uxtb	r2, r3
 800770a:	4b09      	ldr	r3, [pc, #36]	@ (8007730 <SendFrameOnChannel+0x140>)
 800770c:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8007710:	4b09      	ldr	r3, [pc, #36]	@ (8007738 <SendFrameOnChannel+0x148>)
 8007712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007714:	4a06      	ldr	r2, [pc, #24]	@ (8007730 <SendFrameOnChannel+0x140>)
 8007716:	8812      	ldrh	r2, [r2, #0]
 8007718:	b2d2      	uxtb	r2, r2
 800771a:	4611      	mov	r1, r2
 800771c:	4807      	ldr	r0, [pc, #28]	@ (800773c <SendFrameOnChannel+0x14c>)
 800771e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3728      	adds	r7, #40	@ 0x28
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20000a0c 	.word	0x20000a0c
 8007730:	20000504 	.word	0x20000504
 8007734:	20000918 	.word	0x20000918
 8007738:	08012a80 	.word	0x08012a80
 800773c:	20000506 	.word	0x20000506

08007740 <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 800774a:	4b16      	ldr	r3, [pc, #88]	@ (80077a4 <SetTxContinuousWave+0x64>)
 800774c:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 8007750:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007752:	4b15      	ldr	r3, [pc, #84]	@ (80077a8 <SetTxContinuousWave+0x68>)
 8007754:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8007758:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800775a:	4b13      	ldr	r3, [pc, #76]	@ (80077a8 <SetTxContinuousWave+0x68>)
 800775c:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8007760:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8007762:	4b11      	ldr	r3, [pc, #68]	@ (80077a8 <SetTxContinuousWave+0x68>)
 8007764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007768:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800776a:	4b0f      	ldr	r3, [pc, #60]	@ (80077a8 <SetTxContinuousWave+0x68>)
 800776c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007770:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8007772:	88fb      	ldrh	r3, [r7, #6]
 8007774:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8007776:	4b0c      	ldr	r3, [pc, #48]	@ (80077a8 <SetTxContinuousWave+0x68>)
 8007778:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800777c:	f107 0208 	add.w	r2, r7, #8
 8007780:	4611      	mov	r1, r2
 8007782:	4618      	mov	r0, r3
 8007784:	f002 fa5f 	bl	8009c46 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007788:	4b06      	ldr	r3, [pc, #24]	@ (80077a4 <SetTxContinuousWave+0x64>)
 800778a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800778e:	f043 0302 	orr.w	r3, r3, #2
 8007792:	4a04      	ldr	r2, [pc, #16]	@ (80077a4 <SetTxContinuousWave+0x64>)
 8007794:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	20000504 	.word	0x20000504
 80077a8:	20000a0c 	.word	0x20000a0c

080077ac <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	4603      	mov	r3, r0
 80077b4:	6039      	str	r1, [r7, #0]
 80077b6:	80fb      	strh	r3, [r7, #6]
 80077b8:	4613      	mov	r3, r2
 80077ba:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80077bc:	4b09      	ldr	r3, [pc, #36]	@ (80077e4 <SetTxContinuousWave1+0x38>)
 80077be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80077c4:	88fa      	ldrh	r2, [r7, #6]
 80077c6:	6838      	ldr	r0, [r7, #0]
 80077c8:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80077ca:	4b07      	ldr	r3, [pc, #28]	@ (80077e8 <SetTxContinuousWave1+0x3c>)
 80077cc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80077d0:	f043 0302 	orr.w	r3, r3, #2
 80077d4:	4a04      	ldr	r2, [pc, #16]	@ (80077e8 <SetTxContinuousWave1+0x3c>)
 80077d6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	08012a80 	.word	0x08012a80
 80077e8:	20000504 	.word	0x20000504

080077ec <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bc80      	pop	{r7}
 80077f8:	4770      	bx	lr
	...

080077fc <LoRaMacStart>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacStart( void )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8007800:	4b04      	ldr	r3, [pc, #16]	@ (8007814 <LoRaMacStart+0x18>)
 8007802:	2200      	movs	r2, #0
 8007804:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 8007808:	f7fe ffb2 	bl	8006770 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	20000504 	.word	0x20000504

08007818 <LoRaMacQueryTxPossible>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08a      	sub	sp, #40	@ 0x28
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	6039      	str	r1, [r7, #0]
 8007822:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8007824:	4b3e      	ldr	r3, [pc, #248]	@ (8007920 <LoRaMacQueryTxPossible+0x108>)
 8007826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007828:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800782a:	4b3d      	ldr	r3, [pc, #244]	@ (8007920 <LoRaMacQueryTxPossible+0x108>)
 800782c:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 8007830:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007832:	4b3b      	ldr	r3, [pc, #236]	@ (8007920 <LoRaMacQueryTxPossible+0x108>)
 8007834:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 8007838:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007844:	2303      	movs	r3, #3
 8007846:	e066      	b.n	8007916 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8007848:	4b35      	ldr	r3, [pc, #212]	@ (8007920 <LoRaMacQueryTxPossible+0x108>)
 800784a:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800784e:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8007850:	2300      	movs	r3, #0
 8007852:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8007854:	4b32      	ldr	r3, [pc, #200]	@ (8007920 <LoRaMacQueryTxPossible+0x108>)
 8007856:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800785a:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800785c:	4b30      	ldr	r3, [pc, #192]	@ (8007920 <LoRaMacQueryTxPossible+0x108>)
 800785e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007860:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8007862:	4b2f      	ldr	r3, [pc, #188]	@ (8007920 <LoRaMacQueryTxPossible+0x108>)
 8007864:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8007868:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800786a:	4b2d      	ldr	r3, [pc, #180]	@ (8007920 <LoRaMacQueryTxPossible+0x108>)
 800786c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8007870:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007872:	4b2b      	ldr	r3, [pc, #172]	@ (8007920 <LoRaMacQueryTxPossible+0x108>)
 8007874:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8007878:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800787c:	4b28      	ldr	r3, [pc, #160]	@ (8007920 <LoRaMacQueryTxPossible+0x108>)
 800787e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8007882:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8007886:	4b26      	ldr	r3, [pc, #152]	@ (8007920 <LoRaMacQueryTxPossible+0x108>)
 8007888:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800788c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8007890:	4b23      	ldr	r3, [pc, #140]	@ (8007920 <LoRaMacQueryTxPossible+0x108>)
 8007892:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8007896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800789a:	f107 0310 	add.w	r3, r7, #16
 800789e:	f107 020e 	add.w	r2, r7, #14
 80078a2:	f107 010f 	add.w	r1, r7, #15
 80078a6:	f107 0014 	add.w	r0, r7, #20
 80078aa:	f001 f8e9 	bl	8008a80 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80078ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7ff f888 	bl	80069c8 <GetMaxAppPayloadWithoutFOptsLength>
 80078b8:	4603      	mov	r3, r0
 80078ba:	461a      	mov	r2, r3
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80078c0:	f107 0308 	add.w	r3, r7, #8
 80078c4:	4618      	mov	r0, r3
 80078c6:	f001 fb39 	bl	8008f3c <LoRaMacCommandsGetSizeSerializedCmds>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80078d0:	2313      	movs	r3, #19
 80078d2:	e020      	b.n	8007916 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b0f      	cmp	r3, #15
 80078d8:	d819      	bhi.n	800790e <LoRaMacQueryTxPossible+0xf6>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	785b      	ldrb	r3, [r3, #1]
 80078de:	461a      	mov	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d313      	bcc.n	800790e <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	785a      	ldrb	r2, [r3, #1]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	785b      	ldrb	r3, [r3, #1]
 80078fa:	4619      	mov	r1, r3
 80078fc:	79fa      	ldrb	r2, [r7, #7]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	4413      	add	r3, r2
 8007902:	4299      	cmp	r1, r3
 8007904:	d301      	bcc.n	800790a <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	e005      	b.n	8007916 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800790a:	2308      	movs	r3, #8
 800790c:	e003      	b.n	8007916 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2200      	movs	r2, #0
 8007912:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8007914:	2308      	movs	r3, #8
    }
}
 8007916:	4618      	mov	r0, r3
 8007918:	3728      	adds	r7, #40	@ 0x28
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20000a0c 	.word	0x20000a0c

08007924 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8007924:	b590      	push	{r4, r7, lr}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007936:	2303      	movs	r3, #3
 8007938:	e1c4      	b.n	8007cc4 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007940:	f200 81b9 	bhi.w	8007cb6 <LoRaMacMibGetRequestConfirm+0x392>
 8007944:	a201      	add	r2, pc, #4	@ (adr r2, 800794c <LoRaMacMibGetRequestConfirm+0x28>)
 8007946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794a:	bf00      	nop
 800794c:	08007a4d 	.word	0x08007a4d
 8007950:	08007a59 	.word	0x08007a59
 8007954:	08007a65 	.word	0x08007a65
 8007958:	08007a71 	.word	0x08007a71
 800795c:	08007a7d 	.word	0x08007a7d
 8007960:	08007a89 	.word	0x08007a89
 8007964:	08007a95 	.word	0x08007a95
 8007968:	08007cb7 	.word	0x08007cb7
 800796c:	08007cb7 	.word	0x08007cb7
 8007970:	08007cb7 	.word	0x08007cb7
 8007974:	08007cb7 	.word	0x08007cb7
 8007978:	08007cb7 	.word	0x08007cb7
 800797c:	08007cb7 	.word	0x08007cb7
 8007980:	08007cb7 	.word	0x08007cb7
 8007984:	08007cb7 	.word	0x08007cb7
 8007988:	08007aa9 	.word	0x08007aa9
 800798c:	08007ab5 	.word	0x08007ab5
 8007990:	08007ac1 	.word	0x08007ac1
 8007994:	08007ae3 	.word	0x08007ae3
 8007998:	08007af5 	.word	0x08007af5
 800799c:	08007b07 	.word	0x08007b07
 80079a0:	08007b19 	.word	0x08007b19
 80079a4:	08007b4d 	.word	0x08007b4d
 80079a8:	08007b2b 	.word	0x08007b2b
 80079ac:	08007b6f 	.word	0x08007b6f
 80079b0:	08007b7b 	.word	0x08007b7b
 80079b4:	08007b85 	.word	0x08007b85
 80079b8:	08007b8f 	.word	0x08007b8f
 80079bc:	08007b99 	.word	0x08007b99
 80079c0:	08007ba3 	.word	0x08007ba3
 80079c4:	08007bad 	.word	0x08007bad
 80079c8:	08007bb9 	.word	0x08007bb9
 80079cc:	08007bd1 	.word	0x08007bd1
 80079d0:	08007bc5 	.word	0x08007bc5
 80079d4:	08007bdd 	.word	0x08007bdd
 80079d8:	08007be7 	.word	0x08007be7
 80079dc:	08007bf3 	.word	0x08007bf3
 80079e0:	08007c0f 	.word	0x08007c0f
 80079e4:	08007bff 	.word	0x08007bff
 80079e8:	08007c07 	.word	0x08007c07
 80079ec:	08007cb7 	.word	0x08007cb7
 80079f0:	08007c1b 	.word	0x08007c1b
 80079f4:	08007cb7 	.word	0x08007cb7
 80079f8:	08007cb7 	.word	0x08007cb7
 80079fc:	08007cb7 	.word	0x08007cb7
 8007a00:	08007cb7 	.word	0x08007cb7
 8007a04:	08007cb7 	.word	0x08007cb7
 8007a08:	08007cb7 	.word	0x08007cb7
 8007a0c:	08007cb7 	.word	0x08007cb7
 8007a10:	08007cb7 	.word	0x08007cb7
 8007a14:	08007cb7 	.word	0x08007cb7
 8007a18:	08007cb7 	.word	0x08007cb7
 8007a1c:	08007cb7 	.word	0x08007cb7
 8007a20:	08007cb7 	.word	0x08007cb7
 8007a24:	08007cb7 	.word	0x08007cb7
 8007a28:	08007cb7 	.word	0x08007cb7
 8007a2c:	08007cb7 	.word	0x08007cb7
 8007a30:	08007c2f 	.word	0x08007c2f
 8007a34:	08007c3b 	.word	0x08007c3b
 8007a38:	08007c47 	.word	0x08007c47
 8007a3c:	08007c53 	.word	0x08007c53
 8007a40:	08007c5f 	.word	0x08007c5f
 8007a44:	08007c6b 	.word	0x08007c6b
 8007a48:	08007c91 	.word	0x08007c91
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8007a4c:	4b9f      	ldr	r3, [pc, #636]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007a4e:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	711a      	strb	r2, [r3, #4]
            break;
 8007a56:	e134      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8007a58:	4b9c      	ldr	r3, [pc, #624]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007a5a:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	711a      	strb	r2, [r3, #4]
            break;
 8007a62:	e12e      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f006 fe49 	bl	800e700 <SecureElementGetDevEui>
            break;
 8007a6e:	e128      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f006 fe73 	bl	800e760 <SecureElementGetJoinEui>
            break;
 8007a7a:	e122      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8007a7c:	4b93      	ldr	r3, [pc, #588]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007a7e:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	711a      	strb	r2, [r3, #4]
            break;
 8007a86:	e11c      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8007a88:	4b90      	ldr	r3, [pc, #576]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007a8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	605a      	str	r2, [r3, #4]
            break;
 8007a92:	e116      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8007a94:	4b8d      	ldr	r3, [pc, #564]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007a96:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	f006 fe8f 	bl	800e7c4 <SecureElementGetDevAddr>
            break;
 8007aa6:	e10c      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8007aa8:	4b88      	ldr	r3, [pc, #544]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007aaa:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	711a      	strb	r2, [r3, #4]
            break;
 8007ab2:	e106      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8007ab4:	4b85      	ldr	r3, [pc, #532]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007ab6:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	711a      	strb	r2, [r3, #4]
            break;
 8007abe:	e100      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8007ac0:	231d      	movs	r3, #29
 8007ac2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007ac4:	4b81      	ldr	r3, [pc, #516]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007ac6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8007aca:	f107 0210 	add.w	r2, r7, #16
 8007ace:	4611      	mov	r1, r2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f001 ff35 	bl	8009940 <RegionGetPhyParam>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	605a      	str	r2, [r3, #4]
            break;
 8007ae0:	e0ef      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a79      	ldr	r2, [pc, #484]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	326c      	adds	r2, #108	@ 0x6c
 8007aea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007aee:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8007af2:	e0e6      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a75      	ldr	r2, [pc, #468]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007af8:	3304      	adds	r3, #4
 8007afa:	32b4      	adds	r2, #180	@ 0xb4
 8007afc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b00:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8007b04:	e0dd      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a70      	ldr	r2, [pc, #448]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	3274      	adds	r2, #116	@ 0x74
 8007b0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b12:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8007b16:	e0d4      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a6c      	ldr	r2, [pc, #432]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	32bc      	adds	r2, #188	@ 0xbc
 8007b20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b24:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8007b28:	e0cb      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8007b2a:	231b      	movs	r3, #27
 8007b2c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007b2e:	4b67      	ldr	r3, [pc, #412]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007b30:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8007b34:	f107 0210 	add.w	r2, r7, #16
 8007b38:	4611      	mov	r1, r2
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f001 ff00 	bl	8009940 <RegionGetPhyParam>
 8007b40:	4603      	mov	r3, r0
 8007b42:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	605a      	str	r2, [r3, #4]
            break;
 8007b4a:	e0ba      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8007b4c:	231a      	movs	r3, #26
 8007b4e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007b50:	4b5e      	ldr	r3, [pc, #376]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007b52:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8007b56:	f107 0210 	add.w	r2, r7, #16
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f001 feef 	bl	8009940 <RegionGetPhyParam>
 8007b62:	4603      	mov	r3, r0
 8007b64:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	605a      	str	r2, [r3, #4]
            break;
 8007b6c:	e0a9      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8007b6e:	4b57      	ldr	r3, [pc, #348]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007b70:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	711a      	strb	r2, [r3, #4]
            break;
 8007b78:	e0a3      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8007b7a:	4b54      	ldr	r3, [pc, #336]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007b7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	605a      	str	r2, [r3, #4]
            break;
 8007b82:	e09e      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8007b84:	4b51      	ldr	r3, [pc, #324]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007b86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	605a      	str	r2, [r3, #4]
            break;
 8007b8c:	e099      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8007b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007b90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	605a      	str	r2, [r3, #4]
            break;
 8007b96:	e094      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8007b98:	4b4c      	ldr	r3, [pc, #304]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007b9a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	605a      	str	r2, [r3, #4]
            break;
 8007ba0:	e08f      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8007ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007ba4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	605a      	str	r2, [r3, #4]
            break;
 8007baa:	e08a      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8007bac:	4b47      	ldr	r3, [pc, #284]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007bae:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	711a      	strb	r2, [r3, #4]
            break;
 8007bb6:	e084      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8007bb8:	4b44      	ldr	r3, [pc, #272]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007bba:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	711a      	strb	r2, [r3, #4]
            break;
 8007bc2:	e07e      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007bc4:	4b41      	ldr	r3, [pc, #260]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007bc6:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	711a      	strb	r2, [r3, #4]
            break;
 8007bce:	e078      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007bd0:	4b3e      	ldr	r3, [pc, #248]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007bd2:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	711a      	strb	r2, [r3, #4]
            break;
 8007bda:	e072      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8007bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007bde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	605a      	str	r2, [r3, #4]
            break;
 8007be4:	e06d      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8007be6:	4b39      	ldr	r3, [pc, #228]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007be8:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	711a      	strb	r2, [r3, #4]
            break;
 8007bf0:	e067      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8007bf2:	4b36      	ldr	r3, [pc, #216]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007bf4:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	605a      	str	r2, [r3, #4]
            break;
 8007bfc:	e061      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a32      	ldr	r2, [pc, #200]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007c02:	605a      	str	r2, [r3, #4]
            break;
 8007c04:	e05d      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8007c0c:	e059      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007c10:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	605a      	str	r2, [r3, #4]
            break;
 8007c18:	e053      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007c1e:	f8d2 2128 	ldr.w	r2, [r2, #296]	@ 0x128
 8007c22:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8007c24:	687c      	ldr	r4, [r7, #4]
 8007c26:	f002 f86b 	bl	8009d00 <RegionGetVersion>
 8007c2a:	60a0      	str	r0, [r4, #8]
            break;
 8007c2c:	e049      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8007c2e:	4b27      	ldr	r3, [pc, #156]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007c30:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	605a      	str	r2, [r3, #4]
            break;
 8007c38:	e043      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8007c3a:	4b24      	ldr	r3, [pc, #144]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007c3c:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	809a      	strh	r2, [r3, #4]
            break;
 8007c44:	e03d      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8007c46:	4b21      	ldr	r3, [pc, #132]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007c48:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	809a      	strh	r2, [r3, #4]
            break;
 8007c50:	e037      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8007c52:	4b1e      	ldr	r3, [pc, #120]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007c54:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	809a      	strh	r2, [r3, #4]
            break;
 8007c5c:	e031      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8007c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007c60:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	809a      	strh	r2, [r3, #4]
            break;
 8007c68:	e02b      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RSSI_FREE_THRESHOLD:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 8007c6a:	4b18      	ldr	r3, [pc, #96]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007c6c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d007      	beq.n	8007c84 <LoRaMacMibGetRequestConfirm+0x360>
 8007c74:	4b15      	ldr	r3, [pc, #84]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007c76:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8007c7a:	2b06      	cmp	r3, #6
 8007c7c:	d002      	beq.n	8007c84 <LoRaMacMibGetRequestConfirm+0x360>
            {
                status = LORAMAC_STATUS_ERROR;
 8007c7e:	2318      	movs	r3, #24
 8007c80:	75fb      	strb	r3, [r7, #23]
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 8007c82:	e01e      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
 8007c84:	4b11      	ldr	r3, [pc, #68]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007c86:	f9b3 275c 	ldrsh.w	r2, [r3, #1884]	@ 0x75c
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	809a      	strh	r2, [r3, #4]
            break;
 8007c8e:	e018      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CARRIER_SENSE_TIME:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 8007c90:	4b0e      	ldr	r3, [pc, #56]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007c92:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d007      	beq.n	8007caa <LoRaMacMibGetRequestConfirm+0x386>
 8007c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007c9c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8007ca0:	2b06      	cmp	r3, #6
 8007ca2:	d002      	beq.n	8007caa <LoRaMacMibGetRequestConfirm+0x386>
            {
                status = LORAMAC_STATUS_ERROR;
 8007ca4:	2318      	movs	r3, #24
 8007ca6:	75fb      	strb	r3, [r7, #23]
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 8007ca8:	e00b      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
 8007caa:	4b08      	ldr	r3, [pc, #32]	@ (8007ccc <LoRaMacMibGetRequestConfirm+0x3a8>)
 8007cac:	f8d3 2760 	ldr.w	r2, [r3, #1888]	@ 0x760
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	605a      	str	r2, [r3, #4]
            break;
 8007cb4:	e005      	b.n	8007cc2 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 ff56 	bl	8008b68 <LoRaMacClassBMibGetRequestConfirm>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	75fb      	strb	r3, [r7, #23]
            break;
 8007cc0:	bf00      	nop
        }
    }
    return status;
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	371c      	adds	r7, #28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd90      	pop	{r4, r7, pc}
 8007ccc:	20000a0c 	.word	0x20000a0c

08007cd0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e3a3      	b.n	800842e <LoRaMacMibSetRequestConfirm+0x75e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8007ce6:	4bbb      	ldr	r3, [pc, #748]	@ (8007fd4 <LoRaMacMibSetRequestConfirm+0x304>)
 8007ce8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e39a      	b.n	800842e <LoRaMacMibSetRequestConfirm+0x75e>
    }

    switch( mibSet->Type )
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b3f      	cmp	r3, #63	@ 0x3f
 8007cfe:	f200 8374 	bhi.w	80083ea <LoRaMacMibSetRequestConfirm+0x71a>
 8007d02:	a201      	add	r2, pc, #4	@ (adr r2, 8007d08 <LoRaMacMibSetRequestConfirm+0x38>)
 8007d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d08:	08007e09 	.word	0x08007e09
 8007d0c:	08007e19 	.word	0x08007e19
 8007d10:	08007e33 	.word	0x08007e33
 8007d14:	08007e4b 	.word	0x08007e4b
 8007d18:	08007e63 	.word	0x08007e63
 8007d1c:	08007e6f 	.word	0x08007e6f
 8007d20:	08007e7b 	.word	0x08007e7b
 8007d24:	08007ea5 	.word	0x08007ea5
 8007d28:	08007ecb 	.word	0x08007ecb
 8007d2c:	08007ef1 	.word	0x08007ef1
 8007d30:	08007f17 	.word	0x08007f17
 8007d34:	08007f3d 	.word	0x08007f3d
 8007d38:	08007f63 	.word	0x08007f63
 8007d3c:	08007f89 	.word	0x08007f89
 8007d40:	08007faf 	.word	0x08007faf
 8007d44:	08007fdd 	.word	0x08007fdd
 8007d48:	08007ffd 	.word	0x08007ffd
 8007d4c:	080083eb 	.word	0x080083eb
 8007d50:	08008009 	.word	0x08008009
 8007d54:	08008079 	.word	0x08008079
 8007d58:	080080b9 	.word	0x080080b9
 8007d5c:	0800811b 	.word	0x0800811b
 8007d60:	0800818b 	.word	0x0800818b
 8007d64:	0800815b 	.word	0x0800815b
 8007d68:	080081bb 	.word	0x080081bb
 8007d6c:	080081dd 	.word	0x080081dd
 8007d70:	080081e7 	.word	0x080081e7
 8007d74:	080081f1 	.word	0x080081f1
 8007d78:	080081fb 	.word	0x080081fb
 8007d7c:	08008205 	.word	0x08008205
 8007d80:	0800820f 	.word	0x0800820f
 8007d84:	08008241 	.word	0x08008241
 8007d88:	080082b5 	.word	0x080082b5
 8007d8c:	0800827b 	.word	0x0800827b
 8007d90:	080082e7 	.word	0x080082e7
 8007d94:	080082fd 	.word	0x080082fd
 8007d98:	08008315 	.word	0x08008315
 8007d9c:	08008321 	.word	0x08008321
 8007da0:	0800832d 	.word	0x0800832d
 8007da4:	080083eb 	.word	0x080083eb
 8007da8:	08008337 	.word	0x08008337
 8007dac:	080083eb 	.word	0x080083eb
 8007db0:	080083eb 	.word	0x080083eb
 8007db4:	080083eb 	.word	0x080083eb
 8007db8:	080083eb 	.word	0x080083eb
 8007dbc:	080083eb 	.word	0x080083eb
 8007dc0:	080083eb 	.word	0x080083eb
 8007dc4:	080083eb 	.word	0x080083eb
 8007dc8:	080083eb 	.word	0x080083eb
 8007dcc:	080083eb 	.word	0x080083eb
 8007dd0:	080083eb 	.word	0x080083eb
 8007dd4:	080083eb 	.word	0x080083eb
 8007dd8:	080083eb 	.word	0x080083eb
 8007ddc:	080083eb 	.word	0x080083eb
 8007de0:	080083eb 	.word	0x080083eb
 8007de4:	080083eb 	.word	0x080083eb
 8007de8:	080083eb 	.word	0x080083eb
 8007dec:	08008361 	.word	0x08008361
 8007df0:	0800836d 	.word	0x0800836d
 8007df4:	08008379 	.word	0x08008379
 8007df8:	08008385 	.word	0x08008385
 8007dfc:	08008391 	.word	0x08008391
 8007e00:	0800839d 	.word	0x0800839d
 8007e04:	080083c5 	.word	0x080083c5
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	791b      	ldrb	r3, [r3, #4]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7fe fcf3 	bl	80067f8 <SwitchClass>
 8007e12:	4603      	mov	r3, r0
 8007e14:	75fb      	strb	r3, [r7, #23]
            break;
 8007e16:	e309      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	791b      	ldrb	r3, [r3, #4]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d005      	beq.n	8007e2c <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	791a      	ldrb	r2, [r3, #4]
 8007e24:	4b6c      	ldr	r3, [pc, #432]	@ (8007fd8 <LoRaMacMibSetRequestConfirm+0x308>)
 8007e26:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8007e2a:	e2ff      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	75fb      	strb	r3, [r7, #23]
            break;
 8007e30:	e2fc      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f006 fc4a 	bl	800e6d0 <SecureElementSetDevEui>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 82d9 	beq.w	80083f6 <LoRaMacMibSetRequestConfirm+0x726>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007e44:	2303      	movs	r3, #3
 8007e46:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8007e48:	e2d5      	b.n	80083f6 <LoRaMacMibSetRequestConfirm+0x726>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f006 fc6e 	bl	800e730 <SecureElementSetJoinEui>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 82cf 	beq.w	80083fa <LoRaMacMibSetRequestConfirm+0x72a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8007e60:	e2cb      	b.n	80083fa <LoRaMacMibSetRequestConfirm+0x72a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	791a      	ldrb	r2, [r3, #4]
 8007e66:	4b5c      	ldr	r3, [pc, #368]	@ (8007fd8 <LoRaMacMibSetRequestConfirm+0x308>)
 8007e68:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 8007e6c:	e2de      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	4a59      	ldr	r2, [pc, #356]	@ (8007fd8 <LoRaMacMibSetRequestConfirm+0x308>)
 8007e74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 8007e78:	e2d8      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8007e7a:	4b57      	ldr	r3, [pc, #348]	@ (8007fd8 <LoRaMacMibSetRequestConfirm+0x308>)
 8007e7c:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	4619      	mov	r1, r3
 8007e86:	4610      	mov	r0, r2
 8007e88:	f006 fc82 	bl	800e790 <SecureElementSetDevAddr>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d002      	beq.n	8007e98 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007e92:	2303      	movs	r3, #3
 8007e94:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8007e96:	e2c9      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	4a4e      	ldr	r2, [pc, #312]	@ (8007fd8 <LoRaMacMibSetRequestConfirm+0x308>)
 8007e9e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 8007ea2:	e2c3      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00b      	beq.n	8007ec4 <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	f001 fa94 	bl	80093e0 <LoRaMacCryptoSetKey>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 829f 	beq.w	80083fe <LoRaMacMibSetRequestConfirm+0x72e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8007ec0:	2311      	movs	r3, #17
 8007ec2:	e2b4      	b.n	800842e <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8007ec8:	e299      	b.n	80083fe <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00b      	beq.n	8007eea <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	2001      	movs	r0, #1
 8007eda:	f001 fa81 	bl	80093e0 <LoRaMacCryptoSetKey>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 828e 	beq.w	8008402 <LoRaMacMibSetRequestConfirm+0x732>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8007ee6:	2311      	movs	r3, #17
 8007ee8:	e2a1      	b.n	800842e <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007eea:	2303      	movs	r3, #3
 8007eec:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8007eee:	e288      	b.n	8008402 <LoRaMacMibSetRequestConfirm+0x732>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00b      	beq.n	8007f10 <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	4619      	mov	r1, r3
 8007efe:	2008      	movs	r0, #8
 8007f00:	f001 fa6e 	bl	80093e0 <LoRaMacCryptoSetKey>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 827d 	beq.w	8008406 <LoRaMacMibSetRequestConfirm+0x736>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8007f0c:	2311      	movs	r3, #17
 8007f0e:	e28e      	b.n	800842e <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007f10:	2303      	movs	r3, #3
 8007f12:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8007f14:	e277      	b.n	8008406 <LoRaMacMibSetRequestConfirm+0x736>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	4619      	mov	r1, r3
 8007f24:	2009      	movs	r0, #9
 8007f26:	f001 fa5b 	bl	80093e0 <LoRaMacCryptoSetKey>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 826c 	beq.w	800840a <LoRaMacMibSetRequestConfirm+0x73a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8007f32:	2311      	movs	r3, #17
 8007f34:	e27b      	b.n	800842e <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007f36:	2303      	movs	r3, #3
 8007f38:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8007f3a:	e266      	b.n	800840a <LoRaMacMibSetRequestConfirm+0x73a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	200c      	movs	r0, #12
 8007f4c:	f001 fa48 	bl	80093e0 <LoRaMacCryptoSetKey>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 825b 	beq.w	800840e <LoRaMacMibSetRequestConfirm+0x73e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8007f58:	2311      	movs	r3, #17
 8007f5a:	e268      	b.n	800842e <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8007f60:	e255      	b.n	800840e <LoRaMacMibSetRequestConfirm+0x73e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d00b      	beq.n	8007f82 <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	200d      	movs	r0, #13
 8007f72:	f001 fa35 	bl	80093e0 <LoRaMacCryptoSetKey>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 824a 	beq.w	8008412 <LoRaMacMibSetRequestConfirm+0x742>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8007f7e:	2311      	movs	r3, #17
 8007f80:	e255      	b.n	800842e <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007f82:	2303      	movs	r3, #3
 8007f84:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8007f86:	e244      	b.n	8008412 <LoRaMacMibSetRequestConfirm+0x742>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00b      	beq.n	8007fa8 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	4619      	mov	r1, r3
 8007f96:	200e      	movs	r0, #14
 8007f98:	f001 fa22 	bl	80093e0 <LoRaMacCryptoSetKey>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 8239 	beq.w	8008416 <LoRaMacMibSetRequestConfirm+0x746>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8007fa4:	2311      	movs	r3, #17
 8007fa6:	e242      	b.n	800842e <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8007fac:	e233      	b.n	8008416 <LoRaMacMibSetRequestConfirm+0x746>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00b      	beq.n	8007fce <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	200f      	movs	r0, #15
 8007fbe:	f001 fa0f 	bl	80093e0 <LoRaMacCryptoSetKey>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 8228 	beq.w	800841a <LoRaMacMibSetRequestConfirm+0x74a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8007fca:	2311      	movs	r3, #17
 8007fcc:	e22f      	b.n	800842e <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8007fd2:	e222      	b.n	800841a <LoRaMacMibSetRequestConfirm+0x74a>
 8007fd4:	20000504 	.word	0x20000504
 8007fd8:	20000a0c 	.word	0x20000a0c
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	791a      	ldrb	r2, [r3, #4]
 8007fe0:	4bb2      	ldr	r3, [pc, #712]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8007fe2:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8007fe6:	4bb2      	ldr	r3, [pc, #712]	@ (80082b0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8007fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fea:	4ab0      	ldr	r2, [pc, #704]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8007fec:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4798      	blx	r3
            Radio.Sleep( );
 8007ff4:	4bae      	ldr	r3, [pc, #696]	@ (80082b0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8007ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff8:	4798      	blx	r3
            break;
 8007ffa:	e217      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	791a      	ldrb	r2, [r3, #4]
 8008000:	4baa      	ldr	r3, [pc, #680]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008002:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 8008006:	e211      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	7a1b      	ldrb	r3, [r3, #8]
 800800c:	b25b      	sxtb	r3, r3
 800800e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008010:	4ba6      	ldr	r3, [pc, #664]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008012:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008016:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8008018:	4ba4      	ldr	r3, [pc, #656]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 800801a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800801e:	f107 0108 	add.w	r1, r7, #8
 8008022:	2207      	movs	r2, #7
 8008024:	4618      	mov	r0, r3
 8008026:	f001 fcd7 	bl	80099d8 <RegionVerify>
 800802a:	4603      	mov	r3, r0
 800802c:	f083 0301 	eor.w	r3, r3, #1
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008036:	2303      	movs	r3, #3
 8008038:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 800803a:	e1f7      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8008042:	4b9a      	ldr	r3, [pc, #616]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008044:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8008048:	f107 0108 	add.w	r1, r7, #8
 800804c:	2200      	movs	r2, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f001 fcc2 	bl	80099d8 <RegionVerify>
 8008054:	4603      	mov	r3, r0
 8008056:	f083 0301 	eor.w	r3, r3, #1
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008060:	2303      	movs	r3, #3
 8008062:	75fb      	strb	r3, [r7, #23]
            break;
 8008064:	e1e2      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8008066:	4b91      	ldr	r3, [pc, #580]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	336c      	adds	r3, #108	@ 0x6c
 800806c:	3204      	adds	r2, #4
 800806e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008072:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8008076:	e1d9      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	7a1b      	ldrb	r3, [r3, #8]
 800807c:	b25b      	sxtb	r3, r3
 800807e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008080:	4b8a      	ldr	r3, [pc, #552]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008082:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008086:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8008088:	4b88      	ldr	r3, [pc, #544]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 800808a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800808e:	f107 0108 	add.w	r1, r7, #8
 8008092:	2207      	movs	r2, #7
 8008094:	4618      	mov	r0, r3
 8008096:	f001 fc9f 	bl	80099d8 <RegionVerify>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d008      	beq.n	80080b2 <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80080a0:	4b82      	ldr	r3, [pc, #520]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	33b4      	adds	r3, #180	@ 0xb4
 80080a6:	3204      	adds	r2, #4
 80080a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80080ac:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80080b0:	e1bc      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80080b2:	2303      	movs	r3, #3
 80080b4:	75fb      	strb	r3, [r7, #23]
            break;
 80080b6:	e1b9      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	7a1b      	ldrb	r3, [r3, #8]
 80080bc:	b25b      	sxtb	r3, r3
 80080be:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80080c0:	4b7a      	ldr	r3, [pc, #488]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 80080c2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80080c6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80080c8:	4b78      	ldr	r3, [pc, #480]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 80080ca:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80080ce:	f107 0108 	add.w	r1, r7, #8
 80080d2:	2207      	movs	r2, #7
 80080d4:	4618      	mov	r0, r3
 80080d6:	f001 fc7f 	bl	80099d8 <RegionVerify>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d019      	beq.n	8008114 <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80080e0:	4b72      	ldr	r3, [pc, #456]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	3374      	adds	r3, #116	@ 0x74
 80080e6:	3204      	adds	r2, #4
 80080e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80080ec:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80080f0:	4b6e      	ldr	r3, [pc, #440]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 80080f2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	f040 8191 	bne.w	800841e <LoRaMacMibSetRequestConfirm+0x74e>
 80080fc:	4b6b      	ldr	r3, [pc, #428]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 80080fe:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 818b 	beq.w	800841e <LoRaMacMibSetRequestConfirm+0x74e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8008108:	4b69      	ldr	r3, [pc, #420]	@ (80082b0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 800810a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810c:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800810e:	f7ff f911 	bl	8007334 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008112:	e184      	b.n	800841e <LoRaMacMibSetRequestConfirm+0x74e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008114:	2303      	movs	r3, #3
 8008116:	75fb      	strb	r3, [r7, #23]
            break;
 8008118:	e181      	b.n	800841e <LoRaMacMibSetRequestConfirm+0x74e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	7a1b      	ldrb	r3, [r3, #8]
 800811e:	b25b      	sxtb	r3, r3
 8008120:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008122:	4b62      	ldr	r3, [pc, #392]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008124:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008128:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800812a:	4b60      	ldr	r3, [pc, #384]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 800812c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8008130:	f107 0108 	add.w	r1, r7, #8
 8008134:	2207      	movs	r2, #7
 8008136:	4618      	mov	r0, r3
 8008138:	f001 fc4e 	bl	80099d8 <RegionVerify>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d008      	beq.n	8008154 <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8008142:	4b5a      	ldr	r3, [pc, #360]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	33bc      	adds	r3, #188	@ 0xbc
 8008148:	3204      	adds	r2, #4
 800814a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800814e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008152:	e16b      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008154:	2303      	movs	r3, #3
 8008156:	75fb      	strb	r3, [r7, #23]
            break;
 8008158:	e168      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8008160:	2301      	movs	r3, #1
 8008162:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8008164:	4b51      	ldr	r3, [pc, #324]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008166:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800816a:	f107 020c 	add.w	r2, r7, #12
 800816e:	4611      	mov	r1, r2
 8008170:	4618      	mov	r0, r3
 8008172:	f001 fc5d 	bl	8009a30 <RegionChanMaskSet>
 8008176:	4603      	mov	r3, r0
 8008178:	f083 0301 	eor.w	r3, r3, #1
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 814f 	beq.w	8008422 <LoRaMacMibSetRequestConfirm+0x752>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008184:	2303      	movs	r3, #3
 8008186:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008188:	e14b      	b.n	8008422 <LoRaMacMibSetRequestConfirm+0x752>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8008190:	2300      	movs	r3, #0
 8008192:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8008194:	4b45      	ldr	r3, [pc, #276]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008196:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800819a:	f107 020c 	add.w	r2, r7, #12
 800819e:	4611      	mov	r1, r2
 80081a0:	4618      	mov	r0, r3
 80081a2:	f001 fc45 	bl	8009a30 <RegionChanMaskSet>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f083 0301 	eor.w	r3, r3, #1
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 8139 	beq.w	8008426 <LoRaMacMibSetRequestConfirm+0x756>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80081b4:	2303      	movs	r3, #3
 80081b6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80081b8:	e135      	b.n	8008426 <LoRaMacMibSetRequestConfirm+0x756>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	791b      	ldrb	r3, [r3, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d009      	beq.n	80081d6 <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80081c6:	2b0f      	cmp	r3, #15
 80081c8:	d805      	bhi.n	80081d6 <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	791a      	ldrb	r2, [r3, #4]
 80081ce:	4b37      	ldr	r3, [pc, #220]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 80081d0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80081d4:	e12a      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80081d6:	2303      	movs	r3, #3
 80081d8:	75fb      	strb	r3, [r7, #23]
            break;
 80081da:	e127      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	4a32      	ldr	r2, [pc, #200]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 80081e2:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 80081e4:	e122      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	4a30      	ldr	r2, [pc, #192]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 80081ec:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 80081ee:	e11d      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	4a2d      	ldr	r2, [pc, #180]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 80081f6:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 80081f8:	e118      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	4a2b      	ldr	r2, [pc, #172]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008200:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 8008202:	e113      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	4a28      	ldr	r2, [pc, #160]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 800820a:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 800820c:	e10e      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008214:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8008216:	4b25      	ldr	r3, [pc, #148]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008218:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800821c:	f107 0108 	add.w	r1, r7, #8
 8008220:	2206      	movs	r2, #6
 8008222:	4618      	mov	r0, r3
 8008224:	f001 fbd8 	bl	80099d8 <RegionVerify>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d005      	beq.n	800823a <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800822e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8008232:	4b1e      	ldr	r3, [pc, #120]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008234:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008238:	e0f8      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800823a:	2303      	movs	r3, #3
 800823c:	75fb      	strb	r3, [r7, #23]
            break;
 800823e:	e0f5      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008246:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008248:	4b18      	ldr	r3, [pc, #96]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 800824a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800824e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8008250:	4b16      	ldr	r3, [pc, #88]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008252:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8008256:	f107 0108 	add.w	r1, r7, #8
 800825a:	2205      	movs	r2, #5
 800825c:	4618      	mov	r0, r3
 800825e:	f001 fbbb 	bl	80099d8 <RegionVerify>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d005      	beq.n	8008274 <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8008268:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800826c:	4b0f      	ldr	r3, [pc, #60]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 800826e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008272:	e0db      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008274:	2303      	movs	r3, #3
 8008276:	75fb      	strb	r3, [r7, #23]
            break;
 8008278:	e0d8      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008280:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8008282:	4b0a      	ldr	r3, [pc, #40]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 8008284:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8008288:	f107 0108 	add.w	r1, r7, #8
 800828c:	220a      	movs	r2, #10
 800828e:	4618      	mov	r0, r3
 8008290:	f001 fba2 	bl	80099d8 <RegionVerify>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d005      	beq.n	80082a6 <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800829a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800829e:	4b03      	ldr	r3, [pc, #12]	@ (80082ac <LoRaMacMibSetRequestConfirm+0x5dc>)
 80082a0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80082a4:	e0c2      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80082a6:	2303      	movs	r3, #3
 80082a8:	75fb      	strb	r3, [r7, #23]
            break;
 80082aa:	e0bf      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
 80082ac:	20000a0c 	.word	0x20000a0c
 80082b0:	08012a80 	.word	0x08012a80
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80082ba:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80082bc:	4b5e      	ldr	r3, [pc, #376]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 80082be:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80082c2:	f107 0108 	add.w	r1, r7, #8
 80082c6:	2209      	movs	r2, #9
 80082c8:	4618      	mov	r0, r3
 80082ca:	f001 fb85 	bl	80099d8 <RegionVerify>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d005      	beq.n	80082e0 <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80082d4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80082d8:	4b57      	ldr	r3, [pc, #348]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 80082da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80082de:	e0a5      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80082e0:	2303      	movs	r3, #3
 80082e2:	75fb      	strb	r3, [r7, #23]
            break;
 80082e4:	e0a2      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
#else
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	4a53      	ldr	r2, [pc, #332]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 80082ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80082f0:	4b51      	ldr	r3, [pc, #324]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 80082f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082f6:	4a50      	ldr	r2, [pc, #320]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 80082f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
#endif
            break;
 80082fa:	e097      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	791a      	ldrb	r2, [r3, #4]
 8008300:	4b4d      	ldr	r3, [pc, #308]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 8008302:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 8008306:	4b4c      	ldr	r3, [pc, #304]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 8008308:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 800830c:	4b4a      	ldr	r3, [pc, #296]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 800830e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 8008312:	e08b      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	4a47      	ldr	r2, [pc, #284]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 800831a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 800831e:	e085      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	4a44      	ldr	r2, [pc, #272]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 8008326:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 800832a:	e07f      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800832c:	f7ff fa5e 	bl	80077ec <RestoreNvmData>
 8008330:	4603      	mov	r3, r0
 8008332:	75fb      	strb	r3, [r7, #23]
            break;
 8008334:	e07a      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	799b      	ldrb	r3, [r3, #6]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d80d      	bhi.n	800835a <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800833e:	4a3e      	ldr	r2, [pc, #248]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6858      	ldr	r0, [r3, #4]
 800834c:	f001 f820 	bl	8009390 <LoRaMacCryptoSetLrWanVersion>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d069      	beq.n	800842a <LoRaMacMibSetRequestConfirm+0x75a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8008356:	2311      	movs	r3, #17
 8008358:	e069      	b.n	800842e <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800835a:	2303      	movs	r3, #3
 800835c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800835e:	e064      	b.n	800842a <LoRaMacMibSetRequestConfirm+0x75a>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	4a34      	ldr	r2, [pc, #208]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 8008366:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 800836a:	e05f      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	889a      	ldrh	r2, [r3, #4]
 8008370:	4b31      	ldr	r3, [pc, #196]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 8008372:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 8008376:	e059      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	889a      	ldrh	r2, [r3, #4]
 800837c:	4b2e      	ldr	r3, [pc, #184]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 800837e:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 8008382:	e053      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	889a      	ldrh	r2, [r3, #4]
 8008388:	4b2b      	ldr	r3, [pc, #172]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 800838a:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 800838e:	e04d      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	889a      	ldrh	r2, [r3, #4]
 8008394:	4b28      	ldr	r3, [pc, #160]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 8008396:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 800839a:	e047      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RSSI_FREE_THRESHOLD:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 800839c:	4b26      	ldr	r3, [pc, #152]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 800839e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d007      	beq.n	80083b6 <LoRaMacMibSetRequestConfirm+0x6e6>
 80083a6:	4b24      	ldr	r3, [pc, #144]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 80083a8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80083ac:	2b06      	cmp	r3, #6
 80083ae:	d002      	beq.n	80083b6 <LoRaMacMibSetRequestConfirm+0x6e6>
            {
                status = LORAMAC_STATUS_ERROR;
 80083b0:	2318      	movs	r3, #24
 80083b2:	75fb      	strb	r3, [r7, #23]
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 80083b4:	e03a      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80083bc:	4b1e      	ldr	r3, [pc, #120]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 80083be:	f8a3 275c 	strh.w	r2, [r3, #1884]	@ 0x75c
            break;
 80083c2:	e033      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CARRIER_SENSE_TIME:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 80083c4:	4b1c      	ldr	r3, [pc, #112]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 80083c6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d007      	beq.n	80083de <LoRaMacMibSetRequestConfirm+0x70e>
 80083ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 80083d0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80083d4:	2b06      	cmp	r3, #6
 80083d6:	d002      	beq.n	80083de <LoRaMacMibSetRequestConfirm+0x70e>
            {
                status = LORAMAC_STATUS_ERROR;
 80083d8:	2318      	movs	r3, #24
 80083da:	75fb      	strb	r3, [r7, #23]
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 80083dc:	e026      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	4a15      	ldr	r2, [pc, #84]	@ (8008438 <LoRaMacMibSetRequestConfirm+0x768>)
 80083e4:	f8c2 3760 	str.w	r3, [r2, #1888]	@ 0x760
            break;
 80083e8:	e020      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fbc6 	bl	8008b7c <LoRaMacMibClassBSetRequestConfirm>
 80083f0:	4603      	mov	r3, r0
 80083f2:	75fb      	strb	r3, [r7, #23]
            break;
 80083f4:	e01a      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 80083f6:	bf00      	nop
 80083f8:	e018      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 80083fa:	bf00      	nop
 80083fc:	e016      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 80083fe:	bf00      	nop
 8008400:	e014      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8008402:	bf00      	nop
 8008404:	e012      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8008406:	bf00      	nop
 8008408:	e010      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 800840a:	bf00      	nop
 800840c:	e00e      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 800840e:	bf00      	nop
 8008410:	e00c      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8008412:	bf00      	nop
 8008414:	e00a      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8008416:	bf00      	nop
 8008418:	e008      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 800841a:	bf00      	nop
 800841c:	e006      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 800841e:	bf00      	nop
 8008420:	e004      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8008422:	bf00      	nop
 8008424:	e002      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8008426:	bf00      	nop
 8008428:	e000      	b.n	800842c <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 800842a:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 800842c:	7dfb      	ldrb	r3, [r7, #23]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000a0c 	.word	0x20000a0c

0800843c <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008444:	2302      	movs	r3, #2
 8008446:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    bool isAbpJoinPending = false;
#endif /* LORAMAC_VERSION */
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8008448:	2300      	movs	r3, #0
 800844a:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008452:	2303      	movs	r3, #3
 8008454:	e13a      	b.n	80086cc <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8008456:	f7fe f9a3 	bl	80067a0 <LoRaMacIsBusy>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8008460:	2301      	movs	r3, #1
 8008462:	e133      	b.n	80086cc <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8008464:	f000 fe42 	bl	80090ec <LoRaMacConfirmQueueIsFull>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 800846e:	2301      	movs	r3, #1
 8008470:	e12c      	b.n	80086cc <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8008472:	f000 fe2f 	bl	80090d4 <LoRaMacConfirmQueueGetCnt>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800847c:	2214      	movs	r2, #20
 800847e:	2100      	movs	r1, #0
 8008480:	4894      	ldr	r0, [pc, #592]	@ (80086d4 <LoRaMacMlmeRequest+0x298>)
 8008482:	f006 fa35 	bl	800e8f0 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008486:	4b94      	ldr	r3, [pc, #592]	@ (80086d8 <LoRaMacMlmeRequest+0x29c>)
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800848e:	4a92      	ldr	r2, [pc, #584]	@ (80086d8 <LoRaMacMlmeRequest+0x29c>)
 8008490:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8008494:	f043 0304 	orr.w	r3, r3, #4
 8008498:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    queueElement.Request = mlmeRequest->Type;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 80084a6:	2300      	movs	r3, #0
 80084a8:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	2b0d      	cmp	r3, #13
 80084b2:	f200 80e1 	bhi.w	8008678 <LoRaMacMlmeRequest+0x23c>
 80084b6:	a201      	add	r2, pc, #4	@ (adr r2, 80084bc <LoRaMacMlmeRequest+0x80>)
 80084b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084bc:	080084f5 	.word	0x080084f5
 80084c0:	08008679 	.word	0x08008679
 80084c4:	08008679 	.word	0x08008679
 80084c8:	08008679 	.word	0x08008679
 80084cc:	0800856d 	.word	0x0800856d
 80084d0:	0800858b 	.word	0x0800858b
 80084d4:	0800859b 	.word	0x0800859b
 80084d8:	08008679 	.word	0x08008679
 80084dc:	08008679 	.word	0x08008679
 80084e0:	080085b7 	.word	0x080085b7
 80084e4:	08008679 	.word	0x08008679
 80084e8:	0800864d 	.word	0x0800864d
 80084ec:	080085ed 	.word	0x080085ed
 80084f0:	0800862f 	.word	0x0800862f
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80084f4:	4b78      	ldr	r3, [pc, #480]	@ (80086d8 <LoRaMacMlmeRequest+0x29c>)
 80084f6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80084fa:	f003 0320 	and.w	r3, r3, #32
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8008502:	2301      	movs	r3, #1
 8008504:	e0e2      	b.n	80086cc <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 8008506:	2000      	movs	r0, #0
 8008508:	f7fe fdee 	bl	80070e8 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800850c:	4b73      	ldr	r3, [pc, #460]	@ (80086dc <LoRaMacMlmeRequest+0x2a0>)
 800850e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	795b      	ldrb	r3, [r3, #5]
 8008516:	b25b      	sxtb	r3, r3
 8008518:	2200      	movs	r2, #0
 800851a:	4619      	mov	r1, r3
 800851c:	f001 fb31 	bl	8009b82 <RegionAlternateDr>
 8008520:	4603      	mov	r3, r0
 8008522:	461a      	mov	r2, r3
 8008524:	4b6d      	ldr	r3, [pc, #436]	@ (80086dc <LoRaMacMlmeRequest+0x2a0>)
 8008526:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8008530:	4b6a      	ldr	r3, [pc, #424]	@ (80086dc <LoRaMacMlmeRequest+0x2a0>)
 8008532:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8008536:	2307      	movs	r3, #7
 8008538:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 800853a:	20ff      	movs	r0, #255	@ 0xff
 800853c:	f7fe fb72 	bl	8006c24 <SendReJoinReq>
 8008540:	4603      	mov	r3, r0
 8008542:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8008544:	7dfb      	ldrb	r3, [r7, #23]
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 8098 	beq.w	800867c <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800854c:	4b63      	ldr	r3, [pc, #396]	@ (80086dc <LoRaMacMlmeRequest+0x2a0>)
 800854e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	795b      	ldrb	r3, [r3, #5]
 8008556:	b25b      	sxtb	r3, r3
 8008558:	2201      	movs	r2, #1
 800855a:	4619      	mov	r1, r3
 800855c:	f001 fb11 	bl	8009b82 <RegionAlternateDr>
 8008560:	4603      	mov	r3, r0
 8008562:	461a      	mov	r2, r3
 8008564:	4b5d      	ldr	r3, [pc, #372]	@ (80086dc <LoRaMacMlmeRequest+0x2a0>)
 8008566:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                isAbpJoinPending = true;
#endif
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 800856a:	e087      	b.n	800867c <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8008570:	f107 030c 	add.w	r3, r7, #12
 8008574:	2200      	movs	r2, #0
 8008576:	4619      	mov	r1, r3
 8008578:	2002      	movs	r0, #2
 800857a:	f000 fc15 	bl	8008da8 <LoRaMacCommandsAddCmd>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d07d      	beq.n	8008680 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008584:	2313      	movs	r3, #19
 8008586:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8008588:	e07a      	b.n	8008680 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	889b      	ldrh	r3, [r3, #4]
 800858e:	4618      	mov	r0, r3
 8008590:	f7ff f8d6 	bl	8007740 <SetTxContinuousWave>
 8008594:	4603      	mov	r3, r0
 8008596:	75fb      	strb	r3, [r7, #23]
            break;
 8008598:	e079      	b.n	800868e <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	8898      	ldrh	r0, [r3, #4]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6899      	ldr	r1, [r3, #8]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	461a      	mov	r2, r3
 80085ac:	f7ff f8fe 	bl	80077ac <SetTxContinuousWave1>
 80085b0:	4603      	mov	r3, r0
 80085b2:	75fb      	strb	r3, [r7, #23]
            break;
 80085b4:	e06b      	b.n	800868e <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 80085ba:	f107 0308 	add.w	r3, r7, #8
 80085be:	4619      	mov	r1, r3
 80085c0:	200d      	movs	r0, #13
 80085c2:	f000 fc71 	bl	8008ea8 <LoRaMacCommandsGetCmd>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d102      	bne.n	80085d2 <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 80085d0:	e058      	b.n	8008684 <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80085d2:	f107 030c 	add.w	r3, r7, #12
 80085d6:	2200      	movs	r2, #0
 80085d8:	4619      	mov	r1, r3
 80085da:	200d      	movs	r0, #13
 80085dc:	f000 fbe4 	bl	8008da8 <LoRaMacCommandsAddCmd>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d04e      	beq.n	8008684 <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80085e6:	2313      	movs	r3, #19
 80085e8:	75fb      	strb	r3, [r7, #23]
            break;
 80085ea:	e04b      	b.n	8008684 <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80085ec:	4b3b      	ldr	r3, [pc, #236]	@ (80086dc <LoRaMacMlmeRequest+0x2a0>)
 80085ee:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d148      	bne.n	8008688 <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	791b      	ldrb	r3, [r3, #4]
 80085fa:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	791b      	ldrb	r3, [r3, #4]
 8008600:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8008604:	b2db      	uxtb	r3, r3
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fa93 	bl	8008b32 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800860c:	7dbb      	ldrb	r3, [r7, #22]
 800860e:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8008614:	f107 030c 	add.w	r3, r7, #12
 8008618:	2201      	movs	r2, #1
 800861a:	4619      	mov	r1, r3
 800861c:	2010      	movs	r0, #16
 800861e:	f000 fbc3 	bl	8008da8 <LoRaMacCommandsAddCmd>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d02f      	beq.n	8008688 <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008628:	2313      	movs	r3, #19
 800862a:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 800862c:	e02c      	b.n	8008688 <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8008632:	f107 030c 	add.w	r3, r7, #12
 8008636:	2200      	movs	r2, #0
 8008638:	4619      	mov	r1, r3
 800863a:	2012      	movs	r0, #18
 800863c:	f000 fbb4 	bl	8008da8 <LoRaMacCommandsAddCmd>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d022      	beq.n	800868c <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008646:	2313      	movs	r3, #19
 8008648:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800864a:	e01f      	b.n	800868c <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800864c:	2301      	movs	r3, #1
 800864e:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8008650:	f000 fa43 	bl	8008ada <LoRaMacClassBIsAcquisitionInProgress>
 8008654:	4603      	mov	r3, r0
 8008656:	f083 0301 	eor.w	r3, r3, #1
 800865a:	b2db      	uxtb	r3, r3
 800865c:	2b00      	cmp	r3, #0
 800865e:	d008      	beq.n	8008672 <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8008660:	2000      	movs	r0, #0
 8008662:	f000 fa30 	bl	8008ac6 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8008666:	2000      	movs	r0, #0
 8008668:	f000 fa3e 	bl	8008ae8 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8008670:	e00d      	b.n	800868e <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 8008672:	2301      	movs	r3, #1
 8008674:	75fb      	strb	r3, [r7, #23]
            break;
 8008676:	e00a      	b.n	800868e <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 8008678:	bf00      	nop
 800867a:	e008      	b.n	800868e <LoRaMacMlmeRequest+0x252>
            break;
 800867c:	bf00      	nop
 800867e:	e006      	b.n	800868e <LoRaMacMlmeRequest+0x252>
            break;
 8008680:	bf00      	nop
 8008682:	e004      	b.n	800868e <LoRaMacMlmeRequest+0x252>
            break;
 8008684:	bf00      	nop
 8008686:	e002      	b.n	800868e <LoRaMacMlmeRequest+0x252>
            break;
 8008688:	bf00      	nop
 800868a:	e000      	b.n	800868e <LoRaMacMlmeRequest+0x252>
            break;
 800868c:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800868e:	4b12      	ldr	r3, [pc, #72]	@ (80086d8 <LoRaMacMlmeRequest+0x29c>)
 8008690:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8008698:	7dfb      	ldrb	r3, [r7, #23]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d010      	beq.n	80086c0 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800869e:	f000 fd19 	bl	80090d4 <LoRaMacConfirmQueueGetCnt>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d110      	bne.n	80086ca <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 80086a8:	4b0b      	ldr	r3, [pc, #44]	@ (80086d8 <LoRaMacMlmeRequest+0x29c>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80086b0:	4a09      	ldr	r2, [pc, #36]	@ (80086d8 <LoRaMacMlmeRequest+0x29c>)
 80086b2:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 80086b6:	f36f 0382 	bfc	r3, #2, #1
 80086ba:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 80086be:	e004      	b.n	80086ca <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80086c0:	f107 0310 	add.w	r3, r7, #16
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 fccb 	bl	8009060 <LoRaMacConfirmQueueAdd>
        {
            AbpJoinPendingStart( );
        }
#endif /* LORAMAC_VERSION */
    }
    return status;
 80086ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	2000094c 	.word	0x2000094c
 80086d8:	20000504 	.word	0x20000504
 80086dc:	20000a0c 	.word	0x20000a0c

080086e0 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b08c      	sub	sp, #48	@ 0x30
 80086e4:	af02      	add	r7, sp, #8
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80086ec:	2302      	movs	r3, #2
 80086ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    void* fBuffer = NULL;
 80086f8:	2300      	movs	r3, #0
 80086fa:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8008700:	2300      	movs	r3, #0
 8008702:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800870a:	2303      	movs	r3, #3
 800870c:	e0d4      	b.n	80088b8 <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 800870e:	f7fe f847 	bl	80067a0 <LoRaMacIsBusy>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8008718:	2301      	movs	r3, #1
 800871a:	e0cd      	b.n	80088b8 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 800871c:	2300      	movs	r3, #0
 800871e:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8008720:	2214      	movs	r2, #20
 8008722:	2100      	movs	r1, #0
 8008724:	4866      	ldr	r0, [pc, #408]	@ (80088c0 <LoRaMacMcpsRequest+0x1e0>)
 8008726:	f006 f8e3 	bl	800e8f0 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800872a:	4b66      	ldr	r3, [pc, #408]	@ (80088c4 <LoRaMacMcpsRequest+0x1e4>)
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8008732:	4b64      	ldr	r3, [pc, #400]	@ (80088c4 <LoRaMacMcpsRequest+0x1e4>)
 8008734:	2201      	movs	r2, #1
 8008736:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e

    switch( mcpsRequest->Type )
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	2b03      	cmp	r3, #3
 8008740:	d03d      	beq.n	80087be <LoRaMacMcpsRequest+0xde>
 8008742:	2b03      	cmp	r3, #3
 8008744:	dc4f      	bgt.n	80087e6 <LoRaMacMcpsRequest+0x106>
 8008746:	2b00      	cmp	r3, #0
 8008748:	d002      	beq.n	8008750 <LoRaMacMcpsRequest+0x70>
 800874a:	2b01      	cmp	r3, #1
 800874c:	d019      	beq.n	8008782 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 800874e:	e04a      	b.n	80087e6 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8008750:	2301      	movs	r3, #1
 8008752:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8008754:	4b5b      	ldr	r3, [pc, #364]	@ (80088c4 <LoRaMacMcpsRequest+0x1e4>)
 8008756:	2201      	movs	r2, #1
 8008758:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800875c:	7b3b      	ldrb	r3, [r7, #12]
 800875e:	2202      	movs	r2, #2
 8008760:	f362 1347 	bfi	r3, r2, #5, #3
 8008764:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	791b      	ldrb	r3, [r3, #4]
 800876a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	899b      	ldrh	r3, [r3, #12]
 8008778:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	7b9b      	ldrb	r3, [r3, #14]
 800877e:	777b      	strb	r3, [r7, #29]
            break;
 8008780:	e032      	b.n	80087e8 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8008782:	2301      	movs	r3, #1
 8008784:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	7bdb      	ldrb	r3, [r3, #15]
 800878a:	2b08      	cmp	r3, #8
 800878c:	bf28      	it	cs
 800878e:	2308      	movcs	r3, #8
 8008790:	b2da      	uxtb	r2, r3
 8008792:	4b4c      	ldr	r3, [pc, #304]	@ (80088c4 <LoRaMacMcpsRequest+0x1e4>)
 8008794:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8008798:	7b3b      	ldrb	r3, [r7, #12]
 800879a:	2204      	movs	r2, #4
 800879c:	f362 1347 	bfi	r3, r2, #5, #3
 80087a0:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	791b      	ldrb	r3, [r3, #4]
 80087a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	899b      	ldrh	r3, [r3, #12]
 80087b4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	7b9b      	ldrb	r3, [r3, #14]
 80087ba:	777b      	strb	r3, [r7, #29]
            break;
 80087bc:	e014      	b.n	80087e8 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80087be:	2301      	movs	r3, #1
 80087c0:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80087c2:	4b40      	ldr	r3, [pc, #256]	@ (80088c4 <LoRaMacMcpsRequest+0x1e4>)
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80087ca:	7b3b      	ldrb	r3, [r7, #12]
 80087cc:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80087d0:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	891b      	ldrh	r3, [r3, #8]
 80087dc:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	7a9b      	ldrb	r3, [r3, #10]
 80087e2:	777b      	strb	r3, [r7, #29]
            break;
 80087e4:	e000      	b.n	80087e8 <LoRaMacMcpsRequest+0x108>
            break;
 80087e6:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80087e8:	2302      	movs	r3, #2
 80087ea:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80087ec:	4b36      	ldr	r3, [pc, #216]	@ (80088c8 <LoRaMacMcpsRequest+0x1e8>)
 80087ee:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80087f2:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80087f4:	4b34      	ldr	r3, [pc, #208]	@ (80088c8 <LoRaMacMcpsRequest+0x1e8>)
 80087f6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80087fa:	f107 0214 	add.w	r2, r7, #20
 80087fe:	4611      	mov	r1, r2
 8008800:	4618      	mov	r0, r3
 8008802:	f001 f89d 	bl	8009940 <RegionGetPhyParam>
 8008806:	4603      	mov	r3, r0
 8008808:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	b25b      	sxtb	r3, r3
 800880e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8008812:	4293      	cmp	r3, r2
 8008814:	bfb8      	it	lt
 8008816:	4613      	movlt	r3, r2
 8008818:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 800881a:	7f3b      	ldrb	r3, [r7, #28]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d044      	beq.n	80088aa <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8008820:	4b29      	ldr	r3, [pc, #164]	@ (80088c8 <LoRaMacMcpsRequest+0x1e8>)
 8008822:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8008826:	f083 0301 	eor.w	r3, r3, #1
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	d019      	beq.n	8008864 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8008830:	7f7b      	ldrb	r3, [r7, #29]
 8008832:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008834:	4b24      	ldr	r3, [pc, #144]	@ (80088c8 <LoRaMacMcpsRequest+0x1e8>)
 8008836:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800883a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800883c:	4b22      	ldr	r3, [pc, #136]	@ (80088c8 <LoRaMacMcpsRequest+0x1e8>)
 800883e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8008842:	f107 0108 	add.w	r1, r7, #8
 8008846:	2205      	movs	r2, #5
 8008848:	4618      	mov	r0, r3
 800884a:	f001 f8c5 	bl	80099d8 <RegionVerify>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d005      	beq.n	8008860 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8008854:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8008858:	4b1b      	ldr	r3, [pc, #108]	@ (80088c8 <LoRaMacMcpsRequest+0x1e8>)
 800885a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800885e:	e001      	b.n	8008864 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8008860:	2303      	movs	r3, #3
 8008862:	e029      	b.n	80088b8 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8008864:	8bfa      	ldrh	r2, [r7, #30]
 8008866:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800886a:	f107 000c 	add.w	r0, r7, #12
 800886e:	78fb      	ldrb	r3, [r7, #3]
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	4613      	mov	r3, r2
 8008874:	6a3a      	ldr	r2, [r7, #32]
 8008876:	f7fe f8f7 	bl	8006a68 <Send>
 800887a:	4603      	mov	r3, r0
 800887c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if( status == LORAMAC_STATUS_OK )
 8008880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10c      	bne.n	80088a2 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	781a      	ldrb	r2, [r3, #0]
 800888c:	4b0d      	ldr	r3, [pc, #52]	@ (80088c4 <LoRaMacMcpsRequest+0x1e4>)
 800888e:	f883 2434 	strb.w	r2, [r3, #1076]	@ 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8008892:	4a0c      	ldr	r2, [pc, #48]	@ (80088c4 <LoRaMacMcpsRequest+0x1e4>)
 8008894:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8008898:	f043 0301 	orr.w	r3, r3, #1
 800889c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 80088a0:	e003      	b.n	80088aa <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80088a2:	4b08      	ldr	r3, [pc, #32]	@ (80088c4 <LoRaMacMcpsRequest+0x1e4>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80088aa:	4b06      	ldr	r3, [pc, #24]	@ (80088c4 <LoRaMacMcpsRequest+0x1e4>)
 80088ac:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	611a      	str	r2, [r3, #16]

    return status;
 80088b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3728      	adds	r7, #40	@ 0x28
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	20000938 	.word	0x20000938
 80088c4:	20000504 	.word	0x20000504
 80088c8:	20000a0c 	.word	0x20000a0c

080088cc <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	4603      	mov	r3, r0
 80088d4:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80088da:	4b0d      	ldr	r3, [pc, #52]	@ (8008910 <LoRaMacTestSetDutyCycleOn+0x44>)
 80088dc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80088e0:	f107 010c 	add.w	r1, r7, #12
 80088e4:	220f      	movs	r2, #15
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 f876 	bl	80099d8 <RegionVerify>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80088f2:	4a07      	ldr	r2, [pc, #28]	@ (8008910 <LoRaMacTestSetDutyCycleOn+0x44>)
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80088fa:	4a06      	ldr	r2, [pc, #24]	@ (8008914 <LoRaMacTestSetDutyCycleOn+0x48>)
 80088fc:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8008900:	f043 0320 	orr.w	r3, r3, #32
 8008904:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 8008908:	bf00      	nop
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	20000a0c 	.word	0x20000a0c
 8008914:	20000504 	.word	0x20000504

08008918 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08c      	sub	sp, #48	@ 0x30
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8008926:	2300      	movs	r3, #0
 8008928:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	7c1b      	ldrb	r3, [r3, #16]
 8008930:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	7c5b      	ldrb	r3, [r3, #17]
 8008938:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	689a      	ldr	r2, [r3, #8]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	795b      	ldrb	r3, [r3, #5]
 8008948:	2b00      	cmp	r3, #0
 800894a:	f000 808b 	beq.w	8008a64 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 800894e:	2302      	movs	r3, #2
 8008950:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	7c9b      	ldrb	r3, [r3, #18]
 8008958:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	7cdb      	ldrb	r3, [r3, #19]
 8008960:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8008964:	4611      	mov	r1, r2
 8008966:	4618      	mov	r0, r3
 8008968:	f000 ffea 	bl	8009940 <RegionGetPhyParam>
 800896c:	4603      	mov	r3, r0
 800896e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8008970:	6a3b      	ldr	r3, [r7, #32]
 8008972:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8008976:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 800897a:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 800897e:	4293      	cmp	r3, r2
 8008980:	bfb8      	it	lt
 8008982:	4613      	movlt	r3, r2
 8008984:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        if( datarate == minTxDatarate )
 8008988:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 800898c:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8008990:	429a      	cmp	r2, r3
 8008992:	d106      	bne.n	80089a2 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2200      	movs	r2, #0
 8008998:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 800899a:	2300      	movs	r3, #0
 800899c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80089a0:	e060      	b.n	8008a64 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	8992      	ldrh	r2, [r2, #12]
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d303      	bcc.n	80089b6 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 80089ae:	2301      	movs	r3, #1
 80089b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80089b4:	e002      	b.n	80089bc <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80089b6:	2300      	movs	r3, #0
 80089b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	8992      	ldrh	r2, [r2, #12]
 80089c4:	4611      	mov	r1, r2
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	89d2      	ldrh	r2, [r2, #14]
 80089ca:	440a      	add	r2, r1
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d349      	bcc.n	8008a64 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80089d0:	2308      	movs	r3, #8
 80089d2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	7cdb      	ldrb	r3, [r3, #19]
 80089da:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80089de:	4611      	mov	r1, r2
 80089e0:	4618      	mov	r0, r3
 80089e2:	f000 ffad 	bl	8009940 <RegionGetPhyParam>
 80089e6:	4603      	mov	r3, r0
 80089e8:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 80089ea:	6a3b      	ldr	r3, [r7, #32]
 80089ec:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	89d2      	ldrh	r2, [r2, #14]
 80089f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80089fc:	fb01 f202 	mul.w	r2, r1, r2
 8008a00:	1a9b      	subs	r3, r3, r2
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d12e      	bne.n	8008a64 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8008a06:	2322      	movs	r3, #34	@ 0x22
 8008a08:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                    getPhy.Datarate = datarate;
 8008a0c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008a10:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	7c9b      	ldrb	r3, [r3, #18]
 8008a18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	7cdb      	ldrb	r3, [r3, #19]
 8008a20:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8008a24:	4611      	mov	r1, r2
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 ff8a 	bl	8009940 <RegionGetPhyParam>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

                    if( datarate == minTxDatarate )
 8008a36:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8008a3a:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d110      	bne.n	8008a64 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8008a42:	2300      	movs	r3, #0
 8008a44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        if( adrNext->UpdateChanMask == true )
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	791b      	ldrb	r3, [r3, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d009      	beq.n	8008a64 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8008a50:	2302      	movs	r3, #2
 8008a52:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	7cdb      	ldrb	r3, [r3, #19]
 8008a58:	f107 0214 	add.w	r2, r7, #20
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 ff99 	bl	8009996 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8008a6a:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8008a72:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8008a74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3730      	adds	r7, #48	@ 0x30
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
 8008a8c:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	789b      	ldrb	r3, [r3, #2]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d107      	bne.n	8008aa6 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	68b9      	ldr	r1, [r7, #8]
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f7ff ff3b 	bl	8008918 <CalcNextV10X>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	e000      	b.n	8008aa8 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008abc:	bf00      	nop
 8008abe:	3714      	adds	r7, #20
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bc80      	pop	{r7}
 8008ac4:	4770      	bx	lr

08008ac6 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b083      	sub	sp, #12
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	4603      	mov	r3, r0
 8008ace:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bc80      	pop	{r7}
 8008ad8:	4770      	bx	lr

08008ada <LoRaMacClassBIsAcquisitionInProgress>:
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8008ada:	b480      	push	{r7}
 8008adc:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8008ade:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bc80      	pop	{r7}
 8008ae6:	4770      	bx	lr

08008ae8 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bc80      	pop	{r7}
 8008af8:	4770      	bx	lr

08008afa <LoRaMacClassBIsBeaconExpected>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconExpected( void )
{
 8008afa:	b480      	push	{r7}
 8008afc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8008afe:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bc80      	pop	{r7}
 8008b06:	4770      	bx	lr

08008b08 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8008b0c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bc80      	pop	{r7}
 8008b14:	4770      	bx	lr

08008b16 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8008b16:	b480      	push	{r7}
 8008b18:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8008b1a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bc80      	pop	{r7}
 8008b22:	4770      	bx	lr

08008b24 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8008b28:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc80      	pop	{r7}
 8008b30:	4770      	bx	lr

08008b32 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	4603      	mov	r3, r0
 8008b3a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bc80      	pop	{r7}
 8008b44:	4770      	bx	lr

08008b46 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8008b46:	b480      	push	{r7}
 8008b48:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b4a:	bf00      	nop
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bc80      	pop	{r7}
 8008b50:	4770      	bx	lr

08008b52 <LoRaMacClassBSwitchClass>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	4603      	mov	r3, r0
 8008b5a:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008b5c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bc80      	pop	{r7}
 8008b66:	4770      	bx	lr

08008b68 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008b70:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bc80      	pop	{r7}
 8008b7a:	4770      	bx	lr

08008b7c <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008b84:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bc80      	pop	{r7}
 8008b8e:	4770      	bx	lr

08008b90 <LoRaMacClassBIsUplinkCollision>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8008b98:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	370c      	adds	r7, #12
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bc80      	pop	{r7}
 8008ba2:	4770      	bx	lr

08008ba4 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8008ba8:	bf00      	nop
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bc80      	pop	{r7}
 8008bae:	4770      	bx	lr

08008bb0 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	81fb      	strh	r3, [r7, #14]
 8008bc0:	e00a      	b.n	8008bd8 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8008bc2:	89fb      	ldrh	r3, [r7, #14]
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <IsSlotFree+0x22>
        {
            return false;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e006      	b.n	8008be0 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8008bd2:	89fb      	ldrh	r3, [r7, #14]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	81fb      	strh	r3, [r7, #14]
 8008bd8:	89fb      	ldrh	r3, [r7, #14]
 8008bda:	2b0f      	cmp	r3, #15
 8008bdc:	d9f1      	bls.n	8008bc2 <IsSlotFree+0x12>
        }
    }
    return true;
 8008bde:	2301      	movs	r3, #1
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bc80      	pop	{r7}
 8008be8:	4770      	bx	lr
	...

08008bec <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8008bf6:	e007      	b.n	8008c08 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8008bf8:	79fb      	ldrb	r3, [r7, #7]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8008bfe:	79fb      	ldrb	r3, [r7, #7]
 8008c00:	2b0f      	cmp	r3, #15
 8008c02:	d101      	bne.n	8008c08 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	e012      	b.n	8008c2e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8008c08:	79fb      	ldrb	r3, [r7, #7]
 8008c0a:	011b      	lsls	r3, r3, #4
 8008c0c:	3308      	adds	r3, #8
 8008c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8008c38 <MallocNewMacCommandSlot+0x4c>)
 8008c10:	4413      	add	r3, r2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7ff ffcc 	bl	8008bb0 <IsSlotFree>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	f083 0301 	eor.w	r3, r3, #1
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1e9      	bne.n	8008bf8 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	011b      	lsls	r3, r3, #4
 8008c28:	3308      	adds	r3, #8
 8008c2a:	4a03      	ldr	r2, [pc, #12]	@ (8008c38 <MallocNewMacCommandSlot+0x4c>)
 8008c2c:	4413      	add	r3, r2
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	2000118c 	.word	0x2000118c

08008c3c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <FreeMacCommandSlot+0x12>
    {
        return false;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e005      	b.n	8008c5a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8008c4e:	2210      	movs	r2, #16
 8008c50:	2100      	movs	r1, #0
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f005 fe4c 	bl	800e8f0 <memset1>

    return true;
 8008c58:	2301      	movs	r3, #1
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8008c62:	b480      	push	{r7}
 8008c64:	b083      	sub	sp, #12
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <LinkedListAdd+0x16>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <LinkedListAdd+0x1a>
    {
        return false;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e015      	b.n	8008ca8 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d102      	bne.n	8008c8a <LinkedListAdd+0x28>
    {
        list->First = element;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d003      	beq.n	8008c9a <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	605a      	str	r2, [r3, #4]

    return true;
 8008ca6:	2301      	movs	r3, #1
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr

08008cb2 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b085      	sub	sp, #20
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <LinkedListGetPrevious+0x16>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d101      	bne.n	8008ccc <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	e016      	b.n	8008cfa <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d00c      	beq.n	8008cf4 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8008cda:	e002      	b.n	8008ce2 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d007      	beq.n	8008cf8 <LinkedListGetPrevious+0x46>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d1f4      	bne.n	8008cdc <LinkedListGetPrevious+0x2a>
 8008cf2:	e001      	b.n	8008cf8 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bc80      	pop	{r7}
 8008d02:	4770      	bx	lr

08008d04 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <LinkedListRemove+0x16>
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <LinkedListRemove+0x1a>
    {
        return false;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	e020      	b.n	8008d60 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff ffc6 	bl	8008cb2 <LinkedListGetPrevious>
 8008d26:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	683a      	ldr	r2, [r7, #0]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d103      	bne.n	8008d3a <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d102      	bne.n	8008d4a <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	601a      	str	r2, [r3, #0]

    return true;
 8008d5e:	2301      	movs	r3, #1
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	2b05      	cmp	r3, #5
 8008d76:	d004      	beq.n	8008d82 <IsSticky+0x1a>
 8008d78:	2b05      	cmp	r3, #5
 8008d7a:	db04      	blt.n	8008d86 <IsSticky+0x1e>
 8008d7c:	3b08      	subs	r3, #8
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d801      	bhi.n	8008d86 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e000      	b.n	8008d88 <IsSticky+0x20>
        default:
            return false;
 8008d86:	2300      	movs	r3, #0
    }
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bc80      	pop	{r7}
 8008d90:	4770      	bx	lr

08008d92 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8008d92:	b480      	push	{r7}
 8008d94:	b083      	sub	sp, #12
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	4603      	mov	r3, r0
 8008d9a:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8008d9c:	2300      	movs	r3, #0
    }
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bc80      	pop	{r7}
 8008da6:	4770      	bx	lr

08008da8 <LoRaMacCommandsAddCmd>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	4603      	mov	r3, r0
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
 8008db4:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d101      	bne.n	8008dc0 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e03b      	b.n	8008e38 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8008dc0:	f7ff ff14 	bl	8008bec <MallocNewMacCommandSlot>
 8008dc4:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d101      	bne.n	8008dd0 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8008dcc:	2302      	movs	r3, #2
 8008dce:	e033      	b.n	8008e38 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8008dd0:	6979      	ldr	r1, [r7, #20]
 8008dd2:	481b      	ldr	r0, [pc, #108]	@ (8008e40 <LoRaMacCommandsAddCmd+0x98>)
 8008dd4:	f7ff ff45 	bl	8008c62 <LinkedListAdd>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	f083 0301 	eor.w	r3, r3, #1
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8008de4:	2305      	movs	r3, #5
 8008de6:	e027      	b.n	8008e38 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	7bfa      	ldrb	r2, [r7, #15]
 8008dec:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	3305      	adds	r3, #5
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	b292      	uxth	r2, r2
 8008dfc:	68b9      	ldr	r1, [r7, #8]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f005 fd3b 	bl	800e87a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7ff ffae 	bl	8008d68 <IsSticky>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	461a      	mov	r2, r3
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7ff ffbb 	bl	8008d92 <IsConfirmationRequired>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	461a      	mov	r2, r3
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8008e24:	4b06      	ldr	r3, [pc, #24]	@ (8008e40 <LoRaMacCommandsAddCmd+0x98>)
 8008e26:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	3301      	adds	r3, #1
 8008e30:	4a03      	ldr	r2, [pc, #12]	@ (8008e40 <LoRaMacCommandsAddCmd+0x98>)
 8008e32:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3718      	adds	r7, #24
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	2000118c 	.word	0x2000118c

08008e44 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e021      	b.n	8008e9a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8008e56:	6879      	ldr	r1, [r7, #4]
 8008e58:	4812      	ldr	r0, [pc, #72]	@ (8008ea4 <LoRaMacCommandsRemoveCmd+0x60>)
 8008e5a:	f7ff ff53 	bl	8008d04 <LinkedListRemove>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f083 0301 	eor.w	r3, r3, #1
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e015      	b.n	8008e9a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8008e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ea4 <LoRaMacCommandsRemoveCmd+0x60>)
 8008e70:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	4a09      	ldr	r2, [pc, #36]	@ (8008ea4 <LoRaMacCommandsRemoveCmd+0x60>)
 8008e7e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff feda 	bl	8008c3c <FreeMacCommandSlot>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	f083 0301 	eor.w	r3, r3, #1
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8008e94:	2305      	movs	r3, #5
 8008e96:	e000      	b.n	8008e9a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	2000118c 	.word	0x2000118c

08008ea8 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	6039      	str	r1, [r7, #0]
 8008eb2:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8008eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8008ef0 <LoRaMacCommandsGetCmd+0x48>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8008eba:	e002      	b.n	8008ec2 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d004      	beq.n	8008ed2 <LoRaMacCommandsGetCmd+0x2a>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	791b      	ldrb	r3, [r3, #4]
 8008ecc:	79fa      	ldrb	r2, [r7, #7]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d1f4      	bne.n	8008ebc <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e000      	b.n	8008ee4 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bc80      	pop	{r7}
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	2000118c 	.word	0x2000118c

08008ef4 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8008efa:	4b0f      	ldr	r3, [pc, #60]	@ (8008f38 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8008f00:	e012      	b.n	8008f28 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	7b1b      	ldrb	r3, [r3, #12]
 8008f06:	f083 0301 	eor.w	r3, r3, #1
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d008      	beq.n	8008f22 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7ff ff94 	bl	8008e44 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	607b      	str	r3, [r7, #4]
 8008f20:	e002      	b.n	8008f28 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1e9      	bne.n	8008f02 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	2000118c 	.word	0x2000118c

08008f3c <LoRaMacCommandsGetSizeSerializedCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e005      	b.n	8008f5a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8008f4e:	4b05      	ldr	r3, [pc, #20]	@ (8008f64 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8008f50:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bc80      	pop	{r7}
 8008f62:	4770      	bx	lr
 8008f64:	2000118c 	.word	0x2000118c

08008f68 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b088      	sub	sp, #32
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8008f74:	4b25      	ldr	r3, [pc, #148]	@ (800900c <LoRaMacCommandsSerializeCmds+0xa4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <LoRaMacCommandsSerializeCmds+0x22>
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d126      	bne.n	8008fd8 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e039      	b.n	8009002 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8008f8e:	7efb      	ldrb	r3, [r7, #27]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	1ad2      	subs	r2, r2, r3
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d320      	bcc.n	8008fe0 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8008f9e:	7efb      	ldrb	r3, [r7, #27]
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	76fa      	strb	r2, [r7, #27]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4413      	add	r3, r2
 8008faa:	69fa      	ldr	r2, [r7, #28]
 8008fac:	7912      	ldrb	r2, [r2, #4]
 8008fae:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8008fb0:	7efb      	ldrb	r3, [r7, #27]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	18d0      	adds	r0, r2, r3
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	1d59      	adds	r1, r3, #5
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	f005 fc5a 	bl	800e87a <memcpy1>
            itr += curElement->PayloadSize;
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	7efb      	ldrb	r3, [r7, #27]
 8008fce:	4413      	add	r3, r2
 8008fd0:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1d7      	bne.n	8008f8e <LoRaMacCommandsSerializeCmds+0x26>
 8008fde:	e009      	b.n	8008ff4 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8008fe0:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8008fe2:	e007      	b.n	8008ff4 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8008fea:	69f8      	ldr	r0, [r7, #28]
 8008fec:	f7ff ff2a 	bl	8008e44 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1f4      	bne.n	8008fe4 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8008ffa:	68b8      	ldr	r0, [r7, #8]
 8008ffc:	f7ff ff9e 	bl	8008f3c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3720      	adds	r7, #32
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	2000118c 	.word	0x2000118c

08009010 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a07      	ldr	r2, [pc, #28]	@ (8009038 <IncreaseBufferPointer+0x28>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d102      	bne.n	8009026 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8009020:	4b06      	ldr	r3, [pc, #24]	@ (800903c <IncreaseBufferPointer+0x2c>)
 8009022:	607b      	str	r3, [r7, #4]
 8009024:	e002      	b.n	800902c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	3304      	adds	r3, #4
 800902a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 800902c:	687b      	ldr	r3, [r7, #4]
}
 800902e:	4618      	mov	r0, r3
 8009030:	370c      	adds	r7, #12
 8009032:	46bd      	mov	sp, r7
 8009034:	bc80      	pop	{r7}
 8009036:	4770      	bx	lr
 8009038:	200012a4 	.word	0x200012a4
 800903c:	20001294 	.word	0x20001294

08009040 <IsListFull>:
    }
    return false;
}

static bool IsListFull( uint8_t count )
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	4603      	mov	r3, r0
 8009048:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800904a:	79fb      	ldrb	r3, [r7, #7]
 800904c:	2b04      	cmp	r3, #4
 800904e:	d901      	bls.n	8009054 <IsListFull+0x14>
    {
        return true;
 8009050:	2301      	movs	r3, #1
 8009052:	e000      	b.n	8009056 <IsListFull+0x16>
    }
    return false;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	bc80      	pop	{r7}
 800905e:	4770      	bx	lr

08009060 <LoRaMacConfirmQueueAdd>:
    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
}

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8009068:	4b19      	ldr	r3, [pc, #100]	@ (80090d0 <LoRaMacConfirmQueueAdd+0x70>)
 800906a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800906e:	4618      	mov	r0, r3
 8009070:	f7ff ffe6 	bl	8009040 <IsListFull>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 800907a:	2300      	movs	r3, #0
 800907c:	e023      	b.n	80090c6 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800907e:	4b14      	ldr	r3, [pc, #80]	@ (80090d0 <LoRaMacConfirmQueueAdd+0x70>)
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	7812      	ldrb	r2, [r2, #0]
 8009086:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8009088:	4b11      	ldr	r3, [pc, #68]	@ (80090d0 <LoRaMacConfirmQueueAdd+0x70>)
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	7852      	ldrb	r2, [r2, #1]
 8009090:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8009092:	4b0f      	ldr	r3, [pc, #60]	@ (80090d0 <LoRaMacConfirmQueueAdd+0x70>)
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	78d2      	ldrb	r2, [r2, #3]
 800909a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800909c:	4b0c      	ldr	r3, [pc, #48]	@ (80090d0 <LoRaMacConfirmQueueAdd+0x70>)
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	2200      	movs	r2, #0
 80090a2:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80090a4:	4b0a      	ldr	r3, [pc, #40]	@ (80090d0 <LoRaMacConfirmQueueAdd+0x70>)
 80090a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090aa:	3301      	adds	r3, #1
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	4b08      	ldr	r3, [pc, #32]	@ (80090d0 <LoRaMacConfirmQueueAdd+0x70>)
 80090b0:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80090b4:	4b06      	ldr	r3, [pc, #24]	@ (80090d0 <LoRaMacConfirmQueueAdd+0x70>)
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7ff ffa9 	bl	8009010 <IncreaseBufferPointer>
 80090be:	4603      	mov	r3, r0
 80090c0:	4a03      	ldr	r2, [pc, #12]	@ (80090d0 <LoRaMacConfirmQueueAdd+0x70>)
 80090c2:	6093      	str	r3, [r2, #8]

    return true;
 80090c4:	2301      	movs	r3, #1
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	20001288 	.word	0x20001288

080090d4 <LoRaMacConfirmQueueGetCnt>:
        }
    }
}

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80090d4:	b480      	push	{r7}
 80090d6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80090d8:	4b03      	ldr	r3, [pc, #12]	@ (80090e8 <LoRaMacConfirmQueueGetCnt+0x14>)
 80090da:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bc80      	pop	{r7}
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	20001288 	.word	0x20001288

080090ec <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80090f0:	4b06      	ldr	r3, [pc, #24]	@ (800910c <LoRaMacConfirmQueueIsFull+0x20>)
 80090f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7ff ffa2 	bl	8009040 <IsListFull>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8009102:	2301      	movs	r3, #1
 8009104:	e000      	b.n	8009108 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8009106:	2300      	movs	r3, #0
    }
}
 8009108:	4618      	mov	r0, r3
 800910a:	bd80      	pop	{r7, pc}
 800910c:	20001288 	.word	0x20001288

08009110 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08e      	sub	sp, #56	@ 0x38
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	607b      	str	r3, [r7, #4]
 800911a:	460b      	mov	r3, r1
 800911c:	817b      	strh	r3, [r7, #10]
 800911e:	4613      	mov	r3, r2
 8009120:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009128:	230a      	movs	r3, #10
 800912a:	e086      	b.n	800923a <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8009132:	2301      	movs	r3, #1
 8009134:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8009136:	2300      	movs	r3, #0
 8009138:	623b      	str	r3, [r7, #32]
 800913a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800913e:	2200      	movs	r2, #0
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	605a      	str	r2, [r3, #4]
 8009144:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8009146:	2300      	movs	r3, #0
 8009148:	613b      	str	r3, [r7, #16]
 800914a:	f107 0314 	add.w	r3, r7, #20
 800914e:	2200      	movs	r2, #0
 8009150:	601a      	str	r2, [r3, #0]
 8009152:	605a      	str	r2, [r3, #4]
 8009154:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8009156:	2301      	movs	r3, #1
 8009158:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 800915a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800915e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	b2db      	uxtb	r3, r3
 8009164:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	0a1b      	lsrs	r3, r3, #8
 800916a:	b2db      	uxtb	r3, r3
 800916c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	0c1b      	lsrs	r3, r3, #16
 8009172:	b2db      	uxtb	r3, r3
 8009174:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	0e1b      	lsrs	r3, r3, #24
 800917a:	b2db      	uxtb	r3, r3
 800917c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 800917e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009180:	b2db      	uxtb	r3, r3
 8009182:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8009184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009186:	0a1b      	lsrs	r3, r3, #8
 8009188:	b2db      	uxtb	r3, r3
 800918a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800918c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800918e:	0c1b      	lsrs	r3, r3, #16
 8009190:	b2db      	uxtb	r3, r3
 8009192:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8009194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009196:	0e1b      	lsrs	r3, r3, #24
 8009198:	b2db      	uxtb	r3, r3
 800919a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 800919c:	e048      	b.n	8009230 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 800919e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	77fb      	strb	r3, [r7, #31]
        ctr++;
 80091a4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80091a6:	3301      	adds	r3, #1
 80091a8:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80091aa:	f107 0320 	add.w	r3, r7, #32
 80091ae:	7a7a      	ldrb	r2, [r7, #9]
 80091b0:	f107 0010 	add.w	r0, r7, #16
 80091b4:	2110      	movs	r1, #16
 80091b6:	f005 f9b5 	bl	800e524 <SecureElementAesEncrypt>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80091c0:	230f      	movs	r3, #15
 80091c2:	e03a      	b.n	800923a <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80091c4:	2300      	movs	r3, #0
 80091c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80091ca:	e01e      	b.n	800920a <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80091cc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80091d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80091d4:	4413      	add	r3, r2
 80091d6:	461a      	mov	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4413      	add	r3, r2
 80091dc:	7819      	ldrb	r1, [r3, #0]
 80091de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80091e2:	3338      	adds	r3, #56	@ 0x38
 80091e4:	443b      	add	r3, r7
 80091e6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80091ea:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80091ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80091f2:	4403      	add	r3, r0
 80091f4:	4618      	mov	r0, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	4403      	add	r3, r0
 80091fa:	404a      	eors	r2, r1
 80091fc:	b2d2      	uxtb	r2, r2
 80091fe:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8009200:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009204:	3301      	adds	r3, #1
 8009206:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800920a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800920e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009212:	2a10      	cmp	r2, #16
 8009214:	bfa8      	it	ge
 8009216:	2210      	movge	r2, #16
 8009218:	b212      	sxth	r2, r2
 800921a:	4293      	cmp	r3, r2
 800921c:	dbd6      	blt.n	80091cc <PayloadEncrypt+0xbc>
        }
        size -= 16;
 800921e:	897b      	ldrh	r3, [r7, #10]
 8009220:	3b10      	subs	r3, #16
 8009222:	b29b      	uxth	r3, r3
 8009224:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8009226:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800922a:	3310      	adds	r3, #16
 800922c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8009230:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009234:	2b00      	cmp	r3, #0
 8009236:	dcb2      	bgt.n	800919e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3738      	adds	r7, #56	@ 0x38
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8009242:	b490      	push	{r4, r7}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	4604      	mov	r4, r0
 800924a:	4608      	mov	r0, r1
 800924c:	4611      	mov	r1, r2
 800924e:	461a      	mov	r2, r3
 8009250:	4623      	mov	r3, r4
 8009252:	80fb      	strh	r3, [r7, #6]
 8009254:	4603      	mov	r3, r0
 8009256:	717b      	strb	r3, [r7, #5]
 8009258:	460b      	mov	r3, r1
 800925a:	713b      	strb	r3, [r7, #4]
 800925c:	4613      	mov	r3, r2
 800925e:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009266:	230a      	movs	r3, #10
 8009268:	e04e      	b.n	8009308 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	2249      	movs	r2, #73	@ 0x49
 800926e:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	3301      	adds	r3, #1
 8009274:	2200      	movs	r2, #0
 8009276:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	3302      	adds	r3, #2
 800927c:	2200      	movs	r2, #0
 800927e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	3303      	adds	r3, #3
 8009284:	2200      	movs	r2, #0
 8009286:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	3304      	adds	r3, #4
 800928c:	2200      	movs	r2, #0
 800928e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	3305      	adds	r3, #5
 8009294:	78fa      	ldrb	r2, [r7, #3]
 8009296:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	3306      	adds	r3, #6
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	b2d2      	uxtb	r2, r2
 80092a0:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	0a1a      	lsrs	r2, r3, #8
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	3307      	adds	r3, #7
 80092aa:	b2d2      	uxtb	r2, r2
 80092ac:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	0c1a      	lsrs	r2, r3, #16
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	3308      	adds	r3, #8
 80092b6:	b2d2      	uxtb	r2, r2
 80092b8:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	0e1a      	lsrs	r2, r3, #24
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	3309      	adds	r3, #9
 80092c2:	b2d2      	uxtb	r2, r2
 80092c4:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	330a      	adds	r3, #10
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	b2d2      	uxtb	r2, r2
 80092ce:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	0a1a      	lsrs	r2, r3, #8
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	330b      	adds	r3, #11
 80092d8:	b2d2      	uxtb	r2, r2
 80092da:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	0c1a      	lsrs	r2, r3, #16
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	330c      	adds	r3, #12
 80092e4:	b2d2      	uxtb	r2, r2
 80092e6:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	0e1a      	lsrs	r2, r3, #24
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	330d      	adds	r3, #13
 80092f0:	b2d2      	uxtb	r2, r2
 80092f2:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	330e      	adds	r3, #14
 80092f8:	2200      	movs	r2, #0
 80092fa:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	330f      	adds	r3, #15
 8009300:	88fa      	ldrh	r2, [r7, #6]
 8009302:	b2d2      	uxtb	r2, r2
 8009304:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bc90      	pop	{r4, r7}
 8009310:	4770      	bx	lr

08009312 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8009312:	b590      	push	{r4, r7, lr}
 8009314:	b08b      	sub	sp, #44	@ 0x2c
 8009316:	af04      	add	r7, sp, #16
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	4608      	mov	r0, r1
 800931c:	4611      	mov	r1, r2
 800931e:	461a      	mov	r2, r3
 8009320:	4603      	mov	r3, r0
 8009322:	807b      	strh	r3, [r7, #2]
 8009324:	460b      	mov	r3, r1
 8009326:	707b      	strb	r3, [r7, #1]
 8009328:	4613      	mov	r3, r2
 800932a:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d002      	beq.n	8009338 <ComputeCmacB0+0x26>
 8009332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009334:	2b00      	cmp	r3, #0
 8009336:	d101      	bne.n	800933c <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009338:	230a      	movs	r3, #10
 800933a:	e024      	b.n	8009386 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800933c:	887b      	ldrh	r3, [r7, #2]
 800933e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009342:	d901      	bls.n	8009348 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8009344:	230e      	movs	r3, #14
 8009346:	e01e      	b.n	8009386 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8009348:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 800934c:	783a      	ldrb	r2, [r7, #0]
 800934e:	7879      	ldrb	r1, [r7, #1]
 8009350:	8878      	ldrh	r0, [r7, #2]
 8009352:	f107 0308 	add.w	r3, r7, #8
 8009356:	9302      	str	r3, [sp, #8]
 8009358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935a:	9301      	str	r3, [sp, #4]
 800935c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	4623      	mov	r3, r4
 8009362:	f7ff ff6e 	bl	8009242 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8009366:	887a      	ldrh	r2, [r7, #2]
 8009368:	7879      	ldrb	r1, [r7, #1]
 800936a:	f107 0008 	add.w	r0, r7, #8
 800936e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	460b      	mov	r3, r1
 8009374:	6879      	ldr	r1, [r7, #4]
 8009376:	f005 f8bb 	bl	800e4f0 <SecureElementComputeAesCmac>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d001      	beq.n	8009384 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009380:	230f      	movs	r3, #15
 8009382:	e000      	b.n	8009386 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	371c      	adds	r7, #28
 800938a:	46bd      	mov	sp, r7
 800938c:	bd90      	pop	{r4, r7, pc}
	...

08009390 <LoRaMacCryptoSetLrWanVersion>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8009398:	4b04      	ldr	r3, [pc, #16]	@ (80093ac <LoRaMacCryptoSetLrWanVersion+0x1c>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bc80      	pop	{r7}
 80093aa:	4770      	bx	lr
 80093ac:	200012ac 	.word	0x200012ac

080093b0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80093be:	230a      	movs	r3, #10
 80093c0:	e006      	b.n	80093d0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80093c2:	4b06      	ldr	r3, [pc, #24]	@ (80093dc <LoRaMacCryptoGetFCntUp+0x2c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bc80      	pop	{r7}
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	200012ac 	.word	0x200012ac

080093e0 <LoRaMacCryptoSetKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	4603      	mov	r3, r0
 80093e8:	6039      	str	r1, [r7, #0]
 80093ea:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80093ec:	79fb      	ldrb	r3, [r7, #7]
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f005 f81f 	bl	800e434 <SecureElementSetKey>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80093fc:	230f      	movs	r3, #15
 80093fe:	e021      	b.n	8009444 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8009400:	79fb      	ldrb	r3, [r7, #7]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d11d      	bne.n	8009442 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8009406:	4b11      	ldr	r3, [pc, #68]	@ (800944c <LoRaMacCryptoSetKey+0x6c>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	789b      	ldrb	r3, [r3, #2]
 800940c:	210b      	movs	r1, #11
 800940e:	4618      	mov	r0, r3
 8009410:	f000 f8da 	bl	80095c8 <LoRaMacCryptoDeriveLifeTimeKey>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800941a:	230f      	movs	r3, #15
 800941c:	e012      	b.n	8009444 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800941e:	210c      	movs	r1, #12
 8009420:	2000      	movs	r0, #0
 8009422:	f000 f8d1 	bl	80095c8 <LoRaMacCryptoDeriveLifeTimeKey>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800942c:	230f      	movs	r3, #15
 800942e:	e009      	b.n	8009444 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8009430:	210a      	movs	r1, #10
 8009432:	2000      	movs	r0, #0
 8009434:	f000 f8c8 	bl	80095c8 <LoRaMacCryptoDeriveLifeTimeKey>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800943e:	230f      	movs	r3, #15
 8009440:	e000      	b.n	8009444 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	200012ac 	.word	0x200012ac

08009450 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af02      	add	r7, sp, #8
 8009456:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d101      	bne.n	8009462 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800945e:	230a      	movs	r3, #10
 8009460:	e033      	b.n	80094ca <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8009462:	2301      	movs	r3, #1
 8009464:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 800946a:	f107 0308 	add.w	r3, r7, #8
 800946e:	4618      	mov	r0, r3
 8009470:	f005 f918 	bl	800e6a4 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	4b17      	ldr	r3, [pc, #92]	@ (80094d4 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	b292      	uxth	r2, r2
 800947c:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800947e:	4b15      	ldr	r3, [pc, #84]	@ (80094d4 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	889a      	ldrh	r2, [r3, #4]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f8d8 	bl	800963e <LoRaMacSerializerJoinRequest>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8009494:	2311      	movs	r3, #17
 8009496:	e018      	b.n	80094ca <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6819      	ldr	r1, [r3, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3318      	adds	r3, #24
 80094a0:	7bfa      	ldrb	r2, [r7, #15]
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	4613      	mov	r3, r2
 80094a6:	2213      	movs	r2, #19
 80094a8:	2000      	movs	r0, #0
 80094aa:	f005 f821 	bl	800e4f0 <SecureElementComputeAesCmac>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d001      	beq.n	80094b8 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80094b4:	230f      	movs	r3, #15
 80094b6:	e008      	b.n	80094ca <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f8c0 	bl	800963e <LoRaMacSerializerJoinRequest>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80094c4:	2311      	movs	r3, #17
 80094c6:	e000      	b.n	80094ca <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	200012ac 	.word	0x200012ac

080094d8 <LoRaMacCryptoSecureMessage>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80094d8:	b590      	push	{r4, r7, lr}
 80094da:	b08b      	sub	sp, #44	@ 0x2c
 80094dc:	af04      	add	r7, sp, #16
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	607b      	str	r3, [r7, #4]
 80094e2:	460b      	mov	r3, r1
 80094e4:	72fb      	strb	r3, [r7, #11]
 80094e6:	4613      	mov	r3, r2
 80094e8:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80094ea:	2313      	movs	r3, #19
 80094ec:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80094ee:	2309      	movs	r3, #9
 80094f0:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d101      	bne.n	80094fc <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80094f8:	230a      	movs	r3, #10
 80094fa:	e05e      	b.n	80095ba <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80094fc:	4b31      	ldr	r3, [pc, #196]	@ (80095c4 <LoRaMacCryptoSecureMessage+0xec>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	429a      	cmp	r2, r3
 8009506:	d201      	bcs.n	800950c <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8009508:	2306      	movs	r3, #6
 800950a:	e056      	b.n	80095ba <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8009516:	2308      	movs	r3, #8
 8009518:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800951a:	4b2a      	ldr	r3, [pc, #168]	@ (80095c4 <LoRaMacCryptoSecureMessage+0xec>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	429a      	cmp	r2, r3
 8009524:	d916      	bls.n	8009554 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009530:	b219      	sxth	r1, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	689c      	ldr	r4, [r3, #8]
 8009536:	7dfa      	ldrb	r2, [r7, #23]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	9301      	str	r3, [sp, #4]
 800953c:	2300      	movs	r3, #0
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	4623      	mov	r3, r4
 8009542:	f7ff fde5 	bl	8009110 <PayloadEncrypt>
 8009546:	4603      	mov	r3, r0
 8009548:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800954a:	7dbb      	ldrb	r3, [r7, #22]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d001      	beq.n	8009554 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8009550:	7dbb      	ldrb	r3, [r7, #22]
 8009552:	e032      	b.n	80095ba <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f8f4 	bl	8009742 <LoRaMacSerializerData>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8009560:	2311      	movs	r3, #17
 8009562:	e02a      	b.n	80095ba <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8009564:	2308      	movs	r3, #8
 8009566:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6818      	ldr	r0, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	791b      	ldrb	r3, [r3, #4]
 8009570:	3b04      	subs	r3, #4
 8009572:	b299      	uxth	r1, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	322c      	adds	r2, #44	@ 0x2c
 800957c:	7dfc      	ldrb	r4, [r7, #23]
 800957e:	9203      	str	r2, [sp, #12]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	9202      	str	r2, [sp, #8]
 8009584:	9301      	str	r3, [sp, #4]
 8009586:	2300      	movs	r3, #0
 8009588:	9300      	str	r3, [sp, #0]
 800958a:	2300      	movs	r3, #0
 800958c:	4622      	mov	r2, r4
 800958e:	f7ff fec0 	bl	8009312 <ComputeCmacB0>
 8009592:	4603      	mov	r3, r0
 8009594:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8009596:	7dbb      	ldrb	r3, [r7, #22]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 800959c:	7dbb      	ldrb	r3, [r7, #22]
 800959e:	e00c      	b.n	80095ba <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f8ce 	bl	8009742 <LoRaMacSerializerData>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80095ac:	2311      	movs	r3, #17
 80095ae:	e004      	b.n	80095ba <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80095b0:	4b04      	ldr	r3, [pc, #16]	@ (80095c4 <LoRaMacCryptoSecureMessage+0xec>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	371c      	adds	r7, #28
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd90      	pop	{r4, r7, pc}
 80095c2:	bf00      	nop
 80095c4:	200012ac 	.word	0x200012ac

080095c8 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	460a      	mov	r2, r1
 80095d2:	71fb      	strb	r3, [r7, #7]
 80095d4:	4613      	mov	r3, r2
 80095d6:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 80095d8:	2300      	movs	r3, #0
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	f107 0310 	add.w	r3, r7, #16
 80095e0:	2200      	movs	r2, #0
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	605a      	str	r2, [r3, #4]
 80095e6:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80095e8:	2300      	movs	r3, #0
 80095ea:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 80095ec:	79bb      	ldrb	r3, [r7, #6]
 80095ee:	2b0c      	cmp	r3, #12
 80095f0:	d00b      	beq.n	800960a <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 80095f2:	2b0c      	cmp	r3, #12
 80095f4:	dc0f      	bgt.n	8009616 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 80095f6:	2b0a      	cmp	r3, #10
 80095f8:	d00a      	beq.n	8009610 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 80095fa:	2b0b      	cmp	r3, #11
 80095fc:	d10b      	bne.n	8009616 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 80095fe:	79fb      	ldrb	r3, [r7, #7]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d10a      	bne.n	800961a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8009604:	2320      	movs	r3, #32
 8009606:	733b      	strb	r3, [r7, #12]
            }
            break;
 8009608:	e007      	b.n	800961a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 800960a:	230b      	movs	r3, #11
 800960c:	77fb      	strb	r3, [r7, #31]
            break;
 800960e:	e005      	b.n	800961c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8009610:	2330      	movs	r3, #48	@ 0x30
 8009612:	733b      	strb	r3, [r7, #12]
            break;
 8009614:	e002      	b.n	800961c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8009616:	230b      	movs	r3, #11
 8009618:	e00d      	b.n	8009636 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 800961a:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800961c:	79ba      	ldrb	r2, [r7, #6]
 800961e:	7ff9      	ldrb	r1, [r7, #31]
 8009620:	f107 030c 	add.w	r3, r7, #12
 8009624:	4618      	mov	r0, r3
 8009626:	f004 fffd 	bl	800e624 <SecureElementDeriveAndStoreKey>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8009630:	230f      	movs	r3, #15
 8009632:	e000      	b.n	8009636 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3720      	adds	r7, #32
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b084      	sub	sp, #16
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <LoRaMacSerializerJoinRequest+0x16>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d101      	bne.n	8009658 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8009654:	2301      	movs	r3, #1
 8009656:	e070      	b.n	800973a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8009658:	2300      	movs	r3, #0
 800965a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	791b      	ldrb	r3, [r3, #4]
 8009660:	2b16      	cmp	r3, #22
 8009662:	d801      	bhi.n	8009668 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8009664:	2302      	movs	r3, #2
 8009666:	e068      	b.n	800973a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	89fb      	ldrh	r3, [r7, #14]
 800966e:	1c59      	adds	r1, r3, #1
 8009670:	81f9      	strh	r1, [r7, #14]
 8009672:	4413      	add	r3, r2
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	7952      	ldrb	r2, [r2, #5]
 8009678:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	89fb      	ldrh	r3, [r7, #14]
 8009680:	18d0      	adds	r0, r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	3306      	adds	r3, #6
 8009686:	2208      	movs	r2, #8
 8009688:	4619      	mov	r1, r3
 800968a:	f005 f911 	bl	800e8b0 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 800968e:	89fb      	ldrh	r3, [r7, #14]
 8009690:	3308      	adds	r3, #8
 8009692:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	89fb      	ldrh	r3, [r7, #14]
 800969a:	18d0      	adds	r0, r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	330e      	adds	r3, #14
 80096a0:	2208      	movs	r2, #8
 80096a2:	4619      	mov	r1, r3
 80096a4:	f005 f904 	bl	800e8b0 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80096a8:	89fb      	ldrh	r3, [r7, #14]
 80096aa:	3308      	adds	r3, #8
 80096ac:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	8ad9      	ldrh	r1, [r3, #22]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	89fb      	ldrh	r3, [r7, #14]
 80096b8:	1c58      	adds	r0, r3, #1
 80096ba:	81f8      	strh	r0, [r7, #14]
 80096bc:	4413      	add	r3, r2
 80096be:	b2ca      	uxtb	r2, r1
 80096c0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	8adb      	ldrh	r3, [r3, #22]
 80096c6:	0a1b      	lsrs	r3, r3, #8
 80096c8:	b299      	uxth	r1, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	89fb      	ldrh	r3, [r7, #14]
 80096d0:	1c58      	adds	r0, r3, #1
 80096d2:	81f8      	strh	r0, [r7, #14]
 80096d4:	4413      	add	r3, r2
 80096d6:	b2ca      	uxtb	r2, r1
 80096d8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6999      	ldr	r1, [r3, #24]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	89fb      	ldrh	r3, [r7, #14]
 80096e4:	1c58      	adds	r0, r3, #1
 80096e6:	81f8      	strh	r0, [r7, #14]
 80096e8:	4413      	add	r3, r2
 80096ea:	b2ca      	uxtb	r2, r1
 80096ec:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	0a19      	lsrs	r1, r3, #8
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	89fb      	ldrh	r3, [r7, #14]
 80096fa:	1c58      	adds	r0, r3, #1
 80096fc:	81f8      	strh	r0, [r7, #14]
 80096fe:	4413      	add	r3, r2
 8009700:	b2ca      	uxtb	r2, r1
 8009702:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	0c19      	lsrs	r1, r3, #16
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	89fb      	ldrh	r3, [r7, #14]
 8009710:	1c58      	adds	r0, r3, #1
 8009712:	81f8      	strh	r0, [r7, #14]
 8009714:	4413      	add	r3, r2
 8009716:	b2ca      	uxtb	r2, r1
 8009718:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	699b      	ldr	r3, [r3, #24]
 800971e:	0e19      	lsrs	r1, r3, #24
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	89fb      	ldrh	r3, [r7, #14]
 8009726:	1c58      	adds	r0, r3, #1
 8009728:	81f8      	strh	r0, [r7, #14]
 800972a:	4413      	add	r3, r2
 800972c:	b2ca      	uxtb	r2, r1
 800972e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8009730:	89fb      	ldrh	r3, [r7, #14]
 8009732:	b2da      	uxtb	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d003      	beq.n	8009758 <LoRaMacSerializerData+0x16>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8009758:	2301      	movs	r3, #1
 800975a:	e0e3      	b.n	8009924 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 800975c:	2300      	movs	r3, #0
 800975e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8009760:	2308      	movs	r3, #8
 8009762:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	7b1b      	ldrb	r3, [r3, #12]
 8009768:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800976c:	b2db      	uxtb	r3, r3
 800976e:	461a      	mov	r2, r3
 8009770:	89bb      	ldrh	r3, [r7, #12]
 8009772:	4413      	add	r3, r2
 8009774:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800977c:	2b00      	cmp	r3, #0
 800977e:	d002      	beq.n	8009786 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8009780:	89bb      	ldrh	r3, [r7, #12]
 8009782:	3301      	adds	r3, #1
 8009784:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800978c:	461a      	mov	r2, r3
 800978e:	89bb      	ldrh	r3, [r7, #12]
 8009790:	4413      	add	r3, r2
 8009792:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8009794:	89bb      	ldrh	r3, [r7, #12]
 8009796:	3304      	adds	r3, #4
 8009798:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	791b      	ldrb	r3, [r3, #4]
 800979e:	461a      	mov	r2, r3
 80097a0:	89bb      	ldrh	r3, [r7, #12]
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d901      	bls.n	80097aa <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80097a6:	2302      	movs	r3, #2
 80097a8:	e0bc      	b.n	8009924 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	89fb      	ldrh	r3, [r7, #14]
 80097b0:	1c59      	adds	r1, r3, #1
 80097b2:	81f9      	strh	r1, [r7, #14]
 80097b4:	4413      	add	r3, r2
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	7952      	ldrb	r2, [r2, #5]
 80097ba:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6899      	ldr	r1, [r3, #8]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	89fb      	ldrh	r3, [r7, #14]
 80097c6:	1c58      	adds	r0, r3, #1
 80097c8:	81f8      	strh	r0, [r7, #14]
 80097ca:	4413      	add	r3, r2
 80097cc:	b2ca      	uxtb	r2, r1
 80097ce:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	0a19      	lsrs	r1, r3, #8
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	89fb      	ldrh	r3, [r7, #14]
 80097dc:	1c58      	adds	r0, r3, #1
 80097de:	81f8      	strh	r0, [r7, #14]
 80097e0:	4413      	add	r3, r2
 80097e2:	b2ca      	uxtb	r2, r1
 80097e4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	0c19      	lsrs	r1, r3, #16
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	89fb      	ldrh	r3, [r7, #14]
 80097f2:	1c58      	adds	r0, r3, #1
 80097f4:	81f8      	strh	r0, [r7, #14]
 80097f6:	4413      	add	r3, r2
 80097f8:	b2ca      	uxtb	r2, r1
 80097fa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	0e19      	lsrs	r1, r3, #24
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	89fb      	ldrh	r3, [r7, #14]
 8009808:	1c58      	adds	r0, r3, #1
 800980a:	81f8      	strh	r0, [r7, #14]
 800980c:	4413      	add	r3, r2
 800980e:	b2ca      	uxtb	r2, r1
 8009810:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	89fb      	ldrh	r3, [r7, #14]
 8009818:	1c59      	adds	r1, r3, #1
 800981a:	81f9      	strh	r1, [r7, #14]
 800981c:	4413      	add	r3, r2
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	7b12      	ldrb	r2, [r2, #12]
 8009822:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	89d9      	ldrh	r1, [r3, #14]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	89fb      	ldrh	r3, [r7, #14]
 800982e:	1c58      	adds	r0, r3, #1
 8009830:	81f8      	strh	r0, [r7, #14]
 8009832:	4413      	add	r3, r2
 8009834:	b2ca      	uxtb	r2, r1
 8009836:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	89db      	ldrh	r3, [r3, #14]
 800983c:	0a1b      	lsrs	r3, r3, #8
 800983e:	b299      	uxth	r1, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	89fb      	ldrh	r3, [r7, #14]
 8009846:	1c58      	adds	r0, r3, #1
 8009848:	81f8      	strh	r0, [r7, #14]
 800984a:	4413      	add	r3, r2
 800984c:	b2ca      	uxtb	r2, r1
 800984e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	89fb      	ldrh	r3, [r7, #14]
 8009856:	18d0      	adds	r0, r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f103 0110 	add.w	r1, r3, #16
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	7b1b      	ldrb	r3, [r3, #12]
 8009862:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009866:	b2db      	uxtb	r3, r3
 8009868:	461a      	mov	r2, r3
 800986a:	f005 f806 	bl	800e87a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	7b1b      	ldrb	r3, [r3, #12]
 8009872:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009876:	b2db      	uxtb	r3, r3
 8009878:	461a      	mov	r2, r3
 800987a:	89fb      	ldrh	r3, [r7, #14]
 800987c:	4413      	add	r3, r2
 800987e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009886:	2b00      	cmp	r3, #0
 8009888:	d009      	beq.n	800989e <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	89fb      	ldrh	r3, [r7, #14]
 8009890:	1c59      	adds	r1, r3, #1
 8009892:	81f9      	strh	r1, [r7, #14]
 8009894:	4413      	add	r3, r2
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	f892 2020 	ldrb.w	r2, [r2, #32]
 800989c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	89fb      	ldrh	r3, [r7, #14]
 80098a4:	18d0      	adds	r0, r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098b0:	461a      	mov	r2, r3
 80098b2:	f004 ffe2 	bl	800e87a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098bc:	461a      	mov	r2, r3
 80098be:	89fb      	ldrh	r3, [r7, #14]
 80098c0:	4413      	add	r3, r2
 80098c2:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	89fb      	ldrh	r3, [r7, #14]
 80098ce:	1c58      	adds	r0, r3, #1
 80098d0:	81f8      	strh	r0, [r7, #14]
 80098d2:	4413      	add	r3, r2
 80098d4:	b2ca      	uxtb	r2, r1
 80098d6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098dc:	0a19      	lsrs	r1, r3, #8
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	89fb      	ldrh	r3, [r7, #14]
 80098e4:	1c58      	adds	r0, r3, #1
 80098e6:	81f8      	strh	r0, [r7, #14]
 80098e8:	4413      	add	r3, r2
 80098ea:	b2ca      	uxtb	r2, r1
 80098ec:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f2:	0c19      	lsrs	r1, r3, #16
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	89fb      	ldrh	r3, [r7, #14]
 80098fa:	1c58      	adds	r0, r3, #1
 80098fc:	81f8      	strh	r0, [r7, #14]
 80098fe:	4413      	add	r3, r2
 8009900:	b2ca      	uxtb	r2, r1
 8009902:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009908:	0e19      	lsrs	r1, r3, #24
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	89fb      	ldrh	r3, [r7, #14]
 8009910:	1c58      	adds	r0, r3, #1
 8009912:	81f8      	strh	r0, [r7, #14]
 8009914:	4413      	add	r3, r2
 8009916:	b2ca      	uxtb	r2, r1
 8009918:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 800991a:	89fb      	ldrh	r3, [r7, #14]
 800991c:	b2da      	uxtb	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	4603      	mov	r3, r0
 8009934:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8009936:	bf00      	nop
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	bc80      	pop	{r7}
 800993e:	4770      	bx	lr

08009940 <RegionGetPhyParam>:
        }
    }
}

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	4603      	mov	r3, r0
 8009948:	6039      	str	r1, [r7, #0]
 800994a:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 800994c:	2300      	movs	r3, #0
 800994e:	60bb      	str	r3, [r7, #8]
    switch( region )
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	2b08      	cmp	r3, #8
 8009954:	d012      	beq.n	800997c <RegionGetPhyParam+0x3c>
 8009956:	2b08      	cmp	r3, #8
 8009958:	dc16      	bgt.n	8009988 <RegionGetPhyParam+0x48>
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <RegionGetPhyParam+0x24>
 800995e:	2b05      	cmp	r3, #5
 8009960:	d006      	beq.n	8009970 <RegionGetPhyParam+0x30>
 8009962:	e011      	b.n	8009988 <RegionGetPhyParam+0x48>
    {
        AS923_GET_PHY_PARAM( );
 8009964:	6838      	ldr	r0, [r7, #0]
 8009966:	f000 fa4f 	bl	8009e08 <RegionAS923GetPhyParam>
 800996a:	4603      	mov	r3, r0
 800996c:	60fb      	str	r3, [r7, #12]
 800996e:	e00d      	b.n	800998c <RegionGetPhyParam+0x4c>
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8009970:	6838      	ldr	r0, [r7, #0]
 8009972:	f001 ffd9 	bl	800b928 <RegionEU868GetPhyParam>
 8009976:	4603      	mov	r3, r0
 8009978:	60fb      	str	r3, [r7, #12]
 800997a:	e007      	b.n	800998c <RegionGetPhyParam+0x4c>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 800997c:	6838      	ldr	r0, [r7, #0]
 800997e:	f002 fe2d 	bl	800c5dc <RegionUS915GetPhyParam>
 8009982:	4603      	mov	r3, r0
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	e001      	b.n	800998c <RegionGetPhyParam+0x4c>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	60fb      	str	r3, [r7, #12]
        }
    }
}
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <RegionInitDefaults>:
        }
    }
}

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	4603      	mov	r3, r0
 800999e:	6039      	str	r1, [r7, #0]
 80099a0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80099a2:	79fb      	ldrb	r3, [r7, #7]
 80099a4:	2b08      	cmp	r3, #8
 80099a6:	d00e      	beq.n	80099c6 <RegionInitDefaults+0x30>
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	dc10      	bgt.n	80099ce <RegionInitDefaults+0x38>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <RegionInitDefaults+0x20>
 80099b0:	2b05      	cmp	r3, #5
 80099b2:	d004      	beq.n	80099be <RegionInitDefaults+0x28>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80099b4:	e00b      	b.n	80099ce <RegionInitDefaults+0x38>
        AS923_INIT_DEFAULTS( );
 80099b6:	6838      	ldr	r0, [r7, #0]
 80099b8:	f000 fba2 	bl	800a100 <RegionAS923InitDefaults>
 80099bc:	e008      	b.n	80099d0 <RegionInitDefaults+0x3a>
        EU868_INIT_DEFAULTS( );
 80099be:	6838      	ldr	r0, [r7, #0]
 80099c0:	f002 f8fe 	bl	800bbc0 <RegionEU868InitDefaults>
 80099c4:	e004      	b.n	80099d0 <RegionInitDefaults+0x3a>
        US915_INIT_DEFAULTS( );
 80099c6:	6838      	ldr	r0, [r7, #0]
 80099c8:	f002 ff6a 	bl	800c8a0 <RegionUS915InitDefaults>
 80099cc:	e000      	b.n	80099d0 <RegionInitDefaults+0x3a>
            break;
 80099ce:	bf00      	nop
        }
    }
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	6039      	str	r1, [r7, #0]
 80099e2:	71fb      	strb	r3, [r7, #7]
 80099e4:	4613      	mov	r3, r2
 80099e6:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80099e8:	79fb      	ldrb	r3, [r7, #7]
 80099ea:	2b08      	cmp	r3, #8
 80099ec:	d014      	beq.n	8009a18 <RegionVerify+0x40>
 80099ee:	2b08      	cmp	r3, #8
 80099f0:	dc19      	bgt.n	8009a26 <RegionVerify+0x4e>
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d002      	beq.n	80099fc <RegionVerify+0x24>
 80099f6:	2b05      	cmp	r3, #5
 80099f8:	d007      	beq.n	8009a0a <RegionVerify+0x32>
 80099fa:	e014      	b.n	8009a26 <RegionVerify+0x4e>
    {
        AS923_VERIFY( );
 80099fc:	79bb      	ldrb	r3, [r7, #6]
 80099fe:	4619      	mov	r1, r3
 8009a00:	6838      	ldr	r0, [r7, #0]
 8009a02:	f000 fc11 	bl	800a228 <RegionAS923Verify>
 8009a06:	4603      	mov	r3, r0
 8009a08:	e00e      	b.n	8009a28 <RegionVerify+0x50>
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8009a0a:	79bb      	ldrb	r3, [r7, #6]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6838      	ldr	r0, [r7, #0]
 8009a10:	f002 f974 	bl	800bcfc <RegionEU868Verify>
 8009a14:	4603      	mov	r3, r0
 8009a16:	e007      	b.n	8009a28 <RegionVerify+0x50>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8009a18:	79bb      	ldrb	r3, [r7, #6]
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6838      	ldr	r0, [r7, #0]
 8009a1e:	f003 f871 	bl	800cb04 <RegionUS915Verify>
 8009a22:	4603      	mov	r3, r0
 8009a24:	e000      	b.n	8009a28 <RegionVerify+0x50>
        RU864_VERIFY( );
        default:
        {
            return false;
 8009a26:	2300      	movs	r3, #0
        }
    }
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <RegionChanMaskSet>:
        }
    }
}

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	4603      	mov	r3, r0
 8009a38:	6039      	str	r1, [r7, #0]
 8009a3a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009a3c:	79fb      	ldrb	r3, [r7, #7]
 8009a3e:	2b08      	cmp	r3, #8
 8009a40:	d010      	beq.n	8009a64 <RegionChanMaskSet+0x34>
 8009a42:	2b08      	cmp	r3, #8
 8009a44:	dc13      	bgt.n	8009a6e <RegionChanMaskSet+0x3e>
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d002      	beq.n	8009a50 <RegionChanMaskSet+0x20>
 8009a4a:	2b05      	cmp	r3, #5
 8009a4c:	d005      	beq.n	8009a5a <RegionChanMaskSet+0x2a>
 8009a4e:	e00e      	b.n	8009a6e <RegionChanMaskSet+0x3e>
    {
        AS923_CHAN_MASK_SET( );
 8009a50:	6838      	ldr	r0, [r7, #0]
 8009a52:	f000 fc87 	bl	800a364 <RegionAS923ChanMaskSet>
 8009a56:	4603      	mov	r3, r0
 8009a58:	e00a      	b.n	8009a70 <RegionChanMaskSet+0x40>
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8009a5a:	6838      	ldr	r0, [r7, #0]
 8009a5c:	f002 f9ca 	bl	800bdf4 <RegionEU868ChanMaskSet>
 8009a60:	4603      	mov	r3, r0
 8009a62:	e005      	b.n	8009a70 <RegionChanMaskSet+0x40>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8009a64:	6838      	ldr	r0, [r7, #0]
 8009a66:	f003 f8b5 	bl	800cbd4 <RegionUS915ChanMaskSet>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	e000      	b.n	8009a70 <RegionChanMaskSet+0x40>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8009a6e:	2300      	movs	r3, #0
        }
    }
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	603b      	str	r3, [r7, #0]
 8009a80:	4603      	mov	r3, r0
 8009a82:	71fb      	strb	r3, [r7, #7]
 8009a84:	460b      	mov	r3, r1
 8009a86:	71bb      	strb	r3, [r7, #6]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	717b      	strb	r3, [r7, #5]
    switch( region )
 8009a8c:	79fb      	ldrb	r3, [r7, #7]
 8009a8e:	2b08      	cmp	r3, #8
 8009a90:	d016      	beq.n	8009ac0 <RegionComputeRxWindowParameters+0x48>
 8009a92:	2b08      	cmp	r3, #8
 8009a94:	dc1c      	bgt.n	8009ad0 <RegionComputeRxWindowParameters+0x58>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d002      	beq.n	8009aa0 <RegionComputeRxWindowParameters+0x28>
 8009a9a:	2b05      	cmp	r3, #5
 8009a9c:	d008      	beq.n	8009ab0 <RegionComputeRxWindowParameters+0x38>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8009a9e:	e017      	b.n	8009ad0 <RegionComputeRxWindowParameters+0x58>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 8009aa0:	7979      	ldrb	r1, [r7, #5]
 8009aa2:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	f000 fc85 	bl	800a3b8 <RegionAS923ComputeRxWindowParameters>
 8009aae:	e010      	b.n	8009ad2 <RegionComputeRxWindowParameters+0x5a>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8009ab0:	7979      	ldrb	r1, [r7, #5]
 8009ab2:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	f002 f9c5 	bl	800be48 <RegionEU868ComputeRxWindowParameters>
 8009abe:	e008      	b.n	8009ad2 <RegionComputeRxWindowParameters+0x5a>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8009ac0:	7979      	ldrb	r1, [r7, #5]
 8009ac2:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	f003 f8ed 	bl	800cca8 <RegionUS915ComputeRxWindowParameters>
 8009ace:	e000      	b.n	8009ad2 <RegionComputeRxWindowParameters+0x5a>
            break;
 8009ad0:	bf00      	nop
        }
    }
}
 8009ad2:	bf00      	nop
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	60b9      	str	r1, [r7, #8]
 8009ae4:	607a      	str	r2, [r7, #4]
 8009ae6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	2b08      	cmp	r3, #8
 8009aec:	d012      	beq.n	8009b14 <RegionRxConfig+0x3a>
 8009aee:	2b08      	cmp	r3, #8
 8009af0:	dc16      	bgt.n	8009b20 <RegionRxConfig+0x46>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <RegionRxConfig+0x22>
 8009af6:	2b05      	cmp	r3, #5
 8009af8:	d006      	beq.n	8009b08 <RegionRxConfig+0x2e>
 8009afa:	e011      	b.n	8009b20 <RegionRxConfig+0x46>
    {
        AS923_RX_CONFIG( );
 8009afc:	6879      	ldr	r1, [r7, #4]
 8009afe:	68b8      	ldr	r0, [r7, #8]
 8009b00:	f000 fcb4 	bl	800a46c <RegionAS923RxConfig>
 8009b04:	4603      	mov	r3, r0
 8009b06:	e00c      	b.n	8009b22 <RegionRxConfig+0x48>
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8009b08:	6879      	ldr	r1, [r7, #4]
 8009b0a:	68b8      	ldr	r0, [r7, #8]
 8009b0c:	f002 f9f6 	bl	800befc <RegionEU868RxConfig>
 8009b10:	4603      	mov	r3, r0
 8009b12:	e006      	b.n	8009b22 <RegionRxConfig+0x48>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8009b14:	6879      	ldr	r1, [r7, #4]
 8009b16:	68b8      	ldr	r0, [r7, #8]
 8009b18:	f003 f910 	bl	800cd3c <RegionUS915RxConfig>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	e000      	b.n	8009b22 <RegionRxConfig+0x48>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8009b20:	2300      	movs	r3, #0
        }
    }
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b084      	sub	sp, #16
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
 8009b34:	603b      	str	r3, [r7, #0]
 8009b36:	4603      	mov	r3, r0
 8009b38:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009b3a:	7bfb      	ldrb	r3, [r7, #15]
 8009b3c:	2b08      	cmp	r3, #8
 8009b3e:	d014      	beq.n	8009b6a <RegionTxConfig+0x40>
 8009b40:	2b08      	cmp	r3, #8
 8009b42:	dc19      	bgt.n	8009b78 <RegionTxConfig+0x4e>
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d002      	beq.n	8009b4e <RegionTxConfig+0x24>
 8009b48:	2b05      	cmp	r3, #5
 8009b4a:	d007      	beq.n	8009b5c <RegionTxConfig+0x32>
 8009b4c:	e014      	b.n	8009b78 <RegionTxConfig+0x4e>
    {
        AS923_TX_CONFIG( );
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	6879      	ldr	r1, [r7, #4]
 8009b52:	68b8      	ldr	r0, [r7, #8]
 8009b54:	f000 fd5a 	bl	800a60c <RegionAS923TxConfig>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	e00e      	b.n	8009b7a <RegionTxConfig+0x50>
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	6879      	ldr	r1, [r7, #4]
 8009b60:	68b8      	ldr	r0, [r7, #8]
 8009b62:	f002 fa9b 	bl	800c09c <RegionEU868TxConfig>
 8009b66:	4603      	mov	r3, r0
 8009b68:	e007      	b.n	8009b7a <RegionTxConfig+0x50>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	6879      	ldr	r1, [r7, #4]
 8009b6e:	68b8      	ldr	r0, [r7, #8]
 8009b70:	f003 f968 	bl	800ce44 <RegionUS915TxConfig>
 8009b74:	4603      	mov	r3, r0
 8009b76:	e000      	b.n	8009b7a <RegionTxConfig+0x50>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8009b78:	2300      	movs	r3, #0
        }
    }
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <RegionAlternateDr>:
        }
    }
}

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	4603      	mov	r3, r0
 8009b8a:	71fb      	strb	r3, [r7, #7]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	71bb      	strb	r3, [r7, #6]
 8009b90:	4613      	mov	r3, r2
 8009b92:	717b      	strb	r3, [r7, #5]
    switch( region )
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	2b08      	cmp	r3, #8
 8009b98:	d018      	beq.n	8009bcc <RegionAlternateDr+0x4a>
 8009b9a:	2b08      	cmp	r3, #8
 8009b9c:	dc1f      	bgt.n	8009bde <RegionAlternateDr+0x5c>
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d002      	beq.n	8009ba8 <RegionAlternateDr+0x26>
 8009ba2:	2b05      	cmp	r3, #5
 8009ba4:	d009      	beq.n	8009bba <RegionAlternateDr+0x38>
 8009ba6:	e01a      	b.n	8009bde <RegionAlternateDr+0x5c>
    {
        AS923_ALTERNATE_DR( );
 8009ba8:	797a      	ldrb	r2, [r7, #5]
 8009baa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009bae:	4611      	mov	r1, r2
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 fdfb 	bl	800a7ac <RegionAS923AlternateDr>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	e012      	b.n	8009be0 <RegionAlternateDr+0x5e>
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8009bba:	797a      	ldrb	r2, [r7, #5]
 8009bbc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009bc0:	4611      	mov	r1, r2
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f002 fb3a 	bl	800c23c <RegionEU868AlternateDr>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	e009      	b.n	8009be0 <RegionAlternateDr+0x5e>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8009bcc:	797a      	ldrb	r2, [r7, #5]
 8009bce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009bd2:	4611      	mov	r1, r2
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f003 f9e1 	bl	800cf9c <RegionUS915AlternateDr>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	e000      	b.n	8009be0 <RegionAlternateDr+0x5e>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8009bde:	2300      	movs	r3, #0
        }
    }
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60b9      	str	r1, [r7, #8]
 8009bf0:	607a      	str	r2, [r7, #4]
 8009bf2:	603b      	str	r3, [r7, #0]
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
 8009bfa:	2b08      	cmp	r3, #8
 8009bfc:	d016      	beq.n	8009c2c <RegionNextChannel+0x44>
 8009bfe:	2b08      	cmp	r3, #8
 8009c00:	dc1c      	bgt.n	8009c3c <RegionNextChannel+0x54>
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d002      	beq.n	8009c0c <RegionNextChannel+0x24>
 8009c06:	2b05      	cmp	r3, #5
 8009c08:	d008      	beq.n	8009c1c <RegionNextChannel+0x34>
 8009c0a:	e017      	b.n	8009c3c <RegionNextChannel+0x54>
    {
        AS923_NEXT_CHANNEL( );
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	6879      	ldr	r1, [r7, #4]
 8009c12:	68b8      	ldr	r0, [r7, #8]
 8009c14:	f000 fdd8 	bl	800a7c8 <RegionAS923NextChannel>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	e010      	b.n	8009c3e <RegionNextChannel+0x56>
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	6879      	ldr	r1, [r7, #4]
 8009c22:	68b8      	ldr	r0, [r7, #8]
 8009c24:	f002 fb1a 	bl	800c25c <RegionEU868NextChannel>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	e008      	b.n	8009c3e <RegionNextChannel+0x56>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	6879      	ldr	r1, [r7, #4]
 8009c32:	68b8      	ldr	r0, [r7, #8]
 8009c34:	f003 f9ee 	bl	800d014 <RegionUS915NextChannel>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	e000      	b.n	8009c3e <RegionNextChannel+0x56>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8009c3c:	2309      	movs	r3, #9
        }
    }
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b082      	sub	sp, #8
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	6039      	str	r1, [r7, #0]
 8009c50:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009c52:	79fb      	ldrb	r3, [r7, #7]
 8009c54:	2b08      	cmp	r3, #8
 8009c56:	d00e      	beq.n	8009c76 <RegionSetContinuousWave+0x30>
 8009c58:	2b08      	cmp	r3, #8
 8009c5a:	dc10      	bgt.n	8009c7e <RegionSetContinuousWave+0x38>
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <RegionSetContinuousWave+0x20>
 8009c60:	2b05      	cmp	r3, #5
 8009c62:	d004      	beq.n	8009c6e <RegionSetContinuousWave+0x28>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8009c64:	e00b      	b.n	8009c7e <RegionSetContinuousWave+0x38>
        AS923_SET_CONTINUOUS_WAVE( );
 8009c66:	6838      	ldr	r0, [r7, #0]
 8009c68:	f000 fe5c 	bl	800a924 <RegionAS923SetContinuousWave>
 8009c6c:	e008      	b.n	8009c80 <RegionSetContinuousWave+0x3a>
        EU868_SET_CONTINUOUS_WAVE( );
 8009c6e:	6838      	ldr	r0, [r7, #0]
 8009c70:	f002 fba2 	bl	800c3b8 <RegionEU868SetContinuousWave>
 8009c74:	e004      	b.n	8009c80 <RegionSetContinuousWave+0x3a>
        US915_SET_CONTINUOUS_WAVE( );
 8009c76:	6838      	ldr	r0, [r7, #0]
 8009c78:	f003 fac0 	bl	800d1fc <RegionUS915SetContinuousWave>
 8009c7c:	e000      	b.n	8009c80 <RegionSetContinuousWave+0x3a>
            break;
 8009c7e:	bf00      	nop
        }
    }
}
 8009c80:	bf00      	nop
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8009c88:	b590      	push	{r4, r7, lr}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4604      	mov	r4, r0
 8009c90:	4608      	mov	r0, r1
 8009c92:	4611      	mov	r1, r2
 8009c94:	461a      	mov	r2, r3
 8009c96:	4623      	mov	r3, r4
 8009c98:	71fb      	strb	r3, [r7, #7]
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	71bb      	strb	r3, [r7, #6]
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	717b      	strb	r3, [r7, #5]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	713b      	strb	r3, [r7, #4]
    switch( region )
 8009ca6:	79fb      	ldrb	r3, [r7, #7]
 8009ca8:	2b08      	cmp	r3, #8
 8009caa:	d01a      	beq.n	8009ce2 <RegionApplyDrOffset+0x5a>
 8009cac:	2b08      	cmp	r3, #8
 8009cae:	dc22      	bgt.n	8009cf6 <RegionApplyDrOffset+0x6e>
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d002      	beq.n	8009cba <RegionApplyDrOffset+0x32>
 8009cb4:	2b05      	cmp	r3, #5
 8009cb6:	d00a      	beq.n	8009cce <RegionApplyDrOffset+0x46>
 8009cb8:	e01d      	b.n	8009cf6 <RegionApplyDrOffset+0x6e>
    {
        AS923_APPLY_DR_OFFSET( );
 8009cba:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8009cbe:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8009cc2:	79bb      	ldrb	r3, [r7, #6]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 fe7b 	bl	800a9c0 <RegionAS923ApplyDrOffset>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	e014      	b.n	8009cf8 <RegionApplyDrOffset+0x70>
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8009cce:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8009cd2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8009cd6:	79bb      	ldrb	r3, [r7, #6]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f002 fbbb 	bl	800c454 <RegionEU868ApplyDrOffset>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	e00a      	b.n	8009cf8 <RegionApplyDrOffset+0x70>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8009ce2:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8009ce6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8009cea:	79bb      	ldrb	r3, [r7, #6]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f003 fadb 	bl	800d2a8 <RegionUS915ApplyDrOffset>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	e000      	b.n	8009cf8 <RegionApplyDrOffset+0x70>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8009cf6:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd90      	pop	{r4, r7, pc}

08009d00 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8009d06:	4b04      	ldr	r3, [pc, #16]	@ (8009d18 <RegionGetVersion+0x18>)
 8009d08:	607b      	str	r3, [r7, #4]

    return version;
 8009d0a:	687b      	ldr	r3, [r7, #4]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bc80      	pop	{r7}
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	01010003 	.word	0x01010003

08009d1c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8009d24:	4b0d      	ldr	r3, [pc, #52]	@ (8009d5c <VerifyRfFreq+0x40>)
 8009d26:	6a1b      	ldr	r3, [r3, #32]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	4798      	blx	r3
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	f083 0301 	eor.w	r3, r3, #1
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <VerifyRfFreq+0x20>
    {
        return false;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	e00a      	b.n	8009d52 <VerifyRfFreq+0x36>
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a08      	ldr	r2, [pc, #32]	@ (8009d60 <VerifyRfFreq+0x44>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d903      	bls.n	8009d4c <VerifyRfFreq+0x30>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a07      	ldr	r2, [pc, #28]	@ (8009d64 <VerifyRfFreq+0x48>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d901      	bls.n	8009d50 <VerifyRfFreq+0x34>
    {
        return false;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	e000      	b.n	8009d52 <VerifyRfFreq+0x36>
    }
    return true;
 8009d50:	2301      	movs	r3, #1
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	08012a80 	.word	0x08012a80
 8009d60:	3689cabf 	.word	0x3689cabf
 8009d64:	37502800 	.word	0x37502800

08009d68 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8009d68:	b590      	push	{r4, r7, lr}
 8009d6a:	b08b      	sub	sp, #44	@ 0x2c
 8009d6c:	af04      	add	r7, sp, #16
 8009d6e:	4603      	mov	r3, r0
 8009d70:	460a      	mov	r2, r1
 8009d72:	71fb      	strb	r3, [r7, #7]
 8009d74:	4613      	mov	r3, r2
 8009d76:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAS923[datarate];
 8009d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8009dfc <GetTimeOnAir+0x94>)
 8009d7e:	5cd3      	ldrb	r3, [r2, r3]
 8009d80:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 8009d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d86:	491e      	ldr	r1, [pc, #120]	@ (8009e00 <GetTimeOnAir+0x98>)
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f001 fcd1 	bl	800b730 <RegionCommonGetBandwidth>
 8009d8e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8009d90:	2300      	movs	r3, #0
 8009d92:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8009d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d98:	2b07      	cmp	r3, #7
 8009d9a:	d118      	bne.n	8009dce <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8009d9c:	4b19      	ldr	r3, [pc, #100]	@ (8009e04 <GetTimeOnAir+0x9c>)
 8009d9e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009da0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009da4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009da8:	fb02 f303 	mul.w	r3, r2, r3
 8009dac:	4619      	mov	r1, r3
 8009dae:	88bb      	ldrh	r3, [r7, #4]
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	2201      	movs	r2, #1
 8009db4:	9203      	str	r2, [sp, #12]
 8009db6:	9302      	str	r3, [sp, #8]
 8009db8:	2300      	movs	r3, #0
 8009dba:	9301      	str	r3, [sp, #4]
 8009dbc:	2305      	movs	r3, #5
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	460a      	mov	r2, r1
 8009dc4:	68f9      	ldr	r1, [r7, #12]
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	47a0      	blx	r4
 8009dca:	6178      	str	r0, [r7, #20]
 8009dcc:	e011      	b.n	8009df2 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8009dce:	4b0d      	ldr	r3, [pc, #52]	@ (8009e04 <GetTimeOnAir+0x9c>)
 8009dd0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009dd2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009dd6:	88bb      	ldrh	r3, [r7, #4]
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2101      	movs	r1, #1
 8009ddc:	9103      	str	r1, [sp, #12]
 8009dde:	9302      	str	r3, [sp, #8]
 8009de0:	2300      	movs	r3, #0
 8009de2:	9301      	str	r3, [sp, #4]
 8009de4:	2308      	movs	r3, #8
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	2301      	movs	r3, #1
 8009dea:	68f9      	ldr	r1, [r7, #12]
 8009dec:	2001      	movs	r0, #1
 8009dee:	47a0      	blx	r4
 8009df0:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8009df2:	697b      	ldr	r3, [r7, #20]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	371c      	adds	r7, #28
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd90      	pop	{r4, r7, pc}
 8009dfc:	0801267c 	.word	0x0801267c
 8009e00:	08012684 	.word	0x08012684
 8009e04:	08012a80 	.word	0x08012a80

08009e08 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b088      	sub	sp, #32
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8009e10:	2300      	movs	r3, #0
 8009e12:	61bb      	str	r3, [r7, #24]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	2b38      	cmp	r3, #56	@ 0x38
 8009e1c:	f200 8154 	bhi.w	800a0c8 <RegionAS923GetPhyParam+0x2c0>
 8009e20:	a201      	add	r2, pc, #4	@ (adr r2, 8009e28 <RegionAS923GetPhyParam+0x20>)
 8009e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e26:	bf00      	nop
 8009e28:	08009f0d 	.word	0x08009f0d
 8009e2c:	08009f21 	.word	0x08009f21
 8009e30:	0800a0c9 	.word	0x0800a0c9
 8009e34:	0800a0c9 	.word	0x0800a0c9
 8009e38:	0800a0c9 	.word	0x0800a0c9
 8009e3c:	08009f35 	.word	0x08009f35
 8009e40:	0800a0c9 	.word	0x0800a0c9
 8009e44:	08009f7b 	.word	0x08009f7b
 8009e48:	0800a0c9 	.word	0x0800a0c9
 8009e4c:	08009f81 	.word	0x08009f81
 8009e50:	08009f87 	.word	0x08009f87
 8009e54:	08009f8d 	.word	0x08009f8d
 8009e58:	08009f93 	.word	0x08009f93
 8009e5c:	08009fbb 	.word	0x08009fbb
 8009e60:	08009fe3 	.word	0x08009fe3
 8009e64:	08009fe9 	.word	0x08009fe9
 8009e68:	08009ff1 	.word	0x08009ff1
 8009e6c:	08009ff9 	.word	0x08009ff9
 8009e70:	0800a001 	.word	0x0800a001
 8009e74:	0800a009 	.word	0x0800a009
 8009e78:	0800a011 	.word	0x0800a011
 8009e7c:	0800a019 	.word	0x0800a019
 8009e80:	0800a02d 	.word	0x0800a02d
 8009e84:	0800a033 	.word	0x0800a033
 8009e88:	0800a039 	.word	0x0800a039
 8009e8c:	0800a03f 	.word	0x0800a03f
 8009e90:	0800a04b 	.word	0x0800a04b
 8009e94:	0800a057 	.word	0x0800a057
 8009e98:	0800a05d 	.word	0x0800a05d
 8009e9c:	0800a065 	.word	0x0800a065
 8009ea0:	0800a06b 	.word	0x0800a06b
 8009ea4:	0800a071 	.word	0x0800a071
 8009ea8:	0800a079 	.word	0x0800a079
 8009eac:	08009f3b 	.word	0x08009f3b
 8009eb0:	0800a0c9 	.word	0x0800a0c9
 8009eb4:	0800a0c9 	.word	0x0800a0c9
 8009eb8:	0800a0c9 	.word	0x0800a0c9
 8009ebc:	0800a0c9 	.word	0x0800a0c9
 8009ec0:	0800a0c9 	.word	0x0800a0c9
 8009ec4:	0800a0c9 	.word	0x0800a0c9
 8009ec8:	0800a0c9 	.word	0x0800a0c9
 8009ecc:	0800a0c9 	.word	0x0800a0c9
 8009ed0:	0800a0c9 	.word	0x0800a0c9
 8009ed4:	0800a0c9 	.word	0x0800a0c9
 8009ed8:	0800a0c9 	.word	0x0800a0c9
 8009edc:	0800a0c9 	.word	0x0800a0c9
 8009ee0:	0800a0c9 	.word	0x0800a0c9
 8009ee4:	0800a07f 	.word	0x0800a07f
 8009ee8:	0800a085 	.word	0x0800a085
 8009eec:	0800a093 	.word	0x0800a093
 8009ef0:	0800a0c9 	.word	0x0800a0c9
 8009ef4:	0800a0c9 	.word	0x0800a0c9
 8009ef8:	0800a099 	.word	0x0800a099
 8009efc:	0800a09f 	.word	0x0800a09f
 8009f00:	0800a0c9 	.word	0x0800a0c9
 8009f04:	0800a0a5 	.word	0x0800a0a5
 8009f08:	0800a0b5 	.word	0x0800a0b5
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	78db      	ldrb	r3, [r3, #3]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d102      	bne.n	8009f1a <RegionAS923GetPhyParam+0x112>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 8009f14:	2300      	movs	r3, #0
 8009f16:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8009f18:	e0d7      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	61bb      	str	r3, [r7, #24]
            break;
 8009f1e:	e0d4      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	789b      	ldrb	r3, [r3, #2]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d102      	bne.n	8009f2e <RegionAS923GetPhyParam+0x126>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8009f2c:	e0cd      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8009f2e:	2302      	movs	r3, #2
 8009f30:	61bb      	str	r3, [r7, #24]
            break;
 8009f32:	e0ca      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8009f34:	2302      	movs	r3, #2
 8009f36:	61bb      	str	r3, [r7, #24]
            break;
 8009f38:	e0c7      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8009f40:	733b      	strb	r3, [r7, #12]
 8009f42:	2307      	movs	r3, #7
 8009f44:	737b      	strb	r3, [r7, #13]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	789b      	ldrb	r3, [r3, #2]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <RegionAS923GetPhyParam+0x14a>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	e000      	b.n	8009f54 <RegionAS923GetPhyParam+0x14c>
 8009f52:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8009f54:	73bb      	strb	r3, [r7, #14]
 8009f56:	2310      	movs	r3, #16
 8009f58:	73fb      	strb	r3, [r7, #15]
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8009f5a:	4b5f      	ldr	r3, [pc, #380]	@ (800a0d8 <RegionAS923GetPhyParam+0x2d0>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8009f62:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8009f64:	4b5c      	ldr	r3, [pc, #368]	@ (800a0d8 <RegionAS923GetPhyParam+0x2d0>)
 8009f66:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8009f68:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8009f6a:	f107 030c 	add.w	r3, r7, #12
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f001 fb8b 	bl	800b68a <RegionCommonGetNextLowerTxDr>
 8009f74:	4603      	mov	r3, r0
 8009f76:	61bb      	str	r3, [r7, #24]
            break;
 8009f78:	e0a7      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	61bb      	str	r3, [r7, #24]
            break;
 8009f7e:	e0a4      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 8009f80:	2300      	movs	r3, #0
 8009f82:	61bb      	str	r3, [r7, #24]
            break;
 8009f84:	e0a1      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8009f86:	2340      	movs	r3, #64	@ 0x40
 8009f88:	61bb      	str	r3, [r7, #24]
            break;
 8009f8a:	e09e      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8009f8c:	2320      	movs	r3, #32
 8009f8e:	61bb      	str	r3, [r7, #24]
            break;
 8009f90:	e09b      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	789b      	ldrb	r3, [r3, #2]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d107      	bne.n	8009faa <RegionAS923GetPhyParam+0x1a2>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	4b4e      	ldr	r3, [pc, #312]	@ (800a0dc <RegionAS923GetPhyParam+0x2d4>)
 8009fa4:	5c9b      	ldrb	r3, [r3, r2]
 8009fa6:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 8009fa8:	e08f      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	4b4b      	ldr	r3, [pc, #300]	@ (800a0e0 <RegionAS923GetPhyParam+0x2d8>)
 8009fb4:	5c9b      	ldrb	r3, [r3, r2]
 8009fb6:	61bb      	str	r3, [r7, #24]
            break;
 8009fb8:	e087      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	789b      	ldrb	r3, [r3, #2]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d107      	bne.n	8009fd2 <RegionAS923GetPhyParam+0x1ca>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009fc8:	461a      	mov	r2, r3
 8009fca:	4b46      	ldr	r3, [pc, #280]	@ (800a0e4 <RegionAS923GetPhyParam+0x2dc>)
 8009fcc:	5c9b      	ldrb	r3, [r3, r2]
 8009fce:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 8009fd0:	e07b      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	4b41      	ldr	r3, [pc, #260]	@ (800a0e0 <RegionAS923GetPhyParam+0x2d8>)
 8009fdc:	5c9b      	ldrb	r3, [r3, r2]
 8009fde:	61bb      	str	r3, [r7, #24]
            break;
 8009fe0:	e073      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	61bb      	str	r3, [r7, #24]
            break;
 8009fe6:	e070      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 8009fe8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009fec:	61bb      	str	r3, [r7, #24]
            break;
 8009fee:	e06c      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8009ff0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009ff4:	61bb      	str	r3, [r7, #24]
            break;
 8009ff6:	e068      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8009ff8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8009ffc:	61bb      	str	r3, [r7, #24]
            break;
 8009ffe:	e064      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800a000:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a004:	61bb      	str	r3, [r7, #24]
            break;
 800a006:	e060      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800a008:	f241 7370 	movw	r3, #6000	@ 0x1770
 800a00c:	61bb      	str	r3, [r7, #24]
            break;
 800a00e:	e05c      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800a010:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a014:	61bb      	str	r3, [r7, #24]
            break;
 800a016:	e058      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800a018:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a01c:	4832      	ldr	r0, [pc, #200]	@ (800a0e8 <RegionAS923GetPhyParam+0x2e0>)
 800a01e:	f004 fc15 	bl	800e84c <randr>
 800a022:	4603      	mov	r3, r0
 800a024:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800a028:	61bb      	str	r3, [r7, #24]
            break;
 800a02a:	e04e      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 800a02c:	2300      	movs	r3, #0
 800a02e:	61bb      	str	r3, [r7, #24]
            break;
 800a030:	e04b      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 800a032:	4b2e      	ldr	r3, [pc, #184]	@ (800a0ec <RegionAS923GetPhyParam+0x2e4>)
 800a034:	61bb      	str	r3, [r7, #24]
            break;
 800a036:	e048      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 800a038:	2302      	movs	r3, #2
 800a03a:	61bb      	str	r3, [r7, #24]
            break;
 800a03c:	e045      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800a03e:	4b26      	ldr	r3, [pc, #152]	@ (800a0d8 <RegionAS923GetPhyParam+0x2d0>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800a046:	61bb      	str	r3, [r7, #24]
            break;
 800a048:	e03f      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800a04a:	4b23      	ldr	r3, [pc, #140]	@ (800a0d8 <RegionAS923GetPhyParam+0x2d0>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800a052:	61bb      	str	r3, [r7, #24]
            break;
 800a054:	e039      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 800a056:	2310      	movs	r3, #16
 800a058:	61bb      	str	r3, [r7, #24]
            break;
 800a05a:	e036      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 800a05c:	4b1e      	ldr	r3, [pc, #120]	@ (800a0d8 <RegionAS923GetPhyParam+0x2d0>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	61bb      	str	r3, [r7, #24]
            break;
 800a062:	e032      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 800a064:	2301      	movs	r3, #1
 800a066:	61bb      	str	r3, [r7, #24]
            break;
 800a068:	e02f      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 800a06a:	2301      	movs	r3, #1
 800a06c:	61bb      	str	r3, [r7, #24]
            break;
 800a06e:	e02c      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 800a070:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800a074:	61bb      	str	r3, [r7, #24]
            break;
 800a076:	e028      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 800a078:	4b1d      	ldr	r3, [pc, #116]	@ (800a0f0 <RegionAS923GetPhyParam+0x2e8>)
 800a07a:	61bb      	str	r3, [r7, #24]
            break;
 800a07c:	e025      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 800a07e:	4b1d      	ldr	r3, [pc, #116]	@ (800a0f4 <RegionAS923GetPhyParam+0x2ec>)
 800a080:	61bb      	str	r3, [r7, #24]
            break;
 800a082:	e022      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 800a084:	2311      	movs	r3, #17
 800a086:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 800a088:	2302      	movs	r3, #2
 800a08a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 800a08c:	2300      	movs	r3, #0
 800a08e:	76bb      	strb	r3, [r7, #26]
            break;
 800a090:	e01b      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 800a092:	2303      	movs	r3, #3
 800a094:	61bb      	str	r3, [r7, #24]
            break;
 800a096:	e018      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
 800a098:	4b16      	ldr	r3, [pc, #88]	@ (800a0f4 <RegionAS923GetPhyParam+0x2ec>)
 800a09a:	61bb      	str	r3, [r7, #24]
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
#endif /* REGION_VERSION */
            break;
 800a09c:	e015      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	61bb      	str	r3, [r7, #24]
            break;
 800a0a2:	e012      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	4b12      	ldr	r3, [pc, #72]	@ (800a0f8 <RegionAS923GetPhyParam+0x2f0>)
 800a0ae:	5c9b      	ldrb	r3, [r3, r2]
 800a0b0:	61bb      	str	r3, [r7, #24]
            break;
 800a0b2:	e00a      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a0ba:	4910      	ldr	r1, [pc, #64]	@ (800a0fc <RegionAS923GetPhyParam+0x2f4>)
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f001 fb37 	bl	800b730 <RegionCommonGetBandwidth>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	61bb      	str	r3, [r7, #24]
            break;
 800a0c6:	e000      	b.n	800a0ca <RegionAS923GetPhyParam+0x2c2>
        }
        default:
        {
            break;
 800a0c8:	bf00      	nop
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	61fb      	str	r3, [r7, #28]
 800a0ce:	69fb      	ldr	r3, [r7, #28]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3720      	adds	r7, #32
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	200012b4 	.word	0x200012b4
 800a0dc:	080126a4 	.word	0x080126a4
 800a0e0:	080126b4 	.word	0x080126b4
 800a0e4:	080126ac 	.word	0x080126ac
 800a0e8:	fffffc18 	.word	0xfffffc18
 800a0ec:	3706ea00 	.word	0x3706ea00
 800a0f0:	4009999a 	.word	0x4009999a
 800a0f4:	3709f740 	.word	0x3709f740
 800a0f8:	0801267c 	.word	0x0801267c
 800a0fc:	08012684 	.word	0x08012684

0800a100 <RegionAS923InitDefaults>:
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b08e      	sub	sp, #56	@ 0x38
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 800a108:	2364      	movs	r3, #100	@ 0x64
 800a10a:	843b      	strh	r3, [r7, #32]
 800a10c:	2300      	movs	r3, #0
 800a10e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a112:	2300      	movs	r3, #0
 800a114:	627b      	str	r3, [r7, #36]	@ 0x24
 800a116:	2300      	movs	r3, #0
 800a118:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a11a:	2300      	movs	r3, #0
 800a11c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a11e:	2300      	movs	r3, #0
 800a120:	633b      	str	r3, [r7, #48]	@ 0x30
 800a122:	2300      	movs	r3, #0
 800a124:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    {
        AS923_BAND0
    };

    switch( params->Type )
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	7a1b      	ldrb	r3, [r3, #8]
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d05f      	beq.n	800a1f0 <RegionAS923InitDefaults+0xf0>
 800a130:	2b02      	cmp	r3, #2
 800a132:	dc6c      	bgt.n	800a20e <RegionAS923InitDefaults+0x10e>
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <RegionAS923InitDefaults+0x3e>
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d044      	beq.n	800a1c6 <RegionAS923InitDefaults+0xc6>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 800a13c:	e067      	b.n	800a20e <RegionAS923InitDefaults+0x10e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d064      	beq.n	800a210 <RegionAS923InitDefaults+0x110>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d060      	beq.n	800a210 <RegionAS923InitDefaults+0x110>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a31      	ldr	r2, [pc, #196]	@ (800a218 <RegionAS923InitDefaults+0x118>)
 800a154:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	4a30      	ldr	r2, [pc, #192]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a15c:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 800a15e:	4b2e      	ldr	r3, [pc, #184]	@ (800a218 <RegionAS923InitDefaults+0x118>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4618      	mov	r0, r3
 800a164:	f107 0320 	add.w	r3, r7, #32
 800a168:	2218      	movs	r2, #24
 800a16a:	4619      	mov	r1, r3
 800a16c:	f004 fb85 	bl	800e87a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 800a170:	4b2a      	ldr	r3, [pc, #168]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a2a      	ldr	r2, [pc, #168]	@ (800a220 <RegionAS923InitDefaults+0x120>)
 800a176:	ca07      	ldmia	r2, {r0, r1, r2}
 800a178:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 800a17c:	4b27      	ldr	r3, [pc, #156]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a28      	ldr	r2, [pc, #160]	@ (800a224 <RegionAS923InitDefaults+0x124>)
 800a182:	330c      	adds	r3, #12
 800a184:	ca07      	ldmia	r2, {r0, r1, r2}
 800a186:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 800a18a:	4b24      	ldr	r3, [pc, #144]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	4b23      	ldr	r3, [pc, #140]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	6812      	ldr	r2, [r2, #0]
 800a194:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 800a196:	4b21      	ldr	r3, [pc, #132]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	4b20      	ldr	r3, [pc, #128]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68d2      	ldr	r2, [r2, #12]
 800a1a0:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 800a1a2:	4b1e      	ldr	r3, [pc, #120]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2203      	movs	r2, #3
 800a1a8:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800a1ac:	4b1b      	ldr	r3, [pc, #108]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 800a1b4:	4b19      	ldr	r3, [pc, #100]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800a1bc:	2201      	movs	r2, #1
 800a1be:	4619      	mov	r1, r3
 800a1c0:	f000 ff1e 	bl	800b000 <RegionCommonChanMaskCopy>
 800a1c4:	e024      	b.n	800a210 <RegionAS923InitDefaults+0x110>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800a1c6:	4b15      	ldr	r3, [pc, #84]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800a1ce:	4b13      	ldr	r3, [pc, #76]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	611a      	str	r2, [r3, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800a1d6:	4b11      	ldr	r3, [pc, #68]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 800a1de:	4b0f      	ldr	r3, [pc, #60]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	f000 ff09 	bl	800b000 <RegionCommonChanMaskCopy>
            break;
 800a1ee:	e00f      	b.n	800a210 <RegionAS923InitDefaults+0x110>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800a1f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	@ 0x480
 800a1f8:	4b08      	ldr	r3, [pc, #32]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	@ 0x48c
 800a200:	4b06      	ldr	r3, [pc, #24]	@ (800a21c <RegionAS923InitDefaults+0x11c>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	430a      	orrs	r2, r1
 800a206:	b292      	uxth	r2, r2
 800a208:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
            break;
 800a20c:	e000      	b.n	800a210 <RegionAS923InitDefaults+0x110>
            break;
 800a20e:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 800a210:	3738      	adds	r7, #56	@ 0x38
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	200012b0 	.word	0x200012b0
 800a21c:	200012b4 	.word	0x200012b4
 800a220:	08012514 	.word	0x08012514
 800a224:	08012520 	.word	0x08012520

0800a228 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AS923 )
    switch( phyAttribute )
 800a234:	78fb      	ldrb	r3, [r7, #3]
 800a236:	2b0f      	cmp	r3, #15
 800a238:	f200 808f 	bhi.w	800a35a <RegionAS923Verify+0x132>
 800a23c:	a201      	add	r2, pc, #4	@ (adr r2, 800a244 <RegionAS923Verify+0x1c>)
 800a23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a242:	bf00      	nop
 800a244:	0800a285 	.word	0x0800a285
 800a248:	0800a35b 	.word	0x0800a35b
 800a24c:	0800a35b 	.word	0x0800a35b
 800a250:	0800a35b 	.word	0x0800a35b
 800a254:	0800a35b 	.word	0x0800a35b
 800a258:	0800a293 	.word	0x0800a293
 800a25c:	0800a2d7 	.word	0x0800a2d7
 800a260:	0800a2f5 	.word	0x0800a2f5
 800a264:	0800a35b 	.word	0x0800a35b
 800a268:	0800a339 	.word	0x0800a339
 800a26c:	0800a339 	.word	0x0800a339
 800a270:	0800a35b 	.word	0x0800a35b
 800a274:	0800a35b 	.word	0x0800a35b
 800a278:	0800a35b 	.word	0x0800a35b
 800a27c:	0800a35b 	.word	0x0800a35b
 800a280:	0800a357 	.word	0x0800a357
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4618      	mov	r0, r3
 800a28a:	f7ff fd47 	bl	8009d1c <VerifyRfFreq>
 800a28e:	4603      	mov	r3, r0
 800a290:	e064      	b.n	800a35c <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	789b      	ldrb	r3, [r3, #2]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10e      	bne.n	800a2b8 <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f993 3000 	ldrsb.w	r3, [r3]
 800a2a0:	2207      	movs	r2, #7
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f000 fe2e 	bl	800af06 <RegionCommonValueInRange>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	bf14      	ite	ne
 800a2b0:	2301      	movne	r3, #1
 800a2b2:	2300      	moveq	r3, #0
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	e051      	b.n	800a35c <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f993 3000 	ldrsb.w	r3, [r3]
 800a2be:	2207      	movs	r2, #7
 800a2c0:	2102      	movs	r1, #2
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f000 fe1f 	bl	800af06 <RegionCommonValueInRange>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	bf14      	ite	ne
 800a2ce:	2301      	movne	r3, #1
 800a2d0:	2300      	moveq	r3, #0
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	e042      	b.n	800a35c <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f993 3000 	ldrsb.w	r3, [r3]
 800a2dc:	2205      	movs	r2, #5
 800a2de:	2100      	movs	r1, #0
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 fe10 	bl	800af06 <RegionCommonValueInRange>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	bf14      	ite	ne
 800a2ec:	2301      	movne	r3, #1
 800a2ee:	2300      	moveq	r3, #0
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	e033      	b.n	800a35c <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	785b      	ldrb	r3, [r3, #1]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10e      	bne.n	800a31a <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f993 3000 	ldrsb.w	r3, [r3]
 800a302:	2207      	movs	r2, #7
 800a304:	2100      	movs	r1, #0
 800a306:	4618      	mov	r0, r3
 800a308:	f000 fdfd 	bl	800af06 <RegionCommonValueInRange>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	bf14      	ite	ne
 800a312:	2301      	movne	r3, #1
 800a314:	2300      	moveq	r3, #0
 800a316:	b2db      	uxtb	r3, r3
 800a318:	e020      	b.n	800a35c <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f993 3000 	ldrsb.w	r3, [r3]
 800a320:	2207      	movs	r2, #7
 800a322:	2102      	movs	r1, #2
 800a324:	4618      	mov	r0, r3
 800a326:	f000 fdee 	bl	800af06 <RegionCommonValueInRange>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	bf14      	ite	ne
 800a330:	2301      	movne	r3, #1
 800a332:	2300      	moveq	r3, #0
 800a334:	b2db      	uxtb	r3, r3
 800a336:	e011      	b.n	800a35c <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f993 3000 	ldrsb.w	r3, [r3]
 800a33e:	2207      	movs	r2, #7
 800a340:	2100      	movs	r1, #0
 800a342:	4618      	mov	r0, r3
 800a344:	f000 fddf 	bl	800af06 <RegionCommonValueInRange>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	bf14      	ite	ne
 800a34e:	2301      	movne	r3, #1
 800a350:	2300      	moveq	r3, #0
 800a352:	b2db      	uxtb	r3, r3
 800a354:	e002      	b.n	800a35c <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 800a356:	2300      	movs	r3, #0
 800a358:	e000      	b.n	800a35c <RegionAS923Verify+0x134>
        }
        default:
            return false;
 800a35a:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <RegionAS923ChanMaskSet>:
    }
#endif /* REGION_AS923 */
}

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	791b      	ldrb	r3, [r3, #4]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d002      	beq.n	800a37a <RegionAS923ChanMaskSet+0x16>
 800a374:	2b01      	cmp	r3, #1
 800a376:	d00b      	beq.n	800a390 <RegionAS923ChanMaskSet+0x2c>
 800a378:	e015      	b.n	800a3a6 <RegionAS923ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800a37a:	4b0e      	ldr	r3, [pc, #56]	@ (800a3b4 <RegionAS923ChanMaskSet+0x50>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2201      	movs	r2, #1
 800a388:	4619      	mov	r1, r3
 800a38a:	f000 fe39 	bl	800b000 <RegionCommonChanMaskCopy>
            break;
 800a38e:	e00c      	b.n	800a3aa <RegionAS923ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800a390:	4b08      	ldr	r3, [pc, #32]	@ (800a3b4 <RegionAS923ChanMaskSet+0x50>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2201      	movs	r2, #1
 800a39e:	4619      	mov	r1, r3
 800a3a0:	f000 fe2e 	bl	800b000 <RegionCommonChanMaskCopy>
            break;
 800a3a4:	e001      	b.n	800a3aa <RegionAS923ChanMaskSet+0x46>
        }
        default:
            return false;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	e000      	b.n	800a3ac <RegionAS923ChanMaskSet+0x48>
    }
    return true;
 800a3aa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	200012b4 	.word	0x200012b4

0800a3b8 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af02      	add	r7, sp, #8
 800a3be:	60ba      	str	r2, [r7, #8]
 800a3c0:	607b      	str	r3, [r7, #4]
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73fb      	strb	r3, [r7, #15]
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800a3ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3d2:	2b07      	cmp	r3, #7
 800a3d4:	bfa8      	it	ge
 800a3d6:	2307      	movge	r3, #7
 800a3d8:	b25a      	sxtb	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a3e4:	491e      	ldr	r1, [pc, #120]	@ (800a460 <RegionAS923ComputeRxWindowParameters+0xa8>)
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f001 f9a2 	bl	800b730 <RegionCommonGetBandwidth>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	b2da      	uxtb	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a3fa:	2b07      	cmp	r3, #7
 800a3fc:	d10a      	bne.n	800a414 <RegionAS923ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a404:	461a      	mov	r2, r3
 800a406:	4b17      	ldr	r3, [pc, #92]	@ (800a464 <RegionAS923ComputeRxWindowParameters+0xac>)
 800a408:	5c9b      	ldrb	r3, [r3, r2]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 ff24 	bl	800b258 <RegionCommonComputeSymbolTimeFsk>
 800a410:	6178      	str	r0, [r7, #20]
 800a412:	e011      	b.n	800a438 <RegionAS923ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a41a:	461a      	mov	r2, r3
 800a41c:	4b11      	ldr	r3, [pc, #68]	@ (800a464 <RegionAS923ComputeRxWindowParameters+0xac>)
 800a41e:	5c9a      	ldrb	r2, [r3, r2]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a426:	4619      	mov	r1, r3
 800a428:	4b0d      	ldr	r3, [pc, #52]	@ (800a460 <RegionAS923ComputeRxWindowParameters+0xa8>)
 800a42a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a42e:	4619      	mov	r1, r3
 800a430:	4610      	mov	r0, r2
 800a432:	f000 fefb 	bl	800b22c <RegionCommonComputeSymbolTimeLoRa>
 800a436:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800a438:	4b0b      	ldr	r3, [pc, #44]	@ (800a468 <RegionAS923ComputeRxWindowParameters+0xb0>)
 800a43a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a43c:	4798      	blx	r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	3308      	adds	r3, #8
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	320c      	adds	r2, #12
 800a446:	7bb9      	ldrb	r1, [r7, #14]
 800a448:	9201      	str	r2, [sp, #4]
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	4603      	mov	r3, r0
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	6978      	ldr	r0, [r7, #20]
 800a452:	f000 ff11 	bl	800b278 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 800a456:	bf00      	nop
 800a458:	3718      	adds	r7, #24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	08012684 	.word	0x08012684
 800a464:	0801267c 	.word	0x0801267c
 800a468:	08012a80 	.word	0x08012a80

0800a46c <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800a46c:	b5b0      	push	{r4, r5, r7, lr}
 800a46e:	b090      	sub	sp, #64	@ 0x40
 800a470:	af0a      	add	r7, sp, #40	@ 0x28
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	785b      	ldrb	r3, [r3, #1]
 800a47a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 800a47c:	2300      	movs	r3, #0
 800a47e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 800a480:	2300      	movs	r3, #0
 800a482:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 800a48a:	4b5a      	ldr	r3, [pc, #360]	@ (800a5f4 <RegionAS923RxConfig+0x188>)
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	4798      	blx	r3
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d001      	beq.n	800a49a <RegionAS923RxConfig+0x2e>
    {
        return false;
 800a496:	2300      	movs	r3, #0
 800a498:	e0a8      	b.n	800a5ec <RegionAS923RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	7cdb      	ldrb	r3, [r3, #19]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d126      	bne.n	800a4f0 <RegionAS923RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800a4a2:	4b55      	ldr	r3, [pc, #340]	@ (800a5f8 <RegionAS923RxConfig+0x18c>)
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	005b      	lsls	r3, r3, #1
 800a4b0:	440b      	add	r3, r1
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800a4ba:	4b4f      	ldr	r3, [pc, #316]	@ (800a5f8 <RegionAS923RxConfig+0x18c>)
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	005b      	lsls	r3, r3, #1
 800a4c8:	440b      	add	r3, r1
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00c      	beq.n	800a4f0 <RegionAS923RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 800a4d6:	4b48      	ldr	r3, [pc, #288]	@ (800a5f8 <RegionAS923RxConfig+0x18c>)
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	4619      	mov	r1, r3
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	005b      	lsls	r3, r3, #1
 800a4e4:	440b      	add	r3, r1
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	3304      	adds	r3, #4
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 800a4f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4f4:	4a41      	ldr	r2, [pc, #260]	@ (800a5fc <RegionAS923RxConfig+0x190>)
 800a4f6:	5cd3      	ldrb	r3, [r2, r3]
 800a4f8:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 800a4fa:	4b3e      	ldr	r3, [pc, #248]	@ (800a5f4 <RegionAS923RxConfig+0x188>)
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	6938      	ldr	r0, [r7, #16]
 800a500:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800a502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a506:	2b07      	cmp	r3, #7
 800a508:	d128      	bne.n	800a55c <RegionAS923RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800a50e:	4b39      	ldr	r3, [pc, #228]	@ (800a5f4 <RegionAS923RxConfig+0x188>)
 800a510:	699c      	ldr	r4, [r3, #24]
 800a512:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a516:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a51a:	fb02 f303 	mul.w	r3, r2, r3
 800a51e:	4619      	mov	r1, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	b29b      	uxth	r3, r3
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	7c92      	ldrb	r2, [r2, #18]
 800a52a:	7df8      	ldrb	r0, [r7, #23]
 800a52c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a52e:	2200      	movs	r2, #0
 800a530:	9208      	str	r2, [sp, #32]
 800a532:	2200      	movs	r2, #0
 800a534:	9207      	str	r2, [sp, #28]
 800a536:	2200      	movs	r2, #0
 800a538:	9206      	str	r2, [sp, #24]
 800a53a:	2201      	movs	r2, #1
 800a53c:	9205      	str	r2, [sp, #20]
 800a53e:	2200      	movs	r2, #0
 800a540:	9204      	str	r2, [sp, #16]
 800a542:	2200      	movs	r2, #0
 800a544:	9203      	str	r2, [sp, #12]
 800a546:	9302      	str	r3, [sp, #8]
 800a548:	2305      	movs	r3, #5
 800a54a:	9301      	str	r3, [sp, #4]
 800a54c:	4b2c      	ldr	r3, [pc, #176]	@ (800a600 <RegionAS923RxConfig+0x194>)
 800a54e:	9300      	str	r3, [sp, #0]
 800a550:	2300      	movs	r3, #0
 800a552:	460a      	mov	r2, r1
 800a554:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a558:	47a0      	blx	r4
 800a55a:	e024      	b.n	800a5a6 <RegionAS923RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 800a55c:	2301      	movs	r3, #1
 800a55e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800a560:	4b24      	ldr	r3, [pc, #144]	@ (800a5f4 <RegionAS923RxConfig+0x188>)
 800a562:	699c      	ldr	r4, [r3, #24]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	789b      	ldrb	r3, [r3, #2]
 800a568:	461d      	mov	r5, r3
 800a56a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	b29b      	uxth	r3, r3
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	7c92      	ldrb	r2, [r2, #18]
 800a578:	7df8      	ldrb	r0, [r7, #23]
 800a57a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a57c:	2201      	movs	r2, #1
 800a57e:	9208      	str	r2, [sp, #32]
 800a580:	2200      	movs	r2, #0
 800a582:	9207      	str	r2, [sp, #28]
 800a584:	2200      	movs	r2, #0
 800a586:	9206      	str	r2, [sp, #24]
 800a588:	2200      	movs	r2, #0
 800a58a:	9205      	str	r2, [sp, #20]
 800a58c:	2200      	movs	r2, #0
 800a58e:	9204      	str	r2, [sp, #16]
 800a590:	2200      	movs	r2, #0
 800a592:	9203      	str	r2, [sp, #12]
 800a594:	9302      	str	r3, [sp, #8]
 800a596:	2308      	movs	r3, #8
 800a598:	9301      	str	r3, [sp, #4]
 800a59a:	2300      	movs	r3, #0
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	2301      	movs	r3, #1
 800a5a0:	460a      	mov	r2, r1
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	7c5b      	ldrb	r3, [r3, #17]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d005      	beq.n	800a5ba <RegionAS923RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 800a5ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5b2:	4a14      	ldr	r2, [pc, #80]	@ (800a604 <RegionAS923RxConfig+0x198>)
 800a5b4:	5cd3      	ldrb	r3, [r2, r3]
 800a5b6:	75bb      	strb	r3, [r7, #22]
 800a5b8:	e004      	b.n	800a5c4 <RegionAS923RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 800a5ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5be:	4a12      	ldr	r2, [pc, #72]	@ (800a608 <RegionAS923RxConfig+0x19c>)
 800a5c0:	5cd3      	ldrb	r3, [r2, r3]
 800a5c2:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800a5c4:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f4 <RegionAS923RxConfig+0x188>)
 800a5c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5c8:	7dba      	ldrb	r2, [r7, #22]
 800a5ca:	320d      	adds	r2, #13
 800a5cc:	b2d1      	uxtb	r1, r2
 800a5ce:	7dfa      	ldrb	r2, [r7, #23]
 800a5d0:	4610      	mov	r0, r2
 800a5d2:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	7cdb      	ldrb	r3, [r3, #19]
 800a5d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800a5dc:	6939      	ldr	r1, [r7, #16]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f001 f8c4 	bl	800b76c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	7bfa      	ldrb	r2, [r7, #15]
 800a5e8:	701a      	strb	r2, [r3, #0]
    return true;
 800a5ea:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3718      	adds	r7, #24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bdb0      	pop	{r4, r5, r7, pc}
 800a5f4:	08012a80 	.word	0x08012a80
 800a5f8:	200012b4 	.word	0x200012b4
 800a5fc:	0801267c 	.word	0x0801267c
 800a600:	00014585 	.word	0x00014585
 800a604:	080126ac 	.word	0x080126ac
 800a608:	080126a4 	.word	0x080126a4

0800a60c <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800a60c:	b590      	push	{r4, r7, lr}
 800a60e:	b093      	sub	sp, #76	@ 0x4c
 800a610:	af0a      	add	r7, sp, #40	@ 0x28
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a61e:	461a      	mov	r2, r3
 800a620:	4b5d      	ldr	r3, [pc, #372]	@ (800a798 <RegionAS923TxConfig+0x18c>)
 800a622:	5c9b      	ldrb	r3, [r3, r2]
 800a624:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f993 0002 	ldrsb.w	r0, [r3, #2]
 800a62c:	4b5b      	ldr	r3, [pc, #364]	@ (800a79c <RegionAS923TxConfig+0x190>)
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	4b5b      	ldr	r3, [pc, #364]	@ (800a7a0 <RegionAS923TxConfig+0x194>)
 800a632:	6819      	ldr	r1, [r3, #0]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	461c      	mov	r4, r3
 800a63a:	4623      	mov	r3, r4
 800a63c:	005b      	lsls	r3, r3, #1
 800a63e:	4423      	add	r3, r4
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	440b      	add	r3, r1
 800a644:	3309      	adds	r3, #9
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	4619      	mov	r1, r3
 800a64a:	460b      	mov	r3, r1
 800a64c:	005b      	lsls	r3, r3, #1
 800a64e:	440b      	add	r3, r1
 800a650:	00db      	lsls	r3, r3, #3
 800a652:	4413      	add	r3, r2
 800a654:	3302      	adds	r3, #2
 800a656:	f993 3000 	ldrsb.w	r3, [r3]
 800a65a:	4619      	mov	r1, r3
 800a65c:	f001 f853 	bl	800b706 <RegionCommonLimitTxPower>
 800a660:	4603      	mov	r3, r0
 800a662:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a66a:	494e      	ldr	r1, [pc, #312]	@ (800a7a4 <RegionAS923TxConfig+0x198>)
 800a66c:	4618      	mov	r0, r3
 800a66e:	f001 f85f 	bl	800b730 <RegionCommonGetBandwidth>
 800a672:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6859      	ldr	r1, [r3, #4]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	689a      	ldr	r2, [r3, #8]
 800a680:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a684:	4618      	mov	r0, r3
 800a686:	f000 feaf 	bl	800b3e8 <RegionCommonComputeTxPower>
 800a68a:	4603      	mov	r3, r0
 800a68c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800a68e:	4b46      	ldr	r3, [pc, #280]	@ (800a7a8 <RegionAS923TxConfig+0x19c>)
 800a690:	68da      	ldr	r2, [r3, #12]
 800a692:	4b43      	ldr	r3, [pc, #268]	@ (800a7a0 <RegionAS923TxConfig+0x194>)
 800a694:	6819      	ldr	r1, [r3, #0]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	4618      	mov	r0, r3
 800a69c:	4603      	mov	r3, r0
 800a69e:	005b      	lsls	r3, r3, #1
 800a6a0:	4403      	add	r3, r0
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	440b      	add	r3, r1
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a6b2:	2b07      	cmp	r3, #7
 800a6b4:	d124      	bne.n	800a700 <RegionAS923TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800a6ba:	4b3b      	ldr	r3, [pc, #236]	@ (800a7a8 <RegionAS923TxConfig+0x19c>)
 800a6bc:	69dc      	ldr	r4, [r3, #28]
 800a6be:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a6c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a6c6:	fb02 f303 	mul.w	r3, r2, r3
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f997 1017 	ldrsb.w	r1, [r7, #23]
 800a6d0:	7ff8      	ldrb	r0, [r7, #31]
 800a6d2:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800a6d6:	9308      	str	r3, [sp, #32]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	9307      	str	r3, [sp, #28]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	9306      	str	r3, [sp, #24]
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	9305      	str	r3, [sp, #20]
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	9304      	str	r3, [sp, #16]
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	9303      	str	r3, [sp, #12]
 800a6ec:	2305      	movs	r3, #5
 800a6ee:	9302      	str	r3, [sp, #8]
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	9301      	str	r3, [sp, #4]
 800a6f4:	9200      	str	r2, [sp, #0]
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800a6fc:	47a0      	blx	r4
 800a6fe:	e01d      	b.n	800a73c <RegionAS923TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 800a700:	2301      	movs	r3, #1
 800a702:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800a704:	4b28      	ldr	r3, [pc, #160]	@ (800a7a8 <RegionAS923TxConfig+0x19c>)
 800a706:	69dc      	ldr	r4, [r3, #28]
 800a708:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a70c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 800a710:	7ff8      	ldrb	r0, [r7, #31]
 800a712:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800a716:	9208      	str	r2, [sp, #32]
 800a718:	2200      	movs	r2, #0
 800a71a:	9207      	str	r2, [sp, #28]
 800a71c:	2200      	movs	r2, #0
 800a71e:	9206      	str	r2, [sp, #24]
 800a720:	2200      	movs	r2, #0
 800a722:	9205      	str	r2, [sp, #20]
 800a724:	2201      	movs	r2, #1
 800a726:	9204      	str	r2, [sp, #16]
 800a728:	2200      	movs	r2, #0
 800a72a:	9203      	str	r2, [sp, #12]
 800a72c:	2208      	movs	r2, #8
 800a72e:	9202      	str	r2, [sp, #8]
 800a730:	2201      	movs	r2, #1
 800a732:	9201      	str	r2, [sp, #4]
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	2200      	movs	r2, #0
 800a73a:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800a73c:	4b18      	ldr	r3, [pc, #96]	@ (800a7a0 <RegionAS923TxConfig+0x194>)
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	4619      	mov	r1, r3
 800a746:	460b      	mov	r3, r1
 800a748:	005b      	lsls	r3, r3, #1
 800a74a:	440b      	add	r3, r1
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4413      	add	r3, r2
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a758:	4619      	mov	r1, r3
 800a75a:	4610      	mov	r0, r2
 800a75c:	f001 f813 	bl	800b786 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	899b      	ldrh	r3, [r3, #12]
 800a76a:	4619      	mov	r1, r3
 800a76c:	4610      	mov	r0, r2
 800a76e:	f7ff fafb 	bl	8009d68 <GetTimeOnAir>
 800a772:	4602      	mov	r2, r0
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800a778:	4b0b      	ldr	r3, [pc, #44]	@ (800a7a8 <RegionAS923TxConfig+0x19c>)
 800a77a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	8992      	ldrh	r2, [r2, #12]
 800a780:	b2d1      	uxtb	r1, r2
 800a782:	7ffa      	ldrb	r2, [r7, #31]
 800a784:	4610      	mov	r0, r2
 800a786:	4798      	blx	r3

    *txPower = txPowerLimited;
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	7f7a      	ldrb	r2, [r7, #29]
 800a78c:	701a      	strb	r2, [r3, #0]
    return true;
 800a78e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 800a790:	4618      	mov	r0, r3
 800a792:	3724      	adds	r7, #36	@ 0x24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd90      	pop	{r4, r7, pc}
 800a798:	0801267c 	.word	0x0801267c
 800a79c:	200012b0 	.word	0x200012b0
 800a7a0:	200012b4 	.word	0x200012b4
 800a7a4:	08012684 	.word	0x08012684
 800a7a8:	08012a80 	.word	0x08012a80

0800a7ac <RegionAS923AlternateDr>:
#endif /* REGION_AS923 */
    return status;
}

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	460a      	mov	r2, r1
 800a7b6:	71fb      	strb	r3, [r7, #7]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AS923 )
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 800a7bc:	2302      	movs	r3, #2
#else
    return -1;
#endif /* REGION_AS923 */
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bc80      	pop	{r7}
 800a7c6:	4770      	bx	lr

0800a7c8 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b09a      	sub	sp, #104	@ 0x68
 800a7cc:	af02      	add	r7, sp, #8
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
 800a7d4:	603b      	str	r3, [r7, #0]
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7e6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	601a      	str	r2, [r3, #0]
 800a7ee:	605a      	str	r2, [r3, #4]
 800a7f0:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800a7f2:	230c      	movs	r3, #12
 800a7f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800a7fc:	4b47      	ldr	r3, [pc, #284]	@ (800a91c <RegionAS923NextChannel+0x154>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800a804:	2201      	movs	r2, #1
 800a806:	2100      	movs	r1, #0
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 fbcd 	bl	800afa8 <RegionCommonCountChannels>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10a      	bne.n	800a82a <RegionAS923NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800a814:	4b41      	ldr	r3, [pc, #260]	@ (800a91c <RegionAS923NextChannel+0x154>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 800a81c:	4b3f      	ldr	r3, [pc, #252]	@ (800a91c <RegionAS923NextChannel+0x154>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f042 0203 	orr.w	r2, r2, #3
 800a824:	b292      	uxth	r2, r2
 800a826:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	7a5b      	ldrb	r3, [r3, #9]
 800a82e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a836:	b2db      	uxtb	r3, r3
 800a838:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800a83a:	4b38      	ldr	r3, [pc, #224]	@ (800a91c <RegionAS923NextChannel+0x154>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800a842:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800a844:	4b35      	ldr	r3, [pc, #212]	@ (800a91c <RegionAS923NextChannel+0x154>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800a84a:	4b35      	ldr	r3, [pc, #212]	@ (800a920 <RegionAS923NextChannel+0x158>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 800a850:	2310      	movs	r3, #16
 800a852:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 800a854:	f107 0312 	add.w	r3, r7, #18
 800a858:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	7a9b      	ldrb	r3, [r3, #10]
 800a86a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 800a86e:	2301      	movs	r3, #1
 800a870:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a87a:	320c      	adds	r2, #12
 800a87c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a880:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	7d1b      	ldrb	r3, [r3, #20]
 800a888:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	8adb      	ldrh	r3, [r3, #22]
 800a896:	4619      	mov	r1, r3
 800a898:	4610      	mov	r0, r2
 800a89a:	f7ff fa65 	bl	8009d68 <GetTimeOnAir>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800a8a2:	f107 0314 	add.w	r3, r7, #20
 800a8a6:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800a8a8:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 800a8ac:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800a8b0:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	9301      	str	r3, [sp, #4]
 800a8b8:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	f000 fe80 	bl	800b5c6 <RegionCommonIdentifyChannels>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800a8cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d10e      	bne.n	800a8f2 <RegionAS923NextChannel+0x12a>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800a8d4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	4619      	mov	r1, r3
 800a8dc:	2000      	movs	r0, #0
 800a8de:	f003 ffb5 	bl	800e84c <randr>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	3360      	adds	r3, #96	@ 0x60
 800a8e6:	443b      	add	r3, r7
 800a8e8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	701a      	strb	r2, [r3, #0]
 800a8f0:	e00e      	b.n	800a910 <RegionAS923NextChannel+0x148>
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800a8f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a8f6:	2b0c      	cmp	r3, #12
 800a8f8:	d10a      	bne.n	800a910 <RegionAS923NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800a8fa:	4b08      	ldr	r3, [pc, #32]	@ (800a91c <RegionAS923NextChannel+0x154>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 800a902:	4b06      	ldr	r3, [pc, #24]	@ (800a91c <RegionAS923NextChannel+0x154>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f042 0203 	orr.w	r2, r2, #3
 800a90a:	b292      	uxth	r2, r2
 800a90c:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }
    return status;
 800a910:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 800a914:	4618      	mov	r0, r3
 800a916:	3760      	adds	r7, #96	@ 0x60
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	200012b4 	.word	0x200012b4
 800a920:	200012b0 	.word	0x200012b0

0800a924 <RegionAS923SetContinuousWave>:
#endif /* REGION_AS923 */
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionAS923SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800a924:	b590      	push	{r4, r7, lr}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f993 0002 	ldrsb.w	r0, [r3, #2]
 800a932:	4b20      	ldr	r3, [pc, #128]	@ (800a9b4 <RegionAS923SetContinuousWave+0x90>)
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	4b20      	ldr	r3, [pc, #128]	@ (800a9b8 <RegionAS923SetContinuousWave+0x94>)
 800a938:	6819      	ldr	r1, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	461c      	mov	r4, r3
 800a940:	4623      	mov	r3, r4
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	4423      	add	r3, r4
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	440b      	add	r3, r1
 800a94a:	3309      	adds	r3, #9
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	4619      	mov	r1, r3
 800a950:	460b      	mov	r3, r1
 800a952:	005b      	lsls	r3, r3, #1
 800a954:	440b      	add	r3, r1
 800a956:	00db      	lsls	r3, r3, #3
 800a958:	4413      	add	r3, r2
 800a95a:	3302      	adds	r3, #2
 800a95c:	f993 3000 	ldrsb.w	r3, [r3]
 800a960:	4619      	mov	r1, r3
 800a962:	f000 fed0 	bl	800b706 <RegionCommonLimitTxPower>
 800a966:	4603      	mov	r3, r0
 800a968:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800a96e:	4b12      	ldr	r3, [pc, #72]	@ (800a9b8 <RegionAS923SetContinuousWave+0x94>)
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	4619      	mov	r1, r3
 800a978:	460b      	mov	r3, r1
 800a97a:	005b      	lsls	r3, r3, #1
 800a97c:	440b      	add	r3, r1
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4413      	add	r3, r2
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6859      	ldr	r1, [r3, #4]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	689a      	ldr	r2, [r3, #8]
 800a98e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a992:	4618      	mov	r0, r3
 800a994:	f000 fd28 	bl	800b3e8 <RegionCommonComputeTxPower>
 800a998:	4603      	mov	r3, r0
 800a99a:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800a99c:	4b07      	ldr	r3, [pc, #28]	@ (800a9bc <RegionAS923SetContinuousWave+0x98>)
 800a99e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	8992      	ldrh	r2, [r2, #12]
 800a9a4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800a9a8:	68b8      	ldr	r0, [r7, #8]
 800a9aa:	4798      	blx	r3
#endif /* REGION_AS923 */
}
 800a9ac:	bf00      	nop
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd90      	pop	{r4, r7, pc}
 800a9b4:	200012b0 	.word	0x200012b0
 800a9b8:	200012b4 	.word	0x200012b4
 800a9bc:	08012a80 	.word	0x08012a80

0800a9c0 <RegionAS923ApplyDrOffset>:

uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	71fb      	strb	r3, [r7, #7]
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	71bb      	strb	r3, [r7, #6]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AS923 )
    // Initialize minDr for a downlink dwell time configuration of 0
    int8_t minDr = DR_0;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	73fb      	strb	r3, [r7, #15]

    // Update the minDR for a downlink dwell time configuration of 1
    if( downlinkDwellTime == 1 )
 800a9d6:	79fb      	ldrb	r3, [r7, #7]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d101      	bne.n	800a9e0 <RegionAS923ApplyDrOffset+0x20>
    {
        minDr = AS923_DWELL_LIMIT_DATARATE;
 800a9dc:	2302      	movs	r3, #2
 800a9de:	73fb      	strb	r3, [r7, #15]
    }

    // Apply offset formula
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 800a9e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a9e4:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800a9e8:	4908      	ldr	r1, [pc, #32]	@ (800aa0c <RegionAS923ApplyDrOffset+0x4c>)
 800a9ea:	568a      	ldrsb	r2, [r1, r2]
 800a9ec:	1a9a      	subs	r2, r3, r2
 800a9ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	bfb8      	it	lt
 800a9f6:	4613      	movlt	r3, r2
 800a9f8:	2b05      	cmp	r3, #5
 800a9fa:	bfa8      	it	ge
 800a9fc:	2305      	movge	r3, #5
 800a9fe:	b2db      	uxtb	r3, r3
#else
    return 0;
#endif /* REGION_AS923 */

}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bc80      	pop	{r7}
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	080126bc 	.word	0x080126bc

0800aa10 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 800aa10:	b480      	push	{r7}
 800aa12:	b087      	sub	sp, #28
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
 800aa1c:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d002      	beq.n	800aa2a <FindAvailable125kHzChannels+0x1a>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d101      	bne.n	800aa2e <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e021      	b.n	800aa72 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800aa34:	2300      	movs	r3, #0
 800aa36:	75fb      	strb	r3, [r7, #23]
 800aa38:	e017      	b.n	800aa6a <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800aa3a:	89fa      	ldrh	r2, [r7, #14]
 800aa3c:	7dfb      	ldrb	r3, [r7, #23]
 800aa3e:	fa42 f303 	asr.w	r3, r2, r3
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00c      	beq.n	800aa64 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	461a      	mov	r2, r3
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	4413      	add	r3, r2
 800aa54:	7dfa      	ldrb	r2, [r7, #23]
 800aa56:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	b2da      	uxtb	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800aa64:	7dfb      	ldrb	r3, [r7, #23]
 800aa66:	3301      	adds	r3, #1
 800aa68:	75fb      	strb	r3, [r7, #23]
 800aa6a:	7dfb      	ldrb	r3, [r7, #23]
 800aa6c:	2b07      	cmp	r3, #7
 800aa6e:	d9e4      	bls.n	800aa3a <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	371c      	adds	r7, #28
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bc80      	pop	{r7}
 800aa7a:	4770      	bx	lr

0800aa7c <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800aa7c:	b590      	push	{r4, r7, lr}
 800aa7e:	b089      	sub	sp, #36	@ 0x24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800aa88:	2300      	movs	r3, #0
 800aa8a:	617b      	str	r3, [r7, #20]
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d005      	beq.n	800aaa6 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d002      	beq.n	800aaa6 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d101      	bne.n	800aaaa <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	e055      	b.n	800ab56 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800aab0:	7f7b      	ldrb	r3, [r7, #29]
 800aab2:	085b      	lsrs	r3, r3, #1
 800aab4:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 800aab6:	7f7b      	ldrb	r3, [r7, #29]
 800aab8:	f003 0301 	and.w	r3, r3, #1
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d107      	bne.n	800aad2 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800aac2:	7f3b      	ldrb	r3, [r7, #28]
 800aac4:	005b      	lsls	r3, r3, #1
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	4413      	add	r3, r2
 800aaca:	881b      	ldrh	r3, [r3, #0]
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	83fb      	strh	r3, [r7, #30]
 800aad0:	e006      	b.n	800aae0 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800aad2:	7f3b      	ldrb	r3, [r7, #28]
 800aad4:	005b      	lsls	r3, r3, #1
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	4413      	add	r3, r2
 800aada:	881b      	ldrh	r3, [r3, #0]
 800aadc:	0a1b      	lsrs	r3, r3, #8
 800aade:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800aae0:	f107 0213 	add.w	r2, r7, #19
 800aae4:	f107 0114 	add.w	r1, r7, #20
 800aae8:	8bfb      	ldrh	r3, [r7, #30]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7ff ff90 	bl	800aa10 <FindAvailable125kHzChannels>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b03      	cmp	r3, #3
 800aaf4:	d101      	bne.n	800aafa <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e02d      	b.n	800ab56 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 800aafa:	7cfb      	ldrb	r3, [r7, #19]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d011      	beq.n	800ab24 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800ab00:	7f7b      	ldrb	r3, [r7, #29]
 800ab02:	00db      	lsls	r3, r3, #3
 800ab04:	b2dc      	uxtb	r4, r3
 800ab06:	7cfb      	ldrb	r3, [r7, #19]
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	f003 fe9d 	bl	800e84c <randr>
 800ab12:	4603      	mov	r3, r0
 800ab14:	3320      	adds	r3, #32
 800ab16:	443b      	add	r3, r7
 800ab18:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800ab1c:	4423      	add	r3, r4
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 800ab24:	7f7b      	ldrb	r3, [r7, #29]
 800ab26:	3301      	adds	r3, #1
 800ab28:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 800ab2a:	7f7b      	ldrb	r3, [r7, #29]
 800ab2c:	2b07      	cmp	r3, #7
 800ab2e:	d901      	bls.n	800ab34 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 800ab30:	2300      	movs	r3, #0
 800ab32:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800ab34:	7cfb      	ldrb	r3, [r7, #19]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d104      	bne.n	800ab44 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	7f7a      	ldrb	r2, [r7, #29]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d1b5      	bne.n	800aab0 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 800ab44:	7cfb      	ldrb	r3, [r7, #19]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d004      	beq.n	800ab54 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	7f7a      	ldrb	r2, [r7, #29]
 800ab4e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	e000      	b.n	800ab56 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800ab54:	2303      	movs	r3, #3
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3724      	adds	r7, #36	@ 0x24
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd90      	pop	{r4, r7, pc}

0800ab5e <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b085      	sub	sp, #20
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	4603      	mov	r3, r0
 800ab66:	60b9      	str	r1, [r7, #8]
 800ab68:	607a      	str	r2, [r7, #4]
 800ab6a:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	fb03 f202 	mul.w	r2, r3, r2
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	4413      	add	r3, r2
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3714      	adds	r7, #20
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bc80      	pop	{r7}
 800ab80:	4770      	bx	lr

0800ab82 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800ab82:	b480      	push	{r7}
 800ab84:	b087      	sub	sp, #28
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	60f8      	str	r0, [r7, #12]
 800ab8a:	4608      	mov	r0, r1
 800ab8c:	4639      	mov	r1, r7
 800ab8e:	e881 000c 	stmia.w	r1, {r2, r3}
 800ab92:	4603      	mov	r3, r0
 800ab94:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	881b      	ldrh	r3, [r3, #0]
 800ab9a:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 800ab9c:	7afb      	ldrb	r3, [r7, #11]
 800ab9e:	f083 0301 	eor.w	r3, r3, #1
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d01b      	beq.n	800abe0 <GetDutyCycle+0x5e>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
        uint16_t joinDutyCycle = BACKOFF_DC_1_HOUR;
#else
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 800aba8:	f242 7310 	movw	r3, #10000	@ 0x2710
 800abac:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 800abb4:	d202      	bcs.n	800abbc <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800abb6:	2364      	movs	r3, #100	@ 0x64
 800abb8:	82bb      	strh	r3, [r7, #20]
 800abba:	e00b      	b.n	800abd4 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d803      	bhi.n	800abce <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800abc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800abca:	82bb      	strh	r3, [r7, #20]
 800abcc:	e002      	b.n	800abd4 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800abce:	f242 7310 	movw	r3, #10000	@ 0x2710
 800abd2:	82bb      	strh	r3, [r7, #20]
        }
#endif
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800abd4:	8aba      	ldrh	r2, [r7, #20]
 800abd6:	8afb      	ldrh	r3, [r7, #22]
 800abd8:	4293      	cmp	r3, r2
 800abda:	bf38      	it	cc
 800abdc:	4613      	movcc	r3, r2
 800abde:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800abe0:	8afb      	ldrh	r3, [r7, #22]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d101      	bne.n	800abea <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 800abe6:	2301      	movs	r3, #1
 800abe8:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 800abea:	8afb      	ldrh	r3, [r7, #22]
}
 800abec:	4618      	mov	r0, r3
 800abee:	371c      	adds	r7, #28
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bc80      	pop	{r7}
 800abf4:	4770      	bx	lr
	...

0800abf8 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b08e      	sub	sp, #56	@ 0x38
 800abfc:	af02      	add	r7, sp, #8
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	4608      	mov	r0, r1
 800ac02:	4639      	mov	r1, r7
 800ac04:	e881 000c 	stmia.w	r1, {r2, r3}
 800ac08:	4603      	mov	r3, r0
 800ac0a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	881b      	ldrh	r3, [r3, #0]
 800ac10:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800ac12:	4b4b      	ldr	r3, [pc, #300]	@ (800ad40 <SetMaxTimeCredits+0x148>)
 800ac14:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800ac16:	7af9      	ldrb	r1, [r7, #11]
 800ac18:	463b      	mov	r3, r7
 800ac1a:	cb0c      	ldmia	r3, {r2, r3}
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f7ff ffb0 	bl	800ab82 <GetDutyCycle>
 800ac22:	4603      	mov	r3, r0
 800ac24:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 800ac26:	7afb      	ldrb	r3, [r7, #11]
 800ac28:	f083 0301 	eor.w	r3, r3, #1
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d06d      	beq.n	800ad0e <SetMaxTimeCredits+0x116>
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD_JOIN_BACKOFF_24H;
        }
#else
    	TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800ac32:	463b      	mov	r3, r7
 800ac34:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ac38:	f007 f940 	bl	8011ebc <SysTimeToMs>
 800ac3c:	6278      	str	r0, [r7, #36]	@ 0x24
    	SysTime_t timeDiff = { 0 };
 800ac3e:	f107 0314 	add.w	r3, r7, #20
 800ac42:	2200      	movs	r2, #0
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	605a      	str	r2, [r3, #4]
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800ac48:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ac4a:	2b64      	cmp	r3, #100	@ 0x64
 800ac4c:	d105      	bne.n	800ac5a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800ac4e:	4b3c      	ldr	r3, [pc, #240]	@ (800ad40 <SetMaxTimeCredits+0x148>)
 800ac50:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac56:	609a      	str	r2, [r3, #8]
 800ac58:	e00b      	b.n	800ac72 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800ac5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ac5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ac60:	d105      	bne.n	800ac6e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800ac62:	4b38      	ldr	r3, [pc, #224]	@ (800ad44 <SetMaxTimeCredits+0x14c>)
 800ac64:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac6a:	609a      	str	r2, [r3, #8]
 800ac6c:	e001      	b.n	800ac72 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800ac6e:	4b36      	ldr	r3, [pc, #216]	@ (800ad48 <SetMaxTimeCredits+0x150>)
 800ac70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	689a      	ldr	r2, [r3, #8]
 800ac76:	f107 031c 	add.w	r3, r7, #28
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f007 f945 	bl	8011f0c <SysTimeFromMs>
 800ac82:	f107 0014 	add.w	r0, r7, #20
 800ac86:	6a3b      	ldr	r3, [r7, #32]
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	69fb      	ldr	r3, [r7, #28]
 800ac8c:	463a      	mov	r2, r7
 800ac8e:	ca06      	ldmia	r2, {r1, r2}
 800ac90:	f007 f8bc 	bl	8011e0c <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800ac94:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800ac98:	f083 0301 	eor.w	r3, r3, #1
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d006      	beq.n	800acb0 <SetMaxTimeCredits+0xb8>
 800aca2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800aca6:	f083 0301 	eor.w	r3, r3, #1
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	2b00      	cmp	r3, #0
 800acae:	d108      	bne.n	800acc2 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800acb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d103      	bne.n	800acc2 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 800acba:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 800acbc:	4a23      	ldr	r2, [pc, #140]	@ (800ad4c <SetMaxTimeCredits+0x154>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d92f      	bls.n	800ad22 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acc6:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	4a21      	ldr	r2, [pc, #132]	@ (800ad50 <SetMaxTimeCredits+0x158>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d928      	bls.n	800ad22 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 800acd6:	3b30      	subs	r3, #48	@ 0x30
 800acd8:	4a1e      	ldr	r2, [pc, #120]	@ (800ad54 <SetMaxTimeCredits+0x15c>)
 800acda:	fba2 2303 	umull	r2, r3, r2, r3
 800acde:	0c1b      	lsrs	r3, r3, #16
 800ace0:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	4a1c      	ldr	r2, [pc, #112]	@ (800ad58 <SetMaxTimeCredits+0x160>)
 800ace6:	fb02 f303 	mul.w	r3, r2, r3
 800acea:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 800acf2:	3330      	adds	r3, #48	@ 0x30
 800acf4:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800acfa:	f107 0314 	add.w	r3, r7, #20
 800acfe:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad02:	f007 f8db 	bl	8011ebc <SysTimeToMs>
 800ad06:	4602      	mov	r2, r0
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	609a      	str	r2, [r3, #8]
 800ad0c:	e009      	b.n	800ad22 <SetMaxTimeCredits+0x12a>
#endif

    }
    else
    {
        if( dutyCycleEnabled == false )
 800ad0e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800ad12:	f083 0301 	eor.w	r3, r3, #1
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d002      	beq.n	800ad22 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad20:	60da      	str	r2, [r3, #12]
        }
    }

#if (defined( REGION_VERSION ) && (( REGION_VERSION == 0x01010003 ) || ( REGION_VERSION == 0x02010001 )))
    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d102      	bne.n	800ad30 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad2e:	60da      	str	r2, [r3, #12]
    }
#endif 

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad34:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 800ad36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3730      	adds	r7, #48	@ 0x30
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	001b7740 	.word	0x001b7740
 800ad44:	0112a880 	.word	0x0112a880
 800ad48:	02932e00 	.word	0x02932e00
 800ad4c:	0001517f 	.word	0x0001517f
 800ad50:	0001ec2f 	.word	0x0001ec2f
 800ad54:	c22e4507 	.word	0xc22e4507
 800ad58:	00015180 	.word	0x00015180

0800ad5c <UpdateTimeCredits>:
}
#else
static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af02      	add	r7, sp, #8
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	4608      	mov	r0, r1
 800ad66:	4611      	mov	r1, r2
 800ad68:	461a      	mov	r2, r3
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	70fb      	strb	r3, [r7, #3]
 800ad6e:	460b      	mov	r3, r1
 800ad70:	70bb      	strb	r3, [r7, #2]
 800ad72:	4613      	mov	r3, r2
 800ad74:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800ad76:	78f9      	ldrb	r1, [r7, #3]
 800ad78:	787b      	ldrb	r3, [r7, #1]
 800ad7a:	9301      	str	r3, [sp, #4]
 800ad7c:	78bb      	ldrb	r3, [r7, #2]
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	f107 0318 	add.w	r3, r7, #24
 800ad84:	cb0c      	ldmia	r3, {r2, r3}
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7ff ff36 	bl	800abf8 <SetMaxTimeCredits>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 800ad90:	78fb      	ldrb	r3, [r7, #3]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00a      	beq.n	800adac <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f007 fa44 	bl	8012228 <UTIL_TIMER_GetElapsedTime>
 800ada0:	4602      	mov	r2, r0
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	441a      	add	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	68da      	ldr	r2, [r3, #12]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d903      	bls.n	800adc0 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	691a      	ldr	r2, [r3, #16]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a3a      	ldr	r2, [r7, #32]
 800adc4:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 800adc6:	89fb      	ldrh	r3, [r7, #14]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <CountChannels>:
#endif

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	4603      	mov	r3, r0
 800add8:	460a      	mov	r2, r1
 800adda:	80fb      	strh	r3, [r7, #6]
 800addc:	4613      	mov	r3, r2
 800adde:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 800ade0:	2300      	movs	r3, #0
 800ade2:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 800ade4:	2300      	movs	r3, #0
 800ade6:	73bb      	strb	r3, [r7, #14]
 800ade8:	e011      	b.n	800ae0e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800adea:	88fa      	ldrh	r2, [r7, #6]
 800adec:	7bbb      	ldrb	r3, [r7, #14]
 800adee:	2101      	movs	r1, #1
 800adf0:	fa01 f303 	lsl.w	r3, r1, r3
 800adf4:	401a      	ands	r2, r3
 800adf6:	7bbb      	ldrb	r3, [r7, #14]
 800adf8:	2101      	movs	r1, #1
 800adfa:	fa01 f303 	lsl.w	r3, r1, r3
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d102      	bne.n	800ae08 <CountChannels+0x38>
        {
            nbActiveBits++;
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
 800ae04:	3301      	adds	r3, #1
 800ae06:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 800ae08:	7bbb      	ldrb	r3, [r7, #14]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	73bb      	strb	r3, [r7, #14]
 800ae0e:	7bba      	ldrb	r2, [r7, #14]
 800ae10:	797b      	ldrb	r3, [r7, #5]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d3e9      	bcc.n	800adea <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 800ae16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bc80      	pop	{r7}
 800ae20:	4770      	bx	lr

0800ae22 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b084      	sub	sp, #16
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6039      	str	r1, [r7, #0]
 800ae2a:	4611      	mov	r1, r2
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	4603      	mov	r3, r0
 800ae30:	71fb      	strb	r3, [r7, #7]
 800ae32:	460b      	mov	r3, r1
 800ae34:	71bb      	strb	r3, [r7, #6]
 800ae36:	4613      	mov	r3, r2
 800ae38:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800ae3a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800ae3e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800ae42:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 f85d 	bl	800af06 <RegionCommonValueInRange>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 800ae52:	2300      	movs	r3, #0
 800ae54:	e053      	b.n	800aefe <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800ae56:	2300      	movs	r3, #0
 800ae58:	73fb      	strb	r3, [r7, #15]
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	73bb      	strb	r3, [r7, #14]
 800ae5e:	e049      	b.n	800aef4 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800ae60:	2300      	movs	r3, #0
 800ae62:	737b      	strb	r3, [r7, #13]
 800ae64:	e03d      	b.n	800aee2 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	683a      	ldr	r2, [r7, #0]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	881b      	ldrh	r3, [r3, #0]
 800ae70:	461a      	mov	r2, r3
 800ae72:	7b7b      	ldrb	r3, [r7, #13]
 800ae74:	fa42 f303 	asr.w	r3, r2, r3
 800ae78:	f003 0301 	and.w	r3, r3, #1
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d02d      	beq.n	800aedc <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ae80:	7bfa      	ldrb	r2, [r7, #15]
 800ae82:	7b7b      	ldrb	r3, [r7, #13]
 800ae84:	4413      	add	r3, r2
 800ae86:	461a      	mov	r2, r3
 800ae88:	4613      	mov	r3, r2
 800ae8a:	005b      	lsls	r3, r3, #1
 800ae8c:	4413      	add	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	461a      	mov	r2, r3
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	4413      	add	r3, r2
 800ae96:	7a1b      	ldrb	r3, [r3, #8]
 800ae98:	f343 0303 	sbfx	r3, r3, #0, #4
 800ae9c:	b25b      	sxtb	r3, r3
 800ae9e:	f003 030f 	and.w	r3, r3, #15
 800aea2:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800aea4:	7bfa      	ldrb	r2, [r7, #15]
 800aea6:	7b7b      	ldrb	r3, [r7, #13]
 800aea8:	4413      	add	r3, r2
 800aeaa:	461a      	mov	r2, r3
 800aeac:	4613      	mov	r3, r2
 800aeae:	005b      	lsls	r3, r3, #1
 800aeb0:	4413      	add	r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	4413      	add	r3, r2
 800aeba:	7a1b      	ldrb	r3, [r3, #8]
 800aebc:	f343 1303 	sbfx	r3, r3, #4, #4
 800aec0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800aec2:	f003 030f 	and.w	r3, r3, #15
 800aec6:	b25a      	sxtb	r2, r3
 800aec8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 f81a 	bl	800af06 <RegionCommonValueInRange>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d101      	bne.n	800aedc <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e010      	b.n	800aefe <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 800aedc:	7b7b      	ldrb	r3, [r7, #13]
 800aede:	3301      	adds	r3, #1
 800aee0:	737b      	strb	r3, [r7, #13]
 800aee2:	7b7b      	ldrb	r3, [r7, #13]
 800aee4:	2b0f      	cmp	r3, #15
 800aee6:	d9be      	bls.n	800ae66 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
 800aeea:	3310      	adds	r3, #16
 800aeec:	73fb      	strb	r3, [r7, #15]
 800aeee:	7bbb      	ldrb	r3, [r7, #14]
 800aef0:	3301      	adds	r3, #1
 800aef2:	73bb      	strb	r3, [r7, #14]
 800aef4:	7bfa      	ldrb	r2, [r7, #15]
 800aef6:	79fb      	ldrb	r3, [r7, #7]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d3b1      	bcc.n	800ae60 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 800af06:	b480      	push	{r7}
 800af08:	b083      	sub	sp, #12
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	4603      	mov	r3, r0
 800af0e:	71fb      	strb	r3, [r7, #7]
 800af10:	460b      	mov	r3, r1
 800af12:	71bb      	strb	r3, [r7, #6]
 800af14:	4613      	mov	r3, r2
 800af16:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 800af18:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800af1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800af20:	429a      	cmp	r2, r3
 800af22:	db07      	blt.n	800af34 <RegionCommonValueInRange+0x2e>
 800af24:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800af28:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	dc01      	bgt.n	800af34 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 800af30:	2301      	movs	r3, #1
 800af32:	e000      	b.n	800af36 <RegionCommonValueInRange+0x30>
    }
    return 0;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	370c      	adds	r7, #12
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bc80      	pop	{r7}
 800af3e:	4770      	bx	lr

0800af40 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	70fb      	strb	r3, [r7, #3]
 800af4c:	4613      	mov	r3, r2
 800af4e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 800af50:	78fb      	ldrb	r3, [r7, #3]
 800af52:	091b      	lsrs	r3, r3, #4
 800af54:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800af56:	78bb      	ldrb	r3, [r7, #2]
 800af58:	091b      	lsrs	r3, r3, #4
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	7bfa      	ldrb	r2, [r7, #15]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d803      	bhi.n	800af6a <RegionCommonChanDisable+0x2a>
 800af62:	78fa      	ldrb	r2, [r7, #3]
 800af64:	78bb      	ldrb	r3, [r7, #2]
 800af66:	429a      	cmp	r2, r3
 800af68:	d301      	bcc.n	800af6e <RegionCommonChanDisable+0x2e>
    {
        return false;
 800af6a:	2300      	movs	r3, #0
 800af6c:	e017      	b.n	800af9e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
 800af70:	005b      	lsls	r3, r3, #1
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	4413      	add	r3, r2
 800af76:	881b      	ldrh	r3, [r3, #0]
 800af78:	b21a      	sxth	r2, r3
 800af7a:	78fb      	ldrb	r3, [r7, #3]
 800af7c:	f003 030f 	and.w	r3, r3, #15
 800af80:	2101      	movs	r1, #1
 800af82:	fa01 f303 	lsl.w	r3, r1, r3
 800af86:	b21b      	sxth	r3, r3
 800af88:	43db      	mvns	r3, r3
 800af8a:	b21b      	sxth	r3, r3
 800af8c:	4013      	ands	r3, r2
 800af8e:	b219      	sxth	r1, r3
 800af90:	7bfb      	ldrb	r3, [r7, #15]
 800af92:	005b      	lsls	r3, r3, #1
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	4413      	add	r3, r2
 800af98:	b28a      	uxth	r2, r1
 800af9a:	801a      	strh	r2, [r3, #0]

    return true;
 800af9c:	2301      	movs	r3, #1
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3714      	adds	r7, #20
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bc80      	pop	{r7}
 800afa6:	4770      	bx	lr

0800afa8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	460b      	mov	r3, r1
 800afb2:	70fb      	strb	r3, [r7, #3]
 800afb4:	4613      	mov	r3, r2
 800afb6:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 800afb8:	2300      	movs	r3, #0
 800afba:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 800afc2:	2300      	movs	r3, #0
 800afc4:	e018      	b.n	800aff8 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800afc6:	78fb      	ldrb	r3, [r7, #3]
 800afc8:	73bb      	strb	r3, [r7, #14]
 800afca:	e010      	b.n	800afee <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800afcc:	7bbb      	ldrb	r3, [r7, #14]
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	4413      	add	r3, r2
 800afd4:	881b      	ldrh	r3, [r3, #0]
 800afd6:	2110      	movs	r1, #16
 800afd8:	4618      	mov	r0, r3
 800afda:	f7ff fef9 	bl	800add0 <CountChannels>
 800afde:	4603      	mov	r3, r0
 800afe0:	461a      	mov	r2, r3
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
 800afe4:	4413      	add	r3, r2
 800afe6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800afe8:	7bbb      	ldrb	r3, [r7, #14]
 800afea:	3301      	adds	r3, #1
 800afec:	73bb      	strb	r3, [r7, #14]
 800afee:	7bba      	ldrb	r2, [r7, #14]
 800aff0:	78bb      	ldrb	r3, [r7, #2]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d3ea      	bcc.n	800afcc <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800b000:	b480      	push	{r7}
 800b002:	b087      	sub	sp, #28
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	4613      	mov	r3, r2
 800b00c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d016      	beq.n	800b042 <RegionCommonChanMaskCopy+0x42>
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d013      	beq.n	800b042 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 800b01a:	2300      	movs	r3, #0
 800b01c:	75fb      	strb	r3, [r7, #23]
 800b01e:	e00c      	b.n	800b03a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800b020:	7dfb      	ldrb	r3, [r7, #23]
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	441a      	add	r2, r3
 800b028:	7dfb      	ldrb	r3, [r7, #23]
 800b02a:	005b      	lsls	r3, r3, #1
 800b02c:	68f9      	ldr	r1, [r7, #12]
 800b02e:	440b      	add	r3, r1
 800b030:	8812      	ldrh	r2, [r2, #0]
 800b032:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 800b034:	7dfb      	ldrb	r3, [r7, #23]
 800b036:	3301      	adds	r3, #1
 800b038:	75fb      	strb	r3, [r7, #23]
 800b03a:	7dfa      	ldrb	r2, [r7, #23]
 800b03c:	79fb      	ldrb	r3, [r7, #7]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d3ee      	bcc.n	800b020 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 800b042:	bf00      	nop
 800b044:	371c      	adds	r7, #28
 800b046:	46bd      	mov	sp, r7
 800b048:	bc80      	pop	{r7}
 800b04a:	4770      	bx	lr

0800b04c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800b04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b04e:	b08f      	sub	sp, #60	@ 0x3c
 800b050:	af04      	add	r7, sp, #16
 800b052:	6039      	str	r1, [r7, #0]
 800b054:	4611      	mov	r1, r2
 800b056:	461a      	mov	r2, r3
 800b058:	4603      	mov	r3, r0
 800b05a:	71fb      	strb	r3, [r7, #7]
 800b05c:	460b      	mov	r3, r1
 800b05e:	71bb      	strb	r3, [r7, #6]
 800b060:	4613      	mov	r3, r2
 800b062:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800b064:	f04f 33ff 	mov.w	r3, #4294967295
 800b068:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800b06a:	f007 f8cb 	bl	8012204 <UTIL_TIMER_GetCurrentTime>
 800b06e:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 800b070:	2300      	movs	r3, #0
 800b072:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 800b074:	2301      	movs	r3, #1
 800b076:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 800b07e:	2300      	movs	r3, #0
 800b080:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b084:	e0ba      	b.n	800b1fc <RegionCommonUpdateBandTimeOff+0x1b0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime, elapsedTime );
#else
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800b086:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800b08a:	4613      	mov	r3, r2
 800b08c:	005b      	lsls	r3, r3, #1
 800b08e:	4413      	add	r3, r2
 800b090:	00db      	lsls	r3, r3, #3
 800b092:	461a      	mov	r2, r3
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	189c      	adds	r4, r3, r2
 800b098:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 800b09c:	797a      	ldrb	r2, [r7, #5]
 800b09e:	79fd      	ldrb	r5, [r7, #7]
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	9302      	str	r3, [sp, #8]
 800b0a4:	46ec      	mov	ip, sp
 800b0a6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800b0aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b0ae:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b0b2:	4633      	mov	r3, r6
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	f7ff fe50 	bl	800ad5c <UpdateTimeCredits>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	82fb      	strh	r3, [r7, #22]
                                       currentTime );
#endif

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 800b0c0:	8afa      	ldrh	r2, [r7, #22]
 800b0c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0c4:	fb02 f303 	mul.w	r3, r2, r3
 800b0c8:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800b0ca:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	005b      	lsls	r3, r3, #1
 800b0d2:	4413      	add	r3, r2
 800b0d4:	00db      	lsls	r3, r3, #3
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	4413      	add	r3, r2
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	69ba      	ldr	r2, [r7, #24]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d308      	bcc.n	800b0f6 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800b0e4:	797b      	ldrb	r3, [r7, #5]
 800b0e6:	f083 0301 	eor.w	r3, r3, #1
 800b0ea:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d013      	beq.n	800b118 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800b0f0:	79fb      	ldrb	r3, [r7, #7]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d010      	beq.n	800b118 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 800b0f6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800b0fa:	4613      	mov	r3, r2
 800b0fc:	005b      	lsls	r3, r3, #1
 800b0fe:	4413      	add	r3, r2
 800b100:	00db      	lsls	r3, r3, #3
 800b102:	461a      	mov	r2, r3
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	4413      	add	r3, r2
 800b108:	2201      	movs	r2, #1
 800b10a:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800b10c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b110:	3301      	adds	r3, #1
 800b112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b116:	e06c      	b.n	800b1f2 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800b118:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800b11c:	4613      	mov	r3, r2
 800b11e:	005b      	lsls	r3, r3, #1
 800b120:	4413      	add	r3, r2
 800b122:	00db      	lsls	r3, r3, #3
 800b124:	461a      	mov	r2, r3
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	4413      	add	r3, r2
 800b12a:	2200      	movs	r2, #0
 800b12c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800b12e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800b132:	4613      	mov	r3, r2
 800b134:	005b      	lsls	r3, r3, #1
 800b136:	4413      	add	r3, r2
 800b138:	00db      	lsls	r3, r3, #3
 800b13a:	461a      	mov	r2, r3
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	4413      	add	r3, r2
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	69ba      	ldr	r2, [r7, #24]
 800b144:	429a      	cmp	r2, r3
 800b146:	d215      	bcs.n	800b174 <RegionCommonUpdateBandTimeOff+0x128>
                {
                    observationTimeDiff = bands[i].LastMaxCreditAssignTime - elapsedTime;
                }
                minTimeToWait = MIN( minTimeToWait, observationTimeDiff );
#else
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800b148:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800b14c:	4613      	mov	r3, r2
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	4413      	add	r3, r2
 800b152:	00db      	lsls	r3, r3, #3
 800b154:	461a      	mov	r2, r3
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	4413      	add	r3, r2
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	69ba      	ldr	r2, [r7, #24]
 800b15e:	1ad3      	subs	r3, r2, r3
 800b160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b162:	4293      	cmp	r3, r2
 800b164:	bf28      	it	cs
 800b166:	4613      	movcs	r3, r2
 800b168:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800b16a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b16e:	3301      	adds	r3, #1
 800b170:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

#if (defined( REGION_VERSION ) && (( REGION_VERSION == 0x01010003 ) || ( REGION_VERSION == 0x02010001 )))
            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800b174:	79fb      	ldrb	r3, [r7, #7]
 800b176:	f083 0301 	eor.w	r3, r3, #1
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d038      	beq.n	800b1f2 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 800b180:	2300      	movs	r3, #0
 800b182:	60fb      	str	r3, [r7, #12]
 800b184:	2300      	movs	r3, #0
 800b186:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b188:	8afb      	ldrh	r3, [r7, #22]
 800b18a:	2b64      	cmp	r3, #100	@ 0x64
 800b18c:	d103      	bne.n	800b196 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800b18e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800b192:	60fb      	str	r3, [r7, #12]
 800b194:	e009      	b.n	800b1aa <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800b196:	8afb      	ldrh	r3, [r7, #22]
 800b198:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b19c:	d103      	bne.n	800b1a6 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800b19e:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 800b1a2:	60fb      	str	r3, [r7, #12]
 800b1a4:	e001      	b.n	800b1aa <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800b1a6:	4b1e      	ldr	r3, [pc, #120]	@ (800b220 <RegionCommonUpdateBandTimeOff+0x1d4>)
 800b1a8:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b1aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1ac:	4a1c      	ldr	r2, [pc, #112]	@ (800b220 <RegionCommonUpdateBandTimeOff+0x1d4>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d90e      	bls.n	800b1d0 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1b6:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 800b1ba:	3b30      	subs	r3, #48	@ 0x30
 800b1bc:	4919      	ldr	r1, [pc, #100]	@ (800b224 <RegionCommonUpdateBandTimeOff+0x1d8>)
 800b1be:	fba1 1303 	umull	r1, r3, r1, r3
 800b1c2:	0c1b      	lsrs	r3, r3, #16
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	4918      	ldr	r1, [pc, #96]	@ (800b228 <RegionCommonUpdateBandTimeOff+0x1dc>)
 800b1c8:	fb01 f303 	mul.w	r3, r1, r3
 800b1cc:	4413      	add	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800b1d0:	f107 000c 	add.w	r0, r7, #12
 800b1d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1da:	f107 020c 	add.w	r2, r7, #12
 800b1de:	ca06      	ldmia	r2, {r1, r2}
 800b1e0:	f006 fe14 	bl	8011e0c <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800b1e4:	f107 030c 	add.w	r3, r7, #12
 800b1e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b1ec:	f006 fe66 	bl	8011ebc <SysTimeToMs>
 800b1f0:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 800b1f2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b1fc:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800b200:	79bb      	ldrb	r3, [r7, #6]
 800b202:	429a      	cmp	r2, r3
 800b204:	f4ff af3f 	bcc.w	800b086 <RegionCommonUpdateBandTimeOff+0x3a>
#endif

        }
    }

    if( validBands == 0 )
 800b208:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d102      	bne.n	800b216 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800b210:	f04f 33ff 	mov.w	r3, #4294967295
 800b214:	e000      	b.n	800b218 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 800b216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b218:	4618      	mov	r0, r3
 800b21a:	372c      	adds	r7, #44	@ 0x2c
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b220:	0001ec30 	.word	0x0001ec30
 800b224:	c22e4507 	.word	0xc22e4507
 800b228:	00015180 	.word	0x00015180

0800b22c <RegionCommonComputeSymbolTimeLoRa>:

    return status;
}

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	4603      	mov	r3, r0
 800b234:	6039      	str	r1, [r7, #0]
 800b236:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800b238:	79fb      	ldrb	r3, [r7, #7]
 800b23a:	4a06      	ldr	r2, [pc, #24]	@ (800b254 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 800b23c:	fa02 f303 	lsl.w	r3, r2, r3
 800b240:	461a      	mov	r2, r3
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800b248:	4618      	mov	r0, r3
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bc80      	pop	{r7}
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	000f4240 	.word	0x000f4240

0800b258 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 800b262:	79fb      	ldrb	r3, [r7, #7]
 800b264:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800b268:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	bc80      	pop	{r7}
 800b274:	4770      	bx	lr
	...

0800b278 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800b278:	b480      	push	{r7}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	607a      	str	r2, [r7, #4]
 800b282:	603b      	str	r3, [r7, #0]
 800b284:	460b      	mov	r3, r1
 800b286:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b288:	7afa      	ldrb	r2, [r7, #11]
 800b28a:	7afb      	ldrb	r3, [r7, #11]
 800b28c:	3b04      	subs	r3, #4
 800b28e:	4619      	mov	r1, r3
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	fb03 f101 	mul.w	r1, r3, r1
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b29c:	fb00 f303 	mul.w	r3, r0, r3
 800b2a0:	440b      	add	r3, r1
 800b2a2:	005b      	lsls	r3, r3, #1
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d013      	beq.n	800b2d0 <RegionCommonComputeRxWindowParameters+0x58>
 800b2a8:	7afb      	ldrb	r3, [r7, #11]
 800b2aa:	3b04      	subs	r3, #4
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	fb03 f101 	mul.w	r1, r3, r1
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b2ba:	fb00 f303 	mul.w	r3, r0, r3
 800b2be:	440b      	add	r3, r1
 800b2c0:	0059      	lsls	r1, r3, #1
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	440b      	add	r3, r1
 800b2c6:	1e59      	subs	r1, r3, #1
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2ce:	e00f      	b.n	800b2f0 <RegionCommonComputeRxWindowParameters+0x78>
 800b2d0:	7afb      	ldrb	r3, [r7, #11]
 800b2d2:	3b04      	subs	r3, #4
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	fb03 f101 	mul.w	r1, r3, r1
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b2e2:	fb00 f303 	mul.w	r3, r0, r3
 800b2e6:	440b      	add	r3, r1
 800b2e8:	0059      	lsls	r1, r3, #1
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	bf38      	it	cc
 800b2f4:	461a      	movcc	r2, r3
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	4619      	mov	r1, r3
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	fb02 f303 	mul.w	r3, r2, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d007      	beq.n	800b31e <RegionCommonComputeRxWindowParameters+0xa6>
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	fb02 f303 	mul.w	r3, r2, r3
 800b318:	3301      	adds	r3, #1
 800b31a:	085b      	lsrs	r3, r3, #1
 800b31c:	e005      	b.n	800b32a <RegionCommonComputeRxWindowParameters+0xb2>
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	fb02 f303 	mul.w	r3, r2, r3
 800b328:	085b      	lsrs	r3, r3, #1
 800b32a:	1acb      	subs	r3, r1, r3
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b332:	fb01 f202 	mul.w	r2, r1, r2
 800b336:	1a9b      	subs	r3, r3, r2
 800b338:	2b00      	cmp	r3, #0
 800b33a:	dd27      	ble.n	800b38c <RegionCommonComputeRxWindowParameters+0x114>
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4619      	mov	r1, r3
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	fb02 f303 	mul.w	r3, r2, r3
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d007      	beq.n	800b360 <RegionCommonComputeRxWindowParameters+0xe8>
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	fb02 f303 	mul.w	r3, r2, r3
 800b35a:	3301      	adds	r3, #1
 800b35c:	085b      	lsrs	r3, r3, #1
 800b35e:	e005      	b.n	800b36c <RegionCommonComputeRxWindowParameters+0xf4>
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	fb02 f303 	mul.w	r3, r2, r3
 800b36a:	085b      	lsrs	r3, r3, #1
 800b36c:	1acb      	subs	r3, r1, r3
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b374:	fb01 f202 	mul.w	r2, r1, r2
 800b378:	1a9b      	subs	r3, r3, r2
 800b37a:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 800b37e:	4a19      	ldr	r2, [pc, #100]	@ (800b3e4 <RegionCommonComputeRxWindowParameters+0x16c>)
 800b380:	fb82 1203 	smull	r1, r2, r2, r3
 800b384:	1192      	asrs	r2, r2, #6
 800b386:	17db      	asrs	r3, r3, #31
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	e024      	b.n	800b3d6 <RegionCommonComputeRxWindowParameters+0x15e>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4619      	mov	r1, r3
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	fb02 f303 	mul.w	r3, r2, r3
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d007      	beq.n	800b3b0 <RegionCommonComputeRxWindowParameters+0x138>
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	fb02 f303 	mul.w	r3, r2, r3
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	085b      	lsrs	r3, r3, #1
 800b3ae:	e005      	b.n	800b3bc <RegionCommonComputeRxWindowParameters+0x144>
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	fb02 f303 	mul.w	r3, r2, r3
 800b3ba:	085b      	lsrs	r3, r3, #1
 800b3bc:	1acb      	subs	r3, r1, r3
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b3c4:	fb01 f202 	mul.w	r2, r1, r2
 800b3c8:	1a9b      	subs	r3, r3, r2
 800b3ca:	4a06      	ldr	r2, [pc, #24]	@ (800b3e4 <RegionCommonComputeRxWindowParameters+0x16c>)
 800b3cc:	fb82 1203 	smull	r1, r2, r2, r3
 800b3d0:	1192      	asrs	r2, r2, #6
 800b3d2:	17db      	asrs	r3, r3, #31
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	69fa      	ldr	r2, [r7, #28]
 800b3d8:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800b3da:	bf00      	nop
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bc80      	pop	{r7}
 800b3e2:	4770      	bx	lr
 800b3e4:	10624dd3 	.word	0x10624dd3

0800b3e8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
 800b3f4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800b3fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3fe:	005b      	lsls	r3, r3, #1
 800b400:	4618      	mov	r0, r3
 800b402:	f7f5 f9db 	bl	80007bc <__aeabi_ui2f>
 800b406:	4603      	mov	r3, r0
 800b408:	4619      	mov	r1, r3
 800b40a:	68b8      	ldr	r0, [r7, #8]
 800b40c:	f7f5 f924 	bl	8000658 <__aeabi_fsub>
 800b410:	4603      	mov	r3, r0
 800b412:	6879      	ldr	r1, [r7, #4]
 800b414:	4618      	mov	r0, r3
 800b416:	f7f5 f91f 	bl	8000658 <__aeabi_fsub>
 800b41a:	4603      	mov	r3, r0
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7f5 f80f 	bl	8000440 <__aeabi_f2d>
 800b422:	4602      	mov	r2, r0
 800b424:	460b      	mov	r3, r1
 800b426:	4610      	mov	r0, r2
 800b428:	4619      	mov	r1, r3
 800b42a:	f006 ffd9 	bl	80123e0 <floor>
 800b42e:	4602      	mov	r2, r0
 800b430:	460b      	mov	r3, r1
 800b432:	4610      	mov	r0, r2
 800b434:	4619      	mov	r1, r3
 800b436:	f7f5 f8e3 	bl	8000600 <__aeabi_d2iz>
 800b43a:	4603      	mov	r3, r0
 800b43c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 800b43e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800b44a:	b590      	push	{r4, r7, lr}
 800b44c:	b087      	sub	sp, #28
 800b44e:	af00      	add	r7, sp, #0
 800b450:	60f8      	str	r0, [r7, #12]
 800b452:	60b9      	str	r1, [r7, #8]
 800b454:	607a      	str	r2, [r7, #4]
 800b456:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 800b458:	2300      	movs	r3, #0
 800b45a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b460:	2300      	movs	r3, #0
 800b462:	757b      	strb	r3, [r7, #21]
 800b464:	2300      	movs	r3, #0
 800b466:	753b      	strb	r3, [r7, #20]
 800b468:	e09c      	b.n	800b5a4 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800b46a:	2300      	movs	r3, #0
 800b46c:	74fb      	strb	r3, [r7, #19]
 800b46e:	e08f      	b.n	800b590 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	685a      	ldr	r2, [r3, #4]
 800b474:	7d3b      	ldrb	r3, [r7, #20]
 800b476:	005b      	lsls	r3, r3, #1
 800b478:	4413      	add	r3, r2
 800b47a:	881b      	ldrh	r3, [r3, #0]
 800b47c:	461a      	mov	r2, r3
 800b47e:	7cfb      	ldrb	r3, [r7, #19]
 800b480:	fa42 f303 	asr.w	r3, r2, r3
 800b484:	f003 0301 	and.w	r3, r3, #1
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d07e      	beq.n	800b58a <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	689a      	ldr	r2, [r3, #8]
 800b490:	7d79      	ldrb	r1, [r7, #21]
 800b492:	7cfb      	ldrb	r3, [r7, #19]
 800b494:	440b      	add	r3, r1
 800b496:	4619      	mov	r1, r3
 800b498:	460b      	mov	r3, r1
 800b49a:	005b      	lsls	r3, r3, #1
 800b49c:	440b      	add	r3, r1
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4413      	add	r3, r2
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d06b      	beq.n	800b580 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	f083 0301 	eor.w	r3, r3, #1
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d011      	beq.n	800b4da <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00d      	beq.n	800b4da <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	695a      	ldr	r2, [r3, #20]
 800b4c2:	7d3b      	ldrb	r3, [r7, #20]
 800b4c4:	005b      	lsls	r3, r3, #1
 800b4c6:	4413      	add	r3, r2
 800b4c8:	881b      	ldrh	r3, [r3, #0]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	7cfb      	ldrb	r3, [r7, #19]
 800b4ce:	fa42 f303 	asr.w	r3, r2, r3
 800b4d2:	f003 0301 	and.w	r3, r3, #1
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d054      	beq.n	800b584 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	785b      	ldrb	r3, [r3, #1]
 800b4de:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	689a      	ldr	r2, [r3, #8]
 800b4e4:	7d79      	ldrb	r1, [r7, #21]
 800b4e6:	7cfb      	ldrb	r3, [r7, #19]
 800b4e8:	440b      	add	r3, r1
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	005b      	lsls	r3, r3, #1
 800b4f0:	440b      	add	r3, r1
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4413      	add	r3, r2
 800b4f6:	7a1b      	ldrb	r3, [r3, #8]
 800b4f8:	f343 0303 	sbfx	r3, r3, #0, #4
 800b4fc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800b4fe:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	689a      	ldr	r2, [r3, #8]
 800b504:	7d79      	ldrb	r1, [r7, #21]
 800b506:	7cfb      	ldrb	r3, [r7, #19]
 800b508:	440b      	add	r3, r1
 800b50a:	4619      	mov	r1, r3
 800b50c:	460b      	mov	r3, r1
 800b50e:	005b      	lsls	r3, r3, #1
 800b510:	440b      	add	r3, r1
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	4413      	add	r3, r2
 800b516:	7a1b      	ldrb	r3, [r3, #8]
 800b518:	f343 1303 	sbfx	r3, r3, #4, #4
 800b51c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800b51e:	461a      	mov	r2, r3
 800b520:	4621      	mov	r1, r4
 800b522:	f7ff fcf0 	bl	800af06 <RegionCommonValueInRange>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d02d      	beq.n	800b588 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	68da      	ldr	r2, [r3, #12]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6899      	ldr	r1, [r3, #8]
 800b534:	7d78      	ldrb	r0, [r7, #21]
 800b536:	7cfb      	ldrb	r3, [r7, #19]
 800b538:	4403      	add	r3, r0
 800b53a:	4618      	mov	r0, r3
 800b53c:	4603      	mov	r3, r0
 800b53e:	005b      	lsls	r3, r3, #1
 800b540:	4403      	add	r3, r0
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	440b      	add	r3, r1
 800b546:	7a5b      	ldrb	r3, [r3, #9]
 800b548:	4619      	mov	r1, r3
 800b54a:	460b      	mov	r3, r1
 800b54c:	005b      	lsls	r3, r3, #1
 800b54e:	440b      	add	r3, r1
 800b550:	00db      	lsls	r3, r3, #3
 800b552:	4413      	add	r3, r2
 800b554:	7d1b      	ldrb	r3, [r3, #20]
 800b556:	f083 0301 	eor.w	r3, r3, #1
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d003      	beq.n	800b568 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 800b560:	7dbb      	ldrb	r3, [r7, #22]
 800b562:	3301      	adds	r3, #1
 800b564:	75bb      	strb	r3, [r7, #22]
                    continue;
 800b566:	e010      	b.n	800b58a <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 800b568:	7dfb      	ldrb	r3, [r7, #23]
 800b56a:	1c5a      	adds	r2, r3, #1
 800b56c:	75fa      	strb	r2, [r7, #23]
 800b56e:	461a      	mov	r2, r3
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	4413      	add	r3, r2
 800b574:	7d79      	ldrb	r1, [r7, #21]
 800b576:	7cfa      	ldrb	r2, [r7, #19]
 800b578:	440a      	add	r2, r1
 800b57a:	b2d2      	uxtb	r2, r2
 800b57c:	701a      	strb	r2, [r3, #0]
 800b57e:	e004      	b.n	800b58a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 800b580:	bf00      	nop
 800b582:	e002      	b.n	800b58a <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 800b584:	bf00      	nop
 800b586:	e000      	b.n	800b58a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 800b588:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 800b58a:	7cfb      	ldrb	r3, [r7, #19]
 800b58c:	3301      	adds	r3, #1
 800b58e:	74fb      	strb	r3, [r7, #19]
 800b590:	7cfb      	ldrb	r3, [r7, #19]
 800b592:	2b0f      	cmp	r3, #15
 800b594:	f67f af6c 	bls.w	800b470 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b598:	7d7b      	ldrb	r3, [r7, #21]
 800b59a:	3310      	adds	r3, #16
 800b59c:	757b      	strb	r3, [r7, #21]
 800b59e:	7d3b      	ldrb	r3, [r7, #20]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	753b      	strb	r3, [r7, #20]
 800b5a4:	7d7b      	ldrb	r3, [r7, #21]
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	8a1b      	ldrh	r3, [r3, #16]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	f4ff af5c 	bcc.w	800b46a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	7dfa      	ldrb	r2, [r7, #23]
 800b5b6:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	7dba      	ldrb	r2, [r7, #22]
 800b5bc:	701a      	strb	r2, [r3, #0]
}
 800b5be:	bf00      	nop
 800b5c0:	371c      	adds	r7, #28
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd90      	pop	{r4, r7, pc}

0800b5c6 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800b5c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5c8:	b08b      	sub	sp, #44	@ 0x2c
 800b5ca:	af04      	add	r7, sp, #16
 800b5cc:	60f8      	str	r0, [r7, #12]
 800b5ce:	60b9      	str	r1, [r7, #8]
 800b5d0:	607a      	str	r2, [r7, #4]
 800b5d2:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f006 fe25 	bl	8012228 <UTIL_TIMER_GetElapsedTime>
 800b5de:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	1ad2      	subs	r2, r2, r3
 800b5e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ea:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 800b5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d004      	beq.n	800b60a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800b604:	697a      	ldr	r2, [r7, #20]
 800b606:	429a      	cmp	r2, r3
 800b608:	d32b      	bcc.n	800b662 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	2200      	movs	r2, #0
 800b60e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	69db      	ldr	r3, [r3, #28]
 800b614:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800b61a:	68dd      	ldr	r5, [r3, #12]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	7a5e      	ldrb	r6, [r3, #9]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f893 c008 	ldrb.w	ip, [r3, #8]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	7d1b      	ldrb	r3, [r3, #20]
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	6992      	ldr	r2, [r2, #24]
 800b62e:	9203      	str	r2, [sp, #12]
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	f10d 0e04 	add.w	lr, sp, #4
 800b636:	320c      	adds	r2, #12
 800b638:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b63c:	e88e 0003 	stmia.w	lr, {r0, r1}
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	4663      	mov	r3, ip
 800b644:	4632      	mov	r2, r6
 800b646:	4629      	mov	r1, r5
 800b648:	4620      	mov	r0, r4
 800b64a:	f7ff fcff 	bl	800b04c <RegionCommonUpdateBandTimeOff>
 800b64e:	4602      	mov	r2, r0
 800b650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b652:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	69d8      	ldr	r0, [r3, #28]
 800b658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b65a:	683a      	ldr	r2, [r7, #0]
 800b65c:	6879      	ldr	r1, [r7, #4]
 800b65e:	f7ff fef4 	bl	800b44a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d004      	beq.n	800b674 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 800b66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b66c:	2200      	movs	r2, #0
 800b66e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 800b670:	2300      	movs	r3, #0
 800b672:	e006      	b.n	800b682 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 800b674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d001      	beq.n	800b680 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800b67c:	230b      	movs	r3, #11
 800b67e:	e000      	b.n	800b682 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800b680:	230c      	movs	r3, #12
    }
}
 800b682:	4618      	mov	r0, r3
 800b684:	371c      	adds	r7, #28
 800b686:	46bd      	mov	sp, r7
 800b688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b68a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800b68a:	b5b0      	push	{r4, r5, r7, lr}
 800b68c:	b086      	sub	sp, #24
 800b68e:	af02      	add	r7, sp, #8
 800b690:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f993 2000 	ldrsb.w	r2, [r3]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d103      	bne.n	800b6b0 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800b6ae:	e026      	b.n	800b6fe <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800b6be:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d019      	beq.n	800b6fa <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	78d8      	ldrb	r0, [r3, #3]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6859      	ldr	r1, [r3, #4]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f993 5002 	ldrsb.w	r5, [r3, #2]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	6892      	ldr	r2, [r2, #8]
 800b6de:	f997 400f 	ldrsb.w	r4, [r7, #15]
 800b6e2:	9201      	str	r2, [sp, #4]
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	462b      	mov	r3, r5
 800b6e8:	4622      	mov	r2, r4
 800b6ea:	f7ff fb9a 	bl	800ae22 <RegionCommonChanVerifyDr>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	f083 0301 	eor.w	r3, r3, #1
 800b6f4:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1da      	bne.n	800b6b0 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 800b6fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bdb0      	pop	{r4, r5, r7, pc}

0800b706 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 800b706:	b480      	push	{r7}
 800b708:	b083      	sub	sp, #12
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	4603      	mov	r3, r0
 800b70e:	460a      	mov	r2, r1
 800b710:	71fb      	strb	r3, [r7, #7]
 800b712:	4613      	mov	r3, r2
 800b714:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 800b716:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800b71a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b71e:	4293      	cmp	r3, r2
 800b720:	bfb8      	it	lt
 800b722:	4613      	movlt	r3, r2
 800b724:	b25b      	sxtb	r3, r3
}
 800b726:	4618      	mov	r0, r3
 800b728:	370c      	adds	r7, #12
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bc80      	pop	{r7}
 800b72e:	4770      	bx	lr

0800b730 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	4413      	add	r3, r2
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a07      	ldr	r2, [pc, #28]	@ (800b764 <RegionCommonGetBandwidth+0x34>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d004      	beq.n	800b754 <RegionCommonGetBandwidth+0x24>
 800b74a:	4a07      	ldr	r2, [pc, #28]	@ (800b768 <RegionCommonGetBandwidth+0x38>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d003      	beq.n	800b758 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 800b750:	2300      	movs	r3, #0
 800b752:	e002      	b.n	800b75a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 800b754:	2301      	movs	r3, #1
 800b756:	e000      	b.n	800b75a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 800b758:	2302      	movs	r3, #2
    }
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	370c      	adds	r7, #12
 800b75e:	46bd      	mov	sp, r7
 800b760:	bc80      	pop	{r7}
 800b762:	4770      	bx	lr
 800b764:	0003d090 	.word	0x0003d090
 800b768:	0007a120 	.word	0x0007a120

0800b76c <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	4603      	mov	r3, r0
 800b774:	6039      	str	r1, [r7, #0]
 800b776:	71fb      	strb	r3, [r7, #7]
 800b778:	4613      	mov	r3, r2
 800b77a:	71bb      	strb	r3, [r7, #6]
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800b77c:	bf00      	nop
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	bc80      	pop	{r7}
 800b784:	4770      	bx	lr

0800b786 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800b786:	b480      	push	{r7}
 800b788:	b083      	sub	sp, #12
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
 800b78e:	460b      	mov	r3, r1
 800b790:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
}
 800b792:	bf00      	nop
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	bc80      	pop	{r7}
 800b79a:	4770      	bx	lr

0800b79c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800b7a6:	4b2d      	ldr	r3, [pc, #180]	@ (800b85c <VerifyRfFreq+0xc0>)
 800b7a8:	6a1b      	ldr	r3, [r3, #32]
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	4798      	blx	r3
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	f083 0301 	eor.w	r3, r3, #1
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <VerifyRfFreq+0x22>
    {
        return false;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	e04a      	b.n	800b854 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4a27      	ldr	r2, [pc, #156]	@ (800b860 <VerifyRfFreq+0xc4>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d307      	bcc.n	800b7d6 <VerifyRfFreq+0x3a>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a26      	ldr	r2, [pc, #152]	@ (800b864 <VerifyRfFreq+0xc8>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d803      	bhi.n	800b7d6 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	2202      	movs	r2, #2
 800b7d2:	701a      	strb	r2, [r3, #0]
 800b7d4:	e03d      	b.n	800b852 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a22      	ldr	r2, [pc, #136]	@ (800b864 <VerifyRfFreq+0xc8>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d907      	bls.n	800b7ee <VerifyRfFreq+0x52>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a21      	ldr	r2, [pc, #132]	@ (800b868 <VerifyRfFreq+0xcc>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d803      	bhi.n	800b7ee <VerifyRfFreq+0x52>
    {
        *band = 0;
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	701a      	strb	r2, [r3, #0]
 800b7ec:	e031      	b.n	800b852 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a1d      	ldr	r2, [pc, #116]	@ (800b868 <VerifyRfFreq+0xcc>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d907      	bls.n	800b806 <VerifyRfFreq+0x6a>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a1c      	ldr	r2, [pc, #112]	@ (800b86c <VerifyRfFreq+0xd0>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d803      	bhi.n	800b806 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2201      	movs	r2, #1
 800b802:	701a      	strb	r2, [r3, #0]
 800b804:	e025      	b.n	800b852 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4a19      	ldr	r2, [pc, #100]	@ (800b870 <VerifyRfFreq+0xd4>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d907      	bls.n	800b81e <VerifyRfFreq+0x82>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	4a18      	ldr	r2, [pc, #96]	@ (800b874 <VerifyRfFreq+0xd8>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d803      	bhi.n	800b81e <VerifyRfFreq+0x82>
    {
        *band = 5;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	2205      	movs	r2, #5
 800b81a:	701a      	strb	r2, [r3, #0]
 800b81c:	e019      	b.n	800b852 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4a15      	ldr	r2, [pc, #84]	@ (800b878 <VerifyRfFreq+0xdc>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d907      	bls.n	800b836 <VerifyRfFreq+0x9a>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4a14      	ldr	r2, [pc, #80]	@ (800b87c <VerifyRfFreq+0xe0>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d803      	bhi.n	800b836 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	2203      	movs	r2, #3
 800b832:	701a      	strb	r2, [r3, #0]
 800b834:	e00d      	b.n	800b852 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a11      	ldr	r2, [pc, #68]	@ (800b880 <VerifyRfFreq+0xe4>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d307      	bcc.n	800b84e <VerifyRfFreq+0xb2>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a10      	ldr	r2, [pc, #64]	@ (800b884 <VerifyRfFreq+0xe8>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d803      	bhi.n	800b84e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	2204      	movs	r2, #4
 800b84a:	701a      	strb	r2, [r3, #0]
 800b84c:	e001      	b.n	800b852 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 800b84e:	2300      	movs	r3, #0
 800b850:	e000      	b.n	800b854 <VerifyRfFreq+0xb8>
    }
    return true;
 800b852:	2301      	movs	r3, #1
}
 800b854:	4618      	mov	r0, r3
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	08012a80 	.word	0x08012a80
 800b860:	337055c0 	.word	0x337055c0
 800b864:	338eda3f 	.word	0x338eda3f
 800b868:	33bca100 	.word	0x33bca100
 800b86c:	33c5c8c0 	.word	0x33c5c8c0
 800b870:	33c74f5f 	.word	0x33c74f5f
 800b874:	33cef080 	.word	0x33cef080
 800b878:	33d1fdbf 	.word	0x33d1fdbf
 800b87c:	33d5ce50 	.word	0x33d5ce50
 800b880:	33d691a0 	.word	0x33d691a0
 800b884:	33db2580 	.word	0x33db2580

0800b888 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800b888:	b590      	push	{r4, r7, lr}
 800b88a:	b08b      	sub	sp, #44	@ 0x2c
 800b88c:	af04      	add	r7, sp, #16
 800b88e:	4603      	mov	r3, r0
 800b890:	460a      	mov	r2, r1
 800b892:	71fb      	strb	r3, [r7, #7]
 800b894:	4613      	mov	r3, r2
 800b896:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 800b898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b89c:	4a1f      	ldr	r2, [pc, #124]	@ (800b91c <GetTimeOnAir+0x94>)
 800b89e:	5cd3      	ldrb	r3, [r2, r3]
 800b8a0:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800b8a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8a6:	491e      	ldr	r1, [pc, #120]	@ (800b920 <GetTimeOnAir+0x98>)
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7ff ff41 	bl	800b730 <RegionCommonGetBandwidth>
 800b8ae:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 800b8b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8b8:	2b07      	cmp	r3, #7
 800b8ba:	d118      	bne.n	800b8ee <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800b8bc:	4b19      	ldr	r3, [pc, #100]	@ (800b924 <GetTimeOnAir+0x9c>)
 800b8be:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b8c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b8c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b8c8:	fb02 f303 	mul.w	r3, r2, r3
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	88bb      	ldrh	r3, [r7, #4]
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	9203      	str	r2, [sp, #12]
 800b8d6:	9302      	str	r3, [sp, #8]
 800b8d8:	2300      	movs	r3, #0
 800b8da:	9301      	str	r3, [sp, #4]
 800b8dc:	2305      	movs	r3, #5
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	460a      	mov	r2, r1
 800b8e4:	68f9      	ldr	r1, [r7, #12]
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	47a0      	blx	r4
 800b8ea:	6178      	str	r0, [r7, #20]
 800b8ec:	e011      	b.n	800b912 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800b8ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b924 <GetTimeOnAir+0x9c>)
 800b8f0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b8f2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b8f6:	88bb      	ldrh	r3, [r7, #4]
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	2101      	movs	r1, #1
 800b8fc:	9103      	str	r1, [sp, #12]
 800b8fe:	9302      	str	r3, [sp, #8]
 800b900:	2300      	movs	r3, #0
 800b902:	9301      	str	r3, [sp, #4]
 800b904:	2308      	movs	r3, #8
 800b906:	9300      	str	r3, [sp, #0]
 800b908:	2301      	movs	r3, #1
 800b90a:	68f9      	ldr	r1, [r7, #12]
 800b90c:	2001      	movs	r0, #1
 800b90e:	47a0      	blx	r4
 800b910:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 800b912:	697b      	ldr	r3, [r7, #20]
}
 800b914:	4618      	mov	r0, r3
 800b916:	371c      	adds	r7, #28
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd90      	pop	{r4, r7, pc}
 800b91c:	080126c4 	.word	0x080126c4
 800b920:	080126cc 	.word	0x080126cc
 800b924:	08012a80 	.word	0x08012a80

0800b928 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b088      	sub	sp, #32
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 800b930:	2300      	movs	r3, #0
 800b932:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	3b01      	subs	r3, #1
 800b93a:	2b38      	cmp	r3, #56	@ 0x38
 800b93c:	f200 8128 	bhi.w	800bb90 <RegionEU868GetPhyParam+0x268>
 800b940:	a201      	add	r2, pc, #4	@ (adr r2, 800b948 <RegionEU868GetPhyParam+0x20>)
 800b942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b946:	bf00      	nop
 800b948:	0800ba2d 	.word	0x0800ba2d
 800b94c:	0800ba33 	.word	0x0800ba33
 800b950:	0800bb91 	.word	0x0800bb91
 800b954:	0800bb91 	.word	0x0800bb91
 800b958:	0800bb91 	.word	0x0800bb91
 800b95c:	0800ba39 	.word	0x0800ba39
 800b960:	0800bb91 	.word	0x0800bb91
 800b964:	0800ba73 	.word	0x0800ba73
 800b968:	0800bb91 	.word	0x0800bb91
 800b96c:	0800ba79 	.word	0x0800ba79
 800b970:	0800ba7f 	.word	0x0800ba7f
 800b974:	0800ba85 	.word	0x0800ba85
 800b978:	0800ba8b 	.word	0x0800ba8b
 800b97c:	0800ba9b 	.word	0x0800ba9b
 800b980:	0800baab 	.word	0x0800baab
 800b984:	0800bab1 	.word	0x0800bab1
 800b988:	0800bab9 	.word	0x0800bab9
 800b98c:	0800bac1 	.word	0x0800bac1
 800b990:	0800bac9 	.word	0x0800bac9
 800b994:	0800bad1 	.word	0x0800bad1
 800b998:	0800bad9 	.word	0x0800bad9
 800b99c:	0800bae1 	.word	0x0800bae1
 800b9a0:	0800baf5 	.word	0x0800baf5
 800b9a4:	0800bafb 	.word	0x0800bafb
 800b9a8:	0800bb01 	.word	0x0800bb01
 800b9ac:	0800bb07 	.word	0x0800bb07
 800b9b0:	0800bb13 	.word	0x0800bb13
 800b9b4:	0800bb1f 	.word	0x0800bb1f
 800b9b8:	0800bb25 	.word	0x0800bb25
 800b9bc:	0800bb2d 	.word	0x0800bb2d
 800b9c0:	0800bb33 	.word	0x0800bb33
 800b9c4:	0800bb39 	.word	0x0800bb39
 800b9c8:	0800bb41 	.word	0x0800bb41
 800b9cc:	0800ba3f 	.word	0x0800ba3f
 800b9d0:	0800bb91 	.word	0x0800bb91
 800b9d4:	0800bb91 	.word	0x0800bb91
 800b9d8:	0800bb91 	.word	0x0800bb91
 800b9dc:	0800bb91 	.word	0x0800bb91
 800b9e0:	0800bb91 	.word	0x0800bb91
 800b9e4:	0800bb91 	.word	0x0800bb91
 800b9e8:	0800bb91 	.word	0x0800bb91
 800b9ec:	0800bb91 	.word	0x0800bb91
 800b9f0:	0800bb91 	.word	0x0800bb91
 800b9f4:	0800bb91 	.word	0x0800bb91
 800b9f8:	0800bb91 	.word	0x0800bb91
 800b9fc:	0800bb91 	.word	0x0800bb91
 800ba00:	0800bb91 	.word	0x0800bb91
 800ba04:	0800bb47 	.word	0x0800bb47
 800ba08:	0800bb4d 	.word	0x0800bb4d
 800ba0c:	0800bb5b 	.word	0x0800bb5b
 800ba10:	0800bb91 	.word	0x0800bb91
 800ba14:	0800bb91 	.word	0x0800bb91
 800ba18:	0800bb61 	.word	0x0800bb61
 800ba1c:	0800bb67 	.word	0x0800bb67
 800ba20:	0800bb91 	.word	0x0800bb91
 800ba24:	0800bb6d 	.word	0x0800bb6d
 800ba28:	0800bb7d 	.word	0x0800bb7d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	61bb      	str	r3, [r7, #24]
            break;
 800ba30:	e0af      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 800ba32:	2300      	movs	r3, #0
 800ba34:	61bb      	str	r3, [r7, #24]
            break;
 800ba36:	e0ac      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	61bb      	str	r3, [r7, #24]
            break;
 800ba3c:	e0a9      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800ba44:	733b      	strb	r3, [r7, #12]
 800ba46:	2307      	movs	r3, #7
 800ba48:	737b      	strb	r3, [r7, #13]
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	73bb      	strb	r3, [r7, #14]
 800ba4e:	2310      	movs	r3, #16
 800ba50:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800ba52:	4b53      	ldr	r3, [pc, #332]	@ (800bba0 <RegionEU868GetPhyParam+0x278>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800ba5a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 800ba5c:	4b50      	ldr	r3, [pc, #320]	@ (800bba0 <RegionEU868GetPhyParam+0x278>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800ba60:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800ba62:	f107 030c 	add.w	r3, r7, #12
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff fe0f 	bl	800b68a <RegionCommonGetNextLowerTxDr>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	61bb      	str	r3, [r7, #24]
            break;
 800ba70:	e08f      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 800ba72:	2300      	movs	r3, #0
 800ba74:	61bb      	str	r3, [r7, #24]
            break;
 800ba76:	e08c      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	61bb      	str	r3, [r7, #24]
            break;
 800ba7c:	e089      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800ba7e:	2340      	movs	r3, #64	@ 0x40
 800ba80:	61bb      	str	r3, [r7, #24]
            break;
 800ba82:	e086      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800ba84:	2320      	movs	r3, #32
 800ba86:	61bb      	str	r3, [r7, #24]
            break;
 800ba88:	e083      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ba90:	461a      	mov	r2, r3
 800ba92:	4b44      	ldr	r3, [pc, #272]	@ (800bba4 <RegionEU868GetPhyParam+0x27c>)
 800ba94:	5c9b      	ldrb	r3, [r3, r2]
 800ba96:	61bb      	str	r3, [r7, #24]
            break;
 800ba98:	e07b      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800baa0:	461a      	mov	r2, r3
 800baa2:	4b41      	ldr	r3, [pc, #260]	@ (800bba8 <RegionEU868GetPhyParam+0x280>)
 800baa4:	5c9b      	ldrb	r3, [r3, r2]
 800baa6:	61bb      	str	r3, [r7, #24]
            break;
 800baa8:	e073      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800baaa:	2301      	movs	r3, #1
 800baac:	61bb      	str	r3, [r7, #24]
            break;
 800baae:	e070      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800bab0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800bab4:	61bb      	str	r3, [r7, #24]
            break;
 800bab6:	e06c      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800bab8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800babc:	61bb      	str	r3, [r7, #24]
            break;
 800babe:	e068      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800bac0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800bac4:	61bb      	str	r3, [r7, #24]
            break;
 800bac6:	e064      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800bac8:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bacc:	61bb      	str	r3, [r7, #24]
            break;
 800bace:	e060      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800bad0:	f241 7370 	movw	r3, #6000	@ 0x1770
 800bad4:	61bb      	str	r3, [r7, #24]
            break;
 800bad6:	e05c      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800bad8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800badc:	61bb      	str	r3, [r7, #24]
            break;
 800bade:	e058      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800bae0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800bae4:	4831      	ldr	r0, [pc, #196]	@ (800bbac <RegionEU868GetPhyParam+0x284>)
 800bae6:	f002 feb1 	bl	800e84c <randr>
 800baea:	4603      	mov	r3, r0
 800baec:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800baf0:	61bb      	str	r3, [r7, #24]
            break;
 800baf2:	e04e      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 800baf4:	2300      	movs	r3, #0
 800baf6:	61bb      	str	r3, [r7, #24]
            break;
 800baf8:	e04b      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800bafa:	4b2d      	ldr	r3, [pc, #180]	@ (800bbb0 <RegionEU868GetPhyParam+0x288>)
 800bafc:	61bb      	str	r3, [r7, #24]
            break;
 800bafe:	e048      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 800bb00:	2300      	movs	r3, #0
 800bb02:	61bb      	str	r3, [r7, #24]
            break;
 800bb04:	e045      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800bb06:	4b26      	ldr	r3, [pc, #152]	@ (800bba0 <RegionEU868GetPhyParam+0x278>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800bb0e:	61bb      	str	r3, [r7, #24]
            break;
 800bb10:	e03f      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800bb12:	4b23      	ldr	r3, [pc, #140]	@ (800bba0 <RegionEU868GetPhyParam+0x278>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800bb1a:	61bb      	str	r3, [r7, #24]
            break;
 800bb1c:	e039      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800bb1e:	2310      	movs	r3, #16
 800bb20:	61bb      	str	r3, [r7, #24]
            break;
 800bb22:	e036      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 800bb24:	4b1e      	ldr	r3, [pc, #120]	@ (800bba0 <RegionEU868GetPhyParam+0x278>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	61bb      	str	r3, [r7, #24]
            break;
 800bb2a:	e032      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	61bb      	str	r3, [r7, #24]
            break;
 800bb30:	e02f      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 800bb32:	2300      	movs	r3, #0
 800bb34:	61bb      	str	r3, [r7, #24]
            break;
 800bb36:	e02c      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800bb38:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 800bb3c:	61bb      	str	r3, [r7, #24]
            break;
 800bb3e:	e028      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800bb40:	4b1c      	ldr	r3, [pc, #112]	@ (800bbb4 <RegionEU868GetPhyParam+0x28c>)
 800bb42:	61bb      	str	r3, [r7, #24]
            break;
 800bb44:	e025      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800bb46:	4b1a      	ldr	r3, [pc, #104]	@ (800bbb0 <RegionEU868GetPhyParam+0x288>)
 800bb48:	61bb      	str	r3, [r7, #24]
            break;
 800bb4a:	e022      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800bb4c:	2311      	movs	r3, #17
 800bb4e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800bb50:	2302      	movs	r3, #2
 800bb52:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 800bb54:	2300      	movs	r3, #0
 800bb56:	76bb      	strb	r3, [r7, #26]
            break;
 800bb58:	e01b      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	61bb      	str	r3, [r7, #24]
            break;
 800bb5e:	e018      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800bb60:	4b13      	ldr	r3, [pc, #76]	@ (800bbb0 <RegionEU868GetPhyParam+0x288>)
 800bb62:	61bb      	str	r3, [r7, #24]
            break;
 800bb64:	e015      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800bb66:	2303      	movs	r3, #3
 800bb68:	61bb      	str	r3, [r7, #24]
            break;
 800bb6a:	e012      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800bb72:	461a      	mov	r2, r3
 800bb74:	4b10      	ldr	r3, [pc, #64]	@ (800bbb8 <RegionEU868GetPhyParam+0x290>)
 800bb76:	5c9b      	ldrb	r3, [r3, r2]
 800bb78:	61bb      	str	r3, [r7, #24]
            break;
 800bb7a:	e00a      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800bb82:	490e      	ldr	r1, [pc, #56]	@ (800bbbc <RegionEU868GetPhyParam+0x294>)
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7ff fdd3 	bl	800b730 <RegionCommonGetBandwidth>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	61bb      	str	r3, [r7, #24]
            break;
 800bb8e:	e000      	b.n	800bb92 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 800bb90:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	61fb      	str	r3, [r7, #28]
 800bb96:	69fb      	ldr	r3, [r7, #28]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3720      	adds	r7, #32
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	200012bc 	.word	0x200012bc
 800bba4:	080126ec 	.word	0x080126ec
 800bba8:	080126f4 	.word	0x080126f4
 800bbac:	fffffc18 	.word	0xfffffc18
 800bbb0:	33d3e608 	.word	0x33d3e608
 800bbb4:	4009999a 	.word	0x4009999a
 800bbb8:	080126c4 	.word	0x080126c4
 800bbbc:	080126cc 	.word	0x080126cc

0800bbc0 <RegionEU868InitDefaults>:
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b0b0      	sub	sp, #192	@ 0xc0
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800bbc8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bbcc:	2290      	movs	r2, #144	@ 0x90
 800bbce:	2100      	movs	r1, #0
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f006 fbd9 	bl	8012388 <memset>
 800bbd6:	2364      	movs	r3, #100	@ 0x64
 800bbd8:	863b      	strh	r3, [r7, #48]	@ 0x30
 800bbda:	2364      	movs	r3, #100	@ 0x64
 800bbdc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800bbe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bbe4:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800bbe8:	230a      	movs	r3, #10
 800bbea:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 800bbee:	2364      	movs	r3, #100	@ 0x64
 800bbf0:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800bbf4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bbf8:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	7a1b      	ldrb	r3, [r3, #8]
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d05e      	beq.n	800bcc2 <RegionEU868InitDefaults+0x102>
 800bc04:	2b02      	cmp	r3, #2
 800bc06:	dc6b      	bgt.n	800bce0 <RegionEU868InitDefaults+0x120>
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d002      	beq.n	800bc12 <RegionEU868InitDefaults+0x52>
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d03f      	beq.n	800bc90 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 800bc10:	e066      	b.n	800bce0 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d063      	beq.n	800bce2 <RegionEU868InitDefaults+0x122>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d05f      	beq.n	800bce2 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a30      	ldr	r2, [pc, #192]	@ (800bce8 <RegionEU868InitDefaults+0x128>)
 800bc28:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	4a2f      	ldr	r2, [pc, #188]	@ (800bcec <RegionEU868InitDefaults+0x12c>)
 800bc30:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800bc32:	4b2d      	ldr	r3, [pc, #180]	@ (800bce8 <RegionEU868InitDefaults+0x128>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4618      	mov	r0, r3
 800bc38:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bc3c:	2290      	movs	r2, #144	@ 0x90
 800bc3e:	4619      	mov	r1, r3
 800bc40:	f002 fe1b 	bl	800e87a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800bc44:	4b29      	ldr	r3, [pc, #164]	@ (800bcec <RegionEU868InitDefaults+0x12c>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a29      	ldr	r2, [pc, #164]	@ (800bcf0 <RegionEU868InitDefaults+0x130>)
 800bc4a:	ca07      	ldmia	r2, {r0, r1, r2}
 800bc4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800bc50:	4b26      	ldr	r3, [pc, #152]	@ (800bcec <RegionEU868InitDefaults+0x12c>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a27      	ldr	r2, [pc, #156]	@ (800bcf4 <RegionEU868InitDefaults+0x134>)
 800bc56:	330c      	adds	r3, #12
 800bc58:	ca07      	ldmia	r2, {r0, r1, r2}
 800bc5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800bc5e:	4b23      	ldr	r3, [pc, #140]	@ (800bcec <RegionEU868InitDefaults+0x12c>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a25      	ldr	r2, [pc, #148]	@ (800bcf8 <RegionEU868InitDefaults+0x138>)
 800bc64:	3318      	adds	r3, #24
 800bc66:	ca07      	ldmia	r2, {r0, r1, r2}
 800bc68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800bc6c:	4b1f      	ldr	r3, [pc, #124]	@ (800bcec <RegionEU868InitDefaults+0x12c>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2207      	movs	r2, #7
 800bc72:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800bc76:	4b1d      	ldr	r3, [pc, #116]	@ (800bcec <RegionEU868InitDefaults+0x12c>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 800bc7e:	4b1b      	ldr	r3, [pc, #108]	@ (800bcec <RegionEU868InitDefaults+0x12c>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800bc86:	2201      	movs	r2, #1
 800bc88:	4619      	mov	r1, r3
 800bc8a:	f7ff f9b9 	bl	800b000 <RegionCommonChanMaskCopy>
 800bc8e:	e028      	b.n	800bce2 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800bc90:	4b16      	ldr	r3, [pc, #88]	@ (800bcec <RegionEU868InitDefaults+0x12c>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2200      	movs	r2, #0
 800bc96:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800bc98:	4b14      	ldr	r3, [pc, #80]	@ (800bcec <RegionEU868InitDefaults+0x12c>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800bca0:	4b12      	ldr	r3, [pc, #72]	@ (800bcec <RegionEU868InitDefaults+0x12c>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	2200      	movs	r2, #0
 800bca6:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800bca8:	4b10      	ldr	r3, [pc, #64]	@ (800bcec <RegionEU868InitDefaults+0x12c>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 800bcb0:	4b0e      	ldr	r3, [pc, #56]	@ (800bcec <RegionEU868InitDefaults+0x12c>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800bcb8:	2201      	movs	r2, #1
 800bcba:	4619      	mov	r1, r3
 800bcbc:	f7ff f9a0 	bl	800b000 <RegionCommonChanMaskCopy>
            break;
 800bcc0:	e00f      	b.n	800bce2 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800bcc2:	4b0a      	ldr	r3, [pc, #40]	@ (800bcec <RegionEU868InitDefaults+0x12c>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	@ 0x480
 800bcca:	4b08      	ldr	r3, [pc, #32]	@ (800bcec <RegionEU868InitDefaults+0x12c>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	@ 0x48c
 800bcd2:	4b06      	ldr	r3, [pc, #24]	@ (800bcec <RegionEU868InitDefaults+0x12c>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	430a      	orrs	r2, r1
 800bcd8:	b292      	uxth	r2, r2
 800bcda:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
            break;
 800bcde:	e000      	b.n	800bce2 <RegionEU868InitDefaults+0x122>
            break;
 800bce0:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 800bce2:	37c0      	adds	r7, #192	@ 0xc0
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	200012b8 	.word	0x200012b8
 800bcec:	200012bc 	.word	0x200012bc
 800bcf0:	0801252c 	.word	0x0801252c
 800bcf4:	08012538 	.word	0x08012538
 800bcf8:	08012544 	.word	0x08012544

0800bcfc <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	460b      	mov	r3, r1
 800bd06:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800bd08:	78fb      	ldrb	r3, [r7, #3]
 800bd0a:	2b0f      	cmp	r3, #15
 800bd0c:	d86c      	bhi.n	800bde8 <RegionEU868Verify+0xec>
 800bd0e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd14 <RegionEU868Verify+0x18>)
 800bd10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd14:	0800bd55 	.word	0x0800bd55
 800bd18:	0800bde9 	.word	0x0800bde9
 800bd1c:	0800bde9 	.word	0x0800bde9
 800bd20:	0800bde9 	.word	0x0800bde9
 800bd24:	0800bde9 	.word	0x0800bde9
 800bd28:	0800bd6d 	.word	0x0800bd6d
 800bd2c:	0800bd8b 	.word	0x0800bd8b
 800bd30:	0800bda9 	.word	0x0800bda9
 800bd34:	0800bde9 	.word	0x0800bde9
 800bd38:	0800bdc7 	.word	0x0800bdc7
 800bd3c:	0800bdc7 	.word	0x0800bdc7
 800bd40:	0800bde9 	.word	0x0800bde9
 800bd44:	0800bde9 	.word	0x0800bde9
 800bd48:	0800bde9 	.word	0x0800bde9
 800bd4c:	0800bde9 	.word	0x0800bde9
 800bd50:	0800bde5 	.word	0x0800bde5
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800bd54:	2300      	movs	r3, #0
 800bd56:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f107 020f 	add.w	r2, r7, #15
 800bd60:	4611      	mov	r1, r2
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7ff fd1a 	bl	800b79c <VerifyRfFreq>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	e03e      	b.n	800bdea <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f993 3000 	ldrsb.w	r3, [r3]
 800bd72:	2207      	movs	r2, #7
 800bd74:	2100      	movs	r1, #0
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7ff f8c5 	bl	800af06 <RegionCommonValueInRange>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	bf14      	ite	ne
 800bd82:	2301      	movne	r3, #1
 800bd84:	2300      	moveq	r3, #0
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	e02f      	b.n	800bdea <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f993 3000 	ldrsb.w	r3, [r3]
 800bd90:	2205      	movs	r2, #5
 800bd92:	2100      	movs	r1, #0
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7ff f8b6 	bl	800af06 <RegionCommonValueInRange>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	bf14      	ite	ne
 800bda0:	2301      	movne	r3, #1
 800bda2:	2300      	moveq	r3, #0
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	e020      	b.n	800bdea <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f993 3000 	ldrsb.w	r3, [r3]
 800bdae:	2207      	movs	r2, #7
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff f8a7 	bl	800af06 <RegionCommonValueInRange>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	bf14      	ite	ne
 800bdbe:	2301      	movne	r3, #1
 800bdc0:	2300      	moveq	r3, #0
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	e011      	b.n	800bdea <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f993 3000 	ldrsb.w	r3, [r3]
 800bdcc:	2207      	movs	r2, #7
 800bdce:	2100      	movs	r1, #0
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff f898 	bl	800af06 <RegionCommonValueInRange>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	bf14      	ite	ne
 800bddc:	2301      	movne	r3, #1
 800bdde:	2300      	moveq	r3, #0
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	e002      	b.n	800bdea <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 800bde4:	2301      	movs	r3, #1
 800bde6:	e000      	b.n	800bdea <RegionEU868Verify+0xee>
        }
        default:
            return false;
 800bde8:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop

0800bdf4 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	791b      	ldrb	r3, [r3, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d002      	beq.n	800be0a <RegionEU868ChanMaskSet+0x16>
 800be04:	2b01      	cmp	r3, #1
 800be06:	d00b      	beq.n	800be20 <RegionEU868ChanMaskSet+0x2c>
 800be08:	e015      	b.n	800be36 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800be0a:	4b0e      	ldr	r3, [pc, #56]	@ (800be44 <RegionEU868ChanMaskSet+0x50>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2201      	movs	r2, #1
 800be18:	4619      	mov	r1, r3
 800be1a:	f7ff f8f1 	bl	800b000 <RegionCommonChanMaskCopy>
            break;
 800be1e:	e00c      	b.n	800be3a <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800be20:	4b08      	ldr	r3, [pc, #32]	@ (800be44 <RegionEU868ChanMaskSet+0x50>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2201      	movs	r2, #1
 800be2e:	4619      	mov	r1, r3
 800be30:	f7ff f8e6 	bl	800b000 <RegionCommonChanMaskCopy>
            break;
 800be34:	e001      	b.n	800be3a <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 800be36:	2300      	movs	r3, #0
 800be38:	e000      	b.n	800be3c <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 800be3a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3708      	adds	r7, #8
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	200012bc 	.word	0x200012bc

0800be48 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b088      	sub	sp, #32
 800be4c:	af02      	add	r7, sp, #8
 800be4e:	60ba      	str	r2, [r7, #8]
 800be50:	607b      	str	r3, [r7, #4]
 800be52:	4603      	mov	r3, r0
 800be54:	73fb      	strb	r3, [r7, #15]
 800be56:	460b      	mov	r3, r1
 800be58:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 800be5a:	2300      	movs	r3, #0
 800be5c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800be5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be62:	2b07      	cmp	r3, #7
 800be64:	bfa8      	it	ge
 800be66:	2307      	movge	r3, #7
 800be68:	b25a      	sxtb	r2, r3
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800be74:	491e      	ldr	r1, [pc, #120]	@ (800bef0 <RegionEU868ComputeRxWindowParameters+0xa8>)
 800be76:	4618      	mov	r0, r3
 800be78:	f7ff fc5a 	bl	800b730 <RegionCommonGetBandwidth>
 800be7c:	4603      	mov	r3, r0
 800be7e:	b2da      	uxtb	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800be8a:	2b07      	cmp	r3, #7
 800be8c:	d10a      	bne.n	800bea4 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800be94:	461a      	mov	r2, r3
 800be96:	4b17      	ldr	r3, [pc, #92]	@ (800bef4 <RegionEU868ComputeRxWindowParameters+0xac>)
 800be98:	5c9b      	ldrb	r3, [r3, r2]
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7ff f9dc 	bl	800b258 <RegionCommonComputeSymbolTimeFsk>
 800bea0:	6178      	str	r0, [r7, #20]
 800bea2:	e011      	b.n	800bec8 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800beaa:	461a      	mov	r2, r3
 800beac:	4b11      	ldr	r3, [pc, #68]	@ (800bef4 <RegionEU868ComputeRxWindowParameters+0xac>)
 800beae:	5c9a      	ldrb	r2, [r3, r2]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800beb6:	4619      	mov	r1, r3
 800beb8:	4b0d      	ldr	r3, [pc, #52]	@ (800bef0 <RegionEU868ComputeRxWindowParameters+0xa8>)
 800beba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bebe:	4619      	mov	r1, r3
 800bec0:	4610      	mov	r0, r2
 800bec2:	f7ff f9b3 	bl	800b22c <RegionCommonComputeSymbolTimeLoRa>
 800bec6:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800bec8:	4b0b      	ldr	r3, [pc, #44]	@ (800bef8 <RegionEU868ComputeRxWindowParameters+0xb0>)
 800beca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800becc:	4798      	blx	r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	3308      	adds	r3, #8
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	320c      	adds	r2, #12
 800bed6:	7bb9      	ldrb	r1, [r7, #14]
 800bed8:	9201      	str	r2, [sp, #4]
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	4603      	mov	r3, r0
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	6978      	ldr	r0, [r7, #20]
 800bee2:	f7ff f9c9 	bl	800b278 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800bee6:	bf00      	nop
 800bee8:	3718      	adds	r7, #24
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	080126cc 	.word	0x080126cc
 800bef4:	080126c4 	.word	0x080126c4
 800bef8:	08012a80 	.word	0x08012a80

0800befc <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800befc:	b5b0      	push	{r4, r5, r7, lr}
 800befe:	b090      	sub	sp, #64	@ 0x40
 800bf00:	af0a      	add	r7, sp, #40	@ 0x28
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	785b      	ldrb	r3, [r3, #1]
 800bf0a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 800bf1a:	4b5a      	ldr	r3, [pc, #360]	@ (800c084 <RegionEU868RxConfig+0x188>)
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	4798      	blx	r3
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d001      	beq.n	800bf2a <RegionEU868RxConfig+0x2e>
    {
        return false;
 800bf26:	2300      	movs	r3, #0
 800bf28:	e0a8      	b.n	800c07c <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	7cdb      	ldrb	r3, [r3, #19]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d126      	bne.n	800bf80 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800bf32:	4b55      	ldr	r3, [pc, #340]	@ (800c088 <RegionEU868RxConfig+0x18c>)
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	005b      	lsls	r3, r3, #1
 800bf40:	440b      	add	r3, r1
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4413      	add	r3, r2
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800bf4a:	4b4f      	ldr	r3, [pc, #316]	@ (800c088 <RegionEU868RxConfig+0x18c>)
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	4619      	mov	r1, r3
 800bf54:	460b      	mov	r3, r1
 800bf56:	005b      	lsls	r3, r3, #1
 800bf58:	440b      	add	r3, r1
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	4413      	add	r3, r2
 800bf5e:	3304      	adds	r3, #4
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00c      	beq.n	800bf80 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 800bf66:	4b48      	ldr	r3, [pc, #288]	@ (800c088 <RegionEU868RxConfig+0x18c>)
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	460b      	mov	r3, r1
 800bf72:	005b      	lsls	r3, r3, #1
 800bf74:	440b      	add	r3, r1
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	4413      	add	r3, r2
 800bf7a:	3304      	adds	r3, #4
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800bf80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf84:	4a41      	ldr	r2, [pc, #260]	@ (800c08c <RegionEU868RxConfig+0x190>)
 800bf86:	5cd3      	ldrb	r3, [r2, r3]
 800bf88:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 800bf8a:	4b3e      	ldr	r3, [pc, #248]	@ (800c084 <RegionEU868RxConfig+0x188>)
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	6938      	ldr	r0, [r7, #16]
 800bf90:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800bf92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf96:	2b07      	cmp	r3, #7
 800bf98:	d128      	bne.n	800bfec <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800bf9e:	4b39      	ldr	r3, [pc, #228]	@ (800c084 <RegionEU868RxConfig+0x188>)
 800bfa0:	699c      	ldr	r4, [r3, #24]
 800bfa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfa6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bfaa:	fb02 f303 	mul.w	r3, r2, r3
 800bfae:	4619      	mov	r1, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	687a      	ldr	r2, [r7, #4]
 800bfb8:	7c92      	ldrb	r2, [r2, #18]
 800bfba:	7df8      	ldrb	r0, [r7, #23]
 800bfbc:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	9208      	str	r2, [sp, #32]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	9207      	str	r2, [sp, #28]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	9206      	str	r2, [sp, #24]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	9205      	str	r2, [sp, #20]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	9204      	str	r2, [sp, #16]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	9203      	str	r2, [sp, #12]
 800bfd6:	9302      	str	r3, [sp, #8]
 800bfd8:	2305      	movs	r3, #5
 800bfda:	9301      	str	r3, [sp, #4]
 800bfdc:	4b2c      	ldr	r3, [pc, #176]	@ (800c090 <RegionEU868RxConfig+0x194>)
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	460a      	mov	r2, r1
 800bfe4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bfe8:	47a0      	blx	r4
 800bfea:	e024      	b.n	800c036 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 800bfec:	2301      	movs	r3, #1
 800bfee:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800bff0:	4b24      	ldr	r3, [pc, #144]	@ (800c084 <RegionEU868RxConfig+0x188>)
 800bff2:	699c      	ldr	r4, [r3, #24]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	789b      	ldrb	r3, [r3, #2]
 800bff8:	461d      	mov	r5, r3
 800bffa:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	b29b      	uxth	r3, r3
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	7c92      	ldrb	r2, [r2, #18]
 800c008:	7df8      	ldrb	r0, [r7, #23]
 800c00a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c00c:	2201      	movs	r2, #1
 800c00e:	9208      	str	r2, [sp, #32]
 800c010:	2200      	movs	r2, #0
 800c012:	9207      	str	r2, [sp, #28]
 800c014:	2200      	movs	r2, #0
 800c016:	9206      	str	r2, [sp, #24]
 800c018:	2200      	movs	r2, #0
 800c01a:	9205      	str	r2, [sp, #20]
 800c01c:	2200      	movs	r2, #0
 800c01e:	9204      	str	r2, [sp, #16]
 800c020:	2200      	movs	r2, #0
 800c022:	9203      	str	r2, [sp, #12]
 800c024:	9302      	str	r3, [sp, #8]
 800c026:	2308      	movs	r3, #8
 800c028:	9301      	str	r3, [sp, #4]
 800c02a:	2300      	movs	r3, #0
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	2301      	movs	r3, #1
 800c030:	460a      	mov	r2, r1
 800c032:	4629      	mov	r1, r5
 800c034:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	7c5b      	ldrb	r3, [r3, #17]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d005      	beq.n	800c04a <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800c03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c042:	4a14      	ldr	r2, [pc, #80]	@ (800c094 <RegionEU868RxConfig+0x198>)
 800c044:	5cd3      	ldrb	r3, [r2, r3]
 800c046:	75bb      	strb	r3, [r7, #22]
 800c048:	e004      	b.n	800c054 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800c04a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c04e:	4a12      	ldr	r2, [pc, #72]	@ (800c098 <RegionEU868RxConfig+0x19c>)
 800c050:	5cd3      	ldrb	r3, [r2, r3]
 800c052:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800c054:	4b0b      	ldr	r3, [pc, #44]	@ (800c084 <RegionEU868RxConfig+0x188>)
 800c056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c058:	7dba      	ldrb	r2, [r7, #22]
 800c05a:	320d      	adds	r2, #13
 800c05c:	b2d1      	uxtb	r1, r2
 800c05e:	7dfa      	ldrb	r2, [r7, #23]
 800c060:	4610      	mov	r0, r2
 800c062:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	7cdb      	ldrb	r3, [r3, #19]
 800c068:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800c06c:	6939      	ldr	r1, [r7, #16]
 800c06e:	4618      	mov	r0, r3
 800c070:	f7ff fb7c 	bl	800b76c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	7bfa      	ldrb	r2, [r7, #15]
 800c078:	701a      	strb	r2, [r3, #0]
    return true;
 800c07a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3718      	adds	r7, #24
 800c080:	46bd      	mov	sp, r7
 800c082:	bdb0      	pop	{r4, r5, r7, pc}
 800c084:	08012a80 	.word	0x08012a80
 800c088:	200012bc 	.word	0x200012bc
 800c08c:	080126c4 	.word	0x080126c4
 800c090:	00014585 	.word	0x00014585
 800c094:	080126f4 	.word	0x080126f4
 800c098:	080126ec 	.word	0x080126ec

0800c09c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c09c:	b590      	push	{r4, r7, lr}
 800c09e:	b093      	sub	sp, #76	@ 0x4c
 800c0a0:	af0a      	add	r7, sp, #40	@ 0x28
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	4b5d      	ldr	r3, [pc, #372]	@ (800c228 <RegionEU868TxConfig+0x18c>)
 800c0b2:	5c9b      	ldrb	r3, [r3, r2]
 800c0b4:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 800c0bc:	4b5b      	ldr	r3, [pc, #364]	@ (800c22c <RegionEU868TxConfig+0x190>)
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	4b5b      	ldr	r3, [pc, #364]	@ (800c230 <RegionEU868TxConfig+0x194>)
 800c0c2:	6819      	ldr	r1, [r3, #0]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	461c      	mov	r4, r3
 800c0ca:	4623      	mov	r3, r4
 800c0cc:	005b      	lsls	r3, r3, #1
 800c0ce:	4423      	add	r3, r4
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	440b      	add	r3, r1
 800c0d4:	3309      	adds	r3, #9
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	4619      	mov	r1, r3
 800c0da:	460b      	mov	r3, r1
 800c0dc:	005b      	lsls	r3, r3, #1
 800c0de:	440b      	add	r3, r1
 800c0e0:	00db      	lsls	r3, r3, #3
 800c0e2:	4413      	add	r3, r2
 800c0e4:	3302      	adds	r3, #2
 800c0e6:	f993 3000 	ldrsb.w	r3, [r3]
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	f7ff fb0b 	bl	800b706 <RegionCommonLimitTxPower>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800c0fa:	494e      	ldr	r1, [pc, #312]	@ (800c234 <RegionEU868TxConfig+0x198>)
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff fb17 	bl	800b730 <RegionCommonGetBandwidth>
 800c102:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 800c104:	2300      	movs	r3, #0
 800c106:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	6859      	ldr	r1, [r3, #4]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	689a      	ldr	r2, [r3, #8]
 800c110:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c114:	4618      	mov	r0, r3
 800c116:	f7ff f967 	bl	800b3e8 <RegionCommonComputeTxPower>
 800c11a:	4603      	mov	r3, r0
 800c11c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800c11e:	4b46      	ldr	r3, [pc, #280]	@ (800c238 <RegionEU868TxConfig+0x19c>)
 800c120:	68da      	ldr	r2, [r3, #12]
 800c122:	4b43      	ldr	r3, [pc, #268]	@ (800c230 <RegionEU868TxConfig+0x194>)
 800c124:	6819      	ldr	r1, [r3, #0]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	4618      	mov	r0, r3
 800c12c:	4603      	mov	r3, r0
 800c12e:	005b      	lsls	r3, r3, #1
 800c130:	4403      	add	r3, r0
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	440b      	add	r3, r1
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4618      	mov	r0, r3
 800c13a:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800c142:	2b07      	cmp	r3, #7
 800c144:	d124      	bne.n	800c190 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 800c146:	2300      	movs	r3, #0
 800c148:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800c14a:	4b3b      	ldr	r3, [pc, #236]	@ (800c238 <RegionEU868TxConfig+0x19c>)
 800c14c:	69dc      	ldr	r4, [r3, #28]
 800c14e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c152:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c156:	fb02 f303 	mul.w	r3, r2, r3
 800c15a:	461a      	mov	r2, r3
 800c15c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 800c160:	7ff8      	ldrb	r0, [r7, #31]
 800c162:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800c166:	9308      	str	r3, [sp, #32]
 800c168:	2300      	movs	r3, #0
 800c16a:	9307      	str	r3, [sp, #28]
 800c16c:	2300      	movs	r3, #0
 800c16e:	9306      	str	r3, [sp, #24]
 800c170:	2300      	movs	r3, #0
 800c172:	9305      	str	r3, [sp, #20]
 800c174:	2301      	movs	r3, #1
 800c176:	9304      	str	r3, [sp, #16]
 800c178:	2300      	movs	r3, #0
 800c17a:	9303      	str	r3, [sp, #12]
 800c17c:	2305      	movs	r3, #5
 800c17e:	9302      	str	r3, [sp, #8]
 800c180:	2300      	movs	r3, #0
 800c182:	9301      	str	r3, [sp, #4]
 800c184:	9200      	str	r2, [sp, #0]
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800c18c:	47a0      	blx	r4
 800c18e:	e01d      	b.n	800c1cc <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 800c190:	2301      	movs	r3, #1
 800c192:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800c194:	4b28      	ldr	r3, [pc, #160]	@ (800c238 <RegionEU868TxConfig+0x19c>)
 800c196:	69dc      	ldr	r4, [r3, #28]
 800c198:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c19c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 800c1a0:	7ff8      	ldrb	r0, [r7, #31]
 800c1a2:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800c1a6:	9208      	str	r2, [sp, #32]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	9207      	str	r2, [sp, #28]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	9206      	str	r2, [sp, #24]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	9205      	str	r2, [sp, #20]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	9204      	str	r2, [sp, #16]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	9203      	str	r2, [sp, #12]
 800c1bc:	2208      	movs	r2, #8
 800c1be:	9202      	str	r2, [sp, #8]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	9201      	str	r2, [sp, #4]
 800c1c4:	9300      	str	r3, [sp, #0]
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800c1cc:	4b18      	ldr	r3, [pc, #96]	@ (800c230 <RegionEU868TxConfig+0x194>)
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	005b      	lsls	r3, r3, #1
 800c1da:	440b      	add	r3, r1
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4413      	add	r3, r2
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	f7ff facb 	bl	800b786 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	899b      	ldrh	r3, [r3, #12]
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	f7ff fb43 	bl	800b888 <GetTimeOnAir>
 800c202:	4602      	mov	r2, r0
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800c208:	4b0b      	ldr	r3, [pc, #44]	@ (800c238 <RegionEU868TxConfig+0x19c>)
 800c20a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	8992      	ldrh	r2, [r2, #12]
 800c210:	b2d1      	uxtb	r1, r2
 800c212:	7ffa      	ldrb	r2, [r7, #31]
 800c214:	4610      	mov	r0, r2
 800c216:	4798      	blx	r3

    *txPower = txPowerLimited;
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	7f7a      	ldrb	r2, [r7, #29]
 800c21c:	701a      	strb	r2, [r3, #0]
    return true;
 800c21e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800c220:	4618      	mov	r0, r3
 800c222:	3724      	adds	r7, #36	@ 0x24
 800c224:	46bd      	mov	sp, r7
 800c226:	bd90      	pop	{r4, r7, pc}
 800c228:	080126c4 	.word	0x080126c4
 800c22c:	200012b8 	.word	0x200012b8
 800c230:	200012bc 	.word	0x200012bc
 800c234:	080126cc 	.word	0x080126cc
 800c238:	08012a80 	.word	0x08012a80

0800c23c <RegionEU868AlternateDr>:
#endif /* REGION_EU868 */
    return status;
}

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	4603      	mov	r3, r0
 800c244:	460a      	mov	r2, r1
 800c246:	71fb      	strb	r3, [r7, #7]
 800c248:	4613      	mov	r3, r2
 800c24a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 800c24c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 800c250:	4618      	mov	r0, r3
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	bc80      	pop	{r7}
 800c258:	4770      	bx	lr
	...

0800c25c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b09a      	sub	sp, #104	@ 0x68
 800c260:	af02      	add	r7, sp, #8
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	607a      	str	r2, [r7, #4]
 800c268:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800c26a:	2300      	movs	r3, #0
 800c26c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 800c270:	2300      	movs	r3, #0
 800c272:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800c276:	2300      	movs	r3, #0
 800c278:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c27a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800c27e:	2200      	movs	r2, #0
 800c280:	601a      	str	r2, [r3, #0]
 800c282:	605a      	str	r2, [r3, #4]
 800c284:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800c286:	230c      	movs	r3, #12
 800c288:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800c28c:	2307      	movs	r3, #7
 800c28e:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800c290:	4b47      	ldr	r3, [pc, #284]	@ (800c3b0 <RegionEU868NextChannel+0x154>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800c298:	2201      	movs	r2, #1
 800c29a:	2100      	movs	r1, #0
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fe fe83 	bl	800afa8 <RegionCommonCountChannels>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d10a      	bne.n	800c2be <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800c2a8:	4b41      	ldr	r3, [pc, #260]	@ (800c3b0 <RegionEU868NextChannel+0x154>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 800c2b0:	4b3f      	ldr	r3, [pc, #252]	@ (800c3b0 <RegionEU868NextChannel+0x154>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f042 0207 	orr.w	r2, r2, #7
 800c2b8:	b292      	uxth	r2, r2
 800c2ba:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	7a5b      	ldrb	r3, [r3, #9]
 800c2c2:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c2ce:	4b38      	ldr	r3, [pc, #224]	@ (800c3b0 <RegionEU868NextChannel+0x154>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800c2d6:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800c2d8:	4b35      	ldr	r3, [pc, #212]	@ (800c3b0 <RegionEU868NextChannel+0x154>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800c2de:	4b35      	ldr	r3, [pc, #212]	@ (800c3b4 <RegionEU868NextChannel+0x158>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800c2e4:	2310      	movs	r3, #16
 800c2e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 800c2e8:	f107 0312 	add.w	r3, r7, #18
 800c2ec:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	7a9b      	ldrb	r3, [r3, #10]
 800c2fe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800c302:	2306      	movs	r3, #6
 800c304:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800c308:	68fa      	ldr	r2, [r7, #12]
 800c30a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800c30e:	320c      	adds	r2, #12
 800c310:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c314:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	7d1b      	ldrb	r3, [r3, #20]
 800c31c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	8adb      	ldrh	r3, [r3, #22]
 800c32a:	4619      	mov	r1, r3
 800c32c:	4610      	mov	r0, r2
 800c32e:	f7ff faab 	bl	800b888 <GetTimeOnAir>
 800c332:	4603      	mov	r3, r0
 800c334:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800c336:	f107 0314 	add.w	r3, r7, #20
 800c33a:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800c33c:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 800c340:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800c344:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	9301      	str	r3, [sp, #4]
 800c34c:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 800c350:	9300      	str	r3, [sp, #0]
 800c352:	460b      	mov	r3, r1
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	f7ff f936 	bl	800b5c6 <RegionCommonIdentifyChannels>
 800c35a:	4603      	mov	r3, r0
 800c35c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800c360:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c364:	2b00      	cmp	r3, #0
 800c366:	d10e      	bne.n	800c386 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800c368:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800c36c:	3b01      	subs	r3, #1
 800c36e:	4619      	mov	r1, r3
 800c370:	2000      	movs	r0, #0
 800c372:	f002 fa6b 	bl	800e84c <randr>
 800c376:	4603      	mov	r3, r0
 800c378:	3360      	adds	r3, #96	@ 0x60
 800c37a:	443b      	add	r3, r7
 800c37c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	701a      	strb	r2, [r3, #0]
 800c384:	e00e      	b.n	800c3a4 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800c386:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c38a:	2b0c      	cmp	r3, #12
 800c38c:	d10a      	bne.n	800c3a4 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800c38e:	4b08      	ldr	r3, [pc, #32]	@ (800c3b0 <RegionEU868NextChannel+0x154>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 800c396:	4b06      	ldr	r3, [pc, #24]	@ (800c3b0 <RegionEU868NextChannel+0x154>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f042 0207 	orr.w	r2, r2, #7
 800c39e:	b292      	uxth	r2, r2
 800c3a0:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }
    return status;
 800c3a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3760      	adds	r7, #96	@ 0x60
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	200012bc 	.word	0x200012bc
 800c3b4:	200012b8 	.word	0x200012b8

0800c3b8 <RegionEU868SetContinuousWave>:
#endif /* REGION_EU868 */
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800c3b8:	b590      	push	{r4, r7, lr}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f993 0002 	ldrsb.w	r0, [r3, #2]
 800c3c6:	4b20      	ldr	r3, [pc, #128]	@ (800c448 <RegionEU868SetContinuousWave+0x90>)
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	4b20      	ldr	r3, [pc, #128]	@ (800c44c <RegionEU868SetContinuousWave+0x94>)
 800c3cc:	6819      	ldr	r1, [r3, #0]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	461c      	mov	r4, r3
 800c3d4:	4623      	mov	r3, r4
 800c3d6:	005b      	lsls	r3, r3, #1
 800c3d8:	4423      	add	r3, r4
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	440b      	add	r3, r1
 800c3de:	3309      	adds	r3, #9
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	005b      	lsls	r3, r3, #1
 800c3e8:	440b      	add	r3, r1
 800c3ea:	00db      	lsls	r3, r3, #3
 800c3ec:	4413      	add	r3, r2
 800c3ee:	3302      	adds	r3, #2
 800c3f0:	f993 3000 	ldrsb.w	r3, [r3]
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	f7ff f986 	bl	800b706 <RegionCommonLimitTxPower>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 800c3fe:	2300      	movs	r3, #0
 800c400:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800c402:	4b12      	ldr	r3, [pc, #72]	@ (800c44c <RegionEU868SetContinuousWave+0x94>)
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	4619      	mov	r1, r3
 800c40c:	460b      	mov	r3, r1
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	440b      	add	r3, r1
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	4413      	add	r3, r2
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6859      	ldr	r1, [r3, #4]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	689a      	ldr	r2, [r3, #8]
 800c422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c426:	4618      	mov	r0, r3
 800c428:	f7fe ffde 	bl	800b3e8 <RegionCommonComputeTxPower>
 800c42c:	4603      	mov	r3, r0
 800c42e:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800c430:	4b07      	ldr	r3, [pc, #28]	@ (800c450 <RegionEU868SetContinuousWave+0x98>)
 800c432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	8992      	ldrh	r2, [r2, #12]
 800c438:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800c43c:	68b8      	ldr	r0, [r7, #8]
 800c43e:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800c440:	bf00      	nop
 800c442:	3714      	adds	r7, #20
 800c444:	46bd      	mov	sp, r7
 800c446:	bd90      	pop	{r4, r7, pc}
 800c448:	200012b8 	.word	0x200012b8
 800c44c:	200012bc 	.word	0x200012bc
 800c450:	08012a80 	.word	0x08012a80

0800c454 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	4603      	mov	r3, r0
 800c45c:	71fb      	strb	r3, [r7, #7]
 800c45e:	460b      	mov	r3, r1
 800c460:	71bb      	strb	r3, [r7, #6]
 800c462:	4613      	mov	r3, r2
 800c464:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800c466:	79ba      	ldrb	r2, [r7, #6]
 800c468:	797b      	ldrb	r3, [r7, #5]
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 800c470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c474:	2b00      	cmp	r3, #0
 800c476:	da01      	bge.n	800c47c <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 800c478:	2300      	movs	r3, #0
 800c47a:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 800c47c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3714      	adds	r7, #20
 800c482:	46bd      	mov	sp, r7
 800c484:	bc80      	pop	{r7}
 800c486:	4770      	bx	lr

0800c488 <LimitTxPower>:
#if (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	603b      	str	r3, [r7, #0]
 800c490:	4603      	mov	r3, r0
 800c492:	71fb      	strb	r3, [r7, #7]
 800c494:	460b      	mov	r3, r1
 800c496:	71bb      	strb	r3, [r7, #6]
 800c498:	4613      	mov	r3, r2
 800c49a:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 800c49c:	79fb      	ldrb	r3, [r7, #7]
 800c49e:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800c4a0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800c4a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7ff f92b 	bl	800b706 <RegionCommonLimitTxPower>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 800c4b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800c4b8:	2b04      	cmp	r3, #4
 800c4ba:	d106      	bne.n	800c4ca <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800c4bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4c0:	2b02      	cmp	r3, #2
 800c4c2:	bfb8      	it	lt
 800c4c4:	2302      	movlt	r3, #2
 800c4c6:	73fb      	strb	r3, [r7, #15]
 800c4c8:	e00d      	b.n	800c4e6 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800c4ca:	2204      	movs	r2, #4
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	6838      	ldr	r0, [r7, #0]
 800c4d0:	f7fe fd6a 	bl	800afa8 <RegionCommonCountChannels>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b31      	cmp	r3, #49	@ 0x31
 800c4d8:	d805      	bhi.n	800c4e6 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800c4da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4de:	2b05      	cmp	r3, #5
 800c4e0:	bfb8      	it	lt
 800c4e2:	2305      	movlt	r3, #5
 800c4e4:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 800c4e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
	...

0800c4f4 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800c4fc:	4b18      	ldr	r3, [pc, #96]	@ (800c560 <VerifyRfFreq+0x6c>)
 800c4fe:	6a1b      	ldr	r3, [r3, #32]
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	4798      	blx	r3
 800c504:	4603      	mov	r3, r0
 800c506:	f083 0301 	eor.w	r3, r3, #1
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <VerifyRfFreq+0x20>
    {
        return false;
 800c510:	2300      	movs	r3, #0
 800c512:	e021      	b.n	800c558 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4a13      	ldr	r2, [pc, #76]	@ (800c564 <VerifyRfFreq+0x70>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d910      	bls.n	800c53e <VerifyRfFreq+0x4a>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	4a12      	ldr	r2, [pc, #72]	@ (800c568 <VerifyRfFreq+0x74>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d80c      	bhi.n	800c53e <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	4b11      	ldr	r3, [pc, #68]	@ (800c56c <VerifyRfFreq+0x78>)
 800c528:	4413      	add	r3, r2
 800c52a:	4a11      	ldr	r2, [pc, #68]	@ (800c570 <VerifyRfFreq+0x7c>)
 800c52c:	fba2 1203 	umull	r1, r2, r2, r3
 800c530:	0c92      	lsrs	r2, r2, #18
 800c532:	4910      	ldr	r1, [pc, #64]	@ (800c574 <VerifyRfFreq+0x80>)
 800c534:	fb01 f202 	mul.w	r2, r1, r2
 800c538:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800c53a:	2a00      	cmp	r2, #0
 800c53c:	d001      	beq.n	800c542 <VerifyRfFreq+0x4e>
    {
        return false;
 800c53e:	2300      	movs	r3, #0
 800c540:	e00a      	b.n	800c558 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4a0c      	ldr	r2, [pc, #48]	@ (800c578 <VerifyRfFreq+0x84>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d903      	bls.n	800c552 <VerifyRfFreq+0x5e>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4a06      	ldr	r2, [pc, #24]	@ (800c568 <VerifyRfFreq+0x74>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d901      	bls.n	800c556 <VerifyRfFreq+0x62>
    {
        return false;
 800c552:	2300      	movs	r3, #0
 800c554:	e000      	b.n	800c558 <VerifyRfFreq+0x64>
    }
    return true;
 800c556:	2301      	movs	r3, #1
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3708      	adds	r7, #8
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	08012a80 	.word	0x08012a80
 800c564:	3708709f 	.word	0x3708709f
 800c568:	374886e0 	.word	0x374886e0
 800c56c:	c8f78f60 	.word	0xc8f78f60
 800c570:	6fd91d85 	.word	0x6fd91d85
 800c574:	000927c0 	.word	0x000927c0
 800c578:	35c8015f 	.word	0x35c8015f

0800c57c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800c57c:	b590      	push	{r4, r7, lr}
 800c57e:	b089      	sub	sp, #36	@ 0x24
 800c580:	af04      	add	r7, sp, #16
 800c582:	4603      	mov	r3, r0
 800c584:	460a      	mov	r2, r1
 800c586:	71fb      	strb	r3, [r7, #7]
 800c588:	4613      	mov	r3, r2
 800c58a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 800c58c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c590:	4a0f      	ldr	r2, [pc, #60]	@ (800c5d0 <GetTimeOnAir+0x54>)
 800c592:	5cd3      	ldrb	r3, [r2, r3]
 800c594:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800c596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c59a:	490e      	ldr	r1, [pc, #56]	@ (800c5d4 <GetTimeOnAir+0x58>)
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7ff f8c7 	bl	800b730 <RegionCommonGetBandwidth>
 800c5a2:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800c5a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d8 <GetTimeOnAir+0x5c>)
 800c5a6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c5a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800c5ac:	88bb      	ldrh	r3, [r7, #4]
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	2101      	movs	r1, #1
 800c5b2:	9103      	str	r1, [sp, #12]
 800c5b4:	9302      	str	r3, [sp, #8]
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	9301      	str	r3, [sp, #4]
 800c5ba:	2308      	movs	r3, #8
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	2301      	movs	r3, #1
 800c5c0:	68b9      	ldr	r1, [r7, #8]
 800c5c2:	2001      	movs	r0, #1
 800c5c4:	47a0      	blx	r4
 800c5c6:	4603      	mov	r3, r0
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3714      	adds	r7, #20
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd90      	pop	{r4, r7, pc}
 800c5d0:	080126fc 	.word	0x080126fc
 800c5d4:	0801270c 	.word	0x0801270c
 800c5d8:	08012a80 	.word	0x08012a80

0800c5dc <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b088      	sub	sp, #32
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	2b38      	cmp	r3, #56	@ 0x38
 800c5f0:	f200 813c 	bhi.w	800c86c <RegionUS915GetPhyParam+0x290>
 800c5f4:	a201      	add	r2, pc, #4	@ (adr r2, 800c5fc <RegionUS915GetPhyParam+0x20>)
 800c5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5fa:	bf00      	nop
 800c5fc:	0800c6e1 	.word	0x0800c6e1
 800c600:	0800c6e7 	.word	0x0800c6e7
 800c604:	0800c86d 	.word	0x0800c86d
 800c608:	0800c86d 	.word	0x0800c86d
 800c60c:	0800c86d 	.word	0x0800c86d
 800c610:	0800c6ed 	.word	0x0800c6ed
 800c614:	0800c86d 	.word	0x0800c86d
 800c618:	0800c727 	.word	0x0800c727
 800c61c:	0800c86d 	.word	0x0800c86d
 800c620:	0800c72d 	.word	0x0800c72d
 800c624:	0800c733 	.word	0x0800c733
 800c628:	0800c739 	.word	0x0800c739
 800c62c:	0800c73f 	.word	0x0800c73f
 800c630:	0800c74f 	.word	0x0800c74f
 800c634:	0800c75f 	.word	0x0800c75f
 800c638:	0800c765 	.word	0x0800c765
 800c63c:	0800c76d 	.word	0x0800c76d
 800c640:	0800c775 	.word	0x0800c775
 800c644:	0800c77d 	.word	0x0800c77d
 800c648:	0800c785 	.word	0x0800c785
 800c64c:	0800c78d 	.word	0x0800c78d
 800c650:	0800c795 	.word	0x0800c795
 800c654:	0800c7a9 	.word	0x0800c7a9
 800c658:	0800c7af 	.word	0x0800c7af
 800c65c:	0800c7b5 	.word	0x0800c7b5
 800c660:	0800c7bb 	.word	0x0800c7bb
 800c664:	0800c7c7 	.word	0x0800c7c7
 800c668:	0800c7d3 	.word	0x0800c7d3
 800c66c:	0800c7d9 	.word	0x0800c7d9
 800c670:	0800c7e1 	.word	0x0800c7e1
 800c674:	0800c7e7 	.word	0x0800c7e7
 800c678:	0800c7ed 	.word	0x0800c7ed
 800c67c:	0800c7f3 	.word	0x0800c7f3
 800c680:	0800c6f3 	.word	0x0800c6f3
 800c684:	0800c86d 	.word	0x0800c86d
 800c688:	0800c86d 	.word	0x0800c86d
 800c68c:	0800c86d 	.word	0x0800c86d
 800c690:	0800c86d 	.word	0x0800c86d
 800c694:	0800c86d 	.word	0x0800c86d
 800c698:	0800c86d 	.word	0x0800c86d
 800c69c:	0800c86d 	.word	0x0800c86d
 800c6a0:	0800c86d 	.word	0x0800c86d
 800c6a4:	0800c86d 	.word	0x0800c86d
 800c6a8:	0800c86d 	.word	0x0800c86d
 800c6ac:	0800c86d 	.word	0x0800c86d
 800c6b0:	0800c86d 	.word	0x0800c86d
 800c6b4:	0800c86d 	.word	0x0800c86d
 800c6b8:	0800c7fb 	.word	0x0800c7fb
 800c6bc:	0800c80f 	.word	0x0800c80f
 800c6c0:	0800c81d 	.word	0x0800c81d
 800c6c4:	0800c823 	.word	0x0800c823
 800c6c8:	0800c86d 	.word	0x0800c86d
 800c6cc:	0800c829 	.word	0x0800c829
 800c6d0:	0800c83d 	.word	0x0800c83d
 800c6d4:	0800c843 	.word	0x0800c843
 800c6d8:	0800c849 	.word	0x0800c849
 800c6dc:	0800c859 	.word	0x0800c859
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800c6e0:	2308      	movs	r3, #8
 800c6e2:	61bb      	str	r3, [r7, #24]
            break;
 800c6e4:	e0c3      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	61bb      	str	r3, [r7, #24]
            break;
 800c6ea:	e0c0      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	61bb      	str	r3, [r7, #24]
            break;
 800c6f0:	e0bd      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c6f8:	733b      	strb	r3, [r7, #12]
 800c6fa:	2304      	movs	r3, #4
 800c6fc:	737b      	strb	r3, [r7, #13]
 800c6fe:	2300      	movs	r3, #0
 800c700:	73bb      	strb	r3, [r7, #14]
 800c702:	2348      	movs	r3, #72	@ 0x48
 800c704:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800c706:	4b5d      	ldr	r3, [pc, #372]	@ (800c87c <RegionUS915GetPhyParam+0x2a0>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c70e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 800c710:	4b5a      	ldr	r3, [pc, #360]	@ (800c87c <RegionUS915GetPhyParam+0x2a0>)
 800c712:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800c714:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800c716:	f107 030c 	add.w	r3, r7, #12
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fe ffb5 	bl	800b68a <RegionCommonGetNextLowerTxDr>
 800c720:	4603      	mov	r3, r0
 800c722:	61bb      	str	r3, [r7, #24]
            break;
 800c724:	e0a3      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 800c726:	2300      	movs	r3, #0
 800c728:	61bb      	str	r3, [r7, #24]
            break;
 800c72a:	e0a0      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 800c72c:	2300      	movs	r3, #0
 800c72e:	61bb      	str	r3, [r7, #24]
            break;
 800c730:	e09d      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800c732:	2340      	movs	r3, #64	@ 0x40
 800c734:	61bb      	str	r3, [r7, #24]
            break;
 800c736:	e09a      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800c738:	2320      	movs	r3, #32
 800c73a:	61bb      	str	r3, [r7, #24]
            break;
 800c73c:	e097      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800c744:	461a      	mov	r2, r3
 800c746:	4b4e      	ldr	r3, [pc, #312]	@ (800c880 <RegionUS915GetPhyParam+0x2a4>)
 800c748:	5c9b      	ldrb	r3, [r3, r2]
 800c74a:	61bb      	str	r3, [r7, #24]
            break;
 800c74c:	e08f      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800c754:	461a      	mov	r2, r3
 800c756:	4b4b      	ldr	r3, [pc, #300]	@ (800c884 <RegionUS915GetPhyParam+0x2a8>)
 800c758:	5c9b      	ldrb	r3, [r3, r2]
 800c75a:	61bb      	str	r3, [r7, #24]
            break;
 800c75c:	e087      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 800c75e:	2300      	movs	r3, #0
 800c760:	61bb      	str	r3, [r7, #24]
            break;
 800c762:	e084      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 800c764:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800c768:	61bb      	str	r3, [r7, #24]
            break;
 800c76a:	e080      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800c76c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c770:	61bb      	str	r3, [r7, #24]
            break;
 800c772:	e07c      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800c774:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800c778:	61bb      	str	r3, [r7, #24]
            break;
 800c77a:	e078      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800c77c:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c780:	61bb      	str	r3, [r7, #24]
            break;
 800c782:	e074      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800c784:	f241 7370 	movw	r3, #6000	@ 0x1770
 800c788:	61bb      	str	r3, [r7, #24]
            break;
 800c78a:	e070      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800c78c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c790:	61bb      	str	r3, [r7, #24]
            break;
 800c792:	e06c      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800c794:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c798:	483b      	ldr	r0, [pc, #236]	@ (800c888 <RegionUS915GetPhyParam+0x2ac>)
 800c79a:	f002 f857 	bl	800e84c <randr>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800c7a4:	61bb      	str	r3, [r7, #24]
            break;
 800c7a6:	e062      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	61bb      	str	r3, [r7, #24]
            break;
 800c7ac:	e05f      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 800c7ae:	4b37      	ldr	r3, [pc, #220]	@ (800c88c <RegionUS915GetPhyParam+0x2b0>)
 800c7b0:	61bb      	str	r3, [r7, #24]
            break;
 800c7b2:	e05c      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 800c7b4:	2308      	movs	r3, #8
 800c7b6:	61bb      	str	r3, [r7, #24]
            break;
 800c7b8:	e059      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c7ba:	4b30      	ldr	r3, [pc, #192]	@ (800c87c <RegionUS915GetPhyParam+0x2a0>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800c7c2:	61bb      	str	r3, [r7, #24]
            break;
 800c7c4:	e053      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800c7c6:	4b2d      	ldr	r3, [pc, #180]	@ (800c87c <RegionUS915GetPhyParam+0x2a0>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800c7ce:	61bb      	str	r3, [r7, #24]
            break;
 800c7d0:	e04d      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800c7d2:	2348      	movs	r3, #72	@ 0x48
 800c7d4:	61bb      	str	r3, [r7, #24]
            break;
 800c7d6:	e04a      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 800c7d8:	4b28      	ldr	r3, [pc, #160]	@ (800c87c <RegionUS915GetPhyParam+0x2a0>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	61bb      	str	r3, [r7, #24]
            break;
 800c7de:	e046      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	61bb      	str	r3, [r7, #24]
            break;
 800c7e4:	e043      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	61bb      	str	r3, [r7, #24]
            break;
 800c7ea:	e040      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800c7ec:	4b28      	ldr	r3, [pc, #160]	@ (800c890 <RegionUS915GetPhyParam+0x2b4>)
 800c7ee:	61bb      	str	r3, [r7, #24]
            break;
 800c7f0:	e03d      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 800c7f2:	f04f 0300 	mov.w	r3, #0
 800c7f6:	61bb      	str	r3, [r7, #24]
            break;
 800c7f8:	e039      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	791b      	ldrb	r3, [r3, #4]
 800c7fe:	4a25      	ldr	r2, [pc, #148]	@ (800c894 <RegionUS915GetPhyParam+0x2b8>)
 800c800:	4922      	ldr	r1, [pc, #136]	@ (800c88c <RegionUS915GetPhyParam+0x2b0>)
 800c802:	4618      	mov	r0, r3
 800c804:	f7fe f9ab 	bl	800ab5e <RegionBaseUSCalcDownlinkFrequency>
 800c808:	4603      	mov	r3, r0
 800c80a:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 800c80c:	e02f      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800c80e:	2317      	movs	r3, #23
 800c810:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800c812:	2305      	movs	r3, #5
 800c814:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800c816:	2303      	movs	r3, #3
 800c818:	76bb      	strb	r3, [r7, #26]
            break;
 800c81a:	e028      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800c81c:	2308      	movs	r3, #8
 800c81e:	61bb      	str	r3, [r7, #24]
            break;
 800c820:	e025      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800c822:	2308      	movs	r3, #8
 800c824:	61bb      	str	r3, [r7, #24]
            break;
 800c826:	e022      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	791b      	ldrb	r3, [r3, #4]
 800c82c:	4a19      	ldr	r2, [pc, #100]	@ (800c894 <RegionUS915GetPhyParam+0x2b8>)
 800c82e:	4917      	ldr	r1, [pc, #92]	@ (800c88c <RegionUS915GetPhyParam+0x2b0>)
 800c830:	4618      	mov	r0, r3
 800c832:	f7fe f994 	bl	800ab5e <RegionBaseUSCalcDownlinkFrequency>
 800c836:	4603      	mov	r3, r0
 800c838:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 800c83a:	e018      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800c83c:	2308      	movs	r3, #8
 800c83e:	61bb      	str	r3, [r7, #24]
            break;
 800c840:	e015      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800c842:	2308      	movs	r3, #8
 800c844:	61bb      	str	r3, [r7, #24]
            break;
 800c846:	e012      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800c84e:	461a      	mov	r2, r3
 800c850:	4b11      	ldr	r3, [pc, #68]	@ (800c898 <RegionUS915GetPhyParam+0x2bc>)
 800c852:	5c9b      	ldrb	r3, [r3, r2]
 800c854:	61bb      	str	r3, [r7, #24]
            break;
 800c856:	e00a      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800c85e:	490f      	ldr	r1, [pc, #60]	@ (800c89c <RegionUS915GetPhyParam+0x2c0>)
 800c860:	4618      	mov	r0, r3
 800c862:	f7fe ff65 	bl	800b730 <RegionCommonGetBandwidth>
 800c866:	4603      	mov	r3, r0
 800c868:	61bb      	str	r3, [r7, #24]
            break;
 800c86a:	e000      	b.n	800c86e <RegionUS915GetPhyParam+0x292>
        }
        default:
        {
            break;
 800c86c:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	61fb      	str	r3, [r7, #28]
 800c872:	69fb      	ldr	r3, [r7, #28]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3720      	adds	r7, #32
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	200012c4 	.word	0x200012c4
 800c880:	08012760 	.word	0x08012760
 800c884:	08012770 	.word	0x08012770
 800c888:	fffffc18 	.word	0xfffffc18
 800c88c:	370870a0 	.word	0x370870a0
 800c890:	4200999a 	.word	0x4200999a
 800c894:	000927c0 	.word	0x000927c0
 800c898:	080126fc 	.word	0x080126fc
 800c89c:	0801270c 	.word	0x0801270c

0800c8a0 <RegionUS915InitDefaults>:
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b08a      	sub	sp, #40	@ 0x28
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	81bb      	strh	r3, [r7, #12]
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	73bb      	strb	r3, [r7, #14]
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	613b      	str	r3, [r7, #16]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	617b      	str	r3, [r7, #20]
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	61bb      	str	r3, [r7, #24]
 800c8bc:	2300      	movs	r3, #0
 800c8be:	61fb      	str	r3, [r7, #28]
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	7a1b      	ldrb	r3, [r3, #8]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d007      	beq.n	800c8de <RegionUS915InitDefaults+0x3e>
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	f2c0 8106 	blt.w	800cae0 <RegionUS915InitDefaults+0x240>
 800c8d4:	3b01      	subs	r3, #1
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	f200 8102 	bhi.w	800cae0 <RegionUS915InitDefaults+0x240>
 800c8dc:	e0ce      	b.n	800ca7c <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f000 80fe 	beq.w	800cae4 <RegionUS915InitDefaults+0x244>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f000 80f9 	beq.w	800cae4 <RegionUS915InitDefaults+0x244>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a7d      	ldr	r2, [pc, #500]	@ (800caec <RegionUS915InitDefaults+0x24c>)
 800c8f8:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	4a7c      	ldr	r2, [pc, #496]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800c900:	6013      	str	r3, [r2, #0]

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800c902:	4b7a      	ldr	r3, [pc, #488]	@ (800caec <RegionUS915InitDefaults+0x24c>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2200      	movs	r2, #0
 800c908:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800c90c:	4b77      	ldr	r3, [pc, #476]	@ (800caec <RegionUS915InitDefaults+0x24c>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2200      	movs	r2, #0
 800c912:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800c916:	4b75      	ldr	r3, [pc, #468]	@ (800caec <RegionUS915InitDefaults+0x24c>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f107 030c 	add.w	r3, r7, #12
 800c920:	2218      	movs	r2, #24
 800c922:	4619      	mov	r1, r3
 800c924:	f001 ffa9 	bl	800e87a <memcpy1>
            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800c928:	2300      	movs	r3, #0
 800c92a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c92e:	e02e      	b.n	800c98e <RegionUS915InitDefaults+0xee>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800c930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c934:	4a6f      	ldr	r2, [pc, #444]	@ (800caf4 <RegionUS915InitDefaults+0x254>)
 800c936:	fb03 f202 	mul.w	r2, r3, r2
 800c93a:	4b6f      	ldr	r3, [pc, #444]	@ (800caf8 <RegionUS915InitDefaults+0x258>)
 800c93c:	4413      	add	r3, r2
 800c93e:	4a6c      	ldr	r2, [pc, #432]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800c940:	6811      	ldr	r1, [r2, #0]
 800c942:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c946:	4618      	mov	r0, r3
 800c948:	4613      	mov	r3, r2
 800c94a:	005b      	lsls	r3, r3, #1
 800c94c:	4413      	add	r3, r2
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	440b      	add	r3, r1
 800c952:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800c954:	4b66      	ldr	r3, [pc, #408]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800c956:	6819      	ldr	r1, [r3, #0]
 800c958:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c95c:	4613      	mov	r3, r2
 800c95e:	005b      	lsls	r3, r3, #1
 800c960:	4413      	add	r3, r2
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	440b      	add	r3, r1
 800c966:	3308      	adds	r3, #8
 800c968:	2230      	movs	r2, #48	@ 0x30
 800c96a:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 800c96c:	4b60      	ldr	r3, [pc, #384]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800c96e:	6819      	ldr	r1, [r3, #0]
 800c970:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c974:	4613      	mov	r3, r2
 800c976:	005b      	lsls	r3, r3, #1
 800c978:	4413      	add	r3, r2
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	440b      	add	r3, r1
 800c97e:	3309      	adds	r3, #9
 800c980:	2200      	movs	r2, #0
 800c982:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800c984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c988:	3301      	adds	r3, #1
 800c98a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c98e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c992:	2b3f      	cmp	r3, #63	@ 0x3f
 800c994:	d9cc      	bls.n	800c930 <RegionUS915InitDefaults+0x90>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800c996:	2340      	movs	r3, #64	@ 0x40
 800c998:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c99c:	e02f      	b.n	800c9fe <RegionUS915InitDefaults+0x15e>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800c99e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c9a2:	3b40      	subs	r3, #64	@ 0x40
 800c9a4:	4a55      	ldr	r2, [pc, #340]	@ (800cafc <RegionUS915InitDefaults+0x25c>)
 800c9a6:	fb03 f202 	mul.w	r2, r3, r2
 800c9aa:	4b55      	ldr	r3, [pc, #340]	@ (800cb00 <RegionUS915InitDefaults+0x260>)
 800c9ac:	4413      	add	r3, r2
 800c9ae:	4a50      	ldr	r2, [pc, #320]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800c9b0:	6811      	ldr	r1, [r2, #0]
 800c9b2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	005b      	lsls	r3, r3, #1
 800c9bc:	4413      	add	r3, r2
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	440b      	add	r3, r1
 800c9c2:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800c9c4:	4b4a      	ldr	r3, [pc, #296]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800c9c6:	6819      	ldr	r1, [r3, #0]
 800c9c8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	005b      	lsls	r3, r3, #1
 800c9d0:	4413      	add	r3, r2
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	440b      	add	r3, r1
 800c9d6:	3308      	adds	r3, #8
 800c9d8:	2244      	movs	r2, #68	@ 0x44
 800c9da:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 800c9dc:	4b44      	ldr	r3, [pc, #272]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800c9de:	6819      	ldr	r1, [r3, #0]
 800c9e0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	005b      	lsls	r3, r3, #1
 800c9e8:	4413      	add	r3, r2
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	440b      	add	r3, r1
 800c9ee:	3309      	adds	r3, #9
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800c9f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c9fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ca02:	2b47      	cmp	r3, #71	@ 0x47
 800ca04:	d9cb      	bls.n	800c99e <RegionUS915InitDefaults+0xfe>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800ca06:	4b3a      	ldr	r3, [pc, #232]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ca0e:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800ca12:	4b37      	ldr	r3, [pc, #220]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ca1a:	f8a3 248e 	strh.w	r2, [r3, #1166]	@ 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800ca1e:	4b34      	ldr	r3, [pc, #208]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ca26:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800ca2a:	4b31      	ldr	r3, [pc, #196]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ca32:	f8a3 2492 	strh.w	r2, [r3, #1170]	@ 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800ca36:	4b2e      	ldr	r3, [pc, #184]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	22ff      	movs	r2, #255	@ 0xff
 800ca3c:	f8a3 2494 	strh.w	r2, [r3, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800ca40:	4b2b      	ldr	r3, [pc, #172]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2200      	movs	r2, #0
 800ca46:	f8a3 2496 	strh.w	r2, [r3, #1174]	@ 0x496
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ca4a:	4b29      	ldr	r3, [pc, #164]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 800ca52:	4b27      	ldr	r3, [pc, #156]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800ca5a:	2206      	movs	r2, #6
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	f7fe facf 	bl	800b000 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800ca62:	4b22      	ldr	r3, [pc, #136]	@ (800caec <RegionUS915InitDefaults+0x24c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800ca6a:	4b21      	ldr	r3, [pc, #132]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800ca72:	2206      	movs	r2, #6
 800ca74:	4619      	mov	r1, r3
 800ca76:	f7fe fac3 	bl	800b000 <RegionCommonChanMaskCopy>
            break;
 800ca7a:	e034      	b.n	800cae6 <RegionUS915InitDefaults+0x246>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800ca7c:	4b1c      	ldr	r3, [pc, #112]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 800ca84:	4b1a      	ldr	r3, [pc, #104]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 800ca8c:	2206      	movs	r2, #6
 800ca8e:	4619      	mov	r1, r3
 800ca90:	f7fe fab6 	bl	800b000 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800ca94:	2300      	movs	r3, #0
 800ca96:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800ca9a:	e01c      	b.n	800cad6 <RegionUS915InitDefaults+0x236>
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
            for( uint8_t i = 0; i < 6; i++ )
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800ca9c:	4b13      	ldr	r3, [pc, #76]	@ (800caec <RegionUS915InitDefaults+0x24c>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800caa4:	3248      	adds	r2, #72	@ 0x48
 800caa6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800caaa:	4b11      	ldr	r3, [pc, #68]	@ (800caf0 <RegionUS915InitDefaults+0x250>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800cab2:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 800cab6:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800caba:	4b0c      	ldr	r3, [pc, #48]	@ (800caec <RegionUS915InitDefaults+0x24c>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800cac2:	4001      	ands	r1, r0
 800cac4:	b289      	uxth	r1, r1
 800cac6:	3248      	adds	r2, #72	@ 0x48
 800cac8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800cacc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800cad0:	3301      	adds	r3, #1
 800cad2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800cad6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800cada:	2b05      	cmp	r3, #5
 800cadc:	d9de      	bls.n	800ca9c <RegionUS915InitDefaults+0x1fc>
            }
            break;
 800cade:	e002      	b.n	800cae6 <RegionUS915InitDefaults+0x246>
        }
        default:
        {
            break;
 800cae0:	bf00      	nop
 800cae2:	e000      	b.n	800cae6 <RegionUS915InitDefaults+0x246>
                return;
 800cae4:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 800cae6:	3728      	adds	r7, #40	@ 0x28
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	200012c0 	.word	0x200012c0
 800caf0:	200012c4 	.word	0x200012c4
 800caf4:	00030d40 	.word	0x00030d40
 800caf8:	35c80160 	.word	0x35c80160
 800cafc:	00186a00 	.word	0x00186a00
 800cb00:	35d2afc0 	.word	0x35d2afc0

0800cb04 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 800cb10:	78fb      	ldrb	r3, [r7, #3]
 800cb12:	2b0f      	cmp	r3, #15
 800cb14:	d858      	bhi.n	800cbc8 <RegionUS915Verify+0xc4>
 800cb16:	a201      	add	r2, pc, #4	@ (adr r2, 800cb1c <RegionUS915Verify+0x18>)
 800cb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1c:	0800cb5d 	.word	0x0800cb5d
 800cb20:	0800cbc9 	.word	0x0800cbc9
 800cb24:	0800cbc9 	.word	0x0800cbc9
 800cb28:	0800cbc9 	.word	0x0800cbc9
 800cb2c:	0800cbc9 	.word	0x0800cbc9
 800cb30:	0800cb6b 	.word	0x0800cb6b
 800cb34:	0800cb6b 	.word	0x0800cb6b
 800cb38:	0800cb89 	.word	0x0800cb89
 800cb3c:	0800cbc9 	.word	0x0800cbc9
 800cb40:	0800cba7 	.word	0x0800cba7
 800cb44:	0800cba7 	.word	0x0800cba7
 800cb48:	0800cbc9 	.word	0x0800cbc9
 800cb4c:	0800cbc9 	.word	0x0800cbc9
 800cb50:	0800cbc9 	.word	0x0800cbc9
 800cb54:	0800cbc9 	.word	0x0800cbc9
 800cb58:	0800cbc5 	.word	0x0800cbc5
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7ff fcc7 	bl	800c4f4 <VerifyRfFreq>
 800cb66:	4603      	mov	r3, r0
 800cb68:	e02f      	b.n	800cbca <RegionUS915Verify+0xc6>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f993 3000 	ldrsb.w	r3, [r3]
 800cb70:	2204      	movs	r2, #4
 800cb72:	2100      	movs	r1, #0
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7fe f9c6 	bl	800af06 <RegionCommonValueInRange>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	bf14      	ite	ne
 800cb80:	2301      	movne	r3, #1
 800cb82:	2300      	moveq	r3, #0
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	e020      	b.n	800cbca <RegionUS915Verify+0xc6>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f993 3000 	ldrsb.w	r3, [r3]
 800cb8e:	220d      	movs	r2, #13
 800cb90:	2108      	movs	r1, #8
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7fe f9b7 	bl	800af06 <RegionCommonValueInRange>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	bf14      	ite	ne
 800cb9e:	2301      	movne	r3, #1
 800cba0:	2300      	moveq	r3, #0
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	e011      	b.n	800cbca <RegionUS915Verify+0xc6>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f993 3000 	ldrsb.w	r3, [r3]
 800cbac:	220e      	movs	r2, #14
 800cbae:	2100      	movs	r1, #0
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fe f9a8 	bl	800af06 <RegionCommonValueInRange>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	bf14      	ite	ne
 800cbbc:	2301      	movne	r3, #1
 800cbbe:	2300      	moveq	r3, #0
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	e002      	b.n	800cbca <RegionUS915Verify+0xc6>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	e000      	b.n	800cbca <RegionUS915Verify+0xc6>
        }
        default:
            return false;
 800cbc8:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3708      	adds	r7, #8
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop

0800cbd4 <RegionUS915ChanMaskSet>:
    }
#endif /* REGION_US915 */
}

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	2204      	movs	r2, #4
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7fe f9df 	bl	800afa8 <RegionCommonCountChannels>
 800cbea:	4603      	mov	r3, r0
 800cbec:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800cbee:	7bbb      	ldrb	r3, [r7, #14]
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d804      	bhi.n	800cbfe <RegionUS915ChanMaskSet+0x2a>
 800cbf4:	7bbb      	ldrb	r3, [r7, #14]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d001      	beq.n	800cbfe <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	e04c      	b.n	800cc98 <RegionUS915ChanMaskSet+0xc4>
    }

    switch( chanMaskSet->ChannelsMaskType )
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	791b      	ldrb	r3, [r3, #4]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d002      	beq.n	800cc0c <RegionUS915ChanMaskSet+0x38>
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d038      	beq.n	800cc7c <RegionUS915ChanMaskSet+0xa8>
 800cc0a:	e042      	b.n	800cc92 <RegionUS915ChanMaskSet+0xbe>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800cc0c:	4b24      	ldr	r3, [pc, #144]	@ (800cca0 <RegionUS915ChanMaskSet+0xcc>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2206      	movs	r2, #6
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	f7fe f9f0 	bl	800b000 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800cc20:	4b1f      	ldr	r3, [pc, #124]	@ (800cca0 <RegionUS915ChanMaskSet+0xcc>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f8b3 2494 	ldrh.w	r2, [r3, #1172]	@ 0x494
 800cc28:	4b1d      	ldr	r3, [pc, #116]	@ (800cca0 <RegionUS915ChanMaskSet+0xcc>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	b2d2      	uxtb	r2, r2
 800cc2e:	b292      	uxth	r2, r2
 800cc30:	f8a3 2494 	strh.w	r2, [r3, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800cc34:	4b1a      	ldr	r3, [pc, #104]	@ (800cca0 <RegionUS915ChanMaskSet+0xcc>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f8a3 2496 	strh.w	r2, [r3, #1174]	@ 0x496

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800cc3e:	2300      	movs	r3, #0
 800cc40:	73fb      	strb	r3, [r7, #15]
 800cc42:	e017      	b.n	800cc74 <RegionUS915ChanMaskSet+0xa0>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800cc44:	4b17      	ldr	r3, [pc, #92]	@ (800cca4 <RegionUS915ChanMaskSet+0xd0>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	7bfa      	ldrb	r2, [r7, #15]
 800cc4a:	3248      	adds	r2, #72	@ 0x48
 800cc4c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800cc50:	4b13      	ldr	r3, [pc, #76]	@ (800cca0 <RegionUS915ChanMaskSet+0xcc>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	7bfa      	ldrb	r2, [r7, #15]
 800cc56:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 800cc5a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800cc5e:	4b11      	ldr	r3, [pc, #68]	@ (800cca4 <RegionUS915ChanMaskSet+0xd0>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	7bfa      	ldrb	r2, [r7, #15]
 800cc64:	4001      	ands	r1, r0
 800cc66:	b289      	uxth	r1, r1
 800cc68:	3248      	adds	r2, #72	@ 0x48
 800cc6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800cc6e:	7bfb      	ldrb	r3, [r7, #15]
 800cc70:	3301      	adds	r3, #1
 800cc72:	73fb      	strb	r3, [r7, #15]
 800cc74:	7bfb      	ldrb	r3, [r7, #15]
 800cc76:	2b05      	cmp	r3, #5
 800cc78:	d9e4      	bls.n	800cc44 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 800cc7a:	e00c      	b.n	800cc96 <RegionUS915ChanMaskSet+0xc2>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800cc7c:	4b08      	ldr	r3, [pc, #32]	@ (800cca0 <RegionUS915ChanMaskSet+0xcc>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2206      	movs	r2, #6
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	f7fe f9b8 	bl	800b000 <RegionCommonChanMaskCopy>
            break;
 800cc90:	e001      	b.n	800cc96 <RegionUS915ChanMaskSet+0xc2>
        }
        default:
            return false;
 800cc92:	2300      	movs	r3, #0
 800cc94:	e000      	b.n	800cc98 <RegionUS915ChanMaskSet+0xc4>
    }
    return true;
 800cc96:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3710      	adds	r7, #16
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	200012c4 	.word	0x200012c4
 800cca4:	200012c0 	.word	0x200012c0

0800cca8 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b088      	sub	sp, #32
 800ccac:	af02      	add	r7, sp, #8
 800ccae:	60ba      	str	r2, [r7, #8]
 800ccb0:	607b      	str	r3, [r7, #4]
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	73fb      	strb	r3, [r7, #15]
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800ccbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccc2:	2b0d      	cmp	r3, #13
 800ccc4:	bfa8      	it	ge
 800ccc6:	230d      	movge	r3, #13
 800ccc8:	b25a      	sxtb	r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ccd4:	4916      	ldr	r1, [pc, #88]	@ (800cd30 <RegionUS915ComputeRxWindowParameters+0x88>)
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fe fd2a 	bl	800b730 <RegionCommonGetBandwidth>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	b2da      	uxtb	r2, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ccea:	461a      	mov	r2, r3
 800ccec:	4b11      	ldr	r3, [pc, #68]	@ (800cd34 <RegionUS915ComputeRxWindowParameters+0x8c>)
 800ccee:	5c9a      	ldrb	r2, [r3, r2]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	4b0d      	ldr	r3, [pc, #52]	@ (800cd30 <RegionUS915ComputeRxWindowParameters+0x88>)
 800ccfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ccfe:	4619      	mov	r1, r3
 800cd00:	4610      	mov	r0, r2
 800cd02:	f7fe fa93 	bl	800b22c <RegionCommonComputeSymbolTimeLoRa>
 800cd06:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800cd08:	4b0b      	ldr	r3, [pc, #44]	@ (800cd38 <RegionUS915ComputeRxWindowParameters+0x90>)
 800cd0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd0c:	4798      	blx	r3
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	3308      	adds	r3, #8
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	320c      	adds	r2, #12
 800cd16:	7bb9      	ldrb	r1, [r7, #14]
 800cd18:	9201      	str	r2, [sp, #4]
 800cd1a:	9300      	str	r3, [sp, #0]
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	68ba      	ldr	r2, [r7, #8]
 800cd20:	6978      	ldr	r0, [r7, #20]
 800cd22:	f7fe faa9 	bl	800b278 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 800cd26:	bf00      	nop
 800cd28:	3718      	adds	r7, #24
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	0801270c 	.word	0x0801270c
 800cd34:	080126fc 	.word	0x080126fc
 800cd38:	08012a80 	.word	0x08012a80

0800cd3c <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800cd3c:	b590      	push	{r4, r7, lr}
 800cd3e:	b091      	sub	sp, #68	@ 0x44
 800cd40:	af0a      	add	r7, sp, #40	@ 0x28
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	785b      	ldrb	r3, [r3, #1]
 800cd4a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 800cd50:	2300      	movs	r3, #0
 800cd52:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 800cd5a:	4b34      	ldr	r3, [pc, #208]	@ (800ce2c <RegionUS915RxConfig+0xf0>)
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	4798      	blx	r3
 800cd60:	4603      	mov	r3, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d001      	beq.n	800cd6a <RegionUS915RxConfig+0x2e>
    {
        return false;
 800cd66:	2300      	movs	r3, #0
 800cd68:	e05c      	b.n	800ce24 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	7cdb      	ldrb	r3, [r3, #19]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d109      	bne.n	800cd86 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	f003 0307 	and.w	r3, r3, #7
 800cd7a:	4a2d      	ldr	r2, [pc, #180]	@ (800ce30 <RegionUS915RxConfig+0xf4>)
 800cd7c:	fb03 f202 	mul.w	r2, r3, r2
 800cd80:	4b2c      	ldr	r3, [pc, #176]	@ (800ce34 <RegionUS915RxConfig+0xf8>)
 800cd82:	4413      	add	r3, r2
 800cd84:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 800cd86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd8a:	4a2b      	ldr	r2, [pc, #172]	@ (800ce38 <RegionUS915RxConfig+0xfc>)
 800cd8c:	5cd3      	ldrb	r3, [r2, r3]
 800cd8e:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 800cd90:	4b26      	ldr	r3, [pc, #152]	@ (800ce2c <RegionUS915RxConfig+0xf0>)
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	6938      	ldr	r0, [r7, #16]
 800cd96:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800cd98:	4b24      	ldr	r3, [pc, #144]	@ (800ce2c <RegionUS915RxConfig+0xf0>)
 800cd9a:	699c      	ldr	r4, [r3, #24]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	789b      	ldrb	r3, [r3, #2]
 800cda0:	4618      	mov	r0, r3
 800cda2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	7c92      	ldrb	r2, [r2, #18]
 800cdb0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	9208      	str	r2, [sp, #32]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	9207      	str	r2, [sp, #28]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	9206      	str	r2, [sp, #24]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	9205      	str	r2, [sp, #20]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	9204      	str	r2, [sp, #16]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	9203      	str	r2, [sp, #12]
 800cdca:	9302      	str	r3, [sp, #8]
 800cdcc:	2308      	movs	r3, #8
 800cdce:	9301      	str	r3, [sp, #4]
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	9300      	str	r3, [sp, #0]
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	460a      	mov	r2, r1
 800cdd8:	4601      	mov	r1, r0
 800cdda:	2001      	movs	r0, #1
 800cddc:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	7c5b      	ldrb	r3, [r3, #17]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d005      	beq.n	800cdf2 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 800cde6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdea:	4a14      	ldr	r2, [pc, #80]	@ (800ce3c <RegionUS915RxConfig+0x100>)
 800cdec:	5cd3      	ldrb	r3, [r2, r3]
 800cdee:	75fb      	strb	r3, [r7, #23]
 800cdf0:	e004      	b.n	800cdfc <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 800cdf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdf6:	4a12      	ldr	r2, [pc, #72]	@ (800ce40 <RegionUS915RxConfig+0x104>)
 800cdf8:	5cd3      	ldrb	r3, [r2, r3]
 800cdfa:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800cdfc:	4b0b      	ldr	r3, [pc, #44]	@ (800ce2c <RegionUS915RxConfig+0xf0>)
 800cdfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce00:	7dfa      	ldrb	r2, [r7, #23]
 800ce02:	320d      	adds	r2, #13
 800ce04:	b2d2      	uxtb	r2, r2
 800ce06:	4611      	mov	r1, r2
 800ce08:	2001      	movs	r0, #1
 800ce0a:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	7cdb      	ldrb	r3, [r3, #19]
 800ce10:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800ce14:	6939      	ldr	r1, [r7, #16]
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fe fca8 	bl	800b76c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	7bfa      	ldrb	r2, [r7, #15]
 800ce20:	701a      	strb	r2, [r3, #0]
    return true;
 800ce22:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	371c      	adds	r7, #28
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd90      	pop	{r4, r7, pc}
 800ce2c:	08012a80 	.word	0x08012a80
 800ce30:	000927c0 	.word	0x000927c0
 800ce34:	370870a0 	.word	0x370870a0
 800ce38:	080126fc 	.word	0x080126fc
 800ce3c:	08012770 	.word	0x08012770
 800ce40:	08012760 	.word	0x08012760

0800ce44 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ce44:	b590      	push	{r4, r7, lr}
 800ce46:	b093      	sub	sp, #76	@ 0x4c
 800ce48:	af0a      	add	r7, sp, #40	@ 0x28
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	60b9      	str	r1, [r7, #8]
 800ce4e:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ce56:	461a      	mov	r2, r3
 800ce58:	4b4a      	ldr	r3, [pc, #296]	@ (800cf84 <RegionUS915TxConfig+0x140>)
 800ce5a:	5c9b      	ldrb	r3, [r3, r2]
 800ce5c:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f993 0002 	ldrsb.w	r0, [r3, #2]
 800ce64:	4b48      	ldr	r3, [pc, #288]	@ (800cf88 <RegionUS915TxConfig+0x144>)
 800ce66:	681a      	ldr	r2, [r3, #0]
 800ce68:	4b48      	ldr	r3, [pc, #288]	@ (800cf8c <RegionUS915TxConfig+0x148>)
 800ce6a:	6819      	ldr	r1, [r3, #0]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	461c      	mov	r4, r3
 800ce72:	4623      	mov	r3, r4
 800ce74:	005b      	lsls	r3, r3, #1
 800ce76:	4423      	add	r3, r4
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	440b      	add	r3, r1
 800ce7c:	3309      	adds	r3, #9
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	4619      	mov	r1, r3
 800ce82:	460b      	mov	r3, r1
 800ce84:	005b      	lsls	r3, r3, #1
 800ce86:	440b      	add	r3, r1
 800ce88:	00db      	lsls	r3, r3, #3
 800ce8a:	4413      	add	r3, r2
 800ce8c:	3302      	adds	r3, #2
 800ce8e:	f993 1000 	ldrsb.w	r1, [r3]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800ce98:	4b3c      	ldr	r3, [pc, #240]	@ (800cf8c <RegionUS915TxConfig+0x148>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800cea0:	f7ff faf2 	bl	800c488 <LimitTxPower>
 800cea4:	4603      	mov	r3, r0
 800cea6:	77bb      	strb	r3, [r7, #30]
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ceae:	4938      	ldr	r1, [pc, #224]	@ (800cf90 <RegionUS915TxConfig+0x14c>)
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7fe fc3d 	bl	800b730 <RegionCommonGetBandwidth>
 800ceb6:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800cebc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800cec0:	f04f 0200 	mov.w	r2, #0
 800cec4:	4933      	ldr	r1, [pc, #204]	@ (800cf94 <RegionUS915TxConfig+0x150>)
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fe fa8e 	bl	800b3e8 <RegionCommonComputeTxPower>
 800cecc:	4603      	mov	r3, r0
 800cece:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800ced0:	4b31      	ldr	r3, [pc, #196]	@ (800cf98 <RegionUS915TxConfig+0x154>)
 800ced2:	68da      	ldr	r2, [r3, #12]
 800ced4:	4b2d      	ldr	r3, [pc, #180]	@ (800cf8c <RegionUS915TxConfig+0x148>)
 800ced6:	6819      	ldr	r1, [r3, #0]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	4618      	mov	r0, r3
 800cede:	4603      	mov	r3, r0
 800cee0:	005b      	lsls	r3, r3, #1
 800cee2:	4403      	add	r3, r0
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	440b      	add	r3, r1
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4618      	mov	r0, r3
 800ceec:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800ceee:	4b2a      	ldr	r3, [pc, #168]	@ (800cf98 <RegionUS915TxConfig+0x154>)
 800cef0:	69dc      	ldr	r4, [r3, #28]
 800cef2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cef6:	f997 1017 	ldrsb.w	r1, [r7, #23]
 800cefa:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800cefe:	9208      	str	r2, [sp, #32]
 800cf00:	2200      	movs	r2, #0
 800cf02:	9207      	str	r2, [sp, #28]
 800cf04:	2200      	movs	r2, #0
 800cf06:	9206      	str	r2, [sp, #24]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	9205      	str	r2, [sp, #20]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	9204      	str	r2, [sp, #16]
 800cf10:	2200      	movs	r2, #0
 800cf12:	9203      	str	r2, [sp, #12]
 800cf14:	2208      	movs	r2, #8
 800cf16:	9202      	str	r2, [sp, #8]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	9201      	str	r2, [sp, #4]
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	2200      	movs	r2, #0
 800cf22:	2001      	movs	r0, #1
 800cf24:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800cf26:	4b19      	ldr	r3, [pc, #100]	@ (800cf8c <RegionUS915TxConfig+0x148>)
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	4619      	mov	r1, r3
 800cf30:	460b      	mov	r3, r1
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	440b      	add	r3, r1
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	4413      	add	r3, r2
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800cf42:	4619      	mov	r1, r3
 800cf44:	4610      	mov	r0, r2
 800cf46:	f7fe fc1e 	bl	800b786 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800cf4a:	4b13      	ldr	r3, [pc, #76]	@ (800cf98 <RegionUS915TxConfig+0x154>)
 800cf4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf4e:	68fa      	ldr	r2, [r7, #12]
 800cf50:	8992      	ldrh	r2, [r2, #12]
 800cf52:	b2d2      	uxtb	r2, r2
 800cf54:	4611      	mov	r1, r2
 800cf56:	2001      	movs	r0, #1
 800cf58:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	899b      	ldrh	r3, [r3, #12]
 800cf64:	4619      	mov	r1, r3
 800cf66:	4610      	mov	r0, r2
 800cf68:	f7ff fb08 	bl	800c57c <GetTimeOnAir>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	7fba      	ldrb	r2, [r7, #30]
 800cf76:	701a      	strb	r2, [r3, #0]
    return true;
 800cf78:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3724      	adds	r7, #36	@ 0x24
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd90      	pop	{r4, r7, pc}
 800cf82:	bf00      	nop
 800cf84:	080126fc 	.word	0x080126fc
 800cf88:	200012c0 	.word	0x200012c0
 800cf8c:	200012c4 	.word	0x200012c4
 800cf90:	0801270c 	.word	0x0801270c
 800cf94:	41f00000 	.word	0x41f00000
 800cf98:	08012a80 	.word	0x08012a80

0800cf9c <RegionUS915AlternateDr>:
    // Do not accept the request
    return -1;
}

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	460a      	mov	r2, r1
 800cfa6:	71fb      	strb	r3, [r7, #7]
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 800cfac:	79bb      	ldrb	r3, [r7, #6]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d108      	bne.n	800cfc4 <RegionUS915AlternateDr+0x28>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 800cfb2:	4b16      	ldr	r3, [pc, #88]	@ (800d00c <RegionUS915AlternateDr+0x70>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 800cfba:	3201      	adds	r2, #1
 800cfbc:	b2d2      	uxtb	r2, r2
 800cfbe:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
 800cfc2:	e007      	b.n	800cfd4 <RegionUS915AlternateDr+0x38>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 800cfc4:	4b11      	ldr	r3, [pc, #68]	@ (800d00c <RegionUS915AlternateDr+0x70>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 800cfcc:	3a01      	subs	r2, #1
 800cfce:	b2d2      	uxtb	r2, r2
 800cfd0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 800cfd4:	4b0d      	ldr	r3, [pc, #52]	@ (800d00c <RegionUS915AlternateDr+0x70>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 800cfdc:	4b0c      	ldr	r3, [pc, #48]	@ (800d010 <RegionUS915AlternateDr+0x74>)
 800cfde:	fba3 1302 	umull	r1, r3, r3, r2
 800cfe2:	0859      	lsrs	r1, r3, #1
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	00db      	lsls	r3, r3, #3
 800cfe8:	440b      	add	r3, r1
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d102      	bne.n	800cff8 <RegionUS915AlternateDr+0x5c>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 800cff2:	2304      	movs	r3, #4
 800cff4:	71fb      	strb	r3, [r7, #7]
 800cff6:	e001      	b.n	800cffc <RegionUS915AlternateDr+0x60>
    }
    else
    {
        currentDr = DR_0;
 800cff8:	2300      	movs	r3, #0
 800cffa:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 800cffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 800d000:	4618      	mov	r0, r3
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	bc80      	pop	{r7}
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop
 800d00c:	200012c0 	.word	0x200012c0
 800d010:	38e38e39 	.word	0x38e38e39

0800d014 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b0a8      	sub	sp, #160	@ 0xa0
 800d018:	af02      	add	r7, sp, #8
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	607a      	str	r2, [r7, #4]
 800d020:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 800d022:	2300      	movs	r3, #0
 800d024:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    uint8_t nbRestrictedChannels = 0;
 800d028:	2300      	movs	r3, #0
 800d02a:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 800d02e:	2300      	movs	r3, #0
 800d030:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d032:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800d036:	2244      	movs	r2, #68	@ 0x44
 800d038:	2100      	movs	r1, #0
 800d03a:	4618      	mov	r0, r3
 800d03c:	f005 f9a4 	bl	8012388 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800d040:	230c      	movs	r3, #12
 800d042:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 800d046:	4b6b      	ldr	r3, [pc, #428]	@ (800d1f4 <RegionUS915NextChannel+0x1e0>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3390      	adds	r3, #144	@ 0x90
 800d04c:	2204      	movs	r2, #4
 800d04e:	2100      	movs	r1, #0
 800d050:	4618      	mov	r0, r3
 800d052:	f7fd ffa9 	bl	800afa8 <RegionCommonCountChannels>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d110      	bne.n	800d07e <RegionUS915NextChannel+0x6a>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 800d05c:	4b65      	ldr	r3, [pc, #404]	@ (800d1f4 <RegionUS915NextChannel+0x1e0>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800d064:	4b64      	ldr	r3, [pc, #400]	@ (800d1f8 <RegionUS915NextChannel+0x1e4>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800d06c:	2204      	movs	r2, #4
 800d06e:	4619      	mov	r1, r3
 800d070:	f7fd ffc6 	bl	800b000 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800d074:	4b5f      	ldr	r3, [pc, #380]	@ (800d1f4 <RegionUS915NextChannel+0x1e0>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2200      	movs	r2, #0
 800d07a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d084:	2b03      	cmp	r3, #3
 800d086:	dd0e      	ble.n	800d0a6 <RegionUS915NextChannel+0x92>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 800d088:	4b5a      	ldr	r3, [pc, #360]	@ (800d1f4 <RegionUS915NextChannel+0x1e0>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800d090:	b2db      	uxtb	r3, r3
 800d092:	2b00      	cmp	r3, #0
 800d094:	d107      	bne.n	800d0a6 <RegionUS915NextChannel+0x92>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 800d096:	4b58      	ldr	r3, [pc, #352]	@ (800d1f8 <RegionUS915NextChannel+0x1e4>)
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	4b56      	ldr	r3, [pc, #344]	@ (800d1f4 <RegionUS915NextChannel+0x1e0>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	@ 0x488
 800d0a2:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	7a5b      	ldrb	r3, [r3, #9]
 800d0aa:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 800d0b6:	4b4f      	ldr	r3, [pc, #316]	@ (800d1f4 <RegionUS915NextChannel+0x1e0>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	3390      	adds	r3, #144	@ 0x90
 800d0bc:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800d0be:	4b4e      	ldr	r3, [pc, #312]	@ (800d1f8 <RegionUS915NextChannel+0x1e4>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800d0c4:	4b4b      	ldr	r3, [pc, #300]	@ (800d1f4 <RegionUS915NextChannel+0x1e0>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 800d0ca:	2348      	movs	r3, #72	@ 0x48
 800d0cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = NULL;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	7a9b      	ldrb	r3, [r3, #10]
 800d0e2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800d0ec:	68fa      	ldr	r2, [r7, #12]
 800d0ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800d0f2:	320c      	adds	r2, #12
 800d0f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d0f8:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	7d1b      	ldrb	r3, [r3, #20]
 800d100:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	8adb      	ldrh	r3, [r3, #22]
 800d10e:	4619      	mov	r1, r3
 800d110:	4610      	mov	r0, r2
 800d112:	f7ff fa33 	bl	800c57c <GetTimeOnAir>
 800d116:	4603      	mov	r3, r0
 800d118:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800d11a:	f107 0314 	add.w	r3, r7, #20
 800d11e:	64bb      	str	r3, [r7, #72]	@ 0x48
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800d120:	f107 0195 	add.w	r1, r7, #149	@ 0x95
 800d124:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800d128:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	9301      	str	r3, [sp, #4]
 800d130:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800d134:	9300      	str	r3, [sp, #0]
 800d136:	460b      	mov	r3, r1
 800d138:	6839      	ldr	r1, [r7, #0]
 800d13a:	f7fe fa44 	bl	800b5c6 <RegionCommonIdentifyChannels>
 800d13e:	4603      	mov	r3, r0
 800d140:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800d144:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d14d      	bne.n	800d1e8 <RegionUS915NextChannel+0x1d4>
    {
        if( nextChanParams->Joined == true )
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	7a5b      	ldrb	r3, [r3, #9]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d00e      	beq.n	800d172 <RegionUS915NextChannel+0x15e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800d154:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 800d158:	3b01      	subs	r3, #1
 800d15a:	4619      	mov	r1, r3
 800d15c:	2000      	movs	r0, #0
 800d15e:	f001 fb75 	bl	800e84c <randr>
 800d162:	4603      	mov	r3, r0
 800d164:	3398      	adds	r3, #152	@ 0x98
 800d166:	443b      	add	r3, r7
 800d168:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	701a      	strb	r2, [r3, #0]
 800d170:	e030      	b.n	800d1d4 <RegionUS915NextChannel+0x1c0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d10f      	bne.n	800d19c <RegionUS915NextChannel+0x188>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800d17c:	4b1d      	ldr	r3, [pc, #116]	@ (800d1f4 <RegionUS915NextChannel+0x1e0>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f103 0090 	add.w	r0, r3, #144	@ 0x90
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800d184:	4b1b      	ldr	r3, [pc, #108]	@ (800d1f4 <RegionUS915NextChannel+0x1e0>)
 800d186:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 800d188:	339c      	adds	r3, #156	@ 0x9c
 800d18a:	68ba      	ldr	r2, [r7, #8]
 800d18c:	4619      	mov	r1, r3
 800d18e:	f7fd fc75 	bl	800aa7c <RegionBaseUSComputeNext125kHzJoinChannel>
 800d192:	4603      	mov	r3, r0
 800d194:	2b03      	cmp	r3, #3
 800d196:	d11d      	bne.n	800d1d4 <RegionUS915NextChannel+0x1c0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 800d198:	2303      	movs	r3, #3
 800d19a:	e027      	b.n	800d1ec <RegionUS915NextChannel+0x1d8>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 800d19c:	2300      	movs	r3, #0
 800d19e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800d1a2:	e004      	b.n	800d1ae <RegionUS915NextChannel+0x19a>
                {
                    i++;
 800d1a4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 800d1ae:	4b11      	ldr	r3, [pc, #68]	@ (800d1f4 <RegionUS915NextChannel+0x1e0>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800d1b6:	b2da      	uxtb	r2, r3
 800d1b8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d1bc:	fa42 f303 	asr.w	r3, r2, r3
 800d1c0:	f003 0301 	and.w	r3, r3, #1
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d0ed      	beq.n	800d1a4 <RegionUS915NextChannel+0x190>
                }
                *channel = 64 + i;
 800d1c8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d1cc:	3340      	adds	r3, #64	@ 0x40
 800d1ce:	b2da      	uxtb	r2, r3
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 800d1d4:	4b07      	ldr	r3, [pc, #28]	@ (800d1f4 <RegionUS915NextChannel+0x1e0>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	2248      	movs	r2, #72	@ 0x48
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	f7fd feac 	bl	800af40 <RegionCommonChanDisable>
    }
    return status;
 800d1e8:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3798      	adds	r7, #152	@ 0x98
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	200012c0 	.word	0x200012c0
 800d1f8:	200012c4 	.word	0x200012c4

0800d1fc <RegionUS915SetContinuousWave>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800d1fc:	b590      	push	{r4, r7, lr}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f993 0002 	ldrsb.w	r0, [r3, #2]
 800d20a:	4b23      	ldr	r3, [pc, #140]	@ (800d298 <RegionUS915SetContinuousWave+0x9c>)
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	4b23      	ldr	r3, [pc, #140]	@ (800d29c <RegionUS915SetContinuousWave+0xa0>)
 800d210:	6819      	ldr	r1, [r3, #0]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	461c      	mov	r4, r3
 800d218:	4623      	mov	r3, r4
 800d21a:	005b      	lsls	r3, r3, #1
 800d21c:	4423      	add	r3, r4
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	440b      	add	r3, r1
 800d222:	3309      	adds	r3, #9
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	4619      	mov	r1, r3
 800d228:	460b      	mov	r3, r1
 800d22a:	005b      	lsls	r3, r3, #1
 800d22c:	440b      	add	r3, r1
 800d22e:	00db      	lsls	r3, r3, #3
 800d230:	4413      	add	r3, r2
 800d232:	3302      	adds	r3, #2
 800d234:	f993 1000 	ldrsb.w	r1, [r3]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800d23e:	4b17      	ldr	r3, [pc, #92]	@ (800d29c <RegionUS915SetContinuousWave+0xa0>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 800d246:	f7ff f91f 	bl	800c488 <LimitTxPower>
 800d24a:	4603      	mov	r3, r0
 800d24c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 800d24e:	2300      	movs	r3, #0
 800d250:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800d252:	4b12      	ldr	r3, [pc, #72]	@ (800d29c <RegionUS915SetContinuousWave+0xa0>)
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	4619      	mov	r1, r3
 800d25c:	460b      	mov	r3, r1
 800d25e:	005b      	lsls	r3, r3, #1
 800d260:	440b      	add	r3, r1
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	4413      	add	r3, r2
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 800d26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d26e:	f04f 0200 	mov.w	r2, #0
 800d272:	490b      	ldr	r1, [pc, #44]	@ (800d2a0 <RegionUS915SetContinuousWave+0xa4>)
 800d274:	4618      	mov	r0, r3
 800d276:	f7fe f8b7 	bl	800b3e8 <RegionCommonComputeTxPower>
 800d27a:	4603      	mov	r3, r0
 800d27c:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800d27e:	4b09      	ldr	r3, [pc, #36]	@ (800d2a4 <RegionUS915SetContinuousWave+0xa8>)
 800d280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	8992      	ldrh	r2, [r2, #12]
 800d286:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800d28a:	68b8      	ldr	r0, [r7, #8]
 800d28c:	4798      	blx	r3
#endif /* REGION_US915 */
}
 800d28e:	bf00      	nop
 800d290:	3714      	adds	r7, #20
 800d292:	46bd      	mov	sp, r7
 800d294:	bd90      	pop	{r4, r7, pc}
 800d296:	bf00      	nop
 800d298:	200012c0 	.word	0x200012c0
 800d29c:	200012c4 	.word	0x200012c4
 800d2a0:	41f00000 	.word	0x41f00000
 800d2a4:	08012a80 	.word	0x08012a80

0800d2a8 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	71fb      	strb	r3, [r7, #7]
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	71bb      	strb	r3, [r7, #6]
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 800d2ba:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800d2be:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800d2c2:	4909      	ldr	r1, [pc, #36]	@ (800d2e8 <RegionUS915ApplyDrOffset+0x40>)
 800d2c4:	0092      	lsls	r2, r2, #2
 800d2c6:	440a      	add	r2, r1
 800d2c8:	4413      	add	r3, r2
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 800d2ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	da01      	bge.n	800d2da <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 800d2da:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3714      	adds	r7, #20
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bc80      	pop	{r7}
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	0801274c 	.word	0x0801274c

0800d2ec <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	33f1      	adds	r3, #241	@ 0xf1
 800d2f8:	2210      	movs	r2, #16
 800d2fa:	2100      	movs	r1, #0
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f001 faf7 	bl	800e8f0 <memset1>
    ctx->M_n = 0;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	22f0      	movs	r2, #240	@ 0xf0
 800d30e:	2100      	movs	r1, #0
 800d310:	4618      	mov	r0, r3
 800d312:	f001 faed 	bl	800e8f0 <memset1>
}
 800d316:	bf00      	nop
 800d318:	3708      	adds	r7, #8
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}

0800d31e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b082      	sub	sp, #8
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
 800d326:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	461a      	mov	r2, r3
 800d32c:	2110      	movs	r1, #16
 800d32e:	6838      	ldr	r0, [r7, #0]
 800d330:	f000 fe5c 	bl	800dfec <lorawan_aes_set_key>
}
 800d334:	bf00      	nop
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b08c      	sub	sp, #48	@ 0x30
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f000 80a1 	beq.w	800d496 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d35a:	f1c3 0310 	rsb	r3, r3, #16
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	4293      	cmp	r3, r2
 800d362:	bf28      	it	cs
 800d364:	4613      	movcs	r3, r2
 800d366:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d374:	4413      	add	r3, r2
 800d376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d378:	b292      	uxth	r2, r2
 800d37a:	68b9      	ldr	r1, [r7, #8]
 800d37c:	4618      	mov	r0, r3
 800d37e:	f001 fa7c 	bl	800e87a <memcpy1>
        ctx->M_n += mlen;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800d388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38a:	441a      	add	r2, r3
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d398:	2b0f      	cmp	r3, #15
 800d39a:	f240 808d 	bls.w	800d4b8 <AES_CMAC_Update+0x17c>
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	f000 8088 	beq.w	800d4b8 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3ac:	e015      	b.n	800d3da <AES_CMAC_Update+0x9e>
 800d3ae:	68fa      	ldr	r2, [r7, #12]
 800d3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b2:	4413      	add	r3, r2
 800d3b4:	33f1      	adds	r3, #241	@ 0xf1
 800d3b6:	781a      	ldrb	r2, [r3, #0]
 800d3b8:	68f9      	ldr	r1, [r7, #12]
 800d3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3bc:	440b      	add	r3, r1
 800d3be:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	4053      	eors	r3, r2
 800d3c6:	b2d9      	uxtb	r1, r3
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3cc:	4413      	add	r3, r2
 800d3ce:	33f1      	adds	r3, #241	@ 0xf1
 800d3d0:	460a      	mov	r2, r1
 800d3d2:	701a      	strb	r2, [r3, #0]
 800d3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3dc:	2b0f      	cmp	r3, #15
 800d3de:	dde6      	ble.n	800d3ae <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800d3e6:	f107 0314 	add.w	r3, r7, #20
 800d3ea:	2210      	movs	r2, #16
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f001 fa44 	bl	800e87a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	f107 0114 	add.w	r1, r7, #20
 800d3f8:	f107 0314 	add.w	r3, r7, #20
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f000 fed3 	bl	800e1a8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	33f1      	adds	r3, #241	@ 0xf1
 800d406:	f107 0114 	add.w	r1, r7, #20
 800d40a:	2210      	movs	r2, #16
 800d40c:	4618      	mov	r0, r3
 800d40e:	f001 fa34 	bl	800e87a <memcpy1>

        data += mlen;
 800d412:	68ba      	ldr	r2, [r7, #8]
 800d414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d416:	4413      	add	r3, r2
 800d418:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800d41a:	687a      	ldr	r2, [r7, #4]
 800d41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d41e:	1ad3      	subs	r3, r2, r3
 800d420:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800d422:	e038      	b.n	800d496 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800d424:	2300      	movs	r3, #0
 800d426:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d428:	e013      	b.n	800d452 <AES_CMAC_Update+0x116>
 800d42a:	68fa      	ldr	r2, [r7, #12]
 800d42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d42e:	4413      	add	r3, r2
 800d430:	33f1      	adds	r3, #241	@ 0xf1
 800d432:	781a      	ldrb	r2, [r3, #0]
 800d434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d436:	68b9      	ldr	r1, [r7, #8]
 800d438:	440b      	add	r3, r1
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	4053      	eors	r3, r2
 800d43e:	b2d9      	uxtb	r1, r3
 800d440:	68fa      	ldr	r2, [r7, #12]
 800d442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d444:	4413      	add	r3, r2
 800d446:	33f1      	adds	r3, #241	@ 0xf1
 800d448:	460a      	mov	r2, r1
 800d44a:	701a      	strb	r2, [r3, #0]
 800d44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d44e:	3301      	adds	r3, #1
 800d450:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d454:	2b0f      	cmp	r3, #15
 800d456:	dde8      	ble.n	800d42a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800d45e:	f107 0314 	add.w	r3, r7, #20
 800d462:	2210      	movs	r2, #16
 800d464:	4618      	mov	r0, r3
 800d466:	f001 fa08 	bl	800e87a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	f107 0114 	add.w	r1, r7, #20
 800d470:	f107 0314 	add.w	r3, r7, #20
 800d474:	4618      	mov	r0, r3
 800d476:	f000 fe97 	bl	800e1a8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	33f1      	adds	r3, #241	@ 0xf1
 800d47e:	f107 0114 	add.w	r1, r7, #20
 800d482:	2210      	movs	r2, #16
 800d484:	4618      	mov	r0, r3
 800d486:	f001 f9f8 	bl	800e87a <memcpy1>

        data += 16;
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	3310      	adds	r3, #16
 800d48e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	3b10      	subs	r3, #16
 800d494:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2b10      	cmp	r3, #16
 800d49a:	d8c3      	bhi.n	800d424 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	b292      	uxth	r2, r2
 800d4a6:	68b9      	ldr	r1, [r7, #8]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f001 f9e6 	bl	800e87a <memcpy1>
    ctx->M_n = len;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800d4b6:	e000      	b.n	800d4ba <AES_CMAC_Update+0x17e>
            return;
 800d4b8:	bf00      	nop
}
 800d4ba:	3730      	adds	r7, #48	@ 0x30
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b092      	sub	sp, #72	@ 0x48
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800d4ca:	f107 031c 	add.w	r3, r7, #28
 800d4ce:	2210      	movs	r2, #16
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f001 fa0c 	bl	800e8f0 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800d4d8:	683a      	ldr	r2, [r7, #0]
 800d4da:	f107 011c 	add.w	r1, r7, #28
 800d4de:	f107 031c 	add.w	r3, r7, #28
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f000 fe60 	bl	800e1a8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800d4e8:	7f3b      	ldrb	r3, [r7, #28]
 800d4ea:	b25b      	sxtb	r3, r3
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	da30      	bge.n	800d552 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4f4:	e01b      	b.n	800d52e <AES_CMAC_Final+0x6e>
 800d4f6:	f107 021c 	add.w	r2, r7, #28
 800d4fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4fc:	4413      	add	r3, r2
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	005b      	lsls	r3, r3, #1
 800d502:	b25a      	sxtb	r2, r3
 800d504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d506:	3301      	adds	r3, #1
 800d508:	3348      	adds	r3, #72	@ 0x48
 800d50a:	443b      	add	r3, r7
 800d50c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d510:	09db      	lsrs	r3, r3, #7
 800d512:	b2db      	uxtb	r3, r3
 800d514:	b25b      	sxtb	r3, r3
 800d516:	4313      	orrs	r3, r2
 800d518:	b25b      	sxtb	r3, r3
 800d51a:	b2d9      	uxtb	r1, r3
 800d51c:	f107 021c 	add.w	r2, r7, #28
 800d520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d522:	4413      	add	r3, r2
 800d524:	460a      	mov	r2, r1
 800d526:	701a      	strb	r2, [r3, #0]
 800d528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d52a:	3301      	adds	r3, #1
 800d52c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d52e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d530:	2b0e      	cmp	r3, #14
 800d532:	dde0      	ble.n	800d4f6 <AES_CMAC_Final+0x36>
 800d534:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d538:	005b      	lsls	r3, r3, #1
 800d53a:	b2db      	uxtb	r3, r3
 800d53c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800d540:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d544:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800d548:	43db      	mvns	r3, r3
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d550:	e027      	b.n	800d5a2 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800d552:	2300      	movs	r3, #0
 800d554:	643b      	str	r3, [r7, #64]	@ 0x40
 800d556:	e01b      	b.n	800d590 <AES_CMAC_Final+0xd0>
 800d558:	f107 021c 	add.w	r2, r7, #28
 800d55c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d55e:	4413      	add	r3, r2
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	005b      	lsls	r3, r3, #1
 800d564:	b25a      	sxtb	r2, r3
 800d566:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d568:	3301      	adds	r3, #1
 800d56a:	3348      	adds	r3, #72	@ 0x48
 800d56c:	443b      	add	r3, r7
 800d56e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d572:	09db      	lsrs	r3, r3, #7
 800d574:	b2db      	uxtb	r3, r3
 800d576:	b25b      	sxtb	r3, r3
 800d578:	4313      	orrs	r3, r2
 800d57a:	b25b      	sxtb	r3, r3
 800d57c:	b2d9      	uxtb	r1, r3
 800d57e:	f107 021c 	add.w	r2, r7, #28
 800d582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d584:	4413      	add	r3, r2
 800d586:	460a      	mov	r2, r1
 800d588:	701a      	strb	r2, [r3, #0]
 800d58a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d58c:	3301      	adds	r3, #1
 800d58e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d592:	2b0e      	cmp	r3, #14
 800d594:	dde0      	ble.n	800d558 <AES_CMAC_Final+0x98>
 800d596:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d59a:	005b      	lsls	r3, r3, #1
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d5a8:	2b10      	cmp	r3, #16
 800d5aa:	d11d      	bne.n	800d5e8 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d5b0:	e016      	b.n	800d5e0 <AES_CMAC_Final+0x120>
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5b6:	4413      	add	r3, r2
 800d5b8:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800d5bc:	781a      	ldrb	r2, [r3, #0]
 800d5be:	f107 011c 	add.w	r1, r7, #28
 800d5c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5c4:	440b      	add	r3, r1
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	4053      	eors	r3, r2
 800d5ca:	b2d9      	uxtb	r1, r3
 800d5cc:	683a      	ldr	r2, [r7, #0]
 800d5ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5d0:	4413      	add	r3, r2
 800d5d2:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800d5d6:	460a      	mov	r2, r1
 800d5d8:	701a      	strb	r2, [r3, #0]
 800d5da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5dc:	3301      	adds	r3, #1
 800d5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d5e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5e2:	2b0f      	cmp	r3, #15
 800d5e4:	dde5      	ble.n	800d5b2 <AES_CMAC_Final+0xf2>
 800d5e6:	e096      	b.n	800d716 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800d5e8:	7f3b      	ldrb	r3, [r7, #28]
 800d5ea:	b25b      	sxtb	r3, r3
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	da30      	bge.n	800d652 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d5f4:	e01b      	b.n	800d62e <AES_CMAC_Final+0x16e>
 800d5f6:	f107 021c 	add.w	r2, r7, #28
 800d5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5fc:	4413      	add	r3, r2
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	005b      	lsls	r3, r3, #1
 800d602:	b25a      	sxtb	r2, r3
 800d604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d606:	3301      	adds	r3, #1
 800d608:	3348      	adds	r3, #72	@ 0x48
 800d60a:	443b      	add	r3, r7
 800d60c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d610:	09db      	lsrs	r3, r3, #7
 800d612:	b2db      	uxtb	r3, r3
 800d614:	b25b      	sxtb	r3, r3
 800d616:	4313      	orrs	r3, r2
 800d618:	b25b      	sxtb	r3, r3
 800d61a:	b2d9      	uxtb	r1, r3
 800d61c:	f107 021c 	add.w	r2, r7, #28
 800d620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d622:	4413      	add	r3, r2
 800d624:	460a      	mov	r2, r1
 800d626:	701a      	strb	r2, [r3, #0]
 800d628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d62a:	3301      	adds	r3, #1
 800d62c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d630:	2b0e      	cmp	r3, #14
 800d632:	dde0      	ble.n	800d5f6 <AES_CMAC_Final+0x136>
 800d634:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d638:	005b      	lsls	r3, r3, #1
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800d640:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d644:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800d648:	43db      	mvns	r3, r3
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d650:	e027      	b.n	800d6a2 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800d652:	2300      	movs	r3, #0
 800d654:	637b      	str	r3, [r7, #52]	@ 0x34
 800d656:	e01b      	b.n	800d690 <AES_CMAC_Final+0x1d0>
 800d658:	f107 021c 	add.w	r2, r7, #28
 800d65c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d65e:	4413      	add	r3, r2
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	005b      	lsls	r3, r3, #1
 800d664:	b25a      	sxtb	r2, r3
 800d666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d668:	3301      	adds	r3, #1
 800d66a:	3348      	adds	r3, #72	@ 0x48
 800d66c:	443b      	add	r3, r7
 800d66e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d672:	09db      	lsrs	r3, r3, #7
 800d674:	b2db      	uxtb	r3, r3
 800d676:	b25b      	sxtb	r3, r3
 800d678:	4313      	orrs	r3, r2
 800d67a:	b25b      	sxtb	r3, r3
 800d67c:	b2d9      	uxtb	r1, r3
 800d67e:	f107 021c 	add.w	r2, r7, #28
 800d682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d684:	4413      	add	r3, r2
 800d686:	460a      	mov	r2, r1
 800d688:	701a      	strb	r2, [r3, #0]
 800d68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d68c:	3301      	adds	r3, #1
 800d68e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d692:	2b0e      	cmp	r3, #14
 800d694:	dde0      	ble.n	800d658 <AES_CMAC_Final+0x198>
 800d696:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d69a:	005b      	lsls	r3, r3, #1
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d6a8:	683a      	ldr	r2, [r7, #0]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	2280      	movs	r2, #128	@ 0x80
 800d6ae:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800d6b2:	e007      	b.n	800d6c4 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d6ba:	683a      	ldr	r2, [r7, #0]
 800d6bc:	4413      	add	r3, r2
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d6ca:	1c5a      	adds	r2, r3, #1
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d6d8:	2b0f      	cmp	r3, #15
 800d6da:	d9eb      	bls.n	800d6b4 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800d6dc:	2300      	movs	r3, #0
 800d6de:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6e0:	e016      	b.n	800d710 <AES_CMAC_Final+0x250>
 800d6e2:	683a      	ldr	r2, [r7, #0]
 800d6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e6:	4413      	add	r3, r2
 800d6e8:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800d6ec:	781a      	ldrb	r2, [r3, #0]
 800d6ee:	f107 011c 	add.w	r1, r7, #28
 800d6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f4:	440b      	add	r3, r1
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	4053      	eors	r3, r2
 800d6fa:	b2d9      	uxtb	r1, r3
 800d6fc:	683a      	ldr	r2, [r7, #0]
 800d6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d700:	4413      	add	r3, r2
 800d702:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800d706:	460a      	mov	r2, r1
 800d708:	701a      	strb	r2, [r3, #0]
 800d70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d70c:	3301      	adds	r3, #1
 800d70e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d712:	2b0f      	cmp	r3, #15
 800d714:	dde5      	ble.n	800d6e2 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800d716:	2300      	movs	r3, #0
 800d718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d71a:	e015      	b.n	800d748 <AES_CMAC_Final+0x288>
 800d71c:	683a      	ldr	r2, [r7, #0]
 800d71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d720:	4413      	add	r3, r2
 800d722:	33f1      	adds	r3, #241	@ 0xf1
 800d724:	781a      	ldrb	r2, [r3, #0]
 800d726:	6839      	ldr	r1, [r7, #0]
 800d728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72a:	440b      	add	r3, r1
 800d72c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	4053      	eors	r3, r2
 800d734:	b2d9      	uxtb	r1, r3
 800d736:	683a      	ldr	r2, [r7, #0]
 800d738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73a:	4413      	add	r3, r2
 800d73c:	33f1      	adds	r3, #241	@ 0xf1
 800d73e:	460a      	mov	r2, r1
 800d740:	701a      	strb	r2, [r3, #0]
 800d742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d744:	3301      	adds	r3, #1
 800d746:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d74a:	2b0f      	cmp	r3, #15
 800d74c:	dde6      	ble.n	800d71c <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800d754:	f107 030c 	add.w	r3, r7, #12
 800d758:	2210      	movs	r2, #16
 800d75a:	4618      	mov	r0, r3
 800d75c:	f001 f88d 	bl	800e87a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800d760:	683a      	ldr	r2, [r7, #0]
 800d762:	f107 030c 	add.w	r3, r7, #12
 800d766:	6879      	ldr	r1, [r7, #4]
 800d768:	4618      	mov	r0, r3
 800d76a:	f000 fd1d 	bl	800e1a8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800d76e:	f107 031c 	add.w	r3, r7, #28
 800d772:	2210      	movs	r2, #16
 800d774:	2100      	movs	r1, #0
 800d776:	4618      	mov	r0, r3
 800d778:	f001 f8ba 	bl	800e8f0 <memset1>
}
 800d77c:	bf00      	nop
 800d77e:	3748      	adds	r7, #72	@ 0x48
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	781a      	ldrb	r2, [r3, #0]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	3301      	adds	r3, #1
 800d79a:	683a      	ldr	r2, [r7, #0]
 800d79c:	7852      	ldrb	r2, [r2, #1]
 800d79e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	3302      	adds	r3, #2
 800d7a4:	683a      	ldr	r2, [r7, #0]
 800d7a6:	7892      	ldrb	r2, [r2, #2]
 800d7a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	3303      	adds	r3, #3
 800d7ae:	683a      	ldr	r2, [r7, #0]
 800d7b0:	78d2      	ldrb	r2, [r2, #3]
 800d7b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	3304      	adds	r3, #4
 800d7b8:	683a      	ldr	r2, [r7, #0]
 800d7ba:	7912      	ldrb	r2, [r2, #4]
 800d7bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	3305      	adds	r3, #5
 800d7c2:	683a      	ldr	r2, [r7, #0]
 800d7c4:	7952      	ldrb	r2, [r2, #5]
 800d7c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	3306      	adds	r3, #6
 800d7cc:	683a      	ldr	r2, [r7, #0]
 800d7ce:	7992      	ldrb	r2, [r2, #6]
 800d7d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	3307      	adds	r3, #7
 800d7d6:	683a      	ldr	r2, [r7, #0]
 800d7d8:	79d2      	ldrb	r2, [r2, #7]
 800d7da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	3308      	adds	r3, #8
 800d7e0:	683a      	ldr	r2, [r7, #0]
 800d7e2:	7a12      	ldrb	r2, [r2, #8]
 800d7e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	3309      	adds	r3, #9
 800d7ea:	683a      	ldr	r2, [r7, #0]
 800d7ec:	7a52      	ldrb	r2, [r2, #9]
 800d7ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	330a      	adds	r3, #10
 800d7f4:	683a      	ldr	r2, [r7, #0]
 800d7f6:	7a92      	ldrb	r2, [r2, #10]
 800d7f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	330b      	adds	r3, #11
 800d7fe:	683a      	ldr	r2, [r7, #0]
 800d800:	7ad2      	ldrb	r2, [r2, #11]
 800d802:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	330c      	adds	r3, #12
 800d808:	683a      	ldr	r2, [r7, #0]
 800d80a:	7b12      	ldrb	r2, [r2, #12]
 800d80c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	330d      	adds	r3, #13
 800d812:	683a      	ldr	r2, [r7, #0]
 800d814:	7b52      	ldrb	r2, [r2, #13]
 800d816:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	330e      	adds	r3, #14
 800d81c:	683a      	ldr	r2, [r7, #0]
 800d81e:	7b92      	ldrb	r2, [r2, #14]
 800d820:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	330f      	adds	r3, #15
 800d826:	683a      	ldr	r2, [r7, #0]
 800d828:	7bd2      	ldrb	r2, [r2, #15]
 800d82a:	701a      	strb	r2, [r3, #0]
#endif
}
 800d82c:	bf00      	nop
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	bc80      	pop	{r7}
 800d834:	4770      	bx	lr

0800d836 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800d836:	b480      	push	{r7}
 800d838:	b085      	sub	sp, #20
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	60f8      	str	r0, [r7, #12]
 800d83e:	60b9      	str	r1, [r7, #8]
 800d840:	4613      	mov	r3, r2
 800d842:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800d844:	e007      	b.n	800d856 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800d846:	68ba      	ldr	r2, [r7, #8]
 800d848:	1c53      	adds	r3, r2, #1
 800d84a:	60bb      	str	r3, [r7, #8]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	1c59      	adds	r1, r3, #1
 800d850:	60f9      	str	r1, [r7, #12]
 800d852:	7812      	ldrb	r2, [r2, #0]
 800d854:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800d856:	79fb      	ldrb	r3, [r7, #7]
 800d858:	1e5a      	subs	r2, r3, #1
 800d85a:	71fa      	strb	r2, [r7, #7]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1f2      	bne.n	800d846 <copy_block_nn+0x10>
}
 800d860:	bf00      	nop
 800d862:	bf00      	nop
 800d864:	3714      	adds	r7, #20
 800d866:	46bd      	mov	sp, r7
 800d868:	bc80      	pop	{r7}
 800d86a:	4770      	bx	lr

0800d86c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	781a      	ldrb	r2, [r3, #0]
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	4053      	eors	r3, r2
 800d880:	b2da      	uxtb	r2, r3
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	3301      	adds	r3, #1
 800d88a:	7819      	ldrb	r1, [r3, #0]
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	3301      	adds	r3, #1
 800d890:	781a      	ldrb	r2, [r3, #0]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	3301      	adds	r3, #1
 800d896:	404a      	eors	r2, r1
 800d898:	b2d2      	uxtb	r2, r2
 800d89a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	3302      	adds	r3, #2
 800d8a0:	7819      	ldrb	r1, [r3, #0]
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	3302      	adds	r3, #2
 800d8a6:	781a      	ldrb	r2, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	3302      	adds	r3, #2
 800d8ac:	404a      	eors	r2, r1
 800d8ae:	b2d2      	uxtb	r2, r2
 800d8b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	3303      	adds	r3, #3
 800d8b6:	7819      	ldrb	r1, [r3, #0]
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	3303      	adds	r3, #3
 800d8bc:	781a      	ldrb	r2, [r3, #0]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	3303      	adds	r3, #3
 800d8c2:	404a      	eors	r2, r1
 800d8c4:	b2d2      	uxtb	r2, r2
 800d8c6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	3304      	adds	r3, #4
 800d8cc:	7819      	ldrb	r1, [r3, #0]
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	3304      	adds	r3, #4
 800d8d2:	781a      	ldrb	r2, [r3, #0]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	3304      	adds	r3, #4
 800d8d8:	404a      	eors	r2, r1
 800d8da:	b2d2      	uxtb	r2, r2
 800d8dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	3305      	adds	r3, #5
 800d8e2:	7819      	ldrb	r1, [r3, #0]
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	3305      	adds	r3, #5
 800d8e8:	781a      	ldrb	r2, [r3, #0]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	3305      	adds	r3, #5
 800d8ee:	404a      	eors	r2, r1
 800d8f0:	b2d2      	uxtb	r2, r2
 800d8f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	3306      	adds	r3, #6
 800d8f8:	7819      	ldrb	r1, [r3, #0]
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	3306      	adds	r3, #6
 800d8fe:	781a      	ldrb	r2, [r3, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	3306      	adds	r3, #6
 800d904:	404a      	eors	r2, r1
 800d906:	b2d2      	uxtb	r2, r2
 800d908:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	3307      	adds	r3, #7
 800d90e:	7819      	ldrb	r1, [r3, #0]
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	3307      	adds	r3, #7
 800d914:	781a      	ldrb	r2, [r3, #0]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	3307      	adds	r3, #7
 800d91a:	404a      	eors	r2, r1
 800d91c:	b2d2      	uxtb	r2, r2
 800d91e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	3308      	adds	r3, #8
 800d924:	7819      	ldrb	r1, [r3, #0]
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	3308      	adds	r3, #8
 800d92a:	781a      	ldrb	r2, [r3, #0]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	3308      	adds	r3, #8
 800d930:	404a      	eors	r2, r1
 800d932:	b2d2      	uxtb	r2, r2
 800d934:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	3309      	adds	r3, #9
 800d93a:	7819      	ldrb	r1, [r3, #0]
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	3309      	adds	r3, #9
 800d940:	781a      	ldrb	r2, [r3, #0]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	3309      	adds	r3, #9
 800d946:	404a      	eors	r2, r1
 800d948:	b2d2      	uxtb	r2, r2
 800d94a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	330a      	adds	r3, #10
 800d950:	7819      	ldrb	r1, [r3, #0]
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	330a      	adds	r3, #10
 800d956:	781a      	ldrb	r2, [r3, #0]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	330a      	adds	r3, #10
 800d95c:	404a      	eors	r2, r1
 800d95e:	b2d2      	uxtb	r2, r2
 800d960:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	330b      	adds	r3, #11
 800d966:	7819      	ldrb	r1, [r3, #0]
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	330b      	adds	r3, #11
 800d96c:	781a      	ldrb	r2, [r3, #0]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	330b      	adds	r3, #11
 800d972:	404a      	eors	r2, r1
 800d974:	b2d2      	uxtb	r2, r2
 800d976:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	330c      	adds	r3, #12
 800d97c:	7819      	ldrb	r1, [r3, #0]
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	330c      	adds	r3, #12
 800d982:	781a      	ldrb	r2, [r3, #0]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	330c      	adds	r3, #12
 800d988:	404a      	eors	r2, r1
 800d98a:	b2d2      	uxtb	r2, r2
 800d98c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	330d      	adds	r3, #13
 800d992:	7819      	ldrb	r1, [r3, #0]
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	330d      	adds	r3, #13
 800d998:	781a      	ldrb	r2, [r3, #0]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	330d      	adds	r3, #13
 800d99e:	404a      	eors	r2, r1
 800d9a0:	b2d2      	uxtb	r2, r2
 800d9a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	330e      	adds	r3, #14
 800d9a8:	7819      	ldrb	r1, [r3, #0]
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	330e      	adds	r3, #14
 800d9ae:	781a      	ldrb	r2, [r3, #0]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	330e      	adds	r3, #14
 800d9b4:	404a      	eors	r2, r1
 800d9b6:	b2d2      	uxtb	r2, r2
 800d9b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	330f      	adds	r3, #15
 800d9be:	7819      	ldrb	r1, [r3, #0]
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	330f      	adds	r3, #15
 800d9c4:	781a      	ldrb	r2, [r3, #0]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	330f      	adds	r3, #15
 800d9ca:	404a      	eors	r2, r1
 800d9cc:	b2d2      	uxtb	r2, r2
 800d9ce:	701a      	strb	r2, [r3, #0]
#endif
}
 800d9d0:	bf00      	nop
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bc80      	pop	{r7}
 800d9d8:	4770      	bx	lr

0800d9da <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800d9da:	b480      	push	{r7}
 800d9dc:	b085      	sub	sp, #20
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	60f8      	str	r0, [r7, #12]
 800d9e2:	60b9      	str	r1, [r7, #8]
 800d9e4:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	781a      	ldrb	r2, [r3, #0]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	4053      	eors	r3, r2
 800d9f0:	b2da      	uxtb	r2, r3
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	7819      	ldrb	r1, [r3, #0]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	3301      	adds	r3, #1
 800da00:	781a      	ldrb	r2, [r3, #0]
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	3301      	adds	r3, #1
 800da06:	404a      	eors	r2, r1
 800da08:	b2d2      	uxtb	r2, r2
 800da0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	3302      	adds	r3, #2
 800da10:	7819      	ldrb	r1, [r3, #0]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	3302      	adds	r3, #2
 800da16:	781a      	ldrb	r2, [r3, #0]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	3302      	adds	r3, #2
 800da1c:	404a      	eors	r2, r1
 800da1e:	b2d2      	uxtb	r2, r2
 800da20:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	3303      	adds	r3, #3
 800da26:	7819      	ldrb	r1, [r3, #0]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	3303      	adds	r3, #3
 800da2c:	781a      	ldrb	r2, [r3, #0]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	3303      	adds	r3, #3
 800da32:	404a      	eors	r2, r1
 800da34:	b2d2      	uxtb	r2, r2
 800da36:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	3304      	adds	r3, #4
 800da3c:	7819      	ldrb	r1, [r3, #0]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	3304      	adds	r3, #4
 800da42:	781a      	ldrb	r2, [r3, #0]
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	3304      	adds	r3, #4
 800da48:	404a      	eors	r2, r1
 800da4a:	b2d2      	uxtb	r2, r2
 800da4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	3305      	adds	r3, #5
 800da52:	7819      	ldrb	r1, [r3, #0]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	3305      	adds	r3, #5
 800da58:	781a      	ldrb	r2, [r3, #0]
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	3305      	adds	r3, #5
 800da5e:	404a      	eors	r2, r1
 800da60:	b2d2      	uxtb	r2, r2
 800da62:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	3306      	adds	r3, #6
 800da68:	7819      	ldrb	r1, [r3, #0]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	3306      	adds	r3, #6
 800da6e:	781a      	ldrb	r2, [r3, #0]
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	3306      	adds	r3, #6
 800da74:	404a      	eors	r2, r1
 800da76:	b2d2      	uxtb	r2, r2
 800da78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	3307      	adds	r3, #7
 800da7e:	7819      	ldrb	r1, [r3, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	3307      	adds	r3, #7
 800da84:	781a      	ldrb	r2, [r3, #0]
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	3307      	adds	r3, #7
 800da8a:	404a      	eors	r2, r1
 800da8c:	b2d2      	uxtb	r2, r2
 800da8e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	3308      	adds	r3, #8
 800da94:	7819      	ldrb	r1, [r3, #0]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	3308      	adds	r3, #8
 800da9a:	781a      	ldrb	r2, [r3, #0]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	3308      	adds	r3, #8
 800daa0:	404a      	eors	r2, r1
 800daa2:	b2d2      	uxtb	r2, r2
 800daa4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	3309      	adds	r3, #9
 800daaa:	7819      	ldrb	r1, [r3, #0]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	3309      	adds	r3, #9
 800dab0:	781a      	ldrb	r2, [r3, #0]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	3309      	adds	r3, #9
 800dab6:	404a      	eors	r2, r1
 800dab8:	b2d2      	uxtb	r2, r2
 800daba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	330a      	adds	r3, #10
 800dac0:	7819      	ldrb	r1, [r3, #0]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	330a      	adds	r3, #10
 800dac6:	781a      	ldrb	r2, [r3, #0]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	330a      	adds	r3, #10
 800dacc:	404a      	eors	r2, r1
 800dace:	b2d2      	uxtb	r2, r2
 800dad0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	330b      	adds	r3, #11
 800dad6:	7819      	ldrb	r1, [r3, #0]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	330b      	adds	r3, #11
 800dadc:	781a      	ldrb	r2, [r3, #0]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	330b      	adds	r3, #11
 800dae2:	404a      	eors	r2, r1
 800dae4:	b2d2      	uxtb	r2, r2
 800dae6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	330c      	adds	r3, #12
 800daec:	7819      	ldrb	r1, [r3, #0]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	330c      	adds	r3, #12
 800daf2:	781a      	ldrb	r2, [r3, #0]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	330c      	adds	r3, #12
 800daf8:	404a      	eors	r2, r1
 800dafa:	b2d2      	uxtb	r2, r2
 800dafc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	330d      	adds	r3, #13
 800db02:	7819      	ldrb	r1, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	330d      	adds	r3, #13
 800db08:	781a      	ldrb	r2, [r3, #0]
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	330d      	adds	r3, #13
 800db0e:	404a      	eors	r2, r1
 800db10:	b2d2      	uxtb	r2, r2
 800db12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	330e      	adds	r3, #14
 800db18:	7819      	ldrb	r1, [r3, #0]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	330e      	adds	r3, #14
 800db1e:	781a      	ldrb	r2, [r3, #0]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	330e      	adds	r3, #14
 800db24:	404a      	eors	r2, r1
 800db26:	b2d2      	uxtb	r2, r2
 800db28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	330f      	adds	r3, #15
 800db2e:	7819      	ldrb	r1, [r3, #0]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	330f      	adds	r3, #15
 800db34:	781a      	ldrb	r2, [r3, #0]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	330f      	adds	r3, #15
 800db3a:	404a      	eors	r2, r1
 800db3c:	b2d2      	uxtb	r2, r2
 800db3e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800db40:	bf00      	nop
 800db42:	3714      	adds	r7, #20
 800db44:	46bd      	mov	sp, r7
 800db46:	bc80      	pop	{r7}
 800db48:	4770      	bx	lr

0800db4a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b082      	sub	sp, #8
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
 800db52:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800db54:	6839      	ldr	r1, [r7, #0]
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f7ff fe88 	bl	800d86c <xor_block>
}
 800db5c:	bf00      	nop
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800db64:	b480      	push	{r7}
 800db66:	b085      	sub	sp, #20
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	461a      	mov	r2, r3
 800db72:	4b48      	ldr	r3, [pc, #288]	@ (800dc94 <shift_sub_rows+0x130>)
 800db74:	5c9a      	ldrb	r2, [r3, r2]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	701a      	strb	r2, [r3, #0]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	3304      	adds	r3, #4
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	4619      	mov	r1, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	3304      	adds	r3, #4
 800db86:	4a43      	ldr	r2, [pc, #268]	@ (800dc94 <shift_sub_rows+0x130>)
 800db88:	5c52      	ldrb	r2, [r2, r1]
 800db8a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	3308      	adds	r3, #8
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	4619      	mov	r1, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	3308      	adds	r3, #8
 800db98:	4a3e      	ldr	r2, [pc, #248]	@ (800dc94 <shift_sub_rows+0x130>)
 800db9a:	5c52      	ldrb	r2, [r2, r1]
 800db9c:	701a      	strb	r2, [r3, #0]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	330c      	adds	r3, #12
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	4619      	mov	r1, r3
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	330c      	adds	r3, #12
 800dbaa:	4a3a      	ldr	r2, [pc, #232]	@ (800dc94 <shift_sub_rows+0x130>)
 800dbac:	5c52      	ldrb	r2, [r2, r1]
 800dbae:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	785b      	ldrb	r3, [r3, #1]
 800dbb4:	73fb      	strb	r3, [r7, #15]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	3305      	adds	r3, #5
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	4a34      	ldr	r2, [pc, #208]	@ (800dc94 <shift_sub_rows+0x130>)
 800dbc4:	5c52      	ldrb	r2, [r2, r1]
 800dbc6:	701a      	strb	r2, [r3, #0]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	3309      	adds	r3, #9
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	4619      	mov	r1, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	3305      	adds	r3, #5
 800dbd4:	4a2f      	ldr	r2, [pc, #188]	@ (800dc94 <shift_sub_rows+0x130>)
 800dbd6:	5c52      	ldrb	r2, [r2, r1]
 800dbd8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	330d      	adds	r3, #13
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	3309      	adds	r3, #9
 800dbe6:	4a2b      	ldr	r2, [pc, #172]	@ (800dc94 <shift_sub_rows+0x130>)
 800dbe8:	5c52      	ldrb	r2, [r2, r1]
 800dbea:	701a      	strb	r2, [r3, #0]
 800dbec:	7bfa      	ldrb	r2, [r7, #15]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	330d      	adds	r3, #13
 800dbf2:	4928      	ldr	r1, [pc, #160]	@ (800dc94 <shift_sub_rows+0x130>)
 800dbf4:	5c8a      	ldrb	r2, [r1, r2]
 800dbf6:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	789b      	ldrb	r3, [r3, #2]
 800dbfc:	73fb      	strb	r3, [r7, #15]
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	330a      	adds	r3, #10
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	4619      	mov	r1, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	3302      	adds	r3, #2
 800dc0a:	4a22      	ldr	r2, [pc, #136]	@ (800dc94 <shift_sub_rows+0x130>)
 800dc0c:	5c52      	ldrb	r2, [r2, r1]
 800dc0e:	701a      	strb	r2, [r3, #0]
 800dc10:	7bfa      	ldrb	r2, [r7, #15]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	330a      	adds	r3, #10
 800dc16:	491f      	ldr	r1, [pc, #124]	@ (800dc94 <shift_sub_rows+0x130>)
 800dc18:	5c8a      	ldrb	r2, [r1, r2]
 800dc1a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	799b      	ldrb	r3, [r3, #6]
 800dc20:	73fb      	strb	r3, [r7, #15]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	330e      	adds	r3, #14
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	4619      	mov	r1, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	3306      	adds	r3, #6
 800dc2e:	4a19      	ldr	r2, [pc, #100]	@ (800dc94 <shift_sub_rows+0x130>)
 800dc30:	5c52      	ldrb	r2, [r2, r1]
 800dc32:	701a      	strb	r2, [r3, #0]
 800dc34:	7bfa      	ldrb	r2, [r7, #15]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	330e      	adds	r3, #14
 800dc3a:	4916      	ldr	r1, [pc, #88]	@ (800dc94 <shift_sub_rows+0x130>)
 800dc3c:	5c8a      	ldrb	r2, [r1, r2]
 800dc3e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	7bdb      	ldrb	r3, [r3, #15]
 800dc44:	73fb      	strb	r3, [r7, #15]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	330b      	adds	r3, #11
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	330f      	adds	r3, #15
 800dc52:	4a10      	ldr	r2, [pc, #64]	@ (800dc94 <shift_sub_rows+0x130>)
 800dc54:	5c52      	ldrb	r2, [r2, r1]
 800dc56:	701a      	strb	r2, [r3, #0]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	3307      	adds	r3, #7
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	4619      	mov	r1, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	330b      	adds	r3, #11
 800dc64:	4a0b      	ldr	r2, [pc, #44]	@ (800dc94 <shift_sub_rows+0x130>)
 800dc66:	5c52      	ldrb	r2, [r2, r1]
 800dc68:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	3303      	adds	r3, #3
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	4619      	mov	r1, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	3307      	adds	r3, #7
 800dc76:	4a07      	ldr	r2, [pc, #28]	@ (800dc94 <shift_sub_rows+0x130>)
 800dc78:	5c52      	ldrb	r2, [r2, r1]
 800dc7a:	701a      	strb	r2, [r3, #0]
 800dc7c:	7bfa      	ldrb	r2, [r7, #15]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	3303      	adds	r3, #3
 800dc82:	4904      	ldr	r1, [pc, #16]	@ (800dc94 <shift_sub_rows+0x130>)
 800dc84:	5c8a      	ldrb	r2, [r1, r2]
 800dc86:	701a      	strb	r2, [r3, #0]
}
 800dc88:	bf00      	nop
 800dc8a:	3714      	adds	r7, #20
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bc80      	pop	{r7}
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop
 800dc94:	08012780 	.word	0x08012780

0800dc98 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b086      	sub	sp, #24
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800dca0:	f107 0308 	add.w	r3, r7, #8
 800dca4:	6879      	ldr	r1, [r7, #4]
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7ff fd6c 	bl	800d784 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800dcac:	7a3b      	ldrb	r3, [r7, #8]
 800dcae:	461a      	mov	r2, r3
 800dcb0:	4b9a      	ldr	r3, [pc, #616]	@ (800df1c <mix_sub_columns+0x284>)
 800dcb2:	5c9a      	ldrb	r2, [r3, r2]
 800dcb4:	7b7b      	ldrb	r3, [r7, #13]
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	4b99      	ldr	r3, [pc, #612]	@ (800df20 <mix_sub_columns+0x288>)
 800dcba:	5c5b      	ldrb	r3, [r3, r1]
 800dcbc:	4053      	eors	r3, r2
 800dcbe:	b2da      	uxtb	r2, r3
 800dcc0:	7cbb      	ldrb	r3, [r7, #18]
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	4b97      	ldr	r3, [pc, #604]	@ (800df24 <mix_sub_columns+0x28c>)
 800dcc6:	5c5b      	ldrb	r3, [r3, r1]
 800dcc8:	4053      	eors	r3, r2
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	7dfb      	ldrb	r3, [r7, #23]
 800dcce:	4619      	mov	r1, r3
 800dcd0:	4b94      	ldr	r3, [pc, #592]	@ (800df24 <mix_sub_columns+0x28c>)
 800dcd2:	5c5b      	ldrb	r3, [r3, r1]
 800dcd4:	4053      	eors	r3, r2
 800dcd6:	b2da      	uxtb	r2, r3
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800dcdc:	7a3b      	ldrb	r3, [r7, #8]
 800dcde:	461a      	mov	r2, r3
 800dce0:	4b90      	ldr	r3, [pc, #576]	@ (800df24 <mix_sub_columns+0x28c>)
 800dce2:	5c9a      	ldrb	r2, [r3, r2]
 800dce4:	7b7b      	ldrb	r3, [r7, #13]
 800dce6:	4619      	mov	r1, r3
 800dce8:	4b8c      	ldr	r3, [pc, #560]	@ (800df1c <mix_sub_columns+0x284>)
 800dcea:	5c5b      	ldrb	r3, [r3, r1]
 800dcec:	4053      	eors	r3, r2
 800dcee:	b2da      	uxtb	r2, r3
 800dcf0:	7cbb      	ldrb	r3, [r7, #18]
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	4b8a      	ldr	r3, [pc, #552]	@ (800df20 <mix_sub_columns+0x288>)
 800dcf6:	5c5b      	ldrb	r3, [r3, r1]
 800dcf8:	4053      	eors	r3, r2
 800dcfa:	b2d9      	uxtb	r1, r3
 800dcfc:	7dfb      	ldrb	r3, [r7, #23]
 800dcfe:	461a      	mov	r2, r3
 800dd00:	4b88      	ldr	r3, [pc, #544]	@ (800df24 <mix_sub_columns+0x28c>)
 800dd02:	5c9a      	ldrb	r2, [r3, r2]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	3301      	adds	r3, #1
 800dd08:	404a      	eors	r2, r1
 800dd0a:	b2d2      	uxtb	r2, r2
 800dd0c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800dd0e:	7a3b      	ldrb	r3, [r7, #8]
 800dd10:	461a      	mov	r2, r3
 800dd12:	4b84      	ldr	r3, [pc, #528]	@ (800df24 <mix_sub_columns+0x28c>)
 800dd14:	5c9a      	ldrb	r2, [r3, r2]
 800dd16:	7b7b      	ldrb	r3, [r7, #13]
 800dd18:	4619      	mov	r1, r3
 800dd1a:	4b82      	ldr	r3, [pc, #520]	@ (800df24 <mix_sub_columns+0x28c>)
 800dd1c:	5c5b      	ldrb	r3, [r3, r1]
 800dd1e:	4053      	eors	r3, r2
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	7cbb      	ldrb	r3, [r7, #18]
 800dd24:	4619      	mov	r1, r3
 800dd26:	4b7d      	ldr	r3, [pc, #500]	@ (800df1c <mix_sub_columns+0x284>)
 800dd28:	5c5b      	ldrb	r3, [r3, r1]
 800dd2a:	4053      	eors	r3, r2
 800dd2c:	b2d9      	uxtb	r1, r3
 800dd2e:	7dfb      	ldrb	r3, [r7, #23]
 800dd30:	461a      	mov	r2, r3
 800dd32:	4b7b      	ldr	r3, [pc, #492]	@ (800df20 <mix_sub_columns+0x288>)
 800dd34:	5c9a      	ldrb	r2, [r3, r2]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	3302      	adds	r3, #2
 800dd3a:	404a      	eors	r2, r1
 800dd3c:	b2d2      	uxtb	r2, r2
 800dd3e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800dd40:	7a3b      	ldrb	r3, [r7, #8]
 800dd42:	461a      	mov	r2, r3
 800dd44:	4b76      	ldr	r3, [pc, #472]	@ (800df20 <mix_sub_columns+0x288>)
 800dd46:	5c9a      	ldrb	r2, [r3, r2]
 800dd48:	7b7b      	ldrb	r3, [r7, #13]
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	4b75      	ldr	r3, [pc, #468]	@ (800df24 <mix_sub_columns+0x28c>)
 800dd4e:	5c5b      	ldrb	r3, [r3, r1]
 800dd50:	4053      	eors	r3, r2
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	7cbb      	ldrb	r3, [r7, #18]
 800dd56:	4619      	mov	r1, r3
 800dd58:	4b72      	ldr	r3, [pc, #456]	@ (800df24 <mix_sub_columns+0x28c>)
 800dd5a:	5c5b      	ldrb	r3, [r3, r1]
 800dd5c:	4053      	eors	r3, r2
 800dd5e:	b2d9      	uxtb	r1, r3
 800dd60:	7dfb      	ldrb	r3, [r7, #23]
 800dd62:	461a      	mov	r2, r3
 800dd64:	4b6d      	ldr	r3, [pc, #436]	@ (800df1c <mix_sub_columns+0x284>)
 800dd66:	5c9a      	ldrb	r2, [r3, r2]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	3303      	adds	r3, #3
 800dd6c:	404a      	eors	r2, r1
 800dd6e:	b2d2      	uxtb	r2, r2
 800dd70:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800dd72:	7b3b      	ldrb	r3, [r7, #12]
 800dd74:	461a      	mov	r2, r3
 800dd76:	4b69      	ldr	r3, [pc, #420]	@ (800df1c <mix_sub_columns+0x284>)
 800dd78:	5c9a      	ldrb	r2, [r3, r2]
 800dd7a:	7c7b      	ldrb	r3, [r7, #17]
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	4b68      	ldr	r3, [pc, #416]	@ (800df20 <mix_sub_columns+0x288>)
 800dd80:	5c5b      	ldrb	r3, [r3, r1]
 800dd82:	4053      	eors	r3, r2
 800dd84:	b2da      	uxtb	r2, r3
 800dd86:	7dbb      	ldrb	r3, [r7, #22]
 800dd88:	4619      	mov	r1, r3
 800dd8a:	4b66      	ldr	r3, [pc, #408]	@ (800df24 <mix_sub_columns+0x28c>)
 800dd8c:	5c5b      	ldrb	r3, [r3, r1]
 800dd8e:	4053      	eors	r3, r2
 800dd90:	b2d9      	uxtb	r1, r3
 800dd92:	7afb      	ldrb	r3, [r7, #11]
 800dd94:	461a      	mov	r2, r3
 800dd96:	4b63      	ldr	r3, [pc, #396]	@ (800df24 <mix_sub_columns+0x28c>)
 800dd98:	5c9a      	ldrb	r2, [r3, r2]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	3304      	adds	r3, #4
 800dd9e:	404a      	eors	r2, r1
 800dda0:	b2d2      	uxtb	r2, r2
 800dda2:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800dda4:	7b3b      	ldrb	r3, [r7, #12]
 800dda6:	461a      	mov	r2, r3
 800dda8:	4b5e      	ldr	r3, [pc, #376]	@ (800df24 <mix_sub_columns+0x28c>)
 800ddaa:	5c9a      	ldrb	r2, [r3, r2]
 800ddac:	7c7b      	ldrb	r3, [r7, #17]
 800ddae:	4619      	mov	r1, r3
 800ddb0:	4b5a      	ldr	r3, [pc, #360]	@ (800df1c <mix_sub_columns+0x284>)
 800ddb2:	5c5b      	ldrb	r3, [r3, r1]
 800ddb4:	4053      	eors	r3, r2
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	7dbb      	ldrb	r3, [r7, #22]
 800ddba:	4619      	mov	r1, r3
 800ddbc:	4b58      	ldr	r3, [pc, #352]	@ (800df20 <mix_sub_columns+0x288>)
 800ddbe:	5c5b      	ldrb	r3, [r3, r1]
 800ddc0:	4053      	eors	r3, r2
 800ddc2:	b2d9      	uxtb	r1, r3
 800ddc4:	7afb      	ldrb	r3, [r7, #11]
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	4b56      	ldr	r3, [pc, #344]	@ (800df24 <mix_sub_columns+0x28c>)
 800ddca:	5c9a      	ldrb	r2, [r3, r2]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	3305      	adds	r3, #5
 800ddd0:	404a      	eors	r2, r1
 800ddd2:	b2d2      	uxtb	r2, r2
 800ddd4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800ddd6:	7b3b      	ldrb	r3, [r7, #12]
 800ddd8:	461a      	mov	r2, r3
 800ddda:	4b52      	ldr	r3, [pc, #328]	@ (800df24 <mix_sub_columns+0x28c>)
 800dddc:	5c9a      	ldrb	r2, [r3, r2]
 800ddde:	7c7b      	ldrb	r3, [r7, #17]
 800dde0:	4619      	mov	r1, r3
 800dde2:	4b50      	ldr	r3, [pc, #320]	@ (800df24 <mix_sub_columns+0x28c>)
 800dde4:	5c5b      	ldrb	r3, [r3, r1]
 800dde6:	4053      	eors	r3, r2
 800dde8:	b2da      	uxtb	r2, r3
 800ddea:	7dbb      	ldrb	r3, [r7, #22]
 800ddec:	4619      	mov	r1, r3
 800ddee:	4b4b      	ldr	r3, [pc, #300]	@ (800df1c <mix_sub_columns+0x284>)
 800ddf0:	5c5b      	ldrb	r3, [r3, r1]
 800ddf2:	4053      	eors	r3, r2
 800ddf4:	b2d9      	uxtb	r1, r3
 800ddf6:	7afb      	ldrb	r3, [r7, #11]
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	4b49      	ldr	r3, [pc, #292]	@ (800df20 <mix_sub_columns+0x288>)
 800ddfc:	5c9a      	ldrb	r2, [r3, r2]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	3306      	adds	r3, #6
 800de02:	404a      	eors	r2, r1
 800de04:	b2d2      	uxtb	r2, r2
 800de06:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800de08:	7b3b      	ldrb	r3, [r7, #12]
 800de0a:	461a      	mov	r2, r3
 800de0c:	4b44      	ldr	r3, [pc, #272]	@ (800df20 <mix_sub_columns+0x288>)
 800de0e:	5c9a      	ldrb	r2, [r3, r2]
 800de10:	7c7b      	ldrb	r3, [r7, #17]
 800de12:	4619      	mov	r1, r3
 800de14:	4b43      	ldr	r3, [pc, #268]	@ (800df24 <mix_sub_columns+0x28c>)
 800de16:	5c5b      	ldrb	r3, [r3, r1]
 800de18:	4053      	eors	r3, r2
 800de1a:	b2da      	uxtb	r2, r3
 800de1c:	7dbb      	ldrb	r3, [r7, #22]
 800de1e:	4619      	mov	r1, r3
 800de20:	4b40      	ldr	r3, [pc, #256]	@ (800df24 <mix_sub_columns+0x28c>)
 800de22:	5c5b      	ldrb	r3, [r3, r1]
 800de24:	4053      	eors	r3, r2
 800de26:	b2d9      	uxtb	r1, r3
 800de28:	7afb      	ldrb	r3, [r7, #11]
 800de2a:	461a      	mov	r2, r3
 800de2c:	4b3b      	ldr	r3, [pc, #236]	@ (800df1c <mix_sub_columns+0x284>)
 800de2e:	5c9a      	ldrb	r2, [r3, r2]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	3307      	adds	r3, #7
 800de34:	404a      	eors	r2, r1
 800de36:	b2d2      	uxtb	r2, r2
 800de38:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800de3a:	7c3b      	ldrb	r3, [r7, #16]
 800de3c:	461a      	mov	r2, r3
 800de3e:	4b37      	ldr	r3, [pc, #220]	@ (800df1c <mix_sub_columns+0x284>)
 800de40:	5c9a      	ldrb	r2, [r3, r2]
 800de42:	7d7b      	ldrb	r3, [r7, #21]
 800de44:	4619      	mov	r1, r3
 800de46:	4b36      	ldr	r3, [pc, #216]	@ (800df20 <mix_sub_columns+0x288>)
 800de48:	5c5b      	ldrb	r3, [r3, r1]
 800de4a:	4053      	eors	r3, r2
 800de4c:	b2da      	uxtb	r2, r3
 800de4e:	7abb      	ldrb	r3, [r7, #10]
 800de50:	4619      	mov	r1, r3
 800de52:	4b34      	ldr	r3, [pc, #208]	@ (800df24 <mix_sub_columns+0x28c>)
 800de54:	5c5b      	ldrb	r3, [r3, r1]
 800de56:	4053      	eors	r3, r2
 800de58:	b2d9      	uxtb	r1, r3
 800de5a:	7bfb      	ldrb	r3, [r7, #15]
 800de5c:	461a      	mov	r2, r3
 800de5e:	4b31      	ldr	r3, [pc, #196]	@ (800df24 <mix_sub_columns+0x28c>)
 800de60:	5c9a      	ldrb	r2, [r3, r2]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	3308      	adds	r3, #8
 800de66:	404a      	eors	r2, r1
 800de68:	b2d2      	uxtb	r2, r2
 800de6a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800de6c:	7c3b      	ldrb	r3, [r7, #16]
 800de6e:	461a      	mov	r2, r3
 800de70:	4b2c      	ldr	r3, [pc, #176]	@ (800df24 <mix_sub_columns+0x28c>)
 800de72:	5c9a      	ldrb	r2, [r3, r2]
 800de74:	7d7b      	ldrb	r3, [r7, #21]
 800de76:	4619      	mov	r1, r3
 800de78:	4b28      	ldr	r3, [pc, #160]	@ (800df1c <mix_sub_columns+0x284>)
 800de7a:	5c5b      	ldrb	r3, [r3, r1]
 800de7c:	4053      	eors	r3, r2
 800de7e:	b2da      	uxtb	r2, r3
 800de80:	7abb      	ldrb	r3, [r7, #10]
 800de82:	4619      	mov	r1, r3
 800de84:	4b26      	ldr	r3, [pc, #152]	@ (800df20 <mix_sub_columns+0x288>)
 800de86:	5c5b      	ldrb	r3, [r3, r1]
 800de88:	4053      	eors	r3, r2
 800de8a:	b2d9      	uxtb	r1, r3
 800de8c:	7bfb      	ldrb	r3, [r7, #15]
 800de8e:	461a      	mov	r2, r3
 800de90:	4b24      	ldr	r3, [pc, #144]	@ (800df24 <mix_sub_columns+0x28c>)
 800de92:	5c9a      	ldrb	r2, [r3, r2]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	3309      	adds	r3, #9
 800de98:	404a      	eors	r2, r1
 800de9a:	b2d2      	uxtb	r2, r2
 800de9c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800de9e:	7c3b      	ldrb	r3, [r7, #16]
 800dea0:	461a      	mov	r2, r3
 800dea2:	4b20      	ldr	r3, [pc, #128]	@ (800df24 <mix_sub_columns+0x28c>)
 800dea4:	5c9a      	ldrb	r2, [r3, r2]
 800dea6:	7d7b      	ldrb	r3, [r7, #21]
 800dea8:	4619      	mov	r1, r3
 800deaa:	4b1e      	ldr	r3, [pc, #120]	@ (800df24 <mix_sub_columns+0x28c>)
 800deac:	5c5b      	ldrb	r3, [r3, r1]
 800deae:	4053      	eors	r3, r2
 800deb0:	b2da      	uxtb	r2, r3
 800deb2:	7abb      	ldrb	r3, [r7, #10]
 800deb4:	4619      	mov	r1, r3
 800deb6:	4b19      	ldr	r3, [pc, #100]	@ (800df1c <mix_sub_columns+0x284>)
 800deb8:	5c5b      	ldrb	r3, [r3, r1]
 800deba:	4053      	eors	r3, r2
 800debc:	b2d9      	uxtb	r1, r3
 800debe:	7bfb      	ldrb	r3, [r7, #15]
 800dec0:	461a      	mov	r2, r3
 800dec2:	4b17      	ldr	r3, [pc, #92]	@ (800df20 <mix_sub_columns+0x288>)
 800dec4:	5c9a      	ldrb	r2, [r3, r2]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	330a      	adds	r3, #10
 800deca:	404a      	eors	r2, r1
 800decc:	b2d2      	uxtb	r2, r2
 800dece:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ded0:	7c3b      	ldrb	r3, [r7, #16]
 800ded2:	461a      	mov	r2, r3
 800ded4:	4b12      	ldr	r3, [pc, #72]	@ (800df20 <mix_sub_columns+0x288>)
 800ded6:	5c9a      	ldrb	r2, [r3, r2]
 800ded8:	7d7b      	ldrb	r3, [r7, #21]
 800deda:	4619      	mov	r1, r3
 800dedc:	4b11      	ldr	r3, [pc, #68]	@ (800df24 <mix_sub_columns+0x28c>)
 800dede:	5c5b      	ldrb	r3, [r3, r1]
 800dee0:	4053      	eors	r3, r2
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	7abb      	ldrb	r3, [r7, #10]
 800dee6:	4619      	mov	r1, r3
 800dee8:	4b0e      	ldr	r3, [pc, #56]	@ (800df24 <mix_sub_columns+0x28c>)
 800deea:	5c5b      	ldrb	r3, [r3, r1]
 800deec:	4053      	eors	r3, r2
 800deee:	b2d9      	uxtb	r1, r3
 800def0:	7bfb      	ldrb	r3, [r7, #15]
 800def2:	461a      	mov	r2, r3
 800def4:	4b09      	ldr	r3, [pc, #36]	@ (800df1c <mix_sub_columns+0x284>)
 800def6:	5c9a      	ldrb	r2, [r3, r2]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	330b      	adds	r3, #11
 800defc:	404a      	eors	r2, r1
 800defe:	b2d2      	uxtb	r2, r2
 800df00:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800df02:	7d3b      	ldrb	r3, [r7, #20]
 800df04:	461a      	mov	r2, r3
 800df06:	4b05      	ldr	r3, [pc, #20]	@ (800df1c <mix_sub_columns+0x284>)
 800df08:	5c9a      	ldrb	r2, [r3, r2]
 800df0a:	7a7b      	ldrb	r3, [r7, #9]
 800df0c:	4619      	mov	r1, r3
 800df0e:	4b04      	ldr	r3, [pc, #16]	@ (800df20 <mix_sub_columns+0x288>)
 800df10:	5c5b      	ldrb	r3, [r3, r1]
 800df12:	4053      	eors	r3, r2
 800df14:	b2da      	uxtb	r2, r3
 800df16:	7bbb      	ldrb	r3, [r7, #14]
 800df18:	4619      	mov	r1, r3
 800df1a:	e005      	b.n	800df28 <mix_sub_columns+0x290>
 800df1c:	08012880 	.word	0x08012880
 800df20:	08012980 	.word	0x08012980
 800df24:	08012780 	.word	0x08012780
 800df28:	4b2d      	ldr	r3, [pc, #180]	@ (800dfe0 <mix_sub_columns+0x348>)
 800df2a:	5c5b      	ldrb	r3, [r3, r1]
 800df2c:	4053      	eors	r3, r2
 800df2e:	b2d9      	uxtb	r1, r3
 800df30:	7cfb      	ldrb	r3, [r7, #19]
 800df32:	461a      	mov	r2, r3
 800df34:	4b2a      	ldr	r3, [pc, #168]	@ (800dfe0 <mix_sub_columns+0x348>)
 800df36:	5c9a      	ldrb	r2, [r3, r2]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	330c      	adds	r3, #12
 800df3c:	404a      	eors	r2, r1
 800df3e:	b2d2      	uxtb	r2, r2
 800df40:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800df42:	7d3b      	ldrb	r3, [r7, #20]
 800df44:	461a      	mov	r2, r3
 800df46:	4b26      	ldr	r3, [pc, #152]	@ (800dfe0 <mix_sub_columns+0x348>)
 800df48:	5c9a      	ldrb	r2, [r3, r2]
 800df4a:	7a7b      	ldrb	r3, [r7, #9]
 800df4c:	4619      	mov	r1, r3
 800df4e:	4b25      	ldr	r3, [pc, #148]	@ (800dfe4 <mix_sub_columns+0x34c>)
 800df50:	5c5b      	ldrb	r3, [r3, r1]
 800df52:	4053      	eors	r3, r2
 800df54:	b2da      	uxtb	r2, r3
 800df56:	7bbb      	ldrb	r3, [r7, #14]
 800df58:	4619      	mov	r1, r3
 800df5a:	4b23      	ldr	r3, [pc, #140]	@ (800dfe8 <mix_sub_columns+0x350>)
 800df5c:	5c5b      	ldrb	r3, [r3, r1]
 800df5e:	4053      	eors	r3, r2
 800df60:	b2d9      	uxtb	r1, r3
 800df62:	7cfb      	ldrb	r3, [r7, #19]
 800df64:	461a      	mov	r2, r3
 800df66:	4b1e      	ldr	r3, [pc, #120]	@ (800dfe0 <mix_sub_columns+0x348>)
 800df68:	5c9a      	ldrb	r2, [r3, r2]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	330d      	adds	r3, #13
 800df6e:	404a      	eors	r2, r1
 800df70:	b2d2      	uxtb	r2, r2
 800df72:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800df74:	7d3b      	ldrb	r3, [r7, #20]
 800df76:	461a      	mov	r2, r3
 800df78:	4b19      	ldr	r3, [pc, #100]	@ (800dfe0 <mix_sub_columns+0x348>)
 800df7a:	5c9a      	ldrb	r2, [r3, r2]
 800df7c:	7a7b      	ldrb	r3, [r7, #9]
 800df7e:	4619      	mov	r1, r3
 800df80:	4b17      	ldr	r3, [pc, #92]	@ (800dfe0 <mix_sub_columns+0x348>)
 800df82:	5c5b      	ldrb	r3, [r3, r1]
 800df84:	4053      	eors	r3, r2
 800df86:	b2da      	uxtb	r2, r3
 800df88:	7bbb      	ldrb	r3, [r7, #14]
 800df8a:	4619      	mov	r1, r3
 800df8c:	4b15      	ldr	r3, [pc, #84]	@ (800dfe4 <mix_sub_columns+0x34c>)
 800df8e:	5c5b      	ldrb	r3, [r3, r1]
 800df90:	4053      	eors	r3, r2
 800df92:	b2d9      	uxtb	r1, r3
 800df94:	7cfb      	ldrb	r3, [r7, #19]
 800df96:	461a      	mov	r2, r3
 800df98:	4b13      	ldr	r3, [pc, #76]	@ (800dfe8 <mix_sub_columns+0x350>)
 800df9a:	5c9a      	ldrb	r2, [r3, r2]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	330e      	adds	r3, #14
 800dfa0:	404a      	eors	r2, r1
 800dfa2:	b2d2      	uxtb	r2, r2
 800dfa4:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800dfa6:	7d3b      	ldrb	r3, [r7, #20]
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	4b0f      	ldr	r3, [pc, #60]	@ (800dfe8 <mix_sub_columns+0x350>)
 800dfac:	5c9a      	ldrb	r2, [r3, r2]
 800dfae:	7a7b      	ldrb	r3, [r7, #9]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	4b0b      	ldr	r3, [pc, #44]	@ (800dfe0 <mix_sub_columns+0x348>)
 800dfb4:	5c5b      	ldrb	r3, [r3, r1]
 800dfb6:	4053      	eors	r3, r2
 800dfb8:	b2da      	uxtb	r2, r3
 800dfba:	7bbb      	ldrb	r3, [r7, #14]
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	4b08      	ldr	r3, [pc, #32]	@ (800dfe0 <mix_sub_columns+0x348>)
 800dfc0:	5c5b      	ldrb	r3, [r3, r1]
 800dfc2:	4053      	eors	r3, r2
 800dfc4:	b2d9      	uxtb	r1, r3
 800dfc6:	7cfb      	ldrb	r3, [r7, #19]
 800dfc8:	461a      	mov	r2, r3
 800dfca:	4b06      	ldr	r3, [pc, #24]	@ (800dfe4 <mix_sub_columns+0x34c>)
 800dfcc:	5c9a      	ldrb	r2, [r3, r2]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	330f      	adds	r3, #15
 800dfd2:	404a      	eors	r2, r1
 800dfd4:	b2d2      	uxtb	r2, r2
 800dfd6:	701a      	strb	r2, [r3, #0]
  }
 800dfd8:	bf00      	nop
 800dfda:	3718      	adds	r7, #24
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	08012780 	.word	0x08012780
 800dfe4:	08012880 	.word	0x08012880
 800dfe8:	08012980 	.word	0x08012980

0800dfec <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b086      	sub	sp, #24
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	460b      	mov	r3, r1
 800dff6:	607a      	str	r2, [r7, #4]
 800dff8:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800dffa:	7afb      	ldrb	r3, [r7, #11]
 800dffc:	3b10      	subs	r3, #16
 800dffe:	2b10      	cmp	r3, #16
 800e000:	bf8c      	ite	hi
 800e002:	2201      	movhi	r2, #1
 800e004:	2200      	movls	r2, #0
 800e006:	b2d2      	uxtb	r2, r2
 800e008:	2a00      	cmp	r2, #0
 800e00a:	d10b      	bne.n	800e024 <lorawan_aes_set_key+0x38>
 800e00c:	4a64      	ldr	r2, [pc, #400]	@ (800e1a0 <lorawan_aes_set_key+0x1b4>)
 800e00e:	fa22 f303 	lsr.w	r3, r2, r3
 800e012:	f003 0301 	and.w	r3, r3, #1
 800e016:	2b00      	cmp	r3, #0
 800e018:	bf14      	ite	ne
 800e01a:	2301      	movne	r3, #1
 800e01c:	2300      	moveq	r3, #0
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	2b00      	cmp	r3, #0
 800e022:	d105      	bne.n	800e030 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800e02c:	23ff      	movs	r3, #255	@ 0xff
 800e02e:	e0b2      	b.n	800e196 <lorawan_aes_set_key+0x1aa>
        break;
 800e030:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	7afa      	ldrb	r2, [r7, #11]
 800e036:	68f9      	ldr	r1, [r7, #12]
 800e038:	4618      	mov	r0, r3
 800e03a:	f7ff fbfc 	bl	800d836 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e03e:	7afb      	ldrb	r3, [r7, #11]
 800e040:	331c      	adds	r3, #28
 800e042:	b2db      	uxtb	r3, r3
 800e044:	009b      	lsls	r3, r3, #2
 800e046:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800e048:	7c7b      	ldrb	r3, [r7, #17]
 800e04a:	091b      	lsrs	r3, r3, #4
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	3b01      	subs	r3, #1
 800e050:	b2da      	uxtb	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e058:	7afb      	ldrb	r3, [r7, #11]
 800e05a:	75fb      	strb	r3, [r7, #23]
 800e05c:	2301      	movs	r3, #1
 800e05e:	75bb      	strb	r3, [r7, #22]
 800e060:	e093      	b.n	800e18a <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800e062:	7dfb      	ldrb	r3, [r7, #23]
 800e064:	3b04      	subs	r3, #4
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	5cd3      	ldrb	r3, [r2, r3]
 800e06a:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800e06c:	7dfb      	ldrb	r3, [r7, #23]
 800e06e:	3b03      	subs	r3, #3
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	5cd3      	ldrb	r3, [r2, r3]
 800e074:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800e076:	7dfb      	ldrb	r3, [r7, #23]
 800e078:	3b02      	subs	r3, #2
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	5cd3      	ldrb	r3, [r2, r3]
 800e07e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800e080:	7dfb      	ldrb	r3, [r7, #23]
 800e082:	3b01      	subs	r3, #1
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	5cd3      	ldrb	r3, [r2, r3]
 800e088:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800e08a:	7dfb      	ldrb	r3, [r7, #23]
 800e08c:	7afa      	ldrb	r2, [r7, #11]
 800e08e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e092:	fb01 f202 	mul.w	r2, r1, r2
 800e096:	1a9b      	subs	r3, r3, r2
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d127      	bne.n	800e0ee <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800e09e:	7d7b      	ldrb	r3, [r7, #21]
 800e0a0:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800e0a2:	7d3b      	ldrb	r3, [r7, #20]
 800e0a4:	4a3f      	ldr	r2, [pc, #252]	@ (800e1a4 <lorawan_aes_set_key+0x1b8>)
 800e0a6:	5cd2      	ldrb	r2, [r2, r3]
 800e0a8:	7dbb      	ldrb	r3, [r7, #22]
 800e0aa:	4053      	eors	r3, r2
 800e0ac:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800e0ae:	7cfb      	ldrb	r3, [r7, #19]
 800e0b0:	4a3c      	ldr	r2, [pc, #240]	@ (800e1a4 <lorawan_aes_set_key+0x1b8>)
 800e0b2:	5cd3      	ldrb	r3, [r2, r3]
 800e0b4:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800e0b6:	7cbb      	ldrb	r3, [r7, #18]
 800e0b8:	4a3a      	ldr	r2, [pc, #232]	@ (800e1a4 <lorawan_aes_set_key+0x1b8>)
 800e0ba:	5cd3      	ldrb	r3, [r2, r3]
 800e0bc:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800e0be:	7c3b      	ldrb	r3, [r7, #16]
 800e0c0:	4a38      	ldr	r2, [pc, #224]	@ (800e1a4 <lorawan_aes_set_key+0x1b8>)
 800e0c2:	5cd3      	ldrb	r3, [r2, r3]
 800e0c4:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800e0c6:	7dbb      	ldrb	r3, [r7, #22]
 800e0c8:	005b      	lsls	r3, r3, #1
 800e0ca:	b25a      	sxtb	r2, r3
 800e0cc:	7dbb      	ldrb	r3, [r7, #22]
 800e0ce:	09db      	lsrs	r3, r3, #7
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	0049      	lsls	r1, r1, #1
 800e0d6:	440b      	add	r3, r1
 800e0d8:	4619      	mov	r1, r3
 800e0da:	00c8      	lsls	r0, r1, #3
 800e0dc:	4619      	mov	r1, r3
 800e0de:	4603      	mov	r3, r0
 800e0e0:	440b      	add	r3, r1
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	b25b      	sxtb	r3, r3
 800e0e6:	4053      	eors	r3, r2
 800e0e8:	b25b      	sxtb	r3, r3
 800e0ea:	75bb      	strb	r3, [r7, #22]
 800e0ec:	e01c      	b.n	800e128 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800e0ee:	7afb      	ldrb	r3, [r7, #11]
 800e0f0:	2b18      	cmp	r3, #24
 800e0f2:	d919      	bls.n	800e128 <lorawan_aes_set_key+0x13c>
 800e0f4:	7dfb      	ldrb	r3, [r7, #23]
 800e0f6:	7afa      	ldrb	r2, [r7, #11]
 800e0f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0fc:	fb01 f202 	mul.w	r2, r1, r2
 800e100:	1a9b      	subs	r3, r3, r2
 800e102:	b2db      	uxtb	r3, r3
 800e104:	2b10      	cmp	r3, #16
 800e106:	d10f      	bne.n	800e128 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800e108:	7d7b      	ldrb	r3, [r7, #21]
 800e10a:	4a26      	ldr	r2, [pc, #152]	@ (800e1a4 <lorawan_aes_set_key+0x1b8>)
 800e10c:	5cd3      	ldrb	r3, [r2, r3]
 800e10e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800e110:	7d3b      	ldrb	r3, [r7, #20]
 800e112:	4a24      	ldr	r2, [pc, #144]	@ (800e1a4 <lorawan_aes_set_key+0x1b8>)
 800e114:	5cd3      	ldrb	r3, [r2, r3]
 800e116:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800e118:	7cfb      	ldrb	r3, [r7, #19]
 800e11a:	4a22      	ldr	r2, [pc, #136]	@ (800e1a4 <lorawan_aes_set_key+0x1b8>)
 800e11c:	5cd3      	ldrb	r3, [r2, r3]
 800e11e:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800e120:	7cbb      	ldrb	r3, [r7, #18]
 800e122:	4a20      	ldr	r2, [pc, #128]	@ (800e1a4 <lorawan_aes_set_key+0x1b8>)
 800e124:	5cd3      	ldrb	r3, [r2, r3]
 800e126:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800e128:	7dfa      	ldrb	r2, [r7, #23]
 800e12a:	7afb      	ldrb	r3, [r7, #11]
 800e12c:	1ad3      	subs	r3, r2, r3
 800e12e:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e130:	7c3b      	ldrb	r3, [r7, #16]
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	5cd1      	ldrb	r1, [r2, r3]
 800e136:	7dfb      	ldrb	r3, [r7, #23]
 800e138:	7d7a      	ldrb	r2, [r7, #21]
 800e13a:	404a      	eors	r2, r1
 800e13c:	b2d1      	uxtb	r1, r2
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e142:	7c3b      	ldrb	r3, [r7, #16]
 800e144:	3301      	adds	r3, #1
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	5cd1      	ldrb	r1, [r2, r3]
 800e14a:	7dfb      	ldrb	r3, [r7, #23]
 800e14c:	3301      	adds	r3, #1
 800e14e:	7d3a      	ldrb	r2, [r7, #20]
 800e150:	404a      	eors	r2, r1
 800e152:	b2d1      	uxtb	r1, r2
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e158:	7c3b      	ldrb	r3, [r7, #16]
 800e15a:	3302      	adds	r3, #2
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	5cd1      	ldrb	r1, [r2, r3]
 800e160:	7dfb      	ldrb	r3, [r7, #23]
 800e162:	3302      	adds	r3, #2
 800e164:	7cfa      	ldrb	r2, [r7, #19]
 800e166:	404a      	eors	r2, r1
 800e168:	b2d1      	uxtb	r1, r2
 800e16a:	687a      	ldr	r2, [r7, #4]
 800e16c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e16e:	7c3b      	ldrb	r3, [r7, #16]
 800e170:	3303      	adds	r3, #3
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	5cd1      	ldrb	r1, [r2, r3]
 800e176:	7dfb      	ldrb	r3, [r7, #23]
 800e178:	3303      	adds	r3, #3
 800e17a:	7cba      	ldrb	r2, [r7, #18]
 800e17c:	404a      	eors	r2, r1
 800e17e:	b2d1      	uxtb	r1, r2
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e184:	7dfb      	ldrb	r3, [r7, #23]
 800e186:	3304      	adds	r3, #4
 800e188:	75fb      	strb	r3, [r7, #23]
 800e18a:	7dfa      	ldrb	r2, [r7, #23]
 800e18c:	7c7b      	ldrb	r3, [r7, #17]
 800e18e:	429a      	cmp	r2, r3
 800e190:	f4ff af67 	bcc.w	800e062 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800e194:	2300      	movs	r3, #0
}
 800e196:	4618      	mov	r0, r3
 800e198:	3718      	adds	r7, #24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	00010101 	.word	0x00010101
 800e1a4:	08012780 	.word	0x08012780

0800e1a8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b08a      	sub	sp, #40	@ 0x28
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d038      	beq.n	800e230 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	f107 0314 	add.w	r3, r7, #20
 800e1c4:	68f9      	ldr	r1, [r7, #12]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7ff fc07 	bl	800d9da <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e1d2:	e014      	b.n	800e1fe <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e1d4:	f107 0314 	add.w	r3, r7, #20
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7ff fd5d 	bl	800dc98 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e1e4:	0112      	lsls	r2, r2, #4
 800e1e6:	441a      	add	r2, r3
 800e1e8:	f107 0314 	add.w	r3, r7, #20
 800e1ec:	4611      	mov	r1, r2
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7ff fcab 	bl	800db4a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e204:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e208:	429a      	cmp	r2, r3
 800e20a:	d3e3      	bcc.n	800e1d4 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e20c:	f107 0314 	add.w	r3, r7, #20
 800e210:	4618      	mov	r0, r3
 800e212:	f7ff fca7 	bl	800db64 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e21c:	0112      	lsls	r2, r2, #4
 800e21e:	441a      	add	r2, r3
 800e220:	f107 0314 	add.w	r3, r7, #20
 800e224:	4619      	mov	r1, r3
 800e226:	68b8      	ldr	r0, [r7, #8]
 800e228:	f7ff fbd7 	bl	800d9da <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e22c:	2300      	movs	r3, #0
 800e22e:	e000      	b.n	800e232 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800e230:	23ff      	movs	r3, #255	@ 0xff
}
 800e232:	4618      	mov	r0, r3
 800e234:	3728      	adds	r7, #40	@ 0x28
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}

0800e23a <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800e23a:	b480      	push	{r7}
 800e23c:	b083      	sub	sp, #12
 800e23e:	af00      	add	r7, sp, #0
 800e240:	4603      	mov	r3, r0
 800e242:	71fb      	strb	r3, [r7, #7]
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800e244:	bf00      	nop
 800e246:	370c      	adds	r7, #12
 800e248:	46bd      	mov	sp, r7
 800e24a:	bc80      	pop	{r7}
 800e24c:	4770      	bx	lr

0800e24e <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800e24e:	b580      	push	{r7, lr}
 800e250:	b088      	sub	sp, #32
 800e252:	af00      	add	r7, sp, #0
 800e254:	4603      	mov	r3, r0
 800e256:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800e258:	2300      	movs	r3, #0
 800e25a:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800e25c:	f107 0310 	add.w	r3, r7, #16
 800e260:	4618      	mov	r0, r3
 800e262:	f000 fa4d 	bl	800e700 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );

    SecureElementGetJoinEui( joinEui );
 800e266:	f107 0318 	add.w	r3, r7, #24
 800e26a:	4618      	mov	r0, r3
 800e26c:	f000 fa78 	bl	800e760 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );

    SecureElementGetDevAddr( mode, &devAddr );
 800e270:	f107 020c 	add.w	r2, r7, #12
 800e274:	79fb      	ldrb	r3, [r7, #7]
 800e276:	4611      	mov	r1, r2
 800e278:	4618      	mov	r0, r3
 800e27a:	f000 faa3 	bl	800e7c4 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800e27e:	bf00      	nop
 800e280:	3720      	adds	r7, #32
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
	...

0800e288 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	4603      	mov	r3, r0
 800e290:	6039      	str	r1, [r7, #0]
 800e292:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e294:	2300      	movs	r3, #0
 800e296:	73fb      	strb	r3, [r7, #15]
 800e298:	e01a      	b.n	800e2d0 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e29a:	4b12      	ldr	r3, [pc, #72]	@ (800e2e4 <GetKeyByID+0x5c>)
 800e29c:	6819      	ldr	r1, [r3, #0]
 800e29e:	7bfa      	ldrb	r2, [r7, #15]
 800e2a0:	4613      	mov	r3, r2
 800e2a2:	011b      	lsls	r3, r3, #4
 800e2a4:	4413      	add	r3, r2
 800e2a6:	440b      	add	r3, r1
 800e2a8:	3318      	adds	r3, #24
 800e2aa:	781b      	ldrb	r3, [r3, #0]
 800e2ac:	79fa      	ldrb	r2, [r7, #7]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d10b      	bne.n	800e2ca <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800e2b2:	4b0c      	ldr	r3, [pc, #48]	@ (800e2e4 <GetKeyByID+0x5c>)
 800e2b4:	6819      	ldr	r1, [r3, #0]
 800e2b6:	7bfa      	ldrb	r2, [r7, #15]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	011b      	lsls	r3, r3, #4
 800e2bc:	4413      	add	r3, r2
 800e2be:	3318      	adds	r3, #24
 800e2c0:	18ca      	adds	r2, r1, r3
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	e006      	b.n	800e2d8 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e2ca:	7bfb      	ldrb	r3, [r7, #15]
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	73fb      	strb	r3, [r7, #15]
 800e2d0:	7bfb      	ldrb	r3, [r7, #15]
 800e2d2:	2b0a      	cmp	r3, #10
 800e2d4:	d9e1      	bls.n	800e29a <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e2d6:	2303      	movs	r3, #3
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3714      	adds	r7, #20
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bc80      	pop	{r7}
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop
 800e2e4:	200012c8 	.word	0x200012c8

0800e2e8 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800e2e8:	b590      	push	{r4, r7, lr}
 800e2ea:	b0d1      	sub	sp, #324	@ 0x144
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800e2f2:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800e2f6:	6020      	str	r0, [r4, #0]
 800e2f8:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800e2fc:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800e300:	6001      	str	r1, [r0, #0]
 800e302:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800e306:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800e30a:	600a      	str	r2, [r1, #0]
 800e30c:	461a      	mov	r2, r3
 800e30e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e312:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800e316:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800e318:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e31c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d003      	beq.n	800e32e <ComputeCmac+0x46>
 800e326:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d101      	bne.n	800e332 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e32e:	2302      	movs	r3, #2
 800e330:	e05d      	b.n	800e3ee <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800e332:	f107 0314 	add.w	r3, r7, #20
 800e336:	4618      	mov	r0, r3
 800e338:	f7fe ffd8 	bl	800d2ec <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800e33c:	f107 0210 	add.w	r2, r7, #16
 800e340:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e344:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	4611      	mov	r1, r2
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7ff ff9b 	bl	800e288 <GetKeyByID>
 800e352:	4603      	mov	r3, r0
 800e354:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e358:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d144      	bne.n	800e3ea <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800e360:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e364:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	1c5a      	adds	r2, r3, #1
 800e36c:	f107 0314 	add.w	r3, r7, #20
 800e370:	4611      	mov	r1, r2
 800e372:	4618      	mov	r0, r3
 800e374:	f7fe ffd3 	bl	800d31e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800e378:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e37c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d009      	beq.n	800e39a <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800e386:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e38a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e38e:	f107 0014 	add.w	r0, r7, #20
 800e392:	2210      	movs	r2, #16
 800e394:	6819      	ldr	r1, [r3, #0]
 800e396:	f7fe ffd1 	bl	800d33c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800e39a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e39e:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800e3a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e3a6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800e3aa:	f107 0014 	add.w	r0, r7, #20
 800e3ae:	6812      	ldr	r2, [r2, #0]
 800e3b0:	6819      	ldr	r1, [r3, #0]
 800e3b2:	f7fe ffc3 	bl	800d33c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800e3b6:	f107 0214 	add.w	r2, r7, #20
 800e3ba:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800e3be:	4611      	mov	r1, r2
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7ff f87d 	bl	800d4c0 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800e3c6:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800e3d0:	021b      	lsls	r3, r3, #8
 800e3d2:	431a      	orrs	r2, r3
 800e3d4:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800e3d8:	041b      	lsls	r3, r3, #16
 800e3da:	431a      	orrs	r2, r3
 800e3dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800e3e0:	061b      	lsls	r3, r3, #24
 800e3e2:	431a      	orrs	r2, r3
 800e3e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800e3e8:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800e3ea:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd90      	pop	{r4, r7, pc}

0800e3f8 <SecureElementPrintSessionKeys>:

    return SECURE_ELEMENT_SUCCESS;
}

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	4603      	mov	r3, r0
 800e400:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800e402:	200b      	movs	r0, #11
 800e404:	f7ff ff19 	bl	800e23a <PrintKey>
    PrintKey( MC_KE_KEY );
 800e408:	200c      	movs	r0, #12
 800e40a:	f7ff ff16 	bl	800e23a <PrintKey>
    PrintKey( APP_S_KEY );
 800e40e:	2009      	movs	r0, #9
 800e410:	f7ff ff13 	bl	800e23a <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800e414:	2008      	movs	r0, #8
 800e416:	f7ff ff10 	bl	800e23a <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800e41a:	200a      	movs	r0, #10
 800e41c:	f7ff ff0d 	bl	800e23a <PrintKey>
    PrintIds( mode );
 800e420:	79fb      	ldrb	r3, [r7, #7]
 800e422:	4618      	mov	r0, r3
 800e424:	f7ff ff13 	bl	800e24e <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800e428:	2300      	movs	r3, #0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3708      	adds	r7, #8
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
	...

0800e434 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b088      	sub	sp, #32
 800e438:	af00      	add	r7, sp, #0
 800e43a:	4603      	mov	r3, r0
 800e43c:	6039      	str	r1, [r7, #0]
 800e43e:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d101      	bne.n	800e44a <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e446:	2302      	movs	r3, #2
 800e448:	e04c      	b.n	800e4e4 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e44a:	2300      	movs	r3, #0
 800e44c:	77fb      	strb	r3, [r7, #31]
 800e44e:	e045      	b.n	800e4dc <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e450:	4b26      	ldr	r3, [pc, #152]	@ (800e4ec <SecureElementSetKey+0xb8>)
 800e452:	6819      	ldr	r1, [r3, #0]
 800e454:	7ffa      	ldrb	r2, [r7, #31]
 800e456:	4613      	mov	r3, r2
 800e458:	011b      	lsls	r3, r3, #4
 800e45a:	4413      	add	r3, r2
 800e45c:	440b      	add	r3, r1
 800e45e:	3318      	adds	r3, #24
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	79fa      	ldrb	r2, [r7, #7]
 800e464:	429a      	cmp	r2, r3
 800e466:	d136      	bne.n	800e4d6 <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800e468:	79fb      	ldrb	r3, [r7, #7]
 800e46a:	2b0d      	cmp	r3, #13
 800e46c:	d123      	bne.n	800e4b6 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800e46e:	2306      	movs	r3, #6
 800e470:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800e472:	2300      	movs	r3, #0
 800e474:	60fb      	str	r3, [r7, #12]
 800e476:	f107 0310 	add.w	r3, r7, #16
 800e47a:	2200      	movs	r2, #0
 800e47c:	601a      	str	r2, [r3, #0]
 800e47e:	605a      	str	r2, [r3, #4]
 800e480:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800e482:	f107 030c 	add.w	r3, r7, #12
 800e486:	220c      	movs	r2, #12
 800e488:	2110      	movs	r1, #16
 800e48a:	6838      	ldr	r0, [r7, #0]
 800e48c:	f000 f84a 	bl	800e524 <SecureElementAesEncrypt>
 800e490:	4603      	mov	r3, r0
 800e492:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800e494:	4b15      	ldr	r3, [pc, #84]	@ (800e4ec <SecureElementSetKey+0xb8>)
 800e496:	6819      	ldr	r1, [r3, #0]
 800e498:	7ffa      	ldrb	r2, [r7, #31]
 800e49a:	4613      	mov	r3, r2
 800e49c:	011b      	lsls	r3, r3, #4
 800e49e:	4413      	add	r3, r2
 800e4a0:	3318      	adds	r3, #24
 800e4a2:	440b      	add	r3, r1
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	f107 010c 	add.w	r1, r7, #12
 800e4aa:	2210      	movs	r2, #16
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f000 f9e4 	bl	800e87a <memcpy1>
                return retval;
 800e4b2:	7fbb      	ldrb	r3, [r7, #30]
 800e4b4:	e016      	b.n	800e4e4 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800e4b6:	4b0d      	ldr	r3, [pc, #52]	@ (800e4ec <SecureElementSetKey+0xb8>)
 800e4b8:	6819      	ldr	r1, [r3, #0]
 800e4ba:	7ffa      	ldrb	r2, [r7, #31]
 800e4bc:	4613      	mov	r3, r2
 800e4be:	011b      	lsls	r3, r3, #4
 800e4c0:	4413      	add	r3, r2
 800e4c2:	3318      	adds	r3, #24
 800e4c4:	440b      	add	r3, r1
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	2210      	movs	r2, #16
 800e4ca:	6839      	ldr	r1, [r7, #0]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f000 f9d4 	bl	800e87a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	e006      	b.n	800e4e4 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e4d6:	7ffb      	ldrb	r3, [r7, #31]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	77fb      	strb	r3, [r7, #31]
 800e4dc:	7ffb      	ldrb	r3, [r7, #31]
 800e4de:	2b0a      	cmp	r3, #10
 800e4e0:	d9b6      	bls.n	800e450 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e4e2:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3720      	adds	r7, #32
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	200012c8 	.word	0x200012c8

0800e4f0 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b086      	sub	sp, #24
 800e4f4:	af02      	add	r7, sp, #8
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	60b9      	str	r1, [r7, #8]
 800e4fa:	607a      	str	r2, [r7, #4]
 800e4fc:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800e4fe:	78fb      	ldrb	r3, [r7, #3]
 800e500:	2b0b      	cmp	r3, #11
 800e502:	d901      	bls.n	800e508 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e504:	2303      	movs	r3, #3
 800e506:	e009      	b.n	800e51c <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800e508:	78fa      	ldrb	r2, [r7, #3]
 800e50a:	69bb      	ldr	r3, [r7, #24]
 800e50c:	9300      	str	r3, [sp, #0]
 800e50e:	4613      	mov	r3, r2
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	68b9      	ldr	r1, [r7, #8]
 800e514:	68f8      	ldr	r0, [r7, #12]
 800e516:	f7ff fee7 	bl	800e2e8 <ComputeCmac>
 800e51a:	4603      	mov	r3, r0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <SecureElementAesEncrypt>:
    return retval;
}

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b0c2      	sub	sp, #264	@ 0x108
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e530:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800e534:	6001      	str	r1, [r0, #0]
 800e536:	4611      	mov	r1, r2
 800e538:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800e53c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800e540:	6013      	str	r3, [r2, #0]
 800e542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e546:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800e54a:	460a      	mov	r2, r1
 800e54c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d006      	beq.n	800e562 <SecureElementAesEncrypt+0x3e>
 800e554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d101      	bne.n	800e566 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e562:	2302      	movs	r3, #2
 800e564:	e059      	b.n	800e61a <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800e566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e56a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f003 030f 	and.w	r3, r3, #15
 800e574:	2b00      	cmp	r3, #0
 800e576:	d001      	beq.n	800e57c <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e578:	2305      	movs	r3, #5
 800e57a:	e04e      	b.n	800e61a <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800e57c:	f107 0314 	add.w	r3, r7, #20
 800e580:	22f0      	movs	r2, #240	@ 0xf0
 800e582:	2100      	movs	r1, #0
 800e584:	4618      	mov	r0, r3
 800e586:	f000 f9b3 	bl	800e8f0 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800e58a:	f107 0210 	add.w	r2, r7, #16
 800e58e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e592:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	4611      	mov	r1, r2
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7ff fe74 	bl	800e288 <GetKeyByID>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e5a6:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d133      	bne.n	800e616 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	f107 0214 	add.w	r2, r7, #20
 800e5b6:	2110      	movs	r1, #16
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7ff fd17 	bl	800dfec <lorawan_aes_set_key>

        uint8_t block = 0;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800e5c4:	e020      	b.n	800e608 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800e5c6:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800e5ca:	68fa      	ldr	r2, [r7, #12]
 800e5cc:	18d0      	adds	r0, r2, r3
 800e5ce:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800e5d2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800e5d6:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800e5da:	6812      	ldr	r2, [r2, #0]
 800e5dc:	4413      	add	r3, r2
 800e5de:	f107 0214 	add.w	r2, r7, #20
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	f7ff fde0 	bl	800e1a8 <lorawan_aes_encrypt>
            block = block + 16;
 800e5e8:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800e5ec:	3310      	adds	r3, #16
 800e5ee:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800e5f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5f6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800e5fa:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800e5fe:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800e602:	6812      	ldr	r2, [r2, #0]
 800e604:	3a10      	subs	r2, #16
 800e606:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800e608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e60c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d1d7      	bne.n	800e5c6 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800e616:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b088      	sub	sp, #32
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	460b      	mov	r3, r1
 800e62e:	70fb      	strb	r3, [r7, #3]
 800e630:	4613      	mov	r3, r2
 800e632:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d101      	bne.n	800e63e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e63a:	2302      	movs	r3, #2
 800e63c:	e02e      	b.n	800e69c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800e63e:	2306      	movs	r3, #6
 800e640:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800e642:	78bb      	ldrb	r3, [r7, #2]
 800e644:	2b0c      	cmp	r3, #12
 800e646:	d104      	bne.n	800e652 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800e648:	78fb      	ldrb	r3, [r7, #3]
 800e64a:	2b0b      	cmp	r3, #11
 800e64c:	d001      	beq.n	800e652 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e64e:	2303      	movs	r3, #3
 800e650:	e024      	b.n	800e69c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800e652:	2300      	movs	r3, #0
 800e654:	60fb      	str	r3, [r7, #12]
 800e656:	f107 0310 	add.w	r3, r7, #16
 800e65a:	2200      	movs	r2, #0
 800e65c:	601a      	str	r2, [r3, #0]
 800e65e:	605a      	str	r2, [r3, #4]
 800e660:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800e662:	f107 030c 	add.w	r3, r7, #12
 800e666:	78fa      	ldrb	r2, [r7, #3]
 800e668:	2110      	movs	r1, #16
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f7ff ff5a 	bl	800e524 <SecureElementAesEncrypt>
 800e670:	4603      	mov	r3, r0
 800e672:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e674:	7ffb      	ldrb	r3, [r7, #31]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d001      	beq.n	800e67e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800e67a:	7ffb      	ldrb	r3, [r7, #31]
 800e67c:	e00e      	b.n	800e69c <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800e67e:	f107 020c 	add.w	r2, r7, #12
 800e682:	78bb      	ldrb	r3, [r7, #2]
 800e684:	4611      	mov	r1, r2
 800e686:	4618      	mov	r0, r3
 800e688:	f7ff fed4 	bl	800e434 <SecureElementSetKey>
 800e68c:	4603      	mov	r3, r0
 800e68e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e690:	7ffb      	ldrb	r3, [r7, #31]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d001      	beq.n	800e69a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800e696:	7ffb      	ldrb	r3, [r7, #31]
 800e698:	e000      	b.n	800e69c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800e69a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3720      	adds	r7, #32
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <SecureElementRandomNumber>:
    return SECURE_ELEMENT_SUCCESS;
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d101      	bne.n	800e6b6 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e6b2:	2302      	movs	r3, #2
 800e6b4:	e006      	b.n	800e6c4 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800e6b6:	4b05      	ldr	r3, [pc, #20]	@ (800e6cc <SecureElementRandomNumber+0x28>)
 800e6b8:	695b      	ldr	r3, [r3, #20]
 800e6ba:	4798      	blx	r3
 800e6bc:	4602      	mov	r2, r0
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800e6c2:	2300      	movs	r3, #0
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3708      	adds	r7, #8
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	08012a80 	.word	0x08012a80

0800e6d0 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b082      	sub	sp, #8
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d101      	bne.n	800e6e2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e6de:	2302      	movs	r3, #2
 800e6e0:	e007      	b.n	800e6f2 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800e6e2:	4b06      	ldr	r3, [pc, #24]	@ (800e6fc <SecureElementSetDevEui+0x2c>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	2208      	movs	r2, #8
 800e6e8:	6879      	ldr	r1, [r7, #4]
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f000 f8c5 	bl	800e87a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e6f0:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3708      	adds	r7, #8
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	200012c8 	.word	0x200012c8

0800e700 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d101      	bne.n	800e712 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e70e:	2302      	movs	r3, #2
 800e710:	e007      	b.n	800e722 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800e712:	4b06      	ldr	r3, [pc, #24]	@ (800e72c <SecureElementGetDevEui+0x2c>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	2208      	movs	r2, #8
 800e718:	4619      	mov	r1, r3
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f000 f8ad 	bl	800e87a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e720:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e722:	4618      	mov	r0, r3
 800e724:	3708      	adds	r7, #8
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	200012c8 	.word	0x200012c8

0800e730 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d101      	bne.n	800e742 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e73e:	2302      	movs	r3, #2
 800e740:	e008      	b.n	800e754 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800e742:	4b06      	ldr	r3, [pc, #24]	@ (800e75c <SecureElementSetJoinEui+0x2c>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	3308      	adds	r3, #8
 800e748:	2208      	movs	r2, #8
 800e74a:	6879      	ldr	r1, [r7, #4]
 800e74c:	4618      	mov	r0, r3
 800e74e:	f000 f894 	bl	800e87a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e752:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e754:	4618      	mov	r0, r3
 800e756:	3708      	adds	r7, #8
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	200012c8 	.word	0x200012c8

0800e760 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d101      	bne.n	800e772 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e76e:	2302      	movs	r3, #2
 800e770:	e008      	b.n	800e784 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800e772:	4b06      	ldr	r3, [pc, #24]	@ (800e78c <SecureElementGetJoinEui+0x2c>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	3308      	adds	r3, #8
 800e778:	2208      	movs	r2, #8
 800e77a:	4619      	mov	r1, r3
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f000 f87c 	bl	800e87a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e782:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e784:	4618      	mov	r0, r3
 800e786:	3708      	adds	r7, #8
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	200012c8 	.word	0x200012c8

0800e790 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
 800e796:	4603      	mov	r3, r0
 800e798:	6039      	str	r1, [r7, #0]
 800e79a:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800e79c:	79fb      	ldrb	r3, [r7, #7]
 800e79e:	2b02      	cmp	r3, #2
 800e7a0:	d104      	bne.n	800e7ac <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800e7a2:	4b07      	ldr	r3, [pc, #28]	@ (800e7c0 <SecureElementSetDevAddr+0x30>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	683a      	ldr	r2, [r7, #0]
 800e7a8:	611a      	str	r2, [r3, #16]
 800e7aa:	e003      	b.n	800e7b4 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800e7ac:	4b04      	ldr	r3, [pc, #16]	@ (800e7c0 <SecureElementSetDevAddr+0x30>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	683a      	ldr	r2, [r7, #0]
 800e7b2:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800e7b4:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	370c      	adds	r7, #12
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bc80      	pop	{r7}
 800e7be:	4770      	bx	lr
 800e7c0:	200012c8 	.word	0x200012c8

0800e7c4 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	6039      	str	r1, [r7, #0]
 800e7ce:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d101      	bne.n	800e7da <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e7d6:	2302      	movs	r3, #2
 800e7d8:	e00e      	b.n	800e7f8 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800e7da:	79fb      	ldrb	r3, [r7, #7]
 800e7dc:	2b02      	cmp	r3, #2
 800e7de:	d105      	bne.n	800e7ec <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800e7e0:	4b08      	ldr	r3, [pc, #32]	@ (800e804 <SecureElementGetDevAddr+0x40>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	691a      	ldr	r2, [r3, #16]
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	601a      	str	r2, [r3, #0]
 800e7ea:	e004      	b.n	800e7f6 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800e7ec:	4b05      	ldr	r3, [pc, #20]	@ (800e804 <SecureElementGetDevAddr+0x40>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	695a      	ldr	r2, [r3, #20]
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800e7f6:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	370c      	adds	r7, #12
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bc80      	pop	{r7}
 800e800:	4770      	bx	lr
 800e802:	bf00      	nop
 800e804:	200012c8 	.word	0x200012c8

0800e808 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 800e808:	b480      	push	{r7}
 800e80a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800e80c:	4b0d      	ldr	r3, [pc, #52]	@ (800e844 <rand1+0x3c>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4a0d      	ldr	r2, [pc, #52]	@ (800e848 <rand1+0x40>)
 800e812:	fb02 f303 	mul.w	r3, r2, r3
 800e816:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800e81a:	3339      	adds	r3, #57	@ 0x39
 800e81c:	4a09      	ldr	r2, [pc, #36]	@ (800e844 <rand1+0x3c>)
 800e81e:	6013      	str	r3, [r2, #0]
 800e820:	4b08      	ldr	r3, [pc, #32]	@ (800e844 <rand1+0x3c>)
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	2303      	movs	r3, #3
 800e826:	fba3 1302 	umull	r1, r3, r3, r2
 800e82a:	1ad1      	subs	r1, r2, r3
 800e82c:	0849      	lsrs	r1, r1, #1
 800e82e:	440b      	add	r3, r1
 800e830:	0f99      	lsrs	r1, r3, #30
 800e832:	460b      	mov	r3, r1
 800e834:	07db      	lsls	r3, r3, #31
 800e836:	1a5b      	subs	r3, r3, r1
 800e838:	1ad1      	subs	r1, r2, r3
 800e83a:	460b      	mov	r3, r1
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	46bd      	mov	sp, r7
 800e840:	bc80      	pop	{r7}
 800e842:	4770      	bx	lr
 800e844:	200000e0 	.word	0x200000e0
 800e848:	41c64e6d 	.word	0x41c64e6d

0800e84c <randr>:
    next = seed;
}
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800e856:	f7ff ffd7 	bl	800e808 <rand1>
 800e85a:	4602      	mov	r2, r0
 800e85c:	6839      	ldr	r1, [r7, #0]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	1acb      	subs	r3, r1, r3
 800e862:	3301      	adds	r3, #1
 800e864:	fb92 f1f3 	sdiv	r1, r2, r3
 800e868:	fb01 f303 	mul.w	r3, r1, r3
 800e86c:	1ad2      	subs	r2, r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	4413      	add	r3, r2
}
 800e872:	4618      	mov	r0, r3
 800e874:	3708      	adds	r7, #8
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 800e87a:	b480      	push	{r7}
 800e87c:	b085      	sub	sp, #20
 800e87e:	af00      	add	r7, sp, #0
 800e880:	60f8      	str	r0, [r7, #12]
 800e882:	60b9      	str	r1, [r7, #8]
 800e884:	4613      	mov	r3, r2
 800e886:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 800e888:	e007      	b.n	800e89a <memcpy1+0x20>
    {
        *dst++ = *src++;
 800e88a:	68ba      	ldr	r2, [r7, #8]
 800e88c:	1c53      	adds	r3, r2, #1
 800e88e:	60bb      	str	r3, [r7, #8]
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	1c59      	adds	r1, r3, #1
 800e894:	60f9      	str	r1, [r7, #12]
 800e896:	7812      	ldrb	r2, [r2, #0]
 800e898:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800e89a:	88fb      	ldrh	r3, [r7, #6]
 800e89c:	1e5a      	subs	r2, r3, #1
 800e89e:	80fa      	strh	r2, [r7, #6]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d1f2      	bne.n	800e88a <memcpy1+0x10>
    }
}
 800e8a4:	bf00      	nop
 800e8a6:	bf00      	nop
 800e8a8:	3714      	adds	r7, #20
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bc80      	pop	{r7}
 800e8ae:	4770      	bx	lr

0800e8b0 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	60f8      	str	r0, [r7, #12]
 800e8b8:	60b9      	str	r1, [r7, #8]
 800e8ba:	4613      	mov	r3, r2
 800e8bc:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 800e8be:	88fb      	ldrh	r3, [r7, #6]
 800e8c0:	3b01      	subs	r3, #1
 800e8c2:	68fa      	ldr	r2, [r7, #12]
 800e8c4:	4413      	add	r3, r2
 800e8c6:	60fb      	str	r3, [r7, #12]
    while( size-- )
 800e8c8:	e007      	b.n	800e8da <memcpyr+0x2a>
    {
        *dst-- = *src++;
 800e8ca:	68ba      	ldr	r2, [r7, #8]
 800e8cc:	1c53      	adds	r3, r2, #1
 800e8ce:	60bb      	str	r3, [r7, #8]
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	1e59      	subs	r1, r3, #1
 800e8d4:	60f9      	str	r1, [r7, #12]
 800e8d6:	7812      	ldrb	r2, [r2, #0]
 800e8d8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800e8da:	88fb      	ldrh	r3, [r7, #6]
 800e8dc:	1e5a      	subs	r2, r3, #1
 800e8de:	80fa      	strh	r2, [r7, #6]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d1f2      	bne.n	800e8ca <memcpyr+0x1a>
    }
}
 800e8e4:	bf00      	nop
 800e8e6:	bf00      	nop
 800e8e8:	3714      	adds	r7, #20
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bc80      	pop	{r7}
 800e8ee:	4770      	bx	lr

0800e8f0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b083      	sub	sp, #12
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	460b      	mov	r3, r1
 800e8fa:	70fb      	strb	r3, [r7, #3]
 800e8fc:	4613      	mov	r3, r2
 800e8fe:	803b      	strh	r3, [r7, #0]
    while( size-- )
 800e900:	e004      	b.n	800e90c <memset1+0x1c>
    {
        *dst++ = value;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	1c5a      	adds	r2, r3, #1
 800e906:	607a      	str	r2, [r7, #4]
 800e908:	78fa      	ldrb	r2, [r7, #3]
 800e90a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800e90c:	883b      	ldrh	r3, [r7, #0]
 800e90e:	1e5a      	subs	r2, r3, #1
 800e910:	803a      	strh	r2, [r7, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d1f5      	bne.n	800e902 <memset1+0x12>
    }
}
 800e916:	bf00      	nop
 800e918:	bf00      	nop
 800e91a:	370c      	adds	r7, #12
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bc80      	pop	{r7}
 800e920:	4770      	bx	lr
	...

0800e924 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af02      	add	r7, sp, #8
 800e92a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800e92c:	4a24      	ldr	r2, [pc, #144]	@ (800e9c0 <RadioInit+0x9c>)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800e932:	4b24      	ldr	r3, [pc, #144]	@ (800e9c4 <RadioInit+0xa0>)
 800e934:	2200      	movs	r2, #0
 800e936:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800e938:	4b22      	ldr	r3, [pc, #136]	@ (800e9c4 <RadioInit+0xa0>)
 800e93a:	2200      	movs	r2, #0
 800e93c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800e93e:	4b21      	ldr	r3, [pc, #132]	@ (800e9c4 <RadioInit+0xa0>)
 800e940:	2200      	movs	r2, #0
 800e942:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800e944:	4b1f      	ldr	r3, [pc, #124]	@ (800e9c4 <RadioInit+0xa0>)
 800e946:	2200      	movs	r2, #0
 800e948:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 800e94a:	481f      	ldr	r0, [pc, #124]	@ (800e9c8 <RadioInit+0xa4>)
 800e94c:	f001 ff88 	bl	8010860 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 800e950:	4b1c      	ldr	r3, [pc, #112]	@ (800e9c4 <RadioInit+0xa0>)
 800e952:	2200      	movs	r2, #0
 800e954:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800e956:	4b1b      	ldr	r3, [pc, #108]	@ (800e9c4 <RadioInit+0xa0>)
 800e958:	2200      	movs	r2, #0
 800e95a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 800e95c:	f002 fa1c 	bl	8010d98 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800e960:	2100      	movs	r1, #0
 800e962:	2000      	movs	r0, #0
 800e964:	f002 fde8 	bl	8011538 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800e968:	2204      	movs	r2, #4
 800e96a:	2100      	movs	r1, #0
 800e96c:	2001      	movs	r0, #1
 800e96e:	f002 fba5 	bl	80110bc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800e972:	2300      	movs	r3, #0
 800e974:	2200      	movs	r2, #0
 800e976:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e97a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800e97e:	f002 fad5 	bl	8010f2c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 800e982:	f000 fe91 	bl	800f6a8 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800e986:	2300      	movs	r3, #0
 800e988:	9300      	str	r3, [sp, #0]
 800e98a:	4b10      	ldr	r3, [pc, #64]	@ (800e9cc <RadioInit+0xa8>)
 800e98c:	2200      	movs	r2, #0
 800e98e:	f04f 31ff 	mov.w	r1, #4294967295
 800e992:	480f      	ldr	r0, [pc, #60]	@ (800e9d0 <RadioInit+0xac>)
 800e994:	f003 faf8 	bl	8011f88 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800e998:	2300      	movs	r3, #0
 800e99a:	9300      	str	r3, [sp, #0]
 800e99c:	4b0d      	ldr	r3, [pc, #52]	@ (800e9d4 <RadioInit+0xb0>)
 800e99e:	2200      	movs	r2, #0
 800e9a0:	f04f 31ff 	mov.w	r1, #4294967295
 800e9a4:	480c      	ldr	r0, [pc, #48]	@ (800e9d8 <RadioInit+0xb4>)
 800e9a6:	f003 faef 	bl	8011f88 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800e9aa:	4809      	ldr	r0, [pc, #36]	@ (800e9d0 <RadioInit+0xac>)
 800e9ac:	f003 fb90 	bl	80120d0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800e9b0:	4809      	ldr	r0, [pc, #36]	@ (800e9d8 <RadioInit+0xb4>)
 800e9b2:	f003 fb8d 	bl	80120d0 <UTIL_TIMER_Stop>
}
 800e9b6:	bf00      	nop
 800e9b8:	3708      	adds	r7, #8
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	200013cc 	.word	0x200013cc
 800e9c4:	200013d0 	.word	0x200013d0
 800e9c8:	0800fa9d 	.word	0x0800fa9d
 800e9cc:	0800fa25 	.word	0x0800fa25
 800e9d0:	2000142c 	.word	0x2000142c
 800e9d4:	0800fa39 	.word	0x0800fa39
 800e9d8:	20001444 	.word	0x20001444

0800e9dc <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800e9e0:	f001 ff86 	bl	80108f0 <SUBGRF_GetOperatingMode>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b07      	cmp	r3, #7
 800e9e8:	d00a      	beq.n	800ea00 <RadioGetStatus+0x24>
 800e9ea:	2b07      	cmp	r3, #7
 800e9ec:	dc0a      	bgt.n	800ea04 <RadioGetStatus+0x28>
 800e9ee:	2b04      	cmp	r3, #4
 800e9f0:	d002      	beq.n	800e9f8 <RadioGetStatus+0x1c>
 800e9f2:	2b05      	cmp	r3, #5
 800e9f4:	d002      	beq.n	800e9fc <RadioGetStatus+0x20>
 800e9f6:	e005      	b.n	800ea04 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800e9f8:	2302      	movs	r3, #2
 800e9fa:	e004      	b.n	800ea06 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	e002      	b.n	800ea06 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800ea00:	2303      	movs	r3, #3
 800ea02:	e000      	b.n	800ea06 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800ea04:	2300      	movs	r3, #0
    }
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	bd80      	pop	{r7, pc}
	...

0800ea0c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	4603      	mov	r3, r0
 800ea14:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800ea16:	4a2a      	ldr	r2, [pc, #168]	@ (800eac0 <RadioSetModem+0xb4>)
 800ea18:	79fb      	ldrb	r3, [r7, #7]
 800ea1a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 800ea1c:	79fb      	ldrb	r3, [r7, #7]
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f003 f977 	bl	8011d12 <RFW_SetRadioModem>
    switch( modem )
 800ea24:	79fb      	ldrb	r3, [r7, #7]
 800ea26:	2b05      	cmp	r3, #5
 800ea28:	d80e      	bhi.n	800ea48 <RadioSetModem+0x3c>
 800ea2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ea30 <RadioSetModem+0x24>)
 800ea2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea30:	0800ea57 	.word	0x0800ea57
 800ea34:	0800ea65 	.word	0x0800ea65
 800ea38:	0800ea49 	.word	0x0800ea49
 800ea3c:	0800ea8b 	.word	0x0800ea8b
 800ea40:	0800ea99 	.word	0x0800ea99
 800ea44:	0800eaa7 	.word	0x0800eaa7
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800ea48:	2003      	movs	r0, #3
 800ea4a:	f002 fb11 	bl	8011070 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800ea4e:	4b1c      	ldr	r3, [pc, #112]	@ (800eac0 <RadioSetModem+0xb4>)
 800ea50:	2200      	movs	r2, #0
 800ea52:	735a      	strb	r2, [r3, #13]
        break;
 800ea54:	e02f      	b.n	800eab6 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800ea56:	2000      	movs	r0, #0
 800ea58:	f002 fb0a 	bl	8011070 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800ea5c:	4b18      	ldr	r3, [pc, #96]	@ (800eac0 <RadioSetModem+0xb4>)
 800ea5e:	2200      	movs	r2, #0
 800ea60:	735a      	strb	r2, [r3, #13]
        break;
 800ea62:	e028      	b.n	800eab6 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800ea64:	2001      	movs	r0, #1
 800ea66:	f002 fb03 	bl	8011070 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800ea6a:	4b15      	ldr	r3, [pc, #84]	@ (800eac0 <RadioSetModem+0xb4>)
 800ea6c:	7b5a      	ldrb	r2, [r3, #13]
 800ea6e:	4b14      	ldr	r3, [pc, #80]	@ (800eac0 <RadioSetModem+0xb4>)
 800ea70:	7b1b      	ldrb	r3, [r3, #12]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d01e      	beq.n	800eab4 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800ea76:	4b12      	ldr	r3, [pc, #72]	@ (800eac0 <RadioSetModem+0xb4>)
 800ea78:	7b1a      	ldrb	r2, [r3, #12]
 800ea7a:	4b11      	ldr	r3, [pc, #68]	@ (800eac0 <RadioSetModem+0xb4>)
 800ea7c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800ea7e:	4b10      	ldr	r3, [pc, #64]	@ (800eac0 <RadioSetModem+0xb4>)
 800ea80:	7b5b      	ldrb	r3, [r3, #13]
 800ea82:	4618      	mov	r0, r3
 800ea84:	f000 ff98 	bl	800f9b8 <RadioSetPublicNetwork>
        }
        break;
 800ea88:	e014      	b.n	800eab4 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800ea8a:	2002      	movs	r0, #2
 800ea8c:	f002 faf0 	bl	8011070 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800ea90:	4b0b      	ldr	r3, [pc, #44]	@ (800eac0 <RadioSetModem+0xb4>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	735a      	strb	r2, [r3, #13]
        break;
 800ea96:	e00e      	b.n	800eab6 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800ea98:	2002      	movs	r0, #2
 800ea9a:	f002 fae9 	bl	8011070 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800ea9e:	4b08      	ldr	r3, [pc, #32]	@ (800eac0 <RadioSetModem+0xb4>)
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	735a      	strb	r2, [r3, #13]
        break;
 800eaa4:	e007      	b.n	800eab6 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800eaa6:	2000      	movs	r0, #0
 800eaa8:	f002 fae2 	bl	8011070 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800eaac:	4b04      	ldr	r3, [pc, #16]	@ (800eac0 <RadioSetModem+0xb4>)
 800eaae:	2200      	movs	r2, #0
 800eab0:	735a      	strb	r2, [r3, #13]
        break;
 800eab2:	e000      	b.n	800eab6 <RadioSetModem+0xaa>
        break;
 800eab4:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800eab6:	bf00      	nop
 800eab8:	3708      	adds	r7, #8
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	200013d0 	.word	0x200013d0

0800eac4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f002 fa89 	bl	8010fe4 <SUBGRF_SetRfFrequency>
}
 800ead2:	bf00      	nop
 800ead4:	3708      	adds	r7, #8
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800eada:	b580      	push	{r7, lr}
 800eadc:	b090      	sub	sp, #64	@ 0x40
 800eade:	af0a      	add	r7, sp, #40	@ 0x28
 800eae0:	60f8      	str	r0, [r7, #12]
 800eae2:	60b9      	str	r1, [r7, #8]
 800eae4:	603b      	str	r3, [r7, #0]
 800eae6:	4613      	mov	r3, r2
 800eae8:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800eaea:	2301      	movs	r3, #1
 800eaec:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800eaf6:	f000 fdea 	bl	800f6ce <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800eafa:	2000      	movs	r0, #0
 800eafc:	f7ff ff86 	bl	800ea0c <RadioSetModem>

    RadioSetChannel( freq );
 800eb00:	68f8      	ldr	r0, [r7, #12]
 800eb02:	f7ff ffdf 	bl	800eac4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800eb06:	2301      	movs	r3, #1
 800eb08:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	9308      	str	r3, [sp, #32]
 800eb0e:	2300      	movs	r3, #0
 800eb10:	9307      	str	r3, [sp, #28]
 800eb12:	2300      	movs	r3, #0
 800eb14:	9306      	str	r3, [sp, #24]
 800eb16:	2300      	movs	r3, #0
 800eb18:	9305      	str	r3, [sp, #20]
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	9304      	str	r3, [sp, #16]
 800eb1e:	2300      	movs	r3, #0
 800eb20:	9303      	str	r3, [sp, #12]
 800eb22:	2300      	movs	r3, #0
 800eb24:	9302      	str	r3, [sp, #8]
 800eb26:	2303      	movs	r3, #3
 800eb28:	9301      	str	r3, [sp, #4]
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	9300      	str	r3, [sp, #0]
 800eb2e:	2300      	movs	r3, #0
 800eb30:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800eb34:	68b9      	ldr	r1, [r7, #8]
 800eb36:	2000      	movs	r0, #0
 800eb38:	f000 f83c 	bl	800ebb4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	f000 fdcd 	bl	800f6dc <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800eb42:	f000 ff67 	bl	800fa14 <RadioGetWakeupTime>
 800eb46:	4603      	mov	r3, r0
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7f2 fa49 	bl	8000fe0 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800eb4e:	f003 fb59 	bl	8012204 <UTIL_TIMER_GetCurrentTime>
 800eb52:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800eb54:	e00d      	b.n	800eb72 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800eb56:	2000      	movs	r0, #0
 800eb58:	f000 feae 	bl	800f8b8 <RadioRssi>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800eb60:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800eb64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	dd02      	ble.n	800eb72 <RadioIsChannelFree+0x98>
        {
            status = false;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	75fb      	strb	r3, [r7, #23]
            break;
 800eb70:	e006      	b.n	800eb80 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800eb72:	6938      	ldr	r0, [r7, #16]
 800eb74:	f003 fb58 	bl	8012228 <UTIL_TIMER_GetElapsedTime>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d8ea      	bhi.n	800eb56 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 800eb80:	f000 fda5 	bl	800f6ce <RadioStandby>

    return status;
 800eb84:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3718      	adds	r7, #24
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}

0800eb8e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800eb8e:	b580      	push	{r7, lr}
 800eb90:	b082      	sub	sp, #8
 800eb92:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800eb94:	2300      	movs	r3, #0
 800eb96:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800eb98:	2300      	movs	r3, #0
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	2100      	movs	r1, #0
 800eb9e:	2000      	movs	r0, #0
 800eba0:	f002 f9c4 	bl	8010f2c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800eba4:	f001 ff75 	bl	8010a92 <SUBGRF_GetRandom>
 800eba8:	6078      	str	r0, [r7, #4]

    return rnd;
 800ebaa:	687b      	ldr	r3, [r7, #4]
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3708      	adds	r7, #8
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b08a      	sub	sp, #40	@ 0x28
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60b9      	str	r1, [r7, #8]
 800ebbc:	607a      	str	r2, [r7, #4]
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	73fb      	strb	r3, [r7, #15]
 800ebc4:	4613      	mov	r3, r2
 800ebc6:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 800ebc8:	4ab9      	ldr	r2, [pc, #740]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ebca:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800ebce:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 800ebd0:	f003 f85d 	bl	8011c8e <RFW_DeInit>
    if( rxContinuous == true )
 800ebd4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d001      	beq.n	800ebe0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 800ebe0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d004      	beq.n	800ebf2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800ebe8:	4ab2      	ldr	r2, [pc, #712]	@ (800eeb4 <RadioSetRxConfig+0x300>)
 800ebea:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ebee:	7013      	strb	r3, [r2, #0]
 800ebf0:	e002      	b.n	800ebf8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800ebf2:	4bb0      	ldr	r3, [pc, #704]	@ (800eeb4 <RadioSetRxConfig+0x300>)
 800ebf4:	22ff      	movs	r2, #255	@ 0xff
 800ebf6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800ebf8:	7bfb      	ldrb	r3, [r7, #15]
 800ebfa:	2b05      	cmp	r3, #5
 800ebfc:	d009      	beq.n	800ec12 <RadioSetRxConfig+0x5e>
 800ebfe:	2b05      	cmp	r3, #5
 800ec00:	f300 81d7 	bgt.w	800efb2 <RadioSetRxConfig+0x3fe>
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	f000 80bf 	beq.w	800ed88 <RadioSetRxConfig+0x1d4>
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	f000 8124 	beq.w	800ee58 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800ec10:	e1cf      	b.n	800efb2 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800ec12:	2001      	movs	r0, #1
 800ec14:	f002 f882 	bl	8010d1c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ec18:	4ba5      	ldr	r3, [pc, #660]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800ec20:	4aa3      	ldr	r2, [pc, #652]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800ec26:	4ba2      	ldr	r3, [pc, #648]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ec28:	2209      	movs	r2, #9
 800ec2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800ec2e:	4ba0      	ldr	r3, [pc, #640]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ec30:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800ec34:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800ec36:	68b8      	ldr	r0, [r7, #8]
 800ec38:	f002 ff5c 	bl	8011af4 <SUBGRF_GetFskBandwidthRegValue>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	461a      	mov	r2, r3
 800ec40:	4b9b      	ldr	r3, [pc, #620]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ec42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800ec46:	4b9a      	ldr	r3, [pc, #616]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ec48:	2200      	movs	r2, #0
 800ec4a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800ec4c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ec4e:	00db      	lsls	r3, r3, #3
 800ec50:	b29a      	uxth	r2, r3
 800ec52:	4b97      	ldr	r3, [pc, #604]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ec54:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800ec56:	4b96      	ldr	r3, [pc, #600]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ec58:	2200      	movs	r2, #0
 800ec5a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800ec5c:	4b94      	ldr	r3, [pc, #592]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ec5e:	2210      	movs	r2, #16
 800ec60:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800ec62:	4b93      	ldr	r3, [pc, #588]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ec64:	2200      	movs	r2, #0
 800ec66:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800ec68:	4b91      	ldr	r3, [pc, #580]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800ec6e:	4b91      	ldr	r3, [pc, #580]	@ (800eeb4 <RadioSetRxConfig+0x300>)
 800ec70:	781a      	ldrb	r2, [r3, #0]
 800ec72:	4b8f      	ldr	r3, [pc, #572]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ec74:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800ec76:	4b8e      	ldr	r3, [pc, #568]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ec78:	2201      	movs	r2, #1
 800ec7a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800ec7c:	4b8c      	ldr	r3, [pc, #560]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ec7e:	2200      	movs	r2, #0
 800ec80:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800ec82:	2005      	movs	r0, #5
 800ec84:	f7ff fec2 	bl	800ea0c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ec88:	488b      	ldr	r0, [pc, #556]	@ (800eeb8 <RadioSetRxConfig+0x304>)
 800ec8a:	f002 fae5 	bl	8011258 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ec8e:	488b      	ldr	r0, [pc, #556]	@ (800eebc <RadioSetRxConfig+0x308>)
 800ec90:	f002 fbb4 	bl	80113fc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800ec94:	4a8a      	ldr	r2, [pc, #552]	@ (800eec0 <RadioSetRxConfig+0x30c>)
 800ec96:	f107 031c 	add.w	r3, r7, #28
 800ec9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec9e:	e883 0003 	stmia.w	r3, {r0, r1}
 800eca2:	f107 031c 	add.w	r3, r7, #28
 800eca6:	4618      	mov	r0, r3
 800eca8:	f001 fe71 	bl	801098e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800ecac:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800ecb0:	f001 febc 	bl	8010a2c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800ecb4:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800ecb8:	f000 fe1c 	bl	800f8f4 <RadioRead>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 800ecc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecc6:	f023 0310 	bic.w	r3, r3, #16
 800ecca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800ecce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800ecd8:	f000 fdfa 	bl	800f8d0 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800ecdc:	2104      	movs	r1, #4
 800ecde:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 800ece2:	f000 fdf5 	bl	800f8d0 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800ece6:	f640 009b 	movw	r0, #2203	@ 0x89b
 800ecea:	f000 fe03 	bl	800f8f4 <RadioRead>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800ecf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecf8:	f023 031c 	bic.w	r3, r3, #28
 800ecfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800ed00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed04:	f043 0308 	orr.w	r3, r3, #8
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	4619      	mov	r1, r3
 800ed0c:	f640 009b 	movw	r0, #2203	@ 0x89b
 800ed10:	f000 fdde 	bl	800f8d0 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800ed14:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800ed18:	f000 fdec 	bl	800f8f4 <RadioRead>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800ed22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed26:	f023 0318 	bic.w	r3, r3, #24
 800ed2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800ed2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed32:	f043 0318 	orr.w	r3, r3, #24
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	4619      	mov	r1, r3
 800ed3a:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800ed3e:	f000 fdc7 	bl	800f8d0 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800ed42:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800ed46:	f000 fdd5 	bl	800f8f4 <RadioRead>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800ed50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800ed5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed60:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	4619      	mov	r1, r3
 800ed68:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800ed6c:	f000 fdb0 	bl	800f8d0 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800ed70:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ed72:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800ed76:	fb02 f303 	mul.w	r3, r2, r3
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed82:	4a4b      	ldr	r2, [pc, #300]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ed84:	6093      	str	r3, [r2, #8]
            break;
 800ed86:	e115      	b.n	800efb4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800ed88:	2000      	movs	r0, #0
 800ed8a:	f001 ffc7 	bl	8010d1c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ed8e:	4b48      	ldr	r3, [pc, #288]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ed90:	2200      	movs	r2, #0
 800ed92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800ed96:	4a46      	ldr	r2, [pc, #280]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800ed9c:	4b44      	ldr	r3, [pc, #272]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ed9e:	220b      	movs	r2, #11
 800eda0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800eda4:	68b8      	ldr	r0, [r7, #8]
 800eda6:	f002 fea5 	bl	8011af4 <SUBGRF_GetFskBandwidthRegValue>
 800edaa:	4603      	mov	r3, r0
 800edac:	461a      	mov	r2, r3
 800edae:	4b40      	ldr	r3, [pc, #256]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800edb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800edb4:	4b3e      	ldr	r3, [pc, #248]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800edb6:	2200      	movs	r2, #0
 800edb8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800edba:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800edbc:	00db      	lsls	r3, r3, #3
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	4b3b      	ldr	r3, [pc, #236]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800edc2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800edc4:	4b3a      	ldr	r3, [pc, #232]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800edc6:	2204      	movs	r2, #4
 800edc8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800edca:	4b39      	ldr	r3, [pc, #228]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800edcc:	2218      	movs	r2, #24
 800edce:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800edd0:	4b37      	ldr	r3, [pc, #220]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800edd2:	2200      	movs	r2, #0
 800edd4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800edd6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800edda:	f083 0301 	eor.w	r3, r3, #1
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	461a      	mov	r2, r3
 800ede2:	4b33      	ldr	r3, [pc, #204]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ede4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800ede6:	4b33      	ldr	r3, [pc, #204]	@ (800eeb4 <RadioSetRxConfig+0x300>)
 800ede8:	781a      	ldrb	r2, [r3, #0]
 800edea:	4b31      	ldr	r3, [pc, #196]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800edec:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800edee:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d003      	beq.n	800edfe <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800edf6:	4b2e      	ldr	r3, [pc, #184]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800edf8:	22f2      	movs	r2, #242	@ 0xf2
 800edfa:	75da      	strb	r2, [r3, #23]
 800edfc:	e002      	b.n	800ee04 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800edfe:	4b2c      	ldr	r3, [pc, #176]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ee00:	2201      	movs	r2, #1
 800ee02:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800ee04:	4b2a      	ldr	r3, [pc, #168]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ee06:	2201      	movs	r2, #1
 800ee08:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800ee0a:	f000 fc60 	bl	800f6ce <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800ee0e:	2000      	movs	r0, #0
 800ee10:	f7ff fdfc 	bl	800ea0c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ee14:	4828      	ldr	r0, [pc, #160]	@ (800eeb8 <RadioSetRxConfig+0x304>)
 800ee16:	f002 fa1f 	bl	8011258 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ee1a:	4828      	ldr	r0, [pc, #160]	@ (800eebc <RadioSetRxConfig+0x308>)
 800ee1c:	f002 faee 	bl	80113fc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800ee20:	4a28      	ldr	r2, [pc, #160]	@ (800eec4 <RadioSetRxConfig+0x310>)
 800ee22:	f107 0314 	add.w	r3, r7, #20
 800ee26:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee2a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee2e:	f107 0314 	add.w	r3, r7, #20
 800ee32:	4618      	mov	r0, r3
 800ee34:	f001 fdab 	bl	801098e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800ee38:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800ee3c:	f001 fdf6 	bl	8010a2c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800ee40:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ee42:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800ee46:	fb02 f303 	mul.w	r3, r2, r3
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee52:	4a17      	ldr	r2, [pc, #92]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ee54:	6093      	str	r3, [r2, #8]
            break;
 800ee56:	e0ad      	b.n	800efb4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800ee58:	2000      	movs	r0, #0
 800ee5a:	f001 ff5f 	bl	8010d1c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800ee5e:	4b14      	ldr	r3, [pc, #80]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ee60:	2201      	movs	r2, #1
 800ee62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	b2da      	uxtb	r2, r3
 800ee6a:	4b11      	ldr	r3, [pc, #68]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ee6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800ee70:	4a15      	ldr	r2, [pc, #84]	@ (800eec8 <RadioSetRxConfig+0x314>)
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	4413      	add	r3, r2
 800ee76:	781a      	ldrb	r2, [r3, #0]
 800ee78:	4b0d      	ldr	r3, [pc, #52]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ee7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800ee7e:	4a0c      	ldr	r2, [pc, #48]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800ee80:	7bbb      	ldrb	r3, [r7, #14]
 800ee82:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d105      	bne.n	800ee98 <RadioSetRxConfig+0x2e4>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2b0b      	cmp	r3, #11
 800ee90:	d008      	beq.n	800eea4 <RadioSetRxConfig+0x2f0>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2b0c      	cmp	r3, #12
 800ee96:	d005      	beq.n	800eea4 <RadioSetRxConfig+0x2f0>
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	2b01      	cmp	r3, #1
 800ee9c:	d116      	bne.n	800eecc <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2b0c      	cmp	r3, #12
 800eea2:	d113      	bne.n	800eecc <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800eea4:	4b02      	ldr	r3, [pc, #8]	@ (800eeb0 <RadioSetRxConfig+0x2fc>)
 800eea6:	2201      	movs	r2, #1
 800eea8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800eeac:	e012      	b.n	800eed4 <RadioSetRxConfig+0x320>
 800eeae:	bf00      	nop
 800eeb0:	200013d0 	.word	0x200013d0
 800eeb4:	200000e4 	.word	0x200000e4
 800eeb8:	20001408 	.word	0x20001408
 800eebc:	200013de 	.word	0x200013de
 800eec0:	08012550 	.word	0x08012550
 800eec4:	08012558 	.word	0x08012558
 800eec8:	08012b0c 	.word	0x08012b0c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800eecc:	4b3b      	ldr	r3, [pc, #236]	@ (800efbc <RadioSetRxConfig+0x408>)
 800eece:	2200      	movs	r2, #0
 800eed0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800eed4:	4b39      	ldr	r3, [pc, #228]	@ (800efbc <RadioSetRxConfig+0x408>)
 800eed6:	2201      	movs	r2, #1
 800eed8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800eeda:	4b38      	ldr	r3, [pc, #224]	@ (800efbc <RadioSetRxConfig+0x408>)
 800eedc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800eee0:	2b05      	cmp	r3, #5
 800eee2:	d004      	beq.n	800eeee <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800eee4:	4b35      	ldr	r3, [pc, #212]	@ (800efbc <RadioSetRxConfig+0x408>)
 800eee6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800eeea:	2b06      	cmp	r3, #6
 800eeec:	d10a      	bne.n	800ef04 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800eeee:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800eef0:	2b0b      	cmp	r3, #11
 800eef2:	d803      	bhi.n	800eefc <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800eef4:	4b31      	ldr	r3, [pc, #196]	@ (800efbc <RadioSetRxConfig+0x408>)
 800eef6:	220c      	movs	r2, #12
 800eef8:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800eefa:	e006      	b.n	800ef0a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800eefc:	4a2f      	ldr	r2, [pc, #188]	@ (800efbc <RadioSetRxConfig+0x408>)
 800eefe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ef00:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800ef02:	e002      	b.n	800ef0a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800ef04:	4a2d      	ldr	r2, [pc, #180]	@ (800efbc <RadioSetRxConfig+0x408>)
 800ef06:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ef08:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800ef0a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800ef0e:	4b2b      	ldr	r3, [pc, #172]	@ (800efbc <RadioSetRxConfig+0x408>)
 800ef10:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800ef12:	4b2b      	ldr	r3, [pc, #172]	@ (800efc0 <RadioSetRxConfig+0x40c>)
 800ef14:	781a      	ldrb	r2, [r3, #0]
 800ef16:	4b29      	ldr	r3, [pc, #164]	@ (800efbc <RadioSetRxConfig+0x408>)
 800ef18:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800ef1a:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800ef1e:	4b27      	ldr	r3, [pc, #156]	@ (800efbc <RadioSetRxConfig+0x408>)
 800ef20:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800ef24:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 800ef28:	4b24      	ldr	r3, [pc, #144]	@ (800efbc <RadioSetRxConfig+0x408>)
 800ef2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 800ef2e:	f000 fbce 	bl	800f6ce <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800ef32:	2001      	movs	r0, #1
 800ef34:	f7ff fd6a 	bl	800ea0c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ef38:	4822      	ldr	r0, [pc, #136]	@ (800efc4 <RadioSetRxConfig+0x410>)
 800ef3a:	f002 f98d 	bl	8011258 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ef3e:	4822      	ldr	r0, [pc, #136]	@ (800efc8 <RadioSetRxConfig+0x414>)
 800ef40:	f002 fa5c 	bl	80113fc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800ef44:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ef46:	b2db      	uxtb	r3, r3
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f001 fef6 	bl	8010d3a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800ef4e:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800ef52:	f002 fbbd 	bl	80116d0 <SUBGRF_ReadRegister>
 800ef56:	4603      	mov	r3, r0
 800ef58:	f003 0301 	and.w	r3, r3, #1
 800ef5c:	b2db      	uxtb	r3, r3
 800ef5e:	4619      	mov	r1, r3
 800ef60:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800ef64:	f002 fb92 	bl	801168c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800ef68:	4b14      	ldr	r3, [pc, #80]	@ (800efbc <RadioSetRxConfig+0x408>)
 800ef6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	d10d      	bne.n	800ef8e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800ef72:	f240 7036 	movw	r0, #1846	@ 0x736
 800ef76:	f002 fbab 	bl	80116d0 <SUBGRF_ReadRegister>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	f023 0304 	bic.w	r3, r3, #4
 800ef80:	b2db      	uxtb	r3, r3
 800ef82:	4619      	mov	r1, r3
 800ef84:	f240 7036 	movw	r0, #1846	@ 0x736
 800ef88:	f002 fb80 	bl	801168c <SUBGRF_WriteRegister>
 800ef8c:	e00c      	b.n	800efa8 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800ef8e:	f240 7036 	movw	r0, #1846	@ 0x736
 800ef92:	f002 fb9d 	bl	80116d0 <SUBGRF_ReadRegister>
 800ef96:	4603      	mov	r3, r0
 800ef98:	f043 0304 	orr.w	r3, r3, #4
 800ef9c:	b2db      	uxtb	r3, r3
 800ef9e:	4619      	mov	r1, r3
 800efa0:	f240 7036 	movw	r0, #1846	@ 0x736
 800efa4:	f002 fb72 	bl	801168c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800efa8:	4b04      	ldr	r3, [pc, #16]	@ (800efbc <RadioSetRxConfig+0x408>)
 800efaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800efae:	609a      	str	r2, [r3, #8]
            break;
 800efb0:	e000      	b.n	800efb4 <RadioSetRxConfig+0x400>
            break;
 800efb2:	bf00      	nop
    }
}
 800efb4:	bf00      	nop
 800efb6:	3728      	adds	r7, #40	@ 0x28
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}
 800efbc:	200013d0 	.word	0x200013d0
 800efc0:	200000e4 	.word	0x200000e4
 800efc4:	20001408 	.word	0x20001408
 800efc8:	200013de 	.word	0x200013de

0800efcc <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b086      	sub	sp, #24
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	60ba      	str	r2, [r7, #8]
 800efd4:	607b      	str	r3, [r7, #4]
 800efd6:	4603      	mov	r3, r0
 800efd8:	73fb      	strb	r3, [r7, #15]
 800efda:	460b      	mov	r3, r1
 800efdc:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 800efde:	f002 fe56 	bl	8011c8e <RFW_DeInit>
    switch( modem )
 800efe2:	7bfb      	ldrb	r3, [r7, #15]
 800efe4:	2b04      	cmp	r3, #4
 800efe6:	f000 80c7 	beq.w	800f178 <RadioSetTxConfig+0x1ac>
 800efea:	2b04      	cmp	r3, #4
 800efec:	f300 80d6 	bgt.w	800f19c <RadioSetTxConfig+0x1d0>
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d002      	beq.n	800effa <RadioSetTxConfig+0x2e>
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d059      	beq.n	800f0ac <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800eff8:	e0d0      	b.n	800f19c <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800effa:	4b77      	ldr	r3, [pc, #476]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800effc:	2200      	movs	r2, #0
 800effe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f002:	4a75      	ldr	r2, [pc, #468]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f004:	6a3b      	ldr	r3, [r7, #32]
 800f006:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f008:	4b73      	ldr	r3, [pc, #460]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f00a:	220b      	movs	r2, #11
 800f00c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f002 fd6f 	bl	8011af4 <SUBGRF_GetFskBandwidthRegValue>
 800f016:	4603      	mov	r3, r0
 800f018:	461a      	mov	r2, r3
 800f01a:	4b6f      	ldr	r3, [pc, #444]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f01c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800f020:	4a6d      	ldr	r2, [pc, #436]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f026:	4b6c      	ldr	r3, [pc, #432]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f028:	2200      	movs	r2, #0
 800f02a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f02c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f02e:	00db      	lsls	r3, r3, #3
 800f030:	b29a      	uxth	r2, r3
 800f032:	4b69      	ldr	r3, [pc, #420]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f034:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f036:	4b68      	ldr	r3, [pc, #416]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f038:	2204      	movs	r2, #4
 800f03a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800f03c:	4b66      	ldr	r3, [pc, #408]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f03e:	2218      	movs	r2, #24
 800f040:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f042:	4b65      	ldr	r3, [pc, #404]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f044:	2200      	movs	r2, #0
 800f046:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800f048:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f04c:	f083 0301 	eor.w	r3, r3, #1
 800f050:	b2db      	uxtb	r3, r3
 800f052:	461a      	mov	r2, r3
 800f054:	4b60      	ldr	r3, [pc, #384]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f056:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800f058:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d003      	beq.n	800f068 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800f060:	4b5d      	ldr	r3, [pc, #372]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f062:	22f2      	movs	r2, #242	@ 0xf2
 800f064:	75da      	strb	r2, [r3, #23]
 800f066:	e002      	b.n	800f06e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f068:	4b5b      	ldr	r3, [pc, #364]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f06a:	2201      	movs	r2, #1
 800f06c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800f06e:	4b5a      	ldr	r3, [pc, #360]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f070:	2201      	movs	r2, #1
 800f072:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800f074:	f000 fb2b 	bl	800f6ce <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800f078:	2000      	movs	r0, #0
 800f07a:	f7ff fcc7 	bl	800ea0c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f07e:	4857      	ldr	r0, [pc, #348]	@ (800f1dc <RadioSetTxConfig+0x210>)
 800f080:	f002 f8ea 	bl	8011258 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f084:	4856      	ldr	r0, [pc, #344]	@ (800f1e0 <RadioSetTxConfig+0x214>)
 800f086:	f002 f9b9 	bl	80113fc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f08a:	4a56      	ldr	r2, [pc, #344]	@ (800f1e4 <RadioSetTxConfig+0x218>)
 800f08c:	f107 0310 	add.w	r3, r7, #16
 800f090:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f094:	e883 0003 	stmia.w	r3, {r0, r1}
 800f098:	f107 0310 	add.w	r3, r7, #16
 800f09c:	4618      	mov	r0, r3
 800f09e:	f001 fc76 	bl	801098e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f0a2:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800f0a6:	f001 fcc1 	bl	8010a2c <SUBGRF_SetWhiteningSeed>
            break;
 800f0aa:	e078      	b.n	800f19e <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f0ac:	4b4a      	ldr	r3, [pc, #296]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800f0b4:	6a3b      	ldr	r3, [r7, #32]
 800f0b6:	b2da      	uxtb	r2, r3
 800f0b8:	4b47      	ldr	r3, [pc, #284]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f0ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800f0be:	4a4a      	ldr	r2, [pc, #296]	@ (800f1e8 <RadioSetTxConfig+0x21c>)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	781a      	ldrb	r2, [r3, #0]
 800f0c6:	4b44      	ldr	r3, [pc, #272]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f0c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800f0cc:	4a42      	ldr	r2, [pc, #264]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f0ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f0d2:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d105      	bne.n	800f0e8 <RadioSetTxConfig+0x11c>
 800f0dc:	6a3b      	ldr	r3, [r7, #32]
 800f0de:	2b0b      	cmp	r3, #11
 800f0e0:	d008      	beq.n	800f0f4 <RadioSetTxConfig+0x128>
 800f0e2:	6a3b      	ldr	r3, [r7, #32]
 800f0e4:	2b0c      	cmp	r3, #12
 800f0e6:	d005      	beq.n	800f0f4 <RadioSetTxConfig+0x128>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	d107      	bne.n	800f0fe <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f0ee:	6a3b      	ldr	r3, [r7, #32]
 800f0f0:	2b0c      	cmp	r3, #12
 800f0f2:	d104      	bne.n	800f0fe <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800f0f4:	4b38      	ldr	r3, [pc, #224]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800f0fc:	e003      	b.n	800f106 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800f0fe:	4b36      	ldr	r3, [pc, #216]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f100:	2200      	movs	r2, #0
 800f102:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f106:	4b34      	ldr	r3, [pc, #208]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f108:	2201      	movs	r2, #1
 800f10a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f10c:	4b32      	ldr	r3, [pc, #200]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f10e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f112:	2b05      	cmp	r3, #5
 800f114:	d004      	beq.n	800f120 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800f116:	4b30      	ldr	r3, [pc, #192]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f118:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f11c:	2b06      	cmp	r3, #6
 800f11e:	d10a      	bne.n	800f136 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800f120:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f122:	2b0b      	cmp	r3, #11
 800f124:	d803      	bhi.n	800f12e <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800f126:	4b2c      	ldr	r3, [pc, #176]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f128:	220c      	movs	r2, #12
 800f12a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800f12c:	e006      	b.n	800f13c <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f12e:	4a2a      	ldr	r2, [pc, #168]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f130:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f132:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800f134:	e002      	b.n	800f13c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f136:	4a28      	ldr	r2, [pc, #160]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f138:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f13a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800f13c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800f140:	4b25      	ldr	r3, [pc, #148]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f142:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f144:	4b29      	ldr	r3, [pc, #164]	@ (800f1ec <RadioSetTxConfig+0x220>)
 800f146:	781a      	ldrb	r2, [r3, #0]
 800f148:	4b23      	ldr	r3, [pc, #140]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f14a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800f14c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800f150:	4b21      	ldr	r3, [pc, #132]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f152:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800f156:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800f15a:	4b1f      	ldr	r3, [pc, #124]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f15c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 800f160:	f000 fab5 	bl	800f6ce <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800f164:	2001      	movs	r0, #1
 800f166:	f7ff fc51 	bl	800ea0c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f16a:	481c      	ldr	r0, [pc, #112]	@ (800f1dc <RadioSetTxConfig+0x210>)
 800f16c:	f002 f874 	bl	8011258 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f170:	481b      	ldr	r0, [pc, #108]	@ (800f1e0 <RadioSetTxConfig+0x214>)
 800f172:	f002 f943 	bl	80113fc <SUBGRF_SetPacketParams>
            break;
 800f176:	e012      	b.n	800f19e <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800f178:	2004      	movs	r0, #4
 800f17a:	f7ff fc47 	bl	800ea0c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800f17e:	4b16      	ldr	r3, [pc, #88]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f180:	2202      	movs	r2, #2
 800f182:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800f186:	4a14      	ldr	r2, [pc, #80]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f188:	6a3b      	ldr	r3, [r7, #32]
 800f18a:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800f18c:	4b12      	ldr	r3, [pc, #72]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f18e:	2216      	movs	r2, #22
 800f190:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f194:	4811      	ldr	r0, [pc, #68]	@ (800f1dc <RadioSetTxConfig+0x210>)
 800f196:	f002 f85f 	bl	8011258 <SUBGRF_SetModulationParams>
            break;
 800f19a:	e000      	b.n	800f19e <RadioSetTxConfig+0x1d2>
            break;
 800f19c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800f19e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f002 fba8 	bl	80118f8 <SUBGRF_SetRfTxPower>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f1ae:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800f1b2:	210e      	movs	r1, #14
 800f1b4:	f640 101f 	movw	r0, #2335	@ 0x91f
 800f1b8:	f002 fa68 	bl	801168c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800f1bc:	4b06      	ldr	r3, [pc, #24]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f1be:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f002 fd77 	bl	8011cb6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800f1c8:	4a03      	ldr	r2, [pc, #12]	@ (800f1d8 <RadioSetTxConfig+0x20c>)
 800f1ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1cc:	6053      	str	r3, [r2, #4]
}
 800f1ce:	bf00      	nop
 800f1d0:	3718      	adds	r7, #24
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	200013d0 	.word	0x200013d0
 800f1dc:	20001408 	.word	0x20001408
 800f1e0:	200013de 	.word	0x200013de
 800f1e4:	08012558 	.word	0x08012558
 800f1e8:	08012b0c 	.word	0x08012b0c
 800f1ec:	200000e4 	.word	0x200000e4

0800f1f0 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
    return true;
 800f1f8:	2301      	movs	r3, #1
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	370c      	adds	r7, #12
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bc80      	pop	{r7}
 800f202:	4770      	bx	lr

0800f204 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800f204:	b480      	push	{r7}
 800f206:	b085      	sub	sp, #20
 800f208:	af00      	add	r7, sp, #0
 800f20a:	4603      	mov	r3, r0
 800f20c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800f20e:	2300      	movs	r3, #0
 800f210:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800f212:	79fb      	ldrb	r3, [r7, #7]
 800f214:	2b0a      	cmp	r3, #10
 800f216:	d83e      	bhi.n	800f296 <RadioGetLoRaBandwidthInHz+0x92>
 800f218:	a201      	add	r2, pc, #4	@ (adr r2, 800f220 <RadioGetLoRaBandwidthInHz+0x1c>)
 800f21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f21e:	bf00      	nop
 800f220:	0800f24d 	.word	0x0800f24d
 800f224:	0800f25d 	.word	0x0800f25d
 800f228:	0800f26d 	.word	0x0800f26d
 800f22c:	0800f27d 	.word	0x0800f27d
 800f230:	0800f285 	.word	0x0800f285
 800f234:	0800f28b 	.word	0x0800f28b
 800f238:	0800f291 	.word	0x0800f291
 800f23c:	0800f297 	.word	0x0800f297
 800f240:	0800f255 	.word	0x0800f255
 800f244:	0800f265 	.word	0x0800f265
 800f248:	0800f275 	.word	0x0800f275
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 800f24c:	f641 6384 	movw	r3, #7812	@ 0x1e84
 800f250:	60fb      	str	r3, [r7, #12]
        break;
 800f252:	e020      	b.n	800f296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800f254:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 800f258:	60fb      	str	r3, [r7, #12]
        break;
 800f25a:	e01c      	b.n	800f296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800f25c:	f643 5309 	movw	r3, #15625	@ 0x3d09
 800f260:	60fb      	str	r3, [r7, #12]
        break;
 800f262:	e018      	b.n	800f296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800f264:	f245 1361 	movw	r3, #20833	@ 0x5161
 800f268:	60fb      	str	r3, [r7, #12]
        break;
 800f26a:	e014      	b.n	800f296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800f26c:	f647 2312 	movw	r3, #31250	@ 0x7a12
 800f270:	60fb      	str	r3, [r7, #12]
        break;
 800f272:	e010      	b.n	800f296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800f274:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 800f278:	60fb      	str	r3, [r7, #12]
        break;
 800f27a:	e00c      	b.n	800f296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800f27c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800f280:	60fb      	str	r3, [r7, #12]
        break;
 800f282:	e008      	b.n	800f296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800f284:	4b07      	ldr	r3, [pc, #28]	@ (800f2a4 <RadioGetLoRaBandwidthInHz+0xa0>)
 800f286:	60fb      	str	r3, [r7, #12]
        break;
 800f288:	e005      	b.n	800f296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800f28a:	4b07      	ldr	r3, [pc, #28]	@ (800f2a8 <RadioGetLoRaBandwidthInHz+0xa4>)
 800f28c:	60fb      	str	r3, [r7, #12]
        break;
 800f28e:	e002      	b.n	800f296 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800f290:	4b06      	ldr	r3, [pc, #24]	@ (800f2ac <RadioGetLoRaBandwidthInHz+0xa8>)
 800f292:	60fb      	str	r3, [r7, #12]
        break;
 800f294:	bf00      	nop
    }

    return bandwidthInHz;
 800f296:	68fb      	ldr	r3, [r7, #12]
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3714      	adds	r7, #20
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bc80      	pop	{r7}
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	0001e848 	.word	0x0001e848
 800f2a8:	0003d090 	.word	0x0003d090
 800f2ac:	0007a120 	.word	0x0007a120

0800f2b0 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b083      	sub	sp, #12
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	4608      	mov	r0, r1
 800f2ba:	4611      	mov	r1, r2
 800f2bc:	461a      	mov	r2, r3
 800f2be:	4603      	mov	r3, r0
 800f2c0:	70fb      	strb	r3, [r7, #3]
 800f2c2:	460b      	mov	r3, r1
 800f2c4:	803b      	strh	r3, [r7, #0]
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 800f2ca:	883b      	ldrh	r3, [r7, #0]
 800f2cc:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f2ce:	78ba      	ldrb	r2, [r7, #2]
 800f2d0:	f082 0201 	eor.w	r2, r2, #1
 800f2d4:	b2d2      	uxtb	r2, r2
 800f2d6:	2a00      	cmp	r2, #0
 800f2d8:	d001      	beq.n	800f2de <RadioGetGfskTimeOnAirNumerator+0x2e>
 800f2da:	2208      	movs	r2, #8
 800f2dc:	e000      	b.n	800f2e0 <RadioGetGfskTimeOnAirNumerator+0x30>
 800f2de:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800f2e0:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f2e2:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800f2e6:	7c3b      	ldrb	r3, [r7, #16]
 800f2e8:	7d39      	ldrb	r1, [r7, #20]
 800f2ea:	2900      	cmp	r1, #0
 800f2ec:	d001      	beq.n	800f2f2 <RadioGetGfskTimeOnAirNumerator+0x42>
 800f2ee:	2102      	movs	r1, #2
 800f2f0:	e000      	b.n	800f2f4 <RadioGetGfskTimeOnAirNumerator+0x44>
 800f2f2:	2100      	movs	r1, #0
 800f2f4:	440b      	add	r3, r1
 800f2f6:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800f2f8:	4413      	add	r3, r2
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	370c      	adds	r7, #12
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bc80      	pop	{r7}
 800f302:	4770      	bx	lr

0800f304 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800f304:	b480      	push	{r7}
 800f306:	b08b      	sub	sp, #44	@ 0x2c
 800f308:	af00      	add	r7, sp, #0
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	4611      	mov	r1, r2
 800f310:	461a      	mov	r2, r3
 800f312:	460b      	mov	r3, r1
 800f314:	71fb      	strb	r3, [r7, #7]
 800f316:	4613      	mov	r3, r2
 800f318:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800f31a:	79fb      	ldrb	r3, [r7, #7]
 800f31c:	3304      	adds	r3, #4
 800f31e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800f320:	2300      	movs	r3, #0
 800f322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	2b05      	cmp	r3, #5
 800f32a:	d002      	beq.n	800f332 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	2b06      	cmp	r3, #6
 800f330:	d104      	bne.n	800f33c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800f332:	88bb      	ldrh	r3, [r7, #4]
 800f334:	2b0b      	cmp	r3, #11
 800f336:	d801      	bhi.n	800f33c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800f338:	230c      	movs	r3, #12
 800f33a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d105      	bne.n	800f34e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	2b0b      	cmp	r3, #11
 800f346:	d008      	beq.n	800f35a <RadioGetLoRaTimeOnAirNumerator+0x56>
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	2b0c      	cmp	r3, #12
 800f34c:	d005      	beq.n	800f35a <RadioGetLoRaTimeOnAirNumerator+0x56>
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2b01      	cmp	r3, #1
 800f352:	d105      	bne.n	800f360 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	2b0c      	cmp	r3, #12
 800f358:	d102      	bne.n	800f360 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800f35a:	2301      	movs	r3, #1
 800f35c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f360:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800f364:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800f366:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f36a:	2a00      	cmp	r2, #0
 800f36c:	d001      	beq.n	800f372 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800f36e:	2210      	movs	r2, #16
 800f370:	e000      	b.n	800f374 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800f372:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f374:	4413      	add	r3, r2
 800f376:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 800f37c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800f37e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800f382:	2a00      	cmp	r2, #0
 800f384:	d001      	beq.n	800f38a <RadioGetLoRaTimeOnAirNumerator+0x86>
 800f386:	2200      	movs	r2, #0
 800f388:	e000      	b.n	800f38c <RadioGetLoRaTimeOnAirNumerator+0x88>
 800f38a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 800f38c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800f38e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	2b06      	cmp	r3, #6
 800f394:	d803      	bhi.n	800f39e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	009b      	lsls	r3, r3, #2
 800f39a:	623b      	str	r3, [r7, #32]
 800f39c:	e00e      	b.n	800f3bc <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	3308      	adds	r3, #8
 800f3a2:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800f3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d004      	beq.n	800f3b6 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	3b02      	subs	r3, #2
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	623b      	str	r3, [r7, #32]
 800f3b4:	e002      	b.n	800f3bc <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	009b      	lsls	r3, r3, #2
 800f3ba:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	da01      	bge.n	800f3c6 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800f3c6:	69fa      	ldr	r2, [r7, #28]
 800f3c8:	6a3b      	ldr	r3, [r7, #32]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	1e5a      	subs	r2, r3, #1
 800f3ce:	6a3b      	ldr	r3, [r7, #32]
 800f3d0:	fb92 f3f3 	sdiv	r3, r2, r3
 800f3d4:	697a      	ldr	r2, [r7, #20]
 800f3d6:	fb03 f202 	mul.w	r2, r3, r2
 800f3da:	88bb      	ldrh	r3, [r7, #4]
 800f3dc:	4413      	add	r3, r2
    int32_t intermediate =
 800f3de:	330c      	adds	r3, #12
 800f3e0:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	2b06      	cmp	r3, #6
 800f3e6:	d802      	bhi.n	800f3ee <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800f3e8:	69bb      	ldr	r3, [r7, #24]
 800f3ea:	3302      	adds	r3, #2
 800f3ec:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	1c5a      	adds	r2, r3, #1
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	3b02      	subs	r3, #2
 800f3f8:	fa02 f303 	lsl.w	r3, r2, r3
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	372c      	adds	r7, #44	@ 0x2c
 800f400:	46bd      	mov	sp, r7
 800f402:	bc80      	pop	{r7}
 800f404:	4770      	bx	lr
	...

0800f408 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b08a      	sub	sp, #40	@ 0x28
 800f40c:	af04      	add	r7, sp, #16
 800f40e:	60b9      	str	r1, [r7, #8]
 800f410:	607a      	str	r2, [r7, #4]
 800f412:	461a      	mov	r2, r3
 800f414:	4603      	mov	r3, r0
 800f416:	73fb      	strb	r3, [r7, #15]
 800f418:	4613      	mov	r3, r2
 800f41a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800f41c:	2300      	movs	r3, #0
 800f41e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800f420:	2301      	movs	r3, #1
 800f422:	613b      	str	r3, [r7, #16]

    switch( modem )
 800f424:	7bfb      	ldrb	r3, [r7, #15]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d002      	beq.n	800f430 <RadioTimeOnAir+0x28>
 800f42a:	2b01      	cmp	r3, #1
 800f42c:	d017      	beq.n	800f45e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800f42e:	e035      	b.n	800f49c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800f430:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 800f434:	8c3a      	ldrh	r2, [r7, #32]
 800f436:	7bb9      	ldrb	r1, [r7, #14]
 800f438:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f43c:	9301      	str	r3, [sp, #4]
 800f43e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f442:	9300      	str	r3, [sp, #0]
 800f444:	4603      	mov	r3, r0
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f7ff ff32 	bl	800f2b0 <RadioGetGfskTimeOnAirNumerator>
 800f44c:	4603      	mov	r3, r0
 800f44e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f452:	fb02 f303 	mul.w	r3, r2, r3
 800f456:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	613b      	str	r3, [r7, #16]
        break;
 800f45c:	e01e      	b.n	800f49c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800f45e:	8c39      	ldrh	r1, [r7, #32]
 800f460:	7bba      	ldrb	r2, [r7, #14]
 800f462:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f466:	9302      	str	r3, [sp, #8]
 800f468:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f46c:	9301      	str	r3, [sp, #4]
 800f46e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f472:	9300      	str	r3, [sp, #0]
 800f474:	460b      	mov	r3, r1
 800f476:	6879      	ldr	r1, [r7, #4]
 800f478:	68b8      	ldr	r0, [r7, #8]
 800f47a:	f7ff ff43 	bl	800f304 <RadioGetLoRaTimeOnAirNumerator>
 800f47e:	4603      	mov	r3, r0
 800f480:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f484:	fb02 f303 	mul.w	r3, r2, r3
 800f488:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800f48a:	4a0a      	ldr	r2, [pc, #40]	@ (800f4b4 <RadioTimeOnAir+0xac>)
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	4413      	add	r3, r2
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	4618      	mov	r0, r3
 800f494:	f7ff feb6 	bl	800f204 <RadioGetLoRaBandwidthInHz>
 800f498:	6138      	str	r0, [r7, #16]
        break;
 800f49a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800f49c:	697a      	ldr	r2, [r7, #20]
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	1e5a      	subs	r2, r3, #1
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	3718      	adds	r7, #24
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	08012b0c 	.word	0x08012b0c

0800f4b8 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b084      	sub	sp, #16
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	f240 2101 	movw	r1, #513	@ 0x201
 800f4cc:	f240 2001 	movw	r0, #513	@ 0x201
 800f4d0:	f001 fd2c 	bl	8010f2c <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800f4d4:	4b70      	ldr	r3, [pc, #448]	@ (800f698 <RadioSend+0x1e0>)
 800f4d6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800f4da:	2101      	movs	r1, #1
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f002 f9e3 	bl	80118a8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800f4e2:	4b6d      	ldr	r3, [pc, #436]	@ (800f698 <RadioSend+0x1e0>)
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	d112      	bne.n	800f510 <RadioSend+0x58>
 800f4ea:	4b6b      	ldr	r3, [pc, #428]	@ (800f698 <RadioSend+0x1e0>)
 800f4ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f4f0:	2b06      	cmp	r3, #6
 800f4f2:	d10d      	bne.n	800f510 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800f4f4:	f640 0089 	movw	r0, #2185	@ 0x889
 800f4f8:	f002 f8ea 	bl	80116d0 <SUBGRF_ReadRegister>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	f023 0304 	bic.w	r3, r3, #4
 800f502:	b2db      	uxtb	r3, r3
 800f504:	4619      	mov	r1, r3
 800f506:	f640 0089 	movw	r0, #2185	@ 0x889
 800f50a:	f002 f8bf 	bl	801168c <SUBGRF_WriteRegister>
 800f50e:	e00c      	b.n	800f52a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800f510:	f640 0089 	movw	r0, #2185	@ 0x889
 800f514:	f002 f8dc 	bl	80116d0 <SUBGRF_ReadRegister>
 800f518:	4603      	mov	r3, r0
 800f51a:	f043 0304 	orr.w	r3, r3, #4
 800f51e:	b2db      	uxtb	r3, r3
 800f520:	4619      	mov	r1, r3
 800f522:	f640 0089 	movw	r0, #2185	@ 0x889
 800f526:	f002 f8b1 	bl	801168c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 800f52a:	4b5b      	ldr	r3, [pc, #364]	@ (800f698 <RadioSend+0x1e0>)
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	2b04      	cmp	r3, #4
 800f530:	f200 80a2 	bhi.w	800f678 <RadioSend+0x1c0>
 800f534:	a201      	add	r2, pc, #4	@ (adr r2, 800f53c <RadioSend+0x84>)
 800f536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f53a:	bf00      	nop
 800f53c:	0800f56b 	.word	0x0800f56b
 800f540:	0800f551 	.word	0x0800f551
 800f544:	0800f56b 	.word	0x0800f56b
 800f548:	0800f5c1 	.word	0x0800f5c1
 800f54c:	0800f5e1 	.word	0x0800f5e1
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800f550:	4a51      	ldr	r2, [pc, #324]	@ (800f698 <RadioSend+0x1e0>)
 800f552:	78fb      	ldrb	r3, [r7, #3]
 800f554:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f556:	4851      	ldr	r0, [pc, #324]	@ (800f69c <RadioSend+0x1e4>)
 800f558:	f001 ff50 	bl	80113fc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800f55c:	78fb      	ldrb	r3, [r7, #3]
 800f55e:	2200      	movs	r2, #0
 800f560:	4619      	mov	r1, r3
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f001 fa00 	bl	8010968 <SUBGRF_SendPayload>
            break;
 800f568:	e087      	b.n	800f67a <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800f56a:	f002 fb96 	bl	8011c9a <RFW_Is_Init>
 800f56e:	4603      	mov	r3, r0
 800f570:	2b01      	cmp	r3, #1
 800f572:	d118      	bne.n	800f5a6 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800f574:	f107 020d 	add.w	r2, r7, #13
 800f578:	78fb      	ldrb	r3, [r7, #3]
 800f57a:	4619      	mov	r1, r3
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f002 fba4 	bl	8011cca <RFW_TransmitInit>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	d10c      	bne.n	800f5a2 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800f588:	7b7a      	ldrb	r2, [r7, #13]
 800f58a:	4b43      	ldr	r3, [pc, #268]	@ (800f698 <RadioSend+0x1e0>)
 800f58c:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f58e:	4843      	ldr	r0, [pc, #268]	@ (800f69c <RadioSend+0x1e4>)
 800f590:	f001 ff34 	bl	80113fc <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800f594:	7b7b      	ldrb	r3, [r7, #13]
 800f596:	2200      	movs	r2, #0
 800f598:	4619      	mov	r1, r3
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f001 f9e4 	bl	8010968 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800f5a0:	e06b      	b.n	800f67a <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 800f5a2:	2303      	movs	r3, #3
 800f5a4:	e073      	b.n	800f68e <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800f5a6:	4a3c      	ldr	r2, [pc, #240]	@ (800f698 <RadioSend+0x1e0>)
 800f5a8:	78fb      	ldrb	r3, [r7, #3]
 800f5aa:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f5ac:	483b      	ldr	r0, [pc, #236]	@ (800f69c <RadioSend+0x1e4>)
 800f5ae:	f001 ff25 	bl	80113fc <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800f5b2:	78fb      	ldrb	r3, [r7, #3]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f001 f9d5 	bl	8010968 <SUBGRF_SendPayload>
            break;
 800f5be:	e05c      	b.n	800f67a <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800f5c0:	4b35      	ldr	r3, [pc, #212]	@ (800f698 <RadioSend+0x1e0>)
 800f5c2:	2202      	movs	r2, #2
 800f5c4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800f5c6:	4a34      	ldr	r2, [pc, #208]	@ (800f698 <RadioSend+0x1e0>)
 800f5c8:	78fb      	ldrb	r3, [r7, #3]
 800f5ca:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f5cc:	4833      	ldr	r0, [pc, #204]	@ (800f69c <RadioSend+0x1e4>)
 800f5ce:	f001 ff15 	bl	80113fc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800f5d2:	78fb      	ldrb	r3, [r7, #3]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f001 f9c5 	bl	8010968 <SUBGRF_SendPayload>
            break;
 800f5de:	e04c      	b.n	800f67a <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800f5e0:	78fb      	ldrb	r3, [r7, #3]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	6879      	ldr	r1, [r7, #4]
 800f5e6:	482e      	ldr	r0, [pc, #184]	@ (800f6a0 <RadioSend+0x1e8>)
 800f5e8:	f000 fc96 	bl	800ff18 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800f5ec:	4b2a      	ldr	r3, [pc, #168]	@ (800f698 <RadioSend+0x1e0>)
 800f5ee:	2202      	movs	r2, #2
 800f5f0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800f5f2:	78fb      	ldrb	r3, [r7, #3]
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	b2da      	uxtb	r2, r3
 800f5f8:	4b27      	ldr	r3, [pc, #156]	@ (800f698 <RadioSend+0x1e0>)
 800f5fa:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f5fc:	4827      	ldr	r0, [pc, #156]	@ (800f69c <RadioSend+0x1e4>)
 800f5fe:	f001 fefd 	bl	80113fc <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800f602:	2100      	movs	r1, #0
 800f604:	20f1      	movs	r0, #241	@ 0xf1
 800f606:	f000 f963 	bl	800f8d0 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800f60a:	2100      	movs	r1, #0
 800f60c:	20f0      	movs	r0, #240	@ 0xf0
 800f60e:	f000 f95f 	bl	800f8d0 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800f612:	4b21      	ldr	r3, [pc, #132]	@ (800f698 <RadioSend+0x1e0>)
 800f614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f616:	2b64      	cmp	r3, #100	@ 0x64
 800f618:	d108      	bne.n	800f62c <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800f61a:	2170      	movs	r1, #112	@ 0x70
 800f61c:	20f3      	movs	r0, #243	@ 0xf3
 800f61e:	f000 f957 	bl	800f8d0 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800f622:	211d      	movs	r1, #29
 800f624:	20f2      	movs	r0, #242	@ 0xf2
 800f626:	f000 f953 	bl	800f8d0 <RadioWrite>
 800f62a:	e007      	b.n	800f63c <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800f62c:	21e1      	movs	r1, #225	@ 0xe1
 800f62e:	20f3      	movs	r0, #243	@ 0xf3
 800f630:	f000 f94e 	bl	800f8d0 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 800f634:	2104      	movs	r1, #4
 800f636:	20f2      	movs	r0, #242	@ 0xf2
 800f638:	f000 f94a 	bl	800f8d0 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 800f63c:	78fb      	ldrb	r3, [r7, #3]
 800f63e:	b29b      	uxth	r3, r3
 800f640:	00db      	lsls	r3, r3, #3
 800f642:	b29b      	uxth	r3, r3
 800f644:	3302      	adds	r3, #2
 800f646:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800f648:	89fb      	ldrh	r3, [r7, #14]
 800f64a:	0a1b      	lsrs	r3, r3, #8
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	4619      	mov	r1, r3
 800f652:	20f4      	movs	r0, #244	@ 0xf4
 800f654:	f000 f93c 	bl	800f8d0 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800f658:	89fb      	ldrh	r3, [r7, #14]
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	4619      	mov	r1, r3
 800f65e:	20f5      	movs	r0, #245	@ 0xf5
 800f660:	f000 f936 	bl	800f8d0 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 800f664:	78fb      	ldrb	r3, [r7, #3]
 800f666:	3301      	adds	r3, #1
 800f668:	b2db      	uxtb	r3, r3
 800f66a:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800f66e:	4619      	mov	r1, r3
 800f670:	480b      	ldr	r0, [pc, #44]	@ (800f6a0 <RadioSend+0x1e8>)
 800f672:	f001 f979 	bl	8010968 <SUBGRF_SendPayload>
            break;
 800f676:	e000      	b.n	800f67a <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800f678:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800f67a:	4b07      	ldr	r3, [pc, #28]	@ (800f698 <RadioSend+0x1e0>)
 800f67c:	685b      	ldr	r3, [r3, #4]
 800f67e:	4619      	mov	r1, r3
 800f680:	4808      	ldr	r0, [pc, #32]	@ (800f6a4 <RadioSend+0x1ec>)
 800f682:	f002 fd95 	bl	80121b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800f686:	4807      	ldr	r0, [pc, #28]	@ (800f6a4 <RadioSend+0x1ec>)
 800f688:	f002 fcb4 	bl	8011ff4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 800f68c:	2300      	movs	r3, #0
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3710      	adds	r7, #16
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	200013d0 	.word	0x200013d0
 800f69c:	200013de 	.word	0x200013de
 800f6a0:	200012cc 	.word	0x200012cc
 800f6a4:	2000142c 	.word	0x2000142c

0800f6a8 <RadioSleep>:

static void RadioSleep( void )
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b082      	sub	sp, #8
 800f6ac:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800f6b2:	793b      	ldrb	r3, [r7, #4]
 800f6b4:	f043 0304 	orr.w	r3, r3, #4
 800f6b8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800f6ba:	7938      	ldrb	r0, [r7, #4]
 800f6bc:	f001 fa30 	bl	8010b20 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800f6c0:	2002      	movs	r0, #2
 800f6c2:	f7f1 fc8d 	bl	8000fe0 <HAL_Delay>
}
 800f6c6:	bf00      	nop
 800f6c8:	3708      	adds	r7, #8
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}

0800f6ce <RadioStandby>:

static void RadioStandby( void )
{
 800f6ce:	b580      	push	{r7, lr}
 800f6d0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800f6d2:	2000      	movs	r0, #0
 800f6d4:	f001 fa56 	bl	8010b84 <SUBGRF_SetStandby>
}
 800f6d8:	bf00      	nop
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 800f6e4:	f002 fad9 	bl	8011c9a <RFW_Is_Init>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	2b01      	cmp	r3, #1
 800f6ec:	d102      	bne.n	800f6f4 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800f6ee:	f002 fafc 	bl	8011cea <RFW_ReceiveInit>
 800f6f2:	e007      	b.n	800f704 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	f240 2162 	movw	r1, #610	@ 0x262
 800f6fc:	f240 2062 	movw	r0, #610	@ 0x262
 800f700:	f001 fc14 	bl	8010f2c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d006      	beq.n	800f718 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f70a:	6879      	ldr	r1, [r7, #4]
 800f70c:	4811      	ldr	r0, [pc, #68]	@ (800f754 <RadioRx+0x78>)
 800f70e:	f002 fd4f 	bl	80121b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800f712:	4810      	ldr	r0, [pc, #64]	@ (800f754 <RadioRx+0x78>)
 800f714:	f002 fc6e 	bl	8011ff4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800f718:	4b0f      	ldr	r3, [pc, #60]	@ (800f758 <RadioRx+0x7c>)
 800f71a:	2200      	movs	r2, #0
 800f71c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f71e:	4b0e      	ldr	r3, [pc, #56]	@ (800f758 <RadioRx+0x7c>)
 800f720:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800f724:	2100      	movs	r1, #0
 800f726:	4618      	mov	r0, r3
 800f728:	f002 f8be 	bl	80118a8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800f72c:	4b0a      	ldr	r3, [pc, #40]	@ (800f758 <RadioRx+0x7c>)
 800f72e:	785b      	ldrb	r3, [r3, #1]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d004      	beq.n	800f73e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800f734:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800f738:	f001 fa60 	bl	8010bfc <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800f73c:	e005      	b.n	800f74a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800f73e:	4b06      	ldr	r3, [pc, #24]	@ (800f758 <RadioRx+0x7c>)
 800f740:	689b      	ldr	r3, [r3, #8]
 800f742:	019b      	lsls	r3, r3, #6
 800f744:	4618      	mov	r0, r3
 800f746:	f001 fa59 	bl	8010bfc <SUBGRF_SetRx>
}
 800f74a:	bf00      	nop
 800f74c:	3708      	adds	r7, #8
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	20001444 	.word	0x20001444
 800f758:	200013d0 	.word	0x200013d0

0800f75c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 800f764:	f002 fa99 	bl	8011c9a <RFW_Is_Init>
 800f768:	4603      	mov	r3, r0
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d102      	bne.n	800f774 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 800f76e:	f002 fabc 	bl	8011cea <RFW_ReceiveInit>
 800f772:	e007      	b.n	800f784 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800f774:	2300      	movs	r3, #0
 800f776:	2200      	movs	r2, #0
 800f778:	f240 2162 	movw	r1, #610	@ 0x262
 800f77c:	f240 2062 	movw	r0, #610	@ 0x262
 800f780:	f001 fbd4 	bl	8010f2c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d006      	beq.n	800f798 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f78a:	6879      	ldr	r1, [r7, #4]
 800f78c:	4811      	ldr	r0, [pc, #68]	@ (800f7d4 <RadioRxBoosted+0x78>)
 800f78e:	f002 fd0f 	bl	80121b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800f792:	4810      	ldr	r0, [pc, #64]	@ (800f7d4 <RadioRxBoosted+0x78>)
 800f794:	f002 fc2e 	bl	8011ff4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800f798:	4b0f      	ldr	r3, [pc, #60]	@ (800f7d8 <RadioRxBoosted+0x7c>)
 800f79a:	2200      	movs	r2, #0
 800f79c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f79e:	4b0e      	ldr	r3, [pc, #56]	@ (800f7d8 <RadioRxBoosted+0x7c>)
 800f7a0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800f7a4:	2100      	movs	r1, #0
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f002 f87e 	bl	80118a8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800f7ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f7d8 <RadioRxBoosted+0x7c>)
 800f7ae:	785b      	ldrb	r3, [r3, #1]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d004      	beq.n	800f7be <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800f7b4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800f7b8:	f001 fa40 	bl	8010c3c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800f7bc:	e005      	b.n	800f7ca <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800f7be:	4b06      	ldr	r3, [pc, #24]	@ (800f7d8 <RadioRxBoosted+0x7c>)
 800f7c0:	689b      	ldr	r3, [r3, #8]
 800f7c2:	019b      	lsls	r3, r3, #6
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f001 fa39 	bl	8010c3c <SUBGRF_SetRxBoosted>
}
 800f7ca:	bf00      	nop
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	20001444 	.word	0x20001444
 800f7d8:	200013d0 	.word	0x200013d0

0800f7dc <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	005a      	lsls	r2, r3, #1
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	4a0c      	ldr	r2, [pc, #48]	@ (800f820 <RadioSetRxDutyCycle+0x44>)
 800f7f0:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f7fa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800f7fe:	f001 fb95 	bl	8010f2c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f802:	4b07      	ldr	r3, [pc, #28]	@ (800f820 <RadioSetRxDutyCycle+0x44>)
 800f804:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800f808:	2100      	movs	r1, #0
 800f80a:	4618      	mov	r0, r3
 800f80c:	f002 f84c 	bl	80118a8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800f810:	6839      	ldr	r1, [r7, #0]
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f001 fa36 	bl	8010c84 <SUBGRF_SetRxDutyCycle>
}
 800f818:	bf00      	nop
 800f81a:	3708      	adds	r7, #8
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	200013d0 	.word	0x200013d0

0800f824 <RadioStartCad>:

static void RadioStartCad( void )
{
 800f824:	b580      	push	{r7, lr}
 800f826:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800f828:	4b09      	ldr	r3, [pc, #36]	@ (800f850 <RadioStartCad+0x2c>)
 800f82a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800f82e:	2100      	movs	r1, #0
 800f830:	4618      	mov	r0, r3
 800f832:	f002 f839 	bl	80118a8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800f836:	2300      	movs	r3, #0
 800f838:	2200      	movs	r2, #0
 800f83a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800f83e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800f842:	f001 fb73 	bl	8010f2c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800f846:	f001 fa49 	bl	8010cdc <SUBGRF_SetCad>
}
 800f84a:	bf00      	nop
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop
 800f850:	200013d0 	.word	0x200013d0

0800f854 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	460b      	mov	r3, r1
 800f85e:	70fb      	strb	r3, [r7, #3]
 800f860:	4613      	mov	r3, r2
 800f862:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 800f864:	883b      	ldrh	r3, [r7, #0]
 800f866:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f86a:	fb02 f303 	mul.w	r3, r2, r3
 800f86e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f001 fbb7 	bl	8010fe4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800f876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f87a:	4618      	mov	r0, r3
 800f87c:	f002 f83c 	bl	80118f8 <SUBGRF_SetRfTxPower>
 800f880:	4603      	mov	r3, r0
 800f882:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800f884:	210e      	movs	r1, #14
 800f886:	f640 101f 	movw	r0, #2335	@ 0x91f
 800f88a:	f001 feff 	bl	801168c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800f88e:	7afb      	ldrb	r3, [r7, #11]
 800f890:	2101      	movs	r1, #1
 800f892:	4618      	mov	r0, r3
 800f894:	f002 f808 	bl	80118a8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800f898:	f001 fa2e 	bl	8010cf8 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800f89c:	68f9      	ldr	r1, [r7, #12]
 800f89e:	4805      	ldr	r0, [pc, #20]	@ (800f8b4 <RadioSetTxContinuousWave+0x60>)
 800f8a0:	f002 fc86 	bl	80121b0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800f8a4:	4803      	ldr	r0, [pc, #12]	@ (800f8b4 <RadioSetTxContinuousWave+0x60>)
 800f8a6:	f002 fba5 	bl	8011ff4 <UTIL_TIMER_Start>
}
 800f8aa:	bf00      	nop
 800f8ac:	3710      	adds	r7, #16
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	2000142c 	.word	0x2000142c

0800f8b8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	4603      	mov	r3, r0
 800f8c0:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800f8c2:	f001 fe50 	bl	8011566 <SUBGRF_GetRssiInst>
 800f8c6:	4603      	mov	r3, r0
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3708      	adds	r7, #8
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b082      	sub	sp, #8
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	460a      	mov	r2, r1
 800f8da:	80fb      	strh	r3, [r7, #6]
 800f8dc:	4613      	mov	r3, r2
 800f8de:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800f8e0:	797a      	ldrb	r2, [r7, #5]
 800f8e2:	88fb      	ldrh	r3, [r7, #6]
 800f8e4:	4611      	mov	r1, r2
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f001 fed0 	bl	801168c <SUBGRF_WriteRegister>
}
 800f8ec:	bf00      	nop
 800f8ee:	3708      	adds	r7, #8
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 800f8fe:	88fb      	ldrh	r3, [r7, #6]
 800f900:	4618      	mov	r0, r3
 800f902:	f001 fee5 	bl	80116d0 <SUBGRF_ReadRegister>
 800f906:	4603      	mov	r3, r0
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3708      	adds	r7, #8
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	4603      	mov	r3, r0
 800f918:	6039      	str	r1, [r7, #0]
 800f91a:	80fb      	strh	r3, [r7, #6]
 800f91c:	4613      	mov	r3, r2
 800f91e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800f920:	797b      	ldrb	r3, [r7, #5]
 800f922:	b29a      	uxth	r2, r3
 800f924:	88fb      	ldrh	r3, [r7, #6]
 800f926:	6839      	ldr	r1, [r7, #0]
 800f928:	4618      	mov	r0, r3
 800f92a:	f001 fef1 	bl	8011710 <SUBGRF_WriteRegisters>
}
 800f92e:	bf00      	nop
 800f930:	3708      	adds	r7, #8
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}

0800f936 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800f936:	b580      	push	{r7, lr}
 800f938:	b082      	sub	sp, #8
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	4603      	mov	r3, r0
 800f93e:	6039      	str	r1, [r7, #0]
 800f940:	80fb      	strh	r3, [r7, #6]
 800f942:	4613      	mov	r3, r2
 800f944:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800f946:	797b      	ldrb	r3, [r7, #5]
 800f948:	b29a      	uxth	r2, r3
 800f94a:	88fb      	ldrh	r3, [r7, #6]
 800f94c:	6839      	ldr	r1, [r7, #0]
 800f94e:	4618      	mov	r0, r3
 800f950:	f001 ff00 	bl	8011754 <SUBGRF_ReadRegisters>
}
 800f954:	bf00      	nop
 800f956:	3708      	adds	r7, #8
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	4603      	mov	r3, r0
 800f964:	460a      	mov	r2, r1
 800f966:	71fb      	strb	r3, [r7, #7]
 800f968:	4613      	mov	r3, r2
 800f96a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800f96c:	79fb      	ldrb	r3, [r7, #7]
 800f96e:	2b01      	cmp	r3, #1
 800f970:	d10a      	bne.n	800f988 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800f972:	4a0e      	ldr	r2, [pc, #56]	@ (800f9ac <RadioSetMaxPayloadLength+0x50>)
 800f974:	79bb      	ldrb	r3, [r7, #6]
 800f976:	7013      	strb	r3, [r2, #0]
 800f978:	4b0c      	ldr	r3, [pc, #48]	@ (800f9ac <RadioSetMaxPayloadLength+0x50>)
 800f97a:	781a      	ldrb	r2, [r3, #0]
 800f97c:	4b0c      	ldr	r3, [pc, #48]	@ (800f9b0 <RadioSetMaxPayloadLength+0x54>)
 800f97e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f980:	480c      	ldr	r0, [pc, #48]	@ (800f9b4 <RadioSetMaxPayloadLength+0x58>)
 800f982:	f001 fd3b 	bl	80113fc <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800f986:	e00d      	b.n	800f9a4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800f988:	4b09      	ldr	r3, [pc, #36]	@ (800f9b0 <RadioSetMaxPayloadLength+0x54>)
 800f98a:	7d5b      	ldrb	r3, [r3, #21]
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d109      	bne.n	800f9a4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800f990:	4a06      	ldr	r2, [pc, #24]	@ (800f9ac <RadioSetMaxPayloadLength+0x50>)
 800f992:	79bb      	ldrb	r3, [r7, #6]
 800f994:	7013      	strb	r3, [r2, #0]
 800f996:	4b05      	ldr	r3, [pc, #20]	@ (800f9ac <RadioSetMaxPayloadLength+0x50>)
 800f998:	781a      	ldrb	r2, [r3, #0]
 800f99a:	4b05      	ldr	r3, [pc, #20]	@ (800f9b0 <RadioSetMaxPayloadLength+0x54>)
 800f99c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f99e:	4805      	ldr	r0, [pc, #20]	@ (800f9b4 <RadioSetMaxPayloadLength+0x58>)
 800f9a0:	f001 fd2c 	bl	80113fc <SUBGRF_SetPacketParams>
}
 800f9a4:	bf00      	nop
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	200000e4 	.word	0x200000e4
 800f9b0:	200013d0 	.word	0x200013d0
 800f9b4:	200013de 	.word	0x200013de

0800f9b8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	4603      	mov	r3, r0
 800f9c0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800f9c2:	4a13      	ldr	r2, [pc, #76]	@ (800fa10 <RadioSetPublicNetwork+0x58>)
 800f9c4:	79fb      	ldrb	r3, [r7, #7]
 800f9c6:	7313      	strb	r3, [r2, #12]
 800f9c8:	4b11      	ldr	r3, [pc, #68]	@ (800fa10 <RadioSetPublicNetwork+0x58>)
 800f9ca:	7b1a      	ldrb	r2, [r3, #12]
 800f9cc:	4b10      	ldr	r3, [pc, #64]	@ (800fa10 <RadioSetPublicNetwork+0x58>)
 800f9ce:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800f9d0:	2001      	movs	r0, #1
 800f9d2:	f7ff f81b 	bl	800ea0c <RadioSetModem>
    if( enable == true )
 800f9d6:	79fb      	ldrb	r3, [r7, #7]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d00a      	beq.n	800f9f2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800f9dc:	2134      	movs	r1, #52	@ 0x34
 800f9de:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800f9e2:	f001 fe53 	bl	801168c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800f9e6:	2144      	movs	r1, #68	@ 0x44
 800f9e8:	f240 7041 	movw	r0, #1857	@ 0x741
 800f9ec:	f001 fe4e 	bl	801168c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800f9f0:	e009      	b.n	800fa06 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800f9f2:	2114      	movs	r1, #20
 800f9f4:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800f9f8:	f001 fe48 	bl	801168c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800f9fc:	2124      	movs	r1, #36	@ 0x24
 800f9fe:	f240 7041 	movw	r0, #1857	@ 0x741
 800fa02:	f001 fe43 	bl	801168c <SUBGRF_WriteRegister>
}
 800fa06:	bf00      	nop
 800fa08:	3708      	adds	r7, #8
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
 800fa0e:	bf00      	nop
 800fa10:	200013d0 	.word	0x200013d0

0800fa14 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800fa18:	f001 ffa2 	bl	8011960 <SUBGRF_GetRadioWakeUpTime>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	3303      	adds	r3, #3
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800fa2c:	f000 f80e 	bl	800fa4c <RadioOnTxTimeoutProcess>
}
 800fa30:	bf00      	nop
 800fa32:	3708      	adds	r7, #8
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800fa40:	f000 f818 	bl	800fa74 <RadioOnRxTimeoutProcess>
}
 800fa44:	bf00      	nop
 800fa46:	3708      	adds	r7, #8
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800fa50:	4b07      	ldr	r3, [pc, #28]	@ (800fa70 <RadioOnTxTimeoutProcess+0x24>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d008      	beq.n	800fa6a <RadioOnTxTimeoutProcess+0x1e>
 800fa58:	4b05      	ldr	r3, [pc, #20]	@ (800fa70 <RadioOnTxTimeoutProcess+0x24>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d003      	beq.n	800fa6a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800fa62:	4b03      	ldr	r3, [pc, #12]	@ (800fa70 <RadioOnTxTimeoutProcess+0x24>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	685b      	ldr	r3, [r3, #4]
 800fa68:	4798      	blx	r3
    }
}
 800fa6a:	bf00      	nop
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	200013cc 	.word	0x200013cc

0800fa74 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800fa78:	4b07      	ldr	r3, [pc, #28]	@ (800fa98 <RadioOnRxTimeoutProcess+0x24>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d008      	beq.n	800fa92 <RadioOnRxTimeoutProcess+0x1e>
 800fa80:	4b05      	ldr	r3, [pc, #20]	@ (800fa98 <RadioOnRxTimeoutProcess+0x24>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	68db      	ldr	r3, [r3, #12]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d003      	beq.n	800fa92 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800fa8a:	4b03      	ldr	r3, [pc, #12]	@ (800fa98 <RadioOnRxTimeoutProcess+0x24>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	68db      	ldr	r3, [r3, #12]
 800fa90:	4798      	blx	r3
    }
}
 800fa92:	bf00      	nop
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop
 800fa98:	200013cc 	.word	0x200013cc

0800fa9c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	4603      	mov	r3, r0
 800faa4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800faa6:	4a05      	ldr	r2, [pc, #20]	@ (800fabc <RadioOnDioIrq+0x20>)
 800faa8:	88fb      	ldrh	r3, [r7, #6]
 800faaa:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 800faae:	f000 f807 	bl	800fac0 <RadioIrqProcess>
}
 800fab2:	bf00      	nop
 800fab4:	3708      	adds	r7, #8
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop
 800fabc:	200013d0 	.word	0x200013d0

0800fac0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800fac0:	b5b0      	push	{r4, r5, r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800fac6:	2300      	movs	r3, #0
 800fac8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800faca:	2300      	movs	r3, #0
 800facc:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800face:	4ba5      	ldr	r3, [pc, #660]	@ (800fd64 <RadioIrqProcess+0x2a4>)
 800fad0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800fad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fad8:	f000 810d 	beq.w	800fcf6 <RadioIrqProcess+0x236>
 800fadc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fae0:	f300 81c0 	bgt.w	800fe64 <RadioIrqProcess+0x3a4>
 800fae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fae8:	f000 80f1 	beq.w	800fcce <RadioIrqProcess+0x20e>
 800faec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800faf0:	f300 81b8 	bgt.w	800fe64 <RadioIrqProcess+0x3a4>
 800faf4:	2b80      	cmp	r3, #128	@ 0x80
 800faf6:	f000 80d6 	beq.w	800fca6 <RadioIrqProcess+0x1e6>
 800fafa:	2b80      	cmp	r3, #128	@ 0x80
 800fafc:	f300 81b2 	bgt.w	800fe64 <RadioIrqProcess+0x3a4>
 800fb00:	2b20      	cmp	r3, #32
 800fb02:	dc49      	bgt.n	800fb98 <RadioIrqProcess+0xd8>
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	f340 81ad 	ble.w	800fe64 <RadioIrqProcess+0x3a4>
 800fb0a:	3b01      	subs	r3, #1
 800fb0c:	2b1f      	cmp	r3, #31
 800fb0e:	f200 81a9 	bhi.w	800fe64 <RadioIrqProcess+0x3a4>
 800fb12:	a201      	add	r2, pc, #4	@ (adr r2, 800fb18 <RadioIrqProcess+0x58>)
 800fb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb18:	0800fba1 	.word	0x0800fba1
 800fb1c:	0800fbdb 	.word	0x0800fbdb
 800fb20:	0800fe65 	.word	0x0800fe65
 800fb24:	0800fd81 	.word	0x0800fd81
 800fb28:	0800fe65 	.word	0x0800fe65
 800fb2c:	0800fe65 	.word	0x0800fe65
 800fb30:	0800fe65 	.word	0x0800fe65
 800fb34:	0800fdef 	.word	0x0800fdef
 800fb38:	0800fe65 	.word	0x0800fe65
 800fb3c:	0800fe65 	.word	0x0800fe65
 800fb40:	0800fe65 	.word	0x0800fe65
 800fb44:	0800fe65 	.word	0x0800fe65
 800fb48:	0800fe65 	.word	0x0800fe65
 800fb4c:	0800fe65 	.word	0x0800fe65
 800fb50:	0800fe65 	.word	0x0800fe65
 800fb54:	0800fe65 	.word	0x0800fe65
 800fb58:	0800fe65 	.word	0x0800fe65
 800fb5c:	0800fe65 	.word	0x0800fe65
 800fb60:	0800fe65 	.word	0x0800fe65
 800fb64:	0800fe65 	.word	0x0800fe65
 800fb68:	0800fe65 	.word	0x0800fe65
 800fb6c:	0800fe65 	.word	0x0800fe65
 800fb70:	0800fe65 	.word	0x0800fe65
 800fb74:	0800fe65 	.word	0x0800fe65
 800fb78:	0800fe65 	.word	0x0800fe65
 800fb7c:	0800fe65 	.word	0x0800fe65
 800fb80:	0800fe65 	.word	0x0800fe65
 800fb84:	0800fe65 	.word	0x0800fe65
 800fb88:	0800fe65 	.word	0x0800fe65
 800fb8c:	0800fe65 	.word	0x0800fe65
 800fb90:	0800fe65 	.word	0x0800fe65
 800fb94:	0800fdff 	.word	0x0800fdff
 800fb98:	2b40      	cmp	r3, #64	@ 0x40
 800fb9a:	f000 814b 	beq.w	800fe34 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 800fb9e:	e161      	b.n	800fe64 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 800fba0:	4871      	ldr	r0, [pc, #452]	@ (800fd68 <RadioIrqProcess+0x2a8>)
 800fba2:	f002 fa95 	bl	80120d0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800fba6:	2000      	movs	r0, #0
 800fba8:	f000 ffec 	bl	8010b84 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800fbac:	f002 f87c 	bl	8011ca8 <RFW_Is_LongPacketModeEnabled>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d101      	bne.n	800fbba <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800fbb6:	f002 f8a0 	bl	8011cfa <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800fbba:	4b6c      	ldr	r3, [pc, #432]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	f000 8152 	beq.w	800fe68 <RadioIrqProcess+0x3a8>
 800fbc4:	4b69      	ldr	r3, [pc, #420]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	f000 814c 	beq.w	800fe68 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 800fbd0:	4b66      	ldr	r3, [pc, #408]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	4798      	blx	r3
        break;
 800fbd8:	e146      	b.n	800fe68 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 800fbda:	4865      	ldr	r0, [pc, #404]	@ (800fd70 <RadioIrqProcess+0x2b0>)
 800fbdc:	f002 fa78 	bl	80120d0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800fbe0:	4b60      	ldr	r3, [pc, #384]	@ (800fd64 <RadioIrqProcess+0x2a4>)
 800fbe2:	785b      	ldrb	r3, [r3, #1]
 800fbe4:	f083 0301 	eor.w	r3, r3, #1
 800fbe8:	b2db      	uxtb	r3, r3
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d014      	beq.n	800fc18 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800fbee:	2000      	movs	r0, #0
 800fbf0:	f000 ffc8 	bl	8010b84 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800fbf4:	2100      	movs	r1, #0
 800fbf6:	f640 1002 	movw	r0, #2306	@ 0x902
 800fbfa:	f001 fd47 	bl	801168c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800fbfe:	f640 1044 	movw	r0, #2372	@ 0x944
 800fc02:	f001 fd65 	bl	80116d0 <SUBGRF_ReadRegister>
 800fc06:	4603      	mov	r3, r0
 800fc08:	f043 0302 	orr.w	r3, r3, #2
 800fc0c:	b2db      	uxtb	r3, r3
 800fc0e:	4619      	mov	r1, r3
 800fc10:	f640 1044 	movw	r0, #2372	@ 0x944
 800fc14:	f001 fd3a 	bl	801168c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800fc18:	1dfb      	adds	r3, r7, #7
 800fc1a:	22ff      	movs	r2, #255	@ 0xff
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	4855      	ldr	r0, [pc, #340]	@ (800fd74 <RadioIrqProcess+0x2b4>)
 800fc20:	f000 fe80 	bl	8010924 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800fc24:	4854      	ldr	r0, [pc, #336]	@ (800fd78 <RadioIrqProcess+0x2b8>)
 800fc26:	f001 fcdf 	bl	80115e8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800fc2a:	4b50      	ldr	r3, [pc, #320]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	f000 811c 	beq.w	800fe6c <RadioIrqProcess+0x3ac>
 800fc34:	4b4d      	ldr	r3, [pc, #308]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	689b      	ldr	r3, [r3, #8]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	f000 8116 	beq.w	800fe6c <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 800fc40:	4b48      	ldr	r3, [pc, #288]	@ (800fd64 <RadioIrqProcess+0x2a4>)
 800fc42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	d10e      	bne.n	800fc68 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800fc4a:	4b48      	ldr	r3, [pc, #288]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	689c      	ldr	r4, [r3, #8]
 800fc50:	79fb      	ldrb	r3, [r7, #7]
 800fc52:	4619      	mov	r1, r3
 800fc54:	4b43      	ldr	r3, [pc, #268]	@ (800fd64 <RadioIrqProcess+0x2a4>)
 800fc56:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	4b41      	ldr	r3, [pc, #260]	@ (800fd64 <RadioIrqProcess+0x2a4>)
 800fc5e:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 800fc62:	4844      	ldr	r0, [pc, #272]	@ (800fd74 <RadioIrqProcess+0x2b4>)
 800fc64:	47a0      	blx	r4
                break;
 800fc66:	e01d      	b.n	800fca4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800fc68:	4b3e      	ldr	r3, [pc, #248]	@ (800fd64 <RadioIrqProcess+0x2a4>)
 800fc6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc6c:	463a      	mov	r2, r7
 800fc6e:	4611      	mov	r1, r2
 800fc70:	4618      	mov	r0, r3
 800fc72:	f001 ff67 	bl	8011b44 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800fc76:	4b3d      	ldr	r3, [pc, #244]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	689c      	ldr	r4, [r3, #8]
 800fc7c:	79fb      	ldrb	r3, [r7, #7]
 800fc7e:	4619      	mov	r1, r3
 800fc80:	4b38      	ldr	r3, [pc, #224]	@ (800fd64 <RadioIrqProcess+0x2a4>)
 800fc82:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 800fc86:	4618      	mov	r0, r3
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800fc8e:	4a3b      	ldr	r2, [pc, #236]	@ (800fd7c <RadioIrqProcess+0x2bc>)
 800fc90:	fb82 5203 	smull	r5, r2, r2, r3
 800fc94:	1192      	asrs	r2, r2, #6
 800fc96:	17db      	asrs	r3, r3, #31
 800fc98:	1ad3      	subs	r3, r2, r3
 800fc9a:	b25b      	sxtb	r3, r3
 800fc9c:	4602      	mov	r2, r0
 800fc9e:	4835      	ldr	r0, [pc, #212]	@ (800fd74 <RadioIrqProcess+0x2b4>)
 800fca0:	47a0      	blx	r4
                break;
 800fca2:	bf00      	nop
        break;
 800fca4:	e0e2      	b.n	800fe6c <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800fca6:	2000      	movs	r0, #0
 800fca8:	f000 ff6c 	bl	8010b84 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800fcac:	4b2f      	ldr	r3, [pc, #188]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	f000 80dd 	beq.w	800fe70 <RadioIrqProcess+0x3b0>
 800fcb6:	4b2d      	ldr	r3, [pc, #180]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	699b      	ldr	r3, [r3, #24]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	f000 80d7 	beq.w	800fe70 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 800fcc2:	4b2a      	ldr	r3, [pc, #168]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	699b      	ldr	r3, [r3, #24]
 800fcc8:	2000      	movs	r0, #0
 800fcca:	4798      	blx	r3
        break;
 800fccc:	e0d0      	b.n	800fe70 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 800fcce:	2000      	movs	r0, #0
 800fcd0:	f000 ff58 	bl	8010b84 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800fcd4:	4b25      	ldr	r3, [pc, #148]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	f000 80cb 	beq.w	800fe74 <RadioIrqProcess+0x3b4>
 800fcde:	4b23      	ldr	r3, [pc, #140]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	699b      	ldr	r3, [r3, #24]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	f000 80c5 	beq.w	800fe74 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 800fcea:	4b20      	ldr	r3, [pc, #128]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	699b      	ldr	r3, [r3, #24]
 800fcf0:	2001      	movs	r0, #1
 800fcf2:	4798      	blx	r3
        break;
 800fcf4:	e0be      	b.n	800fe74 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800fcf6:	f000 fdfb 	bl	80108f0 <SUBGRF_GetOperatingMode>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	2b04      	cmp	r3, #4
 800fcfe:	d115      	bne.n	800fd2c <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 800fd00:	4819      	ldr	r0, [pc, #100]	@ (800fd68 <RadioIrqProcess+0x2a8>)
 800fd02:	f002 f9e5 	bl	80120d0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800fd06:	2000      	movs	r0, #0
 800fd08:	f000 ff3c 	bl	8010b84 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800fd0c:	4b17      	ldr	r3, [pc, #92]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f000 80b1 	beq.w	800fe78 <RadioIrqProcess+0x3b8>
 800fd16:	4b15      	ldr	r3, [pc, #84]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	f000 80ab 	beq.w	800fe78 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 800fd22:	4b12      	ldr	r3, [pc, #72]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	4798      	blx	r3
        break;
 800fd2a:	e0a5      	b.n	800fe78 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800fd2c:	f000 fde0 	bl	80108f0 <SUBGRF_GetOperatingMode>
 800fd30:	4603      	mov	r3, r0
 800fd32:	2b05      	cmp	r3, #5
 800fd34:	f040 80a0 	bne.w	800fe78 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 800fd38:	480d      	ldr	r0, [pc, #52]	@ (800fd70 <RadioIrqProcess+0x2b0>)
 800fd3a:	f002 f9c9 	bl	80120d0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800fd3e:	2000      	movs	r0, #0
 800fd40:	f000 ff20 	bl	8010b84 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800fd44:	4b09      	ldr	r3, [pc, #36]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	f000 8095 	beq.w	800fe78 <RadioIrqProcess+0x3b8>
 800fd4e:	4b07      	ldr	r3, [pc, #28]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	68db      	ldr	r3, [r3, #12]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f000 808f 	beq.w	800fe78 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 800fd5a:	4b04      	ldr	r3, [pc, #16]	@ (800fd6c <RadioIrqProcess+0x2ac>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	4798      	blx	r3
        break;
 800fd62:	e089      	b.n	800fe78 <RadioIrqProcess+0x3b8>
 800fd64:	200013d0 	.word	0x200013d0
 800fd68:	2000142c 	.word	0x2000142c
 800fd6c:	200013cc 	.word	0x200013cc
 800fd70:	20001444 	.word	0x20001444
 800fd74:	200012cc 	.word	0x200012cc
 800fd78:	200013f4 	.word	0x200013f4
 800fd7c:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800fd80:	4b44      	ldr	r3, [pc, #272]	@ (800fe94 <RadioIrqProcess+0x3d4>)
 800fd82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d079      	beq.n	800fe7c <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800fd88:	4a43      	ldr	r2, [pc, #268]	@ (800fe98 <RadioIrqProcess+0x3d8>)
 800fd8a:	4b42      	ldr	r3, [pc, #264]	@ (800fe94 <RadioIrqProcess+0x3d4>)
 800fd8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fd8e:	0c1b      	lsrs	r3, r3, #16
 800fd90:	b2db      	uxtb	r3, r3
 800fd92:	4619      	mov	r1, r3
 800fd94:	f640 1003 	movw	r0, #2307	@ 0x903
 800fd98:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800fd9a:	4a3f      	ldr	r2, [pc, #252]	@ (800fe98 <RadioIrqProcess+0x3d8>)
 800fd9c:	4b3d      	ldr	r3, [pc, #244]	@ (800fe94 <RadioIrqProcess+0x3d4>)
 800fd9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fda0:	0a1b      	lsrs	r3, r3, #8
 800fda2:	b2db      	uxtb	r3, r3
 800fda4:	4619      	mov	r1, r3
 800fda6:	f640 1004 	movw	r0, #2308	@ 0x904
 800fdaa:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800fdac:	4a3a      	ldr	r2, [pc, #232]	@ (800fe98 <RadioIrqProcess+0x3d8>)
 800fdae:	4b39      	ldr	r3, [pc, #228]	@ (800fe94 <RadioIrqProcess+0x3d4>)
 800fdb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	f640 1005 	movw	r0, #2309	@ 0x905
 800fdba:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800fdbc:	4c36      	ldr	r4, [pc, #216]	@ (800fe98 <RadioIrqProcess+0x3d8>)
 800fdbe:	4b37      	ldr	r3, [pc, #220]	@ (800fe9c <RadioIrqProcess+0x3dc>)
 800fdc0:	f640 1002 	movw	r0, #2306	@ 0x902
 800fdc4:	4798      	blx	r3
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	f043 0301 	orr.w	r3, r3, #1
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	4619      	mov	r1, r3
 800fdd0:	f640 1002 	movw	r0, #2306	@ 0x902
 800fdd4:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800fdd6:	4b2f      	ldr	r3, [pc, #188]	@ (800fe94 <RadioIrqProcess+0x3d4>)
 800fdd8:	2200      	movs	r2, #0
 800fdda:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800fddc:	2300      	movs	r3, #0
 800fdde:	2200      	movs	r2, #0
 800fde0:	f240 2162 	movw	r1, #610	@ 0x262
 800fde4:	f240 2062 	movw	r0, #610	@ 0x262
 800fde8:	f001 f8a0 	bl	8010f2c <SUBGRF_SetDioIrqParams>
        break;
 800fdec:	e046      	b.n	800fe7c <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 800fdee:	f001 ff54 	bl	8011c9a <RFW_Is_Init>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d143      	bne.n	800fe80 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 800fdf8:	f001 ff85 	bl	8011d06 <RFW_ReceivePayload>
        break;
 800fdfc:	e040      	b.n	800fe80 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 800fdfe:	4828      	ldr	r0, [pc, #160]	@ (800fea0 <RadioIrqProcess+0x3e0>)
 800fe00:	f002 f966 	bl	80120d0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800fe04:	4b23      	ldr	r3, [pc, #140]	@ (800fe94 <RadioIrqProcess+0x3d4>)
 800fe06:	785b      	ldrb	r3, [r3, #1]
 800fe08:	f083 0301 	eor.w	r3, r3, #1
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d002      	beq.n	800fe18 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800fe12:	2000      	movs	r0, #0
 800fe14:	f000 feb6 	bl	8010b84 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800fe18:	4b22      	ldr	r3, [pc, #136]	@ (800fea4 <RadioIrqProcess+0x3e4>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d031      	beq.n	800fe84 <RadioIrqProcess+0x3c4>
 800fe20:	4b20      	ldr	r3, [pc, #128]	@ (800fea4 <RadioIrqProcess+0x3e4>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	68db      	ldr	r3, [r3, #12]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d02c      	beq.n	800fe84 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 800fe2a:	4b1e      	ldr	r3, [pc, #120]	@ (800fea4 <RadioIrqProcess+0x3e4>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	68db      	ldr	r3, [r3, #12]
 800fe30:	4798      	blx	r3
        break;
 800fe32:	e027      	b.n	800fe84 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 800fe34:	4b17      	ldr	r3, [pc, #92]	@ (800fe94 <RadioIrqProcess+0x3d4>)
 800fe36:	785b      	ldrb	r3, [r3, #1]
 800fe38:	f083 0301 	eor.w	r3, r3, #1
 800fe3c:	b2db      	uxtb	r3, r3
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d002      	beq.n	800fe48 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 800fe42:	2000      	movs	r0, #0
 800fe44:	f000 fe9e 	bl	8010b84 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800fe48:	4b16      	ldr	r3, [pc, #88]	@ (800fea4 <RadioIrqProcess+0x3e4>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d01b      	beq.n	800fe88 <RadioIrqProcess+0x3c8>
 800fe50:	4b14      	ldr	r3, [pc, #80]	@ (800fea4 <RadioIrqProcess+0x3e4>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	691b      	ldr	r3, [r3, #16]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d016      	beq.n	800fe88 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 800fe5a:	4b12      	ldr	r3, [pc, #72]	@ (800fea4 <RadioIrqProcess+0x3e4>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	691b      	ldr	r3, [r3, #16]
 800fe60:	4798      	blx	r3
        break;
 800fe62:	e011      	b.n	800fe88 <RadioIrqProcess+0x3c8>
        break;
 800fe64:	bf00      	nop
 800fe66:	e010      	b.n	800fe8a <RadioIrqProcess+0x3ca>
        break;
 800fe68:	bf00      	nop
 800fe6a:	e00e      	b.n	800fe8a <RadioIrqProcess+0x3ca>
        break;
 800fe6c:	bf00      	nop
 800fe6e:	e00c      	b.n	800fe8a <RadioIrqProcess+0x3ca>
        break;
 800fe70:	bf00      	nop
 800fe72:	e00a      	b.n	800fe8a <RadioIrqProcess+0x3ca>
        break;
 800fe74:	bf00      	nop
 800fe76:	e008      	b.n	800fe8a <RadioIrqProcess+0x3ca>
        break;
 800fe78:	bf00      	nop
 800fe7a:	e006      	b.n	800fe8a <RadioIrqProcess+0x3ca>
        break;
 800fe7c:	bf00      	nop
 800fe7e:	e004      	b.n	800fe8a <RadioIrqProcess+0x3ca>
        break;
 800fe80:	bf00      	nop
 800fe82:	e002      	b.n	800fe8a <RadioIrqProcess+0x3ca>
        break;
 800fe84:	bf00      	nop
 800fe86:	e000      	b.n	800fe8a <RadioIrqProcess+0x3ca>
        break;
 800fe88:	bf00      	nop
    }
}
 800fe8a:	bf00      	nop
 800fe8c:	3708      	adds	r7, #8
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bdb0      	pop	{r4, r5, r7, pc}
 800fe92:	bf00      	nop
 800fe94:	200013d0 	.word	0x200013d0
 800fe98:	0800f8d1 	.word	0x0800f8d1
 800fe9c:	0800f8f5 	.word	0x0800f8f5
 800fea0:	20001444 	.word	0x20001444
 800fea4:	200013cc 	.word	0x200013cc

0800fea8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800feac:	4b09      	ldr	r3, [pc, #36]	@ (800fed4 <RadioTxPrbs+0x2c>)
 800feae:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800feb2:	2101      	movs	r1, #1
 800feb4:	4618      	mov	r0, r3
 800feb6:	f001 fcf7 	bl	80118a8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800feba:	4b07      	ldr	r3, [pc, #28]	@ (800fed8 <RadioTxPrbs+0x30>)
 800febc:	212d      	movs	r1, #45	@ 0x2d
 800febe:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800fec2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800fec4:	f000 ff21 	bl	8010d0a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800fec8:	4804      	ldr	r0, [pc, #16]	@ (800fedc <RadioTxPrbs+0x34>)
 800feca:	f000 fe77 	bl	8010bbc <SUBGRF_SetTx>
}
 800fece:	bf00      	nop
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	200013d0 	.word	0x200013d0
 800fed8:	0800f8d1 	.word	0x0800f8d1
 800fedc:	000fffff 	.word	0x000fffff

0800fee0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b084      	sub	sp, #16
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	4603      	mov	r3, r0
 800fee8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800feea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800feee:	4618      	mov	r0, r3
 800fef0:	f001 fd02 	bl	80118f8 <SUBGRF_SetRfTxPower>
 800fef4:	4603      	mov	r3, r0
 800fef6:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800fef8:	210e      	movs	r1, #14
 800fefa:	f640 101f 	movw	r0, #2335	@ 0x91f
 800fefe:	f001 fbc5 	bl	801168c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800ff02:	7bfb      	ldrb	r3, [r7, #15]
 800ff04:	2101      	movs	r1, #1
 800ff06:	4618      	mov	r0, r3
 800ff08:	f001 fcce 	bl	80118a8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800ff0c:	f000 fef4 	bl	8010cf8 <SUBGRF_SetTxContinuousWave>
}
 800ff10:	bf00      	nop
 800ff12:	3710      	adds	r7, #16
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}

0800ff18 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b089      	sub	sp, #36	@ 0x24
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	60f8      	str	r0, [r7, #12]
 800ff20:	60b9      	str	r1, [r7, #8]
 800ff22:	4613      	mov	r3, r2
 800ff24:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800ff26:	2300      	movs	r3, #0
 800ff28:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800ff2e:	2300      	movs	r3, #0
 800ff30:	61bb      	str	r3, [r7, #24]
 800ff32:	e011      	b.n	800ff58 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800ff34:	69bb      	ldr	r3, [r7, #24]
 800ff36:	68ba      	ldr	r2, [r7, #8]
 800ff38:	4413      	add	r3, r2
 800ff3a:	781a      	ldrb	r2, [r3, #0]
 800ff3c:	69bb      	ldr	r3, [r7, #24]
 800ff3e:	68b9      	ldr	r1, [r7, #8]
 800ff40:	440b      	add	r3, r1
 800ff42:	43d2      	mvns	r2, r2
 800ff44:	b2d2      	uxtb	r2, r2
 800ff46:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800ff48:	69bb      	ldr	r3, [r7, #24]
 800ff4a:	68fa      	ldr	r2, [r7, #12]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	2200      	movs	r2, #0
 800ff50:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800ff52:	69bb      	ldr	r3, [r7, #24]
 800ff54:	3301      	adds	r3, #1
 800ff56:	61bb      	str	r3, [r7, #24]
 800ff58:	79fb      	ldrb	r3, [r7, #7]
 800ff5a:	69ba      	ldr	r2, [r7, #24]
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	dbe9      	blt.n	800ff34 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800ff60:	2300      	movs	r3, #0
 800ff62:	61bb      	str	r3, [r7, #24]
 800ff64:	e049      	b.n	800fffa <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	425a      	negs	r2, r3
 800ff6a:	f003 0307 	and.w	r3, r3, #7
 800ff6e:	f002 0207 	and.w	r2, r2, #7
 800ff72:	bf58      	it	pl
 800ff74:	4253      	negpl	r3, r2
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	f1c3 0307 	rsb	r3, r3, #7
 800ff7c:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800ff7e:	69bb      	ldr	r3, [r7, #24]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	da00      	bge.n	800ff86 <payload_integration+0x6e>
 800ff84:	3307      	adds	r3, #7
 800ff86:	10db      	asrs	r3, r3, #3
 800ff88:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800ff8a:	69bb      	ldr	r3, [r7, #24]
 800ff8c:	3301      	adds	r3, #1
 800ff8e:	425a      	negs	r2, r3
 800ff90:	f003 0307 	and.w	r3, r3, #7
 800ff94:	f002 0207 	and.w	r2, r2, #7
 800ff98:	bf58      	it	pl
 800ff9a:	4253      	negpl	r3, r2
 800ff9c:	b2db      	uxtb	r3, r3
 800ff9e:	f1c3 0307 	rsb	r3, r3, #7
 800ffa2:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800ffa4:	69bb      	ldr	r3, [r7, #24]
 800ffa6:	3301      	adds	r3, #1
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	da00      	bge.n	800ffae <payload_integration+0x96>
 800ffac:	3307      	adds	r3, #7
 800ffae:	10db      	asrs	r3, r3, #3
 800ffb0:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800ffb2:	7dbb      	ldrb	r3, [r7, #22]
 800ffb4:	68ba      	ldr	r2, [r7, #8]
 800ffb6:	4413      	add	r3, r2
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	461a      	mov	r2, r3
 800ffbc:	7dfb      	ldrb	r3, [r7, #23]
 800ffbe:	fa42 f303 	asr.w	r3, r2, r3
 800ffc2:	b2db      	uxtb	r3, r3
 800ffc4:	f003 0301 	and.w	r3, r3, #1
 800ffc8:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800ffca:	7ffa      	ldrb	r2, [r7, #31]
 800ffcc:	7cfb      	ldrb	r3, [r7, #19]
 800ffce:	4053      	eors	r3, r2
 800ffd0:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800ffd2:	7d3b      	ldrb	r3, [r7, #20]
 800ffd4:	68fa      	ldr	r2, [r7, #12]
 800ffd6:	4413      	add	r3, r2
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	b25a      	sxtb	r2, r3
 800ffdc:	7ff9      	ldrb	r1, [r7, #31]
 800ffde:	7d7b      	ldrb	r3, [r7, #21]
 800ffe0:	fa01 f303 	lsl.w	r3, r1, r3
 800ffe4:	b25b      	sxtb	r3, r3
 800ffe6:	4313      	orrs	r3, r2
 800ffe8:	b259      	sxtb	r1, r3
 800ffea:	7d3b      	ldrb	r3, [r7, #20]
 800ffec:	68fa      	ldr	r2, [r7, #12]
 800ffee:	4413      	add	r3, r2
 800fff0:	b2ca      	uxtb	r2, r1
 800fff2:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800fff4:	69bb      	ldr	r3, [r7, #24]
 800fff6:	3301      	adds	r3, #1
 800fff8:	61bb      	str	r3, [r7, #24]
 800fffa:	79fb      	ldrb	r3, [r7, #7]
 800fffc:	00db      	lsls	r3, r3, #3
 800fffe:	69ba      	ldr	r2, [r7, #24]
 8010000:	429a      	cmp	r2, r3
 8010002:	dbb0      	blt.n	800ff66 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8010004:	7ffb      	ldrb	r3, [r7, #31]
 8010006:	01db      	lsls	r3, r3, #7
 8010008:	b25a      	sxtb	r2, r3
 801000a:	7ffb      	ldrb	r3, [r7, #31]
 801000c:	019b      	lsls	r3, r3, #6
 801000e:	b25b      	sxtb	r3, r3
 8010010:	4313      	orrs	r3, r2
 8010012:	b25b      	sxtb	r3, r3
 8010014:	7ffa      	ldrb	r2, [r7, #31]
 8010016:	2a00      	cmp	r2, #0
 8010018:	d101      	bne.n	801001e <payload_integration+0x106>
 801001a:	2220      	movs	r2, #32
 801001c:	e000      	b.n	8010020 <payload_integration+0x108>
 801001e:	2200      	movs	r2, #0
 8010020:	4313      	orrs	r3, r2
 8010022:	b259      	sxtb	r1, r3
 8010024:	79fb      	ldrb	r3, [r7, #7]
 8010026:	68fa      	ldr	r2, [r7, #12]
 8010028:	4413      	add	r3, r2
 801002a:	b2ca      	uxtb	r2, r1
 801002c:	701a      	strb	r2, [r3, #0]
}
 801002e:	bf00      	nop
 8010030:	3724      	adds	r7, #36	@ 0x24
 8010032:	46bd      	mov	sp, r7
 8010034:	bc80      	pop	{r7}
 8010036:	4770      	bx	lr

08010038 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b08c      	sub	sp, #48	@ 0x30
 801003c:	af00      	add	r7, sp, #0
 801003e:	60b9      	str	r1, [r7, #8]
 8010040:	607a      	str	r2, [r7, #4]
 8010042:	603b      	str	r3, [r7, #0]
 8010044:	4603      	mov	r3, r0
 8010046:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8010048:	2300      	movs	r3, #0
 801004a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 801004c:	2300      	movs	r3, #0
 801004e:	623b      	str	r3, [r7, #32]
 8010050:	2300      	movs	r3, #0
 8010052:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8010054:	f001 fe1b 	bl	8011c8e <RFW_DeInit>

    if( rxContinuous != 0 )
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d001      	beq.n	8010062 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801005e:	2300      	movs	r3, #0
 8010060:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2b00      	cmp	r3, #0
 8010066:	bf14      	ite	ne
 8010068:	2301      	movne	r3, #1
 801006a:	2300      	moveq	r3, #0
 801006c:	b2da      	uxtb	r2, r3
 801006e:	4ba4      	ldr	r3, [pc, #656]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 8010070:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8010072:	7bfb      	ldrb	r3, [r7, #15]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d003      	beq.n	8010080 <RadioSetRxGenericConfig+0x48>
 8010078:	2b01      	cmp	r3, #1
 801007a:	f000 80dc 	beq.w	8010236 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801007e:	e196      	b.n	80103ae <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	689b      	ldr	r3, [r3, #8]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d003      	beq.n	8010090 <RadioSetRxGenericConfig+0x58>
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d102      	bne.n	8010096 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8010090:	f04f 33ff 	mov.w	r3, #4294967295
 8010094:	e18c      	b.n	80103b0 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	7f9b      	ldrb	r3, [r3, #30]
 801009a:	2b08      	cmp	r3, #8
 801009c:	d902      	bls.n	80100a4 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801009e:	f04f 33ff 	mov.w	r3, #4294967295
 80100a2:	e185      	b.n	80103b0 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	6919      	ldr	r1, [r3, #16]
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	7f9b      	ldrb	r3, [r3, #30]
 80100ac:	461a      	mov	r2, r3
 80100ae:	f107 0320 	add.w	r3, r7, #32
 80100b2:	4618      	mov	r0, r3
 80100b4:	f001 fe37 	bl	8011d26 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	bf14      	ite	ne
 80100c0:	2301      	movne	r3, #1
 80100c2:	2300      	moveq	r3, #0
 80100c4:	b2db      	uxtb	r3, r3
 80100c6:	4618      	mov	r0, r3
 80100c8:	f000 fe28 	bl	8010d1c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80100cc:	4b8c      	ldr	r3, [pc, #560]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80100ce:	2200      	movs	r2, #0
 80100d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	4a89      	ldr	r2, [pc, #548]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80100da:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	f893 2020 	ldrb.w	r2, [r3, #32]
 80100e2:	4b87      	ldr	r3, [pc, #540]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80100e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	685b      	ldr	r3, [r3, #4]
 80100ec:	4618      	mov	r0, r3
 80100ee:	f001 fd01 	bl	8011af4 <SUBGRF_GetFskBandwidthRegValue>
 80100f2:	4603      	mov	r3, r0
 80100f4:	461a      	mov	r2, r3
 80100f6:	4b82      	ldr	r3, [pc, #520]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80100f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80100fc:	4b80      	ldr	r3, [pc, #512]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80100fe:	2200      	movs	r2, #0
 8010100:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	b29b      	uxth	r3, r3
 8010108:	00db      	lsls	r3, r3, #3
 801010a:	b29a      	uxth	r2, r3
 801010c:	4b7c      	ldr	r3, [pc, #496]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 801010e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	7fda      	ldrb	r2, [r3, #31]
 8010114:	4b7a      	ldr	r3, [pc, #488]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 8010116:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	7f9b      	ldrb	r3, [r3, #30]
 801011c:	00db      	lsls	r3, r3, #3
 801011e:	b2da      	uxtb	r2, r3
 8010120:	4b77      	ldr	r3, [pc, #476]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 8010122:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 801012a:	4b75      	ldr	r3, [pc, #468]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 801012c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8010134:	2b00      	cmp	r3, #0
 8010136:	d105      	bne.n	8010144 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	695b      	ldr	r3, [r3, #20]
 801013c:	b2da      	uxtb	r2, r3
 801013e:	4b70      	ldr	r3, [pc, #448]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 8010140:	759a      	strb	r2, [r3, #22]
 8010142:	e00b      	b.n	801015c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801014a:	2b02      	cmp	r3, #2
 801014c:	d103      	bne.n	8010156 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801014e:	4b6c      	ldr	r3, [pc, #432]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 8010150:	22ff      	movs	r2, #255	@ 0xff
 8010152:	759a      	strb	r2, [r3, #22]
 8010154:	e002      	b.n	801015c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8010156:	4b6a      	ldr	r3, [pc, #424]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 8010158:	22ff      	movs	r2, #255	@ 0xff
 801015a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010162:	2b02      	cmp	r3, #2
 8010164:	d004      	beq.n	8010170 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801016c:	2b02      	cmp	r3, #2
 801016e:	d12d      	bne.n	80101cc <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8010176:	2bf1      	cmp	r3, #241	@ 0xf1
 8010178:	d00c      	beq.n	8010194 <RadioSetRxGenericConfig+0x15c>
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8010180:	2bf2      	cmp	r3, #242	@ 0xf2
 8010182:	d007      	beq.n	8010194 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801018a:	2b01      	cmp	r3, #1
 801018c:	d002      	beq.n	8010194 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801018e:	f04f 33ff 	mov.w	r3, #4294967295
 8010192:	e10d      	b.n	80103b0 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 8010194:	2300      	movs	r3, #0
 8010196:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801019c:	4b59      	ldr	r3, [pc, #356]	@ (8010304 <RadioSetRxGenericConfig+0x2cc>)
 801019e:	6819      	ldr	r1, [r3, #0]
 80101a0:	f107 0314 	add.w	r3, r7, #20
 80101a4:	4a58      	ldr	r2, [pc, #352]	@ (8010308 <RadioSetRxGenericConfig+0x2d0>)
 80101a6:	4618      	mov	r0, r3
 80101a8:	f001 fd64 	bl	8011c74 <RFW_Init>
 80101ac:	4603      	mov	r3, r0
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d002      	beq.n	80101b8 <RadioSetRxGenericConfig+0x180>
                return -1;
 80101b2:	f04f 33ff 	mov.w	r3, #4294967295
 80101b6:	e0fb      	b.n	80103b0 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80101b8:	4b51      	ldr	r3, [pc, #324]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80101ba:	2200      	movs	r2, #0
 80101bc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80101be:	4b50      	ldr	r3, [pc, #320]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80101c0:	2201      	movs	r2, #1
 80101c2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80101c4:	4b4e      	ldr	r3, [pc, #312]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80101c6:	2200      	movs	r2, #0
 80101c8:	755a      	strb	r2, [r3, #21]
        {
 80101ca:	e00e      	b.n	80101ea <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80101d2:	4b4b      	ldr	r3, [pc, #300]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80101d4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80101dc:	4b48      	ldr	r3, [pc, #288]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80101de:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80101e6:	4b46      	ldr	r3, [pc, #280]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80101e8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80101ea:	f7ff fa70 	bl	800f6ce <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80101ee:	2000      	movs	r0, #0
 80101f0:	f7fe fc0c 	bl	800ea0c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80101f4:	4845      	ldr	r0, [pc, #276]	@ (801030c <RadioSetRxGenericConfig+0x2d4>)
 80101f6:	f001 f82f 	bl	8011258 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80101fa:	4845      	ldr	r0, [pc, #276]	@ (8010310 <RadioSetRxGenericConfig+0x2d8>)
 80101fc:	f001 f8fe 	bl	80113fc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8010200:	f107 0320 	add.w	r3, r7, #32
 8010204:	4618      	mov	r0, r3
 8010206:	f000 fbc2 	bl	801098e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	8b9b      	ldrh	r3, [r3, #28]
 801020e:	4618      	mov	r0, r3
 8010210:	f000 fc0c 	bl	8010a2c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	8b1b      	ldrh	r3, [r3, #24]
 8010218:	4618      	mov	r0, r3
 801021a:	f000 fbe7 	bl	80109ec <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8010224:	fb03 f202 	mul.w	r2, r3, r2
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	689b      	ldr	r3, [r3, #8]
 801022c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010230:	4a33      	ldr	r2, [pc, #204]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 8010232:	6093      	str	r3, [r2, #8]
        break;
 8010234:	e0bb      	b.n	80103ae <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801023a:	2b00      	cmp	r3, #0
 801023c:	d102      	bne.n	8010244 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801023e:	f04f 33ff 	mov.w	r3, #4294967295
 8010242:	e0b5      	b.n	80103b0 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801024a:	2b01      	cmp	r3, #1
 801024c:	d105      	bne.n	801025a <RadioSetRxGenericConfig+0x222>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8010254:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010258:	e002      	b.n	8010260 <RadioSetRxGenericConfig+0x228>
            MaxPayloadLength = 0xFF;
 801025a:	23ff      	movs	r3, #255	@ 0xff
 801025c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010264:	2b00      	cmp	r3, #0
 8010266:	bf14      	ite	ne
 8010268:	2301      	movne	r3, #1
 801026a:	2300      	moveq	r3, #0
 801026c:	b2db      	uxtb	r3, r3
 801026e:	4618      	mov	r0, r3
 8010270:	f000 fd54 	bl	8010d1c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	b2db      	uxtb	r3, r3
 8010278:	4618      	mov	r0, r3
 801027a:	f000 fd5e 	bl	8010d3a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801027e:	4b20      	ldr	r3, [pc, #128]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 8010280:	2201      	movs	r2, #1
 8010282:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801028c:	4b1c      	ldr	r3, [pc, #112]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 801028e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8010298:	4b19      	ldr	r3, [pc, #100]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 801029a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80102a4:	4b16      	ldr	r3, [pc, #88]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80102a6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80102b0:	2b02      	cmp	r3, #2
 80102b2:	d010      	beq.n	80102d6 <RadioSetRxGenericConfig+0x29e>
 80102b4:	2b02      	cmp	r3, #2
 80102b6:	dc2d      	bgt.n	8010314 <RadioSetRxGenericConfig+0x2dc>
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d002      	beq.n	80102c2 <RadioSetRxGenericConfig+0x28a>
 80102bc:	2b01      	cmp	r3, #1
 80102be:	d005      	beq.n	80102cc <RadioSetRxGenericConfig+0x294>
            break;
 80102c0:	e028      	b.n	8010314 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80102c2:	4b0f      	ldr	r3, [pc, #60]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80102c4:	2200      	movs	r2, #0
 80102c6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80102ca:	e024      	b.n	8010316 <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80102cc:	4b0c      	ldr	r3, [pc, #48]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80102ce:	2201      	movs	r2, #1
 80102d0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80102d4:	e01f      	b.n	8010316 <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80102dc:	2b0b      	cmp	r3, #11
 80102de:	d004      	beq.n	80102ea <RadioSetRxGenericConfig+0x2b2>
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80102e6:	2b0c      	cmp	r3, #12
 80102e8:	d104      	bne.n	80102f4 <RadioSetRxGenericConfig+0x2bc>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80102ea:	4b05      	ldr	r3, [pc, #20]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80102ec:	2201      	movs	r2, #1
 80102ee:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80102f2:	e010      	b.n	8010316 <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80102f4:	4b02      	ldr	r3, [pc, #8]	@ (8010300 <RadioSetRxGenericConfig+0x2c8>)
 80102f6:	2200      	movs	r2, #0
 80102f8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80102fc:	e00b      	b.n	8010316 <RadioSetRxGenericConfig+0x2de>
 80102fe:	bf00      	nop
 8010300:	200013d0 	.word	0x200013d0
 8010304:	200013cc 	.word	0x200013cc
 8010308:	20001444 	.word	0x20001444
 801030c:	20001408 	.word	0x20001408
 8010310:	200013de 	.word	0x200013de
            break;
 8010314:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8010316:	4b28      	ldr	r3, [pc, #160]	@ (80103b8 <RadioSetRxGenericConfig+0x380>)
 8010318:	2201      	movs	r2, #1
 801031a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8010320:	4b25      	ldr	r3, [pc, #148]	@ (80103b8 <RadioSetRxGenericConfig+0x380>)
 8010322:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 801032a:	4b23      	ldr	r3, [pc, #140]	@ (80103b8 <RadioSetRxGenericConfig+0x380>)
 801032c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801032e:	4a22      	ldr	r2, [pc, #136]	@ (80103b8 <RadioSetRxGenericConfig+0x380>)
 8010330:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010334:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 801033c:	4b1e      	ldr	r3, [pc, #120]	@ (80103b8 <RadioSetRxGenericConfig+0x380>)
 801033e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8010348:	4b1b      	ldr	r3, [pc, #108]	@ (80103b8 <RadioSetRxGenericConfig+0x380>)
 801034a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 801034e:	f7ff f9be 	bl	800f6ce <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8010352:	2001      	movs	r0, #1
 8010354:	f7fe fb5a 	bl	800ea0c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010358:	4818      	ldr	r0, [pc, #96]	@ (80103bc <RadioSetRxGenericConfig+0x384>)
 801035a:	f000 ff7d 	bl	8011258 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801035e:	4818      	ldr	r0, [pc, #96]	@ (80103c0 <RadioSetRxGenericConfig+0x388>)
 8010360:	f001 f84c 	bl	80113fc <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8010364:	4b14      	ldr	r3, [pc, #80]	@ (80103b8 <RadioSetRxGenericConfig+0x380>)
 8010366:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801036a:	2b01      	cmp	r3, #1
 801036c:	d10d      	bne.n	801038a <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801036e:	f240 7036 	movw	r0, #1846	@ 0x736
 8010372:	f001 f9ad 	bl	80116d0 <SUBGRF_ReadRegister>
 8010376:	4603      	mov	r3, r0
 8010378:	f023 0304 	bic.w	r3, r3, #4
 801037c:	b2db      	uxtb	r3, r3
 801037e:	4619      	mov	r1, r3
 8010380:	f240 7036 	movw	r0, #1846	@ 0x736
 8010384:	f001 f982 	bl	801168c <SUBGRF_WriteRegister>
 8010388:	e00c      	b.n	80103a4 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801038a:	f240 7036 	movw	r0, #1846	@ 0x736
 801038e:	f001 f99f 	bl	80116d0 <SUBGRF_ReadRegister>
 8010392:	4603      	mov	r3, r0
 8010394:	f043 0304 	orr.w	r3, r3, #4
 8010398:	b2db      	uxtb	r3, r3
 801039a:	4619      	mov	r1, r3
 801039c:	f240 7036 	movw	r0, #1846	@ 0x736
 80103a0:	f001 f974 	bl	801168c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80103a4:	4b04      	ldr	r3, [pc, #16]	@ (80103b8 <RadioSetRxGenericConfig+0x380>)
 80103a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80103aa:	609a      	str	r2, [r3, #8]
        break;
 80103ac:	bf00      	nop
    }
    return status;
 80103ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3730      	adds	r7, #48	@ 0x30
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	200013d0 	.word	0x200013d0
 80103bc:	20001408 	.word	0x20001408
 80103c0:	200013de 	.word	0x200013de

080103c4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b08e      	sub	sp, #56	@ 0x38
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	60b9      	str	r1, [r7, #8]
 80103cc:	607b      	str	r3, [r7, #4]
 80103ce:	4603      	mov	r3, r0
 80103d0:	73fb      	strb	r3, [r7, #15]
 80103d2:	4613      	mov	r3, r2
 80103d4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 80103d6:	2300      	movs	r3, #0
 80103d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80103da:	2300      	movs	r3, #0
 80103dc:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80103de:	f001 fc56 	bl	8011c8e <RFW_DeInit>
    switch( modem )
 80103e2:	7bfb      	ldrb	r3, [r7, #15]
 80103e4:	2b03      	cmp	r3, #3
 80103e6:	f200 8204 	bhi.w	80107f2 <RadioSetTxGenericConfig+0x42e>
 80103ea:	a201      	add	r2, pc, #4	@ (adr r2, 80103f0 <RadioSetTxGenericConfig+0x2c>)
 80103ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103f0:	08010575 	.word	0x08010575
 80103f4:	080106bd 	.word	0x080106bd
 80103f8:	080107b5 	.word	0x080107b5
 80103fc:	08010401 	.word	0x08010401
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	7c9b      	ldrb	r3, [r3, #18]
 8010404:	2b08      	cmp	r3, #8
 8010406:	d902      	bls.n	801040e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8010408:	f04f 33ff 	mov.w	r3, #4294967295
 801040c:	e206      	b.n	801081c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	6899      	ldr	r1, [r3, #8]
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	7c9b      	ldrb	r3, [r3, #18]
 8010416:	461a      	mov	r2, r3
 8010418:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801041c:	4618      	mov	r0, r3
 801041e:	f001 fc82 	bl	8011d26 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d102      	bne.n	8010430 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801042a:	f04f 33ff 	mov.w	r3, #4294967295
 801042e:	e1f5      	b.n	801081c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010438:	4293      	cmp	r3, r2
 801043a:	d813      	bhi.n	8010464 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801043c:	2302      	movs	r3, #2
 801043e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8010442:	4b99      	ldr	r3, [pc, #612]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 8010444:	2203      	movs	r2, #3
 8010446:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8010448:	4b97      	ldr	r3, [pc, #604]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 801044a:	2203      	movs	r2, #3
 801044c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4a94      	ldr	r2, [pc, #592]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 8010456:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	7cda      	ldrb	r2, [r3, #19]
 801045c:	4b92      	ldr	r3, [pc, #584]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 801045e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010462:	e017      	b.n	8010494 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8010464:	2300      	movs	r3, #0
 8010466:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801046a:	4b8f      	ldr	r3, [pc, #572]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 801046c:	2200      	movs	r2, #0
 801046e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010470:	4b8d      	ldr	r3, [pc, #564]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 8010472:	2200      	movs	r2, #0
 8010474:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4a8a      	ldr	r2, [pc, #552]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 801047e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	7cda      	ldrb	r2, [r3, #19]
 8010484:	4b88      	ldr	r3, [pc, #544]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 8010486:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	089b      	lsrs	r3, r3, #2
 8010490:	4a85      	ldr	r2, [pc, #532]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 8010492:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	685b      	ldr	r3, [r3, #4]
 8010498:	b29b      	uxth	r3, r3
 801049a:	00db      	lsls	r3, r3, #3
 801049c:	b29a      	uxth	r2, r3
 801049e:	4b82      	ldr	r3, [pc, #520]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 80104a0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80104a2:	4b81      	ldr	r3, [pc, #516]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 80104a4:	2204      	movs	r2, #4
 80104a6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	7c9b      	ldrb	r3, [r3, #18]
 80104ac:	00db      	lsls	r3, r3, #3
 80104ae:	b2da      	uxtb	r2, r3
 80104b0:	4b7d      	ldr	r3, [pc, #500]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 80104b2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80104b4:	4b7c      	ldr	r3, [pc, #496]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 80104b6:	2200      	movs	r2, #0
 80104b8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	7d9b      	ldrb	r3, [r3, #22]
 80104be:	2b02      	cmp	r3, #2
 80104c0:	d003      	beq.n	80104ca <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80104c2:	68bb      	ldr	r3, [r7, #8]
 80104c4:	7d1b      	ldrb	r3, [r3, #20]
 80104c6:	2b02      	cmp	r3, #2
 80104c8:	d12b      	bne.n	8010522 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	7d5b      	ldrb	r3, [r3, #21]
 80104ce:	2bf1      	cmp	r3, #241	@ 0xf1
 80104d0:	d00a      	beq.n	80104e8 <RadioSetTxGenericConfig+0x124>
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	7d5b      	ldrb	r3, [r3, #21]
 80104d6:	2bf2      	cmp	r3, #242	@ 0xf2
 80104d8:	d006      	beq.n	80104e8 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	7d5b      	ldrb	r3, [r3, #21]
 80104de:	2b01      	cmp	r3, #1
 80104e0:	d002      	beq.n	80104e8 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 80104e2:	f04f 33ff 	mov.w	r3, #4294967295
 80104e6:	e199      	b.n	801081c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 80104ec:	2301      	movs	r3, #1
 80104ee:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80104f2:	4b6e      	ldr	r3, [pc, #440]	@ (80106ac <RadioSetTxGenericConfig+0x2e8>)
 80104f4:	6819      	ldr	r1, [r3, #0]
 80104f6:	f107 0320 	add.w	r3, r7, #32
 80104fa:	4a6d      	ldr	r2, [pc, #436]	@ (80106b0 <RadioSetTxGenericConfig+0x2ec>)
 80104fc:	4618      	mov	r0, r3
 80104fe:	f001 fbb9 	bl	8011c74 <RFW_Init>
 8010502:	4603      	mov	r3, r0
 8010504:	2b00      	cmp	r3, #0
 8010506:	d002      	beq.n	801050e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8010508:	f04f 33ff 	mov.w	r3, #4294967295
 801050c:	e186      	b.n	801081c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801050e:	4b66      	ldr	r3, [pc, #408]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 8010510:	2200      	movs	r2, #0
 8010512:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8010514:	4b64      	ldr	r3, [pc, #400]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 8010516:	2201      	movs	r2, #1
 8010518:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801051a:	4b63      	ldr	r3, [pc, #396]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 801051c:	2200      	movs	r2, #0
 801051e:	755a      	strb	r2, [r3, #21]
        {
 8010520:	e00b      	b.n	801053a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	7d5a      	ldrb	r2, [r3, #21]
 8010526:	4b60      	ldr	r3, [pc, #384]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 8010528:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	7d9a      	ldrb	r2, [r3, #22]
 801052e:	4b5e      	ldr	r3, [pc, #376]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 8010530:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	7d1a      	ldrb	r2, [r3, #20]
 8010536:	4b5c      	ldr	r3, [pc, #368]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 8010538:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801053a:	f7ff f8c8 	bl	800f6ce <RadioStandby>
        RadioSetModem( radio_modem );
 801053e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010542:	4618      	mov	r0, r3
 8010544:	f7fe fa62 	bl	800ea0c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010548:	485a      	ldr	r0, [pc, #360]	@ (80106b4 <RadioSetTxGenericConfig+0x2f0>)
 801054a:	f000 fe85 	bl	8011258 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801054e:	485a      	ldr	r0, [pc, #360]	@ (80106b8 <RadioSetTxGenericConfig+0x2f4>)
 8010550:	f000 ff54 	bl	80113fc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8010554:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010558:	4618      	mov	r0, r3
 801055a:	f000 fa18 	bl	801098e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	8a1b      	ldrh	r3, [r3, #16]
 8010562:	4618      	mov	r0, r3
 8010564:	f000 fa62 	bl	8010a2c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	899b      	ldrh	r3, [r3, #12]
 801056c:	4618      	mov	r0, r3
 801056e:	f000 fa3d 	bl	80109ec <SUBGRF_SetCrcPolynomial>
        break;
 8010572:	e13f      	b.n	80107f4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d102      	bne.n	8010582 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801057c:	f04f 33ff 	mov.w	r3, #4294967295
 8010580:	e14c      	b.n	801081c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	7c9b      	ldrb	r3, [r3, #18]
 8010586:	2b08      	cmp	r3, #8
 8010588:	d902      	bls.n	8010590 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801058a:	f04f 33ff 	mov.w	r3, #4294967295
 801058e:	e145      	b.n	801081c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	6899      	ldr	r1, [r3, #8]
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	7c9b      	ldrb	r3, [r3, #18]
 8010598:	461a      	mov	r2, r3
 801059a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801059e:	4618      	mov	r0, r3
 80105a0:	f001 fbc1 	bl	8011d26 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80105a4:	4b40      	ldr	r3, [pc, #256]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 80105a6:	2200      	movs	r2, #0
 80105a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	4a3d      	ldr	r2, [pc, #244]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 80105b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	7cda      	ldrb	r2, [r3, #19]
 80105b8:	4b3b      	ldr	r3, [pc, #236]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 80105ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	699b      	ldr	r3, [r3, #24]
 80105c2:	4a39      	ldr	r2, [pc, #228]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 80105c4:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80105c6:	4b38      	ldr	r3, [pc, #224]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 80105c8:	2200      	movs	r2, #0
 80105ca:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	b29b      	uxth	r3, r3
 80105d2:	00db      	lsls	r3, r3, #3
 80105d4:	b29a      	uxth	r2, r3
 80105d6:	4b34      	ldr	r3, [pc, #208]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 80105d8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80105da:	4b33      	ldr	r3, [pc, #204]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 80105dc:	2204      	movs	r2, #4
 80105de:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	7c9b      	ldrb	r3, [r3, #18]
 80105e4:	00db      	lsls	r3, r3, #3
 80105e6:	b2da      	uxtb	r2, r3
 80105e8:	4b2f      	ldr	r3, [pc, #188]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 80105ea:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80105ec:	4b2e      	ldr	r3, [pc, #184]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 80105ee:	2200      	movs	r2, #0
 80105f0:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	7d9b      	ldrb	r3, [r3, #22]
 80105f6:	2b02      	cmp	r3, #2
 80105f8:	d003      	beq.n	8010602 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	7d1b      	ldrb	r3, [r3, #20]
 80105fe:	2b02      	cmp	r3, #2
 8010600:	d12a      	bne.n	8010658 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	7d5b      	ldrb	r3, [r3, #21]
 8010606:	2bf1      	cmp	r3, #241	@ 0xf1
 8010608:	d00a      	beq.n	8010620 <RadioSetTxGenericConfig+0x25c>
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	7d5b      	ldrb	r3, [r3, #21]
 801060e:	2bf2      	cmp	r3, #242	@ 0xf2
 8010610:	d006      	beq.n	8010620 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	7d5b      	ldrb	r3, [r3, #21]
 8010616:	2b01      	cmp	r3, #1
 8010618:	d002      	beq.n	8010620 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801061a:	f04f 33ff 	mov.w	r3, #4294967295
 801061e:	e0fd      	b.n	801081c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8010620:	2301      	movs	r3, #1
 8010622:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8010628:	4b20      	ldr	r3, [pc, #128]	@ (80106ac <RadioSetTxGenericConfig+0x2e8>)
 801062a:	6819      	ldr	r1, [r3, #0]
 801062c:	f107 0314 	add.w	r3, r7, #20
 8010630:	4a1f      	ldr	r2, [pc, #124]	@ (80106b0 <RadioSetTxGenericConfig+0x2ec>)
 8010632:	4618      	mov	r0, r3
 8010634:	f001 fb1e 	bl	8011c74 <RFW_Init>
 8010638:	4603      	mov	r3, r0
 801063a:	2b00      	cmp	r3, #0
 801063c:	d002      	beq.n	8010644 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801063e:	f04f 33ff 	mov.w	r3, #4294967295
 8010642:	e0eb      	b.n	801081c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8010644:	4b18      	ldr	r3, [pc, #96]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 8010646:	2200      	movs	r2, #0
 8010648:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801064a:	4b17      	ldr	r3, [pc, #92]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 801064c:	2201      	movs	r2, #1
 801064e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8010650:	4b15      	ldr	r3, [pc, #84]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 8010652:	2200      	movs	r2, #0
 8010654:	755a      	strb	r2, [r3, #21]
        {
 8010656:	e00b      	b.n	8010670 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	7d5a      	ldrb	r2, [r3, #21]
 801065c:	4b12      	ldr	r3, [pc, #72]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 801065e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	7d9a      	ldrb	r2, [r3, #22]
 8010664:	4b10      	ldr	r3, [pc, #64]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 8010666:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	7d1a      	ldrb	r2, [r3, #20]
 801066c:	4b0e      	ldr	r3, [pc, #56]	@ (80106a8 <RadioSetTxGenericConfig+0x2e4>)
 801066e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8010670:	f7ff f82d 	bl	800f6ce <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8010674:	2000      	movs	r0, #0
 8010676:	f7fe f9c9 	bl	800ea0c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801067a:	480e      	ldr	r0, [pc, #56]	@ (80106b4 <RadioSetTxGenericConfig+0x2f0>)
 801067c:	f000 fdec 	bl	8011258 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010680:	480d      	ldr	r0, [pc, #52]	@ (80106b8 <RadioSetTxGenericConfig+0x2f4>)
 8010682:	f000 febb 	bl	80113fc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8010686:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801068a:	4618      	mov	r0, r3
 801068c:	f000 f97f 	bl	801098e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	8a1b      	ldrh	r3, [r3, #16]
 8010694:	4618      	mov	r0, r3
 8010696:	f000 f9c9 	bl	8010a2c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	899b      	ldrh	r3, [r3, #12]
 801069e:	4618      	mov	r0, r3
 80106a0:	f000 f9a4 	bl	80109ec <SUBGRF_SetCrcPolynomial>
        break;
 80106a4:	e0a6      	b.n	80107f4 <RadioSetTxGenericConfig+0x430>
 80106a6:	bf00      	nop
 80106a8:	200013d0 	.word	0x200013d0
 80106ac:	200013cc 	.word	0x200013cc
 80106b0:	2000142c 	.word	0x2000142c
 80106b4:	20001408 	.word	0x20001408
 80106b8:	200013de 	.word	0x200013de
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80106bc:	4b59      	ldr	r3, [pc, #356]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 80106be:	2201      	movs	r2, #1
 80106c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	781a      	ldrb	r2, [r3, #0]
 80106c8:	4b56      	ldr	r3, [pc, #344]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 80106ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	785a      	ldrb	r2, [r3, #1]
 80106d2:	4b54      	ldr	r3, [pc, #336]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 80106d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	789a      	ldrb	r2, [r3, #2]
 80106dc:	4b51      	ldr	r3, [pc, #324]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 80106de:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	78db      	ldrb	r3, [r3, #3]
 80106e6:	2b02      	cmp	r3, #2
 80106e8:	d010      	beq.n	801070c <RadioSetTxGenericConfig+0x348>
 80106ea:	2b02      	cmp	r3, #2
 80106ec:	dc20      	bgt.n	8010730 <RadioSetTxGenericConfig+0x36c>
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d002      	beq.n	80106f8 <RadioSetTxGenericConfig+0x334>
 80106f2:	2b01      	cmp	r3, #1
 80106f4:	d005      	beq.n	8010702 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 80106f6:	e01b      	b.n	8010730 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80106f8:	4b4a      	ldr	r3, [pc, #296]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 80106fa:	2200      	movs	r2, #0
 80106fc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8010700:	e017      	b.n	8010732 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8010702:	4b48      	ldr	r3, [pc, #288]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 8010704:	2201      	movs	r2, #1
 8010706:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801070a:	e012      	b.n	8010732 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	781b      	ldrb	r3, [r3, #0]
 8010710:	2b0b      	cmp	r3, #11
 8010712:	d003      	beq.n	801071c <RadioSetTxGenericConfig+0x358>
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	2b0c      	cmp	r3, #12
 801071a:	d104      	bne.n	8010726 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801071c:	4b41      	ldr	r3, [pc, #260]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 801071e:	2201      	movs	r2, #1
 8010720:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8010724:	e005      	b.n	8010732 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8010726:	4b3f      	ldr	r3, [pc, #252]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 8010728:	2200      	movs	r2, #0
 801072a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801072e:	e000      	b.n	8010732 <RadioSetTxGenericConfig+0x36e>
            break;
 8010730:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8010732:	4b3c      	ldr	r3, [pc, #240]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 8010734:	2201      	movs	r2, #1
 8010736:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	889a      	ldrh	r2, [r3, #4]
 801073c:	4b39      	ldr	r3, [pc, #228]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 801073e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	799a      	ldrb	r2, [r3, #6]
 8010744:	4b37      	ldr	r3, [pc, #220]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 8010746:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	79da      	ldrb	r2, [r3, #7]
 801074c:	4b35      	ldr	r3, [pc, #212]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 801074e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	7a1a      	ldrb	r2, [r3, #8]
 8010756:	4b33      	ldr	r3, [pc, #204]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 8010758:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 801075c:	f7fe ffb7 	bl	800f6ce <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8010760:	2001      	movs	r0, #1
 8010762:	f7fe f953 	bl	800ea0c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010766:	4830      	ldr	r0, [pc, #192]	@ (8010828 <RadioSetTxGenericConfig+0x464>)
 8010768:	f000 fd76 	bl	8011258 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801076c:	482f      	ldr	r0, [pc, #188]	@ (801082c <RadioSetTxGenericConfig+0x468>)
 801076e:	f000 fe45 	bl	80113fc <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8010772:	4b2c      	ldr	r3, [pc, #176]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 8010774:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010778:	2b06      	cmp	r3, #6
 801077a:	d10d      	bne.n	8010798 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801077c:	f640 0089 	movw	r0, #2185	@ 0x889
 8010780:	f000 ffa6 	bl	80116d0 <SUBGRF_ReadRegister>
 8010784:	4603      	mov	r3, r0
 8010786:	f023 0304 	bic.w	r3, r3, #4
 801078a:	b2db      	uxtb	r3, r3
 801078c:	4619      	mov	r1, r3
 801078e:	f640 0089 	movw	r0, #2185	@ 0x889
 8010792:	f000 ff7b 	bl	801168c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8010796:	e02d      	b.n	80107f4 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8010798:	f640 0089 	movw	r0, #2185	@ 0x889
 801079c:	f000 ff98 	bl	80116d0 <SUBGRF_ReadRegister>
 80107a0:	4603      	mov	r3, r0
 80107a2:	f043 0304 	orr.w	r3, r3, #4
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	4619      	mov	r1, r3
 80107aa:	f640 0089 	movw	r0, #2185	@ 0x889
 80107ae:	f000 ff6d 	bl	801168c <SUBGRF_WriteRegister>
        break;
 80107b2:	e01f      	b.n	80107f4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d004      	beq.n	80107c6 <RadioSetTxGenericConfig+0x402>
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80107c4:	d902      	bls.n	80107cc <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 80107c6:	f04f 33ff 	mov.w	r3, #4294967295
 80107ca:	e027      	b.n	801081c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 80107cc:	2003      	movs	r0, #3
 80107ce:	f7fe f91d 	bl	800ea0c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80107d2:	4b14      	ldr	r3, [pc, #80]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 80107d4:	2202      	movs	r2, #2
 80107d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4a11      	ldr	r2, [pc, #68]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 80107e0:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80107e2:	4b10      	ldr	r3, [pc, #64]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 80107e4:	2216      	movs	r2, #22
 80107e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80107ea:	480f      	ldr	r0, [pc, #60]	@ (8010828 <RadioSetTxGenericConfig+0x464>)
 80107ec:	f000 fd34 	bl	8011258 <SUBGRF_SetModulationParams>
        break;
 80107f0:	e000      	b.n	80107f4 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 80107f2:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80107f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80107f8:	4618      	mov	r0, r3
 80107fa:	f001 f87d 	bl	80118f8 <SUBGRF_SetRfTxPower>
 80107fe:	4603      	mov	r3, r0
 8010800:	461a      	mov	r2, r3
 8010802:	4b08      	ldr	r3, [pc, #32]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 8010804:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8010808:	4b06      	ldr	r3, [pc, #24]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 801080a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801080e:	4618      	mov	r0, r3
 8010810:	f001 fa51 	bl	8011cb6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8010814:	4a03      	ldr	r2, [pc, #12]	@ (8010824 <RadioSetTxGenericConfig+0x460>)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6053      	str	r3, [r2, #4]
    return 0;
 801081a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801081c:	4618      	mov	r0, r3
 801081e:	3738      	adds	r7, #56	@ 0x38
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	200013d0 	.word	0x200013d0
 8010828:	20001408 	.word	0x20001408
 801082c:	200013de 	.word	0x200013de

08010830 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8010830:	b480      	push	{r7}
 8010832:	b085      	sub	sp, #20
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8010838:	2301      	movs	r3, #1
 801083a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801083c:	7bfb      	ldrb	r3, [r7, #15]
}
 801083e:	4618      	mov	r0, r3
 8010840:	3714      	adds	r7, #20
 8010842:	46bd      	mov	sp, r7
 8010844:	bc80      	pop	{r7}
 8010846:	4770      	bx	lr

08010848 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8010848:	b480      	push	{r7}
 801084a:	b083      	sub	sp, #12
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8010852:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8010854:	4618      	mov	r0, r3
 8010856:	370c      	adds	r7, #12
 8010858:	46bd      	mov	sp, r7
 801085a:	bc80      	pop	{r7}
 801085c:	4770      	bx	lr
	...

08010860 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d002      	beq.n	8010874 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801086e:	4a1d      	ldr	r2, [pc, #116]	@ (80108e4 <SUBGRF_Init+0x84>)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8010874:	f7f0 fa94 	bl	8000da0 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8010878:	2002      	movs	r0, #2
 801087a:	f001 f919 	bl	8011ab0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801087e:	4b1a      	ldr	r3, [pc, #104]	@ (80108e8 <SUBGRF_Init+0x88>)
 8010880:	2200      	movs	r2, #0
 8010882:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8010884:	2000      	movs	r0, #0
 8010886:	f000 f97d 	bl	8010b84 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801088a:	f7f0 fefc 	bl	8001686 <RBI_IsTCXO>
 801088e:	4603      	mov	r3, r0
 8010890:	2b01      	cmp	r3, #1
 8010892:	d10e      	bne.n	80108b2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8010894:	2140      	movs	r1, #64	@ 0x40
 8010896:	2001      	movs	r0, #1
 8010898:	f000 fb82 	bl	8010fa0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801089c:	2100      	movs	r1, #0
 801089e:	f640 1011 	movw	r0, #2321	@ 0x911
 80108a2:	f000 fef3 	bl	801168c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80108a6:	237f      	movs	r3, #127	@ 0x7f
 80108a8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80108aa:	7b38      	ldrb	r0, [r7, #12]
 80108ac:	f000 fa8b 	bl	8010dc6 <SUBGRF_Calibrate>
 80108b0:	e009      	b.n	80108c6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80108b2:	2120      	movs	r1, #32
 80108b4:	f640 1011 	movw	r0, #2321	@ 0x911
 80108b8:	f000 fee8 	bl	801168c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80108bc:	2120      	movs	r1, #32
 80108be:	f640 1012 	movw	r0, #2322	@ 0x912
 80108c2:	f000 fee3 	bl	801168c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80108c6:	210e      	movs	r1, #14
 80108c8:	f640 101f 	movw	r0, #2335	@ 0x91f
 80108cc:	f000 fede 	bl	801168c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80108d0:	f7f0 feb6 	bl	8001640 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80108d4:	4b05      	ldr	r3, [pc, #20]	@ (80108ec <SUBGRF_Init+0x8c>)
 80108d6:	2201      	movs	r2, #1
 80108d8:	701a      	strb	r2, [r3, #0]
}
 80108da:	bf00      	nop
 80108dc:	3710      	adds	r7, #16
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}
 80108e2:	bf00      	nop
 80108e4:	20001468 	.word	0x20001468
 80108e8:	20001464 	.word	0x20001464
 80108ec:	2000145c 	.word	0x2000145c

080108f0 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80108f0:	b480      	push	{r7}
 80108f2:	af00      	add	r7, sp, #0
    return OperatingMode;
 80108f4:	4b02      	ldr	r3, [pc, #8]	@ (8010900 <SUBGRF_GetOperatingMode+0x10>)
 80108f6:	781b      	ldrb	r3, [r3, #0]
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bc80      	pop	{r7}
 80108fe:	4770      	bx	lr
 8010900:	2000145c 	.word	0x2000145c

08010904 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	460b      	mov	r3, r1
 801090e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8010910:	78fb      	ldrb	r3, [r7, #3]
 8010912:	461a      	mov	r2, r3
 8010914:	6879      	ldr	r1, [r7, #4]
 8010916:	2000      	movs	r0, #0
 8010918:	f000 ff3e 	bl	8011798 <SUBGRF_WriteBuffer>
}
 801091c:	bf00      	nop
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b086      	sub	sp, #24
 8010928:	af00      	add	r7, sp, #0
 801092a:	60f8      	str	r0, [r7, #12]
 801092c:	60b9      	str	r1, [r7, #8]
 801092e:	4613      	mov	r3, r2
 8010930:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8010932:	2300      	movs	r3, #0
 8010934:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8010936:	f107 0317 	add.w	r3, r7, #23
 801093a:	4619      	mov	r1, r3
 801093c:	68b8      	ldr	r0, [r7, #8]
 801093e:	f000 fe27 	bl	8011590 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	79fa      	ldrb	r2, [r7, #7]
 8010948:	429a      	cmp	r2, r3
 801094a:	d201      	bcs.n	8010950 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801094c:	2301      	movs	r3, #1
 801094e:	e007      	b.n	8010960 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8010950:	7df8      	ldrb	r0, [r7, #23]
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	781b      	ldrb	r3, [r3, #0]
 8010956:	461a      	mov	r2, r3
 8010958:	68f9      	ldr	r1, [r7, #12]
 801095a:	f000 ff3f 	bl	80117dc <SUBGRF_ReadBuffer>

    return 0;
 801095e:	2300      	movs	r3, #0
}
 8010960:	4618      	mov	r0, r3
 8010962:	3718      	adds	r7, #24
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}

08010968 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b084      	sub	sp, #16
 801096c:	af00      	add	r7, sp, #0
 801096e:	60f8      	str	r0, [r7, #12]
 8010970:	460b      	mov	r3, r1
 8010972:	607a      	str	r2, [r7, #4]
 8010974:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8010976:	7afb      	ldrb	r3, [r7, #11]
 8010978:	4619      	mov	r1, r3
 801097a:	68f8      	ldr	r0, [r7, #12]
 801097c:	f7ff ffc2 	bl	8010904 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f000 f91b 	bl	8010bbc <SUBGRF_SetTx>
}
 8010986:	bf00      	nop
 8010988:	3710      	adds	r7, #16
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}

0801098e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801098e:	b580      	push	{r7, lr}
 8010990:	b082      	sub	sp, #8
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8010996:	2208      	movs	r2, #8
 8010998:	6879      	ldr	r1, [r7, #4]
 801099a:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801099e:	f000 feb7 	bl	8011710 <SUBGRF_WriteRegisters>
    return 0;
 80109a2:	2300      	movs	r3, #0
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3708      	adds	r7, #8
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b084      	sub	sp, #16
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	4603      	mov	r3, r0
 80109b4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80109b6:	88fb      	ldrh	r3, [r7, #6]
 80109b8:	0a1b      	lsrs	r3, r3, #8
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	b2db      	uxtb	r3, r3
 80109be:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80109c0:	88fb      	ldrh	r3, [r7, #6]
 80109c2:	b2db      	uxtb	r3, r3
 80109c4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80109c6:	f000 fb6f 	bl	80110a8 <SUBGRF_GetPacketType>
 80109ca:	4603      	mov	r3, r0
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d108      	bne.n	80109e2 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80109d0:	f107 030c 	add.w	r3, r7, #12
 80109d4:	2202      	movs	r2, #2
 80109d6:	4619      	mov	r1, r3
 80109d8:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80109dc:	f000 fe98 	bl	8011710 <SUBGRF_WriteRegisters>
            break;
 80109e0:	e000      	b.n	80109e4 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80109e2:	bf00      	nop
    }
}
 80109e4:	bf00      	nop
 80109e6:	3710      	adds	r7, #16
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b084      	sub	sp, #16
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	4603      	mov	r3, r0
 80109f4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80109f6:	88fb      	ldrh	r3, [r7, #6]
 80109f8:	0a1b      	lsrs	r3, r3, #8
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	b2db      	uxtb	r3, r3
 80109fe:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8010a00:	88fb      	ldrh	r3, [r7, #6]
 8010a02:	b2db      	uxtb	r3, r3
 8010a04:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8010a06:	f000 fb4f 	bl	80110a8 <SUBGRF_GetPacketType>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d108      	bne.n	8010a22 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8010a10:	f107 030c 	add.w	r3, r7, #12
 8010a14:	2202      	movs	r2, #2
 8010a16:	4619      	mov	r1, r3
 8010a18:	f240 60be 	movw	r0, #1726	@ 0x6be
 8010a1c:	f000 fe78 	bl	8011710 <SUBGRF_WriteRegisters>
            break;
 8010a20:	e000      	b.n	8010a24 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8010a22:	bf00      	nop
    }
}
 8010a24:	bf00      	nop
 8010a26:	3710      	adds	r7, #16
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b084      	sub	sp, #16
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	4603      	mov	r3, r0
 8010a34:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8010a36:	2300      	movs	r3, #0
 8010a38:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8010a3a:	f000 fb35 	bl	80110a8 <SUBGRF_GetPacketType>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d121      	bne.n	8010a88 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8010a44:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8010a48:	f000 fe42 	bl	80116d0 <SUBGRF_ReadRegister>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	f023 0301 	bic.w	r3, r3, #1
 8010a52:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8010a54:	88fb      	ldrh	r3, [r7, #6]
 8010a56:	0a1b      	lsrs	r3, r3, #8
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	b25b      	sxtb	r3, r3
 8010a5c:	f003 0301 	and.w	r3, r3, #1
 8010a60:	b25a      	sxtb	r2, r3
 8010a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a66:	4313      	orrs	r3, r2
 8010a68:	b25b      	sxtb	r3, r3
 8010a6a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8010a6c:	7bfb      	ldrb	r3, [r7, #15]
 8010a6e:	4619      	mov	r1, r3
 8010a70:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8010a74:	f000 fe0a 	bl	801168c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8010a78:	88fb      	ldrh	r3, [r7, #6]
 8010a7a:	b2db      	uxtb	r3, r3
 8010a7c:	4619      	mov	r1, r3
 8010a7e:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8010a82:	f000 fe03 	bl	801168c <SUBGRF_WriteRegister>
            break;
 8010a86:	e000      	b.n	8010a8a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8010a88:	bf00      	nop
    }
}
 8010a8a:	bf00      	nop
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8010a92:	b580      	push	{r7, lr}
 8010a94:	b082      	sub	sp, #8
 8010a96:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8010aa4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8010aa8:	f000 fe12 	bl	80116d0 <SUBGRF_ReadRegister>
 8010aac:	4603      	mov	r3, r0
 8010aae:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8010ab0:	79fb      	ldrb	r3, [r7, #7]
 8010ab2:	f023 0301 	bic.w	r3, r3, #1
 8010ab6:	b2db      	uxtb	r3, r3
 8010ab8:	4619      	mov	r1, r3
 8010aba:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8010abe:	f000 fde5 	bl	801168c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8010ac2:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8010ac6:	f000 fe03 	bl	80116d0 <SUBGRF_ReadRegister>
 8010aca:	4603      	mov	r3, r0
 8010acc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8010ace:	79bb      	ldrb	r3, [r7, #6]
 8010ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8010adc:	f000 fdd6 	bl	801168c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8010ae0:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8010ae4:	f000 f88a 	bl	8010bfc <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8010ae8:	463b      	mov	r3, r7
 8010aea:	2204      	movs	r2, #4
 8010aec:	4619      	mov	r1, r3
 8010aee:	f640 0019 	movw	r0, #2073	@ 0x819
 8010af2:	f000 fe2f 	bl	8011754 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8010af6:	2000      	movs	r0, #0
 8010af8:	f000 f844 	bl	8010b84 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8010afc:	79fb      	ldrb	r3, [r7, #7]
 8010afe:	4619      	mov	r1, r3
 8010b00:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8010b04:	f000 fdc2 	bl	801168c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8010b08:	79bb      	ldrb	r3, [r7, #6]
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8010b10:	f000 fdbc 	bl	801168c <SUBGRF_WriteRegister>

    return number;
 8010b14:	683b      	ldr	r3, [r7, #0]
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3708      	adds	r7, #8
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
	...

08010b20 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8010b28:	2000      	movs	r0, #0
 8010b2a:	f7f0 fd94 	bl	8001656 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8010b2e:	2002      	movs	r0, #2
 8010b30:	f000 ffbe 	bl	8011ab0 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010b34:	793b      	ldrb	r3, [r7, #4]
 8010b36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	009b      	lsls	r3, r3, #2
 8010b3e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8010b40:	793b      	ldrb	r3, [r7, #4]
 8010b42:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8010b46:	b2db      	uxtb	r3, r3
 8010b48:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010b4a:	b25b      	sxtb	r3, r3
 8010b4c:	4313      	orrs	r3, r2
 8010b4e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8010b50:	793b      	ldrb	r3, [r7, #4]
 8010b52:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010b56:	b2db      	uxtb	r3, r3
 8010b58:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8010b5a:	4313      	orrs	r3, r2
 8010b5c:	b25b      	sxtb	r3, r3
 8010b5e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8010b60:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8010b62:	f107 030f 	add.w	r3, r7, #15
 8010b66:	2201      	movs	r2, #1
 8010b68:	4619      	mov	r1, r3
 8010b6a:	2084      	movs	r0, #132	@ 0x84
 8010b6c:	f000 fe58 	bl	8011820 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8010b70:	4b03      	ldr	r3, [pc, #12]	@ (8010b80 <SUBGRF_SetSleep+0x60>)
 8010b72:	2200      	movs	r2, #0
 8010b74:	701a      	strb	r2, [r3, #0]
}
 8010b76:	bf00      	nop
 8010b78:	3710      	adds	r7, #16
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	2000145c 	.word	0x2000145c

08010b84 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b082      	sub	sp, #8
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8010b8e:	1dfb      	adds	r3, r7, #7
 8010b90:	2201      	movs	r2, #1
 8010b92:	4619      	mov	r1, r3
 8010b94:	2080      	movs	r0, #128	@ 0x80
 8010b96:	f000 fe43 	bl	8011820 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8010b9a:	79fb      	ldrb	r3, [r7, #7]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d103      	bne.n	8010ba8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8010ba0:	4b05      	ldr	r3, [pc, #20]	@ (8010bb8 <SUBGRF_SetStandby+0x34>)
 8010ba2:	2201      	movs	r2, #1
 8010ba4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8010ba6:	e002      	b.n	8010bae <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8010ba8:	4b03      	ldr	r3, [pc, #12]	@ (8010bb8 <SUBGRF_SetStandby+0x34>)
 8010baa:	2202      	movs	r2, #2
 8010bac:	701a      	strb	r2, [r3, #0]
}
 8010bae:	bf00      	nop
 8010bb0:	3708      	adds	r7, #8
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}
 8010bb6:	bf00      	nop
 8010bb8:	2000145c 	.word	0x2000145c

08010bbc <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b084      	sub	sp, #16
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8010bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8010bf8 <SUBGRF_SetTx+0x3c>)
 8010bc6:	2204      	movs	r2, #4
 8010bc8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	0c1b      	lsrs	r3, r3, #16
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	0a1b      	lsrs	r3, r3, #8
 8010bd6:	b2db      	uxtb	r3, r3
 8010bd8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8010be0:	f107 030c 	add.w	r3, r7, #12
 8010be4:	2203      	movs	r2, #3
 8010be6:	4619      	mov	r1, r3
 8010be8:	2083      	movs	r0, #131	@ 0x83
 8010bea:	f000 fe19 	bl	8011820 <SUBGRF_WriteCommand>
}
 8010bee:	bf00      	nop
 8010bf0:	3710      	adds	r7, #16
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}
 8010bf6:	bf00      	nop
 8010bf8:	2000145c 	.word	0x2000145c

08010bfc <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b084      	sub	sp, #16
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8010c04:	4b0c      	ldr	r3, [pc, #48]	@ (8010c38 <SUBGRF_SetRx+0x3c>)
 8010c06:	2205      	movs	r2, #5
 8010c08:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	0c1b      	lsrs	r3, r3, #16
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	0a1b      	lsrs	r3, r3, #8
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	b2db      	uxtb	r3, r3
 8010c1e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8010c20:	f107 030c 	add.w	r3, r7, #12
 8010c24:	2203      	movs	r2, #3
 8010c26:	4619      	mov	r1, r3
 8010c28:	2082      	movs	r0, #130	@ 0x82
 8010c2a:	f000 fdf9 	bl	8011820 <SUBGRF_WriteCommand>
}
 8010c2e:	bf00      	nop
 8010c30:	3710      	adds	r7, #16
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}
 8010c36:	bf00      	nop
 8010c38:	2000145c 	.word	0x2000145c

08010c3c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8010c44:	4b0e      	ldr	r3, [pc, #56]	@ (8010c80 <SUBGRF_SetRxBoosted+0x44>)
 8010c46:	2205      	movs	r2, #5
 8010c48:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8010c4a:	2197      	movs	r1, #151	@ 0x97
 8010c4c:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8010c50:	f000 fd1c 	bl	801168c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	0c1b      	lsrs	r3, r3, #16
 8010c58:	b2db      	uxtb	r3, r3
 8010c5a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	0a1b      	lsrs	r3, r3, #8
 8010c60:	b2db      	uxtb	r3, r3
 8010c62:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8010c6a:	f107 030c 	add.w	r3, r7, #12
 8010c6e:	2203      	movs	r2, #3
 8010c70:	4619      	mov	r1, r3
 8010c72:	2082      	movs	r0, #130	@ 0x82
 8010c74:	f000 fdd4 	bl	8011820 <SUBGRF_WriteCommand>
}
 8010c78:	bf00      	nop
 8010c7a:	3710      	adds	r7, #16
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	2000145c 	.word	0x2000145c

08010c84 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b084      	sub	sp, #16
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	0c1b      	lsrs	r3, r3, #16
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	0a1b      	lsrs	r3, r3, #8
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	b2db      	uxtb	r3, r3
 8010ca2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	0c1b      	lsrs	r3, r3, #16
 8010ca8:	b2db      	uxtb	r3, r3
 8010caa:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	0a1b      	lsrs	r3, r3, #8
 8010cb0:	b2db      	uxtb	r3, r3
 8010cb2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8010cba:	f107 0308 	add.w	r3, r7, #8
 8010cbe:	2206      	movs	r2, #6
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	2094      	movs	r0, #148	@ 0x94
 8010cc4:	f000 fdac 	bl	8011820 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8010cc8:	4b03      	ldr	r3, [pc, #12]	@ (8010cd8 <SUBGRF_SetRxDutyCycle+0x54>)
 8010cca:	2206      	movs	r2, #6
 8010ccc:	701a      	strb	r2, [r3, #0]
}
 8010cce:	bf00      	nop
 8010cd0:	3710      	adds	r7, #16
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}
 8010cd6:	bf00      	nop
 8010cd8:	2000145c 	.word	0x2000145c

08010cdc <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	2100      	movs	r1, #0
 8010ce4:	20c5      	movs	r0, #197	@ 0xc5
 8010ce6:	f000 fd9b 	bl	8011820 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8010cea:	4b02      	ldr	r3, [pc, #8]	@ (8010cf4 <SUBGRF_SetCad+0x18>)
 8010cec:	2207      	movs	r2, #7
 8010cee:	701a      	strb	r2, [r3, #0]
}
 8010cf0:	bf00      	nop
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	2000145c 	.word	0x2000145c

08010cf8 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	2100      	movs	r1, #0
 8010d00:	20d1      	movs	r0, #209	@ 0xd1
 8010d02:	f000 fd8d 	bl	8011820 <SUBGRF_WriteCommand>
}
 8010d06:	bf00      	nop
 8010d08:	bd80      	pop	{r7, pc}

08010d0a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8010d0a:	b580      	push	{r7, lr}
 8010d0c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8010d0e:	2200      	movs	r2, #0
 8010d10:	2100      	movs	r1, #0
 8010d12:	20d2      	movs	r0, #210	@ 0xd2
 8010d14:	f000 fd84 	bl	8011820 <SUBGRF_WriteCommand>
}
 8010d18:	bf00      	nop
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	4603      	mov	r3, r0
 8010d24:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8010d26:	1dfb      	adds	r3, r7, #7
 8010d28:	2201      	movs	r2, #1
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	209f      	movs	r0, #159	@ 0x9f
 8010d2e:	f000 fd77 	bl	8011820 <SUBGRF_WriteCommand>
}
 8010d32:	bf00      	nop
 8010d34:	3708      	adds	r7, #8
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}

08010d3a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8010d3a:	b580      	push	{r7, lr}
 8010d3c:	b084      	sub	sp, #16
 8010d3e:	af00      	add	r7, sp, #0
 8010d40:	4603      	mov	r3, r0
 8010d42:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8010d44:	1dfb      	adds	r3, r7, #7
 8010d46:	2201      	movs	r2, #1
 8010d48:	4619      	mov	r1, r3
 8010d4a:	20a0      	movs	r0, #160	@ 0xa0
 8010d4c:	f000 fd68 	bl	8011820 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8010d50:	79fb      	ldrb	r3, [r7, #7]
 8010d52:	2b3f      	cmp	r3, #63	@ 0x3f
 8010d54:	d91c      	bls.n	8010d90 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8010d56:	79fb      	ldrb	r3, [r7, #7]
 8010d58:	085b      	lsrs	r3, r3, #1
 8010d5a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8010d60:	2300      	movs	r3, #0
 8010d62:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8010d64:	e005      	b.n	8010d72 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8010d66:	7bfb      	ldrb	r3, [r7, #15]
 8010d68:	089b      	lsrs	r3, r3, #2
 8010d6a:	73fb      	strb	r3, [r7, #15]
            exp++;
 8010d6c:	7bbb      	ldrb	r3, [r7, #14]
 8010d6e:	3301      	adds	r3, #1
 8010d70:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8010d72:	7bfb      	ldrb	r3, [r7, #15]
 8010d74:	2b1f      	cmp	r3, #31
 8010d76:	d8f6      	bhi.n	8010d66 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8010d78:	7bfb      	ldrb	r3, [r7, #15]
 8010d7a:	00db      	lsls	r3, r3, #3
 8010d7c:	b2da      	uxtb	r2, r3
 8010d7e:	7bbb      	ldrb	r3, [r7, #14]
 8010d80:	4413      	add	r3, r2
 8010d82:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8010d84:	7b7b      	ldrb	r3, [r7, #13]
 8010d86:	4619      	mov	r1, r3
 8010d88:	f240 7006 	movw	r0, #1798	@ 0x706
 8010d8c:	f000 fc7e 	bl	801168c <SUBGRF_WriteRegister>
    }
}
 8010d90:	bf00      	nop
 8010d92:	3710      	adds	r7, #16
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}

08010d98 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b082      	sub	sp, #8
 8010d9c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8010d9e:	f7f0 fc7d 	bl	800169c <RBI_IsDCDC>
 8010da2:	4603      	mov	r3, r0
 8010da4:	2b01      	cmp	r3, #1
 8010da6:	d102      	bne.n	8010dae <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8010da8:	2301      	movs	r3, #1
 8010daa:	71fb      	strb	r3, [r7, #7]
 8010dac:	e001      	b.n	8010db2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8010dae:	2300      	movs	r3, #0
 8010db0:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8010db2:	1dfb      	adds	r3, r7, #7
 8010db4:	2201      	movs	r2, #1
 8010db6:	4619      	mov	r1, r3
 8010db8:	2096      	movs	r0, #150	@ 0x96
 8010dba:	f000 fd31 	bl	8011820 <SUBGRF_WriteCommand>
}
 8010dbe:	bf00      	nop
 8010dc0:	3708      	adds	r7, #8
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}

08010dc6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8010dc6:	b580      	push	{r7, lr}
 8010dc8:	b084      	sub	sp, #16
 8010dca:	af00      	add	r7, sp, #0
 8010dcc:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010dce:	793b      	ldrb	r3, [r7, #4]
 8010dd0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8010dd4:	b2db      	uxtb	r3, r3
 8010dd6:	019b      	lsls	r3, r3, #6
 8010dd8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8010dda:	793b      	ldrb	r3, [r7, #4]
 8010ddc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010de0:	b2db      	uxtb	r3, r3
 8010de2:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010de4:	b25b      	sxtb	r3, r3
 8010de6:	4313      	orrs	r3, r2
 8010de8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8010dea:	793b      	ldrb	r3, [r7, #4]
 8010dec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8010df4:	b25b      	sxtb	r3, r3
 8010df6:	4313      	orrs	r3, r2
 8010df8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8010dfa:	793b      	ldrb	r3, [r7, #4]
 8010dfc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010e00:	b2db      	uxtb	r3, r3
 8010e02:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8010e04:	b25b      	sxtb	r3, r3
 8010e06:	4313      	orrs	r3, r2
 8010e08:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8010e0a:	793b      	ldrb	r3, [r7, #4]
 8010e0c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010e10:	b2db      	uxtb	r3, r3
 8010e12:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8010e14:	b25b      	sxtb	r3, r3
 8010e16:	4313      	orrs	r3, r2
 8010e18:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8010e1a:	793b      	ldrb	r3, [r7, #4]
 8010e1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8010e20:	b2db      	uxtb	r3, r3
 8010e22:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8010e24:	b25b      	sxtb	r3, r3
 8010e26:	4313      	orrs	r3, r2
 8010e28:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8010e2a:	793b      	ldrb	r3, [r7, #4]
 8010e2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010e30:	b2db      	uxtb	r3, r3
 8010e32:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8010e34:	4313      	orrs	r3, r2
 8010e36:	b25b      	sxtb	r3, r3
 8010e38:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8010e3a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8010e3c:	f107 030f 	add.w	r3, r7, #15
 8010e40:	2201      	movs	r2, #1
 8010e42:	4619      	mov	r1, r3
 8010e44:	2089      	movs	r0, #137	@ 0x89
 8010e46:	f000 fceb 	bl	8011820 <SUBGRF_WriteCommand>
}
 8010e4a:	bf00      	nop
 8010e4c:	3710      	adds	r7, #16
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}
	...

08010e54 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8010ed4 <SUBGRF_CalibrateImage+0x80>)
 8010e60:	4293      	cmp	r3, r2
 8010e62:	d904      	bls.n	8010e6e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8010e64:	23e1      	movs	r3, #225	@ 0xe1
 8010e66:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8010e68:	23e9      	movs	r3, #233	@ 0xe9
 8010e6a:	737b      	strb	r3, [r7, #13]
 8010e6c:	e027      	b.n	8010ebe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	4a19      	ldr	r2, [pc, #100]	@ (8010ed8 <SUBGRF_CalibrateImage+0x84>)
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d904      	bls.n	8010e80 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8010e76:	23d7      	movs	r3, #215	@ 0xd7
 8010e78:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8010e7a:	23db      	movs	r3, #219	@ 0xdb
 8010e7c:	737b      	strb	r3, [r7, #13]
 8010e7e:	e01e      	b.n	8010ebe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	4a16      	ldr	r2, [pc, #88]	@ (8010edc <SUBGRF_CalibrateImage+0x88>)
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d904      	bls.n	8010e92 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8010e88:	23c1      	movs	r3, #193	@ 0xc1
 8010e8a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8010e8c:	23c5      	movs	r3, #197	@ 0xc5
 8010e8e:	737b      	strb	r3, [r7, #13]
 8010e90:	e015      	b.n	8010ebe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	4a12      	ldr	r2, [pc, #72]	@ (8010ee0 <SUBGRF_CalibrateImage+0x8c>)
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d904      	bls.n	8010ea4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8010e9a:	2375      	movs	r3, #117	@ 0x75
 8010e9c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8010e9e:	2381      	movs	r3, #129	@ 0x81
 8010ea0:	737b      	strb	r3, [r7, #13]
 8010ea2:	e00c      	b.n	8010ebe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8010ee4 <SUBGRF_CalibrateImage+0x90>)
 8010ea8:	4293      	cmp	r3, r2
 8010eaa:	d904      	bls.n	8010eb6 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8010eac:	236b      	movs	r3, #107	@ 0x6b
 8010eae:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8010eb0:	236f      	movs	r3, #111	@ 0x6f
 8010eb2:	737b      	strb	r3, [r7, #13]
 8010eb4:	e003      	b.n	8010ebe <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8010eb6:	2329      	movs	r3, #41	@ 0x29
 8010eb8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8010eba:	232b      	movs	r3, #43	@ 0x2b
 8010ebc:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8010ebe:	f107 030c 	add.w	r3, r7, #12
 8010ec2:	2202      	movs	r2, #2
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	2098      	movs	r0, #152	@ 0x98
 8010ec8:	f000 fcaa 	bl	8011820 <SUBGRF_WriteCommand>
}
 8010ecc:	bf00      	nop
 8010ece:	3710      	adds	r7, #16
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}
 8010ed4:	35a4e900 	.word	0x35a4e900
 8010ed8:	32a9f880 	.word	0x32a9f880
 8010edc:	2de54480 	.word	0x2de54480
 8010ee0:	1b6b0b00 	.word	0x1b6b0b00
 8010ee4:	1954fc40 	.word	0x1954fc40

08010ee8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8010ee8:	b590      	push	{r4, r7, lr}
 8010eea:	b085      	sub	sp, #20
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	4604      	mov	r4, r0
 8010ef0:	4608      	mov	r0, r1
 8010ef2:	4611      	mov	r1, r2
 8010ef4:	461a      	mov	r2, r3
 8010ef6:	4623      	mov	r3, r4
 8010ef8:	71fb      	strb	r3, [r7, #7]
 8010efa:	4603      	mov	r3, r0
 8010efc:	71bb      	strb	r3, [r7, #6]
 8010efe:	460b      	mov	r3, r1
 8010f00:	717b      	strb	r3, [r7, #5]
 8010f02:	4613      	mov	r3, r2
 8010f04:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8010f06:	79fb      	ldrb	r3, [r7, #7]
 8010f08:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8010f0a:	79bb      	ldrb	r3, [r7, #6]
 8010f0c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8010f0e:	797b      	ldrb	r3, [r7, #5]
 8010f10:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8010f12:	793b      	ldrb	r3, [r7, #4]
 8010f14:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8010f16:	f107 030c 	add.w	r3, r7, #12
 8010f1a:	2204      	movs	r2, #4
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	2095      	movs	r0, #149	@ 0x95
 8010f20:	f000 fc7e 	bl	8011820 <SUBGRF_WriteCommand>
}
 8010f24:	bf00      	nop
 8010f26:	3714      	adds	r7, #20
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd90      	pop	{r4, r7, pc}

08010f2c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8010f2c:	b590      	push	{r4, r7, lr}
 8010f2e:	b085      	sub	sp, #20
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	4604      	mov	r4, r0
 8010f34:	4608      	mov	r0, r1
 8010f36:	4611      	mov	r1, r2
 8010f38:	461a      	mov	r2, r3
 8010f3a:	4623      	mov	r3, r4
 8010f3c:	80fb      	strh	r3, [r7, #6]
 8010f3e:	4603      	mov	r3, r0
 8010f40:	80bb      	strh	r3, [r7, #4]
 8010f42:	460b      	mov	r3, r1
 8010f44:	807b      	strh	r3, [r7, #2]
 8010f46:	4613      	mov	r3, r2
 8010f48:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8010f4a:	88fb      	ldrh	r3, [r7, #6]
 8010f4c:	0a1b      	lsrs	r3, r3, #8
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8010f54:	88fb      	ldrh	r3, [r7, #6]
 8010f56:	b2db      	uxtb	r3, r3
 8010f58:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8010f5a:	88bb      	ldrh	r3, [r7, #4]
 8010f5c:	0a1b      	lsrs	r3, r3, #8
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	b2db      	uxtb	r3, r3
 8010f62:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8010f64:	88bb      	ldrh	r3, [r7, #4]
 8010f66:	b2db      	uxtb	r3, r3
 8010f68:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8010f6a:	887b      	ldrh	r3, [r7, #2]
 8010f6c:	0a1b      	lsrs	r3, r3, #8
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	b2db      	uxtb	r3, r3
 8010f72:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8010f74:	887b      	ldrh	r3, [r7, #2]
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8010f7a:	883b      	ldrh	r3, [r7, #0]
 8010f7c:	0a1b      	lsrs	r3, r3, #8
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	b2db      	uxtb	r3, r3
 8010f82:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8010f84:	883b      	ldrh	r3, [r7, #0]
 8010f86:	b2db      	uxtb	r3, r3
 8010f88:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8010f8a:	f107 0308 	add.w	r3, r7, #8
 8010f8e:	2208      	movs	r2, #8
 8010f90:	4619      	mov	r1, r3
 8010f92:	2008      	movs	r0, #8
 8010f94:	f000 fc44 	bl	8011820 <SUBGRF_WriteCommand>
}
 8010f98:	bf00      	nop
 8010f9a:	3714      	adds	r7, #20
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd90      	pop	{r4, r7, pc}

08010fa0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b084      	sub	sp, #16
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	6039      	str	r1, [r7, #0]
 8010faa:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8010fac:	79fb      	ldrb	r3, [r7, #7]
 8010fae:	f003 0307 	and.w	r3, r3, #7
 8010fb2:	b2db      	uxtb	r3, r3
 8010fb4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	0c1b      	lsrs	r3, r3, #16
 8010fba:	b2db      	uxtb	r3, r3
 8010fbc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	0a1b      	lsrs	r3, r3, #8
 8010fc2:	b2db      	uxtb	r3, r3
 8010fc4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	b2db      	uxtb	r3, r3
 8010fca:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8010fcc:	f107 030c 	add.w	r3, r7, #12
 8010fd0:	2204      	movs	r2, #4
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	2097      	movs	r0, #151	@ 0x97
 8010fd6:	f000 fc23 	bl	8011820 <SUBGRF_WriteCommand>
}
 8010fda:	bf00      	nop
 8010fdc:	3710      	adds	r7, #16
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
	...

08010fe4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8010fe4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010fe8:	b084      	sub	sp, #16
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8010ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8011068 <SUBGRF_SetRfFrequency+0x84>)
 8010ff4:	781b      	ldrb	r3, [r3, #0]
 8010ff6:	f083 0301 	eor.w	r3, r3, #1
 8010ffa:	b2db      	uxtb	r3, r3
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d005      	beq.n	801100c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f7ff ff27 	bl	8010e54 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8011006:	4b18      	ldr	r3, [pc, #96]	@ (8011068 <SUBGRF_SetRfFrequency+0x84>)
 8011008:	2201      	movs	r2, #1
 801100a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2200      	movs	r2, #0
 8011010:	461c      	mov	r4, r3
 8011012:	4615      	mov	r5, r2
 8011014:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8011018:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801101c:	4a13      	ldr	r2, [pc, #76]	@ (801106c <SUBGRF_SetRfFrequency+0x88>)
 801101e:	f04f 0300 	mov.w	r3, #0
 8011022:	4640      	mov	r0, r8
 8011024:	4649      	mov	r1, r9
 8011026:	f7ef fc21 	bl	800086c <__aeabi_uldivmod>
 801102a:	4602      	mov	r2, r0
 801102c:	460b      	mov	r3, r1
 801102e:	4613      	mov	r3, r2
 8011030:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	0e1b      	lsrs	r3, r3, #24
 8011036:	b2db      	uxtb	r3, r3
 8011038:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	0c1b      	lsrs	r3, r3, #16
 801103e:	b2db      	uxtb	r3, r3
 8011040:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	0a1b      	lsrs	r3, r3, #8
 8011046:	b2db      	uxtb	r3, r3
 8011048:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	b2db      	uxtb	r3, r3
 801104e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8011050:	f107 0308 	add.w	r3, r7, #8
 8011054:	2204      	movs	r2, #4
 8011056:	4619      	mov	r1, r3
 8011058:	2086      	movs	r0, #134	@ 0x86
 801105a:	f000 fbe1 	bl	8011820 <SUBGRF_WriteCommand>
}
 801105e:	bf00      	nop
 8011060:	3710      	adds	r7, #16
 8011062:	46bd      	mov	sp, r7
 8011064:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8011068:	20001464 	.word	0x20001464
 801106c:	01e84800 	.word	0x01e84800

08011070 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b082      	sub	sp, #8
 8011074:	af00      	add	r7, sp, #0
 8011076:	4603      	mov	r3, r0
 8011078:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801107a:	79fa      	ldrb	r2, [r7, #7]
 801107c:	4b09      	ldr	r3, [pc, #36]	@ (80110a4 <SUBGRF_SetPacketType+0x34>)
 801107e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8011080:	79fb      	ldrb	r3, [r7, #7]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d104      	bne.n	8011090 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8011086:	2100      	movs	r1, #0
 8011088:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801108c:	f000 fafe 	bl	801168c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8011090:	1dfb      	adds	r3, r7, #7
 8011092:	2201      	movs	r2, #1
 8011094:	4619      	mov	r1, r3
 8011096:	208a      	movs	r0, #138	@ 0x8a
 8011098:	f000 fbc2 	bl	8011820 <SUBGRF_WriteCommand>
}
 801109c:	bf00      	nop
 801109e:	3708      	adds	r7, #8
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	2000145d 	.word	0x2000145d

080110a8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80110a8:	b480      	push	{r7}
 80110aa:	af00      	add	r7, sp, #0
    return PacketType;
 80110ac:	4b02      	ldr	r3, [pc, #8]	@ (80110b8 <SUBGRF_GetPacketType+0x10>)
 80110ae:	781b      	ldrb	r3, [r3, #0]
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bc80      	pop	{r7}
 80110b6:	4770      	bx	lr
 80110b8:	2000145d 	.word	0x2000145d

080110bc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b084      	sub	sp, #16
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	4603      	mov	r3, r0
 80110c4:	71fb      	strb	r3, [r7, #7]
 80110c6:	460b      	mov	r3, r1
 80110c8:	71bb      	strb	r3, [r7, #6]
 80110ca:	4613      	mov	r3, r2
 80110cc:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80110ce:	79fb      	ldrb	r3, [r7, #7]
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	d149      	bne.n	8011168 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80110d4:	2000      	movs	r0, #0
 80110d6:	f7f0 faec 	bl	80016b2 <RBI_GetRFOMaxPowerConfig>
 80110da:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80110dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80110e0:	68fa      	ldr	r2, [r7, #12]
 80110e2:	429a      	cmp	r2, r3
 80110e4:	da01      	bge.n	80110ea <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	2b0e      	cmp	r3, #14
 80110ee:	d10e      	bne.n	801110e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80110f0:	2301      	movs	r3, #1
 80110f2:	2201      	movs	r2, #1
 80110f4:	2100      	movs	r1, #0
 80110f6:	2004      	movs	r0, #4
 80110f8:	f7ff fef6 	bl	8010ee8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80110fc:	79ba      	ldrb	r2, [r7, #6]
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	b2db      	uxtb	r3, r3
 8011102:	1ad3      	subs	r3, r2, r3
 8011104:	b2db      	uxtb	r3, r3
 8011106:	330e      	adds	r3, #14
 8011108:	b2db      	uxtb	r3, r3
 801110a:	71bb      	strb	r3, [r7, #6]
 801110c:	e01f      	b.n	801114e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	2b0a      	cmp	r3, #10
 8011112:	d10e      	bne.n	8011132 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8011114:	2301      	movs	r3, #1
 8011116:	2201      	movs	r2, #1
 8011118:	2100      	movs	r1, #0
 801111a:	2001      	movs	r0, #1
 801111c:	f7ff fee4 	bl	8010ee8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8011120:	79ba      	ldrb	r2, [r7, #6]
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	b2db      	uxtb	r3, r3
 8011126:	1ad3      	subs	r3, r2, r3
 8011128:	b2db      	uxtb	r3, r3
 801112a:	330d      	adds	r3, #13
 801112c:	b2db      	uxtb	r3, r3
 801112e:	71bb      	strb	r3, [r7, #6]
 8011130:	e00d      	b.n	801114e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8011132:	2301      	movs	r3, #1
 8011134:	2201      	movs	r2, #1
 8011136:	2100      	movs	r1, #0
 8011138:	2007      	movs	r0, #7
 801113a:	f7ff fed5 	bl	8010ee8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801113e:	79ba      	ldrb	r2, [r7, #6]
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	b2db      	uxtb	r3, r3
 8011144:	1ad3      	subs	r3, r2, r3
 8011146:	b2db      	uxtb	r3, r3
 8011148:	330e      	adds	r3, #14
 801114a:	b2db      	uxtb	r3, r3
 801114c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801114e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011152:	f113 0f11 	cmn.w	r3, #17
 8011156:	da01      	bge.n	801115c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8011158:	23ef      	movs	r3, #239	@ 0xef
 801115a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801115c:	2118      	movs	r1, #24
 801115e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8011162:	f000 fa93 	bl	801168c <SUBGRF_WriteRegister>
 8011166:	e067      	b.n	8011238 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8011168:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801116c:	f000 fab0 	bl	80116d0 <SUBGRF_ReadRegister>
 8011170:	4603      	mov	r3, r0
 8011172:	f043 031e 	orr.w	r3, r3, #30
 8011176:	b2db      	uxtb	r3, r3
 8011178:	4619      	mov	r1, r3
 801117a:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801117e:	f000 fa85 	bl	801168c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8011182:	2001      	movs	r0, #1
 8011184:	f7f0 fa95 	bl	80016b2 <RBI_GetRFOMaxPowerConfig>
 8011188:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801118a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801118e:	68fa      	ldr	r2, [r7, #12]
 8011190:	429a      	cmp	r2, r3
 8011192:	da01      	bge.n	8011198 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	2b14      	cmp	r3, #20
 801119c:	d10e      	bne.n	80111bc <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801119e:	2301      	movs	r3, #1
 80111a0:	2200      	movs	r2, #0
 80111a2:	2105      	movs	r1, #5
 80111a4:	2003      	movs	r0, #3
 80111a6:	f7ff fe9f 	bl	8010ee8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80111aa:	79ba      	ldrb	r2, [r7, #6]
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	1ad3      	subs	r3, r2, r3
 80111b2:	b2db      	uxtb	r3, r3
 80111b4:	3316      	adds	r3, #22
 80111b6:	b2db      	uxtb	r3, r3
 80111b8:	71bb      	strb	r3, [r7, #6]
 80111ba:	e031      	b.n	8011220 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2b11      	cmp	r3, #17
 80111c0:	d10e      	bne.n	80111e0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80111c2:	2301      	movs	r3, #1
 80111c4:	2200      	movs	r2, #0
 80111c6:	2103      	movs	r1, #3
 80111c8:	2002      	movs	r0, #2
 80111ca:	f7ff fe8d 	bl	8010ee8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80111ce:	79ba      	ldrb	r2, [r7, #6]
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	b2db      	uxtb	r3, r3
 80111d4:	1ad3      	subs	r3, r2, r3
 80111d6:	b2db      	uxtb	r3, r3
 80111d8:	3316      	adds	r3, #22
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	71bb      	strb	r3, [r7, #6]
 80111de:	e01f      	b.n	8011220 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	2b0e      	cmp	r3, #14
 80111e4:	d10e      	bne.n	8011204 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80111e6:	2301      	movs	r3, #1
 80111e8:	2200      	movs	r2, #0
 80111ea:	2102      	movs	r1, #2
 80111ec:	2002      	movs	r0, #2
 80111ee:	f7ff fe7b 	bl	8010ee8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80111f2:	79ba      	ldrb	r2, [r7, #6]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	b2db      	uxtb	r3, r3
 80111f8:	1ad3      	subs	r3, r2, r3
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	330e      	adds	r3, #14
 80111fe:	b2db      	uxtb	r3, r3
 8011200:	71bb      	strb	r3, [r7, #6]
 8011202:	e00d      	b.n	8011220 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8011204:	2301      	movs	r3, #1
 8011206:	2200      	movs	r2, #0
 8011208:	2107      	movs	r1, #7
 801120a:	2004      	movs	r0, #4
 801120c:	f7ff fe6c 	bl	8010ee8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8011210:	79ba      	ldrb	r2, [r7, #6]
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	b2db      	uxtb	r3, r3
 8011216:	1ad3      	subs	r3, r2, r3
 8011218:	b2db      	uxtb	r3, r3
 801121a:	3316      	adds	r3, #22
 801121c:	b2db      	uxtb	r3, r3
 801121e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8011220:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011224:	f113 0f09 	cmn.w	r3, #9
 8011228:	da01      	bge.n	801122e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801122a:	23f7      	movs	r3, #247	@ 0xf7
 801122c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801122e:	2138      	movs	r1, #56	@ 0x38
 8011230:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8011234:	f000 fa2a 	bl	801168c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8011238:	79bb      	ldrb	r3, [r7, #6]
 801123a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801123c:	797b      	ldrb	r3, [r7, #5]
 801123e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8011240:	f107 0308 	add.w	r3, r7, #8
 8011244:	2202      	movs	r2, #2
 8011246:	4619      	mov	r1, r3
 8011248:	208e      	movs	r0, #142	@ 0x8e
 801124a:	f000 fae9 	bl	8011820 <SUBGRF_WriteCommand>
}
 801124e:	bf00      	nop
 8011250:	3710      	adds	r7, #16
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
	...

08011258 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8011258:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801125c:	b086      	sub	sp, #24
 801125e:	af00      	add	r7, sp, #0
 8011260:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8011262:	2300      	movs	r3, #0
 8011264:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8011266:	4a61      	ldr	r2, [pc, #388]	@ (80113ec <SUBGRF_SetModulationParams+0x194>)
 8011268:	f107 0308 	add.w	r3, r7, #8
 801126c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011270:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	781a      	ldrb	r2, [r3, #0]
 8011278:	4b5d      	ldr	r3, [pc, #372]	@ (80113f0 <SUBGRF_SetModulationParams+0x198>)
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	429a      	cmp	r2, r3
 801127e:	d004      	beq.n	801128a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	781b      	ldrb	r3, [r3, #0]
 8011284:	4618      	mov	r0, r3
 8011286:	f7ff fef3 	bl	8011070 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	781b      	ldrb	r3, [r3, #0]
 801128e:	2b03      	cmp	r3, #3
 8011290:	f200 80a5 	bhi.w	80113de <SUBGRF_SetModulationParams+0x186>
 8011294:	a201      	add	r2, pc, #4	@ (adr r2, 801129c <SUBGRF_SetModulationParams+0x44>)
 8011296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801129a:	bf00      	nop
 801129c:	080112ad 	.word	0x080112ad
 80112a0:	0801136d 	.word	0x0801136d
 80112a4:	0801132f 	.word	0x0801132f
 80112a8:	0801139b 	.word	0x0801139b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80112ac:	2308      	movs	r3, #8
 80112ae:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	4a4f      	ldr	r2, [pc, #316]	@ (80113f4 <SUBGRF_SetModulationParams+0x19c>)
 80112b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80112ba:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	0c1b      	lsrs	r3, r3, #16
 80112c0:	b2db      	uxtb	r3, r3
 80112c2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80112c4:	697b      	ldr	r3, [r7, #20]
 80112c6:	0a1b      	lsrs	r3, r3, #8
 80112c8:	b2db      	uxtb	r3, r3
 80112ca:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	b2db      	uxtb	r3, r3
 80112d0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	7b1b      	ldrb	r3, [r3, #12]
 80112d6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	7b5b      	ldrb	r3, [r3, #13]
 80112dc:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	689b      	ldr	r3, [r3, #8]
 80112e2:	2200      	movs	r2, #0
 80112e4:	461c      	mov	r4, r3
 80112e6:	4615      	mov	r5, r2
 80112e8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80112ec:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80112f0:	4a41      	ldr	r2, [pc, #260]	@ (80113f8 <SUBGRF_SetModulationParams+0x1a0>)
 80112f2:	f04f 0300 	mov.w	r3, #0
 80112f6:	4640      	mov	r0, r8
 80112f8:	4649      	mov	r1, r9
 80112fa:	f7ef fab7 	bl	800086c <__aeabi_uldivmod>
 80112fe:	4602      	mov	r2, r0
 8011300:	460b      	mov	r3, r1
 8011302:	4613      	mov	r3, r2
 8011304:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	0c1b      	lsrs	r3, r3, #16
 801130a:	b2db      	uxtb	r3, r3
 801130c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	0a1b      	lsrs	r3, r3, #8
 8011312:	b2db      	uxtb	r3, r3
 8011314:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	b2db      	uxtb	r3, r3
 801131a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801131c:	7cfb      	ldrb	r3, [r7, #19]
 801131e:	b29a      	uxth	r2, r3
 8011320:	f107 0308 	add.w	r3, r7, #8
 8011324:	4619      	mov	r1, r3
 8011326:	208b      	movs	r0, #139	@ 0x8b
 8011328:	f000 fa7a 	bl	8011820 <SUBGRF_WriteCommand>
        break;
 801132c:	e058      	b.n	80113e0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801132e:	2304      	movs	r3, #4
 8011330:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	691b      	ldr	r3, [r3, #16]
 8011336:	4a2f      	ldr	r2, [pc, #188]	@ (80113f4 <SUBGRF_SetModulationParams+0x19c>)
 8011338:	fbb2 f3f3 	udiv	r3, r2, r3
 801133c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	0c1b      	lsrs	r3, r3, #16
 8011342:	b2db      	uxtb	r3, r3
 8011344:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	0a1b      	lsrs	r3, r3, #8
 801134a:	b2db      	uxtb	r3, r3
 801134c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	b2db      	uxtb	r3, r3
 8011352:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	7d1b      	ldrb	r3, [r3, #20]
 8011358:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801135a:	7cfb      	ldrb	r3, [r7, #19]
 801135c:	b29a      	uxth	r2, r3
 801135e:	f107 0308 	add.w	r3, r7, #8
 8011362:	4619      	mov	r1, r3
 8011364:	208b      	movs	r0, #139	@ 0x8b
 8011366:	f000 fa5b 	bl	8011820 <SUBGRF_WriteCommand>
        break;
 801136a:	e039      	b.n	80113e0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801136c:	2304      	movs	r3, #4
 801136e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	7e1b      	ldrb	r3, [r3, #24]
 8011374:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	7e5b      	ldrb	r3, [r3, #25]
 801137a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	7e9b      	ldrb	r3, [r3, #26]
 8011380:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	7edb      	ldrb	r3, [r3, #27]
 8011386:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011388:	7cfb      	ldrb	r3, [r7, #19]
 801138a:	b29a      	uxth	r2, r3
 801138c:	f107 0308 	add.w	r3, r7, #8
 8011390:	4619      	mov	r1, r3
 8011392:	208b      	movs	r0, #139	@ 0x8b
 8011394:	f000 fa44 	bl	8011820 <SUBGRF_WriteCommand>

        break;
 8011398:	e022      	b.n	80113e0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801139a:	2305      	movs	r3, #5
 801139c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	4a14      	ldr	r2, [pc, #80]	@ (80113f4 <SUBGRF_SetModulationParams+0x19c>)
 80113a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80113a8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	0c1b      	lsrs	r3, r3, #16
 80113ae:	b2db      	uxtb	r3, r3
 80113b0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	0a1b      	lsrs	r3, r3, #8
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	b2db      	uxtb	r3, r3
 80113be:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	7b1b      	ldrb	r3, [r3, #12]
 80113c4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	7b5b      	ldrb	r3, [r3, #13]
 80113ca:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80113cc:	7cfb      	ldrb	r3, [r7, #19]
 80113ce:	b29a      	uxth	r2, r3
 80113d0:	f107 0308 	add.w	r3, r7, #8
 80113d4:	4619      	mov	r1, r3
 80113d6:	208b      	movs	r0, #139	@ 0x8b
 80113d8:	f000 fa22 	bl	8011820 <SUBGRF_WriteCommand>
        break;
 80113dc:	e000      	b.n	80113e0 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 80113de:	bf00      	nop
    }
}
 80113e0:	bf00      	nop
 80113e2:	3718      	adds	r7, #24
 80113e4:	46bd      	mov	sp, r7
 80113e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80113ea:	bf00      	nop
 80113ec:	08012560 	.word	0x08012560
 80113f0:	2000145d 	.word	0x2000145d
 80113f4:	3d090000 	.word	0x3d090000
 80113f8:	01e84800 	.word	0x01e84800

080113fc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b086      	sub	sp, #24
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8011404:	2300      	movs	r3, #0
 8011406:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8011408:	4a48      	ldr	r2, [pc, #288]	@ (801152c <SUBGRF_SetPacketParams+0x130>)
 801140a:	f107 030c 	add.w	r3, r7, #12
 801140e:	ca07      	ldmia	r2, {r0, r1, r2}
 8011410:	c303      	stmia	r3!, {r0, r1}
 8011412:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	781a      	ldrb	r2, [r3, #0]
 8011418:	4b45      	ldr	r3, [pc, #276]	@ (8011530 <SUBGRF_SetPacketParams+0x134>)
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	429a      	cmp	r2, r3
 801141e:	d004      	beq.n	801142a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	4618      	mov	r0, r3
 8011426:	f7ff fe23 	bl	8011070 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	781b      	ldrb	r3, [r3, #0]
 801142e:	2b03      	cmp	r3, #3
 8011430:	d878      	bhi.n	8011524 <SUBGRF_SetPacketParams+0x128>
 8011432:	a201      	add	r2, pc, #4	@ (adr r2, 8011438 <SUBGRF_SetPacketParams+0x3c>)
 8011434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011438:	08011449 	.word	0x08011449
 801143c:	080114d9 	.word	0x080114d9
 8011440:	080114cd 	.word	0x080114cd
 8011444:	08011449 	.word	0x08011449
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	7a5b      	ldrb	r3, [r3, #9]
 801144c:	2bf1      	cmp	r3, #241	@ 0xf1
 801144e:	d10a      	bne.n	8011466 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8011450:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8011454:	f7ff faaa 	bl	80109ac <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8011458:	f248 0005 	movw	r0, #32773	@ 0x8005
 801145c:	f7ff fac6 	bl	80109ec <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8011460:	2302      	movs	r3, #2
 8011462:	75bb      	strb	r3, [r7, #22]
 8011464:	e011      	b.n	801148a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	7a5b      	ldrb	r3, [r3, #9]
 801146a:	2bf2      	cmp	r3, #242	@ 0xf2
 801146c:	d10a      	bne.n	8011484 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801146e:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8011472:	f7ff fa9b 	bl	80109ac <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8011476:	f241 0021 	movw	r0, #4129	@ 0x1021
 801147a:	f7ff fab7 	bl	80109ec <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801147e:	2306      	movs	r3, #6
 8011480:	75bb      	strb	r3, [r7, #22]
 8011482:	e002      	b.n	801148a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	7a5b      	ldrb	r3, [r3, #9]
 8011488:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801148a:	2309      	movs	r3, #9
 801148c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	885b      	ldrh	r3, [r3, #2]
 8011492:	0a1b      	lsrs	r3, r3, #8
 8011494:	b29b      	uxth	r3, r3
 8011496:	b2db      	uxtb	r3, r3
 8011498:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	885b      	ldrh	r3, [r3, #2]
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	791b      	ldrb	r3, [r3, #4]
 80114a6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	795b      	ldrb	r3, [r3, #5]
 80114ac:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	799b      	ldrb	r3, [r3, #6]
 80114b2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	79db      	ldrb	r3, [r3, #7]
 80114b8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	7a1b      	ldrb	r3, [r3, #8]
 80114be:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80114c0:	7dbb      	ldrb	r3, [r7, #22]
 80114c2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	7a9b      	ldrb	r3, [r3, #10]
 80114c8:	753b      	strb	r3, [r7, #20]
        break;
 80114ca:	e022      	b.n	8011512 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80114cc:	2301      	movs	r3, #1
 80114ce:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	7b1b      	ldrb	r3, [r3, #12]
 80114d4:	733b      	strb	r3, [r7, #12]
        break;
 80114d6:	e01c      	b.n	8011512 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80114d8:	2306      	movs	r3, #6
 80114da:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	89db      	ldrh	r3, [r3, #14]
 80114e0:	0a1b      	lsrs	r3, r3, #8
 80114e2:	b29b      	uxth	r3, r3
 80114e4:	b2db      	uxtb	r3, r3
 80114e6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	89db      	ldrh	r3, [r3, #14]
 80114ec:	b2db      	uxtb	r3, r3
 80114ee:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	7c1a      	ldrb	r2, [r3, #16]
 80114f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011534 <SUBGRF_SetPacketParams+0x138>)
 80114f6:	4611      	mov	r1, r2
 80114f8:	7019      	strb	r1, [r3, #0]
 80114fa:	4613      	mov	r3, r2
 80114fc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	7c5b      	ldrb	r3, [r3, #17]
 8011502:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	7c9b      	ldrb	r3, [r3, #18]
 8011508:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	7cdb      	ldrb	r3, [r3, #19]
 801150e:	747b      	strb	r3, [r7, #17]
        break;
 8011510:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8011512:	7dfb      	ldrb	r3, [r7, #23]
 8011514:	b29a      	uxth	r2, r3
 8011516:	f107 030c 	add.w	r3, r7, #12
 801151a:	4619      	mov	r1, r3
 801151c:	208c      	movs	r0, #140	@ 0x8c
 801151e:	f000 f97f 	bl	8011820 <SUBGRF_WriteCommand>
 8011522:	e000      	b.n	8011526 <SUBGRF_SetPacketParams+0x12a>
        return;
 8011524:	bf00      	nop
}
 8011526:	3718      	adds	r7, #24
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}
 801152c:	08012568 	.word	0x08012568
 8011530:	2000145d 	.word	0x2000145d
 8011534:	2000145e 	.word	0x2000145e

08011538 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b084      	sub	sp, #16
 801153c:	af00      	add	r7, sp, #0
 801153e:	4603      	mov	r3, r0
 8011540:	460a      	mov	r2, r1
 8011542:	71fb      	strb	r3, [r7, #7]
 8011544:	4613      	mov	r3, r2
 8011546:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8011548:	79fb      	ldrb	r3, [r7, #7]
 801154a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801154c:	79bb      	ldrb	r3, [r7, #6]
 801154e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8011550:	f107 030c 	add.w	r3, r7, #12
 8011554:	2202      	movs	r2, #2
 8011556:	4619      	mov	r1, r3
 8011558:	208f      	movs	r0, #143	@ 0x8f
 801155a:	f000 f961 	bl	8011820 <SUBGRF_WriteCommand>
}
 801155e:	bf00      	nop
 8011560:	3710      	adds	r7, #16
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}

08011566 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8011566:	b580      	push	{r7, lr}
 8011568:	b082      	sub	sp, #8
 801156a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801156c:	2300      	movs	r3, #0
 801156e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8011570:	1d3b      	adds	r3, r7, #4
 8011572:	2201      	movs	r2, #1
 8011574:	4619      	mov	r1, r3
 8011576:	2015      	movs	r0, #21
 8011578:	f000 f974 	bl	8011864 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801157c:	793b      	ldrb	r3, [r7, #4]
 801157e:	425b      	negs	r3, r3
 8011580:	105b      	asrs	r3, r3, #1
 8011582:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8011584:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8011588:	4618      	mov	r0, r3
 801158a:	3708      	adds	r7, #8
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801159a:	f107 030c 	add.w	r3, r7, #12
 801159e:	2202      	movs	r2, #2
 80115a0:	4619      	mov	r1, r3
 80115a2:	2013      	movs	r0, #19
 80115a4:	f000 f95e 	bl	8011864 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80115a8:	f7ff fd7e 	bl	80110a8 <SUBGRF_GetPacketType>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b01      	cmp	r3, #1
 80115b0:	d10d      	bne.n	80115ce <SUBGRF_GetRxBufferStatus+0x3e>
 80115b2:	4b0c      	ldr	r3, [pc, #48]	@ (80115e4 <SUBGRF_GetRxBufferStatus+0x54>)
 80115b4:	781b      	ldrb	r3, [r3, #0]
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	2b01      	cmp	r3, #1
 80115ba:	d108      	bne.n	80115ce <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80115bc:	f240 7002 	movw	r0, #1794	@ 0x702
 80115c0:	f000 f886 	bl	80116d0 <SUBGRF_ReadRegister>
 80115c4:	4603      	mov	r3, r0
 80115c6:	461a      	mov	r2, r3
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	701a      	strb	r2, [r3, #0]
 80115cc:	e002      	b.n	80115d4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80115ce:	7b3a      	ldrb	r2, [r7, #12]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80115d4:	7b7a      	ldrb	r2, [r7, #13]
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	701a      	strb	r2, [r3, #0]
}
 80115da:	bf00      	nop
 80115dc:	3710      	adds	r7, #16
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}
 80115e2:	bf00      	nop
 80115e4:	2000145e 	.word	0x2000145e

080115e8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b084      	sub	sp, #16
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80115f0:	f107 030c 	add.w	r3, r7, #12
 80115f4:	2203      	movs	r2, #3
 80115f6:	4619      	mov	r1, r3
 80115f8:	2014      	movs	r0, #20
 80115fa:	f000 f933 	bl	8011864 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80115fe:	f7ff fd53 	bl	80110a8 <SUBGRF_GetPacketType>
 8011602:	4603      	mov	r3, r0
 8011604:	461a      	mov	r2, r3
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	781b      	ldrb	r3, [r3, #0]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d002      	beq.n	8011618 <SUBGRF_GetPacketStatus+0x30>
 8011612:	2b01      	cmp	r3, #1
 8011614:	d013      	beq.n	801163e <SUBGRF_GetPacketStatus+0x56>
 8011616:	e02a      	b.n	801166e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8011618:	7b3a      	ldrb	r2, [r7, #12]
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801161e:	7b7b      	ldrb	r3, [r7, #13]
 8011620:	425b      	negs	r3, r3
 8011622:	105b      	asrs	r3, r3, #1
 8011624:	b25a      	sxtb	r2, r3
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801162a:	7bbb      	ldrb	r3, [r7, #14]
 801162c:	425b      	negs	r3, r3
 801162e:	105b      	asrs	r3, r3, #1
 8011630:	b25a      	sxtb	r2, r3
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2200      	movs	r2, #0
 801163a:	609a      	str	r2, [r3, #8]
            break;
 801163c:	e020      	b.n	8011680 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801163e:	7b3b      	ldrb	r3, [r7, #12]
 8011640:	425b      	negs	r3, r3
 8011642:	105b      	asrs	r3, r3, #1
 8011644:	b25a      	sxtb	r2, r3
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801164a:	7b7b      	ldrb	r3, [r7, #13]
 801164c:	b25b      	sxtb	r3, r3
 801164e:	3302      	adds	r3, #2
 8011650:	109b      	asrs	r3, r3, #2
 8011652:	b25a      	sxtb	r2, r3
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8011658:	7bbb      	ldrb	r3, [r7, #14]
 801165a:	425b      	negs	r3, r3
 801165c:	105b      	asrs	r3, r3, #1
 801165e:	b25a      	sxtb	r2, r3
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8011664:	4b08      	ldr	r3, [pc, #32]	@ (8011688 <SUBGRF_GetPacketStatus+0xa0>)
 8011666:	681a      	ldr	r2, [r3, #0]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	611a      	str	r2, [r3, #16]
            break;
 801166c:	e008      	b.n	8011680 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801166e:	2214      	movs	r2, #20
 8011670:	2100      	movs	r1, #0
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f000 fb76 	bl	8011d64 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	220f      	movs	r2, #15
 801167c:	701a      	strb	r2, [r3, #0]
            break;
 801167e:	bf00      	nop
    }
}
 8011680:	bf00      	nop
 8011682:	3710      	adds	r7, #16
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	20001460 	.word	0x20001460

0801168c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b086      	sub	sp, #24
 8011690:	af00      	add	r7, sp, #0
 8011692:	4603      	mov	r3, r0
 8011694:	460a      	mov	r2, r1
 8011696:	80fb      	strh	r3, [r7, #6]
 8011698:	4613      	mov	r3, r2
 801169a:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801169c:	f3ef 8310 	mrs	r3, PRIMASK
 80116a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80116a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80116a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80116a6:	b672      	cpsid	i
}
 80116a8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80116aa:	1d7a      	adds	r2, r7, #5
 80116ac:	88f9      	ldrh	r1, [r7, #6]
 80116ae:	2301      	movs	r3, #1
 80116b0:	4806      	ldr	r0, [pc, #24]	@ (80116cc <SUBGRF_WriteRegister+0x40>)
 80116b2:	f7f2 f9bf 	bl	8003a34 <HAL_SUBGHZ_WriteRegisters>
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	f383 8810 	msr	PRIMASK, r3
}
 80116c0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80116c2:	bf00      	nop
 80116c4:	3718      	adds	r7, #24
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	2000013c 	.word	0x2000013c

080116d0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b086      	sub	sp, #24
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	4603      	mov	r3, r0
 80116d8:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116da:	f3ef 8310 	mrs	r3, PRIMASK
 80116de:	60fb      	str	r3, [r7, #12]
  return(result);
 80116e0:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 80116e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80116e4:	b672      	cpsid	i
}
 80116e6:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80116e8:	f107 020b 	add.w	r2, r7, #11
 80116ec:	88f9      	ldrh	r1, [r7, #6]
 80116ee:	2301      	movs	r3, #1
 80116f0:	4806      	ldr	r0, [pc, #24]	@ (801170c <SUBGRF_ReadRegister+0x3c>)
 80116f2:	f7f2 f9fe 	bl	8003af2 <HAL_SUBGHZ_ReadRegisters>
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	f383 8810 	msr	PRIMASK, r3
}
 8011700:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 8011702:	7afb      	ldrb	r3, [r7, #11]
}
 8011704:	4618      	mov	r0, r3
 8011706:	3718      	adds	r7, #24
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}
 801170c:	2000013c 	.word	0x2000013c

08011710 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b086      	sub	sp, #24
 8011714:	af00      	add	r7, sp, #0
 8011716:	4603      	mov	r3, r0
 8011718:	6039      	str	r1, [r7, #0]
 801171a:	80fb      	strh	r3, [r7, #6]
 801171c:	4613      	mov	r3, r2
 801171e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011720:	f3ef 8310 	mrs	r3, PRIMASK
 8011724:	60fb      	str	r3, [r7, #12]
  return(result);
 8011726:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8011728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801172a:	b672      	cpsid	i
}
 801172c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801172e:	88bb      	ldrh	r3, [r7, #4]
 8011730:	88f9      	ldrh	r1, [r7, #6]
 8011732:	683a      	ldr	r2, [r7, #0]
 8011734:	4806      	ldr	r0, [pc, #24]	@ (8011750 <SUBGRF_WriteRegisters+0x40>)
 8011736:	f7f2 f97d 	bl	8003a34 <HAL_SUBGHZ_WriteRegisters>
 801173a:	697b      	ldr	r3, [r7, #20]
 801173c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	f383 8810 	msr	PRIMASK, r3
}
 8011744:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8011746:	bf00      	nop
 8011748:	3718      	adds	r7, #24
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}
 801174e:	bf00      	nop
 8011750:	2000013c 	.word	0x2000013c

08011754 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b086      	sub	sp, #24
 8011758:	af00      	add	r7, sp, #0
 801175a:	4603      	mov	r3, r0
 801175c:	6039      	str	r1, [r7, #0]
 801175e:	80fb      	strh	r3, [r7, #6]
 8011760:	4613      	mov	r3, r2
 8011762:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011764:	f3ef 8310 	mrs	r3, PRIMASK
 8011768:	60fb      	str	r3, [r7, #12]
  return(result);
 801176a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801176c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801176e:	b672      	cpsid	i
}
 8011770:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8011772:	88bb      	ldrh	r3, [r7, #4]
 8011774:	88f9      	ldrh	r1, [r7, #6]
 8011776:	683a      	ldr	r2, [r7, #0]
 8011778:	4806      	ldr	r0, [pc, #24]	@ (8011794 <SUBGRF_ReadRegisters+0x40>)
 801177a:	f7f2 f9ba 	bl	8003af2 <HAL_SUBGHZ_ReadRegisters>
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	f383 8810 	msr	PRIMASK, r3
}
 8011788:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801178a:	bf00      	nop
 801178c:	3718      	adds	r7, #24
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	2000013c 	.word	0x2000013c

08011798 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b086      	sub	sp, #24
 801179c:	af00      	add	r7, sp, #0
 801179e:	4603      	mov	r3, r0
 80117a0:	6039      	str	r1, [r7, #0]
 80117a2:	71fb      	strb	r3, [r7, #7]
 80117a4:	4613      	mov	r3, r2
 80117a6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117a8:	f3ef 8310 	mrs	r3, PRIMASK
 80117ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80117ae:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80117b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80117b2:	b672      	cpsid	i
}
 80117b4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80117b6:	79bb      	ldrb	r3, [r7, #6]
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	79f9      	ldrb	r1, [r7, #7]
 80117bc:	683a      	ldr	r2, [r7, #0]
 80117be:	4806      	ldr	r0, [pc, #24]	@ (80117d8 <SUBGRF_WriteBuffer+0x40>)
 80117c0:	f7f2 faab 	bl	8003d1a <HAL_SUBGHZ_WriteBuffer>
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117c8:	693b      	ldr	r3, [r7, #16]
 80117ca:	f383 8810 	msr	PRIMASK, r3
}
 80117ce:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80117d0:	bf00      	nop
 80117d2:	3718      	adds	r7, #24
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}
 80117d8:	2000013c 	.word	0x2000013c

080117dc <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b086      	sub	sp, #24
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	4603      	mov	r3, r0
 80117e4:	6039      	str	r1, [r7, #0]
 80117e6:	71fb      	strb	r3, [r7, #7]
 80117e8:	4613      	mov	r3, r2
 80117ea:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117ec:	f3ef 8310 	mrs	r3, PRIMASK
 80117f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80117f2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80117f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80117f6:	b672      	cpsid	i
}
 80117f8:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80117fa:	79bb      	ldrb	r3, [r7, #6]
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	79f9      	ldrb	r1, [r7, #7]
 8011800:	683a      	ldr	r2, [r7, #0]
 8011802:	4806      	ldr	r0, [pc, #24]	@ (801181c <SUBGRF_ReadBuffer+0x40>)
 8011804:	f7f2 fadc 	bl	8003dc0 <HAL_SUBGHZ_ReadBuffer>
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	f383 8810 	msr	PRIMASK, r3
}
 8011812:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8011814:	bf00      	nop
 8011816:	3718      	adds	r7, #24
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}
 801181c:	2000013c 	.word	0x2000013c

08011820 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b086      	sub	sp, #24
 8011824:	af00      	add	r7, sp, #0
 8011826:	4603      	mov	r3, r0
 8011828:	6039      	str	r1, [r7, #0]
 801182a:	71fb      	strb	r3, [r7, #7]
 801182c:	4613      	mov	r3, r2
 801182e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011830:	f3ef 8310 	mrs	r3, PRIMASK
 8011834:	60fb      	str	r3, [r7, #12]
  return(result);
 8011836:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8011838:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801183a:	b672      	cpsid	i
}
 801183c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801183e:	88bb      	ldrh	r3, [r7, #4]
 8011840:	79f9      	ldrb	r1, [r7, #7]
 8011842:	683a      	ldr	r2, [r7, #0]
 8011844:	4806      	ldr	r0, [pc, #24]	@ (8011860 <SUBGRF_WriteCommand+0x40>)
 8011846:	f7f2 f9b5 	bl	8003bb4 <HAL_SUBGHZ_ExecSetCmd>
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801184e:	693b      	ldr	r3, [r7, #16]
 8011850:	f383 8810 	msr	PRIMASK, r3
}
 8011854:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8011856:	bf00      	nop
 8011858:	3718      	adds	r7, #24
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop
 8011860:	2000013c 	.word	0x2000013c

08011864 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b086      	sub	sp, #24
 8011868:	af00      	add	r7, sp, #0
 801186a:	4603      	mov	r3, r0
 801186c:	6039      	str	r1, [r7, #0]
 801186e:	71fb      	strb	r3, [r7, #7]
 8011870:	4613      	mov	r3, r2
 8011872:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011874:	f3ef 8310 	mrs	r3, PRIMASK
 8011878:	60fb      	str	r3, [r7, #12]
  return(result);
 801187a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801187c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801187e:	b672      	cpsid	i
}
 8011880:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8011882:	88bb      	ldrh	r3, [r7, #4]
 8011884:	79f9      	ldrb	r1, [r7, #7]
 8011886:	683a      	ldr	r2, [r7, #0]
 8011888:	4806      	ldr	r0, [pc, #24]	@ (80118a4 <SUBGRF_ReadCommand+0x40>)
 801188a:	f7f2 f9f2 	bl	8003c72 <HAL_SUBGHZ_ExecGetCmd>
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	f383 8810 	msr	PRIMASK, r3
}
 8011898:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801189a:	bf00      	nop
 801189c:	3718      	adds	r7, #24
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	2000013c 	.word	0x2000013c

080118a8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b084      	sub	sp, #16
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	4603      	mov	r3, r0
 80118b0:	460a      	mov	r2, r1
 80118b2:	71fb      	strb	r3, [r7, #7]
 80118b4:	4613      	mov	r3, r2
 80118b6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80118b8:	2301      	movs	r3, #1
 80118ba:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80118bc:	79bb      	ldrb	r3, [r7, #6]
 80118be:	2b01      	cmp	r3, #1
 80118c0:	d10d      	bne.n	80118de <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80118c2:	79fb      	ldrb	r3, [r7, #7]
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d104      	bne.n	80118d2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80118c8:	2302      	movs	r3, #2
 80118ca:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80118cc:	2004      	movs	r0, #4
 80118ce:	f000 f8ef 	bl	8011ab0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80118d2:	79fb      	ldrb	r3, [r7, #7]
 80118d4:	2b02      	cmp	r3, #2
 80118d6:	d107      	bne.n	80118e8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80118d8:	2303      	movs	r3, #3
 80118da:	73fb      	strb	r3, [r7, #15]
 80118dc:	e004      	b.n	80118e8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80118de:	79bb      	ldrb	r3, [r7, #6]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d101      	bne.n	80118e8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80118e4:	2301      	movs	r3, #1
 80118e6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80118e8:	7bfb      	ldrb	r3, [r7, #15]
 80118ea:	4618      	mov	r0, r3
 80118ec:	f7ef feb3 	bl	8001656 <RBI_ConfigRFSwitch>
}
 80118f0:	bf00      	nop
 80118f2:	3710      	adds	r7, #16
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}

080118f8 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b084      	sub	sp, #16
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	4603      	mov	r3, r0
 8011900:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8011902:	2301      	movs	r3, #1
 8011904:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8011906:	f7ef feb3 	bl	8001670 <RBI_GetTxConfig>
 801190a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	2b02      	cmp	r3, #2
 8011910:	d016      	beq.n	8011940 <SUBGRF_SetRfTxPower+0x48>
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	2b02      	cmp	r3, #2
 8011916:	dc16      	bgt.n	8011946 <SUBGRF_SetRfTxPower+0x4e>
 8011918:	68bb      	ldr	r3, [r7, #8]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d003      	beq.n	8011926 <SUBGRF_SetRfTxPower+0x2e>
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	2b01      	cmp	r3, #1
 8011922:	d00a      	beq.n	801193a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8011924:	e00f      	b.n	8011946 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8011926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801192a:	2b0f      	cmp	r3, #15
 801192c:	dd02      	ble.n	8011934 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801192e:	2302      	movs	r3, #2
 8011930:	73fb      	strb	r3, [r7, #15]
            break;
 8011932:	e009      	b.n	8011948 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8011934:	2301      	movs	r3, #1
 8011936:	73fb      	strb	r3, [r7, #15]
            break;
 8011938:	e006      	b.n	8011948 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801193a:	2301      	movs	r3, #1
 801193c:	73fb      	strb	r3, [r7, #15]
            break;
 801193e:	e003      	b.n	8011948 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8011940:	2302      	movs	r3, #2
 8011942:	73fb      	strb	r3, [r7, #15]
            break;
 8011944:	e000      	b.n	8011948 <SUBGRF_SetRfTxPower+0x50>
            break;
 8011946:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8011948:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801194c:	7bfb      	ldrb	r3, [r7, #15]
 801194e:	2202      	movs	r2, #2
 8011950:	4618      	mov	r0, r3
 8011952:	f7ff fbb3 	bl	80110bc <SUBGRF_SetTxParams>

    return paSelect;
 8011956:	7bfb      	ldrb	r3, [r7, #15]
}
 8011958:	4618      	mov	r0, r3
 801195a:	3710      	adds	r7, #16
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}

08011960 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8011960:	b480      	push	{r7}
 8011962:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8011964:	2301      	movs	r3, #1
}
 8011966:	4618      	mov	r0, r3
 8011968:	46bd      	mov	sp, r7
 801196a:	bc80      	pop	{r7}
 801196c:	4770      	bx	lr
	...

08011970 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8011978:	4b03      	ldr	r3, [pc, #12]	@ (8011988 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2001      	movs	r0, #1
 801197e:	4798      	blx	r3
}
 8011980:	bf00      	nop
 8011982:	3708      	adds	r7, #8
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}
 8011988:	20001468 	.word	0x20001468

0801198c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8011994:	4b03      	ldr	r3, [pc, #12]	@ (80119a4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	2002      	movs	r0, #2
 801199a:	4798      	blx	r3
}
 801199c:	bf00      	nop
 801199e:	3708      	adds	r7, #8
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}
 80119a4:	20001468 	.word	0x20001468

080119a8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b082      	sub	sp, #8
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80119b0:	4b03      	ldr	r3, [pc, #12]	@ (80119c0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	2040      	movs	r0, #64	@ 0x40
 80119b6:	4798      	blx	r3
}
 80119b8:	bf00      	nop
 80119ba:	3708      	adds	r7, #8
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	20001468 	.word	0x20001468

080119c4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b082      	sub	sp, #8
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	460b      	mov	r3, r1
 80119ce:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80119d0:	78fb      	ldrb	r3, [r7, #3]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d002      	beq.n	80119dc <HAL_SUBGHZ_CADStatusCallback+0x18>
 80119d6:	2b01      	cmp	r3, #1
 80119d8:	d005      	beq.n	80119e6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80119da:	e00a      	b.n	80119f2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80119dc:	4b07      	ldr	r3, [pc, #28]	@ (80119fc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	2080      	movs	r0, #128	@ 0x80
 80119e2:	4798      	blx	r3
            break;
 80119e4:	e005      	b.n	80119f2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80119e6:	4b05      	ldr	r3, [pc, #20]	@ (80119fc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80119ee:	4798      	blx	r3
            break;
 80119f0:	bf00      	nop
    }
}
 80119f2:	bf00      	nop
 80119f4:	3708      	adds	r7, #8
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}
 80119fa:	bf00      	nop
 80119fc:	20001468 	.word	0x20001468

08011a00 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b082      	sub	sp, #8
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8011a08:	4b04      	ldr	r3, [pc, #16]	@ (8011a1c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8011a10:	4798      	blx	r3
}
 8011a12:	bf00      	nop
 8011a14:	3708      	adds	r7, #8
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	20001468 	.word	0x20001468

08011a20 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b082      	sub	sp, #8
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8011a28:	4b03      	ldr	r3, [pc, #12]	@ (8011a38 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	2020      	movs	r0, #32
 8011a2e:	4798      	blx	r3
}
 8011a30:	bf00      	nop
 8011a32:	3708      	adds	r7, #8
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}
 8011a38:	20001468 	.word	0x20001468

08011a3c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8011a44:	4b03      	ldr	r3, [pc, #12]	@ (8011a54 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	2004      	movs	r0, #4
 8011a4a:	4798      	blx	r3
}
 8011a4c:	bf00      	nop
 8011a4e:	3708      	adds	r7, #8
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}
 8011a54:	20001468 	.word	0x20001468

08011a58 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8011a60:	4b03      	ldr	r3, [pc, #12]	@ (8011a70 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	2008      	movs	r0, #8
 8011a66:	4798      	blx	r3
}
 8011a68:	bf00      	nop
 8011a6a:	3708      	adds	r7, #8
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}
 8011a70:	20001468 	.word	0x20001468

08011a74 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8011a7c:	4b03      	ldr	r3, [pc, #12]	@ (8011a8c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	2010      	movs	r0, #16
 8011a82:	4798      	blx	r3
}
 8011a84:	bf00      	nop
 8011a86:	3708      	adds	r7, #8
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}
 8011a8c:	20001468 	.word	0x20001468

08011a90 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b082      	sub	sp, #8
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8011a98:	4b04      	ldr	r3, [pc, #16]	@ (8011aac <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8011aa0:	4798      	blx	r3
}
 8011aa2:	bf00      	nop
 8011aa4:	3708      	adds	r7, #8
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	20001468 	.word	0x20001468

08011ab0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b084      	sub	sp, #16
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8011aba:	f7ef fdef 	bl	800169c <RBI_IsDCDC>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b01      	cmp	r3, #1
 8011ac2:	d112      	bne.n	8011aea <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8011ac4:	f640 1023 	movw	r0, #2339	@ 0x923
 8011ac8:	f7ff fe02 	bl	80116d0 <SUBGRF_ReadRegister>
 8011acc:	4603      	mov	r3, r0
 8011ace:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8011ad0:	7bfb      	ldrb	r3, [r7, #15]
 8011ad2:	f023 0306 	bic.w	r3, r3, #6
 8011ad6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8011ad8:	7bfa      	ldrb	r2, [r7, #15]
 8011ada:	79fb      	ldrb	r3, [r7, #7]
 8011adc:	4313      	orrs	r3, r2
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	4619      	mov	r1, r3
 8011ae2:	f640 1023 	movw	r0, #2339	@ 0x923
 8011ae6:	f7ff fdd1 	bl	801168c <SUBGRF_WriteRegister>
  }
}
 8011aea:	bf00      	nop
 8011aec:	3710      	adds	r7, #16
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}
	...

08011af4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8011af4:	b480      	push	{r7}
 8011af6:	b085      	sub	sp, #20
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d101      	bne.n	8011b06 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8011b02:	231f      	movs	r3, #31
 8011b04:	e017      	b.n	8011b36 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8011b06:	2300      	movs	r3, #0
 8011b08:	73fb      	strb	r3, [r7, #15]
 8011b0a:	e00f      	b.n	8011b2c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8011b0c:	7bfb      	ldrb	r3, [r7, #15]
 8011b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8011b40 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8011b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011b14:	687a      	ldr	r2, [r7, #4]
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d205      	bcs.n	8011b26 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8011b1a:	7bfb      	ldrb	r3, [r7, #15]
 8011b1c:	4a08      	ldr	r2, [pc, #32]	@ (8011b40 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8011b1e:	00db      	lsls	r3, r3, #3
 8011b20:	4413      	add	r3, r2
 8011b22:	791b      	ldrb	r3, [r3, #4]
 8011b24:	e007      	b.n	8011b36 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8011b26:	7bfb      	ldrb	r3, [r7, #15]
 8011b28:	3301      	adds	r3, #1
 8011b2a:	73fb      	strb	r3, [r7, #15]
 8011b2c:	7bfb      	ldrb	r3, [r7, #15]
 8011b2e:	2b15      	cmp	r3, #21
 8011b30:	d9ec      	bls.n	8011b0c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8011b32:	bf00      	nop
 8011b34:	e7fd      	b.n	8011b32 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3714      	adds	r7, #20
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bc80      	pop	{r7}
 8011b3e:	4770      	bx	lr
 8011b40:	08012b10 	.word	0x08012b10

08011b44 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b08a      	sub	sp, #40	@ 0x28
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8011b4e:	4b35      	ldr	r3, [pc, #212]	@ (8011c24 <SUBGRF_GetCFO+0xe0>)
 8011b50:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8011b52:	f640 0007 	movw	r0, #2055	@ 0x807
 8011b56:	f7ff fdbb 	bl	80116d0 <SUBGRF_ReadRegister>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8011b5e:	7ffb      	ldrb	r3, [r7, #31]
 8011b60:	08db      	lsrs	r3, r3, #3
 8011b62:	b2db      	uxtb	r3, r3
 8011b64:	f003 0303 	and.w	r3, r3, #3
 8011b68:	3328      	adds	r3, #40	@ 0x28
 8011b6a:	443b      	add	r3, r7
 8011b6c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8011b70:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8011b72:	7ffb      	ldrb	r3, [r7, #31]
 8011b74:	f003 0307 	and.w	r3, r3, #7
 8011b78:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8011b7a:	7fba      	ldrb	r2, [r7, #30]
 8011b7c:	7f7b      	ldrb	r3, [r7, #29]
 8011b7e:	3301      	adds	r3, #1
 8011b80:	fa02 f303 	lsl.w	r3, r2, r3
 8011b84:	461a      	mov	r2, r3
 8011b86:	4b28      	ldr	r3, [pc, #160]	@ (8011c28 <SUBGRF_GetCFO+0xe4>)
 8011b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b8c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8011b8e:	69ba      	ldr	r2, [r7, #24]
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b96:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8011b98:	2301      	movs	r3, #1
 8011b9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8011b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ba2:	697a      	ldr	r2, [r7, #20]
 8011ba4:	fb02 f303 	mul.w	r3, r2, r3
 8011ba8:	2b07      	cmp	r3, #7
 8011baa:	d802      	bhi.n	8011bb2 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8011bac:	2302      	movs	r3, #2
 8011bae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 8011bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011bb6:	697a      	ldr	r2, [r7, #20]
 8011bb8:	fb02 f303 	mul.w	r3, r2, r3
 8011bbc:	2b03      	cmp	r3, #3
 8011bbe:	d802      	bhi.n	8011bc6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8011bc0:	2304      	movs	r3, #4
 8011bc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8011bc6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011bca:	69bb      	ldr	r3, [r7, #24]
 8011bcc:	fb02 f303 	mul.w	r3, r2, r3
 8011bd0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8011bd2:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8011bd6:	f7ff fd7b 	bl	80116d0 <SUBGRF_ReadRegister>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	021b      	lsls	r3, r3, #8
 8011bde:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8011be2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8011be4:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8011be8:	f7ff fd72 	bl	80116d0 <SUBGRF_ReadRegister>
 8011bec:	4603      	mov	r3, r0
 8011bee:	461a      	mov	r2, r3
 8011bf0:	6a3b      	ldr	r3, [r7, #32]
 8011bf2:	4313      	orrs	r3, r2
 8011bf4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8011bf6:	6a3b      	ldr	r3, [r7, #32]
 8011bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d005      	beq.n	8011c0c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8011c00:	6a3b      	ldr	r3, [r7, #32]
 8011c02:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8011c06:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8011c0a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8011c0c:	693b      	ldr	r3, [r7, #16]
 8011c0e:	095b      	lsrs	r3, r3, #5
 8011c10:	6a3a      	ldr	r2, [r7, #32]
 8011c12:	fb02 f303 	mul.w	r3, r2, r3
 8011c16:	11da      	asrs	r2, r3, #7
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	601a      	str	r2, [r3, #0]
}
 8011c1c:	bf00      	nop
 8011c1e:	3728      	adds	r7, #40	@ 0x28
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}
 8011c24:	0c0a0804 	.word	0x0c0a0804
 8011c28:	01e84800 	.word	0x01e84800

08011c2c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	b087      	sub	sp, #28
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	4603      	mov	r3, r0
 8011c34:	60b9      	str	r1, [r7, #8]
 8011c36:	607a      	str	r2, [r7, #4]
 8011c38:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 8011c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8011c42:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8011c44:	697b      	ldr	r3, [r7, #20]
}
 8011c46:	4618      	mov	r0, r3
 8011c48:	371c      	adds	r7, #28
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bc80      	pop	{r7}
 8011c4e:	4770      	bx	lr

08011c50 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8011c50:	b480      	push	{r7}
 8011c52:	b087      	sub	sp, #28
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	4603      	mov	r3, r0
 8011c58:	60b9      	str	r1, [r7, #8]
 8011c5a:	607a      	str	r2, [r7, #4]
 8011c5c:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8011c62:	f04f 33ff 	mov.w	r3, #4294967295
 8011c66:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8011c68:	697b      	ldr	r3, [r7, #20]
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	371c      	adds	r7, #28
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bc80      	pop	{r7}
 8011c72:	4770      	bx	lr

08011c74 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8011c74:	b480      	push	{r7}
 8011c76:	b085      	sub	sp, #20
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	60f8      	str	r0, [r7, #12]
 8011c7c:	60b9      	str	r1, [r7, #8]
 8011c7e:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 8011c80:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	3714      	adds	r7, #20
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bc80      	pop	{r7}
 8011c8c:	4770      	bx	lr

08011c8e <RFW_DeInit>:

void RFW_DeInit( void )
{
 8011c8e:	b480      	push	{r7}
 8011c90:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8011c92:	bf00      	nop
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bc80      	pop	{r7}
 8011c98:	4770      	bx	lr

08011c9a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 8011c9a:	b480      	push	{r7}
 8011c9c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 8011c9e:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bc80      	pop	{r7}
 8011ca6:	4770      	bx	lr

08011ca8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8011ca8:	b480      	push	{r7}
 8011caa:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8011cac:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bc80      	pop	{r7}
 8011cb4:	4770      	bx	lr

08011cb6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8011cb6:	b480      	push	{r7}
 8011cb8:	b083      	sub	sp, #12
 8011cba:	af00      	add	r7, sp, #0
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8011cc0:	bf00      	nop
 8011cc2:	370c      	adds	r7, #12
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bc80      	pop	{r7}
 8011cc8:	4770      	bx	lr

08011cca <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 8011cca:	b480      	push	{r7}
 8011ccc:	b087      	sub	sp, #28
 8011cce:	af00      	add	r7, sp, #0
 8011cd0:	60f8      	str	r0, [r7, #12]
 8011cd2:	460b      	mov	r3, r1
 8011cd4:	607a      	str	r2, [r7, #4]
 8011cd6:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 8011cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cdc:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8011cde:	697b      	ldr	r3, [r7, #20]
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	371c      	adds	r7, #28
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bc80      	pop	{r7}
 8011ce8:	4770      	bx	lr

08011cea <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8011cea:	b480      	push	{r7}
 8011cec:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8011cee:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bc80      	pop	{r7}
 8011cf8:	4770      	bx	lr

08011cfa <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 8011cfa:	b480      	push	{r7}
 8011cfc:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8011cfe:	bf00      	nop
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bc80      	pop	{r7}
 8011d04:	4770      	bx	lr

08011d06 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8011d06:	b480      	push	{r7}
 8011d08:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8011d0a:	bf00      	nop
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bc80      	pop	{r7}
 8011d10:	4770      	bx	lr

08011d12 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8011d12:	b480      	push	{r7}
 8011d14:	b083      	sub	sp, #12
 8011d16:	af00      	add	r7, sp, #0
 8011d18:	4603      	mov	r3, r0
 8011d1a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8011d1c:	bf00      	nop
 8011d1e:	370c      	adds	r7, #12
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bc80      	pop	{r7}
 8011d24:	4770      	bx	lr

08011d26 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8011d26:	b480      	push	{r7}
 8011d28:	b087      	sub	sp, #28
 8011d2a:	af00      	add	r7, sp, #0
 8011d2c:	60f8      	str	r0, [r7, #12]
 8011d2e:	60b9      	str	r1, [r7, #8]
 8011d30:	4613      	mov	r3, r2
 8011d32:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	613b      	str	r3, [r7, #16]

  while( size-- )
 8011d3c:	e007      	b.n	8011d4e <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8011d3e:	693a      	ldr	r2, [r7, #16]
 8011d40:	1c53      	adds	r3, r2, #1
 8011d42:	613b      	str	r3, [r7, #16]
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	1c59      	adds	r1, r3, #1
 8011d48:	6179      	str	r1, [r7, #20]
 8011d4a:	7812      	ldrb	r2, [r2, #0]
 8011d4c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8011d4e:	88fb      	ldrh	r3, [r7, #6]
 8011d50:	1e5a      	subs	r2, r3, #1
 8011d52:	80fa      	strh	r2, [r7, #6]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d1f2      	bne.n	8011d3e <UTIL_MEM_cpy_8+0x18>
    }
}
 8011d58:	bf00      	nop
 8011d5a:	bf00      	nop
 8011d5c:	371c      	adds	r7, #28
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bc80      	pop	{r7}
 8011d62:	4770      	bx	lr

08011d64 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8011d64:	b480      	push	{r7}
 8011d66:	b085      	sub	sp, #20
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	70fb      	strb	r3, [r7, #3]
 8011d70:	4613      	mov	r3, r2
 8011d72:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8011d78:	e004      	b.n	8011d84 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	1c5a      	adds	r2, r3, #1
 8011d7e:	60fa      	str	r2, [r7, #12]
 8011d80:	78fa      	ldrb	r2, [r7, #3]
 8011d82:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8011d84:	883b      	ldrh	r3, [r7, #0]
 8011d86:	1e5a      	subs	r2, r3, #1
 8011d88:	803a      	strh	r2, [r7, #0]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d1f5      	bne.n	8011d7a <UTIL_MEM_set_8+0x16>
  }
}
 8011d8e:	bf00      	nop
 8011d90:	bf00      	nop
 8011d92:	3714      	adds	r7, #20
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bc80      	pop	{r7}
 8011d98:	4770      	bx	lr

08011d9a <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	b480      	push	{r7}
 8011d9e:	b087      	sub	sp, #28
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	60f8      	str	r0, [r7, #12]
 8011da4:	1d38      	adds	r0, r7, #4
 8011da6:	e880 0006 	stmia.w	r0, {r1, r2}
 8011daa:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8011dac:	2300      	movs	r3, #0
 8011dae:	613b      	str	r3, [r7, #16]
 8011db0:	2300      	movs	r3, #0
 8011db2:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8011db4:	687a      	ldr	r2, [r7, #4]
 8011db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011db8:	4413      	add	r3, r2
 8011dba:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8011dbc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011dc0:	b29a      	uxth	r2, r3
 8011dc2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8011dc6:	b29b      	uxth	r3, r3
 8011dc8:	4413      	add	r3, r2
 8011dca:	b29b      	uxth	r3, r3
 8011dcc:	b21b      	sxth	r3, r3
 8011dce:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8011dd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011dd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011dd8:	db0a      	blt.n	8011df0 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	3301      	adds	r3, #1
 8011dde:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8011de0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011de4:	b29b      	uxth	r3, r3
 8011de6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	b21b      	sxth	r3, r3
 8011dee:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	461a      	mov	r2, r3
 8011df4:	f107 0310 	add.w	r3, r7, #16
 8011df8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011dfc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8011e00:	68f8      	ldr	r0, [r7, #12]
 8011e02:	371c      	adds	r7, #28
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bc80      	pop	{r7}
 8011e08:	b002      	add	sp, #8
 8011e0a:	4770      	bx	lr

08011e0c <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8011e0c:	b082      	sub	sp, #8
 8011e0e:	b480      	push	{r7}
 8011e10:	b087      	sub	sp, #28
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	60f8      	str	r0, [r7, #12]
 8011e16:	1d38      	adds	r0, r7, #4
 8011e18:	e880 0006 	stmia.w	r0, {r1, r2}
 8011e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8011e1e:	2300      	movs	r3, #0
 8011e20:	613b      	str	r3, [r7, #16]
 8011e22:	2300      	movs	r3, #0
 8011e24:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8011e26:	687a      	ldr	r2, [r7, #4]
 8011e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e2a:	1ad3      	subs	r3, r2, r3
 8011e2c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8011e2e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8011e32:	b29a      	uxth	r2, r3
 8011e34:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	1ad3      	subs	r3, r2, r3
 8011e3c:	b29b      	uxth	r3, r3
 8011e3e:	b21b      	sxth	r3, r3
 8011e40:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8011e42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	da0a      	bge.n	8011e60 <SysTimeSub+0x54>
  {
    c.Seconds--;
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	3b01      	subs	r3, #1
 8011e4e:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8011e50:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8011e5a:	b29b      	uxth	r3, r3
 8011e5c:	b21b      	sxth	r3, r3
 8011e5e:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	461a      	mov	r2, r3
 8011e64:	f107 0310 	add.w	r3, r7, #16
 8011e68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e6c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8011e70:	68f8      	ldr	r0, [r7, #12]
 8011e72:	371c      	adds	r7, #28
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bc80      	pop	{r7}
 8011e78:	b002      	add	sp, #8
 8011e7a:	4770      	bx	lr

08011e7c <SysTimeGetMcuTime>:
  return sysTime;
}


SysTime_t SysTimeGetMcuTime( void )
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b084      	sub	sp, #16
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011e84:	2300      	movs	r3, #0
 8011e86:	60bb      	str	r3, [r7, #8]
 8011e88:	2300      	movs	r3, #0
 8011e8a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8011e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8011eb8 <SysTimeGetMcuTime+0x3c>)
 8011e8e:	691b      	ldr	r3, [r3, #16]
 8011e90:	f107 0208 	add.w	r2, r7, #8
 8011e94:	3204      	adds	r2, #4
 8011e96:	4610      	mov	r0, r2
 8011e98:	4798      	blx	r3
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	461a      	mov	r2, r3
 8011ea2:	f107 0308 	add.w	r3, r7, #8
 8011ea6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011eaa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	3710      	adds	r7, #16
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}
 8011eb6:	bf00      	nop
 8011eb8:	080125a0 	.word	0x080125a0

08011ebc <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b088      	sub	sp, #32
 8011ec0:	af02      	add	r7, sp, #8
 8011ec2:	463b      	mov	r3, r7
 8011ec4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8011f08 <SysTimeToMs+0x4c>)
 8011eca:	68db      	ldr	r3, [r3, #12]
 8011ecc:	4798      	blx	r3
 8011ece:	4603      	mov	r3, r0
 8011ed0:	b21b      	sxth	r3, r3
 8011ed2:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8011f08 <SysTimeToMs+0x4c>)
 8011ed6:	685b      	ldr	r3, [r3, #4]
 8011ed8:	4798      	blx	r3
 8011eda:	4603      	mov	r3, r0
 8011edc:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8011ede:	f107 0008 	add.w	r0, r7, #8
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	9300      	str	r3, [sp, #0]
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	463a      	mov	r2, r7
 8011eea:	ca06      	ldmia	r2, {r1, r2}
 8011eec:	f7ff ff8e 	bl	8011e0c <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8011ef0:	68bb      	ldr	r3, [r7, #8]
 8011ef2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011ef6:	fb02 f303 	mul.w	r3, r2, r3
 8011efa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8011efe:	4413      	add	r3, r2
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3718      	adds	r7, #24
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	080125a0 	.word	0x080125a0

08011f0c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b08a      	sub	sp, #40	@ 0x28
 8011f10:	af02      	add	r7, sp, #8
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	4a19      	ldr	r2, [pc, #100]	@ (8011f80 <SysTimeFromMs+0x74>)
 8011f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8011f1e:	099b      	lsrs	r3, r3, #6
 8011f20:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8011f22:	69fb      	ldr	r3, [r7, #28]
 8011f24:	617b      	str	r3, [r7, #20]
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	b29a      	uxth	r2, r3
 8011f2a:	69fb      	ldr	r3, [r7, #28]
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	4619      	mov	r1, r3
 8011f30:	0149      	lsls	r1, r1, #5
 8011f32:	1ac9      	subs	r1, r1, r3
 8011f34:	0089      	lsls	r1, r1, #2
 8011f36:	440b      	add	r3, r1
 8011f38:	00db      	lsls	r3, r3, #3
 8011f3a:	b29b      	uxth	r3, r3
 8011f3c:	1ad3      	subs	r3, r2, r3
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	b21b      	sxth	r3, r3
 8011f42:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 8011f44:	f107 030c 	add.w	r3, r7, #12
 8011f48:	2200      	movs	r2, #0
 8011f4a:	601a      	str	r2, [r3, #0]
 8011f4c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8011f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8011f84 <SysTimeFromMs+0x78>)
 8011f50:	68db      	ldr	r3, [r3, #12]
 8011f52:	4798      	blx	r3
 8011f54:	4603      	mov	r3, r0
 8011f56:	b21b      	sxth	r3, r3
 8011f58:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8011f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8011f84 <SysTimeFromMs+0x78>)
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	4798      	blx	r3
 8011f60:	4603      	mov	r3, r0
 8011f62:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	9300      	str	r3, [sp, #0]
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	f107 0214 	add.w	r2, r7, #20
 8011f70:	ca06      	ldmia	r2, {r1, r2}
 8011f72:	f7ff ff12 	bl	8011d9a <SysTimeAdd>
}
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	3720      	adds	r7, #32
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}
 8011f7e:	bf00      	nop
 8011f80:	10624dd3 	.word	0x10624dd3
 8011f84:	080125a0 	.word	0x080125a0

08011f88 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b084      	sub	sp, #16
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	60f8      	str	r0, [r7, #12]
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	603b      	str	r3, [r7, #0]
 8011f94:	4613      	mov	r3, r2
 8011f96:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d023      	beq.n	8011fe6 <UTIL_TIMER_Create+0x5e>
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d020      	beq.n	8011fe6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8011faa:	4b11      	ldr	r3, [pc, #68]	@ (8011ff0 <UTIL_TIMER_Create+0x68>)
 8011fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fae:	68b8      	ldr	r0, [r7, #8]
 8011fb0:	4798      	blx	r3
 8011fb2:	4602      	mov	r2, r0
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	2200      	movs	r2, #0
 8011fbc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	683a      	ldr	r2, [r7, #0]
 8011fce:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	69ba      	ldr	r2, [r7, #24]
 8011fd4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	79fa      	ldrb	r2, [r7, #7]
 8011fda:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	e000      	b.n	8011fe8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8011fe6:	2301      	movs	r3, #1
  }
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3710      	adds	r7, #16
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}
 8011ff0:	08012574 	.word	0x08012574

08011ff4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b08a      	sub	sp, #40	@ 0x28
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d056      	beq.n	80120b6 <UTIL_TIMER_Start+0xc2>
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f000 f929 	bl	8012260 <TimerExists>
 801200e:	4603      	mov	r3, r0
 8012010:	f083 0301 	eor.w	r3, r3, #1
 8012014:	b2db      	uxtb	r3, r3
 8012016:	2b00      	cmp	r3, #0
 8012018:	d04d      	beq.n	80120b6 <UTIL_TIMER_Start+0xc2>
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	7a5b      	ldrb	r3, [r3, #9]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d149      	bne.n	80120b6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012022:	f3ef 8310 	mrs	r3, PRIMASK
 8012026:	613b      	str	r3, [r7, #16]
  return(result);
 8012028:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801202a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801202c:	b672      	cpsid	i
}
 801202e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8012036:	4b24      	ldr	r3, [pc, #144]	@ (80120c8 <UTIL_TIMER_Start+0xd4>)
 8012038:	6a1b      	ldr	r3, [r3, #32]
 801203a:	4798      	blx	r3
 801203c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801203e:	6a3a      	ldr	r2, [r7, #32]
 8012040:	69bb      	ldr	r3, [r7, #24]
 8012042:	429a      	cmp	r2, r3
 8012044:	d201      	bcs.n	801204a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8012046:	69bb      	ldr	r3, [r7, #24]
 8012048:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	6a3a      	ldr	r2, [r7, #32]
 801204e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2200      	movs	r2, #0
 8012054:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2201      	movs	r2, #1
 801205a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2200      	movs	r2, #0
 8012060:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8012062:	4b1a      	ldr	r3, [pc, #104]	@ (80120cc <UTIL_TIMER_Start+0xd8>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d106      	bne.n	8012078 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801206a:	4b17      	ldr	r3, [pc, #92]	@ (80120c8 <UTIL_TIMER_Start+0xd4>)
 801206c:	691b      	ldr	r3, [r3, #16]
 801206e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 f96b 	bl	801234c <TimerInsertNewHeadTimer>
 8012076:	e017      	b.n	80120a8 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8012078:	4b13      	ldr	r3, [pc, #76]	@ (80120c8 <UTIL_TIMER_Start+0xd4>)
 801207a:	699b      	ldr	r3, [r3, #24]
 801207c:	4798      	blx	r3
 801207e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681a      	ldr	r2, [r3, #0]
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	441a      	add	r2, r3
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	4b0e      	ldr	r3, [pc, #56]	@ (80120cc <UTIL_TIMER_Start+0xd8>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	429a      	cmp	r2, r3
 8012098:	d203      	bcs.n	80120a2 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f000 f956 	bl	801234c <TimerInsertNewHeadTimer>
 80120a0:	e002      	b.n	80120a8 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f000 f922 	bl	80122ec <TimerInsertTimer>
 80120a8:	69fb      	ldr	r3, [r7, #28]
 80120aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	f383 8810 	msr	PRIMASK, r3
}
 80120b2:	bf00      	nop
  {
 80120b4:	e002      	b.n	80120bc <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 80120b6:	2301      	movs	r3, #1
 80120b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 80120bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3728      	adds	r7, #40	@ 0x28
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}
 80120c8:	08012574 	.word	0x08012574
 80120cc:	2000146c 	.word	0x2000146c

080120d0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b088      	sub	sp, #32
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80120d8:	2300      	movs	r3, #0
 80120da:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d05b      	beq.n	801219a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120e2:	f3ef 8310 	mrs	r3, PRIMASK
 80120e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80120e8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80120ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80120ec:	b672      	cpsid	i
}
 80120ee:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80120f0:	4b2d      	ldr	r3, [pc, #180]	@ (80121a8 <UTIL_TIMER_Stop+0xd8>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80120f6:	4b2c      	ldr	r3, [pc, #176]	@ (80121a8 <UTIL_TIMER_Stop+0xd8>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2201      	movs	r2, #1
 8012100:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8012102:	4b29      	ldr	r3, [pc, #164]	@ (80121a8 <UTIL_TIMER_Stop+0xd8>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d041      	beq.n	801218e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	2200      	movs	r2, #0
 801210e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8012110:	4b25      	ldr	r3, [pc, #148]	@ (80121a8 <UTIL_TIMER_Stop+0xd8>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	687a      	ldr	r2, [r7, #4]
 8012116:	429a      	cmp	r2, r3
 8012118:	d134      	bne.n	8012184 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801211a:	4b23      	ldr	r3, [pc, #140]	@ (80121a8 <UTIL_TIMER_Stop+0xd8>)
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	2200      	movs	r2, #0
 8012120:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8012122:	4b21      	ldr	r3, [pc, #132]	@ (80121a8 <UTIL_TIMER_Stop+0xd8>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	695b      	ldr	r3, [r3, #20]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d00a      	beq.n	8012142 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801212c:	4b1e      	ldr	r3, [pc, #120]	@ (80121a8 <UTIL_TIMER_Stop+0xd8>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	695b      	ldr	r3, [r3, #20]
 8012132:	4a1d      	ldr	r2, [pc, #116]	@ (80121a8 <UTIL_TIMER_Stop+0xd8>)
 8012134:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8012136:	4b1c      	ldr	r3, [pc, #112]	@ (80121a8 <UTIL_TIMER_Stop+0xd8>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	4618      	mov	r0, r3
 801213c:	f000 f8ac 	bl	8012298 <TimerSetTimeout>
 8012140:	e023      	b.n	801218a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 8012142:	4b1a      	ldr	r3, [pc, #104]	@ (80121ac <UTIL_TIMER_Stop+0xdc>)
 8012144:	68db      	ldr	r3, [r3, #12]
 8012146:	4798      	blx	r3
            TimerListHead = NULL;
 8012148:	4b17      	ldr	r3, [pc, #92]	@ (80121a8 <UTIL_TIMER_Stop+0xd8>)
 801214a:	2200      	movs	r2, #0
 801214c:	601a      	str	r2, [r3, #0]
 801214e:	e01c      	b.n	801218a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8012150:	697a      	ldr	r2, [r7, #20]
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	429a      	cmp	r2, r3
 8012156:	d110      	bne.n	801217a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	695b      	ldr	r3, [r3, #20]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d006      	beq.n	801216e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	695b      	ldr	r3, [r3, #20]
 8012164:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8012166:	69bb      	ldr	r3, [r7, #24]
 8012168:	697a      	ldr	r2, [r7, #20]
 801216a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801216c:	e00d      	b.n	801218a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801216e:	2300      	movs	r3, #0
 8012170:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8012172:	69bb      	ldr	r3, [r7, #24]
 8012174:	697a      	ldr	r2, [r7, #20]
 8012176:	615a      	str	r2, [r3, #20]
            break;
 8012178:	e007      	b.n	801218a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801217a:	697b      	ldr	r3, [r7, #20]
 801217c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	695b      	ldr	r3, [r3, #20]
 8012182:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d1e2      	bne.n	8012150 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801218a:	2300      	movs	r3, #0
 801218c:	77fb      	strb	r3, [r7, #31]
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012192:	68bb      	ldr	r3, [r7, #8]
 8012194:	f383 8810 	msr	PRIMASK, r3
}
 8012198:	e001      	b.n	801219e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801219a:	2301      	movs	r3, #1
 801219c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801219e:	7ffb      	ldrb	r3, [r7, #31]
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	3720      	adds	r7, #32
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}
 80121a8:	2000146c 	.word	0x2000146c
 80121ac:	08012574 	.word	0x08012574

080121b0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b084      	sub	sp, #16
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80121ba:	2300      	movs	r3, #0
 80121bc:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d102      	bne.n	80121ca <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 80121c4:	2301      	movs	r3, #1
 80121c6:	73fb      	strb	r3, [r7, #15]
 80121c8:	e014      	b.n	80121f4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80121ca:	4b0d      	ldr	r3, [pc, #52]	@ (8012200 <UTIL_TIMER_SetPeriod+0x50>)
 80121cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121ce:	6838      	ldr	r0, [r7, #0]
 80121d0:	4798      	blx	r3
 80121d2:	4602      	mov	r2, r0
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f000 f841 	bl	8012260 <TimerExists>
 80121de:	4603      	mov	r3, r0
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d007      	beq.n	80121f4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f7ff ff73 	bl	80120d0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f7ff ff02 	bl	8011ff4 <UTIL_TIMER_Start>
 80121f0:	4603      	mov	r3, r0
 80121f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80121f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	3710      	adds	r7, #16
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}
 80121fe:	bf00      	nop
 8012200:	08012574 	.word	0x08012574

08012204 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8012204:	b580      	push	{r7, lr}
 8012206:	b082      	sub	sp, #8
 8012208:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801220a:	4b06      	ldr	r3, [pc, #24]	@ (8012224 <UTIL_TIMER_GetCurrentTime+0x20>)
 801220c:	69db      	ldr	r3, [r3, #28]
 801220e:	4798      	blx	r3
 8012210:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 8012212:	4b04      	ldr	r3, [pc, #16]	@ (8012224 <UTIL_TIMER_GetCurrentTime+0x20>)
 8012214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	4798      	blx	r3
 801221a:	4603      	mov	r3, r0
}
 801221c:	4618      	mov	r0, r3
 801221e:	3708      	adds	r7, #8
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	08012574 	.word	0x08012574

08012228 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b084      	sub	sp, #16
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8012230:	4b0a      	ldr	r3, [pc, #40]	@ (801225c <UTIL_TIMER_GetElapsedTime+0x34>)
 8012232:	69db      	ldr	r3, [r3, #28]
 8012234:	4798      	blx	r3
 8012236:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8012238:	4b08      	ldr	r3, [pc, #32]	@ (801225c <UTIL_TIMER_GetElapsedTime+0x34>)
 801223a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	4798      	blx	r3
 8012240:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8012242:	4b06      	ldr	r3, [pc, #24]	@ (801225c <UTIL_TIMER_GetElapsedTime+0x34>)
 8012244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012246:	68f9      	ldr	r1, [r7, #12]
 8012248:	68ba      	ldr	r2, [r7, #8]
 801224a:	1a8a      	subs	r2, r1, r2
 801224c:	4610      	mov	r0, r2
 801224e:	4798      	blx	r3
 8012250:	4603      	mov	r3, r0
}
 8012252:	4618      	mov	r0, r3
 8012254:	3710      	adds	r7, #16
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}
 801225a:	bf00      	nop
 801225c:	08012574 	.word	0x08012574

08012260 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 8012260:	b480      	push	{r7}
 8012262:	b085      	sub	sp, #20
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8012268:	4b0a      	ldr	r3, [pc, #40]	@ (8012294 <TimerExists+0x34>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801226e:	e008      	b.n	8012282 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 8012270:	68fa      	ldr	r2, [r7, #12]
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	429a      	cmp	r2, r3
 8012276:	d101      	bne.n	801227c <TimerExists+0x1c>
    {
      return true;
 8012278:	2301      	movs	r3, #1
 801227a:	e006      	b.n	801228a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	695b      	ldr	r3, [r3, #20]
 8012280:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d1f3      	bne.n	8012270 <TimerExists+0x10>
  }
  return false;
 8012288:	2300      	movs	r3, #0
}
 801228a:	4618      	mov	r0, r3
 801228c:	3714      	adds	r7, #20
 801228e:	46bd      	mov	sp, r7
 8012290:	bc80      	pop	{r7}
 8012292:	4770      	bx	lr
 8012294:	2000146c 	.word	0x2000146c

08012298 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8012298:	b590      	push	{r4, r7, lr}
 801229a:	b085      	sub	sp, #20
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80122a0:	4b11      	ldr	r3, [pc, #68]	@ (80122e8 <TimerSetTimeout+0x50>)
 80122a2:	6a1b      	ldr	r3, [r3, #32]
 80122a4:	4798      	blx	r3
 80122a6:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2201      	movs	r2, #1
 80122ac:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681c      	ldr	r4, [r3, #0]
 80122b2:	4b0d      	ldr	r3, [pc, #52]	@ (80122e8 <TimerSetTimeout+0x50>)
 80122b4:	699b      	ldr	r3, [r3, #24]
 80122b6:	4798      	blx	r3
 80122b8:	4602      	mov	r2, r0
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	4413      	add	r3, r2
 80122be:	429c      	cmp	r4, r3
 80122c0:	d207      	bcs.n	80122d2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80122c2:	4b09      	ldr	r3, [pc, #36]	@ (80122e8 <TimerSetTimeout+0x50>)
 80122c4:	699b      	ldr	r3, [r3, #24]
 80122c6:	4798      	blx	r3
 80122c8:	4602      	mov	r2, r0
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	441a      	add	r2, r3
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80122d2:	4b05      	ldr	r3, [pc, #20]	@ (80122e8 <TimerSetTimeout+0x50>)
 80122d4:	689b      	ldr	r3, [r3, #8]
 80122d6:	687a      	ldr	r2, [r7, #4]
 80122d8:	6812      	ldr	r2, [r2, #0]
 80122da:	4610      	mov	r0, r2
 80122dc:	4798      	blx	r3
}
 80122de:	bf00      	nop
 80122e0:	3714      	adds	r7, #20
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd90      	pop	{r4, r7, pc}
 80122e6:	bf00      	nop
 80122e8:	08012574 	.word	0x08012574

080122ec <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 80122ec:	b480      	push	{r7}
 80122ee:	b085      	sub	sp, #20
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80122f4:	4b14      	ldr	r3, [pc, #80]	@ (8012348 <TimerInsertTimer+0x5c>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80122fa:	4b13      	ldr	r3, [pc, #76]	@ (8012348 <TimerInsertTimer+0x5c>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	695b      	ldr	r3, [r3, #20]
 8012300:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8012302:	e012      	b.n	801232a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681a      	ldr	r2, [r3, #0]
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	429a      	cmp	r2, r3
 801230e:	d905      	bls.n	801231c <TimerInsertTimer+0x30>
    {
        cur = next;
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8012314:	68bb      	ldr	r3, [r7, #8]
 8012316:	695b      	ldr	r3, [r3, #20]
 8012318:	60bb      	str	r3, [r7, #8]
 801231a:	e006      	b.n	801232a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	687a      	ldr	r2, [r7, #4]
 8012320:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	68ba      	ldr	r2, [r7, #8]
 8012326:	615a      	str	r2, [r3, #20]
        return;
 8012328:	e009      	b.n	801233e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	695b      	ldr	r3, [r3, #20]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d1e8      	bne.n	8012304 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	687a      	ldr	r2, [r7, #4]
 8012336:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2200      	movs	r2, #0
 801233c:	615a      	str	r2, [r3, #20]
}
 801233e:	3714      	adds	r7, #20
 8012340:	46bd      	mov	sp, r7
 8012342:	bc80      	pop	{r7}
 8012344:	4770      	bx	lr
 8012346:	bf00      	nop
 8012348:	2000146c 	.word	0x2000146c

0801234c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b084      	sub	sp, #16
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8012354:	4b0b      	ldr	r3, [pc, #44]	@ (8012384 <TimerInsertNewHeadTimer+0x38>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d002      	beq.n	8012366 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	2200      	movs	r2, #0
 8012364:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	68fa      	ldr	r2, [r7, #12]
 801236a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801236c:	4a05      	ldr	r2, [pc, #20]	@ (8012384 <TimerInsertNewHeadTimer+0x38>)
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8012372:	4b04      	ldr	r3, [pc, #16]	@ (8012384 <TimerInsertNewHeadTimer+0x38>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	4618      	mov	r0, r3
 8012378:	f7ff ff8e 	bl	8012298 <TimerSetTimeout>
}
 801237c:	bf00      	nop
 801237e:	3710      	adds	r7, #16
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}
 8012384:	2000146c 	.word	0x2000146c

08012388 <memset>:
 8012388:	4402      	add	r2, r0
 801238a:	4603      	mov	r3, r0
 801238c:	4293      	cmp	r3, r2
 801238e:	d100      	bne.n	8012392 <memset+0xa>
 8012390:	4770      	bx	lr
 8012392:	f803 1b01 	strb.w	r1, [r3], #1
 8012396:	e7f9      	b.n	801238c <memset+0x4>

08012398 <__libc_init_array>:
 8012398:	b570      	push	{r4, r5, r6, lr}
 801239a:	4d0d      	ldr	r5, [pc, #52]	@ (80123d0 <__libc_init_array+0x38>)
 801239c:	4c0d      	ldr	r4, [pc, #52]	@ (80123d4 <__libc_init_array+0x3c>)
 801239e:	1b64      	subs	r4, r4, r5
 80123a0:	10a4      	asrs	r4, r4, #2
 80123a2:	2600      	movs	r6, #0
 80123a4:	42a6      	cmp	r6, r4
 80123a6:	d109      	bne.n	80123bc <__libc_init_array+0x24>
 80123a8:	4d0b      	ldr	r5, [pc, #44]	@ (80123d8 <__libc_init_array+0x40>)
 80123aa:	4c0c      	ldr	r4, [pc, #48]	@ (80123dc <__libc_init_array+0x44>)
 80123ac:	f000 f898 	bl	80124e0 <_init>
 80123b0:	1b64      	subs	r4, r4, r5
 80123b2:	10a4      	asrs	r4, r4, #2
 80123b4:	2600      	movs	r6, #0
 80123b6:	42a6      	cmp	r6, r4
 80123b8:	d105      	bne.n	80123c6 <__libc_init_array+0x2e>
 80123ba:	bd70      	pop	{r4, r5, r6, pc}
 80123bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80123c0:	4798      	blx	r3
 80123c2:	3601      	adds	r6, #1
 80123c4:	e7ee      	b.n	80123a4 <__libc_init_array+0xc>
 80123c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80123ca:	4798      	blx	r3
 80123cc:	3601      	adds	r6, #1
 80123ce:	e7f2      	b.n	80123b6 <__libc_init_array+0x1e>
 80123d0:	08012bc8 	.word	0x08012bc8
 80123d4:	08012bc8 	.word	0x08012bc8
 80123d8:	08012bc8 	.word	0x08012bc8
 80123dc:	08012bcc 	.word	0x08012bcc

080123e0 <floor>:
 80123e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123e4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80123e8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80123ec:	2e13      	cmp	r6, #19
 80123ee:	4602      	mov	r2, r0
 80123f0:	460b      	mov	r3, r1
 80123f2:	460c      	mov	r4, r1
 80123f4:	4605      	mov	r5, r0
 80123f6:	4680      	mov	r8, r0
 80123f8:	dc35      	bgt.n	8012466 <floor+0x86>
 80123fa:	2e00      	cmp	r6, #0
 80123fc:	da17      	bge.n	801242e <floor+0x4e>
 80123fe:	a334      	add	r3, pc, #208	@ (adr r3, 80124d0 <floor+0xf0>)
 8012400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012404:	f7ed febe 	bl	8000184 <__adddf3>
 8012408:	2200      	movs	r2, #0
 801240a:	2300      	movs	r3, #0
 801240c:	f7ee f8ee 	bl	80005ec <__aeabi_dcmpgt>
 8012410:	b150      	cbz	r0, 8012428 <floor+0x48>
 8012412:	2c00      	cmp	r4, #0
 8012414:	da57      	bge.n	80124c6 <floor+0xe6>
 8012416:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801241a:	432c      	orrs	r4, r5
 801241c:	2500      	movs	r5, #0
 801241e:	42ac      	cmp	r4, r5
 8012420:	4c2d      	ldr	r4, [pc, #180]	@ (80124d8 <floor+0xf8>)
 8012422:	bf08      	it	eq
 8012424:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8012428:	4623      	mov	r3, r4
 801242a:	462a      	mov	r2, r5
 801242c:	e024      	b.n	8012478 <floor+0x98>
 801242e:	4f2b      	ldr	r7, [pc, #172]	@ (80124dc <floor+0xfc>)
 8012430:	4137      	asrs	r7, r6
 8012432:	ea01 0c07 	and.w	ip, r1, r7
 8012436:	ea5c 0c00 	orrs.w	ip, ip, r0
 801243a:	d01d      	beq.n	8012478 <floor+0x98>
 801243c:	a324      	add	r3, pc, #144	@ (adr r3, 80124d0 <floor+0xf0>)
 801243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012442:	f7ed fe9f 	bl	8000184 <__adddf3>
 8012446:	2200      	movs	r2, #0
 8012448:	2300      	movs	r3, #0
 801244a:	f7ee f8cf 	bl	80005ec <__aeabi_dcmpgt>
 801244e:	2800      	cmp	r0, #0
 8012450:	d0ea      	beq.n	8012428 <floor+0x48>
 8012452:	2c00      	cmp	r4, #0
 8012454:	bfbe      	ittt	lt
 8012456:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801245a:	4133      	asrlt	r3, r6
 801245c:	18e4      	addlt	r4, r4, r3
 801245e:	ea24 0407 	bic.w	r4, r4, r7
 8012462:	2500      	movs	r5, #0
 8012464:	e7e0      	b.n	8012428 <floor+0x48>
 8012466:	2e33      	cmp	r6, #51	@ 0x33
 8012468:	dd0a      	ble.n	8012480 <floor+0xa0>
 801246a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801246e:	d103      	bne.n	8012478 <floor+0x98>
 8012470:	f7ed fe88 	bl	8000184 <__adddf3>
 8012474:	4602      	mov	r2, r0
 8012476:	460b      	mov	r3, r1
 8012478:	4610      	mov	r0, r2
 801247a:	4619      	mov	r1, r3
 801247c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012480:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8012484:	f04f 3cff 	mov.w	ip, #4294967295
 8012488:	fa2c f707 	lsr.w	r7, ip, r7
 801248c:	4207      	tst	r7, r0
 801248e:	d0f3      	beq.n	8012478 <floor+0x98>
 8012490:	a30f      	add	r3, pc, #60	@ (adr r3, 80124d0 <floor+0xf0>)
 8012492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012496:	f7ed fe75 	bl	8000184 <__adddf3>
 801249a:	2200      	movs	r2, #0
 801249c:	2300      	movs	r3, #0
 801249e:	f7ee f8a5 	bl	80005ec <__aeabi_dcmpgt>
 80124a2:	2800      	cmp	r0, #0
 80124a4:	d0c0      	beq.n	8012428 <floor+0x48>
 80124a6:	2c00      	cmp	r4, #0
 80124a8:	da0a      	bge.n	80124c0 <floor+0xe0>
 80124aa:	2e14      	cmp	r6, #20
 80124ac:	d101      	bne.n	80124b2 <floor+0xd2>
 80124ae:	3401      	adds	r4, #1
 80124b0:	e006      	b.n	80124c0 <floor+0xe0>
 80124b2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80124b6:	2301      	movs	r3, #1
 80124b8:	40b3      	lsls	r3, r6
 80124ba:	441d      	add	r5, r3
 80124bc:	4545      	cmp	r5, r8
 80124be:	d3f6      	bcc.n	80124ae <floor+0xce>
 80124c0:	ea25 0507 	bic.w	r5, r5, r7
 80124c4:	e7b0      	b.n	8012428 <floor+0x48>
 80124c6:	2500      	movs	r5, #0
 80124c8:	462c      	mov	r4, r5
 80124ca:	e7ad      	b.n	8012428 <floor+0x48>
 80124cc:	f3af 8000 	nop.w
 80124d0:	8800759c 	.word	0x8800759c
 80124d4:	7e37e43c 	.word	0x7e37e43c
 80124d8:	bff00000 	.word	0xbff00000
 80124dc:	000fffff 	.word	0x000fffff

080124e0 <_init>:
 80124e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124e2:	bf00      	nop
 80124e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124e6:	bc08      	pop	{r3}
 80124e8:	469e      	mov	lr, r3
 80124ea:	4770      	bx	lr

080124ec <_fini>:
 80124ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ee:	bf00      	nop
 80124f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124f2:	bc08      	pop	{r3}
 80124f4:	469e      	mov	lr, r3
 80124f6:	4770      	bx	lr
