
stm32_wheatherstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b138  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  0800b278  0800b278  0000c278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8f4  0800b8f4  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8f4  0800b8f4  0000c8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8fc  0800b8fc  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8fc  0800b8fc  0000c8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b900  0800b900  0000c900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b904  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001d4  0800bad8  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  0800bad8  0000d50c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f509  00000000  00000000  0000d1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002644  00000000  00000000  0001c707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  0001ed50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c46  00000000  00000000  0001fd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4c7  00000000  00000000  000209c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb32  00000000  00000000  0003ae8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0148  00000000  00000000  0004a9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eab07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b28  00000000  00000000  000eab4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f0674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b260 	.word	0x0800b260

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	0800b260 	.word	0x0800b260

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	@ 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fmul>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d06f      	beq.n	8000f4c <__aeabi_fmul+0xf8>
 8000e6c:	441a      	add	r2, r3
 8000e6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e7a:	d01e      	beq.n	8000eba <__aeabi_fmul+0x66>
 8000e7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e88:	fba0 3101 	umull	r3, r1, r0, r1
 8000e8c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e90:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e94:	bf3e      	ittt	cc
 8000e96:	0049      	lslcc	r1, r1, #1
 8000e98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ea2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ea6:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea8:	d81d      	bhi.n	8000ee6 <__aeabi_fmul+0x92>
 8000eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb2:	bf08      	it	eq
 8000eb4:	f020 0001 	biceq.w	r0, r0, #1
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ec2:	bf08      	it	eq
 8000ec4:	0249      	lsleq	r1, r1, #9
 8000ec6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ece:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed0:	bfc2      	ittt	gt
 8000ed2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ed6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eda:	4770      	bxgt	lr
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	dc5d      	bgt.n	8000fa4 <__aeabi_fmul+0x150>
 8000ee8:	f112 0f19 	cmn.w	r2, #25
 8000eec:	bfdc      	itt	le
 8000eee:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ef2:	4770      	bxle	lr
 8000ef4:	f1c2 0200 	rsb	r2, r2, #0
 8000ef8:	0041      	lsls	r1, r0, #1
 8000efa:	fa21 f102 	lsr.w	r1, r1, r2
 8000efe:	f1c2 0220 	rsb	r2, r2, #32
 8000f02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f0a:	f140 0000 	adc.w	r0, r0, #0
 8000f0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f12:	bf08      	it	eq
 8000f14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f18:	4770      	bx	lr
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fmul+0xce>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fmul+0xe6>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e78f      	b.n	8000e6c <__aeabi_fmul+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	bf18      	it	ne
 8000f56:	ea93 0f0c 	teqne	r3, ip
 8000f5a:	d00a      	beq.n	8000f72 <__aeabi_fmul+0x11e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	d1d8      	bne.n	8000f1a <__aeabi_fmul+0xc6>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f70:	4770      	bx	lr
 8000f72:	f090 0f00 	teq	r0, #0
 8000f76:	bf17      	itett	ne
 8000f78:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f7c:	4608      	moveq	r0, r1
 8000f7e:	f091 0f00 	teqne	r1, #0
 8000f82:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f86:	d014      	beq.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_fmul+0x13e>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d10f      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f92:	ea93 0f0c 	teq	r3, ip
 8000f96:	d103      	bne.n	8000fa0 <__aeabi_fmul+0x14c>
 8000f98:	024b      	lsls	r3, r1, #9
 8000f9a:	bf18      	it	ne
 8000f9c:	4608      	movne	r0, r1
 8000f9e:	d108      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000fa0:	ea80 0001 	eor.w	r0, r0, r1
 8000fa4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fa8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb0:	4770      	bx	lr
 8000fb2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_fdiv>:
 8000fbc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fc4:	bf1e      	ittt	ne
 8000fc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fca:	ea92 0f0c 	teqne	r2, ip
 8000fce:	ea93 0f0c 	teqne	r3, ip
 8000fd2:	d069      	beq.n	80010a8 <__aeabi_fdiv+0xec>
 8000fd4:	eba2 0203 	sub.w	r2, r2, r3
 8000fd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fe2:	d037      	beq.n	8001054 <__aeabi_fdiv+0x98>
 8000fe4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fe8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf38      	it	cc
 8000ff8:	005b      	lslcc	r3, r3, #1
 8000ffa:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ffe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001002:	428b      	cmp	r3, r1
 8001004:	bf24      	itt	cs
 8001006:	1a5b      	subcs	r3, r3, r1
 8001008:	ea40 000c 	orrcs.w	r0, r0, ip
 800100c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001010:	bf24      	itt	cs
 8001012:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001016:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800101a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800101e:	bf24      	itt	cs
 8001020:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001028:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800102c:	bf24      	itt	cs
 800102e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001032:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	bf18      	it	ne
 800103a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800103e:	d1e0      	bne.n	8001002 <__aeabi_fdiv+0x46>
 8001040:	2afd      	cmp	r2, #253	@ 0xfd
 8001042:	f63f af50 	bhi.w	8000ee6 <__aeabi_fmul+0x92>
 8001046:	428b      	cmp	r3, r1
 8001048:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800104c:	bf08      	it	eq
 800104e:	f020 0001 	biceq.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001058:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800105c:	327f      	adds	r2, #127	@ 0x7f
 800105e:	bfc2      	ittt	gt
 8001060:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001064:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001068:	4770      	bxgt	lr
 800106a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	3a01      	subs	r2, #1
 8001074:	e737      	b.n	8000ee6 <__aeabi_fmul+0x92>
 8001076:	f092 0f00 	teq	r2, #0
 800107a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800107e:	bf02      	ittt	eq
 8001080:	0040      	lsleq	r0, r0, #1
 8001082:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001086:	3a01      	subeq	r2, #1
 8001088:	d0f9      	beq.n	800107e <__aeabi_fdiv+0xc2>
 800108a:	ea40 000c 	orr.w	r0, r0, ip
 800108e:	f093 0f00 	teq	r3, #0
 8001092:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0049      	lsleq	r1, r1, #1
 800109a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800109e:	3b01      	subeq	r3, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fdiv+0xda>
 80010a2:	ea41 010c 	orr.w	r1, r1, ip
 80010a6:	e795      	b.n	8000fd4 <__aeabi_fdiv+0x18>
 80010a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010ac:	ea92 0f0c 	teq	r2, ip
 80010b0:	d108      	bne.n	80010c4 <__aeabi_fdiv+0x108>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	f47f af7d 	bne.w	8000fb2 <__aeabi_fmul+0x15e>
 80010b8:	ea93 0f0c 	teq	r3, ip
 80010bc:	f47f af70 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010c0:	4608      	mov	r0, r1
 80010c2:	e776      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010c4:	ea93 0f0c 	teq	r3, ip
 80010c8:	d104      	bne.n	80010d4 <__aeabi_fdiv+0x118>
 80010ca:	024b      	lsls	r3, r1, #9
 80010cc:	f43f af4c 	beq.w	8000f68 <__aeabi_fmul+0x114>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e76e      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010d4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010d8:	bf18      	it	ne
 80010da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010de:	d1ca      	bne.n	8001076 <__aeabi_fdiv+0xba>
 80010e0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010e4:	f47f af5c 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010e8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ec:	f47f af3c 	bne.w	8000f68 <__aeabi_fmul+0x114>
 80010f0:	e75f      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010f2:	bf00      	nop

080010f4 <__aeabi_uldivmod>:
 80010f4:	b953      	cbnz	r3, 800110c <__aeabi_uldivmod+0x18>
 80010f6:	b94a      	cbnz	r2, 800110c <__aeabi_uldivmod+0x18>
 80010f8:	2900      	cmp	r1, #0
 80010fa:	bf08      	it	eq
 80010fc:	2800      	cmpeq	r0, #0
 80010fe:	bf1c      	itt	ne
 8001100:	f04f 31ff 	movne.w	r1, #4294967295
 8001104:	f04f 30ff 	movne.w	r0, #4294967295
 8001108:	f000 b9a0 	b.w	800144c <__aeabi_idiv0>
 800110c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001110:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001114:	f000 f83c 	bl	8001190 <__udivmoddi4>
 8001118:	f8dd e004 	ldr.w	lr, [sp, #4]
 800111c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001120:	b004      	add	sp, #16
 8001122:	4770      	bx	lr

08001124 <__aeabi_d2lz>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	2200      	movs	r2, #0
 8001128:	2300      	movs	r3, #0
 800112a:	4604      	mov	r4, r0
 800112c:	460d      	mov	r5, r1
 800112e:	f7ff fcad 	bl	8000a8c <__aeabi_dcmplt>
 8001132:	b928      	cbnz	r0, 8001140 <__aeabi_d2lz+0x1c>
 8001134:	4620      	mov	r0, r4
 8001136:	4629      	mov	r1, r5
 8001138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800113c:	f000 b80a 	b.w	8001154 <__aeabi_d2ulz>
 8001140:	4620      	mov	r0, r4
 8001142:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001146:	f000 f805 	bl	8001154 <__aeabi_d2ulz>
 800114a:	4240      	negs	r0, r0
 800114c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001150:	bd38      	pop	{r3, r4, r5, pc}
 8001152:	bf00      	nop

08001154 <__aeabi_d2ulz>:
 8001154:	b5d0      	push	{r4, r6, r7, lr}
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <__aeabi_d2ulz+0x34>)
 8001158:	2200      	movs	r2, #0
 800115a:	4606      	mov	r6, r0
 800115c:	460f      	mov	r7, r1
 800115e:	f7ff fa23 	bl	80005a8 <__aeabi_dmul>
 8001162:	f7ff fcf9 	bl	8000b58 <__aeabi_d2uiz>
 8001166:	4604      	mov	r4, r0
 8001168:	f7ff f9a4 	bl	80004b4 <__aeabi_ui2d>
 800116c:	4b07      	ldr	r3, [pc, #28]	@ (800118c <__aeabi_d2ulz+0x38>)
 800116e:	2200      	movs	r2, #0
 8001170:	f7ff fa1a 	bl	80005a8 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4630      	mov	r0, r6
 800117a:	4639      	mov	r1, r7
 800117c:	f7ff f85c 	bl	8000238 <__aeabi_dsub>
 8001180:	f7ff fcea 	bl	8000b58 <__aeabi_d2uiz>
 8001184:	4621      	mov	r1, r4
 8001186:	bdd0      	pop	{r4, r6, r7, pc}
 8001188:	3df00000 	.word	0x3df00000
 800118c:	41f00000 	.word	0x41f00000

08001190 <__udivmoddi4>:
 8001190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001194:	9d08      	ldr	r5, [sp, #32]
 8001196:	460c      	mov	r4, r1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d14e      	bne.n	800123a <__udivmoddi4+0xaa>
 800119c:	4694      	mov	ip, r2
 800119e:	458c      	cmp	ip, r1
 80011a0:	4686      	mov	lr, r0
 80011a2:	fab2 f282 	clz	r2, r2
 80011a6:	d962      	bls.n	800126e <__udivmoddi4+0xde>
 80011a8:	b14a      	cbz	r2, 80011be <__udivmoddi4+0x2e>
 80011aa:	f1c2 0320 	rsb	r3, r2, #32
 80011ae:	4091      	lsls	r1, r2
 80011b0:	fa20 f303 	lsr.w	r3, r0, r3
 80011b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80011b8:	4319      	orrs	r1, r3
 80011ba:	fa00 fe02 	lsl.w	lr, r0, r2
 80011be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011c2:	fa1f f68c 	uxth.w	r6, ip
 80011c6:	fbb1 f4f7 	udiv	r4, r1, r7
 80011ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ce:	fb07 1114 	mls	r1, r7, r4, r1
 80011d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011d6:	fb04 f106 	mul.w	r1, r4, r6
 80011da:	4299      	cmp	r1, r3
 80011dc:	d90a      	bls.n	80011f4 <__udivmoddi4+0x64>
 80011de:	eb1c 0303 	adds.w	r3, ip, r3
 80011e2:	f104 30ff 	add.w	r0, r4, #4294967295
 80011e6:	f080 8112 	bcs.w	800140e <__udivmoddi4+0x27e>
 80011ea:	4299      	cmp	r1, r3
 80011ec:	f240 810f 	bls.w	800140e <__udivmoddi4+0x27e>
 80011f0:	3c02      	subs	r4, #2
 80011f2:	4463      	add	r3, ip
 80011f4:	1a59      	subs	r1, r3, r1
 80011f6:	fa1f f38e 	uxth.w	r3, lr
 80011fa:	fbb1 f0f7 	udiv	r0, r1, r7
 80011fe:	fb07 1110 	mls	r1, r7, r0, r1
 8001202:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001206:	fb00 f606 	mul.w	r6, r0, r6
 800120a:	429e      	cmp	r6, r3
 800120c:	d90a      	bls.n	8001224 <__udivmoddi4+0x94>
 800120e:	eb1c 0303 	adds.w	r3, ip, r3
 8001212:	f100 31ff 	add.w	r1, r0, #4294967295
 8001216:	f080 80fc 	bcs.w	8001412 <__udivmoddi4+0x282>
 800121a:	429e      	cmp	r6, r3
 800121c:	f240 80f9 	bls.w	8001412 <__udivmoddi4+0x282>
 8001220:	4463      	add	r3, ip
 8001222:	3802      	subs	r0, #2
 8001224:	1b9b      	subs	r3, r3, r6
 8001226:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800122a:	2100      	movs	r1, #0
 800122c:	b11d      	cbz	r5, 8001236 <__udivmoddi4+0xa6>
 800122e:	40d3      	lsrs	r3, r2
 8001230:	2200      	movs	r2, #0
 8001232:	e9c5 3200 	strd	r3, r2, [r5]
 8001236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800123a:	428b      	cmp	r3, r1
 800123c:	d905      	bls.n	800124a <__udivmoddi4+0xba>
 800123e:	b10d      	cbz	r5, 8001244 <__udivmoddi4+0xb4>
 8001240:	e9c5 0100 	strd	r0, r1, [r5]
 8001244:	2100      	movs	r1, #0
 8001246:	4608      	mov	r0, r1
 8001248:	e7f5      	b.n	8001236 <__udivmoddi4+0xa6>
 800124a:	fab3 f183 	clz	r1, r3
 800124e:	2900      	cmp	r1, #0
 8001250:	d146      	bne.n	80012e0 <__udivmoddi4+0x150>
 8001252:	42a3      	cmp	r3, r4
 8001254:	d302      	bcc.n	800125c <__udivmoddi4+0xcc>
 8001256:	4290      	cmp	r0, r2
 8001258:	f0c0 80f0 	bcc.w	800143c <__udivmoddi4+0x2ac>
 800125c:	1a86      	subs	r6, r0, r2
 800125e:	eb64 0303 	sbc.w	r3, r4, r3
 8001262:	2001      	movs	r0, #1
 8001264:	2d00      	cmp	r5, #0
 8001266:	d0e6      	beq.n	8001236 <__udivmoddi4+0xa6>
 8001268:	e9c5 6300 	strd	r6, r3, [r5]
 800126c:	e7e3      	b.n	8001236 <__udivmoddi4+0xa6>
 800126e:	2a00      	cmp	r2, #0
 8001270:	f040 8090 	bne.w	8001394 <__udivmoddi4+0x204>
 8001274:	eba1 040c 	sub.w	r4, r1, ip
 8001278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800127c:	fa1f f78c 	uxth.w	r7, ip
 8001280:	2101      	movs	r1, #1
 8001282:	fbb4 f6f8 	udiv	r6, r4, r8
 8001286:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800128a:	fb08 4416 	mls	r4, r8, r6, r4
 800128e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001292:	fb07 f006 	mul.w	r0, r7, r6
 8001296:	4298      	cmp	r0, r3
 8001298:	d908      	bls.n	80012ac <__udivmoddi4+0x11c>
 800129a:	eb1c 0303 	adds.w	r3, ip, r3
 800129e:	f106 34ff 	add.w	r4, r6, #4294967295
 80012a2:	d202      	bcs.n	80012aa <__udivmoddi4+0x11a>
 80012a4:	4298      	cmp	r0, r3
 80012a6:	f200 80cd 	bhi.w	8001444 <__udivmoddi4+0x2b4>
 80012aa:	4626      	mov	r6, r4
 80012ac:	1a1c      	subs	r4, r3, r0
 80012ae:	fa1f f38e 	uxth.w	r3, lr
 80012b2:	fbb4 f0f8 	udiv	r0, r4, r8
 80012b6:	fb08 4410 	mls	r4, r8, r0, r4
 80012ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012be:	fb00 f707 	mul.w	r7, r0, r7
 80012c2:	429f      	cmp	r7, r3
 80012c4:	d908      	bls.n	80012d8 <__udivmoddi4+0x148>
 80012c6:	eb1c 0303 	adds.w	r3, ip, r3
 80012ca:	f100 34ff 	add.w	r4, r0, #4294967295
 80012ce:	d202      	bcs.n	80012d6 <__udivmoddi4+0x146>
 80012d0:	429f      	cmp	r7, r3
 80012d2:	f200 80b0 	bhi.w	8001436 <__udivmoddi4+0x2a6>
 80012d6:	4620      	mov	r0, r4
 80012d8:	1bdb      	subs	r3, r3, r7
 80012da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012de:	e7a5      	b.n	800122c <__udivmoddi4+0x9c>
 80012e0:	f1c1 0620 	rsb	r6, r1, #32
 80012e4:	408b      	lsls	r3, r1
 80012e6:	fa22 f706 	lsr.w	r7, r2, r6
 80012ea:	431f      	orrs	r7, r3
 80012ec:	fa20 fc06 	lsr.w	ip, r0, r6
 80012f0:	fa04 f301 	lsl.w	r3, r4, r1
 80012f4:	ea43 030c 	orr.w	r3, r3, ip
 80012f8:	40f4      	lsrs	r4, r6
 80012fa:	fa00 f801 	lsl.w	r8, r0, r1
 80012fe:	0c38      	lsrs	r0, r7, #16
 8001300:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001304:	fbb4 fef0 	udiv	lr, r4, r0
 8001308:	fa1f fc87 	uxth.w	ip, r7
 800130c:	fb00 441e 	mls	r4, r0, lr, r4
 8001310:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001314:	fb0e f90c 	mul.w	r9, lr, ip
 8001318:	45a1      	cmp	r9, r4
 800131a:	fa02 f201 	lsl.w	r2, r2, r1
 800131e:	d90a      	bls.n	8001336 <__udivmoddi4+0x1a6>
 8001320:	193c      	adds	r4, r7, r4
 8001322:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001326:	f080 8084 	bcs.w	8001432 <__udivmoddi4+0x2a2>
 800132a:	45a1      	cmp	r9, r4
 800132c:	f240 8081 	bls.w	8001432 <__udivmoddi4+0x2a2>
 8001330:	f1ae 0e02 	sub.w	lr, lr, #2
 8001334:	443c      	add	r4, r7
 8001336:	eba4 0409 	sub.w	r4, r4, r9
 800133a:	fa1f f983 	uxth.w	r9, r3
 800133e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001342:	fb00 4413 	mls	r4, r0, r3, r4
 8001346:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800134a:	fb03 fc0c 	mul.w	ip, r3, ip
 800134e:	45a4      	cmp	ip, r4
 8001350:	d907      	bls.n	8001362 <__udivmoddi4+0x1d2>
 8001352:	193c      	adds	r4, r7, r4
 8001354:	f103 30ff 	add.w	r0, r3, #4294967295
 8001358:	d267      	bcs.n	800142a <__udivmoddi4+0x29a>
 800135a:	45a4      	cmp	ip, r4
 800135c:	d965      	bls.n	800142a <__udivmoddi4+0x29a>
 800135e:	3b02      	subs	r3, #2
 8001360:	443c      	add	r4, r7
 8001362:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001366:	fba0 9302 	umull	r9, r3, r0, r2
 800136a:	eba4 040c 	sub.w	r4, r4, ip
 800136e:	429c      	cmp	r4, r3
 8001370:	46ce      	mov	lr, r9
 8001372:	469c      	mov	ip, r3
 8001374:	d351      	bcc.n	800141a <__udivmoddi4+0x28a>
 8001376:	d04e      	beq.n	8001416 <__udivmoddi4+0x286>
 8001378:	b155      	cbz	r5, 8001390 <__udivmoddi4+0x200>
 800137a:	ebb8 030e 	subs.w	r3, r8, lr
 800137e:	eb64 040c 	sbc.w	r4, r4, ip
 8001382:	fa04 f606 	lsl.w	r6, r4, r6
 8001386:	40cb      	lsrs	r3, r1
 8001388:	431e      	orrs	r6, r3
 800138a:	40cc      	lsrs	r4, r1
 800138c:	e9c5 6400 	strd	r6, r4, [r5]
 8001390:	2100      	movs	r1, #0
 8001392:	e750      	b.n	8001236 <__udivmoddi4+0xa6>
 8001394:	f1c2 0320 	rsb	r3, r2, #32
 8001398:	fa20 f103 	lsr.w	r1, r0, r3
 800139c:	fa0c fc02 	lsl.w	ip, ip, r2
 80013a0:	fa24 f303 	lsr.w	r3, r4, r3
 80013a4:	4094      	lsls	r4, r2
 80013a6:	430c      	orrs	r4, r1
 80013a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013ac:	fa00 fe02 	lsl.w	lr, r0, r2
 80013b0:	fa1f f78c 	uxth.w	r7, ip
 80013b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80013b8:	fb08 3110 	mls	r1, r8, r0, r3
 80013bc:	0c23      	lsrs	r3, r4, #16
 80013be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013c2:	fb00 f107 	mul.w	r1, r0, r7
 80013c6:	4299      	cmp	r1, r3
 80013c8:	d908      	bls.n	80013dc <__udivmoddi4+0x24c>
 80013ca:	eb1c 0303 	adds.w	r3, ip, r3
 80013ce:	f100 36ff 	add.w	r6, r0, #4294967295
 80013d2:	d22c      	bcs.n	800142e <__udivmoddi4+0x29e>
 80013d4:	4299      	cmp	r1, r3
 80013d6:	d92a      	bls.n	800142e <__udivmoddi4+0x29e>
 80013d8:	3802      	subs	r0, #2
 80013da:	4463      	add	r3, ip
 80013dc:	1a5b      	subs	r3, r3, r1
 80013de:	b2a4      	uxth	r4, r4
 80013e0:	fbb3 f1f8 	udiv	r1, r3, r8
 80013e4:	fb08 3311 	mls	r3, r8, r1, r3
 80013e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013ec:	fb01 f307 	mul.w	r3, r1, r7
 80013f0:	42a3      	cmp	r3, r4
 80013f2:	d908      	bls.n	8001406 <__udivmoddi4+0x276>
 80013f4:	eb1c 0404 	adds.w	r4, ip, r4
 80013f8:	f101 36ff 	add.w	r6, r1, #4294967295
 80013fc:	d213      	bcs.n	8001426 <__udivmoddi4+0x296>
 80013fe:	42a3      	cmp	r3, r4
 8001400:	d911      	bls.n	8001426 <__udivmoddi4+0x296>
 8001402:	3902      	subs	r1, #2
 8001404:	4464      	add	r4, ip
 8001406:	1ae4      	subs	r4, r4, r3
 8001408:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800140c:	e739      	b.n	8001282 <__udivmoddi4+0xf2>
 800140e:	4604      	mov	r4, r0
 8001410:	e6f0      	b.n	80011f4 <__udivmoddi4+0x64>
 8001412:	4608      	mov	r0, r1
 8001414:	e706      	b.n	8001224 <__udivmoddi4+0x94>
 8001416:	45c8      	cmp	r8, r9
 8001418:	d2ae      	bcs.n	8001378 <__udivmoddi4+0x1e8>
 800141a:	ebb9 0e02 	subs.w	lr, r9, r2
 800141e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001422:	3801      	subs	r0, #1
 8001424:	e7a8      	b.n	8001378 <__udivmoddi4+0x1e8>
 8001426:	4631      	mov	r1, r6
 8001428:	e7ed      	b.n	8001406 <__udivmoddi4+0x276>
 800142a:	4603      	mov	r3, r0
 800142c:	e799      	b.n	8001362 <__udivmoddi4+0x1d2>
 800142e:	4630      	mov	r0, r6
 8001430:	e7d4      	b.n	80013dc <__udivmoddi4+0x24c>
 8001432:	46d6      	mov	lr, sl
 8001434:	e77f      	b.n	8001336 <__udivmoddi4+0x1a6>
 8001436:	4463      	add	r3, ip
 8001438:	3802      	subs	r0, #2
 800143a:	e74d      	b.n	80012d8 <__udivmoddi4+0x148>
 800143c:	4606      	mov	r6, r0
 800143e:	4623      	mov	r3, r4
 8001440:	4608      	mov	r0, r1
 8001442:	e70f      	b.n	8001264 <__udivmoddi4+0xd4>
 8001444:	3e02      	subs	r6, #2
 8001446:	4463      	add	r3, ip
 8001448:	e730      	b.n	80012ac <__udivmoddi4+0x11c>
 800144a:	bf00      	nop

0800144c <__aeabi_idiv0>:
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop

08001450 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001458:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800145c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d013      	beq.n	8001490 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001468:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800146c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001470:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00b      	beq.n	8001490 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001478:	e000      	b.n	800147c <ITM_SendChar+0x2c>
    {
      __NOP();
 800147a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800147c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f9      	beq.n	800147a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001486:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001490:	687b      	ldr	r3, [r7, #4]
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c0:	68fb      	ldr	r3, [r7, #12]
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	@ 0x28
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d2:	f000 fe0f 	bl	80020f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d6:	f000 f8b9 	bl	800164c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014da:	f000 f9a5 	bl	8001828 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80014de:	f000 f907 	bl	80016f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014e2:	f000 f955 	bl	8001790 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80014e6:	2201      	movs	r2, #1
 80014e8:	4947      	ldr	r1, [pc, #284]	@ (8001608 <main+0x13c>)
 80014ea:	4848      	ldr	r0, [pc, #288]	@ (800160c <main+0x140>)
 80014ec:	f002 fe98 	bl	8004220 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (rx_ready)
 80014f0:	4b47      	ldr	r3, [pc, #284]	@ (8001610 <main+0x144>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 8082 	beq.w	80015fe <main+0x132>
	  {
	      rx_ready = 0;
 80014fa:	4b45      	ldr	r3, [pc, #276]	@ (8001610 <main+0x144>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
	      printf("recive : %s\n", rx_buffer_rain);
 8001500:	4944      	ldr	r1, [pc, #272]	@ (8001614 <main+0x148>)
 8001502:	4845      	ldr	r0, [pc, #276]	@ (8001618 <main+0x14c>)
 8001504:	f005 fdda 	bl	80070bc <iprintf>
	      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001508:	2120      	movs	r1, #32
 800150a:	4844      	ldr	r0, [pc, #272]	@ (800161c <main+0x150>)
 800150c:	f001 f9cb 	bl	80028a6 <HAL_GPIO_TogglePin>
	      float accumulation = 0.0f;
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
	      float eventAcc = 0.0f;
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
	      float iph = 0.0f;
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	607b      	str	r3, [r7, #4]

	      char *accStr = strstr((char*)rx_buffer_rain, "Acc");
 8001522:	493f      	ldr	r1, [pc, #252]	@ (8001620 <main+0x154>)
 8001524:	483b      	ldr	r0, [pc, #236]	@ (8001614 <main+0x148>)
 8001526:	f005 ff65 	bl	80073f4 <strstr>
 800152a:	6278      	str	r0, [r7, #36]	@ 0x24
	      char *eventStr = strstr((char*)rx_buffer_rain, "EventAcc");
 800152c:	493d      	ldr	r1, [pc, #244]	@ (8001624 <main+0x158>)
 800152e:	4839      	ldr	r0, [pc, #228]	@ (8001614 <main+0x148>)
 8001530:	f005 ff60 	bl	80073f4 <strstr>
 8001534:	6238      	str	r0, [r7, #32]
	      char *rintStr = strstr((char*)rx_buffer_rain, "RInt");
 8001536:	493c      	ldr	r1, [pc, #240]	@ (8001628 <main+0x15c>)
 8001538:	4836      	ldr	r0, [pc, #216]	@ (8001614 <main+0x148>)
 800153a:	f005 ff5b 	bl	80073f4 <strstr>
 800153e:	61f8      	str	r0, [r7, #28]

	      if (accStr && sscanf(accStr, "Acc %f", &accumulation) != 1) accumulation = 0.0f;
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00c      	beq.n	8001560 <main+0x94>
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	461a      	mov	r2, r3
 800154c:	4937      	ldr	r1, [pc, #220]	@ (800162c <main+0x160>)
 800154e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001550:	f005 fe44 	bl	80071dc <siscanf>
 8001554:	4603      	mov	r3, r0
 8001556:	2b01      	cmp	r3, #1
 8001558:	d002      	beq.n	8001560 <main+0x94>
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
	      if (eventStr && sscanf(eventStr, "EventAcc %f", &eventAcc) != 1) eventAcc = 0.0f;
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00c      	beq.n	8001580 <main+0xb4>
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	461a      	mov	r2, r3
 800156c:	4930      	ldr	r1, [pc, #192]	@ (8001630 <main+0x164>)
 800156e:	6a38      	ldr	r0, [r7, #32]
 8001570:	f005 fe34 	bl	80071dc <siscanf>
 8001574:	4603      	mov	r3, r0
 8001576:	2b01      	cmp	r3, #1
 8001578:	d002      	beq.n	8001580 <main+0xb4>
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
	      if (rintStr && sscanf(rintStr, "RInt %f", &iph) != 1) iph = 0.0f;
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <main+0xd2>
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	461a      	mov	r2, r3
 800158a:	492a      	ldr	r1, [pc, #168]	@ (8001634 <main+0x168>)
 800158c:	69f8      	ldr	r0, [r7, #28]
 800158e:	f005 fe25 	bl	80071dc <siscanf>
 8001592:	4603      	mov	r3, r0
 8001594:	2b01      	cmp	r3, #1
 8001596:	d002      	beq.n	800159e <main+0xd2>
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	607b      	str	r3, [r7, #4]

	      float accumulationMM = accumulation * 25.4f;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4925      	ldr	r1, [pc, #148]	@ (8001638 <main+0x16c>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fc56 	bl	8000e54 <__aeabi_fmul>
 80015a8:	4603      	mov	r3, r0
 80015aa:	61bb      	str	r3, [r7, #24]
	      float eventAccMM = eventAcc * 25.4f;
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4922      	ldr	r1, [pc, #136]	@ (8001638 <main+0x16c>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fc4f 	bl	8000e54 <__aeabi_fmul>
 80015b6:	4603      	mov	r3, r0
 80015b8:	617b      	str	r3, [r7, #20]
	      float iphMM = iph * 25.4f;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	491e      	ldr	r1, [pc, #120]	@ (8001638 <main+0x16c>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fc48 	bl	8000e54 <__aeabi_fmul>
 80015c4:	4603      	mov	r3, r0
 80015c6:	613b      	str	r3, [r7, #16]

	      printf("accumulationMM: %.2f mm\n", accumulationMM);
 80015c8:	69b8      	ldr	r0, [r7, #24]
 80015ca:	f7fe ff95 	bl	80004f8 <__aeabi_f2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	481a      	ldr	r0, [pc, #104]	@ (800163c <main+0x170>)
 80015d4:	f005 fd72 	bl	80070bc <iprintf>
	      printf("eventAccMM: %.2f mm\n", eventAccMM);
 80015d8:	6978      	ldr	r0, [r7, #20]
 80015da:	f7fe ff8d 	bl	80004f8 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4817      	ldr	r0, [pc, #92]	@ (8001640 <main+0x174>)
 80015e4:	f005 fd6a 	bl	80070bc <iprintf>
	      printf("iphMM: %.2f mm/hr\n", iphMM);
 80015e8:	6938      	ldr	r0, [r7, #16]
 80015ea:	f7fe ff85 	bl	80004f8 <__aeabi_f2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4814      	ldr	r0, [pc, #80]	@ (8001644 <main+0x178>)
 80015f4:	f005 fd62 	bl	80070bc <iprintf>
	      printf("--------------------------------------\n");
 80015f8:	4813      	ldr	r0, [pc, #76]	@ (8001648 <main+0x17c>)
 80015fa:	f005 fdc7 	bl	800718c <puts>
	  }
	  TempHumi();
 80015fe:	f000 fae9 	bl	8001bd4 <TempHumi>
	  Lihgt();
 8001602:	f000 fb2d 	bl	8001c60 <Lihgt>
	  if (rx_ready)
 8001606:	e773      	b.n	80014f0 <main+0x24>
 8001608:	200001f0 	.word	0x200001f0
 800160c:	20000324 	.word	0x20000324
 8001610:	20000275 	.word	0x20000275
 8001614:	200001f4 	.word	0x200001f4
 8001618:	0800b278 	.word	0x0800b278
 800161c:	48000400 	.word	0x48000400
 8001620:	0800b288 	.word	0x0800b288
 8001624:	0800b28c 	.word	0x0800b28c
 8001628:	0800b298 	.word	0x0800b298
 800162c:	0800b2a0 	.word	0x0800b2a0
 8001630:	0800b2a8 	.word	0x0800b2a8
 8001634:	0800b2b4 	.word	0x0800b2b4
 8001638:	41cb3333 	.word	0x41cb3333
 800163c:	0800b2bc 	.word	0x0800b2bc
 8001640:	0800b2d8 	.word	0x0800b2d8
 8001644:	0800b2f0 	.word	0x0800b2f0
 8001648:	0800b304 	.word	0x0800b304

0800164c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b09a      	sub	sp, #104	@ 0x68
 8001650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001652:	f107 0320 	add.w	r3, r7, #32
 8001656:	2248      	movs	r2, #72	@ 0x48
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f005 fec2 	bl	80073e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
 8001670:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001672:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <SystemClock_Config+0xa0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800167a:	4a1c      	ldr	r2, [pc, #112]	@ (80016ec <SystemClock_Config+0xa0>)
 800167c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <SystemClock_Config+0xa0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800168e:	2302      	movs	r3, #2
 8001690:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001692:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001696:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001698:	2340      	movs	r3, #64	@ 0x40
 800169a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800169c:	2300      	movs	r3, #0
 800169e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a0:	f107 0320 	add.w	r3, r7, #32
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 fbc1 	bl	8002e2c <HAL_RCC_OscConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80016b0:	f000 fb1c 	bl	8001cec <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80016b4:	234f      	movs	r3, #79	@ 0x4f
 80016b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016b8:	2301      	movs	r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 ff2c 	bl	8003530 <HAL_RCC_ClockConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016de:	f000 fb05 	bl	8001cec <Error_Handler>
  }
}
 80016e2:	bf00      	nop
 80016e4:	3768      	adds	r7, #104	@ 0x68
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	58000400 	.word	0x58000400

080016f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f4:	4b24      	ldr	r3, [pc, #144]	@ (8001788 <MX_USART1_UART_Init+0x98>)
 80016f6:	4a25      	ldr	r2, [pc, #148]	@ (800178c <MX_USART1_UART_Init+0x9c>)
 80016f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016fa:	4b23      	ldr	r3, [pc, #140]	@ (8001788 <MX_USART1_UART_Init+0x98>)
 80016fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001700:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b21      	ldr	r3, [pc, #132]	@ (8001788 <MX_USART1_UART_Init+0x98>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b1f      	ldr	r3, [pc, #124]	@ (8001788 <MX_USART1_UART_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <MX_USART1_UART_Init+0x98>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b1c      	ldr	r3, [pc, #112]	@ (8001788 <MX_USART1_UART_Init+0x98>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <MX_USART1_UART_Init+0x98>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <MX_USART1_UART_Init+0x98>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001726:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <MX_USART1_UART_Init+0x98>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800172c:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <MX_USART1_UART_Init+0x98>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <MX_USART1_UART_Init+0x98>)
 8001734:	2200      	movs	r2, #0
 8001736:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001738:	2300      	movs	r3, #0
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	4812      	ldr	r0, [pc, #72]	@ (8001788 <MX_USART1_UART_Init+0x98>)
 8001740:	f004 fc10 	bl	8005f64 <HAL_RS485Ex_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 800174a:	f000 facf 	bl	8001cec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174e:	2100      	movs	r1, #0
 8001750:	480d      	ldr	r0, [pc, #52]	@ (8001788 <MX_USART1_UART_Init+0x98>)
 8001752:	f004 fcc3 	bl	80060dc <HAL_UARTEx_SetTxFifoThreshold>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 800175c:	f000 fac6 	bl	8001cec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001760:	2100      	movs	r1, #0
 8001762:	4809      	ldr	r0, [pc, #36]	@ (8001788 <MX_USART1_UART_Init+0x98>)
 8001764:	f004 fcf8 	bl	8006158 <HAL_UARTEx_SetRxFifoThreshold>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 800176e:	f000 fabd 	bl	8001cec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001772:	4805      	ldr	r0, [pc, #20]	@ (8001788 <MX_USART1_UART_Init+0x98>)
 8001774:	f004 fc7a 	bl	800606c <HAL_UARTEx_DisableFifoMode>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 800177e:	f000 fab5 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000290 	.word	0x20000290
 800178c:	40013800 	.word	0x40013800

08001790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001794:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <MX_USART2_UART_Init+0x90>)
 8001796:	4a23      	ldr	r2, [pc, #140]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 8001798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800179a:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <MX_USART2_UART_Init+0x90>)
 800179c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <MX_USART2_UART_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <MX_USART2_UART_Init+0x90>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <MX_USART2_UART_Init+0x90>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <MX_USART2_UART_Init+0x90>)
 80017b6:	220c      	movs	r2, #12
 80017b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ba:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <MX_USART2_UART_Init+0x90>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c0:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <MX_USART2_UART_Init+0x90>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c6:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <MX_USART2_UART_Init+0x90>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017cc:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <MX_USART2_UART_Init+0x90>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d2:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <MX_USART2_UART_Init+0x90>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017d8:	4811      	ldr	r0, [pc, #68]	@ (8001820 <MX_USART2_UART_Init+0x90>)
 80017da:	f002 fb86 	bl	8003eea <HAL_UART_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80017e4:	f000 fa82 	bl	8001cec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e8:	2100      	movs	r1, #0
 80017ea:	480d      	ldr	r0, [pc, #52]	@ (8001820 <MX_USART2_UART_Init+0x90>)
 80017ec:	f004 fc76 	bl	80060dc <HAL_UARTEx_SetTxFifoThreshold>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80017f6:	f000 fa79 	bl	8001cec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017fa:	2100      	movs	r1, #0
 80017fc:	4808      	ldr	r0, [pc, #32]	@ (8001820 <MX_USART2_UART_Init+0x90>)
 80017fe:	f004 fcab 	bl	8006158 <HAL_UARTEx_SetRxFifoThreshold>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001808:	f000 fa70 	bl	8001cec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800180c:	4804      	ldr	r0, [pc, #16]	@ (8001820 <MX_USART2_UART_Init+0x90>)
 800180e:	f004 fc2d 	bl	800606c <HAL_UARTEx_DisableFifoMode>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001818:	f000 fa68 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000324 	.word	0x20000324
 8001824:	40004400 	.word	0x40004400

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	2001      	movs	r0, #1
 800183e:	f7ff fe2d 	bl	800149c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	2002      	movs	r0, #2
 8001844:	f7ff fe2a 	bl	800149c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_SET);
 8001848:	2201      	movs	r2, #1
 800184a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800184e:	4815      	ldr	r0, [pc, #84]	@ (80018a4 <MX_GPIO_Init+0x7c>)
 8001850:	f001 f812 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001854:	2201      	movs	r2, #1
 8001856:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800185a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800185e:	f001 f80b 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB5 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8001862:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001866:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	4619      	mov	r1, r3
 8001878:	480a      	ldr	r0, [pc, #40]	@ (80018a4 <MX_GPIO_Init+0x7c>)
 800187a:	f000 fe9d 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800187e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001882:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001898:	f000 fe8e 	bl	80025b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800189c:	bf00      	nop
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	48000400 	.word	0x48000400

080018a8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e009      	b.n	80018ce <_write+0x26>
        ITM_SendChar((*ptr++));
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	60ba      	str	r2, [r7, #8]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fdc4 	bl	8001450 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dbf1      	blt.n	80018ba <_write+0x12>
    }
    return len;
 80018d6:	687b      	ldr	r3, [r7, #4]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <Modbus_CRC16>:

uint16_t Modbus_CRC16(uint8_t *buf, uint8_t len) {
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
    uint16_t crc = 0xFFFF;
 80018ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018f0:	81fb      	strh	r3, [r7, #14]

    for (uint8_t pos = 0; pos < len; pos++) {
 80018f2:	2300      	movs	r3, #0
 80018f4:	737b      	strb	r3, [r7, #13]
 80018f6:	e026      	b.n	8001946 <Modbus_CRC16+0x66>
        crc ^= (uint16_t)buf[pos];
 80018f8:	7b7b      	ldrb	r3, [r7, #13]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	89fb      	ldrh	r3, [r7, #14]
 8001904:	4053      	eors	r3, r2
 8001906:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	e015      	b.n	800193a <Modbus_CRC16+0x5a>
            if (crc & 0x0001) {
 800190e:	89fb      	ldrh	r3, [r7, #14]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00a      	beq.n	800192e <Modbus_CRC16+0x4e>
                crc >>= 1;
 8001918:	89fb      	ldrh	r3, [r7, #14]
 800191a:	085b      	lsrs	r3, r3, #1
 800191c:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;
 800191e:	89fb      	ldrh	r3, [r7, #14]
 8001920:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8001924:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8001928:	43db      	mvns	r3, r3
 800192a:	81fb      	strh	r3, [r7, #14]
 800192c:	e002      	b.n	8001934 <Modbus_CRC16+0x54>
            } else {
                crc >>= 1;
 800192e:	89fb      	ldrh	r3, [r7, #14]
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	3301      	adds	r3, #1
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2b07      	cmp	r3, #7
 800193e:	dde6      	ble.n	800190e <Modbus_CRC16+0x2e>
    for (uint8_t pos = 0; pos < len; pos++) {
 8001940:	7b7b      	ldrb	r3, [r7, #13]
 8001942:	3301      	adds	r3, #1
 8001944:	737b      	strb	r3, [r7, #13]
 8001946:	7b7a      	ldrb	r2, [r7, #13]
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	429a      	cmp	r2, r3
 800194c:	d3d4      	bcc.n	80018f8 <Modbus_CRC16+0x18>
            }
        }
    }

    return crc;
 800194e:	89fb      	ldrh	r3, [r7, #14]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <Build_Modbus_Request>:

void Build_Modbus_Request(uint8_t slave_addr, uint16_t start_reg, uint16_t quantity, uint8_t *frame_out) {
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4603      	mov	r3, r0
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	460b      	mov	r3, r1
 8001968:	81bb      	strh	r3, [r7, #12]
 800196a:	4613      	mov	r3, r2
 800196c:	817b      	strh	r3, [r7, #10]
    frame_out[0] = slave_addr;                // AA
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	701a      	strb	r2, [r3, #0]
    frame_out[1] = 0x03;                      // Function Code
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3301      	adds	r3, #1
 8001978:	2203      	movs	r2, #3
 800197a:	701a      	strb	r2, [r3, #0]

    frame_out[2] = (start_reg >> 8) & 0xFF;   // RRRR (high byte)
 800197c:	89bb      	ldrh	r3, [r7, #12]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	b29a      	uxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3302      	adds	r3, #2
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]
    frame_out[3] = start_reg & 0xFF;          // RRRR (low byte)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3303      	adds	r3, #3
 800198e:	89ba      	ldrh	r2, [r7, #12]
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	701a      	strb	r2, [r3, #0]

    frame_out[4] = (quantity >> 8) & 0xFF;    // NNNN (high byte)
 8001994:	897b      	ldrh	r3, [r7, #10]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	b29a      	uxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3304      	adds	r3, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	701a      	strb	r2, [r3, #0]
    frame_out[5] = quantity & 0xFF;           // NNNN (low byte)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3305      	adds	r3, #5
 80019a6:	897a      	ldrh	r2, [r7, #10]
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	701a      	strb	r2, [r3, #0]

    uint16_t crc = Modbus_CRC16(frame_out, 6);  // คำนวณ CRC จาก 6 byte แรก
 80019ac:	2106      	movs	r1, #6
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ff96 	bl	80018e0 <Modbus_CRC16>
 80019b4:	4603      	mov	r3, r0
 80019b6:	82fb      	strh	r3, [r7, #22]

    frame_out[6] = crc & 0xFF;               // CRC Low byte
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3306      	adds	r3, #6
 80019bc:	8afa      	ldrh	r2, [r7, #22]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]
    frame_out[7] = (crc >> 8) & 0xFF;        // CRC High byte
 80019c2:	8afb      	ldrh	r3, [r7, #22]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3307      	adds	r3, #7
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	701a      	strb	r2, [r3, #0]
}
 80019d0:	bf00      	nop
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a17      	ldr	r2, [pc, #92]	@ (8001a44 <HAL_UART_RxCpltCallback+0x6c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d127      	bne.n	8001a3a <HAL_UART_RxCpltCallback+0x62>
    {
        if (rx_index < RX_BUF_SIZE - 1)
 80019ea:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <HAL_UART_RxCpltCallback+0x70>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b7e      	cmp	r3, #126	@ 0x7e
 80019f0:	d81b      	bhi.n	8001a2a <HAL_UART_RxCpltCallback+0x52>
        {
        	rx_buffer_rain[rx_index++] = rx_data;
 80019f2:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <HAL_UART_RxCpltCallback+0x70>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	b2d1      	uxtb	r1, r2
 80019fa:	4a13      	ldr	r2, [pc, #76]	@ (8001a48 <HAL_UART_RxCpltCallback+0x70>)
 80019fc:	7011      	strb	r1, [r2, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <HAL_UART_RxCpltCallback+0x74>)
 8001a02:	7819      	ldrb	r1, [r3, #0]
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_UART_RxCpltCallback+0x78>)
 8001a06:	5499      	strb	r1, [r3, r2]

            if (rx_data == '\n')  // จบข้อความ
 8001a08:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <HAL_UART_RxCpltCallback+0x74>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b0a      	cmp	r3, #10
 8001a0e:	d10f      	bne.n	8001a30 <HAL_UART_RxCpltCallback+0x58>
            {
            	rx_buffer_rain[rx_index] = '\0'; // ปิดท้าย string
 8001a10:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <HAL_UART_RxCpltCallback+0x70>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_UART_RxCpltCallback+0x78>)
 8001a18:	2100      	movs	r1, #0
 8001a1a:	5499      	strb	r1, [r3, r2]
                rx_ready = 1;
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a54 <HAL_UART_RxCpltCallback+0x7c>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
                rx_index = 0;
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <HAL_UART_RxCpltCallback+0x70>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	e002      	b.n	8001a30 <HAL_UART_RxCpltCallback+0x58>
            }
        }
        else
        {
            rx_index = 0; // ถ้าเกินขนาด buffer
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <HAL_UART_RxCpltCallback+0x70>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart2, &rx_data, 1); // รอ byte ถัดไป
 8001a30:	2201      	movs	r2, #1
 8001a32:	4906      	ldr	r1, [pc, #24]	@ (8001a4c <HAL_UART_RxCpltCallback+0x74>)
 8001a34:	4808      	ldr	r0, [pc, #32]	@ (8001a58 <HAL_UART_RxCpltCallback+0x80>)
 8001a36:	f002 fbf3 	bl	8004220 <HAL_UART_Receive_IT>
    }
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40004400 	.word	0x40004400
 8001a48:	20000274 	.word	0x20000274
 8001a4c:	200001f0 	.word	0x200001f0
 8001a50:	200001f4 	.word	0x200001f4
 8001a54:	20000275 	.word	0x20000275
 8001a58:	20000324 	.word	0x20000324

08001a5c <Decode_TempHumi>:

void Decode_TempHumi(uint8_t *rx_buf) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    int16_t temp_raw = (rx_buf[3] << 8) | rx_buf[4];
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3303      	adds	r3, #3
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3304      	adds	r3, #4
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	4313      	orrs	r3, r2
 8001a78:	83fb      	strh	r3, [r7, #30]
    uint16_t humi_raw = (rx_buf[5] << 8) | rx_buf[6];
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3305      	adds	r3, #5
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	b21a      	sxth	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3306      	adds	r3, #6
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	83bb      	strh	r3, [r7, #28]
    int16_t dew_raw = (rx_buf[7] << 8) | rx_buf[8];
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3307      	adds	r3, #7
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	837b      	strh	r3, [r7, #26]
    uint16_t press_raw = (rx_buf[9] << 8) | rx_buf[10];
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3309      	adds	r3, #9
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	330a      	adds	r3, #10
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	833b      	strh	r3, [r7, #24]

    float temp_c = temp_raw / 100.0f;  // °C
 8001ac0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff f971 	bl	8000dac <__aeabi_i2f>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4925      	ldr	r1, [pc, #148]	@ (8001b64 <Decode_TempHumi+0x108>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fa74 	bl	8000fbc <__aeabi_fdiv>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	617b      	str	r3, [r7, #20]
    float humidity = humi_raw / 100.0f;  // %
 8001ad8:	8bbb      	ldrh	r3, [r7, #28]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f966 	bl	8000dac <__aeabi_i2f>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4920      	ldr	r1, [pc, #128]	@ (8001b64 <Decode_TempHumi+0x108>)
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fa69 	bl	8000fbc <__aeabi_fdiv>
 8001aea:	4603      	mov	r3, r0
 8001aec:	613b      	str	r3, [r7, #16]
    float dewpoint_c = dew_raw / 100.0f;  // °C
 8001aee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f95a 	bl	8000dac <__aeabi_i2f>
 8001af8:	4603      	mov	r3, r0
 8001afa:	491a      	ldr	r1, [pc, #104]	@ (8001b64 <Decode_TempHumi+0x108>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fa5d 	bl	8000fbc <__aeabi_fdiv>
 8001b02:	4603      	mov	r3, r0
 8001b04:	60fb      	str	r3, [r7, #12]
    float pressure_hpa = press_raw / 10.0f;  // hPa
 8001b06:	8b3b      	ldrh	r3, [r7, #24]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f94f 	bl	8000dac <__aeabi_i2f>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4915      	ldr	r1, [pc, #84]	@ (8001b68 <Decode_TempHumi+0x10c>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fa52 	bl	8000fbc <__aeabi_fdiv>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60bb      	str	r3, [r7, #8]

    printf("Temperature: %.2f C\r\n", temp_c);
 8001b1c:	6978      	ldr	r0, [r7, #20]
 8001b1e:	f7fe fceb 	bl	80004f8 <__aeabi_f2d>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4811      	ldr	r0, [pc, #68]	@ (8001b6c <Decode_TempHumi+0x110>)
 8001b28:	f005 fac8 	bl	80070bc <iprintf>
    printf("Humidity: %.2f %%\r\n", humidity);
 8001b2c:	6938      	ldr	r0, [r7, #16]
 8001b2e:	f7fe fce3 	bl	80004f8 <__aeabi_f2d>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	480e      	ldr	r0, [pc, #56]	@ (8001b70 <Decode_TempHumi+0x114>)
 8001b38:	f005 fac0 	bl	80070bc <iprintf>
    printf("Dew Point: %.2f C\r\n", dewpoint_c);
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f7fe fcdb 	bl	80004f8 <__aeabi_f2d>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	480b      	ldr	r0, [pc, #44]	@ (8001b74 <Decode_TempHumi+0x118>)
 8001b48:	f005 fab8 	bl	80070bc <iprintf>
    printf("Pressure: %.1f hPa\r\n", pressure_hpa);
 8001b4c:	68b8      	ldr	r0, [r7, #8]
 8001b4e:	f7fe fcd3 	bl	80004f8 <__aeabi_f2d>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4808      	ldr	r0, [pc, #32]	@ (8001b78 <Decode_TempHumi+0x11c>)
 8001b58:	f005 fab0 	bl	80070bc <iprintf>
}
 8001b5c:	bf00      	nop
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	42c80000 	.word	0x42c80000
 8001b68:	41200000 	.word	0x41200000
 8001b6c:	0800b32c 	.word	0x0800b32c
 8001b70:	0800b344 	.word	0x0800b344
 8001b74:	0800b358 	.word	0x0800b358
 8001b78:	0800b36c 	.word	0x0800b36c

08001b7c <Decode_Light>:

void Decode_Light(uint8_t *rx_buf) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    // อ่านค่า High และ Low 16 bits ของ Illuminance
    uint16_t lux_high = (rx_buf[3] << 8) | rx_buf[4];  // High 16 bits
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3303      	adds	r3, #3
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3304      	adds	r3, #4
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	81fb      	strh	r3, [r7, #14]
    uint16_t lux_low  = (rx_buf[5] << 8) | rx_buf[6];  // Low 16 bits
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3305      	adds	r3, #5
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3306      	adds	r3, #6
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b21b      	sxth	r3, r3
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	81bb      	strh	r3, [r7, #12]

    // รวม High และ Low 16 bits เป็น 32-bit Illuminance
    uint32_t lux = ((uint32_t)lux_high << 16) | lux_low;
 8001bb4:	89fb      	ldrh	r3, [r7, #14]
 8001bb6:	041a      	lsls	r2, r3, #16
 8001bb8:	89bb      	ldrh	r3, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60bb      	str	r3, [r7, #8]

    // แสดงผล
    printf("Illuminance: %lu lux\r\n", lux);
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	4803      	ldr	r0, [pc, #12]	@ (8001bd0 <Decode_Light+0x54>)
 8001bc2:	f005 fa7b 	bl	80070bc <iprintf>
}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	0800b384 	.word	0x0800b384

08001bd4 <TempHumi>:

void TempHumi() {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
	Build_Modbus_Request(0x01, 0x0000, 0x0004, modbus_frame);
 8001bda:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <TempHumi+0x74>)
 8001bdc:	2204      	movs	r2, #4
 8001bde:	2100      	movs	r1, #0
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7ff feba 	bl	800195a <Build_Modbus_Request>
	HAL_UART_Transmit(&huart1, modbus_frame, 8, 1000);
 8001be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bea:	2208      	movs	r2, #8
 8001bec:	4916      	ldr	r1, [pc, #88]	@ (8001c48 <TempHumi+0x74>)
 8001bee:	4817      	ldr	r0, [pc, #92]	@ (8001c4c <TempHumi+0x78>)
 8001bf0:	f002 f9cb 	bl	8003f8a <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rx_buffer, 16, 1000);
 8001bf4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	4915      	ldr	r1, [pc, #84]	@ (8001c50 <TempHumi+0x7c>)
 8001bfc:	4813      	ldr	r0, [pc, #76]	@ (8001c4c <TempHumi+0x78>)
 8001bfe:	f002 fa4a 	bl	8004096 <HAL_UART_Receive>

	printf("TEMPHUMI: ");
 8001c02:	4814      	ldr	r0, [pc, #80]	@ (8001c54 <TempHumi+0x80>)
 8001c04:	f005 fa5a 	bl	80070bc <iprintf>
	for (int i = 0; i < 16; i++) {
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	e00a      	b.n	8001c24 <TempHumi+0x50>
	    printf("%d ", rx_buffer[i]);
 8001c0e:	4a10      	ldr	r2, [pc, #64]	@ (8001c50 <TempHumi+0x7c>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	4619      	mov	r1, r3
 8001c18:	480f      	ldr	r0, [pc, #60]	@ (8001c58 <TempHumi+0x84>)
 8001c1a:	f005 fa4f 	bl	80070bc <iprintf>
	for (int i = 0; i < 16; i++) {
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3301      	adds	r3, #1
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	ddf1      	ble.n	8001c0e <TempHumi+0x3a>
	}
    printf("\r\n");
 8001c2a:	480c      	ldr	r0, [pc, #48]	@ (8001c5c <TempHumi+0x88>)
 8001c2c:	f005 faae 	bl	800718c <puts>

    Decode_TempHumi(rx_buffer);
 8001c30:	4807      	ldr	r0, [pc, #28]	@ (8001c50 <TempHumi+0x7c>)
 8001c32:	f7ff ff13 	bl	8001a5c <Decode_TempHumi>

	HAL_Delay(1000);
 8001c36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c3a:	f000 fad1 	bl	80021e0 <HAL_Delay>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000288 	.word	0x20000288
 8001c4c:	20000290 	.word	0x20000290
 8001c50:	20000278 	.word	0x20000278
 8001c54:	0800b39c 	.word	0x0800b39c
 8001c58:	0800b3a8 	.word	0x0800b3a8
 8001c5c:	0800b3ac 	.word	0x0800b3ac

08001c60 <Lihgt>:

void Lihgt() {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
	Build_Modbus_Request(0x02, 0x0000, 0x0002, modbus_frame);
 8001c66:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <Lihgt+0x74>)
 8001c68:	2202      	movs	r2, #2
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	f7ff fe74 	bl	800195a <Build_Modbus_Request>
	HAL_UART_Transmit(&huart1, modbus_frame, 8, 1000);
 8001c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c76:	2208      	movs	r2, #8
 8001c78:	4916      	ldr	r1, [pc, #88]	@ (8001cd4 <Lihgt+0x74>)
 8001c7a:	4817      	ldr	r0, [pc, #92]	@ (8001cd8 <Lihgt+0x78>)
 8001c7c:	f002 f985 	bl	8003f8a <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rx_buffer, 16, 1000);
 8001c80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c84:	2210      	movs	r2, #16
 8001c86:	4915      	ldr	r1, [pc, #84]	@ (8001cdc <Lihgt+0x7c>)
 8001c88:	4813      	ldr	r0, [pc, #76]	@ (8001cd8 <Lihgt+0x78>)
 8001c8a:	f002 fa04 	bl	8004096 <HAL_UART_Receive>

	printf("LiGHT: ");
 8001c8e:	4814      	ldr	r0, [pc, #80]	@ (8001ce0 <Lihgt+0x80>)
 8001c90:	f005 fa14 	bl	80070bc <iprintf>
	for (int i = 0; i < 16; i++) {
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	e00a      	b.n	8001cb0 <Lihgt+0x50>
	    printf("%d ", rx_buffer[i]);
 8001c9a:	4a10      	ldr	r2, [pc, #64]	@ (8001cdc <Lihgt+0x7c>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480f      	ldr	r0, [pc, #60]	@ (8001ce4 <Lihgt+0x84>)
 8001ca6:	f005 fa09 	bl	80070bc <iprintf>
	for (int i = 0; i < 16; i++) {
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3301      	adds	r3, #1
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b0f      	cmp	r3, #15
 8001cb4:	ddf1      	ble.n	8001c9a <Lihgt+0x3a>
	}
    printf("\r\n");
 8001cb6:	480c      	ldr	r0, [pc, #48]	@ (8001ce8 <Lihgt+0x88>)
 8001cb8:	f005 fa68 	bl	800718c <puts>

    Decode_Light(rx_buffer);
 8001cbc:	4807      	ldr	r0, [pc, #28]	@ (8001cdc <Lihgt+0x7c>)
 8001cbe:	f7ff ff5d 	bl	8001b7c <Decode_Light>

	HAL_Delay(1000);
 8001cc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cc6:	f000 fa8b 	bl	80021e0 <HAL_Delay>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000288 	.word	0x20000288
 8001cd8:	20000290 	.word	0x20000290
 8001cdc:	20000278 	.word	0x20000278
 8001ce0:	0800b3b0 	.word	0x0800b3b0
 8001ce4:	0800b3a8 	.word	0x0800b3a8
 8001ce8:	0800b3ac 	.word	0x0800b3ac

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <Error_Handler+0x8>

08001cf8 <LL_AHB2_GRP1_EnableClock>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b096      	sub	sp, #88	@ 0x58
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	2238      	movs	r2, #56	@ 0x38
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f005 fb15 	bl	80073e4 <memset>
  if(huart->Instance==USART1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a3f      	ldr	r2, [pc, #252]	@ (8001ebc <HAL_UART_MspInit+0x128>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d143      	bne.n	8001e4c <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dc8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001dcc:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f001 ff4e 	bl	8003c74 <HAL_RCCEx_PeriphCLKConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001dde:	f7ff ff85 	bl	8001cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001de6:	f7ff ffb7 	bl	8001d58 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7ff ff84 	bl	8001cf8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df0:	2002      	movs	r0, #2
 8001df2:	f7ff ff81 	bl	8001cf8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA12     ------> USART1_DE
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001df6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dfa:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e08:	2307      	movs	r3, #7
 8001e0a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001e10:	4619      	mov	r1, r3
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e16:	f000 fbcf 	bl	80025b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001e1a:	23c0      	movs	r3, #192	@ 0xc0
 8001e1c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001e32:	4619      	mov	r1, r3
 8001e34:	4822      	ldr	r0, [pc, #136]	@ (8001ec0 <HAL_UART_MspInit+0x12c>)
 8001e36:	f000 fbbf 	bl	80025b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2024      	movs	r0, #36	@ 0x24
 8001e40:	f000 fac9 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e44:	2024      	movs	r0, #36	@ 0x24
 8001e46:	f000 fae0 	bl	800240a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e4a:	e033      	b.n	8001eb4 <HAL_UART_MspInit+0x120>
  else if(huart->Instance==USART2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec4 <HAL_UART_MspInit+0x130>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d12e      	bne.n	8001eb4 <HAL_UART_MspInit+0x120>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e56:	2302      	movs	r3, #2
 8001e58:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e5a:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8001e5e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	4618      	mov	r0, r3
 8001e66:	f001 ff05 	bl	8003c74 <HAL_RCCEx_PeriphCLKConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001e70:	f7ff ff3c 	bl	8001cec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e74:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001e78:	f7ff ff56 	bl	8001d28 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7ff ff3b 	bl	8001cf8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8001e82:	230c      	movs	r3, #12
 8001e84:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e92:	2307      	movs	r3, #7
 8001e94:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea0:	f000 fb8a 	bl	80025b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2025      	movs	r0, #37	@ 0x25
 8001eaa:	f000 fa94 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eae:	2025      	movs	r0, #37	@ 0x25
 8001eb0:	f000 faab 	bl	800240a <HAL_NVIC_EnableIRQ>
}
 8001eb4:	bf00      	nop
 8001eb6:	3758      	adds	r7, #88	@ 0x58
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40013800 	.word	0x40013800
 8001ec0:	48000400 	.word	0x48000400
 8001ec4:	40004400 	.word	0x40004400

08001ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <NMI_Handler+0x4>

08001ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <HardFault_Handler+0x4>

08001ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <MemManage_Handler+0x4>

08001ee0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <BusFault_Handler+0x4>

08001ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <UsageFault_Handler+0x4>

08001ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f18:	f000 f946 	bl	80021a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f24:	4802      	ldr	r0, [pc, #8]	@ (8001f30 <USART1_IRQHandler+0x10>)
 8001f26:	f002 f9c7 	bl	80042b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000290 	.word	0x20000290

08001f34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f38:	4802      	ldr	r0, [pc, #8]	@ (8001f44 <USART2_IRQHandler+0x10>)
 8001f3a:	f002 f9bd 	bl	80042b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000324 	.word	0x20000324

08001f48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return 1;
 8001f4c:	2301      	movs	r3, #1
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <_kill>:

int _kill(int pid, int sig)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f60:	f005 faa8 	bl	80074b4 <__errno>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2216      	movs	r2, #22
 8001f68:	601a      	str	r2, [r3, #0]
  return -1;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_exit>:

void _exit (int status)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ffe7 	bl	8001f56 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <_exit+0x12>

08001f8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	e00a      	b.n	8001fb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f9e:	f3af 8000 	nop.w
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	60ba      	str	r2, [r7, #8]
 8001faa:	b2ca      	uxtb	r2, r1
 8001fac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	dbf0      	blt.n	8001f9e <_read+0x12>
  }

  return len;
 8001fbc:	687b      	ldr	r3, [r7, #4]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fec:	605a      	str	r2, [r3, #4]
  return 0;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <_isatty>:

int _isatty(int file)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002002:	2301      	movs	r3, #1
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr

0800200e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800200e:	b480      	push	{r7}
 8002010:	b085      	sub	sp, #20
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
	...

08002028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002030:	4a14      	ldr	r2, [pc, #80]	@ (8002084 <_sbrk+0x5c>)
 8002032:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <_sbrk+0x60>)
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800203c:	4b13      	ldr	r3, [pc, #76]	@ (800208c <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002044:	4b11      	ldr	r3, [pc, #68]	@ (800208c <_sbrk+0x64>)
 8002046:	4a12      	ldr	r2, [pc, #72]	@ (8002090 <_sbrk+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204a:	4b10      	ldr	r3, [pc, #64]	@ (800208c <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	429a      	cmp	r2, r3
 8002056:	d207      	bcs.n	8002068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002058:	f005 fa2c 	bl	80074b4 <__errno>
 800205c:	4603      	mov	r3, r0
 800205e:	220c      	movs	r2, #12
 8002060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	e009      	b.n	800207c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002068:	4b08      	ldr	r3, [pc, #32]	@ (800208c <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800206e:	4b07      	ldr	r3, [pc, #28]	@ (800208c <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	4a05      	ldr	r2, [pc, #20]	@ (800208c <_sbrk+0x64>)
 8002078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207a:	68fb      	ldr	r3, [r7, #12]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20010000 	.word	0x20010000
 8002088:	00000400 	.word	0x00000400
 800208c:	200003b8 	.word	0x200003b8
 8002090:	20000510 	.word	0x20000510

08002094 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020a0:	480d      	ldr	r0, [pc, #52]	@ (80020d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020a4:	f7ff fff6 	bl	8002094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a8:	480c      	ldr	r0, [pc, #48]	@ (80020dc <LoopForever+0x6>)
  ldr r1, =_edata
 80020aa:	490d      	ldr	r1, [pc, #52]	@ (80020e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020ac:	4a0d      	ldr	r2, [pc, #52]	@ (80020e4 <LoopForever+0xe>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b0:	e002      	b.n	80020b8 <LoopCopyDataInit>

080020b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b6:	3304      	adds	r3, #4

080020b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020bc:	d3f9      	bcc.n	80020b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020be:	4a0a      	ldr	r2, [pc, #40]	@ (80020e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020c0:	4c0a      	ldr	r4, [pc, #40]	@ (80020ec <LoopForever+0x16>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c4:	e001      	b.n	80020ca <LoopFillZerobss>

080020c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c8:	3204      	adds	r2, #4

080020ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020cc:	d3fb      	bcc.n	80020c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020ce:	f005 f9f7 	bl	80074c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020d2:	f7ff f9fb 	bl	80014cc <main>

080020d6 <LoopForever>:

LoopForever:
    b LoopForever
 80020d6:	e7fe      	b.n	80020d6 <LoopForever>
  ldr   r0, =_estack
 80020d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80020dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80020e4:	0800b904 	.word	0x0800b904
  ldr r2, =_sbss
 80020e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80020ec:	2000050c 	.word	0x2000050c

080020f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020f0:	e7fe      	b.n	80020f0 <ADC_IRQHandler>
	...

080020f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fe:	2003      	movs	r0, #3
 8002100:	f000 f95e 	bl	80023c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002104:	f001 fbd8 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8002108:	4603      	mov	r3, r0
 800210a:	4a09      	ldr	r2, [pc, #36]	@ (8002130 <HAL_Init+0x3c>)
 800210c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800210e:	200f      	movs	r0, #15
 8002110:	f000 f810 	bl	8002134 <HAL_InitTick>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	71fb      	strb	r3, [r7, #7]
 800211e:	e001      	b.n	8002124 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002120:	f7ff fe32 	bl	8001d88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002124:	79fb      	ldrb	r3, [r7, #7]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000000 	.word	0x20000000

08002134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002140:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <HAL_InitTick+0x6c>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d024      	beq.n	8002192 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002148:	f001 fbb6 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <HAL_InitTick+0x6c>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4619      	mov	r1, r3
 8002154:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002158:	fbb3 f3f1 	udiv	r3, r3, r1
 800215c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002160:	4618      	mov	r0, r3
 8002162:	f000 f960 	bl	8002426 <HAL_SYSTICK_Config>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10f      	bne.n	800218c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	d809      	bhi.n	8002186 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002172:	2200      	movs	r2, #0
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	f04f 30ff 	mov.w	r0, #4294967295
 800217a:	f000 f92c 	bl	80023d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800217e:	4a09      	ldr	r2, [pc, #36]	@ (80021a4 <HAL_InitTick+0x70>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	e007      	b.n	8002196 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	e004      	b.n	8002196 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	e001      	b.n	8002196 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000008 	.word	0x20000008
 80021a4:	20000004 	.word	0x20000004

080021a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <HAL_IncTick+0x1c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_IncTick+0x20>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a03      	ldr	r2, [pc, #12]	@ (80021c8 <HAL_IncTick+0x20>)
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	20000008 	.word	0x20000008
 80021c8:	200003bc 	.word	0x200003bc

080021cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b02      	ldr	r3, [pc, #8]	@ (80021dc <HAL_GetTick+0x10>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	200003bc 	.word	0x200003bc

080021e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff fff0 	bl	80021cc <HAL_GetTick>
 80021ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	d005      	beq.n	8002206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002224 <HAL_Delay+0x44>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002206:	bf00      	nop
 8002208:	f7ff ffe0 	bl	80021cc <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d8f7      	bhi.n	8002208 <HAL_Delay+0x28>
  {
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000008 	.word	0x20000008

08002228 <__NVIC_SetPriorityGrouping>:
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002238:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002244:	4013      	ands	r3, r2
 8002246:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002250:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225a:	4a04      	ldr	r2, [pc, #16]	@ (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	60d3      	str	r3, [r2, #12]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_GetPriorityGrouping>:
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002274:	4b04      	ldr	r3, [pc, #16]	@ (8002288 <__NVIC_GetPriorityGrouping+0x18>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	f003 0307 	and.w	r3, r3, #7
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_EnableIRQ>:
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	2b00      	cmp	r3, #0
 800229c:	db0b      	blt.n	80022b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4906      	ldr	r1, [pc, #24]	@ (80022c0 <__NVIC_EnableIRQ+0x34>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2001      	movs	r0, #1
 80022ae:	fa00 f202 	lsl.w	r2, r0, r2
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	e000e100 	.word	0xe000e100

080022c4 <__NVIC_SetPriority>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	db0a      	blt.n	80022ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	490c      	ldr	r1, [pc, #48]	@ (8002310 <__NVIC_SetPriority+0x4c>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	0112      	lsls	r2, r2, #4
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80022ec:	e00a      	b.n	8002304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4908      	ldr	r1, [pc, #32]	@ (8002314 <__NVIC_SetPriority+0x50>)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	3b04      	subs	r3, #4
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	440b      	add	r3, r1
 8002302:	761a      	strb	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <NVIC_EncodePriority>:
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	@ 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f1c3 0307 	rsb	r3, r3, #7
 8002332:	2b04      	cmp	r3, #4
 8002334:	bf28      	it	cs
 8002336:	2304      	movcs	r3, #4
 8002338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3304      	adds	r3, #4
 800233e:	2b06      	cmp	r3, #6
 8002340:	d902      	bls.n	8002348 <NVIC_EncodePriority+0x30>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3b03      	subs	r3, #3
 8002346:	e000      	b.n	800234a <NVIC_EncodePriority+0x32>
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	f04f 32ff 	mov.w	r2, #4294967295
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002360:	f04f 31ff 	mov.w	r1, #4294967295
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	43d9      	mvns	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	4313      	orrs	r3, r2
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	@ 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <SysTick_Config>:
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800238c:	d301      	bcc.n	8002392 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800238e:	2301      	movs	r3, #1
 8002390:	e00f      	b.n	80023b2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002392:	4a0a      	ldr	r2, [pc, #40]	@ (80023bc <SysTick_Config+0x40>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239a:	210f      	movs	r1, #15
 800239c:	f04f 30ff 	mov.w	r0, #4294967295
 80023a0:	f7ff ff90 	bl	80022c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a4:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <SysTick_Config+0x40>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023aa:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <SysTick_Config+0x40>)
 80023ac:	2207      	movs	r2, #7
 80023ae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	e000e010 	.word	0xe000e010

080023c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff2d 	bl	8002228 <__NVIC_SetPriorityGrouping>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	4603      	mov	r3, r0
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023e4:	f7ff ff44 	bl	8002270 <__NVIC_GetPriorityGrouping>
 80023e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	6978      	ldr	r0, [r7, #20]
 80023f0:	f7ff ff92 	bl	8002318 <NVIC_EncodePriority>
 80023f4:	4602      	mov	r2, r0
 80023f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff61 	bl	80022c4 <__NVIC_SetPriority>
}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff37 	bl	800228c <__NVIC_EnableIRQ>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ffa4 	bl	800237c <SysTick_Config>
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e04f      	b.n	80024f0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d008      	beq.n	800246e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2204      	movs	r2, #4
 8002460:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e040      	b.n	80024f0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 020e 	bic.w	r2, r2, #14
 800247c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002488:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800248c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0201 	bic.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	f003 021c 	and.w	r2, r3, #28
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	2101      	movs	r1, #1
 80024ac:	fa01 f202 	lsl.w	r2, r1, r2
 80024b0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024ba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00c      	beq.n	80024de <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024dc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d005      	beq.n	800251e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2204      	movs	r2, #4
 8002516:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	e047      	b.n	80025ae <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 020e 	bic.w	r2, r2, #14
 800252c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002548:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800254c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	f003 021c 	and.w	r2, r3, #28
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	2101      	movs	r1, #1
 800255c:	fa01 f202 	lsl.w	r2, r1, r2
 8002560:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800256a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00c      	beq.n	800258e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002582:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800258c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4798      	blx	r3
    }
  }
  return status;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c6:	e140      	b.n	800284a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	2101      	movs	r1, #1
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	4013      	ands	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8132 	beq.w	8002844 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d005      	beq.n	80025f8 <HAL_GPIO_Init+0x40>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d130      	bne.n	800265a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800262e:	2201      	movs	r2, #1
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	f003 0201 	and.w	r2, r3, #1
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b03      	cmp	r3, #3
 8002664:	d017      	beq.n	8002696 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	2203      	movs	r2, #3
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d123      	bne.n	80026ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	08da      	lsrs	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3208      	adds	r2, #8
 80026aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	220f      	movs	r2, #15
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	08da      	lsrs	r2, r3, #3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3208      	adds	r2, #8
 80026e4:	6939      	ldr	r1, [r7, #16]
 80026e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	2203      	movs	r2, #3
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0203 	and.w	r2, r3, #3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 808c 	beq.w	8002844 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800272c:	4a4e      	ldr	r2, [pc, #312]	@ (8002868 <HAL_GPIO_Init+0x2b0>)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	3302      	adds	r3, #2
 8002734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002738:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	2207      	movs	r2, #7
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002756:	d00d      	beq.n	8002774 <HAL_GPIO_Init+0x1bc>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a44      	ldr	r2, [pc, #272]	@ (800286c <HAL_GPIO_Init+0x2b4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d007      	beq.n	8002770 <HAL_GPIO_Init+0x1b8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a43      	ldr	r2, [pc, #268]	@ (8002870 <HAL_GPIO_Init+0x2b8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d101      	bne.n	800276c <HAL_GPIO_Init+0x1b4>
 8002768:	2302      	movs	r3, #2
 800276a:	e004      	b.n	8002776 <HAL_GPIO_Init+0x1be>
 800276c:	2307      	movs	r3, #7
 800276e:	e002      	b.n	8002776 <HAL_GPIO_Init+0x1be>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_GPIO_Init+0x1be>
 8002774:	2300      	movs	r3, #0
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	f002 0203 	and.w	r2, r2, #3
 800277c:	0092      	lsls	r2, r2, #2
 800277e:	4093      	lsls	r3, r2
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002786:	4938      	ldr	r1, [pc, #224]	@ (8002868 <HAL_GPIO_Init+0x2b0>)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002794:	4b37      	ldr	r3, [pc, #220]	@ (8002874 <HAL_GPIO_Init+0x2bc>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002874 <HAL_GPIO_Init+0x2bc>)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027be:	4b2d      	ldr	r3, [pc, #180]	@ (8002874 <HAL_GPIO_Init+0x2bc>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027e2:	4a24      	ldr	r2, [pc, #144]	@ (8002874 <HAL_GPIO_Init+0x2bc>)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80027e8:	4b22      	ldr	r3, [pc, #136]	@ (8002874 <HAL_GPIO_Init+0x2bc>)
 80027ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027ee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800280e:	4a19      	ldr	r2, [pc, #100]	@ (8002874 <HAL_GPIO_Init+0x2bc>)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002816:	4b17      	ldr	r3, [pc, #92]	@ (8002874 <HAL_GPIO_Init+0x2bc>)
 8002818:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800281c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800283c:	4a0d      	ldr	r2, [pc, #52]	@ (8002874 <HAL_GPIO_Init+0x2bc>)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	3301      	adds	r3, #1
 8002848:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	f47f aeb7 	bne.w	80025c8 <HAL_GPIO_Init+0x10>
  }
}
 800285a:	bf00      	nop
 800285c:	bf00      	nop
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40010000 	.word	0x40010000
 800286c:	48000400 	.word	0x48000400
 8002870:	48000800 	.word	0x48000800
 8002874:	58000800 	.word	0x58000800

08002878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
 8002884:	4613      	mov	r3, r2
 8002886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002888:	787b      	ldrb	r3, [r7, #1]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002894:	e002      	b.n	800289c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002896:	887a      	ldrh	r2, [r7, #2]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028b8:	887a      	ldrh	r2, [r7, #2]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	041a      	lsls	r2, r3, #16
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43d9      	mvns	r1, r3
 80028c4:	887b      	ldrh	r3, [r7, #2]
 80028c6:	400b      	ands	r3, r1
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	619a      	str	r2, [r3, #24]
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028dc:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a03      	ldr	r2, [pc, #12]	@ (80028f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80028e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e6:	6013      	str	r3, [r2, #0]
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	58000400 	.word	0x58000400

080028f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80028f8:	4b03      	ldr	r3, [pc, #12]	@ (8002908 <HAL_PWREx_GetVoltageRange+0x14>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	58000400 	.word	0x58000400

0800290c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002910:	4b06      	ldr	r3, [pc, #24]	@ (800292c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800291c:	d101      	bne.n	8002922 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	58000400 	.word	0x58000400

08002930 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800293e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800295a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800296c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800297a:	d101      	bne.n	8002980 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800298e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299c:	6013      	str	r3, [r2, #0]
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
}
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029d4:	d101      	bne.n	80029da <LL_RCC_HSE_IsReady+0x18>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <LL_RCC_HSE_IsReady+0x1a>
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80029e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f6:	6013      	str	r3, [r2, #0]
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a12:	6013      	str	r3, [r2, #0]
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a2e:	d101      	bne.n	8002a34 <LL_RCC_HSI_IsReady+0x18>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <LL_RCC_HSI_IsReady+0x1a>
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	061b      	lsls	r3, r3, #24
 8002a54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d101      	bne.n	8002a7e <LL_RCC_LSE_IsReady+0x18>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <LL_RCC_LSE_IsReady+0x1a>
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ab4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d101      	bne.n	8002ae0 <LL_RCC_LSI_IsReady+0x18>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <LL_RCC_LSI_IsReady+0x1a>
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6013      	str	r3, [r2, #0]
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr

08002b06 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	6013      	str	r3, [r2, #0]
}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d101      	bne.n	8002b38 <LL_RCC_MSI_IsReady+0x16>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <LL_RCC_MSI_IsReady+0x18>
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d101      	bne.n	8002b58 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b84:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f023 0203 	bic.w	r2, r3, #3
 8002bca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 030c 	and.w	r3, r3, #12
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	608b      	str	r3, [r1, #8]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c26:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002c2a:	f023 020f 	bic.w	r2, r3, #15
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	608b      	str	r3, [r1, #8]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d00:	6013      	str	r3, [r2, #0]
}
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d1c:	6013      	str	r3, [r2, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d38:	d101      	bne.n	8002d3e <LL_RCC_PLL_IsReady+0x18>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <LL_RCC_PLL_IsReady+0x1a>
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002d64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f003 0303 	and.w	r3, r3, #3
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db4:	d101      	bne.n	8002dba <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dcc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd8:	d101      	bne.n	8002dde <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002dfa:	d101      	bne.n	8002e00 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e1c:	d101      	bne.n	8002e22 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e36f      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e3e:	f7ff fece 	bl	8002bde <LL_RCC_GetSysClkSource>
 8002e42:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e44:	f7ff ffa2 	bl	8002d8c <LL_RCC_PLL_GetMainSource>
 8002e48:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80c4 	beq.w	8002fe0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_RCC_OscConfig+0x3e>
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	2b0c      	cmp	r3, #12
 8002e62:	d176      	bne.n	8002f52 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d173      	bne.n	8002f52 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e353      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_OscConfig+0x68>
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e92:	e006      	b.n	8002ea2 <HAL_RCC_OscConfig+0x76>
 8002e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d222      	bcs.n	8002eec <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fd3c 	bl	8003928 <RCC_SetFlashLatencyFromMSIRange>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e331      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ec4:	f043 0308 	orr.w	r3, r3, #8
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fe53 	bl	8002b90 <LL_RCC_MSI_SetCalibTrimming>
 8002eea:	e021      	b.n	8002f30 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ef6:	f043 0308 	orr.w	r3, r3, #8
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fe3a 	bl	8002b90 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fd01 	bl	8003928 <RCC_SetFlashLatencyFromMSIRange>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e2f6      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f30:	f000 fcc2 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8002f34:	4603      	mov	r3, r0
 8002f36:	4aa7      	ldr	r2, [pc, #668]	@ (80031d4 <HAL_RCC_OscConfig+0x3a8>)
 8002f38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002f3a:	4ba7      	ldr	r3, [pc, #668]	@ (80031d8 <HAL_RCC_OscConfig+0x3ac>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff f8f8 	bl	8002134 <HAL_InitTick>
 8002f44:	4603      	mov	r3, r0
 8002f46:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002f48:	7cfb      	ldrb	r3, [r7, #19]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d047      	beq.n	8002fde <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	e2e5      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d02c      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f5a:	f7ff fdc6 	bl	8002aea <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f5e:	f7ff f935 	bl	80021cc <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f66:	f7ff f931 	bl	80021cc <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e2d2      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f78:	f7ff fdd3 	bl	8002b22 <LL_RCC_MSI_IsReady>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f1      	beq.n	8002f66 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f8c:	f043 0308 	orr.w	r3, r3, #8
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fdef 	bl	8002b90 <LL_RCC_MSI_SetCalibTrimming>
 8002fb2:	e015      	b.n	8002fe0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fb4:	f7ff fda7 	bl	8002b06 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fb8:	f7ff f908 	bl	80021cc <HAL_GetTick>
 8002fbc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fc0:	f7ff f904 	bl	80021cc <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e2a5      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002fd2:	f7ff fda6 	bl	8002b22 <LL_RCC_MSI_IsReady>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f1      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x194>
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002fde:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d058      	beq.n	800309e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1d2>
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	2b0c      	cmp	r3, #12
 8002ff6:	d108      	bne.n	800300a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d105      	bne.n	800300a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d14b      	bne.n	800309e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e289      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800300a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800301c:	4313      	orrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003028:	d102      	bne.n	8003030 <HAL_RCC_OscConfig+0x204>
 800302a:	f7ff fcae 	bl	800298a <LL_RCC_HSE_Enable>
 800302e:	e00d      	b.n	800304c <HAL_RCC_OscConfig+0x220>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003038:	d104      	bne.n	8003044 <HAL_RCC_OscConfig+0x218>
 800303a:	f7ff fc79 	bl	8002930 <LL_RCC_HSE_EnableTcxo>
 800303e:	f7ff fca4 	bl	800298a <LL_RCC_HSE_Enable>
 8003042:	e003      	b.n	800304c <HAL_RCC_OscConfig+0x220>
 8003044:	f7ff fcaf 	bl	80029a6 <LL_RCC_HSE_Disable>
 8003048:	f7ff fc80 	bl	800294c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d012      	beq.n	800307a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7ff f8ba 	bl	80021cc <HAL_GetTick>
 8003058:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800305c:	f7ff f8b6 	bl	80021cc <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b64      	cmp	r3, #100	@ 0x64
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e257      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800306e:	f7ff fca8 	bl	80029c2 <LL_RCC_HSE_IsReady>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f1      	beq.n	800305c <HAL_RCC_OscConfig+0x230>
 8003078:	e011      	b.n	800309e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7ff f8a7 	bl	80021cc <HAL_GetTick>
 800307e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003082:	f7ff f8a3 	bl	80021cc <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b64      	cmp	r3, #100	@ 0x64
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e244      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003094:	f7ff fc95 	bl	80029c2 <LL_RCC_HSE_IsReady>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f1      	bne.n	8003082 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d046      	beq.n	8003138 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_OscConfig+0x290>
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d10e      	bne.n	80030d4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d10b      	bne.n	80030d4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e22a      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fcb6 	bl	8002a3e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80030d2:	e031      	b.n	8003138 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d019      	beq.n	8003110 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030dc:	f7ff fc82 	bl	80029e4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7ff f874 	bl	80021cc <HAL_GetTick>
 80030e4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e8:	f7ff f870 	bl	80021cc <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e211      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80030fa:	f7ff fc8f 	bl	8002a1c <LL_RCC_HSI_IsReady>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f1      	beq.n	80030e8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fc98 	bl	8002a3e <LL_RCC_HSI_SetCalibTrimming>
 800310e:	e013      	b.n	8003138 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003110:	f7ff fc76 	bl	8002a00 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7ff f85a 	bl	80021cc <HAL_GetTick>
 8003118:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311c:	f7ff f856 	bl	80021cc <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e1f7      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800312e:	f7ff fc75 	bl	8002a1c <LL_RCC_HSI_IsReady>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f1      	bne.n	800311c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d06e      	beq.n	8003222 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d056      	beq.n	80031fa <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800314c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003154:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	429a      	cmp	r2, r3
 8003162:	d031      	beq.n	80031c8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e1d0      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d013      	beq.n	80031ae <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003186:	f7ff fc8f 	bl	8002aa8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800318a:	f7ff f81f 	bl	80021cc <HAL_GetTick>
 800318e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003192:	f7ff f81b 	bl	80021cc <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b11      	cmp	r3, #17
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e1bc      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80031a4:	f7ff fc90 	bl	8002ac8 <LL_RCC_LSI_IsReady>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f1      	bne.n	8003192 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031b6:	f023 0210 	bic.w	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c8:	f7ff fc5e 	bl	8002a88 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031cc:	f7fe fffe 	bl	80021cc <HAL_GetTick>
 80031d0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80031d2:	e00c      	b.n	80031ee <HAL_RCC_OscConfig+0x3c2>
 80031d4:	20000000 	.word	0x20000000
 80031d8:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031dc:	f7fe fff6 	bl	80021cc <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b11      	cmp	r3, #17
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e197      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80031ee:	f7ff fc6b 	bl	8002ac8 <LL_RCC_LSI_IsReady>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f1      	beq.n	80031dc <HAL_RCC_OscConfig+0x3b0>
 80031f8:	e013      	b.n	8003222 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031fa:	f7ff fc55 	bl	8002aa8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fe:	f7fe ffe5 	bl	80021cc <HAL_GetTick>
 8003202:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003206:	f7fe ffe1 	bl	80021cc <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b11      	cmp	r3, #17
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e182      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003218:	f7ff fc56 	bl	8002ac8 <LL_RCC_LSI_IsReady>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f1      	bne.n	8003206 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80d8 	beq.w	80033e0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003230:	f7ff fb6c 	bl	800290c <LL_PWR_IsEnabledBkUpAccess>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d113      	bne.n	8003262 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800323a:	f7ff fb4d 	bl	80028d8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323e:	f7fe ffc5 	bl	80021cc <HAL_GetTick>
 8003242:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003246:	f7fe ffc1 	bl	80021cc <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e162      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003258:	f7ff fb58 	bl	800290c <LL_PWR_IsEnabledBkUpAccess>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f1      	beq.n	8003246 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d07b      	beq.n	8003362 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b85      	cmp	r3, #133	@ 0x85
 8003270:	d003      	beq.n	800327a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b05      	cmp	r3, #5
 8003278:	d109      	bne.n	800328e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800327a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003282:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003286:	f043 0304 	orr.w	r3, r3, #4
 800328a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328e:	f7fe ff9d 	bl	80021cc <HAL_GetTick>
 8003292:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f7fe ff8f 	bl	80021cc <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e12e      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80032c0:	f7ff fbd1 	bl	8002a66 <LL_RCC_LSE_IsReady>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0ef      	beq.n	80032aa <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2b81      	cmp	r3, #129	@ 0x81
 80032d0:	d003      	beq.n	80032da <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b85      	cmp	r3, #133	@ 0x85
 80032d8:	d121      	bne.n	800331e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032da:	f7fe ff77 	bl	80021cc <HAL_GetTick>
 80032de:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fe ff69 	bl	80021cc <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e108      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800330c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0ec      	beq.n	80032f6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800331c:	e060      	b.n	80033e0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331e:	f7fe ff55 	bl	80021cc <HAL_GetTick>
 8003322:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003330:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7fe ff47 	bl	80021cc <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e0e6      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1ec      	bne.n	800333a <HAL_RCC_OscConfig+0x50e>
 8003360:	e03e      	b.n	80033e0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003362:	f7fe ff33 	bl	80021cc <HAL_GetTick>
 8003366:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003370:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003374:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337e:	f7fe ff25 	bl	80021cc <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338c:	4293      	cmp	r3, r2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e0c4      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1ec      	bne.n	800337e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a4:	f7fe ff12 	bl	80021cc <HAL_GetTick>
 80033a8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fe ff04 	bl	80021cc <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e0a3      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80033d6:	f7ff fb46 	bl	8002a66 <LL_RCC_LSE_IsReady>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ef      	bne.n	80033c0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8099 	beq.w	800351c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d06c      	beq.n	80034ca <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d14b      	bne.n	8003490 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f8:	f7ff fc87 	bl	8002d0a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fe fee6 	bl	80021cc <HAL_GetTick>
 8003400:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003404:	f7fe fee2 	bl	80021cc <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b0a      	cmp	r3, #10
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e083      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003416:	f7ff fc86 	bl	8002d26 <LL_RCC_PLL_IsReady>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f1      	bne.n	8003404 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	4b40      	ldr	r3, [pc, #256]	@ (8003528 <HAL_RCC_OscConfig+0x6fc>)
 8003428:	4013      	ands	r3, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003432:	4311      	orrs	r1, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003438:	0212      	lsls	r2, r2, #8
 800343a:	4311      	orrs	r1, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003440:	4311      	orrs	r1, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800344c:	430a      	orrs	r2, r1
 800344e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003452:	4313      	orrs	r3, r2
 8003454:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003456:	f7ff fc4a 	bl	8002cee <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800345a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003468:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346a:	f7fe feaf 	bl	80021cc <HAL_GetTick>
 800346e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003472:	f7fe feab 	bl	80021cc <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b0a      	cmp	r3, #10
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e04c      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003484:	f7ff fc4f 	bl	8002d26 <LL_RCC_PLL_IsReady>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f1      	beq.n	8003472 <HAL_RCC_OscConfig+0x646>
 800348e:	e045      	b.n	800351c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003490:	f7ff fc3b 	bl	8002d0a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fe fe9a 	bl	80021cc <HAL_GetTick>
 8003498:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fe fe96 	bl	80021cc <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b0a      	cmp	r3, #10
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e037      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80034ae:	f7ff fc3a 	bl	8002d26 <LL_RCC_PLL_IsReady>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f1      	bne.n	800349c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80034b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034c2:	4b1a      	ldr	r3, [pc, #104]	@ (800352c <HAL_RCC_OscConfig+0x700>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	60cb      	str	r3, [r1, #12]
 80034c8:	e028      	b.n	800351c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e023      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	f003 0203 	and.w	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d115      	bne.n	8003518 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d10e      	bne.n	8003518 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	429a      	cmp	r2, r3
 8003508:	d106      	bne.n	8003518 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	11c1808c 	.word	0x11c1808c
 800352c:	eefefffc 	.word	0xeefefffc

08003530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e10f      	b.n	8003764 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b89      	ldr	r3, [pc, #548]	@ (800376c <HAL_RCC_ClockConfig+0x23c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d91b      	bls.n	800358a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b86      	ldr	r3, [pc, #536]	@ (800376c <HAL_RCC_ClockConfig+0x23c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 0207 	bic.w	r2, r3, #7
 800355a:	4984      	ldr	r1, [pc, #528]	@ (800376c <HAL_RCC_ClockConfig+0x23c>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003562:	f7fe fe33 	bl	80021cc <HAL_GetTick>
 8003566:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003568:	e008      	b.n	800357c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800356a:	f7fe fe2f 	bl	80021cc <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e0f3      	b.n	8003764 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357c:	4b7b      	ldr	r3, [pc, #492]	@ (800376c <HAL_RCC_ClockConfig+0x23c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d1ef      	bne.n	800356a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d016      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fb2a 	bl	8002bf4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035a0:	f7fe fe14 	bl	80021cc <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035a8:	f7fe fe10 	bl	80021cc <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e0d4      	b.n	8003764 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80035ba:	f7ff fbf2 	bl	8002da2 <LL_RCC_IsActiveFlag_HPRE>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f1      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d016      	beq.n	80035fe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fb20 	bl	8002c1a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035da:	f7fe fdf7 	bl	80021cc <HAL_GetTick>
 80035de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035e2:	f7fe fdf3 	bl	80021cc <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e0b7      	b.n	8003764 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035f4:	f7ff fbe6 	bl	8002dc4 <LL_RCC_IsActiveFlag_SHDHPRE>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f1      	beq.n	80035e2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	d016      	beq.n	8003638 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fb19 	bl	8002c46 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003614:	f7fe fdda 	bl	80021cc <HAL_GetTick>
 8003618:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800361c:	f7fe fdd6 	bl	80021cc <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e09a      	b.n	8003764 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800362e:	f7ff fbdb 	bl	8002de8 <LL_RCC_IsActiveFlag_PPRE1>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f1      	beq.n	800361c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d017      	beq.n	8003674 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fb0e 	bl	8002c6c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003650:	f7fe fdbc 	bl	80021cc <HAL_GetTick>
 8003654:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003656:	e008      	b.n	800366a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003658:	f7fe fdb8 	bl	80021cc <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e07c      	b.n	8003764 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800366a:	f7ff fbce 	bl	8002e0a <LL_RCC_IsActiveFlag_PPRE2>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f1      	beq.n	8003658 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d043      	beq.n	8003708 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d106      	bne.n	8003696 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003688:	f7ff f99b 	bl	80029c2 <LL_RCC_HSE_IsReady>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11e      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e066      	b.n	8003764 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b03      	cmp	r3, #3
 800369c:	d106      	bne.n	80036ac <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800369e:	f7ff fb42 	bl	8002d26 <LL_RCC_PLL_IsReady>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d113      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e05b      	b.n	8003764 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80036b4:	f7ff fa35 	bl	8002b22 <LL_RCC_MSI_IsReady>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d108      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e050      	b.n	8003764 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80036c2:	f7ff f9ab 	bl	8002a1c <LL_RCC_HSI_IsReady>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e049      	b.n	8003764 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fa6f 	bl	8002bb8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036da:	f7fe fd77 	bl	80021cc <HAL_GetTick>
 80036de:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e0:	e00a      	b.n	80036f8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e2:	f7fe fd73 	bl	80021cc <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e035      	b.n	8003764 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f8:	f7ff fa71 	bl	8002bde <LL_RCC_GetSysClkSource>
 80036fc:	4602      	mov	r2, r0
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	429a      	cmp	r2, r3
 8003706:	d1ec      	bne.n	80036e2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003708:	4b18      	ldr	r3, [pc, #96]	@ (800376c <HAL_RCC_ClockConfig+0x23c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d21b      	bcs.n	800374e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003716:	4b15      	ldr	r3, [pc, #84]	@ (800376c <HAL_RCC_ClockConfig+0x23c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 0207 	bic.w	r2, r3, #7
 800371e:	4913      	ldr	r1, [pc, #76]	@ (800376c <HAL_RCC_ClockConfig+0x23c>)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003726:	f7fe fd51 	bl	80021cc <HAL_GetTick>
 800372a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372c:	e008      	b.n	8003740 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800372e:	f7fe fd4d 	bl	80021cc <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e011      	b.n	8003764 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003740:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <HAL_RCC_ClockConfig+0x23c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d1ef      	bne.n	800372e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800374e:	f000 f8b3 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8003752:	4603      	mov	r3, r0
 8003754:	4a06      	ldr	r2, [pc, #24]	@ (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003756:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003758:	4b06      	ldr	r3, [pc, #24]	@ (8003774 <HAL_RCC_ClockConfig+0x244>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fe fce9 	bl	8002134 <HAL_InitTick>
 8003762:	4603      	mov	r3, r0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	58004000 	.word	0x58004000
 8003770:	20000000 	.word	0x20000000
 8003774:	20000004 	.word	0x20000004

08003778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003786:	f7ff fa2a 	bl	8002bde <LL_RCC_GetSysClkSource>
 800378a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800378c:	f7ff fafe 	bl	8002d8c <LL_RCC_PLL_GetMainSource>
 8003790:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x2c>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d139      	bne.n	8003812 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d136      	bne.n	8003812 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80037a4:	f7ff f9cd 	bl	8002b42 <LL_RCC_MSI_IsEnabledRangeSelect>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d115      	bne.n	80037da <HAL_RCC_GetSysClockFreq+0x62>
 80037ae:	f7ff f9c8 	bl	8002b42 <LL_RCC_MSI_IsEnabledRangeSelect>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_GetSysClockFreq+0x4e>
 80037b8:	f7ff f9d3 	bl	8002b62 <LL_RCC_MSI_GetRange>
 80037bc:	4603      	mov	r3, r0
 80037be:	0a1b      	lsrs	r3, r3, #8
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	e005      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x5a>
 80037c6:	f7ff f9d7 	bl	8002b78 <LL_RCC_MSI_GetRangeAfterStandby>
 80037ca:	4603      	mov	r3, r0
 80037cc:	0a1b      	lsrs	r3, r3, #8
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	4a36      	ldr	r2, [pc, #216]	@ (80038ac <HAL_RCC_GetSysClockFreq+0x134>)
 80037d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d8:	e014      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x8c>
 80037da:	f7ff f9b2 	bl	8002b42 <LL_RCC_MSI_IsEnabledRangeSelect>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d106      	bne.n	80037f2 <HAL_RCC_GetSysClockFreq+0x7a>
 80037e4:	f7ff f9bd 	bl	8002b62 <LL_RCC_MSI_GetRange>
 80037e8:	4603      	mov	r3, r0
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	e005      	b.n	80037fe <HAL_RCC_GetSysClockFreq+0x86>
 80037f2:	f7ff f9c1 	bl	8002b78 <LL_RCC_MSI_GetRangeAfterStandby>
 80037f6:	4603      	mov	r3, r0
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	4a2b      	ldr	r2, [pc, #172]	@ (80038ac <HAL_RCC_GetSysClockFreq+0x134>)
 8003800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003804:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d115      	bne.n	8003838 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003810:	e012      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b04      	cmp	r3, #4
 8003816:	d102      	bne.n	800381e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003818:	4b25      	ldr	r3, [pc, #148]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x138>)
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	e00c      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d109      	bne.n	8003838 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003824:	f7ff f8a0 	bl	8002968 <LL_RCC_HSE_IsEnabledDiv2>
 8003828:	4603      	mov	r3, r0
 800382a:	2b01      	cmp	r3, #1
 800382c:	d102      	bne.n	8003834 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800382e:	4b20      	ldr	r3, [pc, #128]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	e001      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003834:	4b1f      	ldr	r3, [pc, #124]	@ (80038b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003836:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003838:	f7ff f9d1 	bl	8002bde <LL_RCC_GetSysClkSource>
 800383c:	4603      	mov	r3, r0
 800383e:	2b0c      	cmp	r3, #12
 8003840:	d12f      	bne.n	80038a2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003842:	f7ff faa3 	bl	8002d8c <LL_RCC_PLL_GetMainSource>
 8003846:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d003      	beq.n	8003856 <HAL_RCC_GetSysClockFreq+0xde>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d003      	beq.n	800385c <HAL_RCC_GetSysClockFreq+0xe4>
 8003854:	e00d      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003856:	4b16      	ldr	r3, [pc, #88]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003858:	60fb      	str	r3, [r7, #12]
        break;
 800385a:	e00d      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800385c:	f7ff f884 	bl	8002968 <LL_RCC_HSE_IsEnabledDiv2>
 8003860:	4603      	mov	r3, r0
 8003862:	2b01      	cmp	r3, #1
 8003864:	d102      	bne.n	800386c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003866:	4b12      	ldr	r3, [pc, #72]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003868:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800386a:	e005      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800386c:	4b11      	ldr	r3, [pc, #68]	@ (80038b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800386e:	60fb      	str	r3, [r7, #12]
        break;
 8003870:	e002      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	60fb      	str	r3, [r7, #12]
        break;
 8003876:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003878:	f7ff fa66 	bl	8002d48 <LL_RCC_PLL_GetN>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	fb03 f402 	mul.w	r4, r3, r2
 8003884:	f7ff fa77 	bl	8002d76 <LL_RCC_PLL_GetDivider>
 8003888:	4603      	mov	r3, r0
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	3301      	adds	r3, #1
 800388e:	fbb4 f4f3 	udiv	r4, r4, r3
 8003892:	f7ff fa65 	bl	8002d60 <LL_RCC_PLL_GetR>
 8003896:	4603      	mov	r3, r0
 8003898:	0f5b      	lsrs	r3, r3, #29
 800389a:	3301      	adds	r3, #1
 800389c:	fbb4 f3f3 	udiv	r3, r4, r3
 80038a0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80038a2:	697b      	ldr	r3, [r7, #20]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd90      	pop	{r4, r7, pc}
 80038ac:	0800b440 	.word	0x0800b440
 80038b0:	00f42400 	.word	0x00f42400
 80038b4:	01e84800 	.word	0x01e84800

080038b8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b8:	b598      	push	{r3, r4, r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80038bc:	f7ff ff5c 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 80038c0:	4604      	mov	r4, r0
 80038c2:	f7ff f9e6 	bl	8002c92 <LL_RCC_GetAHBPrescaler>
 80038c6:	4603      	mov	r3, r0
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	4a03      	ldr	r2, [pc, #12]	@ (80038dc <HAL_RCC_GetHCLKFreq+0x24>)
 80038d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	bd98      	pop	{r3, r4, r7, pc}
 80038dc:	0800b3e0 	.word	0x0800b3e0

080038e0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e0:	b598      	push	{r3, r4, r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80038e4:	f7ff ffe8 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 80038e8:	4604      	mov	r4, r0
 80038ea:	f7ff f9ea 	bl	8002cc2 <LL_RCC_GetAPB1Prescaler>
 80038ee:	4603      	mov	r3, r0
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	4a03      	ldr	r2, [pc, #12]	@ (8003900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	bd98      	pop	{r3, r4, r7, pc}
 8003900:	0800b420 	.word	0x0800b420

08003904 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003904:	b598      	push	{r3, r4, r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003908:	f7ff ffd6 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 800390c:	4604      	mov	r4, r0
 800390e:	f7ff f9e3 	bl	8002cd8 <LL_RCC_GetAPB2Prescaler>
 8003912:	4603      	mov	r3, r0
 8003914:	0adb      	lsrs	r3, r3, #11
 8003916:	4a03      	ldr	r2, [pc, #12]	@ (8003924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd98      	pop	{r3, r4, r7, pc}
 8003924:	0800b420 	.word	0x0800b420

08003928 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	091b      	lsrs	r3, r3, #4
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	4a10      	ldr	r2, [pc, #64]	@ (800397c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800393a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003940:	f7ff f9b2 	bl	8002ca8 <LL_RCC_GetAHB3Prescaler>
 8003944:	4603      	mov	r3, r0
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	4a0c      	ldr	r2, [pc, #48]	@ (8003980 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800394e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4a09      	ldr	r2, [pc, #36]	@ (8003984 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	0c9c      	lsrs	r4, r3, #18
 8003964:	f7fe ffc6 	bl	80028f4 <HAL_PWREx_GetVoltageRange>
 8003968:	4603      	mov	r3, r0
 800396a:	4619      	mov	r1, r3
 800396c:	4620      	mov	r0, r4
 800396e:	f000 f80b 	bl	8003988 <RCC_SetFlashLatency>
 8003972:	4603      	mov	r3, r0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	bd90      	pop	{r4, r7, pc}
 800397c:	0800b440 	.word	0x0800b440
 8003980:	0800b3e0 	.word	0x0800b3e0
 8003984:	431bde83 	.word	0x431bde83

08003988 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08e      	sub	sp, #56	@ 0x38
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003992:	4a3a      	ldr	r2, [pc, #232]	@ (8003a7c <RCC_SetFlashLatency+0xf4>)
 8003994:	f107 0320 	add.w	r3, r7, #32
 8003998:	e892 0003 	ldmia.w	r2, {r0, r1}
 800399c:	6018      	str	r0, [r3, #0]
 800399e:	3304      	adds	r3, #4
 80039a0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80039a2:	4a37      	ldr	r2, [pc, #220]	@ (8003a80 <RCC_SetFlashLatency+0xf8>)
 80039a4:	f107 0318 	add.w	r3, r7, #24
 80039a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039ac:	6018      	str	r0, [r3, #0]
 80039ae:	3304      	adds	r3, #4
 80039b0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80039b2:	4a34      	ldr	r2, [pc, #208]	@ (8003a84 <RCC_SetFlashLatency+0xfc>)
 80039b4:	f107 030c 	add.w	r3, r7, #12
 80039b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80039ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80039be:	2300      	movs	r3, #0
 80039c0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039c8:	d11b      	bne.n	8003a02 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039ca:	2300      	movs	r3, #0
 80039cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ce:	e014      	b.n	80039fa <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80039d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	3338      	adds	r3, #56	@ 0x38
 80039d6:	443b      	add	r3, r7
 80039d8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80039dc:	461a      	mov	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d807      	bhi.n	80039f4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80039e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	3338      	adds	r3, #56	@ 0x38
 80039ea:	443b      	add	r3, r7
 80039ec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80039f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80039f2:	e021      	b.n	8003a38 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f6:	3301      	adds	r3, #1
 80039f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80039fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d9e7      	bls.n	80039d0 <RCC_SetFlashLatency+0x48>
 8003a00:	e01a      	b.n	8003a38 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a06:	e014      	b.n	8003a32 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	3338      	adds	r3, #56	@ 0x38
 8003a0e:	443b      	add	r3, r7
 8003a10:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003a14:	461a      	mov	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d807      	bhi.n	8003a2c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	3338      	adds	r3, #56	@ 0x38
 8003a22:	443b      	add	r3, r7
 8003a24:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003a28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003a2a:	e005      	b.n	8003a38 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2e:	3301      	adds	r3, #1
 8003a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d9e7      	bls.n	8003a08 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a38:	4b13      	ldr	r3, [pc, #76]	@ (8003a88 <RCC_SetFlashLatency+0x100>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f023 0207 	bic.w	r2, r3, #7
 8003a40:	4911      	ldr	r1, [pc, #68]	@ (8003a88 <RCC_SetFlashLatency+0x100>)
 8003a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a44:	4313      	orrs	r3, r2
 8003a46:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a48:	f7fe fbc0 	bl	80021cc <HAL_GetTick>
 8003a4c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a4e:	e008      	b.n	8003a62 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a50:	f7fe fbbc 	bl	80021cc <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e007      	b.n	8003a72 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a62:	4b09      	ldr	r3, [pc, #36]	@ (8003a88 <RCC_SetFlashLatency+0x100>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d1ef      	bne.n	8003a50 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3738      	adds	r7, #56	@ 0x38
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	0800b3b8 	.word	0x0800b3b8
 8003a80:	0800b3c0 	.word	0x0800b3c0
 8003a84:	0800b3c8 	.word	0x0800b3c8
 8003a88:	58004000 	.word	0x58004000

08003a8c <LL_RCC_LSE_IsReady>:
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d101      	bne.n	8003aa4 <LL_RCC_LSE_IsReady+0x18>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <LL_RCC_LSE_IsReady+0x1a>
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr

08003aae <LL_RCC_SetUSARTClockSource>:
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	401a      	ands	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr

08003ade <LL_RCC_SetI2SClockSource>:
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003ae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003af2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <LL_RCC_SetLPUARTClockSource>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b18:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr

08003b32 <LL_RCC_SetI2CClockSource>:
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	401a      	ands	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003b56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr

08003b6a <LL_RCC_SetLPTIMClockSource>:
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b76:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	041b      	lsls	r3, r3, #16
 8003b80:	43db      	mvns	r3, r3
 8003b82:	401a      	ands	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	041b      	lsls	r3, r3, #16
 8003b88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <LL_RCC_SetRNGClockSource>:
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bac:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003bb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <LL_RCC_SetADCClockSource>:
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <LL_RCC_SetRTCClockSource>:
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003bf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr

08003c1a <LL_RCC_GetRTCClockSource>:
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <LL_RCC_ForceBackupDomainReset>:
{
 8003c32:	b480      	push	{r7}
 8003c34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c4a:	bf00      	nop
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr

08003c52 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003c52:	b480      	push	{r7}
 8003c54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c6a:	bf00      	nop
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003c80:	2300      	movs	r3, #0
 8003c82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003c84:	2300      	movs	r3, #0
 8003c86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d058      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003c94:	f7fe fe20 	bl	80028d8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c98:	f7fe fa98 	bl	80021cc <HAL_GetTick>
 8003c9c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003c9e:	e009      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca0:	f7fe fa94 	bl	80021cc <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d902      	bls.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	74fb      	strb	r3, [r7, #19]
        break;
 8003cb2:	e006      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003cb4:	4b7b      	ldr	r3, [pc, #492]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cc0:	d1ee      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003cc2:	7cfb      	ldrb	r3, [r7, #19]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d13c      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003cc8:	f7ff ffa7 	bl	8003c1a <LL_RCC_GetRTCClockSource>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d00f      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ce2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ce4:	f7ff ffa5 	bl	8003c32 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce8:	f7ff ffb3 	bl	8003c52 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d014      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fe fa64 	bl	80021cc <HAL_GetTick>
 8003d04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003d06:	e00b      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7fe fa60 	bl	80021cc <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d902      	bls.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	74fb      	strb	r3, [r7, #19]
            break;
 8003d1e:	e004      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003d20:	f7ff feb4 	bl	8003a8c <LL_RCC_LSE_IsReady>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d1ee      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003d2a:	7cfb      	ldrb	r3, [r7, #19]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d105      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff ff5b 	bl	8003bf0 <LL_RCC_SetRTCClockSource>
 8003d3a:	e004      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d3c:	7cfb      	ldrb	r3, [r7, #19]
 8003d3e:	74bb      	strb	r3, [r7, #18]
 8003d40:	e001      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	7cfb      	ldrb	r3, [r7, #19]
 8003d44:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fea9 	bl	8003aae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d004      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fe9e 	bl	8003aae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d004      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fec0 	bl	8003b08 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d004      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fee6 	bl	8003b6a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d004      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fedb 	bl	8003b6a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d004      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fed0 	bl	8003b6a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d004      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fea9 	bl	8003b32 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d004      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fe9e 	bl	8003b32 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d004      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fe93 	bl	8003b32 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0310 	and.w	r3, r3, #16
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d011      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fe5e 	bl	8003ade <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e2a:	d107      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d010      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff fea5 	bl	8003b9c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d107      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e68:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d011      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fea3 	bl	8003bc6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e88:	d107      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e98:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003e9a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	58000400 	.word	0x58000400

08003ea8 <LL_RCC_GetUSARTClockSource>:
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	401a      	ands	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	041b      	lsls	r3, r3, #16
 8003ec0:	4313      	orrs	r3, r2
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <LL_RCC_GetLPUARTClockSource>:
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ed8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4013      	ands	r3, r2
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e042      	b.n	8003f82 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fd ff40 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2224      	movs	r2, #36	@ 0x24
 8003f18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0201 	bic.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 ff75 	bl	8004e24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fcfe 	bl	800493c <UART_SetConfig>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e01b      	b.n	8003f82 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0201 	orr.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fff3 	bl	8004f66 <UART_CheckIdleState>
 8003f80:	4603      	mov	r3, r0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b08a      	sub	sp, #40	@ 0x28
 8003f8e:	af02      	add	r7, sp, #8
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	603b      	str	r3, [r7, #0]
 8003f96:	4613      	mov	r3, r2
 8003f98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d173      	bne.n	800408c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_UART_Transmit+0x26>
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e06c      	b.n	800408e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2221      	movs	r2, #33	@ 0x21
 8003fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fc4:	f7fe f902 	bl	80021cc <HAL_GetTick>
 8003fc8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	88fa      	ldrh	r2, [r7, #6]
 8003fce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	88fa      	ldrh	r2, [r7, #6]
 8003fd6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fe2:	d108      	bne.n	8003ff6 <HAL_UART_Transmit+0x6c>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	e003      	b.n	8003ffe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ffe:	e02c      	b.n	800405a <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2200      	movs	r2, #0
 8004008:	2180      	movs	r1, #128	@ 0x80
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 fff9 	bl	8005002 <UART_WaitOnFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e039      	b.n	800408e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10b      	bne.n	8004038 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800402e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	3302      	adds	r3, #2
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	e007      	b.n	8004048 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	781a      	ldrb	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	3301      	adds	r3, #1
 8004046:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1cc      	bne.n	8004000 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2200      	movs	r2, #0
 800406e:	2140      	movs	r1, #64	@ 0x40
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 ffc6 	bl	8005002 <UART_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e006      	b.n	800408e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b08a      	sub	sp, #40	@ 0x28
 800409a:	af02      	add	r7, sp, #8
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	603b      	str	r3, [r7, #0]
 80040a2:	4613      	mov	r3, r2
 80040a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	f040 80b1 	bne.w	8004214 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <HAL_UART_Receive+0x28>
 80040b8:	88fb      	ldrh	r3, [r7, #6]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e0a9      	b.n	8004216 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2222      	movs	r2, #34	@ 0x22
 80040ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040d8:	f7fe f878 	bl	80021cc <HAL_GetTick>
 80040dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	88fa      	ldrh	r2, [r7, #6]
 80040e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	88fa      	ldrh	r2, [r7, #6]
 80040ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f6:	d10e      	bne.n	8004116 <HAL_UART_Receive+0x80>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d105      	bne.n	800410c <HAL_UART_Receive+0x76>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004106:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800410a:	e02d      	b.n	8004168 <HAL_UART_Receive+0xd2>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	22ff      	movs	r2, #255	@ 0xff
 8004110:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004114:	e028      	b.n	8004168 <HAL_UART_Receive+0xd2>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10d      	bne.n	800413a <HAL_UART_Receive+0xa4>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d104      	bne.n	8004130 <HAL_UART_Receive+0x9a>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	22ff      	movs	r2, #255	@ 0xff
 800412a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800412e:	e01b      	b.n	8004168 <HAL_UART_Receive+0xd2>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	227f      	movs	r2, #127	@ 0x7f
 8004134:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004138:	e016      	b.n	8004168 <HAL_UART_Receive+0xd2>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004142:	d10d      	bne.n	8004160 <HAL_UART_Receive+0xca>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <HAL_UART_Receive+0xc0>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	227f      	movs	r2, #127	@ 0x7f
 8004150:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004154:	e008      	b.n	8004168 <HAL_UART_Receive+0xd2>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	223f      	movs	r2, #63	@ 0x3f
 800415a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800415e:	e003      	b.n	8004168 <HAL_UART_Receive+0xd2>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800416e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004178:	d108      	bne.n	800418c <HAL_UART_Receive+0xf6>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d104      	bne.n	800418c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	e003      	b.n	8004194 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004194:	e032      	b.n	80041fc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2200      	movs	r2, #0
 800419e:	2120      	movs	r1, #32
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 ff2e 	bl	8005002 <UART_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e032      	b.n	8004216 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10c      	bne.n	80041d0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	b29a      	uxth	r2, r3
 80041be:	8a7b      	ldrh	r3, [r7, #18]
 80041c0:	4013      	ands	r3, r2
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	3302      	adds	r3, #2
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	e00c      	b.n	80041ea <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	8a7b      	ldrh	r3, [r7, #18]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	4013      	ands	r3, r2
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	3301      	adds	r3, #1
 80041e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1c6      	bne.n	8004196 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	e000      	b.n	8004216 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004214:	2302      	movs	r3, #2
  }
}
 8004216:	4618      	mov	r0, r3
 8004218:	3720      	adds	r7, #32
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08a      	sub	sp, #40	@ 0x28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	4613      	mov	r3, r2
 800422c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004234:	2b20      	cmp	r3, #32
 8004236:	d137      	bne.n	80042a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_UART_Receive_IT+0x24>
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e030      	b.n	80042aa <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a18      	ldr	r2, [pc, #96]	@ (80042b4 <HAL_UART_Receive_IT+0x94>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d01f      	beq.n	8004298 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d018      	beq.n	8004298 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	613b      	str	r3, [r7, #16]
   return(result);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800427a:	627b      	str	r3, [r7, #36]	@ 0x24
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	623b      	str	r3, [r7, #32]
 8004286:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	69f9      	ldr	r1, [r7, #28]
 800428a:	6a3a      	ldr	r2, [r7, #32]
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	61bb      	str	r3, [r7, #24]
   return(result);
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e6      	bne.n	8004266 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	461a      	mov	r2, r3
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 ff7e 	bl	80051a0 <UART_Start_Receive_IT>
 80042a4:	4603      	mov	r3, r0
 80042a6:	e000      	b.n	80042aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
  }
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3728      	adds	r7, #40	@ 0x28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40008000 	.word	0x40008000

080042b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b0ba      	sub	sp, #232	@ 0xe8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80042e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80042e6:	4013      	ands	r3, r2
 80042e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80042ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d11b      	bne.n	800432c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d015      	beq.n	800432c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d105      	bne.n	8004318 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800430c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 82e3 	beq.w	80048e8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	4798      	blx	r3
      }
      return;
 800432a:	e2dd      	b.n	80048e8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800432c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8123 	beq.w	800457c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004336:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800433a:	4b8d      	ldr	r3, [pc, #564]	@ (8004570 <HAL_UART_IRQHandler+0x2b8>)
 800433c:	4013      	ands	r3, r2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004342:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004346:	4b8b      	ldr	r3, [pc, #556]	@ (8004574 <HAL_UART_IRQHandler+0x2bc>)
 8004348:	4013      	ands	r3, r2
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 8116 	beq.w	800457c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d011      	beq.n	8004380 <HAL_UART_IRQHandler+0xc8>
 800435c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00b      	beq.n	8004380 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2201      	movs	r2, #1
 800436e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004376:	f043 0201 	orr.w	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d011      	beq.n	80043b0 <HAL_UART_IRQHandler+0xf8>
 800438c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00b      	beq.n	80043b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2202      	movs	r2, #2
 800439e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a6:	f043 0204 	orr.w	r2, r3, #4
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d011      	beq.n	80043e0 <HAL_UART_IRQHandler+0x128>
 80043bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00b      	beq.n	80043e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2204      	movs	r2, #4
 80043ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d6:	f043 0202 	orr.w	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d017      	beq.n	800441c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d105      	bne.n	8004404 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80043f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80043fc:	4b5c      	ldr	r3, [pc, #368]	@ (8004570 <HAL_UART_IRQHandler+0x2b8>)
 80043fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00b      	beq.n	800441c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2208      	movs	r2, #8
 800440a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004412:	f043 0208 	orr.w	r2, r3, #8
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800441c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004424:	2b00      	cmp	r3, #0
 8004426:	d012      	beq.n	800444e <HAL_UART_IRQHandler+0x196>
 8004428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800442c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00c      	beq.n	800444e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800443c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004444:	f043 0220 	orr.w	r2, r3, #32
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 8249 	beq.w	80048ec <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800445a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d013      	beq.n	800448e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b00      	cmp	r3, #0
 8004470:	d105      	bne.n	800447e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004494:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a2:	2b40      	cmp	r3, #64	@ 0x40
 80044a4:	d005      	beq.n	80044b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d054      	beq.n	800455c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 ff94 	bl	80053e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c2:	2b40      	cmp	r3, #64	@ 0x40
 80044c4:	d146      	bne.n	8004554 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3308      	adds	r3, #8
 80044cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80044dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3308      	adds	r3, #8
 80044ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80044fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800450a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1d9      	bne.n	80044c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004518:	2b00      	cmp	r3, #0
 800451a:	d017      	beq.n	800454c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004522:	4a15      	ldr	r2, [pc, #84]	@ (8004578 <HAL_UART_IRQHandler+0x2c0>)
 8004524:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800452c:	4618      	mov	r0, r3
 800452e:	f7fd ffe4 	bl	80024fa <HAL_DMA_Abort_IT>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d019      	beq.n	800456c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004546:	4610      	mov	r0, r2
 8004548:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454a:	e00f      	b.n	800456c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f9e0 	bl	8004912 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004552:	e00b      	b.n	800456c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f9dc 	bl	8004912 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455a:	e007      	b.n	800456c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f9d8 	bl	8004912 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800456a:	e1bf      	b.n	80048ec <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800456c:	bf00      	nop
    return;
 800456e:	e1bd      	b.n	80048ec <HAL_UART_IRQHandler+0x634>
 8004570:	10000001 	.word	0x10000001
 8004574:	04000120 	.word	0x04000120
 8004578:	080054ab 	.word	0x080054ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004580:	2b01      	cmp	r3, #1
 8004582:	f040 8153 	bne.w	800482c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800458a:	f003 0310 	and.w	r3, r3, #16
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 814c 	beq.w	800482c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8145 	beq.w	800482c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2210      	movs	r2, #16
 80045a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b4:	2b40      	cmp	r3, #64	@ 0x40
 80045b6:	f040 80bb 	bne.w	8004730 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 818f 	beq.w	80048f0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80045d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045dc:	429a      	cmp	r2, r3
 80045de:	f080 8187 	bcs.w	80048f0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f040 8087 	bne.w	800470e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004614:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800461c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800462a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800462e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004636:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004642:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1da      	bne.n	8004600 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3308      	adds	r3, #8
 8004650:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800465a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3308      	adds	r3, #8
 800466a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800466e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004672:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004676:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800467a:	e841 2300 	strex	r3, r2, [r1]
 800467e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004680:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1e1      	bne.n	800464a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3308      	adds	r3, #8
 800468c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800469c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3308      	adds	r3, #8
 80046a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e3      	bne.n	8004686 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046dc:	f023 0310 	bic.w	r3, r3, #16
 80046e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e4      	bne.n	80046cc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004708:	4618      	mov	r0, r3
 800470a:	f7fd fe98 	bl	800243e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004720:	b29b      	uxth	r3, r3
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	b29b      	uxth	r3, r3
 8004726:	4619      	mov	r1, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f8fb 	bl	8004924 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800472e:	e0df      	b.n	80048f0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800473c:	b29b      	uxth	r3, r3
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80d1 	beq.w	80048f4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004752:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 80cc 	beq.w	80048f4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800476a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800476c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004770:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800477e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004780:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004784:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004786:	e841 2300 	strex	r3, r2, [r1]
 800478a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800478c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e4      	bne.n	800475c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3308      	adds	r3, #8
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	e853 3f00 	ldrex	r3, [r3]
 80047a0:	623b      	str	r3, [r7, #32]
   return(result);
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3308      	adds	r3, #8
 80047b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80047bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e1      	bne.n	8004792 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0310 	bic.w	r3, r3, #16
 80047f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	69b9      	ldr	r1, [r7, #24]
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	617b      	str	r3, [r7, #20]
   return(result);
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e4      	bne.n	80047e2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800481e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f87d 	bl	8004924 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800482a:	e063      	b.n	80048f4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800482c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004830:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00e      	beq.n	8004856 <HAL_UART_IRQHandler+0x59e>
 8004838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800483c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800484c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f001 fbf1 	bl	8006036 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004854:	e051      	b.n	80048fa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800485a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485e:	2b00      	cmp	r3, #0
 8004860:	d014      	beq.n	800488c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800486e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004872:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800487e:	2b00      	cmp	r3, #0
 8004880:	d03a      	beq.n	80048f8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	4798      	blx	r3
    }
    return;
 800488a:	e035      	b.n	80048f8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800488c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <HAL_UART_IRQHandler+0x5f4>
 8004898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800489c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fe16 	bl	80054d6 <UART_EndTransmit_IT>
    return;
 80048aa:	e026      	b.n	80048fa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80048ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d009      	beq.n	80048cc <HAL_UART_IRQHandler+0x614>
 80048b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f001 fbc8 	bl	800605a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048ca:	e016      	b.n	80048fa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80048cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d010      	beq.n	80048fa <HAL_UART_IRQHandler+0x642>
 80048d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	da0c      	bge.n	80048fa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f001 fbb1 	bl	8006048 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048e6:	e008      	b.n	80048fa <HAL_UART_IRQHandler+0x642>
      return;
 80048e8:	bf00      	nop
 80048ea:	e006      	b.n	80048fa <HAL_UART_IRQHandler+0x642>
    return;
 80048ec:	bf00      	nop
 80048ee:	e004      	b.n	80048fa <HAL_UART_IRQHandler+0x642>
      return;
 80048f0:	bf00      	nop
 80048f2:	e002      	b.n	80048fa <HAL_UART_IRQHandler+0x642>
      return;
 80048f4:	bf00      	nop
 80048f6:	e000      	b.n	80048fa <HAL_UART_IRQHandler+0x642>
    return;
 80048f8:	bf00      	nop
  }
}
 80048fa:	37e8      	adds	r7, #232	@ 0xe8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr

08004912 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr
	...

0800493c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800493c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004940:	b08c      	sub	sp, #48	@ 0x30
 8004942:	af00      	add	r7, sp, #0
 8004944:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	431a      	orrs	r2, r3
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	431a      	orrs	r2, r3
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	4313      	orrs	r3, r2
 8004962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b94      	ldr	r3, [pc, #592]	@ (8004bbc <UART_SetConfig+0x280>)
 800496c:	4013      	ands	r3, r2
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	6812      	ldr	r2, [r2, #0]
 8004972:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004974:	430b      	orrs	r3, r1
 8004976:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a89      	ldr	r2, [pc, #548]	@ (8004bc0 <UART_SetConfig+0x284>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d004      	beq.n	80049a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049a4:	4313      	orrs	r3, r2
 80049a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80049b2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	6812      	ldr	r2, [r2, #0]
 80049ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049bc:	430b      	orrs	r3, r1
 80049be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c6:	f023 010f 	bic.w	r1, r3, #15
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a7a      	ldr	r2, [pc, #488]	@ (8004bc4 <UART_SetConfig+0x288>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d127      	bne.n	8004a30 <UART_SetConfig+0xf4>
 80049e0:	2003      	movs	r0, #3
 80049e2:	f7ff fa61 	bl	8003ea8 <LL_RCC_GetUSARTClockSource>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d81b      	bhi.n	8004a28 <UART_SetConfig+0xec>
 80049f0:	a201      	add	r2, pc, #4	@ (adr r2, 80049f8 <UART_SetConfig+0xbc>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a09 	.word	0x08004a09
 80049fc:	08004a19 	.word	0x08004a19
 8004a00:	08004a11 	.word	0x08004a11
 8004a04:	08004a21 	.word	0x08004a21
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a0e:	e080      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a10:	2302      	movs	r3, #2
 8004a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a16:	e07c      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a1e:	e078      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a20:	2308      	movs	r3, #8
 8004a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a26:	e074      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a28:	2310      	movs	r3, #16
 8004a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a2e:	e070      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a64      	ldr	r2, [pc, #400]	@ (8004bc8 <UART_SetConfig+0x28c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d138      	bne.n	8004aac <UART_SetConfig+0x170>
 8004a3a:	200c      	movs	r0, #12
 8004a3c:	f7ff fa34 	bl	8003ea8 <LL_RCC_GetUSARTClockSource>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8004a46:	2b0c      	cmp	r3, #12
 8004a48:	d82c      	bhi.n	8004aa4 <UART_SetConfig+0x168>
 8004a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a50 <UART_SetConfig+0x114>)
 8004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a50:	08004a85 	.word	0x08004a85
 8004a54:	08004aa5 	.word	0x08004aa5
 8004a58:	08004aa5 	.word	0x08004aa5
 8004a5c:	08004aa5 	.word	0x08004aa5
 8004a60:	08004a95 	.word	0x08004a95
 8004a64:	08004aa5 	.word	0x08004aa5
 8004a68:	08004aa5 	.word	0x08004aa5
 8004a6c:	08004aa5 	.word	0x08004aa5
 8004a70:	08004a8d 	.word	0x08004a8d
 8004a74:	08004aa5 	.word	0x08004aa5
 8004a78:	08004aa5 	.word	0x08004aa5
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	08004a9d 	.word	0x08004a9d
 8004a84:	2300      	movs	r3, #0
 8004a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a8a:	e042      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a92:	e03e      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a94:	2304      	movs	r3, #4
 8004a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a9a:	e03a      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aa2:	e036      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aaa:	e032      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a43      	ldr	r2, [pc, #268]	@ (8004bc0 <UART_SetConfig+0x284>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d12a      	bne.n	8004b0c <UART_SetConfig+0x1d0>
 8004ab6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004aba:	f7ff fa07 	bl	8003ecc <LL_RCC_GetLPUARTClockSource>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ac4:	d01a      	beq.n	8004afc <UART_SetConfig+0x1c0>
 8004ac6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004aca:	d81b      	bhi.n	8004b04 <UART_SetConfig+0x1c8>
 8004acc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ad0:	d00c      	beq.n	8004aec <UART_SetConfig+0x1b0>
 8004ad2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ad6:	d815      	bhi.n	8004b04 <UART_SetConfig+0x1c8>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <UART_SetConfig+0x1a8>
 8004adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ae0:	d008      	beq.n	8004af4 <UART_SetConfig+0x1b8>
 8004ae2:	e00f      	b.n	8004b04 <UART_SetConfig+0x1c8>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aea:	e012      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004aec:	2302      	movs	r3, #2
 8004aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004af2:	e00e      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004af4:	2304      	movs	r3, #4
 8004af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004afa:	e00a      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004afc:	2308      	movs	r3, #8
 8004afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b02:	e006      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004b04:	2310      	movs	r3, #16
 8004b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b0a:	e002      	b.n	8004b12 <UART_SetConfig+0x1d6>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2a      	ldr	r2, [pc, #168]	@ (8004bc0 <UART_SetConfig+0x284>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	f040 80a4 	bne.w	8004c66 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d823      	bhi.n	8004b6e <UART_SetConfig+0x232>
 8004b26:	a201      	add	r2, pc, #4	@ (adr r2, 8004b2c <UART_SetConfig+0x1f0>)
 8004b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2c:	08004b51 	.word	0x08004b51
 8004b30:	08004b6f 	.word	0x08004b6f
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b6f 	.word	0x08004b6f
 8004b3c:	08004b5f 	.word	0x08004b5f
 8004b40:	08004b6f 	.word	0x08004b6f
 8004b44:	08004b6f 	.word	0x08004b6f
 8004b48:	08004b6f 	.word	0x08004b6f
 8004b4c:	08004b67 	.word	0x08004b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b50:	f7fe fec6 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 8004b54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b56:	e010      	b.n	8004b7a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b58:	4b1c      	ldr	r3, [pc, #112]	@ (8004bcc <UART_SetConfig+0x290>)
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b5c:	e00d      	b.n	8004b7a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b5e:	f7fe fe0b 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8004b62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b64:	e009      	b.n	8004b7a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b6c:	e005      	b.n	8004b7a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8137 	beq.w	8004df0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	4a12      	ldr	r2, [pc, #72]	@ (8004bd0 <UART_SetConfig+0x294>)
 8004b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	4413      	add	r3, r2
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d305      	bcc.n	8004bb2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d910      	bls.n	8004bd4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004bb8:	e11a      	b.n	8004df0 <UART_SetConfig+0x4b4>
 8004bba:	bf00      	nop
 8004bbc:	cfff69f3 	.word	0xcfff69f3
 8004bc0:	40008000 	.word	0x40008000
 8004bc4:	40013800 	.word	0x40013800
 8004bc8:	40004400 	.word	0x40004400
 8004bcc:	00f42400 	.word	0x00f42400
 8004bd0:	0800b480 	.word	0x0800b480
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	60fa      	str	r2, [r7, #12]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be0:	4a8e      	ldr	r2, [pc, #568]	@ (8004e1c <UART_SetConfig+0x4e0>)
 8004be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2200      	movs	r2, #0
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bf6:	f7fc fa7d 	bl	80010f4 <__aeabi_uldivmod>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4610      	mov	r0, r2
 8004c00:	4619      	mov	r1, r3
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	020b      	lsls	r3, r1, #8
 8004c0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c10:	0202      	lsls	r2, r0, #8
 8004c12:	6979      	ldr	r1, [r7, #20]
 8004c14:	6849      	ldr	r1, [r1, #4]
 8004c16:	0849      	lsrs	r1, r1, #1
 8004c18:	2000      	movs	r0, #0
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	4605      	mov	r5, r0
 8004c1e:	eb12 0804 	adds.w	r8, r2, r4
 8004c22:	eb43 0905 	adc.w	r9, r3, r5
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	469a      	mov	sl, r3
 8004c2e:	4693      	mov	fp, r2
 8004c30:	4652      	mov	r2, sl
 8004c32:	465b      	mov	r3, fp
 8004c34:	4640      	mov	r0, r8
 8004c36:	4649      	mov	r1, r9
 8004c38:	f7fc fa5c 	bl	80010f4 <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4613      	mov	r3, r2
 8004c42:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c4a:	d308      	bcc.n	8004c5e <UART_SetConfig+0x322>
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c52:	d204      	bcs.n	8004c5e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6a3a      	ldr	r2, [r7, #32]
 8004c5a:	60da      	str	r2, [r3, #12]
 8004c5c:	e0c8      	b.n	8004df0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c64:	e0c4      	b.n	8004df0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c6e:	d167      	bne.n	8004d40 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004c70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d828      	bhi.n	8004cca <UART_SetConfig+0x38e>
 8004c78:	a201      	add	r2, pc, #4	@ (adr r2, 8004c80 <UART_SetConfig+0x344>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004ca5 	.word	0x08004ca5
 8004c84:	08004cad 	.word	0x08004cad
 8004c88:	08004cb5 	.word	0x08004cb5
 8004c8c:	08004ccb 	.word	0x08004ccb
 8004c90:	08004cbb 	.word	0x08004cbb
 8004c94:	08004ccb 	.word	0x08004ccb
 8004c98:	08004ccb 	.word	0x08004ccb
 8004c9c:	08004ccb 	.word	0x08004ccb
 8004ca0:	08004cc3 	.word	0x08004cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca4:	f7fe fe1c 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 8004ca8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004caa:	e014      	b.n	8004cd6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cac:	f7fe fe2a 	bl	8003904 <HAL_RCC_GetPCLK2Freq>
 8004cb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cb2:	e010      	b.n	8004cd6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb4:	4b5a      	ldr	r3, [pc, #360]	@ (8004e20 <UART_SetConfig+0x4e4>)
 8004cb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cb8:	e00d      	b.n	8004cd6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cba:	f7fe fd5d 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8004cbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cc0:	e009      	b.n	8004cd6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cc8:	e005      	b.n	8004cd6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004cd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8089 	beq.w	8004df0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce2:	4a4e      	ldr	r2, [pc, #312]	@ (8004e1c <UART_SetConfig+0x4e0>)
 8004ce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cf0:	005a      	lsls	r2, r3, #1
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	085b      	lsrs	r3, r3, #1
 8004cf8:	441a      	add	r2, r3
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	2b0f      	cmp	r3, #15
 8004d08:	d916      	bls.n	8004d38 <UART_SetConfig+0x3fc>
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d10:	d212      	bcs.n	8004d38 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	f023 030f 	bic.w	r3, r3, #15
 8004d1a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	085b      	lsrs	r3, r3, #1
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	8bfb      	ldrh	r3, [r7, #30]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	8bfa      	ldrh	r2, [r7, #30]
 8004d34:	60da      	str	r2, [r3, #12]
 8004d36:	e05b      	b.n	8004df0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d3e:	e057      	b.n	8004df0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d40:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d828      	bhi.n	8004d9a <UART_SetConfig+0x45e>
 8004d48:	a201      	add	r2, pc, #4	@ (adr r2, 8004d50 <UART_SetConfig+0x414>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004d75 	.word	0x08004d75
 8004d54:	08004d7d 	.word	0x08004d7d
 8004d58:	08004d85 	.word	0x08004d85
 8004d5c:	08004d9b 	.word	0x08004d9b
 8004d60:	08004d8b 	.word	0x08004d8b
 8004d64:	08004d9b 	.word	0x08004d9b
 8004d68:	08004d9b 	.word	0x08004d9b
 8004d6c:	08004d9b 	.word	0x08004d9b
 8004d70:	08004d93 	.word	0x08004d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d74:	f7fe fdb4 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 8004d78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d7a:	e014      	b.n	8004da6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d7c:	f7fe fdc2 	bl	8003904 <HAL_RCC_GetPCLK2Freq>
 8004d80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d82:	e010      	b.n	8004da6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d84:	4b26      	ldr	r3, [pc, #152]	@ (8004e20 <UART_SetConfig+0x4e4>)
 8004d86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d88:	e00d      	b.n	8004da6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d8a:	f7fe fcf5 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8004d8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d90:	e009      	b.n	8004da6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d98:	e005      	b.n	8004da6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004da4:	bf00      	nop
    }

    if (pclk != 0U)
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d021      	beq.n	8004df0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	4a1a      	ldr	r2, [pc, #104]	@ (8004e1c <UART_SetConfig+0x4e0>)
 8004db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004db6:	461a      	mov	r2, r3
 8004db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dba:	fbb3 f2f2 	udiv	r2, r3, r2
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	441a      	add	r2, r3
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	2b0f      	cmp	r3, #15
 8004dd4:	d909      	bls.n	8004dea <UART_SetConfig+0x4ae>
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ddc:	d205      	bcs.n	8004dea <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60da      	str	r2, [r3, #12]
 8004de8:	e002      	b.n	8004df0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2200      	movs	r2, #0
 8004e04:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004e0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3730      	adds	r7, #48	@ 0x30
 8004e14:	46bd      	mov	sp, r7
 8004e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1a:	bf00      	nop
 8004e1c:	0800b480 	.word	0x0800b480
 8004e20:	00f42400 	.word	0x00f42400

08004e24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01a      	beq.n	8004f3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f22:	d10a      	bne.n	8004f3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr

08004f66 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b086      	sub	sp, #24
 8004f6a:	af02      	add	r7, sp, #8
 8004f6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f76:	f7fd f929 	bl	80021cc <HAL_GetTick>
 8004f7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d10e      	bne.n	8004fa8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f832 	bl	8005002 <UART_WaitOnFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e028      	b.n	8004ffa <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d10e      	bne.n	8004fd4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f81c 	bl	8005002 <UART_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e012      	b.n	8004ffa <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b09c      	sub	sp, #112	@ 0x70
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	603b      	str	r3, [r7, #0]
 800500e:	4613      	mov	r3, r2
 8005010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005012:	e0af      	b.n	8005174 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005014:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501a:	f000 80ab 	beq.w	8005174 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501e:	f7fd f8d5 	bl	80021cc <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800502a:	429a      	cmp	r2, r3
 800502c:	d302      	bcc.n	8005034 <UART_WaitOnFlagUntilTimeout+0x32>
 800502e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005030:	2b00      	cmp	r3, #0
 8005032:	d140      	bne.n	80050b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800503c:	e853 3f00 	ldrex	r3, [r3]
 8005040:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005044:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005048:	667b      	str	r3, [r7, #100]	@ 0x64
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005052:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005054:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005056:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005058:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800505a:	e841 2300 	strex	r3, r2, [r1]
 800505e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1e6      	bne.n	8005034 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	663b      	str	r3, [r7, #96]	@ 0x60
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3308      	adds	r3, #8
 8005084:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005086:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005088:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800508c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e5      	bne.n	8005066 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e06f      	b.n	8005196 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d057      	beq.n	8005174 <UART_WaitOnFlagUntilTimeout+0x172>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b80      	cmp	r3, #128	@ 0x80
 80050c8:	d054      	beq.n	8005174 <UART_WaitOnFlagUntilTimeout+0x172>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b40      	cmp	r3, #64	@ 0x40
 80050ce:	d051      	beq.n	8005174 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050de:	d149      	bne.n	8005174 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fa:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80050fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005108:	637b      	str	r3, [r7, #52]	@ 0x34
 800510a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800510e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e6      	bne.n	80050ea <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3308      	adds	r3, #8
 8005122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	e853 3f00 	ldrex	r3, [r3]
 800512a:	613b      	str	r3, [r7, #16]
   return(result);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f023 0301 	bic.w	r3, r3, #1
 8005132:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3308      	adds	r3, #8
 800513a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800513c:	623a      	str	r2, [r7, #32]
 800513e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	69f9      	ldr	r1, [r7, #28]
 8005142:	6a3a      	ldr	r2, [r7, #32]
 8005144:	e841 2300 	strex	r3, r2, [r1]
 8005148:	61bb      	str	r3, [r7, #24]
   return(result);
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1e5      	bne.n	800511c <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e010      	b.n	8005196 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4013      	ands	r3, r2
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	429a      	cmp	r2, r3
 8005182:	bf0c      	ite	eq
 8005184:	2301      	moveq	r3, #1
 8005186:	2300      	movne	r3, #0
 8005188:	b2db      	uxtb	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	429a      	cmp	r2, r3
 8005190:	f43f af40 	beq.w	8005014 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3770      	adds	r7, #112	@ 0x70
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b0a3      	sub	sp, #140	@ 0x8c
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	4613      	mov	r3, r2
 80051ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	88fa      	ldrh	r2, [r7, #6]
 80051b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d2:	d10e      	bne.n	80051f2 <UART_Start_Receive_IT+0x52>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <UART_Start_Receive_IT+0x48>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80051e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80051e6:	e02d      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	22ff      	movs	r2, #255	@ 0xff
 80051ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80051f0:	e028      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10d      	bne.n	8005216 <UART_Start_Receive_IT+0x76>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d104      	bne.n	800520c <UART_Start_Receive_IT+0x6c>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	22ff      	movs	r2, #255	@ 0xff
 8005206:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800520a:	e01b      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	227f      	movs	r2, #127	@ 0x7f
 8005210:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005214:	e016      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800521e:	d10d      	bne.n	800523c <UART_Start_Receive_IT+0x9c>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d104      	bne.n	8005232 <UART_Start_Receive_IT+0x92>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	227f      	movs	r2, #127	@ 0x7f
 800522c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005230:	e008      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	223f      	movs	r2, #63	@ 0x3f
 8005236:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800523a:	e003      	b.n	8005244 <UART_Start_Receive_IT+0xa4>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2222      	movs	r2, #34	@ 0x22
 8005250:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3308      	adds	r3, #8
 800525a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800525e:	e853 3f00 	ldrex	r3, [r3]
 8005262:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005264:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3308      	adds	r3, #8
 8005274:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005278:	673a      	str	r2, [r7, #112]	@ 0x70
 800527a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800527e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005286:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e3      	bne.n	8005254 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005294:	d14f      	bne.n	8005336 <UART_Start_Receive_IT+0x196>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800529c:	88fa      	ldrh	r2, [r7, #6]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d349      	bcc.n	8005336 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052aa:	d107      	bne.n	80052bc <UART_Start_Receive_IT+0x11c>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d103      	bne.n	80052bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4a46      	ldr	r2, [pc, #280]	@ (80053d0 <UART_Start_Receive_IT+0x230>)
 80052b8:	675a      	str	r2, [r3, #116]	@ 0x74
 80052ba:	e002      	b.n	80052c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a45      	ldr	r2, [pc, #276]	@ (80053d4 <UART_Start_Receive_IT+0x234>)
 80052c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01a      	beq.n	8005300 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80052d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052ee:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80052f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80052fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e4      	bne.n	80052ca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3308      	adds	r3, #8
 8005306:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005316:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005320:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005322:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800532e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e5      	bne.n	8005300 <UART_Start_Receive_IT+0x160>
 8005334:	e046      	b.n	80053c4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800533e:	d107      	bne.n	8005350 <UART_Start_Receive_IT+0x1b0>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d103      	bne.n	8005350 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4a23      	ldr	r2, [pc, #140]	@ (80053d8 <UART_Start_Receive_IT+0x238>)
 800534c:	675a      	str	r2, [r3, #116]	@ 0x74
 800534e:	e002      	b.n	8005356 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a22      	ldr	r2, [pc, #136]	@ (80053dc <UART_Start_Receive_IT+0x23c>)
 8005354:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d019      	beq.n	8005392 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005372:	677b      	str	r3, [r7, #116]	@ 0x74
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800537c:	637b      	str	r3, [r7, #52]	@ 0x34
 800537e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005382:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800538a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e6      	bne.n	800535e <UART_Start_Receive_IT+0x1be>
 8005390:	e018      	b.n	80053c4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	613b      	str	r3, [r7, #16]
   return(result);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f043 0320 	orr.w	r3, r3, #32
 80053a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053b0:	623b      	str	r3, [r7, #32]
 80053b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	69f9      	ldr	r1, [r7, #28]
 80053b6:	6a3a      	ldr	r2, [r7, #32]
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e6      	bne.n	8005392 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	378c      	adds	r7, #140	@ 0x8c
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr
 80053d0:	08005bfd 	.word	0x08005bfd
 80053d4:	0800589d 	.word	0x0800589d
 80053d8:	080056e5 	.word	0x080056e5
 80053dc:	0800552d 	.word	0x0800552d

080053e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b095      	sub	sp, #84	@ 0x54
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005406:	643b      	str	r3, [r7, #64]	@ 0x40
 8005408:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800540c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e6      	bne.n	80053e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3308      	adds	r3, #8
 8005420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	61fb      	str	r3, [r7, #28]
   return(result);
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005430:	f023 0301 	bic.w	r3, r3, #1
 8005434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3308      	adds	r3, #8
 800543c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800543e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005440:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e3      	bne.n	800541a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005456:	2b01      	cmp	r3, #1
 8005458:	d118      	bne.n	800548c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	e853 3f00 	ldrex	r3, [r3]
 8005466:	60bb      	str	r3, [r7, #8]
   return(result);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f023 0310 	bic.w	r3, r3, #16
 800546e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	6979      	ldr	r1, [r7, #20]
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	e841 2300 	strex	r3, r2, [r1]
 8005484:	613b      	str	r3, [r7, #16]
   return(result);
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1e6      	bne.n	800545a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2220      	movs	r2, #32
 8005490:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80054a0:	bf00      	nop
 80054a2:	3754      	adds	r7, #84	@ 0x54
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr

080054aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f7ff fa22 	bl	8004912 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ce:	bf00      	nop
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b088      	sub	sp, #32
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054f2:	61fb      	str	r3, [r7, #28]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6979      	ldr	r1, [r7, #20]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	613b      	str	r3, [r7, #16]
   return(result);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e6      	bne.n	80054de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff f9ee 	bl	8004900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005524:	bf00      	nop
 8005526:	3720      	adds	r7, #32
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b09c      	sub	sp, #112	@ 0x70
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800553a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005544:	2b22      	cmp	r3, #34	@ 0x22
 8005546:	f040 80be 	bne.w	80056c6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005550:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005554:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005558:	b2d9      	uxtb	r1, r3
 800555a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800555e:	b2da      	uxtb	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005564:	400a      	ands	r2, r1
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800557a:	b29b      	uxth	r3, r3
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800558c:	b29b      	uxth	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	f040 80a1 	bne.w	80056d6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e6      	bne.n	8005594 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3308      	adds	r3, #8
 80055cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d8:	f023 0301 	bic.w	r3, r3, #1
 80055dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3308      	adds	r3, #8
 80055e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80055e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e5      	bne.n	80055c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a33      	ldr	r2, [pc, #204]	@ (80056e0 <UART_RxISR_8BIT+0x1b4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d01f      	beq.n	8005658 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d018      	beq.n	8005658 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	e853 3f00 	ldrex	r3, [r3]
 8005632:	623b      	str	r3, [r7, #32]
   return(result);
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800563a:	663b      	str	r3, [r7, #96]	@ 0x60
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005644:	633b      	str	r3, [r7, #48]	@ 0x30
 8005646:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800564a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e6      	bne.n	8005626 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800565c:	2b01      	cmp	r3, #1
 800565e:	d12e      	bne.n	80056be <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	60fb      	str	r3, [r7, #12]
   return(result);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0310 	bic.w	r3, r3, #16
 800567a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005684:	61fb      	str	r3, [r7, #28]
 8005686:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	69b9      	ldr	r1, [r7, #24]
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	617b      	str	r3, [r7, #20]
   return(result);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e6      	bne.n	8005666 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f003 0310 	and.w	r3, r3, #16
 80056a2:	2b10      	cmp	r3, #16
 80056a4:	d103      	bne.n	80056ae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2210      	movs	r2, #16
 80056ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff f934 	bl	8004924 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056bc:	e00b      	b.n	80056d6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fc f98a 	bl	80019d8 <HAL_UART_RxCpltCallback>
}
 80056c4:	e007      	b.n	80056d6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	699a      	ldr	r2, [r3, #24]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f042 0208 	orr.w	r2, r2, #8
 80056d4:	619a      	str	r2, [r3, #24]
}
 80056d6:	bf00      	nop
 80056d8:	3770      	adds	r7, #112	@ 0x70
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40008000 	.word	0x40008000

080056e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b09c      	sub	sp, #112	@ 0x70
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80056f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056fc:	2b22      	cmp	r3, #34	@ 0x22
 80056fe:	f040 80be 	bne.w	800587e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005708:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005710:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005712:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005716:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800571a:	4013      	ands	r3, r2
 800571c:	b29a      	uxth	r2, r3
 800571e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005720:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005726:	1c9a      	adds	r2, r3, #2
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	f040 80a1 	bne.w	800588e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800575a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800575c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005760:	667b      	str	r3, [r7, #100]	@ 0x64
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800576a:	657b      	str	r3, [r7, #84]	@ 0x54
 800576c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005770:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005772:	e841 2300 	strex	r3, r2, [r1]
 8005776:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1e6      	bne.n	800574c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3308      	adds	r3, #8
 8005784:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005790:	f023 0301 	bic.w	r3, r3, #1
 8005794:	663b      	str	r3, [r7, #96]	@ 0x60
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3308      	adds	r3, #8
 800579c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800579e:	643a      	str	r2, [r7, #64]	@ 0x40
 80057a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e5      	bne.n	800577e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a33      	ldr	r2, [pc, #204]	@ (8005898 <UART_RxISR_16BIT+0x1b4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d01f      	beq.n	8005810 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d018      	beq.n	8005810 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057fe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800580a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e6      	bne.n	80057de <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005814:	2b01      	cmp	r3, #1
 8005816:	d12e      	bne.n	8005876 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	60bb      	str	r3, [r7, #8]
   return(result);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f023 0310 	bic.w	r3, r3, #16
 8005832:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	461a      	mov	r2, r3
 800583a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6979      	ldr	r1, [r7, #20]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	613b      	str	r3, [r7, #16]
   return(result);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e6      	bne.n	800581e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	f003 0310 	and.w	r3, r3, #16
 800585a:	2b10      	cmp	r3, #16
 800585c:	d103      	bne.n	8005866 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2210      	movs	r2, #16
 8005864:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff f858 	bl	8004924 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005874:	e00b      	b.n	800588e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fc f8ae 	bl	80019d8 <HAL_UART_RxCpltCallback>
}
 800587c:	e007      	b.n	800588e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699a      	ldr	r2, [r3, #24]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0208 	orr.w	r2, r2, #8
 800588c:	619a      	str	r2, [r3, #24]
}
 800588e:	bf00      	nop
 8005890:	3770      	adds	r7, #112	@ 0x70
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40008000 	.word	0x40008000

0800589c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b0ac      	sub	sp, #176	@ 0xb0
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80058aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058d2:	2b22      	cmp	r3, #34	@ 0x22
 80058d4:	f040 8182 	bne.w	8005bdc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80058de:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80058e2:	e125      	b.n	8005b30 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ea:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058ee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80058f2:	b2d9      	uxtb	r1, r3
 80058f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fe:	400a      	ands	r2, r1
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800592a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	2b00      	cmp	r3, #0
 8005934:	d053      	beq.n	80059de <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d011      	beq.n	8005966 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005942:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2201      	movs	r2, #1
 8005954:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800595c:	f043 0201 	orr.w	r2, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d011      	beq.n	8005996 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00b      	beq.n	8005996 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2202      	movs	r2, #2
 8005984:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800598c:	f043 0204 	orr.w	r2, r3, #4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d011      	beq.n	80059c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80059a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2204      	movs	r2, #4
 80059b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059bc:	f043 0202 	orr.w	r2, r3, #2
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d006      	beq.n	80059de <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fe ff9e 	bl	8004912 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f040 80a2 	bne.w	8005b30 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80059fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a10:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005a14:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005a1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1e4      	bne.n	80059ec <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3308      	adds	r3, #8
 8005a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005a32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a4a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005a4c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005a50:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005a58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e1      	bne.n	8005a22 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a5f      	ldr	r2, [pc, #380]	@ (8005bf4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d021      	beq.n	8005ac0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d01a      	beq.n	8005ac0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a92:	e853 3f00 	ldrex	r3, [r3]
 8005a96:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005aac:	657b      	str	r3, [r7, #84]	@ 0x54
 8005aae:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ab2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e4      	bne.n	8005a8a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d130      	bne.n	8005b2a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ade:	f023 0310 	bic.w	r3, r3, #16
 8005ae2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005af0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005af2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005af6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e4      	bne.n	8005ace <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b10      	cmp	r3, #16
 8005b10:	d103      	bne.n	8005b1a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2210      	movs	r2, #16
 8005b18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fe fefe 	bl	8004924 <HAL_UARTEx_RxEventCallback>
 8005b28:	e002      	b.n	8005b30 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fb ff54 	bl	80019d8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b30:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d006      	beq.n	8005b46 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005b38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f47f aecf 	bne.w	80058e4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b4c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005b50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d049      	beq.n	8005bec <UART_RxISR_8BIT_FIFOEN+0x350>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005b5e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d242      	bcs.n	8005bec <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3308      	adds	r3, #8
 8005b86:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005b8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e3      	bne.n	8005b66 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a15      	ldr	r2, [pc, #84]	@ (8005bf8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005ba2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f043 0320 	orr.w	r3, r3, #32
 8005bb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6979      	ldr	r1, [r7, #20]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e4      	bne.n	8005ba4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bda:	e007      	b.n	8005bec <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0208 	orr.w	r2, r2, #8
 8005bea:	619a      	str	r2, [r3, #24]
}
 8005bec:	bf00      	nop
 8005bee:	37b0      	adds	r7, #176	@ 0xb0
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	40008000 	.word	0x40008000
 8005bf8:	0800552d 	.word	0x0800552d

08005bfc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b0ae      	sub	sp, #184	@ 0xb8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005c0a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c32:	2b22      	cmp	r3, #34	@ 0x22
 8005c34:	f040 8186 	bne.w	8005f44 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005c3e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c42:	e129      	b.n	8005e98 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005c56:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8005c5a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005c5e:	4013      	ands	r3, r2
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c6c:	1c9a      	adds	r2, r3, #2
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005c8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d053      	beq.n	8005d42 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d011      	beq.n	8005cca <UART_RxISR_16BIT_FIFOEN+0xce>
 8005ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00b      	beq.n	8005cca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc0:	f043 0201 	orr.w	r2, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d011      	beq.n	8005cfa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005cd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf0:	f043 0204 	orr.w	r2, r3, #4
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d011      	beq.n	8005d2a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005d06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00b      	beq.n	8005d2a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2204      	movs	r2, #4
 8005d18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d20:	f043 0202 	orr.w	r2, r3, #2
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d006      	beq.n	8005d42 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7fe fdec 	bl	8004912 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f040 80a4 	bne.w	8005e98 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d76:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e2      	bne.n	8005d50 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3308      	adds	r3, #8
 8005d90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005da0:	f023 0301 	bic.w	r3, r3, #1
 8005da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3308      	adds	r3, #8
 8005dae:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005db2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005db4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005db8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e1      	bne.n	8005d8a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a5f      	ldr	r2, [pc, #380]	@ (8005f5c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d021      	beq.n	8005e28 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d01a      	beq.n	8005e28 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e16:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e4      	bne.n	8005df2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d130      	bne.n	8005e92 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e46:	f023 0310 	bic.w	r3, r3, #16
 8005e4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e4      	bne.n	8005e36 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	2b10      	cmp	r3, #16
 8005e78:	d103      	bne.n	8005e82 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2210      	movs	r2, #16
 8005e80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fe fd4a 	bl	8004924 <HAL_UARTEx_RxEventCallback>
 8005e90:	e002      	b.n	8005e98 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fb fda0 	bl	80019d8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e98:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d006      	beq.n	8005eae <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005ea0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f47f aecb 	bne.w	8005c44 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005eb4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005eb8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d049      	beq.n	8005f54 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005ec6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d242      	bcs.n	8005f54 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3308      	adds	r3, #8
 8005eee:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005ef2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e3      	bne.n	8005ece <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a15      	ldr	r2, [pc, #84]	@ (8005f60 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005f0a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f043 0320 	orr.w	r3, r3, #32
 8005f20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f2e:	61fb      	str	r3, [r7, #28]
 8005f30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	69b9      	ldr	r1, [r7, #24]
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e4      	bne.n	8005f0c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f42:	e007      	b.n	8005f54 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699a      	ldr	r2, [r3, #24]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0208 	orr.w	r2, r2, #8
 8005f52:	619a      	str	r2, [r3, #24]
}
 8005f54:	bf00      	nop
 8005f56:	37b8      	adds	r7, #184	@ 0xb8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	40008000 	.word	0x40008000
 8005f60:	080056e5 	.word	0x080056e5

08005f64 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e058      	b.n	800602e <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7fb ff00 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2224      	movs	r2, #36	@ 0x24
 8005f98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0201 	bic.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7fe ff35 	bl	8004e24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f7fe fcbe 	bl	800493c <UART_SetConfig>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e031      	b.n	800602e <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fd8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	055b      	lsls	r3, r3, #21
 8005ff2:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	041b      	lsls	r3, r3, #16
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8006008:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	6812      	ldr	r2, [r2, #0]
 8006010:	6979      	ldr	r1, [r7, #20]
 8006012:	430b      	orrs	r3, r1
 8006014:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0201 	orr.w	r2, r2, #1
 8006024:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7fe ff9d 	bl	8004f66 <UART_CheckIdleState>
 800602c:	4603      	mov	r3, r0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	4770      	bx	lr

08006048 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr

0800605a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	bc80      	pop	{r7}
 800606a:	4770      	bx	lr

0800606c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800607a:	2b01      	cmp	r3, #1
 800607c:	d101      	bne.n	8006082 <HAL_UARTEx_DisableFifoMode+0x16>
 800607e:	2302      	movs	r3, #2
 8006080:	e027      	b.n	80060d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2224      	movs	r2, #36	@ 0x24
 800608e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0201 	bic.w	r2, r2, #1
 80060a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80060b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr

080060dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e02d      	b.n	8006150 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2224      	movs	r2, #36	@ 0x24
 8006100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0201 	bic.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f84f 	bl	80061d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2220      	movs	r2, #32
 8006142:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800616c:	2302      	movs	r3, #2
 800616e:	e02d      	b.n	80061cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2224      	movs	r2, #36	@ 0x24
 800617c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0201 	bic.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f811 	bl	80061d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d108      	bne.n	80061f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061f4:	e031      	b.n	800625a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061f6:	2308      	movs	r3, #8
 80061f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061fa:	2308      	movs	r3, #8
 80061fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	0e5b      	lsrs	r3, r3, #25
 8006206:	b2db      	uxtb	r3, r3
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	0f5b      	lsrs	r3, r3, #29
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	7b3a      	ldrb	r2, [r7, #12]
 8006222:	4910      	ldr	r1, [pc, #64]	@ (8006264 <UARTEx_SetNbDataToProcess+0x90>)
 8006224:	5c8a      	ldrb	r2, [r1, r2]
 8006226:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800622a:	7b3a      	ldrb	r2, [r7, #12]
 800622c:	490e      	ldr	r1, [pc, #56]	@ (8006268 <UARTEx_SetNbDataToProcess+0x94>)
 800622e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006230:	fb93 f3f2 	sdiv	r3, r3, r2
 8006234:	b29a      	uxth	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	7b7a      	ldrb	r2, [r7, #13]
 8006240:	4908      	ldr	r1, [pc, #32]	@ (8006264 <UARTEx_SetNbDataToProcess+0x90>)
 8006242:	5c8a      	ldrb	r2, [r1, r2]
 8006244:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006248:	7b7a      	ldrb	r2, [r7, #13]
 800624a:	4907      	ldr	r1, [pc, #28]	@ (8006268 <UARTEx_SetNbDataToProcess+0x94>)
 800624c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800624e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006252:	b29a      	uxth	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800625a:	bf00      	nop
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr
 8006264:	0800b498 	.word	0x0800b498
 8006268:	0800b4a0 	.word	0x0800b4a0

0800626c <__cvt>:
 800626c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006270:	b088      	sub	sp, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	461d      	mov	r5, r3
 8006276:	4614      	mov	r4, r2
 8006278:	bfbc      	itt	lt
 800627a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800627e:	4614      	movlt	r4, r2
 8006280:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006282:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006284:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006288:	bfb6      	itet	lt
 800628a:	461d      	movlt	r5, r3
 800628c:	2300      	movge	r3, #0
 800628e:	232d      	movlt	r3, #45	@ 0x2d
 8006290:	7013      	strb	r3, [r2, #0]
 8006292:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006294:	f023 0820 	bic.w	r8, r3, #32
 8006298:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800629c:	d005      	beq.n	80062aa <__cvt+0x3e>
 800629e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80062a2:	d100      	bne.n	80062a6 <__cvt+0x3a>
 80062a4:	3601      	adds	r6, #1
 80062a6:	2302      	movs	r3, #2
 80062a8:	e000      	b.n	80062ac <__cvt+0x40>
 80062aa:	2303      	movs	r3, #3
 80062ac:	aa07      	add	r2, sp, #28
 80062ae:	9204      	str	r2, [sp, #16]
 80062b0:	aa06      	add	r2, sp, #24
 80062b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80062b6:	e9cd 3600 	strd	r3, r6, [sp]
 80062ba:	4622      	mov	r2, r4
 80062bc:	462b      	mov	r3, r5
 80062be:	f001 f9b3 	bl	8007628 <_dtoa_r>
 80062c2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80062c6:	4607      	mov	r7, r0
 80062c8:	d119      	bne.n	80062fe <__cvt+0x92>
 80062ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80062cc:	07db      	lsls	r3, r3, #31
 80062ce:	d50e      	bpl.n	80062ee <__cvt+0x82>
 80062d0:	eb00 0906 	add.w	r9, r0, r6
 80062d4:	2200      	movs	r2, #0
 80062d6:	2300      	movs	r3, #0
 80062d8:	4620      	mov	r0, r4
 80062da:	4629      	mov	r1, r5
 80062dc:	f7fa fbcc 	bl	8000a78 <__aeabi_dcmpeq>
 80062e0:	b108      	cbz	r0, 80062e6 <__cvt+0x7a>
 80062e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80062e6:	2230      	movs	r2, #48	@ 0x30
 80062e8:	9b07      	ldr	r3, [sp, #28]
 80062ea:	454b      	cmp	r3, r9
 80062ec:	d31e      	bcc.n	800632c <__cvt+0xc0>
 80062ee:	9b07      	ldr	r3, [sp, #28]
 80062f0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80062f2:	1bdb      	subs	r3, r3, r7
 80062f4:	4638      	mov	r0, r7
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	b008      	add	sp, #32
 80062fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006302:	eb00 0906 	add.w	r9, r0, r6
 8006306:	d1e5      	bne.n	80062d4 <__cvt+0x68>
 8006308:	7803      	ldrb	r3, [r0, #0]
 800630a:	2b30      	cmp	r3, #48	@ 0x30
 800630c:	d10a      	bne.n	8006324 <__cvt+0xb8>
 800630e:	2200      	movs	r2, #0
 8006310:	2300      	movs	r3, #0
 8006312:	4620      	mov	r0, r4
 8006314:	4629      	mov	r1, r5
 8006316:	f7fa fbaf 	bl	8000a78 <__aeabi_dcmpeq>
 800631a:	b918      	cbnz	r0, 8006324 <__cvt+0xb8>
 800631c:	f1c6 0601 	rsb	r6, r6, #1
 8006320:	f8ca 6000 	str.w	r6, [sl]
 8006324:	f8da 3000 	ldr.w	r3, [sl]
 8006328:	4499      	add	r9, r3
 800632a:	e7d3      	b.n	80062d4 <__cvt+0x68>
 800632c:	1c59      	adds	r1, r3, #1
 800632e:	9107      	str	r1, [sp, #28]
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	e7d9      	b.n	80062e8 <__cvt+0x7c>

08006334 <__exponent>:
 8006334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006336:	2900      	cmp	r1, #0
 8006338:	bfba      	itte	lt
 800633a:	4249      	neglt	r1, r1
 800633c:	232d      	movlt	r3, #45	@ 0x2d
 800633e:	232b      	movge	r3, #43	@ 0x2b
 8006340:	2909      	cmp	r1, #9
 8006342:	7002      	strb	r2, [r0, #0]
 8006344:	7043      	strb	r3, [r0, #1]
 8006346:	dd29      	ble.n	800639c <__exponent+0x68>
 8006348:	f10d 0307 	add.w	r3, sp, #7
 800634c:	461d      	mov	r5, r3
 800634e:	270a      	movs	r7, #10
 8006350:	461a      	mov	r2, r3
 8006352:	fbb1 f6f7 	udiv	r6, r1, r7
 8006356:	fb07 1416 	mls	r4, r7, r6, r1
 800635a:	3430      	adds	r4, #48	@ 0x30
 800635c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006360:	460c      	mov	r4, r1
 8006362:	2c63      	cmp	r4, #99	@ 0x63
 8006364:	f103 33ff 	add.w	r3, r3, #4294967295
 8006368:	4631      	mov	r1, r6
 800636a:	dcf1      	bgt.n	8006350 <__exponent+0x1c>
 800636c:	3130      	adds	r1, #48	@ 0x30
 800636e:	1e94      	subs	r4, r2, #2
 8006370:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006374:	1c41      	adds	r1, r0, #1
 8006376:	4623      	mov	r3, r4
 8006378:	42ab      	cmp	r3, r5
 800637a:	d30a      	bcc.n	8006392 <__exponent+0x5e>
 800637c:	f10d 0309 	add.w	r3, sp, #9
 8006380:	1a9b      	subs	r3, r3, r2
 8006382:	42ac      	cmp	r4, r5
 8006384:	bf88      	it	hi
 8006386:	2300      	movhi	r3, #0
 8006388:	3302      	adds	r3, #2
 800638a:	4403      	add	r3, r0
 800638c:	1a18      	subs	r0, r3, r0
 800638e:	b003      	add	sp, #12
 8006390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006392:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006396:	f801 6f01 	strb.w	r6, [r1, #1]!
 800639a:	e7ed      	b.n	8006378 <__exponent+0x44>
 800639c:	2330      	movs	r3, #48	@ 0x30
 800639e:	3130      	adds	r1, #48	@ 0x30
 80063a0:	7083      	strb	r3, [r0, #2]
 80063a2:	70c1      	strb	r1, [r0, #3]
 80063a4:	1d03      	adds	r3, r0, #4
 80063a6:	e7f1      	b.n	800638c <__exponent+0x58>

080063a8 <_printf_float>:
 80063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ac:	b091      	sub	sp, #68	@ 0x44
 80063ae:	460c      	mov	r4, r1
 80063b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80063b4:	4616      	mov	r6, r2
 80063b6:	461f      	mov	r7, r3
 80063b8:	4605      	mov	r5, r0
 80063ba:	f001 f831 	bl	8007420 <_localeconv_r>
 80063be:	6803      	ldr	r3, [r0, #0]
 80063c0:	9308      	str	r3, [sp, #32]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7f9 ff2c 	bl	8000220 <strlen>
 80063c8:	2300      	movs	r3, #0
 80063ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80063cc:	f8d8 3000 	ldr.w	r3, [r8]
 80063d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80063d2:	3307      	adds	r3, #7
 80063d4:	f023 0307 	bic.w	r3, r3, #7
 80063d8:	f103 0208 	add.w	r2, r3, #8
 80063dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80063e0:	f8d4 b000 	ldr.w	fp, [r4]
 80063e4:	f8c8 2000 	str.w	r2, [r8]
 80063e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80063f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063f2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80063f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80063fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80063fe:	4b9d      	ldr	r3, [pc, #628]	@ (8006674 <_printf_float+0x2cc>)
 8006400:	f04f 32ff 	mov.w	r2, #4294967295
 8006404:	f7fa fb6a 	bl	8000adc <__aeabi_dcmpun>
 8006408:	bb70      	cbnz	r0, 8006468 <_printf_float+0xc0>
 800640a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800640e:	4b99      	ldr	r3, [pc, #612]	@ (8006674 <_printf_float+0x2cc>)
 8006410:	f04f 32ff 	mov.w	r2, #4294967295
 8006414:	f7fa fb44 	bl	8000aa0 <__aeabi_dcmple>
 8006418:	bb30      	cbnz	r0, 8006468 <_printf_float+0xc0>
 800641a:	2200      	movs	r2, #0
 800641c:	2300      	movs	r3, #0
 800641e:	4640      	mov	r0, r8
 8006420:	4649      	mov	r1, r9
 8006422:	f7fa fb33 	bl	8000a8c <__aeabi_dcmplt>
 8006426:	b110      	cbz	r0, 800642e <_printf_float+0x86>
 8006428:	232d      	movs	r3, #45	@ 0x2d
 800642a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800642e:	4a92      	ldr	r2, [pc, #584]	@ (8006678 <_printf_float+0x2d0>)
 8006430:	4b92      	ldr	r3, [pc, #584]	@ (800667c <_printf_float+0x2d4>)
 8006432:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006436:	bf94      	ite	ls
 8006438:	4690      	movls	r8, r2
 800643a:	4698      	movhi	r8, r3
 800643c:	2303      	movs	r3, #3
 800643e:	6123      	str	r3, [r4, #16]
 8006440:	f02b 0304 	bic.w	r3, fp, #4
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	f04f 0900 	mov.w	r9, #0
 800644a:	9700      	str	r7, [sp, #0]
 800644c:	4633      	mov	r3, r6
 800644e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006450:	4621      	mov	r1, r4
 8006452:	4628      	mov	r0, r5
 8006454:	f000 f9d4 	bl	8006800 <_printf_common>
 8006458:	3001      	adds	r0, #1
 800645a:	f040 808f 	bne.w	800657c <_printf_float+0x1d4>
 800645e:	f04f 30ff 	mov.w	r0, #4294967295
 8006462:	b011      	add	sp, #68	@ 0x44
 8006464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006468:	4642      	mov	r2, r8
 800646a:	464b      	mov	r3, r9
 800646c:	4640      	mov	r0, r8
 800646e:	4649      	mov	r1, r9
 8006470:	f7fa fb34 	bl	8000adc <__aeabi_dcmpun>
 8006474:	b140      	cbz	r0, 8006488 <_printf_float+0xe0>
 8006476:	464b      	mov	r3, r9
 8006478:	2b00      	cmp	r3, #0
 800647a:	bfbc      	itt	lt
 800647c:	232d      	movlt	r3, #45	@ 0x2d
 800647e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006482:	4a7f      	ldr	r2, [pc, #508]	@ (8006680 <_printf_float+0x2d8>)
 8006484:	4b7f      	ldr	r3, [pc, #508]	@ (8006684 <_printf_float+0x2dc>)
 8006486:	e7d4      	b.n	8006432 <_printf_float+0x8a>
 8006488:	6863      	ldr	r3, [r4, #4]
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006490:	d13f      	bne.n	8006512 <_printf_float+0x16a>
 8006492:	2306      	movs	r3, #6
 8006494:	6063      	str	r3, [r4, #4]
 8006496:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800649a:	2200      	movs	r2, #0
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	9206      	str	r2, [sp, #24]
 80064a0:	aa0e      	add	r2, sp, #56	@ 0x38
 80064a2:	e9cd a204 	strd	sl, r2, [sp, #16]
 80064a6:	aa0d      	add	r2, sp, #52	@ 0x34
 80064a8:	9203      	str	r2, [sp, #12]
 80064aa:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80064ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80064b2:	6863      	ldr	r3, [r4, #4]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	4642      	mov	r2, r8
 80064b8:	464b      	mov	r3, r9
 80064ba:	4628      	mov	r0, r5
 80064bc:	910a      	str	r1, [sp, #40]	@ 0x28
 80064be:	f7ff fed5 	bl	800626c <__cvt>
 80064c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064c4:	2947      	cmp	r1, #71	@ 0x47
 80064c6:	4680      	mov	r8, r0
 80064c8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80064ca:	d128      	bne.n	800651e <_printf_float+0x176>
 80064cc:	1cc8      	adds	r0, r1, #3
 80064ce:	db02      	blt.n	80064d6 <_printf_float+0x12e>
 80064d0:	6863      	ldr	r3, [r4, #4]
 80064d2:	4299      	cmp	r1, r3
 80064d4:	dd40      	ble.n	8006558 <_printf_float+0x1b0>
 80064d6:	f1aa 0a02 	sub.w	sl, sl, #2
 80064da:	fa5f fa8a 	uxtb.w	sl, sl
 80064de:	3901      	subs	r1, #1
 80064e0:	4652      	mov	r2, sl
 80064e2:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80064e6:	910d      	str	r1, [sp, #52]	@ 0x34
 80064e8:	f7ff ff24 	bl	8006334 <__exponent>
 80064ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064ee:	1813      	adds	r3, r2, r0
 80064f0:	2a01      	cmp	r2, #1
 80064f2:	4681      	mov	r9, r0
 80064f4:	6123      	str	r3, [r4, #16]
 80064f6:	dc02      	bgt.n	80064fe <_printf_float+0x156>
 80064f8:	6822      	ldr	r2, [r4, #0]
 80064fa:	07d2      	lsls	r2, r2, #31
 80064fc:	d501      	bpl.n	8006502 <_printf_float+0x15a>
 80064fe:	3301      	adds	r3, #1
 8006500:	6123      	str	r3, [r4, #16]
 8006502:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006506:	2b00      	cmp	r3, #0
 8006508:	d09f      	beq.n	800644a <_printf_float+0xa2>
 800650a:	232d      	movs	r3, #45	@ 0x2d
 800650c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006510:	e79b      	b.n	800644a <_printf_float+0xa2>
 8006512:	2947      	cmp	r1, #71	@ 0x47
 8006514:	d1bf      	bne.n	8006496 <_printf_float+0xee>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1bd      	bne.n	8006496 <_printf_float+0xee>
 800651a:	2301      	movs	r3, #1
 800651c:	e7ba      	b.n	8006494 <_printf_float+0xec>
 800651e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006522:	d9dc      	bls.n	80064de <_printf_float+0x136>
 8006524:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006528:	d118      	bne.n	800655c <_printf_float+0x1b4>
 800652a:	2900      	cmp	r1, #0
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	dd0b      	ble.n	8006548 <_printf_float+0x1a0>
 8006530:	6121      	str	r1, [r4, #16]
 8006532:	b913      	cbnz	r3, 800653a <_printf_float+0x192>
 8006534:	6822      	ldr	r2, [r4, #0]
 8006536:	07d0      	lsls	r0, r2, #31
 8006538:	d502      	bpl.n	8006540 <_printf_float+0x198>
 800653a:	3301      	adds	r3, #1
 800653c:	440b      	add	r3, r1
 800653e:	6123      	str	r3, [r4, #16]
 8006540:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006542:	f04f 0900 	mov.w	r9, #0
 8006546:	e7dc      	b.n	8006502 <_printf_float+0x15a>
 8006548:	b913      	cbnz	r3, 8006550 <_printf_float+0x1a8>
 800654a:	6822      	ldr	r2, [r4, #0]
 800654c:	07d2      	lsls	r2, r2, #31
 800654e:	d501      	bpl.n	8006554 <_printf_float+0x1ac>
 8006550:	3302      	adds	r3, #2
 8006552:	e7f4      	b.n	800653e <_printf_float+0x196>
 8006554:	2301      	movs	r3, #1
 8006556:	e7f2      	b.n	800653e <_printf_float+0x196>
 8006558:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800655c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800655e:	4299      	cmp	r1, r3
 8006560:	db05      	blt.n	800656e <_printf_float+0x1c6>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	6121      	str	r1, [r4, #16]
 8006566:	07d8      	lsls	r0, r3, #31
 8006568:	d5ea      	bpl.n	8006540 <_printf_float+0x198>
 800656a:	1c4b      	adds	r3, r1, #1
 800656c:	e7e7      	b.n	800653e <_printf_float+0x196>
 800656e:	2900      	cmp	r1, #0
 8006570:	bfd4      	ite	le
 8006572:	f1c1 0202 	rsble	r2, r1, #2
 8006576:	2201      	movgt	r2, #1
 8006578:	4413      	add	r3, r2
 800657a:	e7e0      	b.n	800653e <_printf_float+0x196>
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	055a      	lsls	r2, r3, #21
 8006580:	d407      	bmi.n	8006592 <_printf_float+0x1ea>
 8006582:	6923      	ldr	r3, [r4, #16]
 8006584:	4642      	mov	r2, r8
 8006586:	4631      	mov	r1, r6
 8006588:	4628      	mov	r0, r5
 800658a:	47b8      	blx	r7
 800658c:	3001      	adds	r0, #1
 800658e:	d12b      	bne.n	80065e8 <_printf_float+0x240>
 8006590:	e765      	b.n	800645e <_printf_float+0xb6>
 8006592:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006596:	f240 80dd 	bls.w	8006754 <_printf_float+0x3ac>
 800659a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800659e:	2200      	movs	r2, #0
 80065a0:	2300      	movs	r3, #0
 80065a2:	f7fa fa69 	bl	8000a78 <__aeabi_dcmpeq>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d033      	beq.n	8006612 <_printf_float+0x26a>
 80065aa:	4a37      	ldr	r2, [pc, #220]	@ (8006688 <_printf_float+0x2e0>)
 80065ac:	2301      	movs	r3, #1
 80065ae:	4631      	mov	r1, r6
 80065b0:	4628      	mov	r0, r5
 80065b2:	47b8      	blx	r7
 80065b4:	3001      	adds	r0, #1
 80065b6:	f43f af52 	beq.w	800645e <_printf_float+0xb6>
 80065ba:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80065be:	4543      	cmp	r3, r8
 80065c0:	db02      	blt.n	80065c8 <_printf_float+0x220>
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	07d8      	lsls	r0, r3, #31
 80065c6:	d50f      	bpl.n	80065e8 <_printf_float+0x240>
 80065c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80065cc:	4631      	mov	r1, r6
 80065ce:	4628      	mov	r0, r5
 80065d0:	47b8      	blx	r7
 80065d2:	3001      	adds	r0, #1
 80065d4:	f43f af43 	beq.w	800645e <_printf_float+0xb6>
 80065d8:	f04f 0900 	mov.w	r9, #0
 80065dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80065e0:	f104 0a1a 	add.w	sl, r4, #26
 80065e4:	45c8      	cmp	r8, r9
 80065e6:	dc09      	bgt.n	80065fc <_printf_float+0x254>
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	079b      	lsls	r3, r3, #30
 80065ec:	f100 8103 	bmi.w	80067f6 <_printf_float+0x44e>
 80065f0:	68e0      	ldr	r0, [r4, #12]
 80065f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065f4:	4298      	cmp	r0, r3
 80065f6:	bfb8      	it	lt
 80065f8:	4618      	movlt	r0, r3
 80065fa:	e732      	b.n	8006462 <_printf_float+0xba>
 80065fc:	2301      	movs	r3, #1
 80065fe:	4652      	mov	r2, sl
 8006600:	4631      	mov	r1, r6
 8006602:	4628      	mov	r0, r5
 8006604:	47b8      	blx	r7
 8006606:	3001      	adds	r0, #1
 8006608:	f43f af29 	beq.w	800645e <_printf_float+0xb6>
 800660c:	f109 0901 	add.w	r9, r9, #1
 8006610:	e7e8      	b.n	80065e4 <_printf_float+0x23c>
 8006612:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006614:	2b00      	cmp	r3, #0
 8006616:	dc39      	bgt.n	800668c <_printf_float+0x2e4>
 8006618:	4a1b      	ldr	r2, [pc, #108]	@ (8006688 <_printf_float+0x2e0>)
 800661a:	2301      	movs	r3, #1
 800661c:	4631      	mov	r1, r6
 800661e:	4628      	mov	r0, r5
 8006620:	47b8      	blx	r7
 8006622:	3001      	adds	r0, #1
 8006624:	f43f af1b 	beq.w	800645e <_printf_float+0xb6>
 8006628:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800662c:	ea59 0303 	orrs.w	r3, r9, r3
 8006630:	d102      	bne.n	8006638 <_printf_float+0x290>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	07d9      	lsls	r1, r3, #31
 8006636:	d5d7      	bpl.n	80065e8 <_printf_float+0x240>
 8006638:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800663c:	4631      	mov	r1, r6
 800663e:	4628      	mov	r0, r5
 8006640:	47b8      	blx	r7
 8006642:	3001      	adds	r0, #1
 8006644:	f43f af0b 	beq.w	800645e <_printf_float+0xb6>
 8006648:	f04f 0a00 	mov.w	sl, #0
 800664c:	f104 0b1a 	add.w	fp, r4, #26
 8006650:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006652:	425b      	negs	r3, r3
 8006654:	4553      	cmp	r3, sl
 8006656:	dc01      	bgt.n	800665c <_printf_float+0x2b4>
 8006658:	464b      	mov	r3, r9
 800665a:	e793      	b.n	8006584 <_printf_float+0x1dc>
 800665c:	2301      	movs	r3, #1
 800665e:	465a      	mov	r2, fp
 8006660:	4631      	mov	r1, r6
 8006662:	4628      	mov	r0, r5
 8006664:	47b8      	blx	r7
 8006666:	3001      	adds	r0, #1
 8006668:	f43f aef9 	beq.w	800645e <_printf_float+0xb6>
 800666c:	f10a 0a01 	add.w	sl, sl, #1
 8006670:	e7ee      	b.n	8006650 <_printf_float+0x2a8>
 8006672:	bf00      	nop
 8006674:	7fefffff 	.word	0x7fefffff
 8006678:	0800b4a8 	.word	0x0800b4a8
 800667c:	0800b4ac 	.word	0x0800b4ac
 8006680:	0800b4b0 	.word	0x0800b4b0
 8006684:	0800b4b4 	.word	0x0800b4b4
 8006688:	0800b848 	.word	0x0800b848
 800668c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800668e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006692:	4553      	cmp	r3, sl
 8006694:	bfa8      	it	ge
 8006696:	4653      	movge	r3, sl
 8006698:	2b00      	cmp	r3, #0
 800669a:	4699      	mov	r9, r3
 800669c:	dc36      	bgt.n	800670c <_printf_float+0x364>
 800669e:	f04f 0b00 	mov.w	fp, #0
 80066a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066a6:	f104 021a 	add.w	r2, r4, #26
 80066aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80066ae:	eba3 0309 	sub.w	r3, r3, r9
 80066b2:	455b      	cmp	r3, fp
 80066b4:	dc31      	bgt.n	800671a <_printf_float+0x372>
 80066b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066b8:	459a      	cmp	sl, r3
 80066ba:	dc3a      	bgt.n	8006732 <_printf_float+0x38a>
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	07da      	lsls	r2, r3, #31
 80066c0:	d437      	bmi.n	8006732 <_printf_float+0x38a>
 80066c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066c4:	ebaa 0903 	sub.w	r9, sl, r3
 80066c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066ca:	ebaa 0303 	sub.w	r3, sl, r3
 80066ce:	4599      	cmp	r9, r3
 80066d0:	bfa8      	it	ge
 80066d2:	4699      	movge	r9, r3
 80066d4:	f1b9 0f00 	cmp.w	r9, #0
 80066d8:	dc33      	bgt.n	8006742 <_printf_float+0x39a>
 80066da:	f04f 0800 	mov.w	r8, #0
 80066de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066e2:	f104 0b1a 	add.w	fp, r4, #26
 80066e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066e8:	ebaa 0303 	sub.w	r3, sl, r3
 80066ec:	eba3 0309 	sub.w	r3, r3, r9
 80066f0:	4543      	cmp	r3, r8
 80066f2:	f77f af79 	ble.w	80065e8 <_printf_float+0x240>
 80066f6:	2301      	movs	r3, #1
 80066f8:	465a      	mov	r2, fp
 80066fa:	4631      	mov	r1, r6
 80066fc:	4628      	mov	r0, r5
 80066fe:	47b8      	blx	r7
 8006700:	3001      	adds	r0, #1
 8006702:	f43f aeac 	beq.w	800645e <_printf_float+0xb6>
 8006706:	f108 0801 	add.w	r8, r8, #1
 800670a:	e7ec      	b.n	80066e6 <_printf_float+0x33e>
 800670c:	4642      	mov	r2, r8
 800670e:	4631      	mov	r1, r6
 8006710:	4628      	mov	r0, r5
 8006712:	47b8      	blx	r7
 8006714:	3001      	adds	r0, #1
 8006716:	d1c2      	bne.n	800669e <_printf_float+0x2f6>
 8006718:	e6a1      	b.n	800645e <_printf_float+0xb6>
 800671a:	2301      	movs	r3, #1
 800671c:	4631      	mov	r1, r6
 800671e:	4628      	mov	r0, r5
 8006720:	920a      	str	r2, [sp, #40]	@ 0x28
 8006722:	47b8      	blx	r7
 8006724:	3001      	adds	r0, #1
 8006726:	f43f ae9a 	beq.w	800645e <_printf_float+0xb6>
 800672a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800672c:	f10b 0b01 	add.w	fp, fp, #1
 8006730:	e7bb      	b.n	80066aa <_printf_float+0x302>
 8006732:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006736:	4631      	mov	r1, r6
 8006738:	4628      	mov	r0, r5
 800673a:	47b8      	blx	r7
 800673c:	3001      	adds	r0, #1
 800673e:	d1c0      	bne.n	80066c2 <_printf_float+0x31a>
 8006740:	e68d      	b.n	800645e <_printf_float+0xb6>
 8006742:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006744:	464b      	mov	r3, r9
 8006746:	4442      	add	r2, r8
 8006748:	4631      	mov	r1, r6
 800674a:	4628      	mov	r0, r5
 800674c:	47b8      	blx	r7
 800674e:	3001      	adds	r0, #1
 8006750:	d1c3      	bne.n	80066da <_printf_float+0x332>
 8006752:	e684      	b.n	800645e <_printf_float+0xb6>
 8006754:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006758:	f1ba 0f01 	cmp.w	sl, #1
 800675c:	dc01      	bgt.n	8006762 <_printf_float+0x3ba>
 800675e:	07db      	lsls	r3, r3, #31
 8006760:	d536      	bpl.n	80067d0 <_printf_float+0x428>
 8006762:	2301      	movs	r3, #1
 8006764:	4642      	mov	r2, r8
 8006766:	4631      	mov	r1, r6
 8006768:	4628      	mov	r0, r5
 800676a:	47b8      	blx	r7
 800676c:	3001      	adds	r0, #1
 800676e:	f43f ae76 	beq.w	800645e <_printf_float+0xb6>
 8006772:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006776:	4631      	mov	r1, r6
 8006778:	4628      	mov	r0, r5
 800677a:	47b8      	blx	r7
 800677c:	3001      	adds	r0, #1
 800677e:	f43f ae6e 	beq.w	800645e <_printf_float+0xb6>
 8006782:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006786:	2200      	movs	r2, #0
 8006788:	2300      	movs	r3, #0
 800678a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800678e:	f7fa f973 	bl	8000a78 <__aeabi_dcmpeq>
 8006792:	b9c0      	cbnz	r0, 80067c6 <_printf_float+0x41e>
 8006794:	4653      	mov	r3, sl
 8006796:	f108 0201 	add.w	r2, r8, #1
 800679a:	4631      	mov	r1, r6
 800679c:	4628      	mov	r0, r5
 800679e:	47b8      	blx	r7
 80067a0:	3001      	adds	r0, #1
 80067a2:	d10c      	bne.n	80067be <_printf_float+0x416>
 80067a4:	e65b      	b.n	800645e <_printf_float+0xb6>
 80067a6:	2301      	movs	r3, #1
 80067a8:	465a      	mov	r2, fp
 80067aa:	4631      	mov	r1, r6
 80067ac:	4628      	mov	r0, r5
 80067ae:	47b8      	blx	r7
 80067b0:	3001      	adds	r0, #1
 80067b2:	f43f ae54 	beq.w	800645e <_printf_float+0xb6>
 80067b6:	f108 0801 	add.w	r8, r8, #1
 80067ba:	45d0      	cmp	r8, sl
 80067bc:	dbf3      	blt.n	80067a6 <_printf_float+0x3fe>
 80067be:	464b      	mov	r3, r9
 80067c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80067c4:	e6df      	b.n	8006586 <_printf_float+0x1de>
 80067c6:	f04f 0800 	mov.w	r8, #0
 80067ca:	f104 0b1a 	add.w	fp, r4, #26
 80067ce:	e7f4      	b.n	80067ba <_printf_float+0x412>
 80067d0:	2301      	movs	r3, #1
 80067d2:	4642      	mov	r2, r8
 80067d4:	e7e1      	b.n	800679a <_printf_float+0x3f2>
 80067d6:	2301      	movs	r3, #1
 80067d8:	464a      	mov	r2, r9
 80067da:	4631      	mov	r1, r6
 80067dc:	4628      	mov	r0, r5
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	f43f ae3c 	beq.w	800645e <_printf_float+0xb6>
 80067e6:	f108 0801 	add.w	r8, r8, #1
 80067ea:	68e3      	ldr	r3, [r4, #12]
 80067ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80067ee:	1a5b      	subs	r3, r3, r1
 80067f0:	4543      	cmp	r3, r8
 80067f2:	dcf0      	bgt.n	80067d6 <_printf_float+0x42e>
 80067f4:	e6fc      	b.n	80065f0 <_printf_float+0x248>
 80067f6:	f04f 0800 	mov.w	r8, #0
 80067fa:	f104 0919 	add.w	r9, r4, #25
 80067fe:	e7f4      	b.n	80067ea <_printf_float+0x442>

08006800 <_printf_common>:
 8006800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006804:	4616      	mov	r6, r2
 8006806:	4698      	mov	r8, r3
 8006808:	688a      	ldr	r2, [r1, #8]
 800680a:	690b      	ldr	r3, [r1, #16]
 800680c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006810:	4293      	cmp	r3, r2
 8006812:	bfb8      	it	lt
 8006814:	4613      	movlt	r3, r2
 8006816:	6033      	str	r3, [r6, #0]
 8006818:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800681c:	4607      	mov	r7, r0
 800681e:	460c      	mov	r4, r1
 8006820:	b10a      	cbz	r2, 8006826 <_printf_common+0x26>
 8006822:	3301      	adds	r3, #1
 8006824:	6033      	str	r3, [r6, #0]
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	0699      	lsls	r1, r3, #26
 800682a:	bf42      	ittt	mi
 800682c:	6833      	ldrmi	r3, [r6, #0]
 800682e:	3302      	addmi	r3, #2
 8006830:	6033      	strmi	r3, [r6, #0]
 8006832:	6825      	ldr	r5, [r4, #0]
 8006834:	f015 0506 	ands.w	r5, r5, #6
 8006838:	d106      	bne.n	8006848 <_printf_common+0x48>
 800683a:	f104 0a19 	add.w	sl, r4, #25
 800683e:	68e3      	ldr	r3, [r4, #12]
 8006840:	6832      	ldr	r2, [r6, #0]
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	42ab      	cmp	r3, r5
 8006846:	dc26      	bgt.n	8006896 <_printf_common+0x96>
 8006848:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800684c:	6822      	ldr	r2, [r4, #0]
 800684e:	3b00      	subs	r3, #0
 8006850:	bf18      	it	ne
 8006852:	2301      	movne	r3, #1
 8006854:	0692      	lsls	r2, r2, #26
 8006856:	d42b      	bmi.n	80068b0 <_printf_common+0xb0>
 8006858:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800685c:	4641      	mov	r1, r8
 800685e:	4638      	mov	r0, r7
 8006860:	47c8      	blx	r9
 8006862:	3001      	adds	r0, #1
 8006864:	d01e      	beq.n	80068a4 <_printf_common+0xa4>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	6922      	ldr	r2, [r4, #16]
 800686a:	f003 0306 	and.w	r3, r3, #6
 800686e:	2b04      	cmp	r3, #4
 8006870:	bf02      	ittt	eq
 8006872:	68e5      	ldreq	r5, [r4, #12]
 8006874:	6833      	ldreq	r3, [r6, #0]
 8006876:	1aed      	subeq	r5, r5, r3
 8006878:	68a3      	ldr	r3, [r4, #8]
 800687a:	bf0c      	ite	eq
 800687c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006880:	2500      	movne	r5, #0
 8006882:	4293      	cmp	r3, r2
 8006884:	bfc4      	itt	gt
 8006886:	1a9b      	subgt	r3, r3, r2
 8006888:	18ed      	addgt	r5, r5, r3
 800688a:	2600      	movs	r6, #0
 800688c:	341a      	adds	r4, #26
 800688e:	42b5      	cmp	r5, r6
 8006890:	d11a      	bne.n	80068c8 <_printf_common+0xc8>
 8006892:	2000      	movs	r0, #0
 8006894:	e008      	b.n	80068a8 <_printf_common+0xa8>
 8006896:	2301      	movs	r3, #1
 8006898:	4652      	mov	r2, sl
 800689a:	4641      	mov	r1, r8
 800689c:	4638      	mov	r0, r7
 800689e:	47c8      	blx	r9
 80068a0:	3001      	adds	r0, #1
 80068a2:	d103      	bne.n	80068ac <_printf_common+0xac>
 80068a4:	f04f 30ff 	mov.w	r0, #4294967295
 80068a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ac:	3501      	adds	r5, #1
 80068ae:	e7c6      	b.n	800683e <_printf_common+0x3e>
 80068b0:	18e1      	adds	r1, r4, r3
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	2030      	movs	r0, #48	@ 0x30
 80068b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068ba:	4422      	add	r2, r4
 80068bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068c4:	3302      	adds	r3, #2
 80068c6:	e7c7      	b.n	8006858 <_printf_common+0x58>
 80068c8:	2301      	movs	r3, #1
 80068ca:	4622      	mov	r2, r4
 80068cc:	4641      	mov	r1, r8
 80068ce:	4638      	mov	r0, r7
 80068d0:	47c8      	blx	r9
 80068d2:	3001      	adds	r0, #1
 80068d4:	d0e6      	beq.n	80068a4 <_printf_common+0xa4>
 80068d6:	3601      	adds	r6, #1
 80068d8:	e7d9      	b.n	800688e <_printf_common+0x8e>
	...

080068dc <_printf_i>:
 80068dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068e0:	7e0f      	ldrb	r7, [r1, #24]
 80068e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068e4:	2f78      	cmp	r7, #120	@ 0x78
 80068e6:	4691      	mov	r9, r2
 80068e8:	4680      	mov	r8, r0
 80068ea:	460c      	mov	r4, r1
 80068ec:	469a      	mov	sl, r3
 80068ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068f2:	d807      	bhi.n	8006904 <_printf_i+0x28>
 80068f4:	2f62      	cmp	r7, #98	@ 0x62
 80068f6:	d80a      	bhi.n	800690e <_printf_i+0x32>
 80068f8:	2f00      	cmp	r7, #0
 80068fa:	f000 80d2 	beq.w	8006aa2 <_printf_i+0x1c6>
 80068fe:	2f58      	cmp	r7, #88	@ 0x58
 8006900:	f000 80b9 	beq.w	8006a76 <_printf_i+0x19a>
 8006904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006908:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800690c:	e03a      	b.n	8006984 <_printf_i+0xa8>
 800690e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006912:	2b15      	cmp	r3, #21
 8006914:	d8f6      	bhi.n	8006904 <_printf_i+0x28>
 8006916:	a101      	add	r1, pc, #4	@ (adr r1, 800691c <_printf_i+0x40>)
 8006918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800691c:	08006975 	.word	0x08006975
 8006920:	08006989 	.word	0x08006989
 8006924:	08006905 	.word	0x08006905
 8006928:	08006905 	.word	0x08006905
 800692c:	08006905 	.word	0x08006905
 8006930:	08006905 	.word	0x08006905
 8006934:	08006989 	.word	0x08006989
 8006938:	08006905 	.word	0x08006905
 800693c:	08006905 	.word	0x08006905
 8006940:	08006905 	.word	0x08006905
 8006944:	08006905 	.word	0x08006905
 8006948:	08006a89 	.word	0x08006a89
 800694c:	080069b3 	.word	0x080069b3
 8006950:	08006a43 	.word	0x08006a43
 8006954:	08006905 	.word	0x08006905
 8006958:	08006905 	.word	0x08006905
 800695c:	08006aab 	.word	0x08006aab
 8006960:	08006905 	.word	0x08006905
 8006964:	080069b3 	.word	0x080069b3
 8006968:	08006905 	.word	0x08006905
 800696c:	08006905 	.word	0x08006905
 8006970:	08006a4b 	.word	0x08006a4b
 8006974:	6833      	ldr	r3, [r6, #0]
 8006976:	1d1a      	adds	r2, r3, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6032      	str	r2, [r6, #0]
 800697c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006980:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006984:	2301      	movs	r3, #1
 8006986:	e09d      	b.n	8006ac4 <_printf_i+0x1e8>
 8006988:	6833      	ldr	r3, [r6, #0]
 800698a:	6820      	ldr	r0, [r4, #0]
 800698c:	1d19      	adds	r1, r3, #4
 800698e:	6031      	str	r1, [r6, #0]
 8006990:	0606      	lsls	r6, r0, #24
 8006992:	d501      	bpl.n	8006998 <_printf_i+0xbc>
 8006994:	681d      	ldr	r5, [r3, #0]
 8006996:	e003      	b.n	80069a0 <_printf_i+0xc4>
 8006998:	0645      	lsls	r5, r0, #25
 800699a:	d5fb      	bpl.n	8006994 <_printf_i+0xb8>
 800699c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069a0:	2d00      	cmp	r5, #0
 80069a2:	da03      	bge.n	80069ac <_printf_i+0xd0>
 80069a4:	232d      	movs	r3, #45	@ 0x2d
 80069a6:	426d      	negs	r5, r5
 80069a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069ac:	4859      	ldr	r0, [pc, #356]	@ (8006b14 <_printf_i+0x238>)
 80069ae:	230a      	movs	r3, #10
 80069b0:	e011      	b.n	80069d6 <_printf_i+0xfa>
 80069b2:	6821      	ldr	r1, [r4, #0]
 80069b4:	6833      	ldr	r3, [r6, #0]
 80069b6:	0608      	lsls	r0, r1, #24
 80069b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80069bc:	d402      	bmi.n	80069c4 <_printf_i+0xe8>
 80069be:	0649      	lsls	r1, r1, #25
 80069c0:	bf48      	it	mi
 80069c2:	b2ad      	uxthmi	r5, r5
 80069c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80069c6:	4853      	ldr	r0, [pc, #332]	@ (8006b14 <_printf_i+0x238>)
 80069c8:	6033      	str	r3, [r6, #0]
 80069ca:	bf14      	ite	ne
 80069cc:	230a      	movne	r3, #10
 80069ce:	2308      	moveq	r3, #8
 80069d0:	2100      	movs	r1, #0
 80069d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069d6:	6866      	ldr	r6, [r4, #4]
 80069d8:	60a6      	str	r6, [r4, #8]
 80069da:	2e00      	cmp	r6, #0
 80069dc:	bfa2      	ittt	ge
 80069de:	6821      	ldrge	r1, [r4, #0]
 80069e0:	f021 0104 	bicge.w	r1, r1, #4
 80069e4:	6021      	strge	r1, [r4, #0]
 80069e6:	b90d      	cbnz	r5, 80069ec <_printf_i+0x110>
 80069e8:	2e00      	cmp	r6, #0
 80069ea:	d04b      	beq.n	8006a84 <_printf_i+0x1a8>
 80069ec:	4616      	mov	r6, r2
 80069ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80069f2:	fb03 5711 	mls	r7, r3, r1, r5
 80069f6:	5dc7      	ldrb	r7, [r0, r7]
 80069f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069fc:	462f      	mov	r7, r5
 80069fe:	42bb      	cmp	r3, r7
 8006a00:	460d      	mov	r5, r1
 8006a02:	d9f4      	bls.n	80069ee <_printf_i+0x112>
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d10b      	bne.n	8006a20 <_printf_i+0x144>
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	07df      	lsls	r7, r3, #31
 8006a0c:	d508      	bpl.n	8006a20 <_printf_i+0x144>
 8006a0e:	6923      	ldr	r3, [r4, #16]
 8006a10:	6861      	ldr	r1, [r4, #4]
 8006a12:	4299      	cmp	r1, r3
 8006a14:	bfde      	ittt	le
 8006a16:	2330      	movle	r3, #48	@ 0x30
 8006a18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a20:	1b92      	subs	r2, r2, r6
 8006a22:	6122      	str	r2, [r4, #16]
 8006a24:	f8cd a000 	str.w	sl, [sp]
 8006a28:	464b      	mov	r3, r9
 8006a2a:	aa03      	add	r2, sp, #12
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	4640      	mov	r0, r8
 8006a30:	f7ff fee6 	bl	8006800 <_printf_common>
 8006a34:	3001      	adds	r0, #1
 8006a36:	d14a      	bne.n	8006ace <_printf_i+0x1f2>
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3c:	b004      	add	sp, #16
 8006a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	f043 0320 	orr.w	r3, r3, #32
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	4833      	ldr	r0, [pc, #204]	@ (8006b18 <_printf_i+0x23c>)
 8006a4c:	2778      	movs	r7, #120	@ 0x78
 8006a4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	6831      	ldr	r1, [r6, #0]
 8006a56:	061f      	lsls	r7, r3, #24
 8006a58:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a5c:	d402      	bmi.n	8006a64 <_printf_i+0x188>
 8006a5e:	065f      	lsls	r7, r3, #25
 8006a60:	bf48      	it	mi
 8006a62:	b2ad      	uxthmi	r5, r5
 8006a64:	6031      	str	r1, [r6, #0]
 8006a66:	07d9      	lsls	r1, r3, #31
 8006a68:	bf44      	itt	mi
 8006a6a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a6e:	6023      	strmi	r3, [r4, #0]
 8006a70:	b11d      	cbz	r5, 8006a7a <_printf_i+0x19e>
 8006a72:	2310      	movs	r3, #16
 8006a74:	e7ac      	b.n	80069d0 <_printf_i+0xf4>
 8006a76:	4827      	ldr	r0, [pc, #156]	@ (8006b14 <_printf_i+0x238>)
 8006a78:	e7e9      	b.n	8006a4e <_printf_i+0x172>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	f023 0320 	bic.w	r3, r3, #32
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	e7f6      	b.n	8006a72 <_printf_i+0x196>
 8006a84:	4616      	mov	r6, r2
 8006a86:	e7bd      	b.n	8006a04 <_printf_i+0x128>
 8006a88:	6833      	ldr	r3, [r6, #0]
 8006a8a:	6825      	ldr	r5, [r4, #0]
 8006a8c:	6961      	ldr	r1, [r4, #20]
 8006a8e:	1d18      	adds	r0, r3, #4
 8006a90:	6030      	str	r0, [r6, #0]
 8006a92:	062e      	lsls	r6, r5, #24
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	d501      	bpl.n	8006a9c <_printf_i+0x1c0>
 8006a98:	6019      	str	r1, [r3, #0]
 8006a9a:	e002      	b.n	8006aa2 <_printf_i+0x1c6>
 8006a9c:	0668      	lsls	r0, r5, #25
 8006a9e:	d5fb      	bpl.n	8006a98 <_printf_i+0x1bc>
 8006aa0:	8019      	strh	r1, [r3, #0]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	6123      	str	r3, [r4, #16]
 8006aa6:	4616      	mov	r6, r2
 8006aa8:	e7bc      	b.n	8006a24 <_printf_i+0x148>
 8006aaa:	6833      	ldr	r3, [r6, #0]
 8006aac:	1d1a      	adds	r2, r3, #4
 8006aae:	6032      	str	r2, [r6, #0]
 8006ab0:	681e      	ldr	r6, [r3, #0]
 8006ab2:	6862      	ldr	r2, [r4, #4]
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f7f9 fb62 	bl	8000180 <memchr>
 8006abc:	b108      	cbz	r0, 8006ac2 <_printf_i+0x1e6>
 8006abe:	1b80      	subs	r0, r0, r6
 8006ac0:	6060      	str	r0, [r4, #4]
 8006ac2:	6863      	ldr	r3, [r4, #4]
 8006ac4:	6123      	str	r3, [r4, #16]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006acc:	e7aa      	b.n	8006a24 <_printf_i+0x148>
 8006ace:	6923      	ldr	r3, [r4, #16]
 8006ad0:	4632      	mov	r2, r6
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	47d0      	blx	sl
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d0ad      	beq.n	8006a38 <_printf_i+0x15c>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	079b      	lsls	r3, r3, #30
 8006ae0:	d413      	bmi.n	8006b0a <_printf_i+0x22e>
 8006ae2:	68e0      	ldr	r0, [r4, #12]
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	4298      	cmp	r0, r3
 8006ae8:	bfb8      	it	lt
 8006aea:	4618      	movlt	r0, r3
 8006aec:	e7a6      	b.n	8006a3c <_printf_i+0x160>
 8006aee:	2301      	movs	r3, #1
 8006af0:	4632      	mov	r2, r6
 8006af2:	4649      	mov	r1, r9
 8006af4:	4640      	mov	r0, r8
 8006af6:	47d0      	blx	sl
 8006af8:	3001      	adds	r0, #1
 8006afa:	d09d      	beq.n	8006a38 <_printf_i+0x15c>
 8006afc:	3501      	adds	r5, #1
 8006afe:	68e3      	ldr	r3, [r4, #12]
 8006b00:	9903      	ldr	r1, [sp, #12]
 8006b02:	1a5b      	subs	r3, r3, r1
 8006b04:	42ab      	cmp	r3, r5
 8006b06:	dcf2      	bgt.n	8006aee <_printf_i+0x212>
 8006b08:	e7eb      	b.n	8006ae2 <_printf_i+0x206>
 8006b0a:	2500      	movs	r5, #0
 8006b0c:	f104 0619 	add.w	r6, r4, #25
 8006b10:	e7f5      	b.n	8006afe <_printf_i+0x222>
 8006b12:	bf00      	nop
 8006b14:	0800b4b8 	.word	0x0800b4b8
 8006b18:	0800b4c9 	.word	0x0800b4c9

08006b1c <_scanf_float>:
 8006b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b20:	b087      	sub	sp, #28
 8006b22:	4617      	mov	r7, r2
 8006b24:	9303      	str	r3, [sp, #12]
 8006b26:	688b      	ldr	r3, [r1, #8]
 8006b28:	1e5a      	subs	r2, r3, #1
 8006b2a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006b2e:	bf81      	itttt	hi
 8006b30:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006b34:	eb03 0b05 	addhi.w	fp, r3, r5
 8006b38:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006b3c:	608b      	strhi	r3, [r1, #8]
 8006b3e:	680b      	ldr	r3, [r1, #0]
 8006b40:	460a      	mov	r2, r1
 8006b42:	f04f 0500 	mov.w	r5, #0
 8006b46:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006b4a:	f842 3b1c 	str.w	r3, [r2], #28
 8006b4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006b52:	4680      	mov	r8, r0
 8006b54:	460c      	mov	r4, r1
 8006b56:	bf98      	it	ls
 8006b58:	f04f 0b00 	movls.w	fp, #0
 8006b5c:	9201      	str	r2, [sp, #4]
 8006b5e:	4616      	mov	r6, r2
 8006b60:	46aa      	mov	sl, r5
 8006b62:	46a9      	mov	r9, r5
 8006b64:	9502      	str	r5, [sp, #8]
 8006b66:	68a2      	ldr	r2, [r4, #8]
 8006b68:	b152      	cbz	r2, 8006b80 <_scanf_float+0x64>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006b70:	d864      	bhi.n	8006c3c <_scanf_float+0x120>
 8006b72:	2b40      	cmp	r3, #64	@ 0x40
 8006b74:	d83c      	bhi.n	8006bf0 <_scanf_float+0xd4>
 8006b76:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006b7a:	b2c8      	uxtb	r0, r1
 8006b7c:	280e      	cmp	r0, #14
 8006b7e:	d93a      	bls.n	8006bf6 <_scanf_float+0xda>
 8006b80:	f1b9 0f00 	cmp.w	r9, #0
 8006b84:	d003      	beq.n	8006b8e <_scanf_float+0x72>
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b92:	f1ba 0f01 	cmp.w	sl, #1
 8006b96:	f200 8117 	bhi.w	8006dc8 <_scanf_float+0x2ac>
 8006b9a:	9b01      	ldr	r3, [sp, #4]
 8006b9c:	429e      	cmp	r6, r3
 8006b9e:	f200 8108 	bhi.w	8006db2 <_scanf_float+0x296>
 8006ba2:	2001      	movs	r0, #1
 8006ba4:	b007      	add	sp, #28
 8006ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006baa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006bae:	2a0d      	cmp	r2, #13
 8006bb0:	d8e6      	bhi.n	8006b80 <_scanf_float+0x64>
 8006bb2:	a101      	add	r1, pc, #4	@ (adr r1, 8006bb8 <_scanf_float+0x9c>)
 8006bb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006bb8:	08006cff 	.word	0x08006cff
 8006bbc:	08006b81 	.word	0x08006b81
 8006bc0:	08006b81 	.word	0x08006b81
 8006bc4:	08006b81 	.word	0x08006b81
 8006bc8:	08006d5f 	.word	0x08006d5f
 8006bcc:	08006d37 	.word	0x08006d37
 8006bd0:	08006b81 	.word	0x08006b81
 8006bd4:	08006b81 	.word	0x08006b81
 8006bd8:	08006d0d 	.word	0x08006d0d
 8006bdc:	08006b81 	.word	0x08006b81
 8006be0:	08006b81 	.word	0x08006b81
 8006be4:	08006b81 	.word	0x08006b81
 8006be8:	08006b81 	.word	0x08006b81
 8006bec:	08006cc5 	.word	0x08006cc5
 8006bf0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006bf4:	e7db      	b.n	8006bae <_scanf_float+0x92>
 8006bf6:	290e      	cmp	r1, #14
 8006bf8:	d8c2      	bhi.n	8006b80 <_scanf_float+0x64>
 8006bfa:	a001      	add	r0, pc, #4	@ (adr r0, 8006c00 <_scanf_float+0xe4>)
 8006bfc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006c00:	08006cb5 	.word	0x08006cb5
 8006c04:	08006b81 	.word	0x08006b81
 8006c08:	08006cb5 	.word	0x08006cb5
 8006c0c:	08006d4b 	.word	0x08006d4b
 8006c10:	08006b81 	.word	0x08006b81
 8006c14:	08006c5d 	.word	0x08006c5d
 8006c18:	08006c9b 	.word	0x08006c9b
 8006c1c:	08006c9b 	.word	0x08006c9b
 8006c20:	08006c9b 	.word	0x08006c9b
 8006c24:	08006c9b 	.word	0x08006c9b
 8006c28:	08006c9b 	.word	0x08006c9b
 8006c2c:	08006c9b 	.word	0x08006c9b
 8006c30:	08006c9b 	.word	0x08006c9b
 8006c34:	08006c9b 	.word	0x08006c9b
 8006c38:	08006c9b 	.word	0x08006c9b
 8006c3c:	2b6e      	cmp	r3, #110	@ 0x6e
 8006c3e:	d809      	bhi.n	8006c54 <_scanf_float+0x138>
 8006c40:	2b60      	cmp	r3, #96	@ 0x60
 8006c42:	d8b2      	bhi.n	8006baa <_scanf_float+0x8e>
 8006c44:	2b54      	cmp	r3, #84	@ 0x54
 8006c46:	d07b      	beq.n	8006d40 <_scanf_float+0x224>
 8006c48:	2b59      	cmp	r3, #89	@ 0x59
 8006c4a:	d199      	bne.n	8006b80 <_scanf_float+0x64>
 8006c4c:	2d07      	cmp	r5, #7
 8006c4e:	d197      	bne.n	8006b80 <_scanf_float+0x64>
 8006c50:	2508      	movs	r5, #8
 8006c52:	e02c      	b.n	8006cae <_scanf_float+0x192>
 8006c54:	2b74      	cmp	r3, #116	@ 0x74
 8006c56:	d073      	beq.n	8006d40 <_scanf_float+0x224>
 8006c58:	2b79      	cmp	r3, #121	@ 0x79
 8006c5a:	e7f6      	b.n	8006c4a <_scanf_float+0x12e>
 8006c5c:	6821      	ldr	r1, [r4, #0]
 8006c5e:	05c8      	lsls	r0, r1, #23
 8006c60:	d51b      	bpl.n	8006c9a <_scanf_float+0x17e>
 8006c62:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006c66:	6021      	str	r1, [r4, #0]
 8006c68:	f109 0901 	add.w	r9, r9, #1
 8006c6c:	f1bb 0f00 	cmp.w	fp, #0
 8006c70:	d003      	beq.n	8006c7a <_scanf_float+0x15e>
 8006c72:	3201      	adds	r2, #1
 8006c74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c78:	60a2      	str	r2, [r4, #8]
 8006c7a:	68a3      	ldr	r3, [r4, #8]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	60a3      	str	r3, [r4, #8]
 8006c80:	6923      	ldr	r3, [r4, #16]
 8006c82:	3301      	adds	r3, #1
 8006c84:	6123      	str	r3, [r4, #16]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	607b      	str	r3, [r7, #4]
 8006c8e:	f340 8087 	ble.w	8006da0 <_scanf_float+0x284>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	3301      	adds	r3, #1
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	e765      	b.n	8006b66 <_scanf_float+0x4a>
 8006c9a:	eb1a 0105 	adds.w	r1, sl, r5
 8006c9e:	f47f af6f 	bne.w	8006b80 <_scanf_float+0x64>
 8006ca2:	6822      	ldr	r2, [r4, #0]
 8006ca4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006ca8:	6022      	str	r2, [r4, #0]
 8006caa:	460d      	mov	r5, r1
 8006cac:	468a      	mov	sl, r1
 8006cae:	f806 3b01 	strb.w	r3, [r6], #1
 8006cb2:	e7e2      	b.n	8006c7a <_scanf_float+0x15e>
 8006cb4:	6822      	ldr	r2, [r4, #0]
 8006cb6:	0610      	lsls	r0, r2, #24
 8006cb8:	f57f af62 	bpl.w	8006b80 <_scanf_float+0x64>
 8006cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006cc0:	6022      	str	r2, [r4, #0]
 8006cc2:	e7f4      	b.n	8006cae <_scanf_float+0x192>
 8006cc4:	f1ba 0f00 	cmp.w	sl, #0
 8006cc8:	d10e      	bne.n	8006ce8 <_scanf_float+0x1cc>
 8006cca:	f1b9 0f00 	cmp.w	r9, #0
 8006cce:	d10e      	bne.n	8006cee <_scanf_float+0x1d2>
 8006cd0:	6822      	ldr	r2, [r4, #0]
 8006cd2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006cd6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006cda:	d108      	bne.n	8006cee <_scanf_float+0x1d2>
 8006cdc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ce0:	6022      	str	r2, [r4, #0]
 8006ce2:	f04f 0a01 	mov.w	sl, #1
 8006ce6:	e7e2      	b.n	8006cae <_scanf_float+0x192>
 8006ce8:	f1ba 0f02 	cmp.w	sl, #2
 8006cec:	d055      	beq.n	8006d9a <_scanf_float+0x27e>
 8006cee:	2d01      	cmp	r5, #1
 8006cf0:	d002      	beq.n	8006cf8 <_scanf_float+0x1dc>
 8006cf2:	2d04      	cmp	r5, #4
 8006cf4:	f47f af44 	bne.w	8006b80 <_scanf_float+0x64>
 8006cf8:	3501      	adds	r5, #1
 8006cfa:	b2ed      	uxtb	r5, r5
 8006cfc:	e7d7      	b.n	8006cae <_scanf_float+0x192>
 8006cfe:	f1ba 0f01 	cmp.w	sl, #1
 8006d02:	f47f af3d 	bne.w	8006b80 <_scanf_float+0x64>
 8006d06:	f04f 0a02 	mov.w	sl, #2
 8006d0a:	e7d0      	b.n	8006cae <_scanf_float+0x192>
 8006d0c:	b97d      	cbnz	r5, 8006d2e <_scanf_float+0x212>
 8006d0e:	f1b9 0f00 	cmp.w	r9, #0
 8006d12:	f47f af38 	bne.w	8006b86 <_scanf_float+0x6a>
 8006d16:	6822      	ldr	r2, [r4, #0]
 8006d18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006d1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006d20:	f040 8103 	bne.w	8006f2a <_scanf_float+0x40e>
 8006d24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006d28:	6022      	str	r2, [r4, #0]
 8006d2a:	2501      	movs	r5, #1
 8006d2c:	e7bf      	b.n	8006cae <_scanf_float+0x192>
 8006d2e:	2d03      	cmp	r5, #3
 8006d30:	d0e2      	beq.n	8006cf8 <_scanf_float+0x1dc>
 8006d32:	2d05      	cmp	r5, #5
 8006d34:	e7de      	b.n	8006cf4 <_scanf_float+0x1d8>
 8006d36:	2d02      	cmp	r5, #2
 8006d38:	f47f af22 	bne.w	8006b80 <_scanf_float+0x64>
 8006d3c:	2503      	movs	r5, #3
 8006d3e:	e7b6      	b.n	8006cae <_scanf_float+0x192>
 8006d40:	2d06      	cmp	r5, #6
 8006d42:	f47f af1d 	bne.w	8006b80 <_scanf_float+0x64>
 8006d46:	2507      	movs	r5, #7
 8006d48:	e7b1      	b.n	8006cae <_scanf_float+0x192>
 8006d4a:	6822      	ldr	r2, [r4, #0]
 8006d4c:	0591      	lsls	r1, r2, #22
 8006d4e:	f57f af17 	bpl.w	8006b80 <_scanf_float+0x64>
 8006d52:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006d56:	6022      	str	r2, [r4, #0]
 8006d58:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d5c:	e7a7      	b.n	8006cae <_scanf_float+0x192>
 8006d5e:	6822      	ldr	r2, [r4, #0]
 8006d60:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006d64:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006d68:	d006      	beq.n	8006d78 <_scanf_float+0x25c>
 8006d6a:	0550      	lsls	r0, r2, #21
 8006d6c:	f57f af08 	bpl.w	8006b80 <_scanf_float+0x64>
 8006d70:	f1b9 0f00 	cmp.w	r9, #0
 8006d74:	f000 80d9 	beq.w	8006f2a <_scanf_float+0x40e>
 8006d78:	0591      	lsls	r1, r2, #22
 8006d7a:	bf58      	it	pl
 8006d7c:	9902      	ldrpl	r1, [sp, #8]
 8006d7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006d82:	bf58      	it	pl
 8006d84:	eba9 0101 	subpl.w	r1, r9, r1
 8006d88:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006d8c:	bf58      	it	pl
 8006d8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006d92:	6022      	str	r2, [r4, #0]
 8006d94:	f04f 0900 	mov.w	r9, #0
 8006d98:	e789      	b.n	8006cae <_scanf_float+0x192>
 8006d9a:	f04f 0a03 	mov.w	sl, #3
 8006d9e:	e786      	b.n	8006cae <_scanf_float+0x192>
 8006da0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006da4:	4639      	mov	r1, r7
 8006da6:	4640      	mov	r0, r8
 8006da8:	4798      	blx	r3
 8006daa:	2800      	cmp	r0, #0
 8006dac:	f43f aedb 	beq.w	8006b66 <_scanf_float+0x4a>
 8006db0:	e6e6      	b.n	8006b80 <_scanf_float+0x64>
 8006db2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006db6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006dba:	463a      	mov	r2, r7
 8006dbc:	4640      	mov	r0, r8
 8006dbe:	4798      	blx	r3
 8006dc0:	6923      	ldr	r3, [r4, #16]
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	6123      	str	r3, [r4, #16]
 8006dc6:	e6e8      	b.n	8006b9a <_scanf_float+0x7e>
 8006dc8:	1e6b      	subs	r3, r5, #1
 8006dca:	2b06      	cmp	r3, #6
 8006dcc:	d824      	bhi.n	8006e18 <_scanf_float+0x2fc>
 8006dce:	2d02      	cmp	r5, #2
 8006dd0:	d836      	bhi.n	8006e40 <_scanf_float+0x324>
 8006dd2:	9b01      	ldr	r3, [sp, #4]
 8006dd4:	429e      	cmp	r6, r3
 8006dd6:	f67f aee4 	bls.w	8006ba2 <_scanf_float+0x86>
 8006dda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006dde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006de2:	463a      	mov	r2, r7
 8006de4:	4640      	mov	r0, r8
 8006de6:	4798      	blx	r3
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	e7f0      	b.n	8006dd2 <_scanf_float+0x2b6>
 8006df0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006df4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006df8:	463a      	mov	r2, r7
 8006dfa:	4640      	mov	r0, r8
 8006dfc:	4798      	blx	r3
 8006dfe:	6923      	ldr	r3, [r4, #16]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	6123      	str	r3, [r4, #16]
 8006e04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e08:	fa5f fa8a 	uxtb.w	sl, sl
 8006e0c:	f1ba 0f02 	cmp.w	sl, #2
 8006e10:	d1ee      	bne.n	8006df0 <_scanf_float+0x2d4>
 8006e12:	3d03      	subs	r5, #3
 8006e14:	b2ed      	uxtb	r5, r5
 8006e16:	1b76      	subs	r6, r6, r5
 8006e18:	6823      	ldr	r3, [r4, #0]
 8006e1a:	05da      	lsls	r2, r3, #23
 8006e1c:	d530      	bpl.n	8006e80 <_scanf_float+0x364>
 8006e1e:	055b      	lsls	r3, r3, #21
 8006e20:	d511      	bpl.n	8006e46 <_scanf_float+0x32a>
 8006e22:	9b01      	ldr	r3, [sp, #4]
 8006e24:	429e      	cmp	r6, r3
 8006e26:	f67f aebc 	bls.w	8006ba2 <_scanf_float+0x86>
 8006e2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e32:	463a      	mov	r2, r7
 8006e34:	4640      	mov	r0, r8
 8006e36:	4798      	blx	r3
 8006e38:	6923      	ldr	r3, [r4, #16]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	6123      	str	r3, [r4, #16]
 8006e3e:	e7f0      	b.n	8006e22 <_scanf_float+0x306>
 8006e40:	46aa      	mov	sl, r5
 8006e42:	46b3      	mov	fp, r6
 8006e44:	e7de      	b.n	8006e04 <_scanf_float+0x2e8>
 8006e46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006e4a:	6923      	ldr	r3, [r4, #16]
 8006e4c:	2965      	cmp	r1, #101	@ 0x65
 8006e4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e52:	f106 35ff 	add.w	r5, r6, #4294967295
 8006e56:	6123      	str	r3, [r4, #16]
 8006e58:	d00c      	beq.n	8006e74 <_scanf_float+0x358>
 8006e5a:	2945      	cmp	r1, #69	@ 0x45
 8006e5c:	d00a      	beq.n	8006e74 <_scanf_float+0x358>
 8006e5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e62:	463a      	mov	r2, r7
 8006e64:	4640      	mov	r0, r8
 8006e66:	4798      	blx	r3
 8006e68:	6923      	ldr	r3, [r4, #16]
 8006e6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	1eb5      	subs	r5, r6, #2
 8006e72:	6123      	str	r3, [r4, #16]
 8006e74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e78:	463a      	mov	r2, r7
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	4798      	blx	r3
 8006e7e:	462e      	mov	r6, r5
 8006e80:	6822      	ldr	r2, [r4, #0]
 8006e82:	f012 0210 	ands.w	r2, r2, #16
 8006e86:	d001      	beq.n	8006e8c <_scanf_float+0x370>
 8006e88:	2000      	movs	r0, #0
 8006e8a:	e68b      	b.n	8006ba4 <_scanf_float+0x88>
 8006e8c:	7032      	strb	r2, [r6, #0]
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e98:	d11c      	bne.n	8006ed4 <_scanf_float+0x3b8>
 8006e9a:	9b02      	ldr	r3, [sp, #8]
 8006e9c:	454b      	cmp	r3, r9
 8006e9e:	eba3 0209 	sub.w	r2, r3, r9
 8006ea2:	d123      	bne.n	8006eec <_scanf_float+0x3d0>
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	9901      	ldr	r1, [sp, #4]
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	f002 fd25 	bl	80098f8 <_strtod_r>
 8006eae:	9b03      	ldr	r3, [sp, #12]
 8006eb0:	6825      	ldr	r5, [r4, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f015 0f02 	tst.w	r5, #2
 8006eb8:	4606      	mov	r6, r0
 8006eba:	460f      	mov	r7, r1
 8006ebc:	f103 0204 	add.w	r2, r3, #4
 8006ec0:	d01f      	beq.n	8006f02 <_scanf_float+0x3e6>
 8006ec2:	9903      	ldr	r1, [sp, #12]
 8006ec4:	600a      	str	r2, [r1, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	e9c3 6700 	strd	r6, r7, [r3]
 8006ecc:	68e3      	ldr	r3, [r4, #12]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	60e3      	str	r3, [r4, #12]
 8006ed2:	e7d9      	b.n	8006e88 <_scanf_float+0x36c>
 8006ed4:	9b04      	ldr	r3, [sp, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0e4      	beq.n	8006ea4 <_scanf_float+0x388>
 8006eda:	9905      	ldr	r1, [sp, #20]
 8006edc:	230a      	movs	r3, #10
 8006ede:	3101      	adds	r1, #1
 8006ee0:	4640      	mov	r0, r8
 8006ee2:	f002 fd89 	bl	80099f8 <_strtol_r>
 8006ee6:	9b04      	ldr	r3, [sp, #16]
 8006ee8:	9e05      	ldr	r6, [sp, #20]
 8006eea:	1ac2      	subs	r2, r0, r3
 8006eec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006ef0:	429e      	cmp	r6, r3
 8006ef2:	bf28      	it	cs
 8006ef4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006ef8:	490d      	ldr	r1, [pc, #52]	@ (8006f30 <_scanf_float+0x414>)
 8006efa:	4630      	mov	r0, r6
 8006efc:	f000 f94e 	bl	800719c <siprintf>
 8006f00:	e7d0      	b.n	8006ea4 <_scanf_float+0x388>
 8006f02:	076d      	lsls	r5, r5, #29
 8006f04:	d4dd      	bmi.n	8006ec2 <_scanf_float+0x3a6>
 8006f06:	9d03      	ldr	r5, [sp, #12]
 8006f08:	602a      	str	r2, [r5, #0]
 8006f0a:	681d      	ldr	r5, [r3, #0]
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	f7f9 fde4 	bl	8000adc <__aeabi_dcmpun>
 8006f14:	b120      	cbz	r0, 8006f20 <_scanf_float+0x404>
 8006f16:	4807      	ldr	r0, [pc, #28]	@ (8006f34 <_scanf_float+0x418>)
 8006f18:	f000 fafa 	bl	8007510 <nanf>
 8006f1c:	6028      	str	r0, [r5, #0]
 8006f1e:	e7d5      	b.n	8006ecc <_scanf_float+0x3b0>
 8006f20:	4630      	mov	r0, r6
 8006f22:	4639      	mov	r1, r7
 8006f24:	f7f9 fe38 	bl	8000b98 <__aeabi_d2f>
 8006f28:	e7f8      	b.n	8006f1c <_scanf_float+0x400>
 8006f2a:	f04f 0900 	mov.w	r9, #0
 8006f2e:	e62e      	b.n	8006b8e <_scanf_float+0x72>
 8006f30:	0800b4da 	.word	0x0800b4da
 8006f34:	0800b890 	.word	0x0800b890

08006f38 <std>:
 8006f38:	2300      	movs	r3, #0
 8006f3a:	b510      	push	{r4, lr}
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f46:	6083      	str	r3, [r0, #8]
 8006f48:	8181      	strh	r1, [r0, #12]
 8006f4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f4c:	81c2      	strh	r2, [r0, #14]
 8006f4e:	6183      	str	r3, [r0, #24]
 8006f50:	4619      	mov	r1, r3
 8006f52:	2208      	movs	r2, #8
 8006f54:	305c      	adds	r0, #92	@ 0x5c
 8006f56:	f000 fa45 	bl	80073e4 <memset>
 8006f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f90 <std+0x58>)
 8006f5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f94 <std+0x5c>)
 8006f60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f62:	4b0d      	ldr	r3, [pc, #52]	@ (8006f98 <std+0x60>)
 8006f64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f66:	4b0d      	ldr	r3, [pc, #52]	@ (8006f9c <std+0x64>)
 8006f68:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa0 <std+0x68>)
 8006f6c:	6224      	str	r4, [r4, #32]
 8006f6e:	429c      	cmp	r4, r3
 8006f70:	d006      	beq.n	8006f80 <std+0x48>
 8006f72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f76:	4294      	cmp	r4, r2
 8006f78:	d002      	beq.n	8006f80 <std+0x48>
 8006f7a:	33d0      	adds	r3, #208	@ 0xd0
 8006f7c:	429c      	cmp	r4, r3
 8006f7e:	d105      	bne.n	8006f8c <std+0x54>
 8006f80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f88:	f000 babe 	b.w	8007508 <__retarget_lock_init_recursive>
 8006f8c:	bd10      	pop	{r4, pc}
 8006f8e:	bf00      	nop
 8006f90:	08007231 	.word	0x08007231
 8006f94:	08007257 	.word	0x08007257
 8006f98:	0800728f 	.word	0x0800728f
 8006f9c:	080072b3 	.word	0x080072b3
 8006fa0:	200003c0 	.word	0x200003c0

08006fa4 <stdio_exit_handler>:
 8006fa4:	4a02      	ldr	r2, [pc, #8]	@ (8006fb0 <stdio_exit_handler+0xc>)
 8006fa6:	4903      	ldr	r1, [pc, #12]	@ (8006fb4 <stdio_exit_handler+0x10>)
 8006fa8:	4803      	ldr	r0, [pc, #12]	@ (8006fb8 <stdio_exit_handler+0x14>)
 8006faa:	f000 b869 	b.w	8007080 <_fwalk_sglue>
 8006fae:	bf00      	nop
 8006fb0:	2000000c 	.word	0x2000000c
 8006fb4:	0800a661 	.word	0x0800a661
 8006fb8:	2000001c 	.word	0x2000001c

08006fbc <cleanup_stdio>:
 8006fbc:	6841      	ldr	r1, [r0, #4]
 8006fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff0 <cleanup_stdio+0x34>)
 8006fc0:	4299      	cmp	r1, r3
 8006fc2:	b510      	push	{r4, lr}
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	d001      	beq.n	8006fcc <cleanup_stdio+0x10>
 8006fc8:	f003 fb4a 	bl	800a660 <_fflush_r>
 8006fcc:	68a1      	ldr	r1, [r4, #8]
 8006fce:	4b09      	ldr	r3, [pc, #36]	@ (8006ff4 <cleanup_stdio+0x38>)
 8006fd0:	4299      	cmp	r1, r3
 8006fd2:	d002      	beq.n	8006fda <cleanup_stdio+0x1e>
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f003 fb43 	bl	800a660 <_fflush_r>
 8006fda:	68e1      	ldr	r1, [r4, #12]
 8006fdc:	4b06      	ldr	r3, [pc, #24]	@ (8006ff8 <cleanup_stdio+0x3c>)
 8006fde:	4299      	cmp	r1, r3
 8006fe0:	d004      	beq.n	8006fec <cleanup_stdio+0x30>
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fe8:	f003 bb3a 	b.w	800a660 <_fflush_r>
 8006fec:	bd10      	pop	{r4, pc}
 8006fee:	bf00      	nop
 8006ff0:	200003c0 	.word	0x200003c0
 8006ff4:	20000428 	.word	0x20000428
 8006ff8:	20000490 	.word	0x20000490

08006ffc <global_stdio_init.part.0>:
 8006ffc:	b510      	push	{r4, lr}
 8006ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800702c <global_stdio_init.part.0+0x30>)
 8007000:	4c0b      	ldr	r4, [pc, #44]	@ (8007030 <global_stdio_init.part.0+0x34>)
 8007002:	4a0c      	ldr	r2, [pc, #48]	@ (8007034 <global_stdio_init.part.0+0x38>)
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	4620      	mov	r0, r4
 8007008:	2200      	movs	r2, #0
 800700a:	2104      	movs	r1, #4
 800700c:	f7ff ff94 	bl	8006f38 <std>
 8007010:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007014:	2201      	movs	r2, #1
 8007016:	2109      	movs	r1, #9
 8007018:	f7ff ff8e 	bl	8006f38 <std>
 800701c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007020:	2202      	movs	r2, #2
 8007022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007026:	2112      	movs	r1, #18
 8007028:	f7ff bf86 	b.w	8006f38 <std>
 800702c:	200004f8 	.word	0x200004f8
 8007030:	200003c0 	.word	0x200003c0
 8007034:	08006fa5 	.word	0x08006fa5

08007038 <__sfp_lock_acquire>:
 8007038:	4801      	ldr	r0, [pc, #4]	@ (8007040 <__sfp_lock_acquire+0x8>)
 800703a:	f000 ba66 	b.w	800750a <__retarget_lock_acquire_recursive>
 800703e:	bf00      	nop
 8007040:	20000501 	.word	0x20000501

08007044 <__sfp_lock_release>:
 8007044:	4801      	ldr	r0, [pc, #4]	@ (800704c <__sfp_lock_release+0x8>)
 8007046:	f000 ba61 	b.w	800750c <__retarget_lock_release_recursive>
 800704a:	bf00      	nop
 800704c:	20000501 	.word	0x20000501

08007050 <__sinit>:
 8007050:	b510      	push	{r4, lr}
 8007052:	4604      	mov	r4, r0
 8007054:	f7ff fff0 	bl	8007038 <__sfp_lock_acquire>
 8007058:	6a23      	ldr	r3, [r4, #32]
 800705a:	b11b      	cbz	r3, 8007064 <__sinit+0x14>
 800705c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007060:	f7ff bff0 	b.w	8007044 <__sfp_lock_release>
 8007064:	4b04      	ldr	r3, [pc, #16]	@ (8007078 <__sinit+0x28>)
 8007066:	6223      	str	r3, [r4, #32]
 8007068:	4b04      	ldr	r3, [pc, #16]	@ (800707c <__sinit+0x2c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1f5      	bne.n	800705c <__sinit+0xc>
 8007070:	f7ff ffc4 	bl	8006ffc <global_stdio_init.part.0>
 8007074:	e7f2      	b.n	800705c <__sinit+0xc>
 8007076:	bf00      	nop
 8007078:	08006fbd 	.word	0x08006fbd
 800707c:	200004f8 	.word	0x200004f8

08007080 <_fwalk_sglue>:
 8007080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007084:	4607      	mov	r7, r0
 8007086:	4688      	mov	r8, r1
 8007088:	4614      	mov	r4, r2
 800708a:	2600      	movs	r6, #0
 800708c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007090:	f1b9 0901 	subs.w	r9, r9, #1
 8007094:	d505      	bpl.n	80070a2 <_fwalk_sglue+0x22>
 8007096:	6824      	ldr	r4, [r4, #0]
 8007098:	2c00      	cmp	r4, #0
 800709a:	d1f7      	bne.n	800708c <_fwalk_sglue+0xc>
 800709c:	4630      	mov	r0, r6
 800709e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070a2:	89ab      	ldrh	r3, [r5, #12]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d907      	bls.n	80070b8 <_fwalk_sglue+0x38>
 80070a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070ac:	3301      	adds	r3, #1
 80070ae:	d003      	beq.n	80070b8 <_fwalk_sglue+0x38>
 80070b0:	4629      	mov	r1, r5
 80070b2:	4638      	mov	r0, r7
 80070b4:	47c0      	blx	r8
 80070b6:	4306      	orrs	r6, r0
 80070b8:	3568      	adds	r5, #104	@ 0x68
 80070ba:	e7e9      	b.n	8007090 <_fwalk_sglue+0x10>

080070bc <iprintf>:
 80070bc:	b40f      	push	{r0, r1, r2, r3}
 80070be:	b507      	push	{r0, r1, r2, lr}
 80070c0:	4906      	ldr	r1, [pc, #24]	@ (80070dc <iprintf+0x20>)
 80070c2:	ab04      	add	r3, sp, #16
 80070c4:	6808      	ldr	r0, [r1, #0]
 80070c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ca:	6881      	ldr	r1, [r0, #8]
 80070cc:	9301      	str	r3, [sp, #4]
 80070ce:	f002 ffe1 	bl	800a094 <_vfiprintf_r>
 80070d2:	b003      	add	sp, #12
 80070d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80070d8:	b004      	add	sp, #16
 80070da:	4770      	bx	lr
 80070dc:	20000018 	.word	0x20000018

080070e0 <_puts_r>:
 80070e0:	6a03      	ldr	r3, [r0, #32]
 80070e2:	b570      	push	{r4, r5, r6, lr}
 80070e4:	6884      	ldr	r4, [r0, #8]
 80070e6:	4605      	mov	r5, r0
 80070e8:	460e      	mov	r6, r1
 80070ea:	b90b      	cbnz	r3, 80070f0 <_puts_r+0x10>
 80070ec:	f7ff ffb0 	bl	8007050 <__sinit>
 80070f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070f2:	07db      	lsls	r3, r3, #31
 80070f4:	d405      	bmi.n	8007102 <_puts_r+0x22>
 80070f6:	89a3      	ldrh	r3, [r4, #12]
 80070f8:	0598      	lsls	r0, r3, #22
 80070fa:	d402      	bmi.n	8007102 <_puts_r+0x22>
 80070fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070fe:	f000 fa04 	bl	800750a <__retarget_lock_acquire_recursive>
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	0719      	lsls	r1, r3, #28
 8007106:	d502      	bpl.n	800710e <_puts_r+0x2e>
 8007108:	6923      	ldr	r3, [r4, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d135      	bne.n	800717a <_puts_r+0x9a>
 800710e:	4621      	mov	r1, r4
 8007110:	4628      	mov	r0, r5
 8007112:	f000 f911 	bl	8007338 <__swsetup_r>
 8007116:	b380      	cbz	r0, 800717a <_puts_r+0x9a>
 8007118:	f04f 35ff 	mov.w	r5, #4294967295
 800711c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800711e:	07da      	lsls	r2, r3, #31
 8007120:	d405      	bmi.n	800712e <_puts_r+0x4e>
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	059b      	lsls	r3, r3, #22
 8007126:	d402      	bmi.n	800712e <_puts_r+0x4e>
 8007128:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800712a:	f000 f9ef 	bl	800750c <__retarget_lock_release_recursive>
 800712e:	4628      	mov	r0, r5
 8007130:	bd70      	pop	{r4, r5, r6, pc}
 8007132:	2b00      	cmp	r3, #0
 8007134:	da04      	bge.n	8007140 <_puts_r+0x60>
 8007136:	69a2      	ldr	r2, [r4, #24]
 8007138:	429a      	cmp	r2, r3
 800713a:	dc17      	bgt.n	800716c <_puts_r+0x8c>
 800713c:	290a      	cmp	r1, #10
 800713e:	d015      	beq.n	800716c <_puts_r+0x8c>
 8007140:	6823      	ldr	r3, [r4, #0]
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	6022      	str	r2, [r4, #0]
 8007146:	7019      	strb	r1, [r3, #0]
 8007148:	68a3      	ldr	r3, [r4, #8]
 800714a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800714e:	3b01      	subs	r3, #1
 8007150:	60a3      	str	r3, [r4, #8]
 8007152:	2900      	cmp	r1, #0
 8007154:	d1ed      	bne.n	8007132 <_puts_r+0x52>
 8007156:	2b00      	cmp	r3, #0
 8007158:	da11      	bge.n	800717e <_puts_r+0x9e>
 800715a:	4622      	mov	r2, r4
 800715c:	210a      	movs	r1, #10
 800715e:	4628      	mov	r0, r5
 8007160:	f000 f8ab 	bl	80072ba <__swbuf_r>
 8007164:	3001      	adds	r0, #1
 8007166:	d0d7      	beq.n	8007118 <_puts_r+0x38>
 8007168:	250a      	movs	r5, #10
 800716a:	e7d7      	b.n	800711c <_puts_r+0x3c>
 800716c:	4622      	mov	r2, r4
 800716e:	4628      	mov	r0, r5
 8007170:	f000 f8a3 	bl	80072ba <__swbuf_r>
 8007174:	3001      	adds	r0, #1
 8007176:	d1e7      	bne.n	8007148 <_puts_r+0x68>
 8007178:	e7ce      	b.n	8007118 <_puts_r+0x38>
 800717a:	3e01      	subs	r6, #1
 800717c:	e7e4      	b.n	8007148 <_puts_r+0x68>
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	6022      	str	r2, [r4, #0]
 8007184:	220a      	movs	r2, #10
 8007186:	701a      	strb	r2, [r3, #0]
 8007188:	e7ee      	b.n	8007168 <_puts_r+0x88>
	...

0800718c <puts>:
 800718c:	4b02      	ldr	r3, [pc, #8]	@ (8007198 <puts+0xc>)
 800718e:	4601      	mov	r1, r0
 8007190:	6818      	ldr	r0, [r3, #0]
 8007192:	f7ff bfa5 	b.w	80070e0 <_puts_r>
 8007196:	bf00      	nop
 8007198:	20000018 	.word	0x20000018

0800719c <siprintf>:
 800719c:	b40e      	push	{r1, r2, r3}
 800719e:	b500      	push	{lr}
 80071a0:	b09c      	sub	sp, #112	@ 0x70
 80071a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80071a4:	9002      	str	r0, [sp, #8]
 80071a6:	9006      	str	r0, [sp, #24]
 80071a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80071ac:	4809      	ldr	r0, [pc, #36]	@ (80071d4 <siprintf+0x38>)
 80071ae:	9107      	str	r1, [sp, #28]
 80071b0:	9104      	str	r1, [sp, #16]
 80071b2:	4909      	ldr	r1, [pc, #36]	@ (80071d8 <siprintf+0x3c>)
 80071b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b8:	9105      	str	r1, [sp, #20]
 80071ba:	6800      	ldr	r0, [r0, #0]
 80071bc:	9301      	str	r3, [sp, #4]
 80071be:	a902      	add	r1, sp, #8
 80071c0:	f002 fc78 	bl	8009ab4 <_svfiprintf_r>
 80071c4:	9b02      	ldr	r3, [sp, #8]
 80071c6:	2200      	movs	r2, #0
 80071c8:	701a      	strb	r2, [r3, #0]
 80071ca:	b01c      	add	sp, #112	@ 0x70
 80071cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80071d0:	b003      	add	sp, #12
 80071d2:	4770      	bx	lr
 80071d4:	20000018 	.word	0x20000018
 80071d8:	ffff0208 	.word	0xffff0208

080071dc <siscanf>:
 80071dc:	b40e      	push	{r1, r2, r3}
 80071de:	b530      	push	{r4, r5, lr}
 80071e0:	b09c      	sub	sp, #112	@ 0x70
 80071e2:	ac1f      	add	r4, sp, #124	@ 0x7c
 80071e4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80071e8:	f854 5b04 	ldr.w	r5, [r4], #4
 80071ec:	f8ad 2014 	strh.w	r2, [sp, #20]
 80071f0:	9002      	str	r0, [sp, #8]
 80071f2:	9006      	str	r0, [sp, #24]
 80071f4:	f7f9 f814 	bl	8000220 <strlen>
 80071f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007228 <siscanf+0x4c>)
 80071fa:	9003      	str	r0, [sp, #12]
 80071fc:	9007      	str	r0, [sp, #28]
 80071fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007200:	480a      	ldr	r0, [pc, #40]	@ (800722c <siscanf+0x50>)
 8007202:	9401      	str	r4, [sp, #4]
 8007204:	2300      	movs	r3, #0
 8007206:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007208:	9314      	str	r3, [sp, #80]	@ 0x50
 800720a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800720e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007212:	462a      	mov	r2, r5
 8007214:	4623      	mov	r3, r4
 8007216:	a902      	add	r1, sp, #8
 8007218:	6800      	ldr	r0, [r0, #0]
 800721a:	f002 fd9f 	bl	8009d5c <__ssvfiscanf_r>
 800721e:	b01c      	add	sp, #112	@ 0x70
 8007220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007224:	b003      	add	sp, #12
 8007226:	4770      	bx	lr
 8007228:	08007253 	.word	0x08007253
 800722c:	20000018 	.word	0x20000018

08007230 <__sread>:
 8007230:	b510      	push	{r4, lr}
 8007232:	460c      	mov	r4, r1
 8007234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007238:	f000 f918 	bl	800746c <_read_r>
 800723c:	2800      	cmp	r0, #0
 800723e:	bfab      	itete	ge
 8007240:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007242:	89a3      	ldrhlt	r3, [r4, #12]
 8007244:	181b      	addge	r3, r3, r0
 8007246:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800724a:	bfac      	ite	ge
 800724c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800724e:	81a3      	strhlt	r3, [r4, #12]
 8007250:	bd10      	pop	{r4, pc}

08007252 <__seofread>:
 8007252:	2000      	movs	r0, #0
 8007254:	4770      	bx	lr

08007256 <__swrite>:
 8007256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800725a:	461f      	mov	r7, r3
 800725c:	898b      	ldrh	r3, [r1, #12]
 800725e:	05db      	lsls	r3, r3, #23
 8007260:	4605      	mov	r5, r0
 8007262:	460c      	mov	r4, r1
 8007264:	4616      	mov	r6, r2
 8007266:	d505      	bpl.n	8007274 <__swrite+0x1e>
 8007268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800726c:	2302      	movs	r3, #2
 800726e:	2200      	movs	r2, #0
 8007270:	f000 f8ea 	bl	8007448 <_lseek_r>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800727a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800727e:	81a3      	strh	r3, [r4, #12]
 8007280:	4632      	mov	r2, r6
 8007282:	463b      	mov	r3, r7
 8007284:	4628      	mov	r0, r5
 8007286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800728a:	f000 b901 	b.w	8007490 <_write_r>

0800728e <__sseek>:
 800728e:	b510      	push	{r4, lr}
 8007290:	460c      	mov	r4, r1
 8007292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007296:	f000 f8d7 	bl	8007448 <_lseek_r>
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	bf15      	itete	ne
 80072a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80072a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80072aa:	81a3      	strheq	r3, [r4, #12]
 80072ac:	bf18      	it	ne
 80072ae:	81a3      	strhne	r3, [r4, #12]
 80072b0:	bd10      	pop	{r4, pc}

080072b2 <__sclose>:
 80072b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b6:	f000 b8b7 	b.w	8007428 <_close_r>

080072ba <__swbuf_r>:
 80072ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072bc:	460e      	mov	r6, r1
 80072be:	4614      	mov	r4, r2
 80072c0:	4605      	mov	r5, r0
 80072c2:	b118      	cbz	r0, 80072cc <__swbuf_r+0x12>
 80072c4:	6a03      	ldr	r3, [r0, #32]
 80072c6:	b90b      	cbnz	r3, 80072cc <__swbuf_r+0x12>
 80072c8:	f7ff fec2 	bl	8007050 <__sinit>
 80072cc:	69a3      	ldr	r3, [r4, #24]
 80072ce:	60a3      	str	r3, [r4, #8]
 80072d0:	89a3      	ldrh	r3, [r4, #12]
 80072d2:	071a      	lsls	r2, r3, #28
 80072d4:	d501      	bpl.n	80072da <__swbuf_r+0x20>
 80072d6:	6923      	ldr	r3, [r4, #16]
 80072d8:	b943      	cbnz	r3, 80072ec <__swbuf_r+0x32>
 80072da:	4621      	mov	r1, r4
 80072dc:	4628      	mov	r0, r5
 80072de:	f000 f82b 	bl	8007338 <__swsetup_r>
 80072e2:	b118      	cbz	r0, 80072ec <__swbuf_r+0x32>
 80072e4:	f04f 37ff 	mov.w	r7, #4294967295
 80072e8:	4638      	mov	r0, r7
 80072ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	6922      	ldr	r2, [r4, #16]
 80072f0:	1a98      	subs	r0, r3, r2
 80072f2:	6963      	ldr	r3, [r4, #20]
 80072f4:	b2f6      	uxtb	r6, r6
 80072f6:	4283      	cmp	r3, r0
 80072f8:	4637      	mov	r7, r6
 80072fa:	dc05      	bgt.n	8007308 <__swbuf_r+0x4e>
 80072fc:	4621      	mov	r1, r4
 80072fe:	4628      	mov	r0, r5
 8007300:	f003 f9ae 	bl	800a660 <_fflush_r>
 8007304:	2800      	cmp	r0, #0
 8007306:	d1ed      	bne.n	80072e4 <__swbuf_r+0x2a>
 8007308:	68a3      	ldr	r3, [r4, #8]
 800730a:	3b01      	subs	r3, #1
 800730c:	60a3      	str	r3, [r4, #8]
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	6022      	str	r2, [r4, #0]
 8007314:	701e      	strb	r6, [r3, #0]
 8007316:	6962      	ldr	r2, [r4, #20]
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	429a      	cmp	r2, r3
 800731c:	d004      	beq.n	8007328 <__swbuf_r+0x6e>
 800731e:	89a3      	ldrh	r3, [r4, #12]
 8007320:	07db      	lsls	r3, r3, #31
 8007322:	d5e1      	bpl.n	80072e8 <__swbuf_r+0x2e>
 8007324:	2e0a      	cmp	r6, #10
 8007326:	d1df      	bne.n	80072e8 <__swbuf_r+0x2e>
 8007328:	4621      	mov	r1, r4
 800732a:	4628      	mov	r0, r5
 800732c:	f003 f998 	bl	800a660 <_fflush_r>
 8007330:	2800      	cmp	r0, #0
 8007332:	d0d9      	beq.n	80072e8 <__swbuf_r+0x2e>
 8007334:	e7d6      	b.n	80072e4 <__swbuf_r+0x2a>
	...

08007338 <__swsetup_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	4b29      	ldr	r3, [pc, #164]	@ (80073e0 <__swsetup_r+0xa8>)
 800733c:	4605      	mov	r5, r0
 800733e:	6818      	ldr	r0, [r3, #0]
 8007340:	460c      	mov	r4, r1
 8007342:	b118      	cbz	r0, 800734c <__swsetup_r+0x14>
 8007344:	6a03      	ldr	r3, [r0, #32]
 8007346:	b90b      	cbnz	r3, 800734c <__swsetup_r+0x14>
 8007348:	f7ff fe82 	bl	8007050 <__sinit>
 800734c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007350:	0719      	lsls	r1, r3, #28
 8007352:	d422      	bmi.n	800739a <__swsetup_r+0x62>
 8007354:	06da      	lsls	r2, r3, #27
 8007356:	d407      	bmi.n	8007368 <__swsetup_r+0x30>
 8007358:	2209      	movs	r2, #9
 800735a:	602a      	str	r2, [r5, #0]
 800735c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007360:	81a3      	strh	r3, [r4, #12]
 8007362:	f04f 30ff 	mov.w	r0, #4294967295
 8007366:	e033      	b.n	80073d0 <__swsetup_r+0x98>
 8007368:	0758      	lsls	r0, r3, #29
 800736a:	d512      	bpl.n	8007392 <__swsetup_r+0x5a>
 800736c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800736e:	b141      	cbz	r1, 8007382 <__swsetup_r+0x4a>
 8007370:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007374:	4299      	cmp	r1, r3
 8007376:	d002      	beq.n	800737e <__swsetup_r+0x46>
 8007378:	4628      	mov	r0, r5
 800737a:	f000 ff1d 	bl	80081b8 <_free_r>
 800737e:	2300      	movs	r3, #0
 8007380:	6363      	str	r3, [r4, #52]	@ 0x34
 8007382:	89a3      	ldrh	r3, [r4, #12]
 8007384:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007388:	81a3      	strh	r3, [r4, #12]
 800738a:	2300      	movs	r3, #0
 800738c:	6063      	str	r3, [r4, #4]
 800738e:	6923      	ldr	r3, [r4, #16]
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	f043 0308 	orr.w	r3, r3, #8
 8007398:	81a3      	strh	r3, [r4, #12]
 800739a:	6923      	ldr	r3, [r4, #16]
 800739c:	b94b      	cbnz	r3, 80073b2 <__swsetup_r+0x7a>
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80073a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073a8:	d003      	beq.n	80073b2 <__swsetup_r+0x7a>
 80073aa:	4621      	mov	r1, r4
 80073ac:	4628      	mov	r0, r5
 80073ae:	f003 f9a5 	bl	800a6fc <__smakebuf_r>
 80073b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073b6:	f013 0201 	ands.w	r2, r3, #1
 80073ba:	d00a      	beq.n	80073d2 <__swsetup_r+0x9a>
 80073bc:	2200      	movs	r2, #0
 80073be:	60a2      	str	r2, [r4, #8]
 80073c0:	6962      	ldr	r2, [r4, #20]
 80073c2:	4252      	negs	r2, r2
 80073c4:	61a2      	str	r2, [r4, #24]
 80073c6:	6922      	ldr	r2, [r4, #16]
 80073c8:	b942      	cbnz	r2, 80073dc <__swsetup_r+0xa4>
 80073ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80073ce:	d1c5      	bne.n	800735c <__swsetup_r+0x24>
 80073d0:	bd38      	pop	{r3, r4, r5, pc}
 80073d2:	0799      	lsls	r1, r3, #30
 80073d4:	bf58      	it	pl
 80073d6:	6962      	ldrpl	r2, [r4, #20]
 80073d8:	60a2      	str	r2, [r4, #8]
 80073da:	e7f4      	b.n	80073c6 <__swsetup_r+0x8e>
 80073dc:	2000      	movs	r0, #0
 80073de:	e7f7      	b.n	80073d0 <__swsetup_r+0x98>
 80073e0:	20000018 	.word	0x20000018

080073e4 <memset>:
 80073e4:	4402      	add	r2, r0
 80073e6:	4603      	mov	r3, r0
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d100      	bne.n	80073ee <memset+0xa>
 80073ec:	4770      	bx	lr
 80073ee:	f803 1b01 	strb.w	r1, [r3], #1
 80073f2:	e7f9      	b.n	80073e8 <memset+0x4>

080073f4 <strstr>:
 80073f4:	780a      	ldrb	r2, [r1, #0]
 80073f6:	b570      	push	{r4, r5, r6, lr}
 80073f8:	b96a      	cbnz	r2, 8007416 <strstr+0x22>
 80073fa:	bd70      	pop	{r4, r5, r6, pc}
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d109      	bne.n	8007414 <strstr+0x20>
 8007400:	460c      	mov	r4, r1
 8007402:	4605      	mov	r5, r0
 8007404:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0f6      	beq.n	80073fa <strstr+0x6>
 800740c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007410:	429e      	cmp	r6, r3
 8007412:	d0f7      	beq.n	8007404 <strstr+0x10>
 8007414:	3001      	adds	r0, #1
 8007416:	7803      	ldrb	r3, [r0, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1ef      	bne.n	80073fc <strstr+0x8>
 800741c:	4618      	mov	r0, r3
 800741e:	e7ec      	b.n	80073fa <strstr+0x6>

08007420 <_localeconv_r>:
 8007420:	4800      	ldr	r0, [pc, #0]	@ (8007424 <_localeconv_r+0x4>)
 8007422:	4770      	bx	lr
 8007424:	20000158 	.word	0x20000158

08007428 <_close_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4d06      	ldr	r5, [pc, #24]	@ (8007444 <_close_r+0x1c>)
 800742c:	2300      	movs	r3, #0
 800742e:	4604      	mov	r4, r0
 8007430:	4608      	mov	r0, r1
 8007432:	602b      	str	r3, [r5, #0]
 8007434:	f7fa fdc7 	bl	8001fc6 <_close>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d102      	bne.n	8007442 <_close_r+0x1a>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	b103      	cbz	r3, 8007442 <_close_r+0x1a>
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	bd38      	pop	{r3, r4, r5, pc}
 8007444:	200004fc 	.word	0x200004fc

08007448 <_lseek_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	4d07      	ldr	r5, [pc, #28]	@ (8007468 <_lseek_r+0x20>)
 800744c:	4604      	mov	r4, r0
 800744e:	4608      	mov	r0, r1
 8007450:	4611      	mov	r1, r2
 8007452:	2200      	movs	r2, #0
 8007454:	602a      	str	r2, [r5, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	f7fa fdd9 	bl	800200e <_lseek>
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	d102      	bne.n	8007466 <_lseek_r+0x1e>
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	b103      	cbz	r3, 8007466 <_lseek_r+0x1e>
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	bd38      	pop	{r3, r4, r5, pc}
 8007468:	200004fc 	.word	0x200004fc

0800746c <_read_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4d07      	ldr	r5, [pc, #28]	@ (800748c <_read_r+0x20>)
 8007470:	4604      	mov	r4, r0
 8007472:	4608      	mov	r0, r1
 8007474:	4611      	mov	r1, r2
 8007476:	2200      	movs	r2, #0
 8007478:	602a      	str	r2, [r5, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	f7fa fd86 	bl	8001f8c <_read>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_read_r+0x1e>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	b103      	cbz	r3, 800748a <_read_r+0x1e>
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	200004fc 	.word	0x200004fc

08007490 <_write_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4d07      	ldr	r5, [pc, #28]	@ (80074b0 <_write_r+0x20>)
 8007494:	4604      	mov	r4, r0
 8007496:	4608      	mov	r0, r1
 8007498:	4611      	mov	r1, r2
 800749a:	2200      	movs	r2, #0
 800749c:	602a      	str	r2, [r5, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	f7fa fa02 	bl	80018a8 <_write>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_write_r+0x1e>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_write_r+0x1e>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	200004fc 	.word	0x200004fc

080074b4 <__errno>:
 80074b4:	4b01      	ldr	r3, [pc, #4]	@ (80074bc <__errno+0x8>)
 80074b6:	6818      	ldr	r0, [r3, #0]
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	20000018 	.word	0x20000018

080074c0 <__libc_init_array>:
 80074c0:	b570      	push	{r4, r5, r6, lr}
 80074c2:	4d0d      	ldr	r5, [pc, #52]	@ (80074f8 <__libc_init_array+0x38>)
 80074c4:	4c0d      	ldr	r4, [pc, #52]	@ (80074fc <__libc_init_array+0x3c>)
 80074c6:	1b64      	subs	r4, r4, r5
 80074c8:	10a4      	asrs	r4, r4, #2
 80074ca:	2600      	movs	r6, #0
 80074cc:	42a6      	cmp	r6, r4
 80074ce:	d109      	bne.n	80074e4 <__libc_init_array+0x24>
 80074d0:	4d0b      	ldr	r5, [pc, #44]	@ (8007500 <__libc_init_array+0x40>)
 80074d2:	4c0c      	ldr	r4, [pc, #48]	@ (8007504 <__libc_init_array+0x44>)
 80074d4:	f003 fec4 	bl	800b260 <_init>
 80074d8:	1b64      	subs	r4, r4, r5
 80074da:	10a4      	asrs	r4, r4, #2
 80074dc:	2600      	movs	r6, #0
 80074de:	42a6      	cmp	r6, r4
 80074e0:	d105      	bne.n	80074ee <__libc_init_array+0x2e>
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e8:	4798      	blx	r3
 80074ea:	3601      	adds	r6, #1
 80074ec:	e7ee      	b.n	80074cc <__libc_init_array+0xc>
 80074ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f2:	4798      	blx	r3
 80074f4:	3601      	adds	r6, #1
 80074f6:	e7f2      	b.n	80074de <__libc_init_array+0x1e>
 80074f8:	0800b8fc 	.word	0x0800b8fc
 80074fc:	0800b8fc 	.word	0x0800b8fc
 8007500:	0800b8fc 	.word	0x0800b8fc
 8007504:	0800b900 	.word	0x0800b900

08007508 <__retarget_lock_init_recursive>:
 8007508:	4770      	bx	lr

0800750a <__retarget_lock_acquire_recursive>:
 800750a:	4770      	bx	lr

0800750c <__retarget_lock_release_recursive>:
 800750c:	4770      	bx	lr
	...

08007510 <nanf>:
 8007510:	4800      	ldr	r0, [pc, #0]	@ (8007514 <nanf+0x4>)
 8007512:	4770      	bx	lr
 8007514:	7fc00000 	.word	0x7fc00000

08007518 <quorem>:
 8007518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751c:	6903      	ldr	r3, [r0, #16]
 800751e:	690c      	ldr	r4, [r1, #16]
 8007520:	42a3      	cmp	r3, r4
 8007522:	4607      	mov	r7, r0
 8007524:	db7e      	blt.n	8007624 <quorem+0x10c>
 8007526:	3c01      	subs	r4, #1
 8007528:	f101 0814 	add.w	r8, r1, #20
 800752c:	00a3      	lsls	r3, r4, #2
 800752e:	f100 0514 	add.w	r5, r0, #20
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007538:	9301      	str	r3, [sp, #4]
 800753a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800753e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007542:	3301      	adds	r3, #1
 8007544:	429a      	cmp	r2, r3
 8007546:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800754a:	fbb2 f6f3 	udiv	r6, r2, r3
 800754e:	d32e      	bcc.n	80075ae <quorem+0x96>
 8007550:	f04f 0a00 	mov.w	sl, #0
 8007554:	46c4      	mov	ip, r8
 8007556:	46ae      	mov	lr, r5
 8007558:	46d3      	mov	fp, sl
 800755a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800755e:	b298      	uxth	r0, r3
 8007560:	fb06 a000 	mla	r0, r6, r0, sl
 8007564:	0c02      	lsrs	r2, r0, #16
 8007566:	0c1b      	lsrs	r3, r3, #16
 8007568:	fb06 2303 	mla	r3, r6, r3, r2
 800756c:	f8de 2000 	ldr.w	r2, [lr]
 8007570:	b280      	uxth	r0, r0
 8007572:	b292      	uxth	r2, r2
 8007574:	1a12      	subs	r2, r2, r0
 8007576:	445a      	add	r2, fp
 8007578:	f8de 0000 	ldr.w	r0, [lr]
 800757c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007580:	b29b      	uxth	r3, r3
 8007582:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007586:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800758a:	b292      	uxth	r2, r2
 800758c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007590:	45e1      	cmp	r9, ip
 8007592:	f84e 2b04 	str.w	r2, [lr], #4
 8007596:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800759a:	d2de      	bcs.n	800755a <quorem+0x42>
 800759c:	9b00      	ldr	r3, [sp, #0]
 800759e:	58eb      	ldr	r3, [r5, r3]
 80075a0:	b92b      	cbnz	r3, 80075ae <quorem+0x96>
 80075a2:	9b01      	ldr	r3, [sp, #4]
 80075a4:	3b04      	subs	r3, #4
 80075a6:	429d      	cmp	r5, r3
 80075a8:	461a      	mov	r2, r3
 80075aa:	d32f      	bcc.n	800760c <quorem+0xf4>
 80075ac:	613c      	str	r4, [r7, #16]
 80075ae:	4638      	mov	r0, r7
 80075b0:	f001 f9c6 	bl	8008940 <__mcmp>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	db25      	blt.n	8007604 <quorem+0xec>
 80075b8:	4629      	mov	r1, r5
 80075ba:	2000      	movs	r0, #0
 80075bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80075c0:	f8d1 c000 	ldr.w	ip, [r1]
 80075c4:	fa1f fe82 	uxth.w	lr, r2
 80075c8:	fa1f f38c 	uxth.w	r3, ip
 80075cc:	eba3 030e 	sub.w	r3, r3, lr
 80075d0:	4403      	add	r3, r0
 80075d2:	0c12      	lsrs	r2, r2, #16
 80075d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80075d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80075dc:	b29b      	uxth	r3, r3
 80075de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075e2:	45c1      	cmp	r9, r8
 80075e4:	f841 3b04 	str.w	r3, [r1], #4
 80075e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80075ec:	d2e6      	bcs.n	80075bc <quorem+0xa4>
 80075ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075f6:	b922      	cbnz	r2, 8007602 <quorem+0xea>
 80075f8:	3b04      	subs	r3, #4
 80075fa:	429d      	cmp	r5, r3
 80075fc:	461a      	mov	r2, r3
 80075fe:	d30b      	bcc.n	8007618 <quorem+0x100>
 8007600:	613c      	str	r4, [r7, #16]
 8007602:	3601      	adds	r6, #1
 8007604:	4630      	mov	r0, r6
 8007606:	b003      	add	sp, #12
 8007608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760c:	6812      	ldr	r2, [r2, #0]
 800760e:	3b04      	subs	r3, #4
 8007610:	2a00      	cmp	r2, #0
 8007612:	d1cb      	bne.n	80075ac <quorem+0x94>
 8007614:	3c01      	subs	r4, #1
 8007616:	e7c6      	b.n	80075a6 <quorem+0x8e>
 8007618:	6812      	ldr	r2, [r2, #0]
 800761a:	3b04      	subs	r3, #4
 800761c:	2a00      	cmp	r2, #0
 800761e:	d1ef      	bne.n	8007600 <quorem+0xe8>
 8007620:	3c01      	subs	r4, #1
 8007622:	e7ea      	b.n	80075fa <quorem+0xe2>
 8007624:	2000      	movs	r0, #0
 8007626:	e7ee      	b.n	8007606 <quorem+0xee>

08007628 <_dtoa_r>:
 8007628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762c:	69c7      	ldr	r7, [r0, #28]
 800762e:	b097      	sub	sp, #92	@ 0x5c
 8007630:	4614      	mov	r4, r2
 8007632:	461d      	mov	r5, r3
 8007634:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007638:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800763a:	4683      	mov	fp, r0
 800763c:	b97f      	cbnz	r7, 800765e <_dtoa_r+0x36>
 800763e:	2010      	movs	r0, #16
 8007640:	f000 fe04 	bl	800824c <malloc>
 8007644:	4602      	mov	r2, r0
 8007646:	f8cb 001c 	str.w	r0, [fp, #28]
 800764a:	b920      	cbnz	r0, 8007656 <_dtoa_r+0x2e>
 800764c:	4ba8      	ldr	r3, [pc, #672]	@ (80078f0 <_dtoa_r+0x2c8>)
 800764e:	21ef      	movs	r1, #239	@ 0xef
 8007650:	48a8      	ldr	r0, [pc, #672]	@ (80078f4 <_dtoa_r+0x2cc>)
 8007652:	f003 f975 	bl	800a940 <__assert_func>
 8007656:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800765a:	6007      	str	r7, [r0, #0]
 800765c:	60c7      	str	r7, [r0, #12]
 800765e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007662:	6819      	ldr	r1, [r3, #0]
 8007664:	b159      	cbz	r1, 800767e <_dtoa_r+0x56>
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	604a      	str	r2, [r1, #4]
 800766a:	2301      	movs	r3, #1
 800766c:	4093      	lsls	r3, r2
 800766e:	608b      	str	r3, [r1, #8]
 8007670:	4658      	mov	r0, fp
 8007672:	f000 fee1 	bl	8008438 <_Bfree>
 8007676:	f8db 301c 	ldr.w	r3, [fp, #28]
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	1e2b      	subs	r3, r5, #0
 8007680:	bfb9      	ittee	lt
 8007682:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007686:	9303      	strlt	r3, [sp, #12]
 8007688:	2300      	movge	r3, #0
 800768a:	6033      	strge	r3, [r6, #0]
 800768c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007690:	4b99      	ldr	r3, [pc, #612]	@ (80078f8 <_dtoa_r+0x2d0>)
 8007692:	bfbc      	itt	lt
 8007694:	2201      	movlt	r2, #1
 8007696:	6032      	strlt	r2, [r6, #0]
 8007698:	ea33 0308 	bics.w	r3, r3, r8
 800769c:	d112      	bne.n	80076c4 <_dtoa_r+0x9c>
 800769e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80076a0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80076aa:	4323      	orrs	r3, r4
 80076ac:	f000 8551 	beq.w	8008152 <_dtoa_r+0xb2a>
 80076b0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80076b2:	f8df a248 	ldr.w	sl, [pc, #584]	@ 80078fc <_dtoa_r+0x2d4>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 8553 	beq.w	8008162 <_dtoa_r+0xb3a>
 80076bc:	f10a 0303 	add.w	r3, sl, #3
 80076c0:	f000 bd4d 	b.w	800815e <_dtoa_r+0xb36>
 80076c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80076cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076d0:	2200      	movs	r2, #0
 80076d2:	2300      	movs	r3, #0
 80076d4:	f7f9 f9d0 	bl	8000a78 <__aeabi_dcmpeq>
 80076d8:	4607      	mov	r7, r0
 80076da:	b158      	cbz	r0, 80076f4 <_dtoa_r+0xcc>
 80076dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80076de:	2301      	movs	r3, #1
 80076e0:	6013      	str	r3, [r2, #0]
 80076e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80076e4:	b113      	cbz	r3, 80076ec <_dtoa_r+0xc4>
 80076e6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80076e8:	4b85      	ldr	r3, [pc, #532]	@ (8007900 <_dtoa_r+0x2d8>)
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007904 <_dtoa_r+0x2dc>
 80076f0:	f000 bd37 	b.w	8008162 <_dtoa_r+0xb3a>
 80076f4:	ab14      	add	r3, sp, #80	@ 0x50
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	ab15      	add	r3, sp, #84	@ 0x54
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	4658      	mov	r0, fp
 80076fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007702:	f001 fa35 	bl	8008b70 <__d2b>
 8007706:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800770a:	4681      	mov	r9, r0
 800770c:	2e00      	cmp	r6, #0
 800770e:	d076      	beq.n	80077fe <_dtoa_r+0x1d6>
 8007710:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007712:	9712      	str	r7, [sp, #72]	@ 0x48
 8007714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800771c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007720:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007724:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007728:	4619      	mov	r1, r3
 800772a:	2200      	movs	r2, #0
 800772c:	4b76      	ldr	r3, [pc, #472]	@ (8007908 <_dtoa_r+0x2e0>)
 800772e:	f7f8 fd83 	bl	8000238 <__aeabi_dsub>
 8007732:	a369      	add	r3, pc, #420	@ (adr r3, 80078d8 <_dtoa_r+0x2b0>)
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f7f8 ff36 	bl	80005a8 <__aeabi_dmul>
 800773c:	a368      	add	r3, pc, #416	@ (adr r3, 80078e0 <_dtoa_r+0x2b8>)
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	f7f8 fd7b 	bl	800023c <__adddf3>
 8007746:	4604      	mov	r4, r0
 8007748:	4630      	mov	r0, r6
 800774a:	460d      	mov	r5, r1
 800774c:	f7f8 fec2 	bl	80004d4 <__aeabi_i2d>
 8007750:	a365      	add	r3, pc, #404	@ (adr r3, 80078e8 <_dtoa_r+0x2c0>)
 8007752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007756:	f7f8 ff27 	bl	80005a8 <__aeabi_dmul>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4620      	mov	r0, r4
 8007760:	4629      	mov	r1, r5
 8007762:	f7f8 fd6b 	bl	800023c <__adddf3>
 8007766:	4604      	mov	r4, r0
 8007768:	460d      	mov	r5, r1
 800776a:	f7f9 f9cd 	bl	8000b08 <__aeabi_d2iz>
 800776e:	2200      	movs	r2, #0
 8007770:	4607      	mov	r7, r0
 8007772:	2300      	movs	r3, #0
 8007774:	4620      	mov	r0, r4
 8007776:	4629      	mov	r1, r5
 8007778:	f7f9 f988 	bl	8000a8c <__aeabi_dcmplt>
 800777c:	b140      	cbz	r0, 8007790 <_dtoa_r+0x168>
 800777e:	4638      	mov	r0, r7
 8007780:	f7f8 fea8 	bl	80004d4 <__aeabi_i2d>
 8007784:	4622      	mov	r2, r4
 8007786:	462b      	mov	r3, r5
 8007788:	f7f9 f976 	bl	8000a78 <__aeabi_dcmpeq>
 800778c:	b900      	cbnz	r0, 8007790 <_dtoa_r+0x168>
 800778e:	3f01      	subs	r7, #1
 8007790:	2f16      	cmp	r7, #22
 8007792:	d852      	bhi.n	800783a <_dtoa_r+0x212>
 8007794:	4b5d      	ldr	r3, [pc, #372]	@ (800790c <_dtoa_r+0x2e4>)
 8007796:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077a2:	f7f9 f973 	bl	8000a8c <__aeabi_dcmplt>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	d049      	beq.n	800783e <_dtoa_r+0x216>
 80077aa:	3f01      	subs	r7, #1
 80077ac:	2300      	movs	r3, #0
 80077ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80077b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80077b2:	1b9b      	subs	r3, r3, r6
 80077b4:	1e5a      	subs	r2, r3, #1
 80077b6:	bf44      	itt	mi
 80077b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80077bc:	2300      	movmi	r3, #0
 80077be:	9209      	str	r2, [sp, #36]	@ 0x24
 80077c0:	bf54      	ite	pl
 80077c2:	f04f 0800 	movpl.w	r8, #0
 80077c6:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80077c8:	2f00      	cmp	r7, #0
 80077ca:	db3a      	blt.n	8007842 <_dtoa_r+0x21a>
 80077cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ce:	970e      	str	r7, [sp, #56]	@ 0x38
 80077d0:	443b      	add	r3, r7
 80077d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80077d4:	2300      	movs	r3, #0
 80077d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80077d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80077da:	2b09      	cmp	r3, #9
 80077dc:	d865      	bhi.n	80078aa <_dtoa_r+0x282>
 80077de:	2b05      	cmp	r3, #5
 80077e0:	bfc4      	itt	gt
 80077e2:	3b04      	subgt	r3, #4
 80077e4:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80077e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80077e8:	f1a3 0302 	sub.w	r3, r3, #2
 80077ec:	bfcc      	ite	gt
 80077ee:	2400      	movgt	r4, #0
 80077f0:	2401      	movle	r4, #1
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d864      	bhi.n	80078c0 <_dtoa_r+0x298>
 80077f6:	e8df f003 	tbb	[pc, r3]
 80077fa:	382b      	.short	0x382b
 80077fc:	5636      	.short	0x5636
 80077fe:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007802:	441e      	add	r6, r3
 8007804:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007808:	2b20      	cmp	r3, #32
 800780a:	bfc1      	itttt	gt
 800780c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007810:	fa08 f803 	lslgt.w	r8, r8, r3
 8007814:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007818:	fa24 f303 	lsrgt.w	r3, r4, r3
 800781c:	bfd6      	itet	le
 800781e:	f1c3 0320 	rsble	r3, r3, #32
 8007822:	ea48 0003 	orrgt.w	r0, r8, r3
 8007826:	fa04 f003 	lslle.w	r0, r4, r3
 800782a:	f7f8 fe43 	bl	80004b4 <__aeabi_ui2d>
 800782e:	2201      	movs	r2, #1
 8007830:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007834:	3e01      	subs	r6, #1
 8007836:	9212      	str	r2, [sp, #72]	@ 0x48
 8007838:	e776      	b.n	8007728 <_dtoa_r+0x100>
 800783a:	2301      	movs	r3, #1
 800783c:	e7b7      	b.n	80077ae <_dtoa_r+0x186>
 800783e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007840:	e7b6      	b.n	80077b0 <_dtoa_r+0x188>
 8007842:	427b      	negs	r3, r7
 8007844:	930a      	str	r3, [sp, #40]	@ 0x28
 8007846:	2300      	movs	r3, #0
 8007848:	eba8 0807 	sub.w	r8, r8, r7
 800784c:	930e      	str	r3, [sp, #56]	@ 0x38
 800784e:	e7c3      	b.n	80077d8 <_dtoa_r+0x1b0>
 8007850:	2300      	movs	r3, #0
 8007852:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007854:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007856:	2b00      	cmp	r3, #0
 8007858:	dc35      	bgt.n	80078c6 <_dtoa_r+0x29e>
 800785a:	2301      	movs	r3, #1
 800785c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007860:	461a      	mov	r2, r3
 8007862:	9221      	str	r2, [sp, #132]	@ 0x84
 8007864:	e00b      	b.n	800787e <_dtoa_r+0x256>
 8007866:	2301      	movs	r3, #1
 8007868:	e7f3      	b.n	8007852 <_dtoa_r+0x22a>
 800786a:	2300      	movs	r3, #0
 800786c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800786e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007870:	18fb      	adds	r3, r7, r3
 8007872:	9308      	str	r3, [sp, #32]
 8007874:	3301      	adds	r3, #1
 8007876:	2b01      	cmp	r3, #1
 8007878:	9307      	str	r3, [sp, #28]
 800787a:	bfb8      	it	lt
 800787c:	2301      	movlt	r3, #1
 800787e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007882:	2100      	movs	r1, #0
 8007884:	2204      	movs	r2, #4
 8007886:	f102 0514 	add.w	r5, r2, #20
 800788a:	429d      	cmp	r5, r3
 800788c:	d91f      	bls.n	80078ce <_dtoa_r+0x2a6>
 800788e:	6041      	str	r1, [r0, #4]
 8007890:	4658      	mov	r0, fp
 8007892:	f000 fd91 	bl	80083b8 <_Balloc>
 8007896:	4682      	mov	sl, r0
 8007898:	2800      	cmp	r0, #0
 800789a:	d13b      	bne.n	8007914 <_dtoa_r+0x2ec>
 800789c:	4b1c      	ldr	r3, [pc, #112]	@ (8007910 <_dtoa_r+0x2e8>)
 800789e:	4602      	mov	r2, r0
 80078a0:	f240 11af 	movw	r1, #431	@ 0x1af
 80078a4:	e6d4      	b.n	8007650 <_dtoa_r+0x28>
 80078a6:	2301      	movs	r3, #1
 80078a8:	e7e0      	b.n	800786c <_dtoa_r+0x244>
 80078aa:	2401      	movs	r4, #1
 80078ac:	2300      	movs	r3, #0
 80078ae:	9320      	str	r3, [sp, #128]	@ 0x80
 80078b0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80078b2:	f04f 33ff 	mov.w	r3, #4294967295
 80078b6:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80078ba:	2200      	movs	r2, #0
 80078bc:	2312      	movs	r3, #18
 80078be:	e7d0      	b.n	8007862 <_dtoa_r+0x23a>
 80078c0:	2301      	movs	r3, #1
 80078c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078c4:	e7f5      	b.n	80078b2 <_dtoa_r+0x28a>
 80078c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078c8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80078cc:	e7d7      	b.n	800787e <_dtoa_r+0x256>
 80078ce:	3101      	adds	r1, #1
 80078d0:	0052      	lsls	r2, r2, #1
 80078d2:	e7d8      	b.n	8007886 <_dtoa_r+0x25e>
 80078d4:	f3af 8000 	nop.w
 80078d8:	636f4361 	.word	0x636f4361
 80078dc:	3fd287a7 	.word	0x3fd287a7
 80078e0:	8b60c8b3 	.word	0x8b60c8b3
 80078e4:	3fc68a28 	.word	0x3fc68a28
 80078e8:	509f79fb 	.word	0x509f79fb
 80078ec:	3fd34413 	.word	0x3fd34413
 80078f0:	0800b4ec 	.word	0x0800b4ec
 80078f4:	0800b503 	.word	0x0800b503
 80078f8:	7ff00000 	.word	0x7ff00000
 80078fc:	0800b4e8 	.word	0x0800b4e8
 8007900:	0800b849 	.word	0x0800b849
 8007904:	0800b848 	.word	0x0800b848
 8007908:	3ff80000 	.word	0x3ff80000
 800790c:	0800b600 	.word	0x0800b600
 8007910:	0800b55b 	.word	0x0800b55b
 8007914:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007918:	6018      	str	r0, [r3, #0]
 800791a:	9b07      	ldr	r3, [sp, #28]
 800791c:	2b0e      	cmp	r3, #14
 800791e:	f200 80a4 	bhi.w	8007a6a <_dtoa_r+0x442>
 8007922:	2c00      	cmp	r4, #0
 8007924:	f000 80a1 	beq.w	8007a6a <_dtoa_r+0x442>
 8007928:	2f00      	cmp	r7, #0
 800792a:	dd33      	ble.n	8007994 <_dtoa_r+0x36c>
 800792c:	4b86      	ldr	r3, [pc, #536]	@ (8007b48 <_dtoa_r+0x520>)
 800792e:	f007 020f 	and.w	r2, r7, #15
 8007932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007936:	e9d3 3400 	ldrd	r3, r4, [r3]
 800793a:	05f8      	lsls	r0, r7, #23
 800793c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007940:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007944:	d516      	bpl.n	8007974 <_dtoa_r+0x34c>
 8007946:	4b81      	ldr	r3, [pc, #516]	@ (8007b4c <_dtoa_r+0x524>)
 8007948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800794c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007950:	f7f8 ff54 	bl	80007fc <__aeabi_ddiv>
 8007954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007958:	f004 040f 	and.w	r4, r4, #15
 800795c:	2603      	movs	r6, #3
 800795e:	4d7b      	ldr	r5, [pc, #492]	@ (8007b4c <_dtoa_r+0x524>)
 8007960:	b954      	cbnz	r4, 8007978 <_dtoa_r+0x350>
 8007962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800796a:	f7f8 ff47 	bl	80007fc <__aeabi_ddiv>
 800796e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007972:	e028      	b.n	80079c6 <_dtoa_r+0x39e>
 8007974:	2602      	movs	r6, #2
 8007976:	e7f2      	b.n	800795e <_dtoa_r+0x336>
 8007978:	07e1      	lsls	r1, r4, #31
 800797a:	d508      	bpl.n	800798e <_dtoa_r+0x366>
 800797c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007980:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007984:	f7f8 fe10 	bl	80005a8 <__aeabi_dmul>
 8007988:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800798c:	3601      	adds	r6, #1
 800798e:	1064      	asrs	r4, r4, #1
 8007990:	3508      	adds	r5, #8
 8007992:	e7e5      	b.n	8007960 <_dtoa_r+0x338>
 8007994:	f000 80d2 	beq.w	8007b3c <_dtoa_r+0x514>
 8007998:	427c      	negs	r4, r7
 800799a:	4b6b      	ldr	r3, [pc, #428]	@ (8007b48 <_dtoa_r+0x520>)
 800799c:	4d6b      	ldr	r5, [pc, #428]	@ (8007b4c <_dtoa_r+0x524>)
 800799e:	f004 020f 	and.w	r2, r4, #15
 80079a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079ae:	f7f8 fdfb 	bl	80005a8 <__aeabi_dmul>
 80079b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079b6:	1124      	asrs	r4, r4, #4
 80079b8:	2300      	movs	r3, #0
 80079ba:	2602      	movs	r6, #2
 80079bc:	2c00      	cmp	r4, #0
 80079be:	f040 80b2 	bne.w	8007b26 <_dtoa_r+0x4fe>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1d3      	bne.n	800796e <_dtoa_r+0x346>
 80079c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80b7 	beq.w	8007b40 <_dtoa_r+0x518>
 80079d2:	4b5f      	ldr	r3, [pc, #380]	@ (8007b50 <_dtoa_r+0x528>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	4620      	mov	r0, r4
 80079d8:	4629      	mov	r1, r5
 80079da:	f7f9 f857 	bl	8000a8c <__aeabi_dcmplt>
 80079de:	2800      	cmp	r0, #0
 80079e0:	f000 80ae 	beq.w	8007b40 <_dtoa_r+0x518>
 80079e4:	9b07      	ldr	r3, [sp, #28]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 80aa 	beq.w	8007b40 <_dtoa_r+0x518>
 80079ec:	9b08      	ldr	r3, [sp, #32]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	dd37      	ble.n	8007a62 <_dtoa_r+0x43a>
 80079f2:	1e7b      	subs	r3, r7, #1
 80079f4:	9304      	str	r3, [sp, #16]
 80079f6:	4620      	mov	r0, r4
 80079f8:	4b56      	ldr	r3, [pc, #344]	@ (8007b54 <_dtoa_r+0x52c>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	4629      	mov	r1, r5
 80079fe:	f7f8 fdd3 	bl	80005a8 <__aeabi_dmul>
 8007a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a06:	9c08      	ldr	r4, [sp, #32]
 8007a08:	3601      	adds	r6, #1
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f7f8 fd62 	bl	80004d4 <__aeabi_i2d>
 8007a10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a14:	f7f8 fdc8 	bl	80005a8 <__aeabi_dmul>
 8007a18:	4b4f      	ldr	r3, [pc, #316]	@ (8007b58 <_dtoa_r+0x530>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f7f8 fc0e 	bl	800023c <__adddf3>
 8007a20:	4605      	mov	r5, r0
 8007a22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007a26:	2c00      	cmp	r4, #0
 8007a28:	f040 809a 	bne.w	8007b60 <_dtoa_r+0x538>
 8007a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a30:	4b4a      	ldr	r3, [pc, #296]	@ (8007b5c <_dtoa_r+0x534>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	f7f8 fc00 	bl	8000238 <__aeabi_dsub>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a40:	462a      	mov	r2, r5
 8007a42:	4633      	mov	r3, r6
 8007a44:	f7f9 f840 	bl	8000ac8 <__aeabi_dcmpgt>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	f040 828e 	bne.w	8007f6a <_dtoa_r+0x942>
 8007a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a52:	462a      	mov	r2, r5
 8007a54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007a58:	f7f9 f818 	bl	8000a8c <__aeabi_dcmplt>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	f040 8127 	bne.w	8007cb0 <_dtoa_r+0x688>
 8007a62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007a66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007a6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f2c0 8163 	blt.w	8007d38 <_dtoa_r+0x710>
 8007a72:	2f0e      	cmp	r7, #14
 8007a74:	f300 8160 	bgt.w	8007d38 <_dtoa_r+0x710>
 8007a78:	4b33      	ldr	r3, [pc, #204]	@ (8007b48 <_dtoa_r+0x520>)
 8007a7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a82:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	da03      	bge.n	8007a94 <_dtoa_r+0x46c>
 8007a8c:	9b07      	ldr	r3, [sp, #28]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f340 8100 	ble.w	8007c94 <_dtoa_r+0x66c>
 8007a94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007a98:	4656      	mov	r6, sl
 8007a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	f7f8 feab 	bl	80007fc <__aeabi_ddiv>
 8007aa6:	f7f9 f82f 	bl	8000b08 <__aeabi_d2iz>
 8007aaa:	4680      	mov	r8, r0
 8007aac:	f7f8 fd12 	bl	80004d4 <__aeabi_i2d>
 8007ab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ab4:	f7f8 fd78 	bl	80005a8 <__aeabi_dmul>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4620      	mov	r0, r4
 8007abe:	4629      	mov	r1, r5
 8007ac0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007ac4:	f7f8 fbb8 	bl	8000238 <__aeabi_dsub>
 8007ac8:	f806 4b01 	strb.w	r4, [r6], #1
 8007acc:	9d07      	ldr	r5, [sp, #28]
 8007ace:	eba6 040a 	sub.w	r4, r6, sl
 8007ad2:	42a5      	cmp	r5, r4
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	f040 8116 	bne.w	8007d08 <_dtoa_r+0x6e0>
 8007adc:	f7f8 fbae 	bl	800023c <__adddf3>
 8007ae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	460d      	mov	r5, r1
 8007ae8:	f7f8 ffee 	bl	8000ac8 <__aeabi_dcmpgt>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	f040 80f8 	bne.w	8007ce2 <_dtoa_r+0x6ba>
 8007af2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007af6:	4620      	mov	r0, r4
 8007af8:	4629      	mov	r1, r5
 8007afa:	f7f8 ffbd 	bl	8000a78 <__aeabi_dcmpeq>
 8007afe:	b118      	cbz	r0, 8007b08 <_dtoa_r+0x4e0>
 8007b00:	f018 0f01 	tst.w	r8, #1
 8007b04:	f040 80ed 	bne.w	8007ce2 <_dtoa_r+0x6ba>
 8007b08:	4649      	mov	r1, r9
 8007b0a:	4658      	mov	r0, fp
 8007b0c:	f000 fc94 	bl	8008438 <_Bfree>
 8007b10:	2300      	movs	r3, #0
 8007b12:	7033      	strb	r3, [r6, #0]
 8007b14:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007b16:	3701      	adds	r7, #1
 8007b18:	601f      	str	r7, [r3, #0]
 8007b1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 8320 	beq.w	8008162 <_dtoa_r+0xb3a>
 8007b22:	601e      	str	r6, [r3, #0]
 8007b24:	e31d      	b.n	8008162 <_dtoa_r+0xb3a>
 8007b26:	07e2      	lsls	r2, r4, #31
 8007b28:	d505      	bpl.n	8007b36 <_dtoa_r+0x50e>
 8007b2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b2e:	f7f8 fd3b 	bl	80005a8 <__aeabi_dmul>
 8007b32:	3601      	adds	r6, #1
 8007b34:	2301      	movs	r3, #1
 8007b36:	1064      	asrs	r4, r4, #1
 8007b38:	3508      	adds	r5, #8
 8007b3a:	e73f      	b.n	80079bc <_dtoa_r+0x394>
 8007b3c:	2602      	movs	r6, #2
 8007b3e:	e742      	b.n	80079c6 <_dtoa_r+0x39e>
 8007b40:	9c07      	ldr	r4, [sp, #28]
 8007b42:	9704      	str	r7, [sp, #16]
 8007b44:	e761      	b.n	8007a0a <_dtoa_r+0x3e2>
 8007b46:	bf00      	nop
 8007b48:	0800b600 	.word	0x0800b600
 8007b4c:	0800b5d8 	.word	0x0800b5d8
 8007b50:	3ff00000 	.word	0x3ff00000
 8007b54:	40240000 	.word	0x40240000
 8007b58:	401c0000 	.word	0x401c0000
 8007b5c:	40140000 	.word	0x40140000
 8007b60:	4b70      	ldr	r3, [pc, #448]	@ (8007d24 <_dtoa_r+0x6fc>)
 8007b62:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b6c:	4454      	add	r4, sl
 8007b6e:	2900      	cmp	r1, #0
 8007b70:	d045      	beq.n	8007bfe <_dtoa_r+0x5d6>
 8007b72:	496d      	ldr	r1, [pc, #436]	@ (8007d28 <_dtoa_r+0x700>)
 8007b74:	2000      	movs	r0, #0
 8007b76:	f7f8 fe41 	bl	80007fc <__aeabi_ddiv>
 8007b7a:	4633      	mov	r3, r6
 8007b7c:	462a      	mov	r2, r5
 8007b7e:	f7f8 fb5b 	bl	8000238 <__aeabi_dsub>
 8007b82:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b86:	4656      	mov	r6, sl
 8007b88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b8c:	f7f8 ffbc 	bl	8000b08 <__aeabi_d2iz>
 8007b90:	4605      	mov	r5, r0
 8007b92:	f7f8 fc9f 	bl	80004d4 <__aeabi_i2d>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b9e:	f7f8 fb4b 	bl	8000238 <__aeabi_dsub>
 8007ba2:	3530      	adds	r5, #48	@ 0x30
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007bac:	f806 5b01 	strb.w	r5, [r6], #1
 8007bb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007bb4:	f7f8 ff6a 	bl	8000a8c <__aeabi_dcmplt>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d163      	bne.n	8007c84 <_dtoa_r+0x65c>
 8007bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bc0:	495a      	ldr	r1, [pc, #360]	@ (8007d2c <_dtoa_r+0x704>)
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	f7f8 fb38 	bl	8000238 <__aeabi_dsub>
 8007bc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007bcc:	f7f8 ff5e 	bl	8000a8c <__aeabi_dcmplt>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	f040 8087 	bne.w	8007ce4 <_dtoa_r+0x6bc>
 8007bd6:	42a6      	cmp	r6, r4
 8007bd8:	f43f af43 	beq.w	8007a62 <_dtoa_r+0x43a>
 8007bdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007be0:	4b53      	ldr	r3, [pc, #332]	@ (8007d30 <_dtoa_r+0x708>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	f7f8 fce0 	bl	80005a8 <__aeabi_dmul>
 8007be8:	4b51      	ldr	r3, [pc, #324]	@ (8007d30 <_dtoa_r+0x708>)
 8007bea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007bee:	2200      	movs	r2, #0
 8007bf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bf4:	f7f8 fcd8 	bl	80005a8 <__aeabi_dmul>
 8007bf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bfc:	e7c4      	b.n	8007b88 <_dtoa_r+0x560>
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4628      	mov	r0, r5
 8007c02:	f7f8 fcd1 	bl	80005a8 <__aeabi_dmul>
 8007c06:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c0a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007c0c:	4656      	mov	r6, sl
 8007c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c12:	f7f8 ff79 	bl	8000b08 <__aeabi_d2iz>
 8007c16:	4605      	mov	r5, r0
 8007c18:	f7f8 fc5c 	bl	80004d4 <__aeabi_i2d>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c24:	f7f8 fb08 	bl	8000238 <__aeabi_dsub>
 8007c28:	3530      	adds	r5, #48	@ 0x30
 8007c2a:	f806 5b01 	strb.w	r5, [r6], #1
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	42a6      	cmp	r6, r4
 8007c34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c38:	f04f 0200 	mov.w	r2, #0
 8007c3c:	d124      	bne.n	8007c88 <_dtoa_r+0x660>
 8007c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8007d28 <_dtoa_r+0x700>)
 8007c40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c44:	f7f8 fafa 	bl	800023c <__adddf3>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c50:	f7f8 ff3a 	bl	8000ac8 <__aeabi_dcmpgt>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d145      	bne.n	8007ce4 <_dtoa_r+0x6bc>
 8007c58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c5c:	4932      	ldr	r1, [pc, #200]	@ (8007d28 <_dtoa_r+0x700>)
 8007c5e:	2000      	movs	r0, #0
 8007c60:	f7f8 faea 	bl	8000238 <__aeabi_dsub>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c6c:	f7f8 ff0e 	bl	8000a8c <__aeabi_dcmplt>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	f43f aef6 	beq.w	8007a62 <_dtoa_r+0x43a>
 8007c76:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007c78:	1e73      	subs	r3, r6, #1
 8007c7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c80:	2b30      	cmp	r3, #48	@ 0x30
 8007c82:	d0f8      	beq.n	8007c76 <_dtoa_r+0x64e>
 8007c84:	9f04      	ldr	r7, [sp, #16]
 8007c86:	e73f      	b.n	8007b08 <_dtoa_r+0x4e0>
 8007c88:	4b29      	ldr	r3, [pc, #164]	@ (8007d30 <_dtoa_r+0x708>)
 8007c8a:	f7f8 fc8d 	bl	80005a8 <__aeabi_dmul>
 8007c8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c92:	e7bc      	b.n	8007c0e <_dtoa_r+0x5e6>
 8007c94:	d10c      	bne.n	8007cb0 <_dtoa_r+0x688>
 8007c96:	4b27      	ldr	r3, [pc, #156]	@ (8007d34 <_dtoa_r+0x70c>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c9e:	f7f8 fc83 	bl	80005a8 <__aeabi_dmul>
 8007ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ca6:	f7f8 ff05 	bl	8000ab4 <__aeabi_dcmpge>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	f000 815b 	beq.w	8007f66 <_dtoa_r+0x93e>
 8007cb0:	2400      	movs	r4, #0
 8007cb2:	4625      	mov	r5, r4
 8007cb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cb6:	43db      	mvns	r3, r3
 8007cb8:	9304      	str	r3, [sp, #16]
 8007cba:	4656      	mov	r6, sl
 8007cbc:	2700      	movs	r7, #0
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	4658      	mov	r0, fp
 8007cc2:	f000 fbb9 	bl	8008438 <_Bfree>
 8007cc6:	2d00      	cmp	r5, #0
 8007cc8:	d0dc      	beq.n	8007c84 <_dtoa_r+0x65c>
 8007cca:	b12f      	cbz	r7, 8007cd8 <_dtoa_r+0x6b0>
 8007ccc:	42af      	cmp	r7, r5
 8007cce:	d003      	beq.n	8007cd8 <_dtoa_r+0x6b0>
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	4658      	mov	r0, fp
 8007cd4:	f000 fbb0 	bl	8008438 <_Bfree>
 8007cd8:	4629      	mov	r1, r5
 8007cda:	4658      	mov	r0, fp
 8007cdc:	f000 fbac 	bl	8008438 <_Bfree>
 8007ce0:	e7d0      	b.n	8007c84 <_dtoa_r+0x65c>
 8007ce2:	9704      	str	r7, [sp, #16]
 8007ce4:	4633      	mov	r3, r6
 8007ce6:	461e      	mov	r6, r3
 8007ce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cec:	2a39      	cmp	r2, #57	@ 0x39
 8007cee:	d107      	bne.n	8007d00 <_dtoa_r+0x6d8>
 8007cf0:	459a      	cmp	sl, r3
 8007cf2:	d1f8      	bne.n	8007ce6 <_dtoa_r+0x6be>
 8007cf4:	9a04      	ldr	r2, [sp, #16]
 8007cf6:	3201      	adds	r2, #1
 8007cf8:	9204      	str	r2, [sp, #16]
 8007cfa:	2230      	movs	r2, #48	@ 0x30
 8007cfc:	f88a 2000 	strb.w	r2, [sl]
 8007d00:	781a      	ldrb	r2, [r3, #0]
 8007d02:	3201      	adds	r2, #1
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	e7bd      	b.n	8007c84 <_dtoa_r+0x65c>
 8007d08:	4b09      	ldr	r3, [pc, #36]	@ (8007d30 <_dtoa_r+0x708>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f7f8 fc4c 	bl	80005a8 <__aeabi_dmul>
 8007d10:	2200      	movs	r2, #0
 8007d12:	2300      	movs	r3, #0
 8007d14:	4604      	mov	r4, r0
 8007d16:	460d      	mov	r5, r1
 8007d18:	f7f8 feae 	bl	8000a78 <__aeabi_dcmpeq>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	f43f aebc 	beq.w	8007a9a <_dtoa_r+0x472>
 8007d22:	e6f1      	b.n	8007b08 <_dtoa_r+0x4e0>
 8007d24:	0800b600 	.word	0x0800b600
 8007d28:	3fe00000 	.word	0x3fe00000
 8007d2c:	3ff00000 	.word	0x3ff00000
 8007d30:	40240000 	.word	0x40240000
 8007d34:	40140000 	.word	0x40140000
 8007d38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007d3a:	2a00      	cmp	r2, #0
 8007d3c:	f000 80db 	beq.w	8007ef6 <_dtoa_r+0x8ce>
 8007d40:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007d42:	2a01      	cmp	r2, #1
 8007d44:	f300 80bf 	bgt.w	8007ec6 <_dtoa_r+0x89e>
 8007d48:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007d4a:	2a00      	cmp	r2, #0
 8007d4c:	f000 80b7 	beq.w	8007ebe <_dtoa_r+0x896>
 8007d50:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007d54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007d56:	4646      	mov	r6, r8
 8007d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	441a      	add	r2, r3
 8007d5e:	4658      	mov	r0, fp
 8007d60:	4498      	add	r8, r3
 8007d62:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d64:	f000 fc66 	bl	8008634 <__i2b>
 8007d68:	4605      	mov	r5, r0
 8007d6a:	b15e      	cbz	r6, 8007d84 <_dtoa_r+0x75c>
 8007d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	dd08      	ble.n	8007d84 <_dtoa_r+0x75c>
 8007d72:	42b3      	cmp	r3, r6
 8007d74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d76:	bfa8      	it	ge
 8007d78:	4633      	movge	r3, r6
 8007d7a:	eba8 0803 	sub.w	r8, r8, r3
 8007d7e:	1af6      	subs	r6, r6, r3
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d86:	b1f3      	cbz	r3, 8007dc6 <_dtoa_r+0x79e>
 8007d88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 80b7 	beq.w	8007efe <_dtoa_r+0x8d6>
 8007d90:	b18c      	cbz	r4, 8007db6 <_dtoa_r+0x78e>
 8007d92:	4629      	mov	r1, r5
 8007d94:	4622      	mov	r2, r4
 8007d96:	4658      	mov	r0, fp
 8007d98:	f000 fd0c 	bl	80087b4 <__pow5mult>
 8007d9c:	464a      	mov	r2, r9
 8007d9e:	4601      	mov	r1, r0
 8007da0:	4605      	mov	r5, r0
 8007da2:	4658      	mov	r0, fp
 8007da4:	f000 fc5c 	bl	8008660 <__multiply>
 8007da8:	4649      	mov	r1, r9
 8007daa:	9004      	str	r0, [sp, #16]
 8007dac:	4658      	mov	r0, fp
 8007dae:	f000 fb43 	bl	8008438 <_Bfree>
 8007db2:	9b04      	ldr	r3, [sp, #16]
 8007db4:	4699      	mov	r9, r3
 8007db6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007db8:	1b1a      	subs	r2, r3, r4
 8007dba:	d004      	beq.n	8007dc6 <_dtoa_r+0x79e>
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	4658      	mov	r0, fp
 8007dc0:	f000 fcf8 	bl	80087b4 <__pow5mult>
 8007dc4:	4681      	mov	r9, r0
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	4658      	mov	r0, fp
 8007dca:	f000 fc33 	bl	8008634 <__i2b>
 8007dce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 81c9 	beq.w	800816a <_dtoa_r+0xb42>
 8007dd8:	461a      	mov	r2, r3
 8007dda:	4601      	mov	r1, r0
 8007ddc:	4658      	mov	r0, fp
 8007dde:	f000 fce9 	bl	80087b4 <__pow5mult>
 8007de2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	4604      	mov	r4, r0
 8007de8:	f300 808f 	bgt.w	8007f0a <_dtoa_r+0x8e2>
 8007dec:	9b02      	ldr	r3, [sp, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f040 8087 	bne.w	8007f02 <_dtoa_r+0x8da>
 8007df4:	9b03      	ldr	r3, [sp, #12]
 8007df6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f040 8083 	bne.w	8007f06 <_dtoa_r+0x8de>
 8007e00:	9b03      	ldr	r3, [sp, #12]
 8007e02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e06:	0d1b      	lsrs	r3, r3, #20
 8007e08:	051b      	lsls	r3, r3, #20
 8007e0a:	b12b      	cbz	r3, 8007e18 <_dtoa_r+0x7f0>
 8007e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e0e:	3301      	adds	r3, #1
 8007e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e12:	f108 0801 	add.w	r8, r8, #1
 8007e16:	2301      	movs	r3, #1
 8007e18:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 81aa 	beq.w	8008176 <_dtoa_r+0xb4e>
 8007e22:	6923      	ldr	r3, [r4, #16]
 8007e24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e28:	6918      	ldr	r0, [r3, #16]
 8007e2a:	f000 fbb7 	bl	800859c <__hi0bits>
 8007e2e:	f1c0 0020 	rsb	r0, r0, #32
 8007e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e34:	4418      	add	r0, r3
 8007e36:	f010 001f 	ands.w	r0, r0, #31
 8007e3a:	d071      	beq.n	8007f20 <_dtoa_r+0x8f8>
 8007e3c:	f1c0 0320 	rsb	r3, r0, #32
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	dd65      	ble.n	8007f10 <_dtoa_r+0x8e8>
 8007e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e46:	f1c0 001c 	rsb	r0, r0, #28
 8007e4a:	4403      	add	r3, r0
 8007e4c:	4480      	add	r8, r0
 8007e4e:	4406      	add	r6, r0
 8007e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e52:	f1b8 0f00 	cmp.w	r8, #0
 8007e56:	dd05      	ble.n	8007e64 <_dtoa_r+0x83c>
 8007e58:	4649      	mov	r1, r9
 8007e5a:	4642      	mov	r2, r8
 8007e5c:	4658      	mov	r0, fp
 8007e5e:	f000 fd03 	bl	8008868 <__lshift>
 8007e62:	4681      	mov	r9, r0
 8007e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	dd05      	ble.n	8007e76 <_dtoa_r+0x84e>
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4658      	mov	r0, fp
 8007e70:	f000 fcfa 	bl	8008868 <__lshift>
 8007e74:	4604      	mov	r4, r0
 8007e76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d053      	beq.n	8007f24 <_dtoa_r+0x8fc>
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	4648      	mov	r0, r9
 8007e80:	f000 fd5e 	bl	8008940 <__mcmp>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	da4d      	bge.n	8007f24 <_dtoa_r+0x8fc>
 8007e88:	1e7b      	subs	r3, r7, #1
 8007e8a:	9304      	str	r3, [sp, #16]
 8007e8c:	4649      	mov	r1, r9
 8007e8e:	2300      	movs	r3, #0
 8007e90:	220a      	movs	r2, #10
 8007e92:	4658      	mov	r0, fp
 8007e94:	f000 faf2 	bl	800847c <__multadd>
 8007e98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e9a:	4681      	mov	r9, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 816c 	beq.w	800817a <_dtoa_r+0xb52>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	220a      	movs	r2, #10
 8007ea8:	4658      	mov	r0, fp
 8007eaa:	f000 fae7 	bl	800847c <__multadd>
 8007eae:	9b08      	ldr	r3, [sp, #32]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	4605      	mov	r5, r0
 8007eb4:	dc61      	bgt.n	8007f7a <_dtoa_r+0x952>
 8007eb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	dc3b      	bgt.n	8007f34 <_dtoa_r+0x90c>
 8007ebc:	e05d      	b.n	8007f7a <_dtoa_r+0x952>
 8007ebe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ec0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ec4:	e746      	b.n	8007d54 <_dtoa_r+0x72c>
 8007ec6:	9b07      	ldr	r3, [sp, #28]
 8007ec8:	1e5c      	subs	r4, r3, #1
 8007eca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	bfbf      	itttt	lt
 8007ed0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ed2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007ed4:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007ed6:	1ae3      	sublt	r3, r4, r3
 8007ed8:	bfb4      	ite	lt
 8007eda:	18d2      	addlt	r2, r2, r3
 8007edc:	1b1c      	subge	r4, r3, r4
 8007ede:	9b07      	ldr	r3, [sp, #28]
 8007ee0:	bfbc      	itt	lt
 8007ee2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007ee4:	2400      	movlt	r4, #0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bfb5      	itete	lt
 8007eea:	eba8 0603 	sublt.w	r6, r8, r3
 8007eee:	9b07      	ldrge	r3, [sp, #28]
 8007ef0:	2300      	movlt	r3, #0
 8007ef2:	4646      	movge	r6, r8
 8007ef4:	e730      	b.n	8007d58 <_dtoa_r+0x730>
 8007ef6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ef8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007efa:	4646      	mov	r6, r8
 8007efc:	e735      	b.n	8007d6a <_dtoa_r+0x742>
 8007efe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f00:	e75c      	b.n	8007dbc <_dtoa_r+0x794>
 8007f02:	2300      	movs	r3, #0
 8007f04:	e788      	b.n	8007e18 <_dtoa_r+0x7f0>
 8007f06:	9b02      	ldr	r3, [sp, #8]
 8007f08:	e786      	b.n	8007e18 <_dtoa_r+0x7f0>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f0e:	e788      	b.n	8007e22 <_dtoa_r+0x7fa>
 8007f10:	d09f      	beq.n	8007e52 <_dtoa_r+0x82a>
 8007f12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f14:	331c      	adds	r3, #28
 8007f16:	441a      	add	r2, r3
 8007f18:	4498      	add	r8, r3
 8007f1a:	441e      	add	r6, r3
 8007f1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f1e:	e798      	b.n	8007e52 <_dtoa_r+0x82a>
 8007f20:	4603      	mov	r3, r0
 8007f22:	e7f6      	b.n	8007f12 <_dtoa_r+0x8ea>
 8007f24:	9b07      	ldr	r3, [sp, #28]
 8007f26:	9704      	str	r7, [sp, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	dc20      	bgt.n	8007f6e <_dtoa_r+0x946>
 8007f2c:	9308      	str	r3, [sp, #32]
 8007f2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	dd1e      	ble.n	8007f72 <_dtoa_r+0x94a>
 8007f34:	9b08      	ldr	r3, [sp, #32]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f47f aebc 	bne.w	8007cb4 <_dtoa_r+0x68c>
 8007f3c:	4621      	mov	r1, r4
 8007f3e:	2205      	movs	r2, #5
 8007f40:	4658      	mov	r0, fp
 8007f42:	f000 fa9b 	bl	800847c <__multadd>
 8007f46:	4601      	mov	r1, r0
 8007f48:	4604      	mov	r4, r0
 8007f4a:	4648      	mov	r0, r9
 8007f4c:	f000 fcf8 	bl	8008940 <__mcmp>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	f77f aeaf 	ble.w	8007cb4 <_dtoa_r+0x68c>
 8007f56:	4656      	mov	r6, sl
 8007f58:	2331      	movs	r3, #49	@ 0x31
 8007f5a:	f806 3b01 	strb.w	r3, [r6], #1
 8007f5e:	9b04      	ldr	r3, [sp, #16]
 8007f60:	3301      	adds	r3, #1
 8007f62:	9304      	str	r3, [sp, #16]
 8007f64:	e6aa      	b.n	8007cbc <_dtoa_r+0x694>
 8007f66:	9c07      	ldr	r4, [sp, #28]
 8007f68:	9704      	str	r7, [sp, #16]
 8007f6a:	4625      	mov	r5, r4
 8007f6c:	e7f3      	b.n	8007f56 <_dtoa_r+0x92e>
 8007f6e:	9b07      	ldr	r3, [sp, #28]
 8007f70:	9308      	str	r3, [sp, #32]
 8007f72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 8104 	beq.w	8008182 <_dtoa_r+0xb5a>
 8007f7a:	2e00      	cmp	r6, #0
 8007f7c:	dd05      	ble.n	8007f8a <_dtoa_r+0x962>
 8007f7e:	4629      	mov	r1, r5
 8007f80:	4632      	mov	r2, r6
 8007f82:	4658      	mov	r0, fp
 8007f84:	f000 fc70 	bl	8008868 <__lshift>
 8007f88:	4605      	mov	r5, r0
 8007f8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d05a      	beq.n	8008046 <_dtoa_r+0xa1e>
 8007f90:	6869      	ldr	r1, [r5, #4]
 8007f92:	4658      	mov	r0, fp
 8007f94:	f000 fa10 	bl	80083b8 <_Balloc>
 8007f98:	4606      	mov	r6, r0
 8007f9a:	b928      	cbnz	r0, 8007fa8 <_dtoa_r+0x980>
 8007f9c:	4b84      	ldr	r3, [pc, #528]	@ (80081b0 <_dtoa_r+0xb88>)
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007fa4:	f7ff bb54 	b.w	8007650 <_dtoa_r+0x28>
 8007fa8:	692a      	ldr	r2, [r5, #16]
 8007faa:	3202      	adds	r2, #2
 8007fac:	0092      	lsls	r2, r2, #2
 8007fae:	f105 010c 	add.w	r1, r5, #12
 8007fb2:	300c      	adds	r0, #12
 8007fb4:	f002 fcb0 	bl	800a918 <memcpy>
 8007fb8:	2201      	movs	r2, #1
 8007fba:	4631      	mov	r1, r6
 8007fbc:	4658      	mov	r0, fp
 8007fbe:	f000 fc53 	bl	8008868 <__lshift>
 8007fc2:	f10a 0301 	add.w	r3, sl, #1
 8007fc6:	9307      	str	r3, [sp, #28]
 8007fc8:	9b08      	ldr	r3, [sp, #32]
 8007fca:	4453      	add	r3, sl
 8007fcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fce:	9b02      	ldr	r3, [sp, #8]
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	462f      	mov	r7, r5
 8007fd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fd8:	4605      	mov	r5, r0
 8007fda:	9b07      	ldr	r3, [sp, #28]
 8007fdc:	4621      	mov	r1, r4
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	4648      	mov	r0, r9
 8007fe2:	9302      	str	r3, [sp, #8]
 8007fe4:	f7ff fa98 	bl	8007518 <quorem>
 8007fe8:	4639      	mov	r1, r7
 8007fea:	9008      	str	r0, [sp, #32]
 8007fec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007ff0:	4648      	mov	r0, r9
 8007ff2:	f000 fca5 	bl	8008940 <__mcmp>
 8007ff6:	462a      	mov	r2, r5
 8007ff8:	9009      	str	r0, [sp, #36]	@ 0x24
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	4658      	mov	r0, fp
 8007ffe:	f000 fcbb 	bl	8008978 <__mdiff>
 8008002:	68c2      	ldr	r2, [r0, #12]
 8008004:	4606      	mov	r6, r0
 8008006:	bb02      	cbnz	r2, 800804a <_dtoa_r+0xa22>
 8008008:	4601      	mov	r1, r0
 800800a:	4648      	mov	r0, r9
 800800c:	f000 fc98 	bl	8008940 <__mcmp>
 8008010:	4602      	mov	r2, r0
 8008012:	4631      	mov	r1, r6
 8008014:	4658      	mov	r0, fp
 8008016:	920c      	str	r2, [sp, #48]	@ 0x30
 8008018:	f000 fa0e 	bl	8008438 <_Bfree>
 800801c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800801e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008020:	9e07      	ldr	r6, [sp, #28]
 8008022:	ea43 0102 	orr.w	r1, r3, r2
 8008026:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008028:	4319      	orrs	r1, r3
 800802a:	d110      	bne.n	800804e <_dtoa_r+0xa26>
 800802c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008030:	d029      	beq.n	8008086 <_dtoa_r+0xa5e>
 8008032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	dd02      	ble.n	800803e <_dtoa_r+0xa16>
 8008038:	9b08      	ldr	r3, [sp, #32]
 800803a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800803e:	9b02      	ldr	r3, [sp, #8]
 8008040:	f883 8000 	strb.w	r8, [r3]
 8008044:	e63b      	b.n	8007cbe <_dtoa_r+0x696>
 8008046:	4628      	mov	r0, r5
 8008048:	e7bb      	b.n	8007fc2 <_dtoa_r+0x99a>
 800804a:	2201      	movs	r2, #1
 800804c:	e7e1      	b.n	8008012 <_dtoa_r+0x9ea>
 800804e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008050:	2b00      	cmp	r3, #0
 8008052:	db04      	blt.n	800805e <_dtoa_r+0xa36>
 8008054:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008056:	430b      	orrs	r3, r1
 8008058:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800805a:	430b      	orrs	r3, r1
 800805c:	d120      	bne.n	80080a0 <_dtoa_r+0xa78>
 800805e:	2a00      	cmp	r2, #0
 8008060:	dded      	ble.n	800803e <_dtoa_r+0xa16>
 8008062:	4649      	mov	r1, r9
 8008064:	2201      	movs	r2, #1
 8008066:	4658      	mov	r0, fp
 8008068:	f000 fbfe 	bl	8008868 <__lshift>
 800806c:	4621      	mov	r1, r4
 800806e:	4681      	mov	r9, r0
 8008070:	f000 fc66 	bl	8008940 <__mcmp>
 8008074:	2800      	cmp	r0, #0
 8008076:	dc03      	bgt.n	8008080 <_dtoa_r+0xa58>
 8008078:	d1e1      	bne.n	800803e <_dtoa_r+0xa16>
 800807a:	f018 0f01 	tst.w	r8, #1
 800807e:	d0de      	beq.n	800803e <_dtoa_r+0xa16>
 8008080:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008084:	d1d8      	bne.n	8008038 <_dtoa_r+0xa10>
 8008086:	9a02      	ldr	r2, [sp, #8]
 8008088:	2339      	movs	r3, #57	@ 0x39
 800808a:	7013      	strb	r3, [r2, #0]
 800808c:	4633      	mov	r3, r6
 800808e:	461e      	mov	r6, r3
 8008090:	3b01      	subs	r3, #1
 8008092:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008096:	2a39      	cmp	r2, #57	@ 0x39
 8008098:	d052      	beq.n	8008140 <_dtoa_r+0xb18>
 800809a:	3201      	adds	r2, #1
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	e60e      	b.n	8007cbe <_dtoa_r+0x696>
 80080a0:	2a00      	cmp	r2, #0
 80080a2:	dd07      	ble.n	80080b4 <_dtoa_r+0xa8c>
 80080a4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80080a8:	d0ed      	beq.n	8008086 <_dtoa_r+0xa5e>
 80080aa:	9a02      	ldr	r2, [sp, #8]
 80080ac:	f108 0301 	add.w	r3, r8, #1
 80080b0:	7013      	strb	r3, [r2, #0]
 80080b2:	e604      	b.n	8007cbe <_dtoa_r+0x696>
 80080b4:	9b07      	ldr	r3, [sp, #28]
 80080b6:	9a07      	ldr	r2, [sp, #28]
 80080b8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80080bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080be:	4293      	cmp	r3, r2
 80080c0:	d028      	beq.n	8008114 <_dtoa_r+0xaec>
 80080c2:	4649      	mov	r1, r9
 80080c4:	2300      	movs	r3, #0
 80080c6:	220a      	movs	r2, #10
 80080c8:	4658      	mov	r0, fp
 80080ca:	f000 f9d7 	bl	800847c <__multadd>
 80080ce:	42af      	cmp	r7, r5
 80080d0:	4681      	mov	r9, r0
 80080d2:	f04f 0300 	mov.w	r3, #0
 80080d6:	f04f 020a 	mov.w	r2, #10
 80080da:	4639      	mov	r1, r7
 80080dc:	4658      	mov	r0, fp
 80080de:	d107      	bne.n	80080f0 <_dtoa_r+0xac8>
 80080e0:	f000 f9cc 	bl	800847c <__multadd>
 80080e4:	4607      	mov	r7, r0
 80080e6:	4605      	mov	r5, r0
 80080e8:	9b07      	ldr	r3, [sp, #28]
 80080ea:	3301      	adds	r3, #1
 80080ec:	9307      	str	r3, [sp, #28]
 80080ee:	e774      	b.n	8007fda <_dtoa_r+0x9b2>
 80080f0:	f000 f9c4 	bl	800847c <__multadd>
 80080f4:	4629      	mov	r1, r5
 80080f6:	4607      	mov	r7, r0
 80080f8:	2300      	movs	r3, #0
 80080fa:	220a      	movs	r2, #10
 80080fc:	4658      	mov	r0, fp
 80080fe:	f000 f9bd 	bl	800847c <__multadd>
 8008102:	4605      	mov	r5, r0
 8008104:	e7f0      	b.n	80080e8 <_dtoa_r+0xac0>
 8008106:	9b08      	ldr	r3, [sp, #32]
 8008108:	2b00      	cmp	r3, #0
 800810a:	bfcc      	ite	gt
 800810c:	461e      	movgt	r6, r3
 800810e:	2601      	movle	r6, #1
 8008110:	4456      	add	r6, sl
 8008112:	2700      	movs	r7, #0
 8008114:	4649      	mov	r1, r9
 8008116:	2201      	movs	r2, #1
 8008118:	4658      	mov	r0, fp
 800811a:	f000 fba5 	bl	8008868 <__lshift>
 800811e:	4621      	mov	r1, r4
 8008120:	4681      	mov	r9, r0
 8008122:	f000 fc0d 	bl	8008940 <__mcmp>
 8008126:	2800      	cmp	r0, #0
 8008128:	dcb0      	bgt.n	800808c <_dtoa_r+0xa64>
 800812a:	d102      	bne.n	8008132 <_dtoa_r+0xb0a>
 800812c:	f018 0f01 	tst.w	r8, #1
 8008130:	d1ac      	bne.n	800808c <_dtoa_r+0xa64>
 8008132:	4633      	mov	r3, r6
 8008134:	461e      	mov	r6, r3
 8008136:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800813a:	2a30      	cmp	r2, #48	@ 0x30
 800813c:	d0fa      	beq.n	8008134 <_dtoa_r+0xb0c>
 800813e:	e5be      	b.n	8007cbe <_dtoa_r+0x696>
 8008140:	459a      	cmp	sl, r3
 8008142:	d1a4      	bne.n	800808e <_dtoa_r+0xa66>
 8008144:	9b04      	ldr	r3, [sp, #16]
 8008146:	3301      	adds	r3, #1
 8008148:	9304      	str	r3, [sp, #16]
 800814a:	2331      	movs	r3, #49	@ 0x31
 800814c:	f88a 3000 	strb.w	r3, [sl]
 8008150:	e5b5      	b.n	8007cbe <_dtoa_r+0x696>
 8008152:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008154:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80081b4 <_dtoa_r+0xb8c>
 8008158:	b11b      	cbz	r3, 8008162 <_dtoa_r+0xb3a>
 800815a:	f10a 0308 	add.w	r3, sl, #8
 800815e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	4650      	mov	r0, sl
 8008164:	b017      	add	sp, #92	@ 0x5c
 8008166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800816c:	2b01      	cmp	r3, #1
 800816e:	f77f ae3d 	ble.w	8007dec <_dtoa_r+0x7c4>
 8008172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008174:	930a      	str	r3, [sp, #40]	@ 0x28
 8008176:	2001      	movs	r0, #1
 8008178:	e65b      	b.n	8007e32 <_dtoa_r+0x80a>
 800817a:	9b08      	ldr	r3, [sp, #32]
 800817c:	2b00      	cmp	r3, #0
 800817e:	f77f aed6 	ble.w	8007f2e <_dtoa_r+0x906>
 8008182:	4656      	mov	r6, sl
 8008184:	4621      	mov	r1, r4
 8008186:	4648      	mov	r0, r9
 8008188:	f7ff f9c6 	bl	8007518 <quorem>
 800818c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008190:	f806 8b01 	strb.w	r8, [r6], #1
 8008194:	9b08      	ldr	r3, [sp, #32]
 8008196:	eba6 020a 	sub.w	r2, r6, sl
 800819a:	4293      	cmp	r3, r2
 800819c:	ddb3      	ble.n	8008106 <_dtoa_r+0xade>
 800819e:	4649      	mov	r1, r9
 80081a0:	2300      	movs	r3, #0
 80081a2:	220a      	movs	r2, #10
 80081a4:	4658      	mov	r0, fp
 80081a6:	f000 f969 	bl	800847c <__multadd>
 80081aa:	4681      	mov	r9, r0
 80081ac:	e7ea      	b.n	8008184 <_dtoa_r+0xb5c>
 80081ae:	bf00      	nop
 80081b0:	0800b55b 	.word	0x0800b55b
 80081b4:	0800b4df 	.word	0x0800b4df

080081b8 <_free_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4605      	mov	r5, r0
 80081bc:	2900      	cmp	r1, #0
 80081be:	d041      	beq.n	8008244 <_free_r+0x8c>
 80081c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c4:	1f0c      	subs	r4, r1, #4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bfb8      	it	lt
 80081ca:	18e4      	addlt	r4, r4, r3
 80081cc:	f000 f8e8 	bl	80083a0 <__malloc_lock>
 80081d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008248 <_free_r+0x90>)
 80081d2:	6813      	ldr	r3, [r2, #0]
 80081d4:	b933      	cbnz	r3, 80081e4 <_free_r+0x2c>
 80081d6:	6063      	str	r3, [r4, #4]
 80081d8:	6014      	str	r4, [r2, #0]
 80081da:	4628      	mov	r0, r5
 80081dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081e0:	f000 b8e4 	b.w	80083ac <__malloc_unlock>
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	d908      	bls.n	80081fa <_free_r+0x42>
 80081e8:	6820      	ldr	r0, [r4, #0]
 80081ea:	1821      	adds	r1, r4, r0
 80081ec:	428b      	cmp	r3, r1
 80081ee:	bf01      	itttt	eq
 80081f0:	6819      	ldreq	r1, [r3, #0]
 80081f2:	685b      	ldreq	r3, [r3, #4]
 80081f4:	1809      	addeq	r1, r1, r0
 80081f6:	6021      	streq	r1, [r4, #0]
 80081f8:	e7ed      	b.n	80081d6 <_free_r+0x1e>
 80081fa:	461a      	mov	r2, r3
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	b10b      	cbz	r3, 8008204 <_free_r+0x4c>
 8008200:	42a3      	cmp	r3, r4
 8008202:	d9fa      	bls.n	80081fa <_free_r+0x42>
 8008204:	6811      	ldr	r1, [r2, #0]
 8008206:	1850      	adds	r0, r2, r1
 8008208:	42a0      	cmp	r0, r4
 800820a:	d10b      	bne.n	8008224 <_free_r+0x6c>
 800820c:	6820      	ldr	r0, [r4, #0]
 800820e:	4401      	add	r1, r0
 8008210:	1850      	adds	r0, r2, r1
 8008212:	4283      	cmp	r3, r0
 8008214:	6011      	str	r1, [r2, #0]
 8008216:	d1e0      	bne.n	80081da <_free_r+0x22>
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	6053      	str	r3, [r2, #4]
 800821e:	4408      	add	r0, r1
 8008220:	6010      	str	r0, [r2, #0]
 8008222:	e7da      	b.n	80081da <_free_r+0x22>
 8008224:	d902      	bls.n	800822c <_free_r+0x74>
 8008226:	230c      	movs	r3, #12
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	e7d6      	b.n	80081da <_free_r+0x22>
 800822c:	6820      	ldr	r0, [r4, #0]
 800822e:	1821      	adds	r1, r4, r0
 8008230:	428b      	cmp	r3, r1
 8008232:	bf04      	itt	eq
 8008234:	6819      	ldreq	r1, [r3, #0]
 8008236:	685b      	ldreq	r3, [r3, #4]
 8008238:	6063      	str	r3, [r4, #4]
 800823a:	bf04      	itt	eq
 800823c:	1809      	addeq	r1, r1, r0
 800823e:	6021      	streq	r1, [r4, #0]
 8008240:	6054      	str	r4, [r2, #4]
 8008242:	e7ca      	b.n	80081da <_free_r+0x22>
 8008244:	bd38      	pop	{r3, r4, r5, pc}
 8008246:	bf00      	nop
 8008248:	20000508 	.word	0x20000508

0800824c <malloc>:
 800824c:	4b02      	ldr	r3, [pc, #8]	@ (8008258 <malloc+0xc>)
 800824e:	4601      	mov	r1, r0
 8008250:	6818      	ldr	r0, [r3, #0]
 8008252:	f000 b825 	b.w	80082a0 <_malloc_r>
 8008256:	bf00      	nop
 8008258:	20000018 	.word	0x20000018

0800825c <sbrk_aligned>:
 800825c:	b570      	push	{r4, r5, r6, lr}
 800825e:	4e0f      	ldr	r6, [pc, #60]	@ (800829c <sbrk_aligned+0x40>)
 8008260:	460c      	mov	r4, r1
 8008262:	6831      	ldr	r1, [r6, #0]
 8008264:	4605      	mov	r5, r0
 8008266:	b911      	cbnz	r1, 800826e <sbrk_aligned+0x12>
 8008268:	f002 fb46 	bl	800a8f8 <_sbrk_r>
 800826c:	6030      	str	r0, [r6, #0]
 800826e:	4621      	mov	r1, r4
 8008270:	4628      	mov	r0, r5
 8008272:	f002 fb41 	bl	800a8f8 <_sbrk_r>
 8008276:	1c43      	adds	r3, r0, #1
 8008278:	d103      	bne.n	8008282 <sbrk_aligned+0x26>
 800827a:	f04f 34ff 	mov.w	r4, #4294967295
 800827e:	4620      	mov	r0, r4
 8008280:	bd70      	pop	{r4, r5, r6, pc}
 8008282:	1cc4      	adds	r4, r0, #3
 8008284:	f024 0403 	bic.w	r4, r4, #3
 8008288:	42a0      	cmp	r0, r4
 800828a:	d0f8      	beq.n	800827e <sbrk_aligned+0x22>
 800828c:	1a21      	subs	r1, r4, r0
 800828e:	4628      	mov	r0, r5
 8008290:	f002 fb32 	bl	800a8f8 <_sbrk_r>
 8008294:	3001      	adds	r0, #1
 8008296:	d1f2      	bne.n	800827e <sbrk_aligned+0x22>
 8008298:	e7ef      	b.n	800827a <sbrk_aligned+0x1e>
 800829a:	bf00      	nop
 800829c:	20000504 	.word	0x20000504

080082a0 <_malloc_r>:
 80082a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a4:	1ccd      	adds	r5, r1, #3
 80082a6:	f025 0503 	bic.w	r5, r5, #3
 80082aa:	3508      	adds	r5, #8
 80082ac:	2d0c      	cmp	r5, #12
 80082ae:	bf38      	it	cc
 80082b0:	250c      	movcc	r5, #12
 80082b2:	2d00      	cmp	r5, #0
 80082b4:	4606      	mov	r6, r0
 80082b6:	db01      	blt.n	80082bc <_malloc_r+0x1c>
 80082b8:	42a9      	cmp	r1, r5
 80082ba:	d904      	bls.n	80082c6 <_malloc_r+0x26>
 80082bc:	230c      	movs	r3, #12
 80082be:	6033      	str	r3, [r6, #0]
 80082c0:	2000      	movs	r0, #0
 80082c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800839c <_malloc_r+0xfc>
 80082ca:	f000 f869 	bl	80083a0 <__malloc_lock>
 80082ce:	f8d8 3000 	ldr.w	r3, [r8]
 80082d2:	461c      	mov	r4, r3
 80082d4:	bb44      	cbnz	r4, 8008328 <_malloc_r+0x88>
 80082d6:	4629      	mov	r1, r5
 80082d8:	4630      	mov	r0, r6
 80082da:	f7ff ffbf 	bl	800825c <sbrk_aligned>
 80082de:	1c43      	adds	r3, r0, #1
 80082e0:	4604      	mov	r4, r0
 80082e2:	d158      	bne.n	8008396 <_malloc_r+0xf6>
 80082e4:	f8d8 4000 	ldr.w	r4, [r8]
 80082e8:	4627      	mov	r7, r4
 80082ea:	2f00      	cmp	r7, #0
 80082ec:	d143      	bne.n	8008376 <_malloc_r+0xd6>
 80082ee:	2c00      	cmp	r4, #0
 80082f0:	d04b      	beq.n	800838a <_malloc_r+0xea>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	4639      	mov	r1, r7
 80082f6:	4630      	mov	r0, r6
 80082f8:	eb04 0903 	add.w	r9, r4, r3
 80082fc:	f002 fafc 	bl	800a8f8 <_sbrk_r>
 8008300:	4581      	cmp	r9, r0
 8008302:	d142      	bne.n	800838a <_malloc_r+0xea>
 8008304:	6821      	ldr	r1, [r4, #0]
 8008306:	1a6d      	subs	r5, r5, r1
 8008308:	4629      	mov	r1, r5
 800830a:	4630      	mov	r0, r6
 800830c:	f7ff ffa6 	bl	800825c <sbrk_aligned>
 8008310:	3001      	adds	r0, #1
 8008312:	d03a      	beq.n	800838a <_malloc_r+0xea>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	442b      	add	r3, r5
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	f8d8 3000 	ldr.w	r3, [r8]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	bb62      	cbnz	r2, 800837c <_malloc_r+0xdc>
 8008322:	f8c8 7000 	str.w	r7, [r8]
 8008326:	e00f      	b.n	8008348 <_malloc_r+0xa8>
 8008328:	6822      	ldr	r2, [r4, #0]
 800832a:	1b52      	subs	r2, r2, r5
 800832c:	d420      	bmi.n	8008370 <_malloc_r+0xd0>
 800832e:	2a0b      	cmp	r2, #11
 8008330:	d917      	bls.n	8008362 <_malloc_r+0xc2>
 8008332:	1961      	adds	r1, r4, r5
 8008334:	42a3      	cmp	r3, r4
 8008336:	6025      	str	r5, [r4, #0]
 8008338:	bf18      	it	ne
 800833a:	6059      	strne	r1, [r3, #4]
 800833c:	6863      	ldr	r3, [r4, #4]
 800833e:	bf08      	it	eq
 8008340:	f8c8 1000 	streq.w	r1, [r8]
 8008344:	5162      	str	r2, [r4, r5]
 8008346:	604b      	str	r3, [r1, #4]
 8008348:	4630      	mov	r0, r6
 800834a:	f000 f82f 	bl	80083ac <__malloc_unlock>
 800834e:	f104 000b 	add.w	r0, r4, #11
 8008352:	1d23      	adds	r3, r4, #4
 8008354:	f020 0007 	bic.w	r0, r0, #7
 8008358:	1ac2      	subs	r2, r0, r3
 800835a:	bf1c      	itt	ne
 800835c:	1a1b      	subne	r3, r3, r0
 800835e:	50a3      	strne	r3, [r4, r2]
 8008360:	e7af      	b.n	80082c2 <_malloc_r+0x22>
 8008362:	6862      	ldr	r2, [r4, #4]
 8008364:	42a3      	cmp	r3, r4
 8008366:	bf0c      	ite	eq
 8008368:	f8c8 2000 	streq.w	r2, [r8]
 800836c:	605a      	strne	r2, [r3, #4]
 800836e:	e7eb      	b.n	8008348 <_malloc_r+0xa8>
 8008370:	4623      	mov	r3, r4
 8008372:	6864      	ldr	r4, [r4, #4]
 8008374:	e7ae      	b.n	80082d4 <_malloc_r+0x34>
 8008376:	463c      	mov	r4, r7
 8008378:	687f      	ldr	r7, [r7, #4]
 800837a:	e7b6      	b.n	80082ea <_malloc_r+0x4a>
 800837c:	461a      	mov	r2, r3
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	42a3      	cmp	r3, r4
 8008382:	d1fb      	bne.n	800837c <_malloc_r+0xdc>
 8008384:	2300      	movs	r3, #0
 8008386:	6053      	str	r3, [r2, #4]
 8008388:	e7de      	b.n	8008348 <_malloc_r+0xa8>
 800838a:	230c      	movs	r3, #12
 800838c:	6033      	str	r3, [r6, #0]
 800838e:	4630      	mov	r0, r6
 8008390:	f000 f80c 	bl	80083ac <__malloc_unlock>
 8008394:	e794      	b.n	80082c0 <_malloc_r+0x20>
 8008396:	6005      	str	r5, [r0, #0]
 8008398:	e7d6      	b.n	8008348 <_malloc_r+0xa8>
 800839a:	bf00      	nop
 800839c:	20000508 	.word	0x20000508

080083a0 <__malloc_lock>:
 80083a0:	4801      	ldr	r0, [pc, #4]	@ (80083a8 <__malloc_lock+0x8>)
 80083a2:	f7ff b8b2 	b.w	800750a <__retarget_lock_acquire_recursive>
 80083a6:	bf00      	nop
 80083a8:	20000500 	.word	0x20000500

080083ac <__malloc_unlock>:
 80083ac:	4801      	ldr	r0, [pc, #4]	@ (80083b4 <__malloc_unlock+0x8>)
 80083ae:	f7ff b8ad 	b.w	800750c <__retarget_lock_release_recursive>
 80083b2:	bf00      	nop
 80083b4:	20000500 	.word	0x20000500

080083b8 <_Balloc>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	69c6      	ldr	r6, [r0, #28]
 80083bc:	4604      	mov	r4, r0
 80083be:	460d      	mov	r5, r1
 80083c0:	b976      	cbnz	r6, 80083e0 <_Balloc+0x28>
 80083c2:	2010      	movs	r0, #16
 80083c4:	f7ff ff42 	bl	800824c <malloc>
 80083c8:	4602      	mov	r2, r0
 80083ca:	61e0      	str	r0, [r4, #28]
 80083cc:	b920      	cbnz	r0, 80083d8 <_Balloc+0x20>
 80083ce:	4b18      	ldr	r3, [pc, #96]	@ (8008430 <_Balloc+0x78>)
 80083d0:	4818      	ldr	r0, [pc, #96]	@ (8008434 <_Balloc+0x7c>)
 80083d2:	216b      	movs	r1, #107	@ 0x6b
 80083d4:	f002 fab4 	bl	800a940 <__assert_func>
 80083d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083dc:	6006      	str	r6, [r0, #0]
 80083de:	60c6      	str	r6, [r0, #12]
 80083e0:	69e6      	ldr	r6, [r4, #28]
 80083e2:	68f3      	ldr	r3, [r6, #12]
 80083e4:	b183      	cbz	r3, 8008408 <_Balloc+0x50>
 80083e6:	69e3      	ldr	r3, [r4, #28]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083ee:	b9b8      	cbnz	r0, 8008420 <_Balloc+0x68>
 80083f0:	2101      	movs	r1, #1
 80083f2:	fa01 f605 	lsl.w	r6, r1, r5
 80083f6:	1d72      	adds	r2, r6, #5
 80083f8:	0092      	lsls	r2, r2, #2
 80083fa:	4620      	mov	r0, r4
 80083fc:	f002 fabe 	bl	800a97c <_calloc_r>
 8008400:	b160      	cbz	r0, 800841c <_Balloc+0x64>
 8008402:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008406:	e00e      	b.n	8008426 <_Balloc+0x6e>
 8008408:	2221      	movs	r2, #33	@ 0x21
 800840a:	2104      	movs	r1, #4
 800840c:	4620      	mov	r0, r4
 800840e:	f002 fab5 	bl	800a97c <_calloc_r>
 8008412:	69e3      	ldr	r3, [r4, #28]
 8008414:	60f0      	str	r0, [r6, #12]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e4      	bne.n	80083e6 <_Balloc+0x2e>
 800841c:	2000      	movs	r0, #0
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	6802      	ldr	r2, [r0, #0]
 8008422:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008426:	2300      	movs	r3, #0
 8008428:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800842c:	e7f7      	b.n	800841e <_Balloc+0x66>
 800842e:	bf00      	nop
 8008430:	0800b4ec 	.word	0x0800b4ec
 8008434:	0800b56c 	.word	0x0800b56c

08008438 <_Bfree>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	69c6      	ldr	r6, [r0, #28]
 800843c:	4605      	mov	r5, r0
 800843e:	460c      	mov	r4, r1
 8008440:	b976      	cbnz	r6, 8008460 <_Bfree+0x28>
 8008442:	2010      	movs	r0, #16
 8008444:	f7ff ff02 	bl	800824c <malloc>
 8008448:	4602      	mov	r2, r0
 800844a:	61e8      	str	r0, [r5, #28]
 800844c:	b920      	cbnz	r0, 8008458 <_Bfree+0x20>
 800844e:	4b09      	ldr	r3, [pc, #36]	@ (8008474 <_Bfree+0x3c>)
 8008450:	4809      	ldr	r0, [pc, #36]	@ (8008478 <_Bfree+0x40>)
 8008452:	218f      	movs	r1, #143	@ 0x8f
 8008454:	f002 fa74 	bl	800a940 <__assert_func>
 8008458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800845c:	6006      	str	r6, [r0, #0]
 800845e:	60c6      	str	r6, [r0, #12]
 8008460:	b13c      	cbz	r4, 8008472 <_Bfree+0x3a>
 8008462:	69eb      	ldr	r3, [r5, #28]
 8008464:	6862      	ldr	r2, [r4, #4]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800846c:	6021      	str	r1, [r4, #0]
 800846e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	0800b4ec 	.word	0x0800b4ec
 8008478:	0800b56c 	.word	0x0800b56c

0800847c <__multadd>:
 800847c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008480:	690d      	ldr	r5, [r1, #16]
 8008482:	4607      	mov	r7, r0
 8008484:	460c      	mov	r4, r1
 8008486:	461e      	mov	r6, r3
 8008488:	f101 0c14 	add.w	ip, r1, #20
 800848c:	2000      	movs	r0, #0
 800848e:	f8dc 3000 	ldr.w	r3, [ip]
 8008492:	b299      	uxth	r1, r3
 8008494:	fb02 6101 	mla	r1, r2, r1, r6
 8008498:	0c1e      	lsrs	r6, r3, #16
 800849a:	0c0b      	lsrs	r3, r1, #16
 800849c:	fb02 3306 	mla	r3, r2, r6, r3
 80084a0:	b289      	uxth	r1, r1
 80084a2:	3001      	adds	r0, #1
 80084a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084a8:	4285      	cmp	r5, r0
 80084aa:	f84c 1b04 	str.w	r1, [ip], #4
 80084ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80084b2:	dcec      	bgt.n	800848e <__multadd+0x12>
 80084b4:	b30e      	cbz	r6, 80084fa <__multadd+0x7e>
 80084b6:	68a3      	ldr	r3, [r4, #8]
 80084b8:	42ab      	cmp	r3, r5
 80084ba:	dc19      	bgt.n	80084f0 <__multadd+0x74>
 80084bc:	6861      	ldr	r1, [r4, #4]
 80084be:	4638      	mov	r0, r7
 80084c0:	3101      	adds	r1, #1
 80084c2:	f7ff ff79 	bl	80083b8 <_Balloc>
 80084c6:	4680      	mov	r8, r0
 80084c8:	b928      	cbnz	r0, 80084d6 <__multadd+0x5a>
 80084ca:	4602      	mov	r2, r0
 80084cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008500 <__multadd+0x84>)
 80084ce:	480d      	ldr	r0, [pc, #52]	@ (8008504 <__multadd+0x88>)
 80084d0:	21ba      	movs	r1, #186	@ 0xba
 80084d2:	f002 fa35 	bl	800a940 <__assert_func>
 80084d6:	6922      	ldr	r2, [r4, #16]
 80084d8:	3202      	adds	r2, #2
 80084da:	f104 010c 	add.w	r1, r4, #12
 80084de:	0092      	lsls	r2, r2, #2
 80084e0:	300c      	adds	r0, #12
 80084e2:	f002 fa19 	bl	800a918 <memcpy>
 80084e6:	4621      	mov	r1, r4
 80084e8:	4638      	mov	r0, r7
 80084ea:	f7ff ffa5 	bl	8008438 <_Bfree>
 80084ee:	4644      	mov	r4, r8
 80084f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084f4:	3501      	adds	r5, #1
 80084f6:	615e      	str	r6, [r3, #20]
 80084f8:	6125      	str	r5, [r4, #16]
 80084fa:	4620      	mov	r0, r4
 80084fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008500:	0800b55b 	.word	0x0800b55b
 8008504:	0800b56c 	.word	0x0800b56c

08008508 <__s2b>:
 8008508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800850c:	460c      	mov	r4, r1
 800850e:	4615      	mov	r5, r2
 8008510:	461f      	mov	r7, r3
 8008512:	2209      	movs	r2, #9
 8008514:	3308      	adds	r3, #8
 8008516:	4606      	mov	r6, r0
 8008518:	fb93 f3f2 	sdiv	r3, r3, r2
 800851c:	2100      	movs	r1, #0
 800851e:	2201      	movs	r2, #1
 8008520:	429a      	cmp	r2, r3
 8008522:	db09      	blt.n	8008538 <__s2b+0x30>
 8008524:	4630      	mov	r0, r6
 8008526:	f7ff ff47 	bl	80083b8 <_Balloc>
 800852a:	b940      	cbnz	r0, 800853e <__s2b+0x36>
 800852c:	4602      	mov	r2, r0
 800852e:	4b19      	ldr	r3, [pc, #100]	@ (8008594 <__s2b+0x8c>)
 8008530:	4819      	ldr	r0, [pc, #100]	@ (8008598 <__s2b+0x90>)
 8008532:	21d3      	movs	r1, #211	@ 0xd3
 8008534:	f002 fa04 	bl	800a940 <__assert_func>
 8008538:	0052      	lsls	r2, r2, #1
 800853a:	3101      	adds	r1, #1
 800853c:	e7f0      	b.n	8008520 <__s2b+0x18>
 800853e:	9b08      	ldr	r3, [sp, #32]
 8008540:	6143      	str	r3, [r0, #20]
 8008542:	2d09      	cmp	r5, #9
 8008544:	f04f 0301 	mov.w	r3, #1
 8008548:	6103      	str	r3, [r0, #16]
 800854a:	dd16      	ble.n	800857a <__s2b+0x72>
 800854c:	f104 0909 	add.w	r9, r4, #9
 8008550:	46c8      	mov	r8, r9
 8008552:	442c      	add	r4, r5
 8008554:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008558:	4601      	mov	r1, r0
 800855a:	3b30      	subs	r3, #48	@ 0x30
 800855c:	220a      	movs	r2, #10
 800855e:	4630      	mov	r0, r6
 8008560:	f7ff ff8c 	bl	800847c <__multadd>
 8008564:	45a0      	cmp	r8, r4
 8008566:	d1f5      	bne.n	8008554 <__s2b+0x4c>
 8008568:	f1a5 0408 	sub.w	r4, r5, #8
 800856c:	444c      	add	r4, r9
 800856e:	1b2d      	subs	r5, r5, r4
 8008570:	1963      	adds	r3, r4, r5
 8008572:	42bb      	cmp	r3, r7
 8008574:	db04      	blt.n	8008580 <__s2b+0x78>
 8008576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800857a:	340a      	adds	r4, #10
 800857c:	2509      	movs	r5, #9
 800857e:	e7f6      	b.n	800856e <__s2b+0x66>
 8008580:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008584:	4601      	mov	r1, r0
 8008586:	3b30      	subs	r3, #48	@ 0x30
 8008588:	220a      	movs	r2, #10
 800858a:	4630      	mov	r0, r6
 800858c:	f7ff ff76 	bl	800847c <__multadd>
 8008590:	e7ee      	b.n	8008570 <__s2b+0x68>
 8008592:	bf00      	nop
 8008594:	0800b55b 	.word	0x0800b55b
 8008598:	0800b56c 	.word	0x0800b56c

0800859c <__hi0bits>:
 800859c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80085a0:	4603      	mov	r3, r0
 80085a2:	bf36      	itet	cc
 80085a4:	0403      	lslcc	r3, r0, #16
 80085a6:	2000      	movcs	r0, #0
 80085a8:	2010      	movcc	r0, #16
 80085aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085ae:	bf3c      	itt	cc
 80085b0:	021b      	lslcc	r3, r3, #8
 80085b2:	3008      	addcc	r0, #8
 80085b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085b8:	bf3c      	itt	cc
 80085ba:	011b      	lslcc	r3, r3, #4
 80085bc:	3004      	addcc	r0, #4
 80085be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085c2:	bf3c      	itt	cc
 80085c4:	009b      	lslcc	r3, r3, #2
 80085c6:	3002      	addcc	r0, #2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	db05      	blt.n	80085d8 <__hi0bits+0x3c>
 80085cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80085d0:	f100 0001 	add.w	r0, r0, #1
 80085d4:	bf08      	it	eq
 80085d6:	2020      	moveq	r0, #32
 80085d8:	4770      	bx	lr

080085da <__lo0bits>:
 80085da:	6803      	ldr	r3, [r0, #0]
 80085dc:	4602      	mov	r2, r0
 80085de:	f013 0007 	ands.w	r0, r3, #7
 80085e2:	d00b      	beq.n	80085fc <__lo0bits+0x22>
 80085e4:	07d9      	lsls	r1, r3, #31
 80085e6:	d421      	bmi.n	800862c <__lo0bits+0x52>
 80085e8:	0798      	lsls	r0, r3, #30
 80085ea:	bf49      	itett	mi
 80085ec:	085b      	lsrmi	r3, r3, #1
 80085ee:	089b      	lsrpl	r3, r3, #2
 80085f0:	2001      	movmi	r0, #1
 80085f2:	6013      	strmi	r3, [r2, #0]
 80085f4:	bf5c      	itt	pl
 80085f6:	6013      	strpl	r3, [r2, #0]
 80085f8:	2002      	movpl	r0, #2
 80085fa:	4770      	bx	lr
 80085fc:	b299      	uxth	r1, r3
 80085fe:	b909      	cbnz	r1, 8008604 <__lo0bits+0x2a>
 8008600:	0c1b      	lsrs	r3, r3, #16
 8008602:	2010      	movs	r0, #16
 8008604:	b2d9      	uxtb	r1, r3
 8008606:	b909      	cbnz	r1, 800860c <__lo0bits+0x32>
 8008608:	3008      	adds	r0, #8
 800860a:	0a1b      	lsrs	r3, r3, #8
 800860c:	0719      	lsls	r1, r3, #28
 800860e:	bf04      	itt	eq
 8008610:	091b      	lsreq	r3, r3, #4
 8008612:	3004      	addeq	r0, #4
 8008614:	0799      	lsls	r1, r3, #30
 8008616:	bf04      	itt	eq
 8008618:	089b      	lsreq	r3, r3, #2
 800861a:	3002      	addeq	r0, #2
 800861c:	07d9      	lsls	r1, r3, #31
 800861e:	d403      	bmi.n	8008628 <__lo0bits+0x4e>
 8008620:	085b      	lsrs	r3, r3, #1
 8008622:	f100 0001 	add.w	r0, r0, #1
 8008626:	d003      	beq.n	8008630 <__lo0bits+0x56>
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	4770      	bx	lr
 800862c:	2000      	movs	r0, #0
 800862e:	4770      	bx	lr
 8008630:	2020      	movs	r0, #32
 8008632:	4770      	bx	lr

08008634 <__i2b>:
 8008634:	b510      	push	{r4, lr}
 8008636:	460c      	mov	r4, r1
 8008638:	2101      	movs	r1, #1
 800863a:	f7ff febd 	bl	80083b8 <_Balloc>
 800863e:	4602      	mov	r2, r0
 8008640:	b928      	cbnz	r0, 800864e <__i2b+0x1a>
 8008642:	4b05      	ldr	r3, [pc, #20]	@ (8008658 <__i2b+0x24>)
 8008644:	4805      	ldr	r0, [pc, #20]	@ (800865c <__i2b+0x28>)
 8008646:	f240 1145 	movw	r1, #325	@ 0x145
 800864a:	f002 f979 	bl	800a940 <__assert_func>
 800864e:	2301      	movs	r3, #1
 8008650:	6144      	str	r4, [r0, #20]
 8008652:	6103      	str	r3, [r0, #16]
 8008654:	bd10      	pop	{r4, pc}
 8008656:	bf00      	nop
 8008658:	0800b55b 	.word	0x0800b55b
 800865c:	0800b56c 	.word	0x0800b56c

08008660 <__multiply>:
 8008660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	4614      	mov	r4, r2
 8008666:	690a      	ldr	r2, [r1, #16]
 8008668:	6923      	ldr	r3, [r4, #16]
 800866a:	429a      	cmp	r2, r3
 800866c:	bfa8      	it	ge
 800866e:	4623      	movge	r3, r4
 8008670:	460f      	mov	r7, r1
 8008672:	bfa4      	itt	ge
 8008674:	460c      	movge	r4, r1
 8008676:	461f      	movge	r7, r3
 8008678:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800867c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008680:	68a3      	ldr	r3, [r4, #8]
 8008682:	6861      	ldr	r1, [r4, #4]
 8008684:	eb0a 0609 	add.w	r6, sl, r9
 8008688:	42b3      	cmp	r3, r6
 800868a:	b085      	sub	sp, #20
 800868c:	bfb8      	it	lt
 800868e:	3101      	addlt	r1, #1
 8008690:	f7ff fe92 	bl	80083b8 <_Balloc>
 8008694:	b930      	cbnz	r0, 80086a4 <__multiply+0x44>
 8008696:	4602      	mov	r2, r0
 8008698:	4b44      	ldr	r3, [pc, #272]	@ (80087ac <__multiply+0x14c>)
 800869a:	4845      	ldr	r0, [pc, #276]	@ (80087b0 <__multiply+0x150>)
 800869c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80086a0:	f002 f94e 	bl	800a940 <__assert_func>
 80086a4:	f100 0514 	add.w	r5, r0, #20
 80086a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086ac:	462b      	mov	r3, r5
 80086ae:	2200      	movs	r2, #0
 80086b0:	4543      	cmp	r3, r8
 80086b2:	d321      	bcc.n	80086f8 <__multiply+0x98>
 80086b4:	f107 0114 	add.w	r1, r7, #20
 80086b8:	f104 0214 	add.w	r2, r4, #20
 80086bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80086c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80086c4:	9302      	str	r3, [sp, #8]
 80086c6:	1b13      	subs	r3, r2, r4
 80086c8:	3b15      	subs	r3, #21
 80086ca:	f023 0303 	bic.w	r3, r3, #3
 80086ce:	3304      	adds	r3, #4
 80086d0:	f104 0715 	add.w	r7, r4, #21
 80086d4:	42ba      	cmp	r2, r7
 80086d6:	bf38      	it	cc
 80086d8:	2304      	movcc	r3, #4
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	9b02      	ldr	r3, [sp, #8]
 80086de:	9103      	str	r1, [sp, #12]
 80086e0:	428b      	cmp	r3, r1
 80086e2:	d80c      	bhi.n	80086fe <__multiply+0x9e>
 80086e4:	2e00      	cmp	r6, #0
 80086e6:	dd03      	ble.n	80086f0 <__multiply+0x90>
 80086e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d05a      	beq.n	80087a6 <__multiply+0x146>
 80086f0:	6106      	str	r6, [r0, #16]
 80086f2:	b005      	add	sp, #20
 80086f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f8:	f843 2b04 	str.w	r2, [r3], #4
 80086fc:	e7d8      	b.n	80086b0 <__multiply+0x50>
 80086fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8008702:	f1ba 0f00 	cmp.w	sl, #0
 8008706:	d023      	beq.n	8008750 <__multiply+0xf0>
 8008708:	f104 0e14 	add.w	lr, r4, #20
 800870c:	46a9      	mov	r9, r5
 800870e:	f04f 0c00 	mov.w	ip, #0
 8008712:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008716:	f8d9 3000 	ldr.w	r3, [r9]
 800871a:	fa1f fb87 	uxth.w	fp, r7
 800871e:	b29b      	uxth	r3, r3
 8008720:	fb0a 330b 	mla	r3, sl, fp, r3
 8008724:	4463      	add	r3, ip
 8008726:	f8d9 c000 	ldr.w	ip, [r9]
 800872a:	0c3f      	lsrs	r7, r7, #16
 800872c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008730:	fb0a c707 	mla	r7, sl, r7, ip
 8008734:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008738:	b29b      	uxth	r3, r3
 800873a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800873e:	4572      	cmp	r2, lr
 8008740:	f849 3b04 	str.w	r3, [r9], #4
 8008744:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008748:	d8e3      	bhi.n	8008712 <__multiply+0xb2>
 800874a:	9b01      	ldr	r3, [sp, #4]
 800874c:	f845 c003 	str.w	ip, [r5, r3]
 8008750:	9b03      	ldr	r3, [sp, #12]
 8008752:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008756:	3104      	adds	r1, #4
 8008758:	f1b9 0f00 	cmp.w	r9, #0
 800875c:	d021      	beq.n	80087a2 <__multiply+0x142>
 800875e:	682b      	ldr	r3, [r5, #0]
 8008760:	f104 0c14 	add.w	ip, r4, #20
 8008764:	46ae      	mov	lr, r5
 8008766:	f04f 0a00 	mov.w	sl, #0
 800876a:	f8bc b000 	ldrh.w	fp, [ip]
 800876e:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008772:	fb09 770b 	mla	r7, r9, fp, r7
 8008776:	4457      	add	r7, sl
 8008778:	b29b      	uxth	r3, r3
 800877a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800877e:	f84e 3b04 	str.w	r3, [lr], #4
 8008782:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008786:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800878a:	f8be 3000 	ldrh.w	r3, [lr]
 800878e:	fb09 330a 	mla	r3, r9, sl, r3
 8008792:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008796:	4562      	cmp	r2, ip
 8008798:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800879c:	d8e5      	bhi.n	800876a <__multiply+0x10a>
 800879e:	9f01      	ldr	r7, [sp, #4]
 80087a0:	51eb      	str	r3, [r5, r7]
 80087a2:	3504      	adds	r5, #4
 80087a4:	e79a      	b.n	80086dc <__multiply+0x7c>
 80087a6:	3e01      	subs	r6, #1
 80087a8:	e79c      	b.n	80086e4 <__multiply+0x84>
 80087aa:	bf00      	nop
 80087ac:	0800b55b 	.word	0x0800b55b
 80087b0:	0800b56c 	.word	0x0800b56c

080087b4 <__pow5mult>:
 80087b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b8:	4615      	mov	r5, r2
 80087ba:	f012 0203 	ands.w	r2, r2, #3
 80087be:	4607      	mov	r7, r0
 80087c0:	460e      	mov	r6, r1
 80087c2:	d007      	beq.n	80087d4 <__pow5mult+0x20>
 80087c4:	4c25      	ldr	r4, [pc, #148]	@ (800885c <__pow5mult+0xa8>)
 80087c6:	3a01      	subs	r2, #1
 80087c8:	2300      	movs	r3, #0
 80087ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087ce:	f7ff fe55 	bl	800847c <__multadd>
 80087d2:	4606      	mov	r6, r0
 80087d4:	10ad      	asrs	r5, r5, #2
 80087d6:	d03d      	beq.n	8008854 <__pow5mult+0xa0>
 80087d8:	69fc      	ldr	r4, [r7, #28]
 80087da:	b97c      	cbnz	r4, 80087fc <__pow5mult+0x48>
 80087dc:	2010      	movs	r0, #16
 80087de:	f7ff fd35 	bl	800824c <malloc>
 80087e2:	4602      	mov	r2, r0
 80087e4:	61f8      	str	r0, [r7, #28]
 80087e6:	b928      	cbnz	r0, 80087f4 <__pow5mult+0x40>
 80087e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008860 <__pow5mult+0xac>)
 80087ea:	481e      	ldr	r0, [pc, #120]	@ (8008864 <__pow5mult+0xb0>)
 80087ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80087f0:	f002 f8a6 	bl	800a940 <__assert_func>
 80087f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087f8:	6004      	str	r4, [r0, #0]
 80087fa:	60c4      	str	r4, [r0, #12]
 80087fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008800:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008804:	b94c      	cbnz	r4, 800881a <__pow5mult+0x66>
 8008806:	f240 2171 	movw	r1, #625	@ 0x271
 800880a:	4638      	mov	r0, r7
 800880c:	f7ff ff12 	bl	8008634 <__i2b>
 8008810:	2300      	movs	r3, #0
 8008812:	f8c8 0008 	str.w	r0, [r8, #8]
 8008816:	4604      	mov	r4, r0
 8008818:	6003      	str	r3, [r0, #0]
 800881a:	f04f 0900 	mov.w	r9, #0
 800881e:	07eb      	lsls	r3, r5, #31
 8008820:	d50a      	bpl.n	8008838 <__pow5mult+0x84>
 8008822:	4631      	mov	r1, r6
 8008824:	4622      	mov	r2, r4
 8008826:	4638      	mov	r0, r7
 8008828:	f7ff ff1a 	bl	8008660 <__multiply>
 800882c:	4631      	mov	r1, r6
 800882e:	4680      	mov	r8, r0
 8008830:	4638      	mov	r0, r7
 8008832:	f7ff fe01 	bl	8008438 <_Bfree>
 8008836:	4646      	mov	r6, r8
 8008838:	106d      	asrs	r5, r5, #1
 800883a:	d00b      	beq.n	8008854 <__pow5mult+0xa0>
 800883c:	6820      	ldr	r0, [r4, #0]
 800883e:	b938      	cbnz	r0, 8008850 <__pow5mult+0x9c>
 8008840:	4622      	mov	r2, r4
 8008842:	4621      	mov	r1, r4
 8008844:	4638      	mov	r0, r7
 8008846:	f7ff ff0b 	bl	8008660 <__multiply>
 800884a:	6020      	str	r0, [r4, #0]
 800884c:	f8c0 9000 	str.w	r9, [r0]
 8008850:	4604      	mov	r4, r0
 8008852:	e7e4      	b.n	800881e <__pow5mult+0x6a>
 8008854:	4630      	mov	r0, r6
 8008856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800885a:	bf00      	nop
 800885c:	0800b5c8 	.word	0x0800b5c8
 8008860:	0800b4ec 	.word	0x0800b4ec
 8008864:	0800b56c 	.word	0x0800b56c

08008868 <__lshift>:
 8008868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800886c:	460c      	mov	r4, r1
 800886e:	6849      	ldr	r1, [r1, #4]
 8008870:	6923      	ldr	r3, [r4, #16]
 8008872:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008876:	68a3      	ldr	r3, [r4, #8]
 8008878:	4607      	mov	r7, r0
 800887a:	4691      	mov	r9, r2
 800887c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008880:	f108 0601 	add.w	r6, r8, #1
 8008884:	42b3      	cmp	r3, r6
 8008886:	db0b      	blt.n	80088a0 <__lshift+0x38>
 8008888:	4638      	mov	r0, r7
 800888a:	f7ff fd95 	bl	80083b8 <_Balloc>
 800888e:	4605      	mov	r5, r0
 8008890:	b948      	cbnz	r0, 80088a6 <__lshift+0x3e>
 8008892:	4602      	mov	r2, r0
 8008894:	4b28      	ldr	r3, [pc, #160]	@ (8008938 <__lshift+0xd0>)
 8008896:	4829      	ldr	r0, [pc, #164]	@ (800893c <__lshift+0xd4>)
 8008898:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800889c:	f002 f850 	bl	800a940 <__assert_func>
 80088a0:	3101      	adds	r1, #1
 80088a2:	005b      	lsls	r3, r3, #1
 80088a4:	e7ee      	b.n	8008884 <__lshift+0x1c>
 80088a6:	2300      	movs	r3, #0
 80088a8:	f100 0114 	add.w	r1, r0, #20
 80088ac:	f100 0210 	add.w	r2, r0, #16
 80088b0:	4618      	mov	r0, r3
 80088b2:	4553      	cmp	r3, sl
 80088b4:	db33      	blt.n	800891e <__lshift+0xb6>
 80088b6:	6920      	ldr	r0, [r4, #16]
 80088b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088bc:	f104 0314 	add.w	r3, r4, #20
 80088c0:	f019 091f 	ands.w	r9, r9, #31
 80088c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088cc:	d02b      	beq.n	8008926 <__lshift+0xbe>
 80088ce:	f1c9 0e20 	rsb	lr, r9, #32
 80088d2:	468a      	mov	sl, r1
 80088d4:	2200      	movs	r2, #0
 80088d6:	6818      	ldr	r0, [r3, #0]
 80088d8:	fa00 f009 	lsl.w	r0, r0, r9
 80088dc:	4310      	orrs	r0, r2
 80088de:	f84a 0b04 	str.w	r0, [sl], #4
 80088e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088e6:	459c      	cmp	ip, r3
 80088e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80088ec:	d8f3      	bhi.n	80088d6 <__lshift+0x6e>
 80088ee:	ebac 0304 	sub.w	r3, ip, r4
 80088f2:	3b15      	subs	r3, #21
 80088f4:	f023 0303 	bic.w	r3, r3, #3
 80088f8:	3304      	adds	r3, #4
 80088fa:	f104 0015 	add.w	r0, r4, #21
 80088fe:	4584      	cmp	ip, r0
 8008900:	bf38      	it	cc
 8008902:	2304      	movcc	r3, #4
 8008904:	50ca      	str	r2, [r1, r3]
 8008906:	b10a      	cbz	r2, 800890c <__lshift+0xa4>
 8008908:	f108 0602 	add.w	r6, r8, #2
 800890c:	3e01      	subs	r6, #1
 800890e:	4638      	mov	r0, r7
 8008910:	612e      	str	r6, [r5, #16]
 8008912:	4621      	mov	r1, r4
 8008914:	f7ff fd90 	bl	8008438 <_Bfree>
 8008918:	4628      	mov	r0, r5
 800891a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800891e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008922:	3301      	adds	r3, #1
 8008924:	e7c5      	b.n	80088b2 <__lshift+0x4a>
 8008926:	3904      	subs	r1, #4
 8008928:	f853 2b04 	ldr.w	r2, [r3], #4
 800892c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008930:	459c      	cmp	ip, r3
 8008932:	d8f9      	bhi.n	8008928 <__lshift+0xc0>
 8008934:	e7ea      	b.n	800890c <__lshift+0xa4>
 8008936:	bf00      	nop
 8008938:	0800b55b 	.word	0x0800b55b
 800893c:	0800b56c 	.word	0x0800b56c

08008940 <__mcmp>:
 8008940:	690a      	ldr	r2, [r1, #16]
 8008942:	4603      	mov	r3, r0
 8008944:	6900      	ldr	r0, [r0, #16]
 8008946:	1a80      	subs	r0, r0, r2
 8008948:	b530      	push	{r4, r5, lr}
 800894a:	d10e      	bne.n	800896a <__mcmp+0x2a>
 800894c:	3314      	adds	r3, #20
 800894e:	3114      	adds	r1, #20
 8008950:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008954:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008958:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800895c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008960:	4295      	cmp	r5, r2
 8008962:	d003      	beq.n	800896c <__mcmp+0x2c>
 8008964:	d205      	bcs.n	8008972 <__mcmp+0x32>
 8008966:	f04f 30ff 	mov.w	r0, #4294967295
 800896a:	bd30      	pop	{r4, r5, pc}
 800896c:	42a3      	cmp	r3, r4
 800896e:	d3f3      	bcc.n	8008958 <__mcmp+0x18>
 8008970:	e7fb      	b.n	800896a <__mcmp+0x2a>
 8008972:	2001      	movs	r0, #1
 8008974:	e7f9      	b.n	800896a <__mcmp+0x2a>
	...

08008978 <__mdiff>:
 8008978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	4689      	mov	r9, r1
 800897e:	4606      	mov	r6, r0
 8008980:	4611      	mov	r1, r2
 8008982:	4648      	mov	r0, r9
 8008984:	4614      	mov	r4, r2
 8008986:	f7ff ffdb 	bl	8008940 <__mcmp>
 800898a:	1e05      	subs	r5, r0, #0
 800898c:	d112      	bne.n	80089b4 <__mdiff+0x3c>
 800898e:	4629      	mov	r1, r5
 8008990:	4630      	mov	r0, r6
 8008992:	f7ff fd11 	bl	80083b8 <_Balloc>
 8008996:	4602      	mov	r2, r0
 8008998:	b928      	cbnz	r0, 80089a6 <__mdiff+0x2e>
 800899a:	4b3e      	ldr	r3, [pc, #248]	@ (8008a94 <__mdiff+0x11c>)
 800899c:	f240 2137 	movw	r1, #567	@ 0x237
 80089a0:	483d      	ldr	r0, [pc, #244]	@ (8008a98 <__mdiff+0x120>)
 80089a2:	f001 ffcd 	bl	800a940 <__assert_func>
 80089a6:	2301      	movs	r3, #1
 80089a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089ac:	4610      	mov	r0, r2
 80089ae:	b003      	add	sp, #12
 80089b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b4:	bfbc      	itt	lt
 80089b6:	464b      	movlt	r3, r9
 80089b8:	46a1      	movlt	r9, r4
 80089ba:	4630      	mov	r0, r6
 80089bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80089c0:	bfba      	itte	lt
 80089c2:	461c      	movlt	r4, r3
 80089c4:	2501      	movlt	r5, #1
 80089c6:	2500      	movge	r5, #0
 80089c8:	f7ff fcf6 	bl	80083b8 <_Balloc>
 80089cc:	4602      	mov	r2, r0
 80089ce:	b918      	cbnz	r0, 80089d8 <__mdiff+0x60>
 80089d0:	4b30      	ldr	r3, [pc, #192]	@ (8008a94 <__mdiff+0x11c>)
 80089d2:	f240 2145 	movw	r1, #581	@ 0x245
 80089d6:	e7e3      	b.n	80089a0 <__mdiff+0x28>
 80089d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80089dc:	6926      	ldr	r6, [r4, #16]
 80089de:	60c5      	str	r5, [r0, #12]
 80089e0:	f109 0310 	add.w	r3, r9, #16
 80089e4:	f109 0514 	add.w	r5, r9, #20
 80089e8:	f104 0e14 	add.w	lr, r4, #20
 80089ec:	f100 0b14 	add.w	fp, r0, #20
 80089f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80089f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80089f8:	9301      	str	r3, [sp, #4]
 80089fa:	46d9      	mov	r9, fp
 80089fc:	f04f 0c00 	mov.w	ip, #0
 8008a00:	9b01      	ldr	r3, [sp, #4]
 8008a02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a0a:	9301      	str	r3, [sp, #4]
 8008a0c:	b281      	uxth	r1, r0
 8008a0e:	fa1f f38a 	uxth.w	r3, sl
 8008a12:	1a5b      	subs	r3, r3, r1
 8008a14:	0c00      	lsrs	r0, r0, #16
 8008a16:	4463      	add	r3, ip
 8008a18:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a1c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008a26:	4576      	cmp	r6, lr
 8008a28:	f849 3b04 	str.w	r3, [r9], #4
 8008a2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a30:	d8e6      	bhi.n	8008a00 <__mdiff+0x88>
 8008a32:	1b33      	subs	r3, r6, r4
 8008a34:	3b15      	subs	r3, #21
 8008a36:	f023 0303 	bic.w	r3, r3, #3
 8008a3a:	3415      	adds	r4, #21
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	42a6      	cmp	r6, r4
 8008a40:	bf38      	it	cc
 8008a42:	2304      	movcc	r3, #4
 8008a44:	441d      	add	r5, r3
 8008a46:	445b      	add	r3, fp
 8008a48:	461e      	mov	r6, r3
 8008a4a:	462c      	mov	r4, r5
 8008a4c:	4544      	cmp	r4, r8
 8008a4e:	d30e      	bcc.n	8008a6e <__mdiff+0xf6>
 8008a50:	f108 0103 	add.w	r1, r8, #3
 8008a54:	1b49      	subs	r1, r1, r5
 8008a56:	f021 0103 	bic.w	r1, r1, #3
 8008a5a:	3d03      	subs	r5, #3
 8008a5c:	45a8      	cmp	r8, r5
 8008a5e:	bf38      	it	cc
 8008a60:	2100      	movcc	r1, #0
 8008a62:	440b      	add	r3, r1
 8008a64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a68:	b191      	cbz	r1, 8008a90 <__mdiff+0x118>
 8008a6a:	6117      	str	r7, [r2, #16]
 8008a6c:	e79e      	b.n	80089ac <__mdiff+0x34>
 8008a6e:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a72:	46e6      	mov	lr, ip
 8008a74:	0c08      	lsrs	r0, r1, #16
 8008a76:	fa1c fc81 	uxtah	ip, ip, r1
 8008a7a:	4471      	add	r1, lr
 8008a7c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a80:	b289      	uxth	r1, r1
 8008a82:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a86:	f846 1b04 	str.w	r1, [r6], #4
 8008a8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a8e:	e7dd      	b.n	8008a4c <__mdiff+0xd4>
 8008a90:	3f01      	subs	r7, #1
 8008a92:	e7e7      	b.n	8008a64 <__mdiff+0xec>
 8008a94:	0800b55b 	.word	0x0800b55b
 8008a98:	0800b56c 	.word	0x0800b56c

08008a9c <__ulp>:
 8008a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad8 <__ulp+0x3c>)
 8008a9e:	400b      	ands	r3, r1
 8008aa0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	dc08      	bgt.n	8008aba <__ulp+0x1e>
 8008aa8:	425b      	negs	r3, r3
 8008aaa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008aae:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008ab2:	da04      	bge.n	8008abe <__ulp+0x22>
 8008ab4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008ab8:	4113      	asrs	r3, r2
 8008aba:	2200      	movs	r2, #0
 8008abc:	e008      	b.n	8008ad0 <__ulp+0x34>
 8008abe:	f1a2 0314 	sub.w	r3, r2, #20
 8008ac2:	2b1e      	cmp	r3, #30
 8008ac4:	bfda      	itte	le
 8008ac6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008aca:	40da      	lsrle	r2, r3
 8008acc:	2201      	movgt	r2, #1
 8008ace:	2300      	movs	r3, #0
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	7ff00000 	.word	0x7ff00000

08008adc <__b2d>:
 8008adc:	6902      	ldr	r2, [r0, #16]
 8008ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae0:	f100 0614 	add.w	r6, r0, #20
 8008ae4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008ae8:	4f20      	ldr	r7, [pc, #128]	@ (8008b6c <__b2d+0x90>)
 8008aea:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008aee:	4620      	mov	r0, r4
 8008af0:	f7ff fd54 	bl	800859c <__hi0bits>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b0a      	cmp	r3, #10
 8008af8:	f1c0 0020 	rsb	r0, r0, #32
 8008afc:	f1a2 0504 	sub.w	r5, r2, #4
 8008b00:	6008      	str	r0, [r1, #0]
 8008b02:	dc13      	bgt.n	8008b2c <__b2d+0x50>
 8008b04:	42ae      	cmp	r6, r5
 8008b06:	bf38      	it	cc
 8008b08:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008b0c:	f1c3 0c0b 	rsb	ip, r3, #11
 8008b10:	bf28      	it	cs
 8008b12:	2200      	movcs	r2, #0
 8008b14:	3315      	adds	r3, #21
 8008b16:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008b1a:	fa04 f303 	lsl.w	r3, r4, r3
 8008b1e:	fa22 f20c 	lsr.w	r2, r2, ip
 8008b22:	ea4e 0107 	orr.w	r1, lr, r7
 8008b26:	431a      	orrs	r2, r3
 8008b28:	4610      	mov	r0, r2
 8008b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b2c:	42ae      	cmp	r6, r5
 8008b2e:	bf36      	itet	cc
 8008b30:	f1a2 0508 	subcc.w	r5, r2, #8
 8008b34:	2200      	movcs	r2, #0
 8008b36:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008b3a:	3b0b      	subs	r3, #11
 8008b3c:	d012      	beq.n	8008b64 <__b2d+0x88>
 8008b3e:	f1c3 0720 	rsb	r7, r3, #32
 8008b42:	fa22 f107 	lsr.w	r1, r2, r7
 8008b46:	409c      	lsls	r4, r3
 8008b48:	430c      	orrs	r4, r1
 8008b4a:	42b5      	cmp	r5, r6
 8008b4c:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008b50:	bf8c      	ite	hi
 8008b52:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008b56:	2400      	movls	r4, #0
 8008b58:	409a      	lsls	r2, r3
 8008b5a:	40fc      	lsrs	r4, r7
 8008b5c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008b60:	4322      	orrs	r2, r4
 8008b62:	e7e1      	b.n	8008b28 <__b2d+0x4c>
 8008b64:	ea44 0107 	orr.w	r1, r4, r7
 8008b68:	e7de      	b.n	8008b28 <__b2d+0x4c>
 8008b6a:	bf00      	nop
 8008b6c:	3ff00000 	.word	0x3ff00000

08008b70 <__d2b>:
 8008b70:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008b74:	2101      	movs	r1, #1
 8008b76:	9e08      	ldr	r6, [sp, #32]
 8008b78:	4690      	mov	r8, r2
 8008b7a:	4699      	mov	r9, r3
 8008b7c:	f7ff fc1c 	bl	80083b8 <_Balloc>
 8008b80:	4604      	mov	r4, r0
 8008b82:	b930      	cbnz	r0, 8008b92 <__d2b+0x22>
 8008b84:	4602      	mov	r2, r0
 8008b86:	4b24      	ldr	r3, [pc, #144]	@ (8008c18 <__d2b+0xa8>)
 8008b88:	4824      	ldr	r0, [pc, #144]	@ (8008c1c <__d2b+0xac>)
 8008b8a:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b8e:	f001 fed7 	bl	800a940 <__assert_func>
 8008b92:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b9a:	b10d      	cbz	r5, 8008ba0 <__d2b+0x30>
 8008b9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	f1b8 0300 	subs.w	r3, r8, #0
 8008ba6:	d024      	beq.n	8008bf2 <__d2b+0x82>
 8008ba8:	4668      	mov	r0, sp
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	f7ff fd15 	bl	80085da <__lo0bits>
 8008bb0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bb4:	b1d8      	cbz	r0, 8008bee <__d2b+0x7e>
 8008bb6:	f1c0 0320 	rsb	r3, r0, #32
 8008bba:	fa02 f303 	lsl.w	r3, r2, r3
 8008bbe:	430b      	orrs	r3, r1
 8008bc0:	40c2      	lsrs	r2, r0
 8008bc2:	6163      	str	r3, [r4, #20]
 8008bc4:	9201      	str	r2, [sp, #4]
 8008bc6:	9b01      	ldr	r3, [sp, #4]
 8008bc8:	61a3      	str	r3, [r4, #24]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	bf0c      	ite	eq
 8008bce:	2201      	moveq	r2, #1
 8008bd0:	2202      	movne	r2, #2
 8008bd2:	6122      	str	r2, [r4, #16]
 8008bd4:	b1ad      	cbz	r5, 8008c02 <__d2b+0x92>
 8008bd6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008bda:	4405      	add	r5, r0
 8008bdc:	6035      	str	r5, [r6, #0]
 8008bde:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008be4:	6018      	str	r0, [r3, #0]
 8008be6:	4620      	mov	r0, r4
 8008be8:	b002      	add	sp, #8
 8008bea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008bee:	6161      	str	r1, [r4, #20]
 8008bf0:	e7e9      	b.n	8008bc6 <__d2b+0x56>
 8008bf2:	a801      	add	r0, sp, #4
 8008bf4:	f7ff fcf1 	bl	80085da <__lo0bits>
 8008bf8:	9b01      	ldr	r3, [sp, #4]
 8008bfa:	6163      	str	r3, [r4, #20]
 8008bfc:	3020      	adds	r0, #32
 8008bfe:	2201      	movs	r2, #1
 8008c00:	e7e7      	b.n	8008bd2 <__d2b+0x62>
 8008c02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c0a:	6030      	str	r0, [r6, #0]
 8008c0c:	6918      	ldr	r0, [r3, #16]
 8008c0e:	f7ff fcc5 	bl	800859c <__hi0bits>
 8008c12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c16:	e7e4      	b.n	8008be2 <__d2b+0x72>
 8008c18:	0800b55b 	.word	0x0800b55b
 8008c1c:	0800b56c 	.word	0x0800b56c

08008c20 <__ratio>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	b085      	sub	sp, #20
 8008c26:	e9cd 1000 	strd	r1, r0, [sp]
 8008c2a:	a902      	add	r1, sp, #8
 8008c2c:	f7ff ff56 	bl	8008adc <__b2d>
 8008c30:	468b      	mov	fp, r1
 8008c32:	4606      	mov	r6, r0
 8008c34:	460f      	mov	r7, r1
 8008c36:	9800      	ldr	r0, [sp, #0]
 8008c38:	a903      	add	r1, sp, #12
 8008c3a:	f7ff ff4f 	bl	8008adc <__b2d>
 8008c3e:	9b01      	ldr	r3, [sp, #4]
 8008c40:	4689      	mov	r9, r1
 8008c42:	460d      	mov	r5, r1
 8008c44:	6919      	ldr	r1, [r3, #16]
 8008c46:	9b00      	ldr	r3, [sp, #0]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	1ac9      	subs	r1, r1, r3
 8008c4c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	bfcd      	iteet	gt
 8008c5a:	463a      	movgt	r2, r7
 8008c5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c60:	462a      	movle	r2, r5
 8008c62:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008c66:	bfd8      	it	le
 8008c68:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	4622      	mov	r2, r4
 8008c70:	464b      	mov	r3, r9
 8008c72:	4630      	mov	r0, r6
 8008c74:	4659      	mov	r1, fp
 8008c76:	f7f7 fdc1 	bl	80007fc <__aeabi_ddiv>
 8008c7a:	b005      	add	sp, #20
 8008c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c80 <__copybits>:
 8008c80:	3901      	subs	r1, #1
 8008c82:	b570      	push	{r4, r5, r6, lr}
 8008c84:	1149      	asrs	r1, r1, #5
 8008c86:	6914      	ldr	r4, [r2, #16]
 8008c88:	3101      	adds	r1, #1
 8008c8a:	f102 0314 	add.w	r3, r2, #20
 8008c8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c92:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c96:	1f05      	subs	r5, r0, #4
 8008c98:	42a3      	cmp	r3, r4
 8008c9a:	d30c      	bcc.n	8008cb6 <__copybits+0x36>
 8008c9c:	1aa3      	subs	r3, r4, r2
 8008c9e:	3b11      	subs	r3, #17
 8008ca0:	f023 0303 	bic.w	r3, r3, #3
 8008ca4:	3211      	adds	r2, #17
 8008ca6:	42a2      	cmp	r2, r4
 8008ca8:	bf88      	it	hi
 8008caa:	2300      	movhi	r3, #0
 8008cac:	4418      	add	r0, r3
 8008cae:	2300      	movs	r3, #0
 8008cb0:	4288      	cmp	r0, r1
 8008cb2:	d305      	bcc.n	8008cc0 <__copybits+0x40>
 8008cb4:	bd70      	pop	{r4, r5, r6, pc}
 8008cb6:	f853 6b04 	ldr.w	r6, [r3], #4
 8008cba:	f845 6f04 	str.w	r6, [r5, #4]!
 8008cbe:	e7eb      	b.n	8008c98 <__copybits+0x18>
 8008cc0:	f840 3b04 	str.w	r3, [r0], #4
 8008cc4:	e7f4      	b.n	8008cb0 <__copybits+0x30>

08008cc6 <__any_on>:
 8008cc6:	f100 0214 	add.w	r2, r0, #20
 8008cca:	6900      	ldr	r0, [r0, #16]
 8008ccc:	114b      	asrs	r3, r1, #5
 8008cce:	4298      	cmp	r0, r3
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	db11      	blt.n	8008cf8 <__any_on+0x32>
 8008cd4:	dd0a      	ble.n	8008cec <__any_on+0x26>
 8008cd6:	f011 011f 	ands.w	r1, r1, #31
 8008cda:	d007      	beq.n	8008cec <__any_on+0x26>
 8008cdc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ce0:	fa24 f001 	lsr.w	r0, r4, r1
 8008ce4:	fa00 f101 	lsl.w	r1, r0, r1
 8008ce8:	428c      	cmp	r4, r1
 8008cea:	d10b      	bne.n	8008d04 <__any_on+0x3e>
 8008cec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d803      	bhi.n	8008cfc <__any_on+0x36>
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	bd10      	pop	{r4, pc}
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	e7f7      	b.n	8008cec <__any_on+0x26>
 8008cfc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d00:	2900      	cmp	r1, #0
 8008d02:	d0f5      	beq.n	8008cf0 <__any_on+0x2a>
 8008d04:	2001      	movs	r0, #1
 8008d06:	e7f6      	b.n	8008cf6 <__any_on+0x30>

08008d08 <sulp>:
 8008d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0c:	460f      	mov	r7, r1
 8008d0e:	4690      	mov	r8, r2
 8008d10:	f7ff fec4 	bl	8008a9c <__ulp>
 8008d14:	4604      	mov	r4, r0
 8008d16:	460d      	mov	r5, r1
 8008d18:	f1b8 0f00 	cmp.w	r8, #0
 8008d1c:	d011      	beq.n	8008d42 <sulp+0x3a>
 8008d1e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008d22:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dd0b      	ble.n	8008d42 <sulp+0x3a>
 8008d2a:	051b      	lsls	r3, r3, #20
 8008d2c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008d30:	2400      	movs	r4, #0
 8008d32:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008d36:	4622      	mov	r2, r4
 8008d38:	462b      	mov	r3, r5
 8008d3a:	f7f7 fc35 	bl	80005a8 <__aeabi_dmul>
 8008d3e:	4604      	mov	r4, r0
 8008d40:	460d      	mov	r5, r1
 8008d42:	4620      	mov	r0, r4
 8008d44:	4629      	mov	r1, r5
 8008d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d4a:	0000      	movs	r0, r0
 8008d4c:	0000      	movs	r0, r0
	...

08008d50 <_strtod_l>:
 8008d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d54:	b09f      	sub	sp, #124	@ 0x7c
 8008d56:	460c      	mov	r4, r1
 8008d58:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008d5e:	9005      	str	r0, [sp, #20]
 8008d60:	f04f 0a00 	mov.w	sl, #0
 8008d64:	f04f 0b00 	mov.w	fp, #0
 8008d68:	460a      	mov	r2, r1
 8008d6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d6c:	7811      	ldrb	r1, [r2, #0]
 8008d6e:	292b      	cmp	r1, #43	@ 0x2b
 8008d70:	d048      	beq.n	8008e04 <_strtod_l+0xb4>
 8008d72:	d836      	bhi.n	8008de2 <_strtod_l+0x92>
 8008d74:	290d      	cmp	r1, #13
 8008d76:	d830      	bhi.n	8008dda <_strtod_l+0x8a>
 8008d78:	2908      	cmp	r1, #8
 8008d7a:	d830      	bhi.n	8008dde <_strtod_l+0x8e>
 8008d7c:	2900      	cmp	r1, #0
 8008d7e:	d039      	beq.n	8008df4 <_strtod_l+0xa4>
 8008d80:	2200      	movs	r2, #0
 8008d82:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008d84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008d86:	782a      	ldrb	r2, [r5, #0]
 8008d88:	2a30      	cmp	r2, #48	@ 0x30
 8008d8a:	f040 80b1 	bne.w	8008ef0 <_strtod_l+0x1a0>
 8008d8e:	786a      	ldrb	r2, [r5, #1]
 8008d90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d94:	2a58      	cmp	r2, #88	@ 0x58
 8008d96:	d16c      	bne.n	8008e72 <_strtod_l+0x122>
 8008d98:	9302      	str	r3, [sp, #8]
 8008d9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	4a8d      	ldr	r2, [pc, #564]	@ (8008fd8 <_strtod_l+0x288>)
 8008da4:	9805      	ldr	r0, [sp, #20]
 8008da6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008da8:	a919      	add	r1, sp, #100	@ 0x64
 8008daa:	f001 fe63 	bl	800aa74 <__gethex>
 8008dae:	f010 060f 	ands.w	r6, r0, #15
 8008db2:	4604      	mov	r4, r0
 8008db4:	d005      	beq.n	8008dc2 <_strtod_l+0x72>
 8008db6:	2e06      	cmp	r6, #6
 8008db8:	d126      	bne.n	8008e08 <_strtod_l+0xb8>
 8008dba:	3501      	adds	r5, #1
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	9519      	str	r5, [sp, #100]	@ 0x64
 8008dc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f040 857e 	bne.w	80098c6 <_strtod_l+0xb76>
 8008dca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dcc:	b1bb      	cbz	r3, 8008dfe <_strtod_l+0xae>
 8008dce:	4650      	mov	r0, sl
 8008dd0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008dd4:	b01f      	add	sp, #124	@ 0x7c
 8008dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dda:	2920      	cmp	r1, #32
 8008ddc:	d1d0      	bne.n	8008d80 <_strtod_l+0x30>
 8008dde:	3201      	adds	r2, #1
 8008de0:	e7c3      	b.n	8008d6a <_strtod_l+0x1a>
 8008de2:	292d      	cmp	r1, #45	@ 0x2d
 8008de4:	d1cc      	bne.n	8008d80 <_strtod_l+0x30>
 8008de6:	2101      	movs	r1, #1
 8008de8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008dea:	1c51      	adds	r1, r2, #1
 8008dec:	9119      	str	r1, [sp, #100]	@ 0x64
 8008dee:	7852      	ldrb	r2, [r2, #1]
 8008df0:	2a00      	cmp	r2, #0
 8008df2:	d1c7      	bne.n	8008d84 <_strtod_l+0x34>
 8008df4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008df6:	9419      	str	r4, [sp, #100]	@ 0x64
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f040 8562 	bne.w	80098c2 <_strtod_l+0xb72>
 8008dfe:	4650      	mov	r0, sl
 8008e00:	4659      	mov	r1, fp
 8008e02:	e7e7      	b.n	8008dd4 <_strtod_l+0x84>
 8008e04:	2100      	movs	r1, #0
 8008e06:	e7ef      	b.n	8008de8 <_strtod_l+0x98>
 8008e08:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008e0a:	b13a      	cbz	r2, 8008e1c <_strtod_l+0xcc>
 8008e0c:	2135      	movs	r1, #53	@ 0x35
 8008e0e:	a81c      	add	r0, sp, #112	@ 0x70
 8008e10:	f7ff ff36 	bl	8008c80 <__copybits>
 8008e14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e16:	9805      	ldr	r0, [sp, #20]
 8008e18:	f7ff fb0e 	bl	8008438 <_Bfree>
 8008e1c:	3e01      	subs	r6, #1
 8008e1e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008e20:	2e04      	cmp	r6, #4
 8008e22:	d806      	bhi.n	8008e32 <_strtod_l+0xe2>
 8008e24:	e8df f006 	tbb	[pc, r6]
 8008e28:	201d0314 	.word	0x201d0314
 8008e2c:	14          	.byte	0x14
 8008e2d:	00          	.byte	0x00
 8008e2e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008e32:	05e1      	lsls	r1, r4, #23
 8008e34:	bf48      	it	mi
 8008e36:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008e3a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e3e:	0d1b      	lsrs	r3, r3, #20
 8008e40:	051b      	lsls	r3, r3, #20
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1bd      	bne.n	8008dc2 <_strtod_l+0x72>
 8008e46:	f7fe fb35 	bl	80074b4 <__errno>
 8008e4a:	2322      	movs	r3, #34	@ 0x22
 8008e4c:	6003      	str	r3, [r0, #0]
 8008e4e:	e7b8      	b.n	8008dc2 <_strtod_l+0x72>
 8008e50:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008e54:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008e58:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008e5c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008e60:	e7e7      	b.n	8008e32 <_strtod_l+0xe2>
 8008e62:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8008fdc <_strtod_l+0x28c>
 8008e66:	e7e4      	b.n	8008e32 <_strtod_l+0xe2>
 8008e68:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008e6c:	f04f 3aff 	mov.w	sl, #4294967295
 8008e70:	e7df      	b.n	8008e32 <_strtod_l+0xe2>
 8008e72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e78:	785b      	ldrb	r3, [r3, #1]
 8008e7a:	2b30      	cmp	r3, #48	@ 0x30
 8008e7c:	d0f9      	beq.n	8008e72 <_strtod_l+0x122>
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d09f      	beq.n	8008dc2 <_strtod_l+0x72>
 8008e82:	2301      	movs	r3, #1
 8008e84:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e88:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	9308      	str	r3, [sp, #32]
 8008e8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e90:	461f      	mov	r7, r3
 8008e92:	220a      	movs	r2, #10
 8008e94:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008e96:	7805      	ldrb	r5, [r0, #0]
 8008e98:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008e9c:	b2d9      	uxtb	r1, r3
 8008e9e:	2909      	cmp	r1, #9
 8008ea0:	d928      	bls.n	8008ef4 <_strtod_l+0x1a4>
 8008ea2:	494f      	ldr	r1, [pc, #316]	@ (8008fe0 <_strtod_l+0x290>)
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f001 fcf2 	bl	800a88e <strncmp>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d032      	beq.n	8008f14 <_strtod_l+0x1c4>
 8008eae:	2000      	movs	r0, #0
 8008eb0:	462a      	mov	r2, r5
 8008eb2:	4681      	mov	r9, r0
 8008eb4:	463d      	mov	r5, r7
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2a65      	cmp	r2, #101	@ 0x65
 8008eba:	d001      	beq.n	8008ec0 <_strtod_l+0x170>
 8008ebc:	2a45      	cmp	r2, #69	@ 0x45
 8008ebe:	d114      	bne.n	8008eea <_strtod_l+0x19a>
 8008ec0:	b91d      	cbnz	r5, 8008eca <_strtod_l+0x17a>
 8008ec2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ec4:	4302      	orrs	r2, r0
 8008ec6:	d095      	beq.n	8008df4 <_strtod_l+0xa4>
 8008ec8:	2500      	movs	r5, #0
 8008eca:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008ecc:	1c62      	adds	r2, r4, #1
 8008ece:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ed0:	7862      	ldrb	r2, [r4, #1]
 8008ed2:	2a2b      	cmp	r2, #43	@ 0x2b
 8008ed4:	d077      	beq.n	8008fc6 <_strtod_l+0x276>
 8008ed6:	2a2d      	cmp	r2, #45	@ 0x2d
 8008ed8:	d07b      	beq.n	8008fd2 <_strtod_l+0x282>
 8008eda:	f04f 0c00 	mov.w	ip, #0
 8008ede:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008ee2:	2909      	cmp	r1, #9
 8008ee4:	f240 8082 	bls.w	8008fec <_strtod_l+0x29c>
 8008ee8:	9419      	str	r4, [sp, #100]	@ 0x64
 8008eea:	f04f 0800 	mov.w	r8, #0
 8008eee:	e0a2      	b.n	8009036 <_strtod_l+0x2e6>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	e7c7      	b.n	8008e84 <_strtod_l+0x134>
 8008ef4:	2f08      	cmp	r7, #8
 8008ef6:	bfd5      	itete	le
 8008ef8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008efa:	9908      	ldrgt	r1, [sp, #32]
 8008efc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f00:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008f04:	f100 0001 	add.w	r0, r0, #1
 8008f08:	bfd4      	ite	le
 8008f0a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008f0c:	9308      	strgt	r3, [sp, #32]
 8008f0e:	3701      	adds	r7, #1
 8008f10:	9019      	str	r0, [sp, #100]	@ 0x64
 8008f12:	e7bf      	b.n	8008e94 <_strtod_l+0x144>
 8008f14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f16:	1c5a      	adds	r2, r3, #1
 8008f18:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f1a:	785a      	ldrb	r2, [r3, #1]
 8008f1c:	b37f      	cbz	r7, 8008f7e <_strtod_l+0x22e>
 8008f1e:	4681      	mov	r9, r0
 8008f20:	463d      	mov	r5, r7
 8008f22:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008f26:	2b09      	cmp	r3, #9
 8008f28:	d912      	bls.n	8008f50 <_strtod_l+0x200>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e7c4      	b.n	8008eb8 <_strtod_l+0x168>
 8008f2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f30:	1c5a      	adds	r2, r3, #1
 8008f32:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f34:	785a      	ldrb	r2, [r3, #1]
 8008f36:	3001      	adds	r0, #1
 8008f38:	2a30      	cmp	r2, #48	@ 0x30
 8008f3a:	d0f8      	beq.n	8008f2e <_strtod_l+0x1de>
 8008f3c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	f200 84c5 	bhi.w	80098d0 <_strtod_l+0xb80>
 8008f46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f48:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f4a:	4681      	mov	r9, r0
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	4605      	mov	r5, r0
 8008f50:	3a30      	subs	r2, #48	@ 0x30
 8008f52:	f100 0301 	add.w	r3, r0, #1
 8008f56:	d02a      	beq.n	8008fae <_strtod_l+0x25e>
 8008f58:	4499      	add	r9, r3
 8008f5a:	eb00 0c05 	add.w	ip, r0, r5
 8008f5e:	462b      	mov	r3, r5
 8008f60:	210a      	movs	r1, #10
 8008f62:	4563      	cmp	r3, ip
 8008f64:	d10d      	bne.n	8008f82 <_strtod_l+0x232>
 8008f66:	1c69      	adds	r1, r5, #1
 8008f68:	4401      	add	r1, r0
 8008f6a:	4428      	add	r0, r5
 8008f6c:	2808      	cmp	r0, #8
 8008f6e:	dc16      	bgt.n	8008f9e <_strtod_l+0x24e>
 8008f70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f72:	230a      	movs	r3, #10
 8008f74:	fb03 2300 	mla	r3, r3, r0, r2
 8008f78:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e018      	b.n	8008fb0 <_strtod_l+0x260>
 8008f7e:	4638      	mov	r0, r7
 8008f80:	e7da      	b.n	8008f38 <_strtod_l+0x1e8>
 8008f82:	2b08      	cmp	r3, #8
 8008f84:	f103 0301 	add.w	r3, r3, #1
 8008f88:	dc03      	bgt.n	8008f92 <_strtod_l+0x242>
 8008f8a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008f8c:	434e      	muls	r6, r1
 8008f8e:	960a      	str	r6, [sp, #40]	@ 0x28
 8008f90:	e7e7      	b.n	8008f62 <_strtod_l+0x212>
 8008f92:	2b10      	cmp	r3, #16
 8008f94:	bfde      	ittt	le
 8008f96:	9e08      	ldrle	r6, [sp, #32]
 8008f98:	434e      	mulle	r6, r1
 8008f9a:	9608      	strle	r6, [sp, #32]
 8008f9c:	e7e1      	b.n	8008f62 <_strtod_l+0x212>
 8008f9e:	280f      	cmp	r0, #15
 8008fa0:	dceb      	bgt.n	8008f7a <_strtod_l+0x22a>
 8008fa2:	9808      	ldr	r0, [sp, #32]
 8008fa4:	230a      	movs	r3, #10
 8008fa6:	fb03 2300 	mla	r3, r3, r0, r2
 8008faa:	9308      	str	r3, [sp, #32]
 8008fac:	e7e5      	b.n	8008f7a <_strtod_l+0x22a>
 8008fae:	4629      	mov	r1, r5
 8008fb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fb2:	1c50      	adds	r0, r2, #1
 8008fb4:	9019      	str	r0, [sp, #100]	@ 0x64
 8008fb6:	7852      	ldrb	r2, [r2, #1]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	460d      	mov	r5, r1
 8008fbc:	e7b1      	b.n	8008f22 <_strtod_l+0x1d2>
 8008fbe:	f04f 0900 	mov.w	r9, #0
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e77d      	b.n	8008ec2 <_strtod_l+0x172>
 8008fc6:	f04f 0c00 	mov.w	ip, #0
 8008fca:	1ca2      	adds	r2, r4, #2
 8008fcc:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fce:	78a2      	ldrb	r2, [r4, #2]
 8008fd0:	e785      	b.n	8008ede <_strtod_l+0x18e>
 8008fd2:	f04f 0c01 	mov.w	ip, #1
 8008fd6:	e7f8      	b.n	8008fca <_strtod_l+0x27a>
 8008fd8:	0800b6e0 	.word	0x0800b6e0
 8008fdc:	7ff00000 	.word	0x7ff00000
 8008fe0:	0800b6c8 	.word	0x0800b6c8
 8008fe4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fe6:	1c51      	adds	r1, r2, #1
 8008fe8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008fea:	7852      	ldrb	r2, [r2, #1]
 8008fec:	2a30      	cmp	r2, #48	@ 0x30
 8008fee:	d0f9      	beq.n	8008fe4 <_strtod_l+0x294>
 8008ff0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008ff4:	2908      	cmp	r1, #8
 8008ff6:	f63f af78 	bhi.w	8008eea <_strtod_l+0x19a>
 8008ffa:	3a30      	subs	r2, #48	@ 0x30
 8008ffc:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ffe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009000:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009002:	f04f 080a 	mov.w	r8, #10
 8009006:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009008:	1c56      	adds	r6, r2, #1
 800900a:	9619      	str	r6, [sp, #100]	@ 0x64
 800900c:	7852      	ldrb	r2, [r2, #1]
 800900e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009012:	f1be 0f09 	cmp.w	lr, #9
 8009016:	d939      	bls.n	800908c <_strtod_l+0x33c>
 8009018:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800901a:	1a76      	subs	r6, r6, r1
 800901c:	2e08      	cmp	r6, #8
 800901e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009022:	dc03      	bgt.n	800902c <_strtod_l+0x2dc>
 8009024:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009026:	4588      	cmp	r8, r1
 8009028:	bfa8      	it	ge
 800902a:	4688      	movge	r8, r1
 800902c:	f1bc 0f00 	cmp.w	ip, #0
 8009030:	d001      	beq.n	8009036 <_strtod_l+0x2e6>
 8009032:	f1c8 0800 	rsb	r8, r8, #0
 8009036:	2d00      	cmp	r5, #0
 8009038:	d14e      	bne.n	80090d8 <_strtod_l+0x388>
 800903a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800903c:	4308      	orrs	r0, r1
 800903e:	f47f aec0 	bne.w	8008dc2 <_strtod_l+0x72>
 8009042:	2b00      	cmp	r3, #0
 8009044:	f47f aed6 	bne.w	8008df4 <_strtod_l+0xa4>
 8009048:	2a69      	cmp	r2, #105	@ 0x69
 800904a:	d028      	beq.n	800909e <_strtod_l+0x34e>
 800904c:	dc25      	bgt.n	800909a <_strtod_l+0x34a>
 800904e:	2a49      	cmp	r2, #73	@ 0x49
 8009050:	d025      	beq.n	800909e <_strtod_l+0x34e>
 8009052:	2a4e      	cmp	r2, #78	@ 0x4e
 8009054:	f47f aece 	bne.w	8008df4 <_strtod_l+0xa4>
 8009058:	499a      	ldr	r1, [pc, #616]	@ (80092c4 <_strtod_l+0x574>)
 800905a:	a819      	add	r0, sp, #100	@ 0x64
 800905c:	f001 ff2c 	bl	800aeb8 <__match>
 8009060:	2800      	cmp	r0, #0
 8009062:	f43f aec7 	beq.w	8008df4 <_strtod_l+0xa4>
 8009066:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	2b28      	cmp	r3, #40	@ 0x28
 800906c:	d12e      	bne.n	80090cc <_strtod_l+0x37c>
 800906e:	4996      	ldr	r1, [pc, #600]	@ (80092c8 <_strtod_l+0x578>)
 8009070:	aa1c      	add	r2, sp, #112	@ 0x70
 8009072:	a819      	add	r0, sp, #100	@ 0x64
 8009074:	f001 ff34 	bl	800aee0 <__hexnan>
 8009078:	2805      	cmp	r0, #5
 800907a:	d127      	bne.n	80090cc <_strtod_l+0x37c>
 800907c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800907e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009082:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009086:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800908a:	e69a      	b.n	8008dc2 <_strtod_l+0x72>
 800908c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800908e:	fb08 2101 	mla	r1, r8, r1, r2
 8009092:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009096:	920e      	str	r2, [sp, #56]	@ 0x38
 8009098:	e7b5      	b.n	8009006 <_strtod_l+0x2b6>
 800909a:	2a6e      	cmp	r2, #110	@ 0x6e
 800909c:	e7da      	b.n	8009054 <_strtod_l+0x304>
 800909e:	498b      	ldr	r1, [pc, #556]	@ (80092cc <_strtod_l+0x57c>)
 80090a0:	a819      	add	r0, sp, #100	@ 0x64
 80090a2:	f001 ff09 	bl	800aeb8 <__match>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	f43f aea4 	beq.w	8008df4 <_strtod_l+0xa4>
 80090ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090ae:	4988      	ldr	r1, [pc, #544]	@ (80092d0 <_strtod_l+0x580>)
 80090b0:	3b01      	subs	r3, #1
 80090b2:	a819      	add	r0, sp, #100	@ 0x64
 80090b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80090b6:	f001 feff 	bl	800aeb8 <__match>
 80090ba:	b910      	cbnz	r0, 80090c2 <_strtod_l+0x372>
 80090bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090be:	3301      	adds	r3, #1
 80090c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80090c2:	f8df b210 	ldr.w	fp, [pc, #528]	@ 80092d4 <_strtod_l+0x584>
 80090c6:	f04f 0a00 	mov.w	sl, #0
 80090ca:	e67a      	b.n	8008dc2 <_strtod_l+0x72>
 80090cc:	4882      	ldr	r0, [pc, #520]	@ (80092d8 <_strtod_l+0x588>)
 80090ce:	f001 fc31 	bl	800a934 <nan>
 80090d2:	4682      	mov	sl, r0
 80090d4:	468b      	mov	fp, r1
 80090d6:	e674      	b.n	8008dc2 <_strtod_l+0x72>
 80090d8:	eba8 0309 	sub.w	r3, r8, r9
 80090dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80090de:	9309      	str	r3, [sp, #36]	@ 0x24
 80090e0:	2f00      	cmp	r7, #0
 80090e2:	bf08      	it	eq
 80090e4:	462f      	moveq	r7, r5
 80090e6:	2d10      	cmp	r5, #16
 80090e8:	462c      	mov	r4, r5
 80090ea:	bfa8      	it	ge
 80090ec:	2410      	movge	r4, #16
 80090ee:	f7f7 f9e1 	bl	80004b4 <__aeabi_ui2d>
 80090f2:	2d09      	cmp	r5, #9
 80090f4:	4682      	mov	sl, r0
 80090f6:	468b      	mov	fp, r1
 80090f8:	dc11      	bgt.n	800911e <_strtod_l+0x3ce>
 80090fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f43f ae60 	beq.w	8008dc2 <_strtod_l+0x72>
 8009102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009104:	dd76      	ble.n	80091f4 <_strtod_l+0x4a4>
 8009106:	2b16      	cmp	r3, #22
 8009108:	dc5d      	bgt.n	80091c6 <_strtod_l+0x476>
 800910a:	4974      	ldr	r1, [pc, #464]	@ (80092dc <_strtod_l+0x58c>)
 800910c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009110:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009114:	4652      	mov	r2, sl
 8009116:	465b      	mov	r3, fp
 8009118:	f7f7 fa46 	bl	80005a8 <__aeabi_dmul>
 800911c:	e7d9      	b.n	80090d2 <_strtod_l+0x382>
 800911e:	4b6f      	ldr	r3, [pc, #444]	@ (80092dc <_strtod_l+0x58c>)
 8009120:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009124:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009128:	f7f7 fa3e 	bl	80005a8 <__aeabi_dmul>
 800912c:	4682      	mov	sl, r0
 800912e:	9808      	ldr	r0, [sp, #32]
 8009130:	468b      	mov	fp, r1
 8009132:	f7f7 f9bf 	bl	80004b4 <__aeabi_ui2d>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4650      	mov	r0, sl
 800913c:	4659      	mov	r1, fp
 800913e:	f7f7 f87d 	bl	800023c <__adddf3>
 8009142:	2d0f      	cmp	r5, #15
 8009144:	4682      	mov	sl, r0
 8009146:	468b      	mov	fp, r1
 8009148:	ddd7      	ble.n	80090fa <_strtod_l+0x3aa>
 800914a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800914c:	1b2c      	subs	r4, r5, r4
 800914e:	441c      	add	r4, r3
 8009150:	2c00      	cmp	r4, #0
 8009152:	f340 8096 	ble.w	8009282 <_strtod_l+0x532>
 8009156:	f014 030f 	ands.w	r3, r4, #15
 800915a:	d00a      	beq.n	8009172 <_strtod_l+0x422>
 800915c:	495f      	ldr	r1, [pc, #380]	@ (80092dc <_strtod_l+0x58c>)
 800915e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009162:	4652      	mov	r2, sl
 8009164:	465b      	mov	r3, fp
 8009166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800916a:	f7f7 fa1d 	bl	80005a8 <__aeabi_dmul>
 800916e:	4682      	mov	sl, r0
 8009170:	468b      	mov	fp, r1
 8009172:	f034 040f 	bics.w	r4, r4, #15
 8009176:	d073      	beq.n	8009260 <_strtod_l+0x510>
 8009178:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800917c:	dd48      	ble.n	8009210 <_strtod_l+0x4c0>
 800917e:	2400      	movs	r4, #0
 8009180:	46a0      	mov	r8, r4
 8009182:	940a      	str	r4, [sp, #40]	@ 0x28
 8009184:	46a1      	mov	r9, r4
 8009186:	9a05      	ldr	r2, [sp, #20]
 8009188:	f8df b148 	ldr.w	fp, [pc, #328]	@ 80092d4 <_strtod_l+0x584>
 800918c:	2322      	movs	r3, #34	@ 0x22
 800918e:	6013      	str	r3, [r2, #0]
 8009190:	f04f 0a00 	mov.w	sl, #0
 8009194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009196:	2b00      	cmp	r3, #0
 8009198:	f43f ae13 	beq.w	8008dc2 <_strtod_l+0x72>
 800919c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800919e:	9805      	ldr	r0, [sp, #20]
 80091a0:	f7ff f94a 	bl	8008438 <_Bfree>
 80091a4:	9805      	ldr	r0, [sp, #20]
 80091a6:	4649      	mov	r1, r9
 80091a8:	f7ff f946 	bl	8008438 <_Bfree>
 80091ac:	9805      	ldr	r0, [sp, #20]
 80091ae:	4641      	mov	r1, r8
 80091b0:	f7ff f942 	bl	8008438 <_Bfree>
 80091b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80091b6:	9805      	ldr	r0, [sp, #20]
 80091b8:	f7ff f93e 	bl	8008438 <_Bfree>
 80091bc:	9805      	ldr	r0, [sp, #20]
 80091be:	4621      	mov	r1, r4
 80091c0:	f7ff f93a 	bl	8008438 <_Bfree>
 80091c4:	e5fd      	b.n	8008dc2 <_strtod_l+0x72>
 80091c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80091cc:	4293      	cmp	r3, r2
 80091ce:	dbbc      	blt.n	800914a <_strtod_l+0x3fa>
 80091d0:	4c42      	ldr	r4, [pc, #264]	@ (80092dc <_strtod_l+0x58c>)
 80091d2:	f1c5 050f 	rsb	r5, r5, #15
 80091d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80091da:	4652      	mov	r2, sl
 80091dc:	465b      	mov	r3, fp
 80091de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091e2:	f7f7 f9e1 	bl	80005a8 <__aeabi_dmul>
 80091e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e8:	1b5d      	subs	r5, r3, r5
 80091ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80091ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80091f2:	e791      	b.n	8009118 <_strtod_l+0x3c8>
 80091f4:	3316      	adds	r3, #22
 80091f6:	dba8      	blt.n	800914a <_strtod_l+0x3fa>
 80091f8:	4b38      	ldr	r3, [pc, #224]	@ (80092dc <_strtod_l+0x58c>)
 80091fa:	eba9 0808 	sub.w	r8, r9, r8
 80091fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009202:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009206:	4650      	mov	r0, sl
 8009208:	4659      	mov	r1, fp
 800920a:	f7f7 faf7 	bl	80007fc <__aeabi_ddiv>
 800920e:	e760      	b.n	80090d2 <_strtod_l+0x382>
 8009210:	4b33      	ldr	r3, [pc, #204]	@ (80092e0 <_strtod_l+0x590>)
 8009212:	9308      	str	r3, [sp, #32]
 8009214:	2300      	movs	r3, #0
 8009216:	1124      	asrs	r4, r4, #4
 8009218:	4650      	mov	r0, sl
 800921a:	4659      	mov	r1, fp
 800921c:	461e      	mov	r6, r3
 800921e:	2c01      	cmp	r4, #1
 8009220:	dc21      	bgt.n	8009266 <_strtod_l+0x516>
 8009222:	b10b      	cbz	r3, 8009228 <_strtod_l+0x4d8>
 8009224:	4682      	mov	sl, r0
 8009226:	468b      	mov	fp, r1
 8009228:	492d      	ldr	r1, [pc, #180]	@ (80092e0 <_strtod_l+0x590>)
 800922a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800922e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009232:	4652      	mov	r2, sl
 8009234:	465b      	mov	r3, fp
 8009236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800923a:	f7f7 f9b5 	bl	80005a8 <__aeabi_dmul>
 800923e:	4b25      	ldr	r3, [pc, #148]	@ (80092d4 <_strtod_l+0x584>)
 8009240:	460a      	mov	r2, r1
 8009242:	400b      	ands	r3, r1
 8009244:	4927      	ldr	r1, [pc, #156]	@ (80092e4 <_strtod_l+0x594>)
 8009246:	428b      	cmp	r3, r1
 8009248:	4682      	mov	sl, r0
 800924a:	d898      	bhi.n	800917e <_strtod_l+0x42e>
 800924c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009250:	428b      	cmp	r3, r1
 8009252:	bf86      	itte	hi
 8009254:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80092e8 <_strtod_l+0x598>
 8009258:	f04f 3aff 	movhi.w	sl, #4294967295
 800925c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009260:	2300      	movs	r3, #0
 8009262:	9308      	str	r3, [sp, #32]
 8009264:	e07a      	b.n	800935c <_strtod_l+0x60c>
 8009266:	07e2      	lsls	r2, r4, #31
 8009268:	d505      	bpl.n	8009276 <_strtod_l+0x526>
 800926a:	9b08      	ldr	r3, [sp, #32]
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f7f7 f99a 	bl	80005a8 <__aeabi_dmul>
 8009274:	2301      	movs	r3, #1
 8009276:	9a08      	ldr	r2, [sp, #32]
 8009278:	3208      	adds	r2, #8
 800927a:	3601      	adds	r6, #1
 800927c:	1064      	asrs	r4, r4, #1
 800927e:	9208      	str	r2, [sp, #32]
 8009280:	e7cd      	b.n	800921e <_strtod_l+0x4ce>
 8009282:	d0ed      	beq.n	8009260 <_strtod_l+0x510>
 8009284:	4264      	negs	r4, r4
 8009286:	f014 020f 	ands.w	r2, r4, #15
 800928a:	d00a      	beq.n	80092a2 <_strtod_l+0x552>
 800928c:	4b13      	ldr	r3, [pc, #76]	@ (80092dc <_strtod_l+0x58c>)
 800928e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009292:	4650      	mov	r0, sl
 8009294:	4659      	mov	r1, fp
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f7f7 faaf 	bl	80007fc <__aeabi_ddiv>
 800929e:	4682      	mov	sl, r0
 80092a0:	468b      	mov	fp, r1
 80092a2:	1124      	asrs	r4, r4, #4
 80092a4:	d0dc      	beq.n	8009260 <_strtod_l+0x510>
 80092a6:	2c1f      	cmp	r4, #31
 80092a8:	dd20      	ble.n	80092ec <_strtod_l+0x59c>
 80092aa:	2400      	movs	r4, #0
 80092ac:	46a0      	mov	r8, r4
 80092ae:	940a      	str	r4, [sp, #40]	@ 0x28
 80092b0:	46a1      	mov	r9, r4
 80092b2:	9a05      	ldr	r2, [sp, #20]
 80092b4:	2322      	movs	r3, #34	@ 0x22
 80092b6:	f04f 0a00 	mov.w	sl, #0
 80092ba:	f04f 0b00 	mov.w	fp, #0
 80092be:	6013      	str	r3, [r2, #0]
 80092c0:	e768      	b.n	8009194 <_strtod_l+0x444>
 80092c2:	bf00      	nop
 80092c4:	0800b4b5 	.word	0x0800b4b5
 80092c8:	0800b6cc 	.word	0x0800b6cc
 80092cc:	0800b4ad 	.word	0x0800b4ad
 80092d0:	0800b4e2 	.word	0x0800b4e2
 80092d4:	7ff00000 	.word	0x7ff00000
 80092d8:	0800b890 	.word	0x0800b890
 80092dc:	0800b600 	.word	0x0800b600
 80092e0:	0800b5d8 	.word	0x0800b5d8
 80092e4:	7ca00000 	.word	0x7ca00000
 80092e8:	7fefffff 	.word	0x7fefffff
 80092ec:	f014 0310 	ands.w	r3, r4, #16
 80092f0:	bf18      	it	ne
 80092f2:	236a      	movne	r3, #106	@ 0x6a
 80092f4:	4e77      	ldr	r6, [pc, #476]	@ (80094d4 <_strtod_l+0x784>)
 80092f6:	9308      	str	r3, [sp, #32]
 80092f8:	4650      	mov	r0, sl
 80092fa:	4659      	mov	r1, fp
 80092fc:	2300      	movs	r3, #0
 80092fe:	07e2      	lsls	r2, r4, #31
 8009300:	d504      	bpl.n	800930c <_strtod_l+0x5bc>
 8009302:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009306:	f7f7 f94f 	bl	80005a8 <__aeabi_dmul>
 800930a:	2301      	movs	r3, #1
 800930c:	1064      	asrs	r4, r4, #1
 800930e:	f106 0608 	add.w	r6, r6, #8
 8009312:	d1f4      	bne.n	80092fe <_strtod_l+0x5ae>
 8009314:	b10b      	cbz	r3, 800931a <_strtod_l+0x5ca>
 8009316:	4682      	mov	sl, r0
 8009318:	468b      	mov	fp, r1
 800931a:	9b08      	ldr	r3, [sp, #32]
 800931c:	b1b3      	cbz	r3, 800934c <_strtod_l+0x5fc>
 800931e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009322:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009326:	2b00      	cmp	r3, #0
 8009328:	4659      	mov	r1, fp
 800932a:	dd0f      	ble.n	800934c <_strtod_l+0x5fc>
 800932c:	2b1f      	cmp	r3, #31
 800932e:	dd57      	ble.n	80093e0 <_strtod_l+0x690>
 8009330:	2b34      	cmp	r3, #52	@ 0x34
 8009332:	bfde      	ittt	le
 8009334:	f04f 33ff 	movle.w	r3, #4294967295
 8009338:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800933c:	4093      	lslle	r3, r2
 800933e:	f04f 0a00 	mov.w	sl, #0
 8009342:	bfcc      	ite	gt
 8009344:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009348:	ea03 0b01 	andle.w	fp, r3, r1
 800934c:	2200      	movs	r2, #0
 800934e:	2300      	movs	r3, #0
 8009350:	4650      	mov	r0, sl
 8009352:	4659      	mov	r1, fp
 8009354:	f7f7 fb90 	bl	8000a78 <__aeabi_dcmpeq>
 8009358:	2800      	cmp	r0, #0
 800935a:	d1a6      	bne.n	80092aa <_strtod_l+0x55a>
 800935c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009362:	9805      	ldr	r0, [sp, #20]
 8009364:	462b      	mov	r3, r5
 8009366:	463a      	mov	r2, r7
 8009368:	f7ff f8ce 	bl	8008508 <__s2b>
 800936c:	900a      	str	r0, [sp, #40]	@ 0x28
 800936e:	2800      	cmp	r0, #0
 8009370:	f43f af05 	beq.w	800917e <_strtod_l+0x42e>
 8009374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009376:	2a00      	cmp	r2, #0
 8009378:	eba9 0308 	sub.w	r3, r9, r8
 800937c:	bfa8      	it	ge
 800937e:	2300      	movge	r3, #0
 8009380:	9312      	str	r3, [sp, #72]	@ 0x48
 8009382:	2400      	movs	r4, #0
 8009384:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009388:	9316      	str	r3, [sp, #88]	@ 0x58
 800938a:	46a0      	mov	r8, r4
 800938c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800938e:	9805      	ldr	r0, [sp, #20]
 8009390:	6859      	ldr	r1, [r3, #4]
 8009392:	f7ff f811 	bl	80083b8 <_Balloc>
 8009396:	4681      	mov	r9, r0
 8009398:	2800      	cmp	r0, #0
 800939a:	f43f aef4 	beq.w	8009186 <_strtod_l+0x436>
 800939e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093a0:	691a      	ldr	r2, [r3, #16]
 80093a2:	3202      	adds	r2, #2
 80093a4:	f103 010c 	add.w	r1, r3, #12
 80093a8:	0092      	lsls	r2, r2, #2
 80093aa:	300c      	adds	r0, #12
 80093ac:	f001 fab4 	bl	800a918 <memcpy>
 80093b0:	ab1c      	add	r3, sp, #112	@ 0x70
 80093b2:	9301      	str	r3, [sp, #4]
 80093b4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	9805      	ldr	r0, [sp, #20]
 80093ba:	4652      	mov	r2, sl
 80093bc:	465b      	mov	r3, fp
 80093be:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80093c2:	f7ff fbd5 	bl	8008b70 <__d2b>
 80093c6:	901a      	str	r0, [sp, #104]	@ 0x68
 80093c8:	2800      	cmp	r0, #0
 80093ca:	f43f aedc 	beq.w	8009186 <_strtod_l+0x436>
 80093ce:	9805      	ldr	r0, [sp, #20]
 80093d0:	2101      	movs	r1, #1
 80093d2:	f7ff f92f 	bl	8008634 <__i2b>
 80093d6:	4680      	mov	r8, r0
 80093d8:	b948      	cbnz	r0, 80093ee <_strtod_l+0x69e>
 80093da:	f04f 0800 	mov.w	r8, #0
 80093de:	e6d2      	b.n	8009186 <_strtod_l+0x436>
 80093e0:	f04f 32ff 	mov.w	r2, #4294967295
 80093e4:	fa02 f303 	lsl.w	r3, r2, r3
 80093e8:	ea03 0a0a 	and.w	sl, r3, sl
 80093ec:	e7ae      	b.n	800934c <_strtod_l+0x5fc>
 80093ee:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80093f0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80093f2:	2d00      	cmp	r5, #0
 80093f4:	bfab      	itete	ge
 80093f6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80093f8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80093fa:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80093fc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80093fe:	bfac      	ite	ge
 8009400:	18ef      	addge	r7, r5, r3
 8009402:	1b5e      	sublt	r6, r3, r5
 8009404:	9b08      	ldr	r3, [sp, #32]
 8009406:	1aed      	subs	r5, r5, r3
 8009408:	4415      	add	r5, r2
 800940a:	4b33      	ldr	r3, [pc, #204]	@ (80094d8 <_strtod_l+0x788>)
 800940c:	3d01      	subs	r5, #1
 800940e:	429d      	cmp	r5, r3
 8009410:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009414:	da50      	bge.n	80094b8 <_strtod_l+0x768>
 8009416:	1b5b      	subs	r3, r3, r5
 8009418:	2b1f      	cmp	r3, #31
 800941a:	eba2 0203 	sub.w	r2, r2, r3
 800941e:	f04f 0101 	mov.w	r1, #1
 8009422:	dc3d      	bgt.n	80094a0 <_strtod_l+0x750>
 8009424:	fa01 f303 	lsl.w	r3, r1, r3
 8009428:	9313      	str	r3, [sp, #76]	@ 0x4c
 800942a:	2300      	movs	r3, #0
 800942c:	9310      	str	r3, [sp, #64]	@ 0x40
 800942e:	18bd      	adds	r5, r7, r2
 8009430:	9b08      	ldr	r3, [sp, #32]
 8009432:	42af      	cmp	r7, r5
 8009434:	4416      	add	r6, r2
 8009436:	441e      	add	r6, r3
 8009438:	463b      	mov	r3, r7
 800943a:	bfa8      	it	ge
 800943c:	462b      	movge	r3, r5
 800943e:	42b3      	cmp	r3, r6
 8009440:	bfa8      	it	ge
 8009442:	4633      	movge	r3, r6
 8009444:	2b00      	cmp	r3, #0
 8009446:	bfc2      	ittt	gt
 8009448:	1aed      	subgt	r5, r5, r3
 800944a:	1af6      	subgt	r6, r6, r3
 800944c:	1aff      	subgt	r7, r7, r3
 800944e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009450:	2b00      	cmp	r3, #0
 8009452:	dd16      	ble.n	8009482 <_strtod_l+0x732>
 8009454:	4641      	mov	r1, r8
 8009456:	9805      	ldr	r0, [sp, #20]
 8009458:	461a      	mov	r2, r3
 800945a:	f7ff f9ab 	bl	80087b4 <__pow5mult>
 800945e:	4680      	mov	r8, r0
 8009460:	2800      	cmp	r0, #0
 8009462:	d0ba      	beq.n	80093da <_strtod_l+0x68a>
 8009464:	4601      	mov	r1, r0
 8009466:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009468:	9805      	ldr	r0, [sp, #20]
 800946a:	f7ff f8f9 	bl	8008660 <__multiply>
 800946e:	900e      	str	r0, [sp, #56]	@ 0x38
 8009470:	2800      	cmp	r0, #0
 8009472:	f43f ae88 	beq.w	8009186 <_strtod_l+0x436>
 8009476:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009478:	9805      	ldr	r0, [sp, #20]
 800947a:	f7fe ffdd 	bl	8008438 <_Bfree>
 800947e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009480:	931a      	str	r3, [sp, #104]	@ 0x68
 8009482:	2d00      	cmp	r5, #0
 8009484:	dc1d      	bgt.n	80094c2 <_strtod_l+0x772>
 8009486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009488:	2b00      	cmp	r3, #0
 800948a:	dd27      	ble.n	80094dc <_strtod_l+0x78c>
 800948c:	4649      	mov	r1, r9
 800948e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009490:	9805      	ldr	r0, [sp, #20]
 8009492:	f7ff f98f 	bl	80087b4 <__pow5mult>
 8009496:	4681      	mov	r9, r0
 8009498:	bb00      	cbnz	r0, 80094dc <_strtod_l+0x78c>
 800949a:	f04f 0900 	mov.w	r9, #0
 800949e:	e672      	b.n	8009186 <_strtod_l+0x436>
 80094a0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80094a4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80094a8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80094ac:	35e2      	adds	r5, #226	@ 0xe2
 80094ae:	fa01 f305 	lsl.w	r3, r1, r5
 80094b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80094b4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80094b6:	e7ba      	b.n	800942e <_strtod_l+0x6de>
 80094b8:	2300      	movs	r3, #0
 80094ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80094bc:	2301      	movs	r3, #1
 80094be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80094c0:	e7b5      	b.n	800942e <_strtod_l+0x6de>
 80094c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094c4:	9805      	ldr	r0, [sp, #20]
 80094c6:	462a      	mov	r2, r5
 80094c8:	f7ff f9ce 	bl	8008868 <__lshift>
 80094cc:	901a      	str	r0, [sp, #104]	@ 0x68
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d1d9      	bne.n	8009486 <_strtod_l+0x736>
 80094d2:	e658      	b.n	8009186 <_strtod_l+0x436>
 80094d4:	0800b6f8 	.word	0x0800b6f8
 80094d8:	fffffc02 	.word	0xfffffc02
 80094dc:	2e00      	cmp	r6, #0
 80094de:	dd07      	ble.n	80094f0 <_strtod_l+0x7a0>
 80094e0:	4649      	mov	r1, r9
 80094e2:	9805      	ldr	r0, [sp, #20]
 80094e4:	4632      	mov	r2, r6
 80094e6:	f7ff f9bf 	bl	8008868 <__lshift>
 80094ea:	4681      	mov	r9, r0
 80094ec:	2800      	cmp	r0, #0
 80094ee:	d0d4      	beq.n	800949a <_strtod_l+0x74a>
 80094f0:	2f00      	cmp	r7, #0
 80094f2:	dd08      	ble.n	8009506 <_strtod_l+0x7b6>
 80094f4:	4641      	mov	r1, r8
 80094f6:	9805      	ldr	r0, [sp, #20]
 80094f8:	463a      	mov	r2, r7
 80094fa:	f7ff f9b5 	bl	8008868 <__lshift>
 80094fe:	4680      	mov	r8, r0
 8009500:	2800      	cmp	r0, #0
 8009502:	f43f ae40 	beq.w	8009186 <_strtod_l+0x436>
 8009506:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009508:	9805      	ldr	r0, [sp, #20]
 800950a:	464a      	mov	r2, r9
 800950c:	f7ff fa34 	bl	8008978 <__mdiff>
 8009510:	4604      	mov	r4, r0
 8009512:	2800      	cmp	r0, #0
 8009514:	f43f ae37 	beq.w	8009186 <_strtod_l+0x436>
 8009518:	68c3      	ldr	r3, [r0, #12]
 800951a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800951c:	2300      	movs	r3, #0
 800951e:	60c3      	str	r3, [r0, #12]
 8009520:	4641      	mov	r1, r8
 8009522:	f7ff fa0d 	bl	8008940 <__mcmp>
 8009526:	2800      	cmp	r0, #0
 8009528:	da3d      	bge.n	80095a6 <_strtod_l+0x856>
 800952a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800952c:	ea53 030a 	orrs.w	r3, r3, sl
 8009530:	d163      	bne.n	80095fa <_strtod_l+0x8aa>
 8009532:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009536:	2b00      	cmp	r3, #0
 8009538:	d15f      	bne.n	80095fa <_strtod_l+0x8aa>
 800953a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800953e:	0d1b      	lsrs	r3, r3, #20
 8009540:	051b      	lsls	r3, r3, #20
 8009542:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009546:	d958      	bls.n	80095fa <_strtod_l+0x8aa>
 8009548:	6963      	ldr	r3, [r4, #20]
 800954a:	b913      	cbnz	r3, 8009552 <_strtod_l+0x802>
 800954c:	6923      	ldr	r3, [r4, #16]
 800954e:	2b01      	cmp	r3, #1
 8009550:	dd53      	ble.n	80095fa <_strtod_l+0x8aa>
 8009552:	4621      	mov	r1, r4
 8009554:	2201      	movs	r2, #1
 8009556:	9805      	ldr	r0, [sp, #20]
 8009558:	f7ff f986 	bl	8008868 <__lshift>
 800955c:	4641      	mov	r1, r8
 800955e:	4604      	mov	r4, r0
 8009560:	f7ff f9ee 	bl	8008940 <__mcmp>
 8009564:	2800      	cmp	r0, #0
 8009566:	dd48      	ble.n	80095fa <_strtod_l+0x8aa>
 8009568:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800956c:	9a08      	ldr	r2, [sp, #32]
 800956e:	0d1b      	lsrs	r3, r3, #20
 8009570:	051b      	lsls	r3, r3, #20
 8009572:	2a00      	cmp	r2, #0
 8009574:	d062      	beq.n	800963c <_strtod_l+0x8ec>
 8009576:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800957a:	d85f      	bhi.n	800963c <_strtod_l+0x8ec>
 800957c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009580:	f67f ae97 	bls.w	80092b2 <_strtod_l+0x562>
 8009584:	4ba4      	ldr	r3, [pc, #656]	@ (8009818 <_strtod_l+0xac8>)
 8009586:	4650      	mov	r0, sl
 8009588:	4659      	mov	r1, fp
 800958a:	2200      	movs	r2, #0
 800958c:	f7f7 f80c 	bl	80005a8 <__aeabi_dmul>
 8009590:	4ba2      	ldr	r3, [pc, #648]	@ (800981c <_strtod_l+0xacc>)
 8009592:	400b      	ands	r3, r1
 8009594:	4682      	mov	sl, r0
 8009596:	468b      	mov	fp, r1
 8009598:	2b00      	cmp	r3, #0
 800959a:	f47f adff 	bne.w	800919c <_strtod_l+0x44c>
 800959e:	9a05      	ldr	r2, [sp, #20]
 80095a0:	2322      	movs	r3, #34	@ 0x22
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	e5fa      	b.n	800919c <_strtod_l+0x44c>
 80095a6:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80095aa:	d165      	bne.n	8009678 <_strtod_l+0x928>
 80095ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80095ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095b2:	b35a      	cbz	r2, 800960c <_strtod_l+0x8bc>
 80095b4:	4a9a      	ldr	r2, [pc, #616]	@ (8009820 <_strtod_l+0xad0>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d12b      	bne.n	8009612 <_strtod_l+0x8c2>
 80095ba:	9b08      	ldr	r3, [sp, #32]
 80095bc:	4651      	mov	r1, sl
 80095be:	b303      	cbz	r3, 8009602 <_strtod_l+0x8b2>
 80095c0:	4b96      	ldr	r3, [pc, #600]	@ (800981c <_strtod_l+0xacc>)
 80095c2:	465a      	mov	r2, fp
 80095c4:	4013      	ands	r3, r2
 80095c6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80095ca:	f04f 32ff 	mov.w	r2, #4294967295
 80095ce:	d81b      	bhi.n	8009608 <_strtod_l+0x8b8>
 80095d0:	0d1b      	lsrs	r3, r3, #20
 80095d2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80095d6:	fa02 f303 	lsl.w	r3, r2, r3
 80095da:	4299      	cmp	r1, r3
 80095dc:	d119      	bne.n	8009612 <_strtod_l+0x8c2>
 80095de:	4b91      	ldr	r3, [pc, #580]	@ (8009824 <_strtod_l+0xad4>)
 80095e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d102      	bne.n	80095ec <_strtod_l+0x89c>
 80095e6:	3101      	adds	r1, #1
 80095e8:	f43f adcd 	beq.w	8009186 <_strtod_l+0x436>
 80095ec:	4b8b      	ldr	r3, [pc, #556]	@ (800981c <_strtod_l+0xacc>)
 80095ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095f0:	401a      	ands	r2, r3
 80095f2:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80095f6:	f04f 0a00 	mov.w	sl, #0
 80095fa:	9b08      	ldr	r3, [sp, #32]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1c1      	bne.n	8009584 <_strtod_l+0x834>
 8009600:	e5cc      	b.n	800919c <_strtod_l+0x44c>
 8009602:	f04f 33ff 	mov.w	r3, #4294967295
 8009606:	e7e8      	b.n	80095da <_strtod_l+0x88a>
 8009608:	4613      	mov	r3, r2
 800960a:	e7e6      	b.n	80095da <_strtod_l+0x88a>
 800960c:	ea53 030a 	orrs.w	r3, r3, sl
 8009610:	d0aa      	beq.n	8009568 <_strtod_l+0x818>
 8009612:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009614:	b1db      	cbz	r3, 800964e <_strtod_l+0x8fe>
 8009616:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009618:	4213      	tst	r3, r2
 800961a:	d0ee      	beq.n	80095fa <_strtod_l+0x8aa>
 800961c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800961e:	9a08      	ldr	r2, [sp, #32]
 8009620:	4650      	mov	r0, sl
 8009622:	4659      	mov	r1, fp
 8009624:	b1bb      	cbz	r3, 8009656 <_strtod_l+0x906>
 8009626:	f7ff fb6f 	bl	8008d08 <sulp>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009632:	f7f6 fe03 	bl	800023c <__adddf3>
 8009636:	4682      	mov	sl, r0
 8009638:	468b      	mov	fp, r1
 800963a:	e7de      	b.n	80095fa <_strtod_l+0x8aa>
 800963c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009640:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009644:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009648:	f04f 3aff 	mov.w	sl, #4294967295
 800964c:	e7d5      	b.n	80095fa <_strtod_l+0x8aa>
 800964e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009650:	ea13 0f0a 	tst.w	r3, sl
 8009654:	e7e1      	b.n	800961a <_strtod_l+0x8ca>
 8009656:	f7ff fb57 	bl	8008d08 <sulp>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009662:	f7f6 fde9 	bl	8000238 <__aeabi_dsub>
 8009666:	2200      	movs	r2, #0
 8009668:	2300      	movs	r3, #0
 800966a:	4682      	mov	sl, r0
 800966c:	468b      	mov	fp, r1
 800966e:	f7f7 fa03 	bl	8000a78 <__aeabi_dcmpeq>
 8009672:	2800      	cmp	r0, #0
 8009674:	d0c1      	beq.n	80095fa <_strtod_l+0x8aa>
 8009676:	e61c      	b.n	80092b2 <_strtod_l+0x562>
 8009678:	4641      	mov	r1, r8
 800967a:	4620      	mov	r0, r4
 800967c:	f7ff fad0 	bl	8008c20 <__ratio>
 8009680:	2200      	movs	r2, #0
 8009682:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009686:	4606      	mov	r6, r0
 8009688:	460f      	mov	r7, r1
 800968a:	f7f7 fa09 	bl	8000aa0 <__aeabi_dcmple>
 800968e:	2800      	cmp	r0, #0
 8009690:	d06d      	beq.n	800976e <_strtod_l+0xa1e>
 8009692:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009694:	2b00      	cmp	r3, #0
 8009696:	d178      	bne.n	800978a <_strtod_l+0xa3a>
 8009698:	f1ba 0f00 	cmp.w	sl, #0
 800969c:	d156      	bne.n	800974c <_strtod_l+0x9fc>
 800969e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d158      	bne.n	800975a <_strtod_l+0xa0a>
 80096a8:	4b5f      	ldr	r3, [pc, #380]	@ (8009828 <_strtod_l+0xad8>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	4630      	mov	r0, r6
 80096ae:	4639      	mov	r1, r7
 80096b0:	f7f7 f9ec 	bl	8000a8c <__aeabi_dcmplt>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d157      	bne.n	8009768 <_strtod_l+0xa18>
 80096b8:	4630      	mov	r0, r6
 80096ba:	4639      	mov	r1, r7
 80096bc:	4b5b      	ldr	r3, [pc, #364]	@ (800982c <_strtod_l+0xadc>)
 80096be:	2200      	movs	r2, #0
 80096c0:	f7f6 ff72 	bl	80005a8 <__aeabi_dmul>
 80096c4:	4606      	mov	r6, r0
 80096c6:	460f      	mov	r7, r1
 80096c8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80096cc:	9606      	str	r6, [sp, #24]
 80096ce:	9307      	str	r3, [sp, #28]
 80096d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096d4:	4d51      	ldr	r5, [pc, #324]	@ (800981c <_strtod_l+0xacc>)
 80096d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80096da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096dc:	401d      	ands	r5, r3
 80096de:	4b54      	ldr	r3, [pc, #336]	@ (8009830 <_strtod_l+0xae0>)
 80096e0:	429d      	cmp	r5, r3
 80096e2:	f040 80ab 	bne.w	800983c <_strtod_l+0xaec>
 80096e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096e8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80096ec:	4650      	mov	r0, sl
 80096ee:	4659      	mov	r1, fp
 80096f0:	f7ff f9d4 	bl	8008a9c <__ulp>
 80096f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096f8:	f7f6 ff56 	bl	80005a8 <__aeabi_dmul>
 80096fc:	4652      	mov	r2, sl
 80096fe:	465b      	mov	r3, fp
 8009700:	f7f6 fd9c 	bl	800023c <__adddf3>
 8009704:	460b      	mov	r3, r1
 8009706:	4945      	ldr	r1, [pc, #276]	@ (800981c <_strtod_l+0xacc>)
 8009708:	4a4a      	ldr	r2, [pc, #296]	@ (8009834 <_strtod_l+0xae4>)
 800970a:	4019      	ands	r1, r3
 800970c:	4291      	cmp	r1, r2
 800970e:	4682      	mov	sl, r0
 8009710:	d942      	bls.n	8009798 <_strtod_l+0xa48>
 8009712:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009714:	4b43      	ldr	r3, [pc, #268]	@ (8009824 <_strtod_l+0xad4>)
 8009716:	429a      	cmp	r2, r3
 8009718:	d103      	bne.n	8009722 <_strtod_l+0x9d2>
 800971a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800971c:	3301      	adds	r3, #1
 800971e:	f43f ad32 	beq.w	8009186 <_strtod_l+0x436>
 8009722:	f8df b100 	ldr.w	fp, [pc, #256]	@ 8009824 <_strtod_l+0xad4>
 8009726:	f04f 3aff 	mov.w	sl, #4294967295
 800972a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800972c:	9805      	ldr	r0, [sp, #20]
 800972e:	f7fe fe83 	bl	8008438 <_Bfree>
 8009732:	9805      	ldr	r0, [sp, #20]
 8009734:	4649      	mov	r1, r9
 8009736:	f7fe fe7f 	bl	8008438 <_Bfree>
 800973a:	9805      	ldr	r0, [sp, #20]
 800973c:	4641      	mov	r1, r8
 800973e:	f7fe fe7b 	bl	8008438 <_Bfree>
 8009742:	9805      	ldr	r0, [sp, #20]
 8009744:	4621      	mov	r1, r4
 8009746:	f7fe fe77 	bl	8008438 <_Bfree>
 800974a:	e61f      	b.n	800938c <_strtod_l+0x63c>
 800974c:	f1ba 0f01 	cmp.w	sl, #1
 8009750:	d103      	bne.n	800975a <_strtod_l+0xa0a>
 8009752:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009754:	2b00      	cmp	r3, #0
 8009756:	f43f adac 	beq.w	80092b2 <_strtod_l+0x562>
 800975a:	4b37      	ldr	r3, [pc, #220]	@ (8009838 <_strtod_l+0xae8>)
 800975c:	4f32      	ldr	r7, [pc, #200]	@ (8009828 <_strtod_l+0xad8>)
 800975e:	2200      	movs	r2, #0
 8009760:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009764:	2600      	movs	r6, #0
 8009766:	e7b3      	b.n	80096d0 <_strtod_l+0x980>
 8009768:	4f30      	ldr	r7, [pc, #192]	@ (800982c <_strtod_l+0xadc>)
 800976a:	2600      	movs	r6, #0
 800976c:	e7ac      	b.n	80096c8 <_strtod_l+0x978>
 800976e:	4b2f      	ldr	r3, [pc, #188]	@ (800982c <_strtod_l+0xadc>)
 8009770:	4630      	mov	r0, r6
 8009772:	4639      	mov	r1, r7
 8009774:	2200      	movs	r2, #0
 8009776:	f7f6 ff17 	bl	80005a8 <__aeabi_dmul>
 800977a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800977c:	4606      	mov	r6, r0
 800977e:	460f      	mov	r7, r1
 8009780:	2b00      	cmp	r3, #0
 8009782:	d0a1      	beq.n	80096c8 <_strtod_l+0x978>
 8009784:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009788:	e7a2      	b.n	80096d0 <_strtod_l+0x980>
 800978a:	4b27      	ldr	r3, [pc, #156]	@ (8009828 <_strtod_l+0xad8>)
 800978c:	2200      	movs	r2, #0
 800978e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009792:	4616      	mov	r6, r2
 8009794:	461f      	mov	r7, r3
 8009796:	e79b      	b.n	80096d0 <_strtod_l+0x980>
 8009798:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800979c:	9b08      	ldr	r3, [sp, #32]
 800979e:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1c1      	bne.n	800972a <_strtod_l+0x9da>
 80097a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80097aa:	0d1b      	lsrs	r3, r3, #20
 80097ac:	051b      	lsls	r3, r3, #20
 80097ae:	429d      	cmp	r5, r3
 80097b0:	d1bb      	bne.n	800972a <_strtod_l+0x9da>
 80097b2:	4630      	mov	r0, r6
 80097b4:	4639      	mov	r1, r7
 80097b6:	f7f7 fcb5 	bl	8001124 <__aeabi_d2lz>
 80097ba:	f7f6 fec7 	bl	800054c <__aeabi_l2d>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	4630      	mov	r0, r6
 80097c4:	4639      	mov	r1, r7
 80097c6:	f7f6 fd37 	bl	8000238 <__aeabi_dsub>
 80097ca:	460b      	mov	r3, r1
 80097cc:	4602      	mov	r2, r0
 80097ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80097d2:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80097d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097d8:	ea46 060a 	orr.w	r6, r6, sl
 80097dc:	431e      	orrs	r6, r3
 80097de:	d06a      	beq.n	80098b6 <_strtod_l+0xb66>
 80097e0:	a309      	add	r3, pc, #36	@ (adr r3, 8009808 <_strtod_l+0xab8>)
 80097e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e6:	f7f7 f951 	bl	8000a8c <__aeabi_dcmplt>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	f47f acd6 	bne.w	800919c <_strtod_l+0x44c>
 80097f0:	a307      	add	r3, pc, #28	@ (adr r3, 8009810 <_strtod_l+0xac0>)
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097fa:	f7f7 f965 	bl	8000ac8 <__aeabi_dcmpgt>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d093      	beq.n	800972a <_strtod_l+0x9da>
 8009802:	e4cb      	b.n	800919c <_strtod_l+0x44c>
 8009804:	f3af 8000 	nop.w
 8009808:	94a03595 	.word	0x94a03595
 800980c:	3fdfffff 	.word	0x3fdfffff
 8009810:	35afe535 	.word	0x35afe535
 8009814:	3fe00000 	.word	0x3fe00000
 8009818:	39500000 	.word	0x39500000
 800981c:	7ff00000 	.word	0x7ff00000
 8009820:	000fffff 	.word	0x000fffff
 8009824:	7fefffff 	.word	0x7fefffff
 8009828:	3ff00000 	.word	0x3ff00000
 800982c:	3fe00000 	.word	0x3fe00000
 8009830:	7fe00000 	.word	0x7fe00000
 8009834:	7c9fffff 	.word	0x7c9fffff
 8009838:	bff00000 	.word	0xbff00000
 800983c:	9b08      	ldr	r3, [sp, #32]
 800983e:	b323      	cbz	r3, 800988a <_strtod_l+0xb3a>
 8009840:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009844:	d821      	bhi.n	800988a <_strtod_l+0xb3a>
 8009846:	a328      	add	r3, pc, #160	@ (adr r3, 80098e8 <_strtod_l+0xb98>)
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	4630      	mov	r0, r6
 800984e:	4639      	mov	r1, r7
 8009850:	f7f7 f926 	bl	8000aa0 <__aeabi_dcmple>
 8009854:	b1a0      	cbz	r0, 8009880 <_strtod_l+0xb30>
 8009856:	4639      	mov	r1, r7
 8009858:	4630      	mov	r0, r6
 800985a:	f7f7 f97d 	bl	8000b58 <__aeabi_d2uiz>
 800985e:	2801      	cmp	r0, #1
 8009860:	bf38      	it	cc
 8009862:	2001      	movcc	r0, #1
 8009864:	f7f6 fe26 	bl	80004b4 <__aeabi_ui2d>
 8009868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800986a:	4606      	mov	r6, r0
 800986c:	460f      	mov	r7, r1
 800986e:	b9fb      	cbnz	r3, 80098b0 <_strtod_l+0xb60>
 8009870:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009874:	9014      	str	r0, [sp, #80]	@ 0x50
 8009876:	9315      	str	r3, [sp, #84]	@ 0x54
 8009878:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800987c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009880:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009882:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009886:	1b5b      	subs	r3, r3, r5
 8009888:	9311      	str	r3, [sp, #68]	@ 0x44
 800988a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800988e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009892:	f7ff f903 	bl	8008a9c <__ulp>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	4650      	mov	r0, sl
 800989c:	4659      	mov	r1, fp
 800989e:	f7f6 fe83 	bl	80005a8 <__aeabi_dmul>
 80098a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80098a6:	f7f6 fcc9 	bl	800023c <__adddf3>
 80098aa:	4682      	mov	sl, r0
 80098ac:	468b      	mov	fp, r1
 80098ae:	e775      	b.n	800979c <_strtod_l+0xa4c>
 80098b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80098b4:	e7e0      	b.n	8009878 <_strtod_l+0xb28>
 80098b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80098f0 <_strtod_l+0xba0>)
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	f7f7 f8e6 	bl	8000a8c <__aeabi_dcmplt>
 80098c0:	e79d      	b.n	80097fe <_strtod_l+0xaae>
 80098c2:	2300      	movs	r3, #0
 80098c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80098c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	f7ff ba7d 	b.w	8008dca <_strtod_l+0x7a>
 80098d0:	2a65      	cmp	r2, #101	@ 0x65
 80098d2:	f43f ab74 	beq.w	8008fbe <_strtod_l+0x26e>
 80098d6:	2a45      	cmp	r2, #69	@ 0x45
 80098d8:	f43f ab71 	beq.w	8008fbe <_strtod_l+0x26e>
 80098dc:	2301      	movs	r3, #1
 80098de:	f7ff bbac 	b.w	800903a <_strtod_l+0x2ea>
 80098e2:	bf00      	nop
 80098e4:	f3af 8000 	nop.w
 80098e8:	ffc00000 	.word	0xffc00000
 80098ec:	41dfffff 	.word	0x41dfffff
 80098f0:	94a03595 	.word	0x94a03595
 80098f4:	3fcfffff 	.word	0x3fcfffff

080098f8 <_strtod_r>:
 80098f8:	4b01      	ldr	r3, [pc, #4]	@ (8009900 <_strtod_r+0x8>)
 80098fa:	f7ff ba29 	b.w	8008d50 <_strtod_l>
 80098fe:	bf00      	nop
 8009900:	20000068 	.word	0x20000068

08009904 <_strtol_l.constprop.0>:
 8009904:	2b24      	cmp	r3, #36	@ 0x24
 8009906:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800990a:	4686      	mov	lr, r0
 800990c:	4690      	mov	r8, r2
 800990e:	d801      	bhi.n	8009914 <_strtol_l.constprop.0+0x10>
 8009910:	2b01      	cmp	r3, #1
 8009912:	d106      	bne.n	8009922 <_strtol_l.constprop.0+0x1e>
 8009914:	f7fd fdce 	bl	80074b4 <__errno>
 8009918:	2316      	movs	r3, #22
 800991a:	6003      	str	r3, [r0, #0]
 800991c:	2000      	movs	r0, #0
 800991e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009922:	4834      	ldr	r0, [pc, #208]	@ (80099f4 <_strtol_l.constprop.0+0xf0>)
 8009924:	460d      	mov	r5, r1
 8009926:	462a      	mov	r2, r5
 8009928:	f815 4b01 	ldrb.w	r4, [r5], #1
 800992c:	5d06      	ldrb	r6, [r0, r4]
 800992e:	f016 0608 	ands.w	r6, r6, #8
 8009932:	d1f8      	bne.n	8009926 <_strtol_l.constprop.0+0x22>
 8009934:	2c2d      	cmp	r4, #45	@ 0x2d
 8009936:	d12d      	bne.n	8009994 <_strtol_l.constprop.0+0x90>
 8009938:	782c      	ldrb	r4, [r5, #0]
 800993a:	2601      	movs	r6, #1
 800993c:	1c95      	adds	r5, r2, #2
 800993e:	f033 0210 	bics.w	r2, r3, #16
 8009942:	d109      	bne.n	8009958 <_strtol_l.constprop.0+0x54>
 8009944:	2c30      	cmp	r4, #48	@ 0x30
 8009946:	d12a      	bne.n	800999e <_strtol_l.constprop.0+0x9a>
 8009948:	782a      	ldrb	r2, [r5, #0]
 800994a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800994e:	2a58      	cmp	r2, #88	@ 0x58
 8009950:	d125      	bne.n	800999e <_strtol_l.constprop.0+0x9a>
 8009952:	786c      	ldrb	r4, [r5, #1]
 8009954:	2310      	movs	r3, #16
 8009956:	3502      	adds	r5, #2
 8009958:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800995c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009960:	2200      	movs	r2, #0
 8009962:	fbbc f9f3 	udiv	r9, ip, r3
 8009966:	4610      	mov	r0, r2
 8009968:	fb03 ca19 	mls	sl, r3, r9, ip
 800996c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009970:	2f09      	cmp	r7, #9
 8009972:	d81b      	bhi.n	80099ac <_strtol_l.constprop.0+0xa8>
 8009974:	463c      	mov	r4, r7
 8009976:	42a3      	cmp	r3, r4
 8009978:	dd27      	ble.n	80099ca <_strtol_l.constprop.0+0xc6>
 800997a:	1c57      	adds	r7, r2, #1
 800997c:	d007      	beq.n	800998e <_strtol_l.constprop.0+0x8a>
 800997e:	4581      	cmp	r9, r0
 8009980:	d320      	bcc.n	80099c4 <_strtol_l.constprop.0+0xc0>
 8009982:	d101      	bne.n	8009988 <_strtol_l.constprop.0+0x84>
 8009984:	45a2      	cmp	sl, r4
 8009986:	db1d      	blt.n	80099c4 <_strtol_l.constprop.0+0xc0>
 8009988:	fb00 4003 	mla	r0, r0, r3, r4
 800998c:	2201      	movs	r2, #1
 800998e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009992:	e7eb      	b.n	800996c <_strtol_l.constprop.0+0x68>
 8009994:	2c2b      	cmp	r4, #43	@ 0x2b
 8009996:	bf04      	itt	eq
 8009998:	782c      	ldrbeq	r4, [r5, #0]
 800999a:	1c95      	addeq	r5, r2, #2
 800999c:	e7cf      	b.n	800993e <_strtol_l.constprop.0+0x3a>
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1da      	bne.n	8009958 <_strtol_l.constprop.0+0x54>
 80099a2:	2c30      	cmp	r4, #48	@ 0x30
 80099a4:	bf0c      	ite	eq
 80099a6:	2308      	moveq	r3, #8
 80099a8:	230a      	movne	r3, #10
 80099aa:	e7d5      	b.n	8009958 <_strtol_l.constprop.0+0x54>
 80099ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80099b0:	2f19      	cmp	r7, #25
 80099b2:	d801      	bhi.n	80099b8 <_strtol_l.constprop.0+0xb4>
 80099b4:	3c37      	subs	r4, #55	@ 0x37
 80099b6:	e7de      	b.n	8009976 <_strtol_l.constprop.0+0x72>
 80099b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80099bc:	2f19      	cmp	r7, #25
 80099be:	d804      	bhi.n	80099ca <_strtol_l.constprop.0+0xc6>
 80099c0:	3c57      	subs	r4, #87	@ 0x57
 80099c2:	e7d8      	b.n	8009976 <_strtol_l.constprop.0+0x72>
 80099c4:	f04f 32ff 	mov.w	r2, #4294967295
 80099c8:	e7e1      	b.n	800998e <_strtol_l.constprop.0+0x8a>
 80099ca:	1c53      	adds	r3, r2, #1
 80099cc:	d108      	bne.n	80099e0 <_strtol_l.constprop.0+0xdc>
 80099ce:	2322      	movs	r3, #34	@ 0x22
 80099d0:	f8ce 3000 	str.w	r3, [lr]
 80099d4:	4660      	mov	r0, ip
 80099d6:	f1b8 0f00 	cmp.w	r8, #0
 80099da:	d0a0      	beq.n	800991e <_strtol_l.constprop.0+0x1a>
 80099dc:	1e69      	subs	r1, r5, #1
 80099de:	e006      	b.n	80099ee <_strtol_l.constprop.0+0xea>
 80099e0:	b106      	cbz	r6, 80099e4 <_strtol_l.constprop.0+0xe0>
 80099e2:	4240      	negs	r0, r0
 80099e4:	f1b8 0f00 	cmp.w	r8, #0
 80099e8:	d099      	beq.n	800991e <_strtol_l.constprop.0+0x1a>
 80099ea:	2a00      	cmp	r2, #0
 80099ec:	d1f6      	bne.n	80099dc <_strtol_l.constprop.0+0xd8>
 80099ee:	f8c8 1000 	str.w	r1, [r8]
 80099f2:	e794      	b.n	800991e <_strtol_l.constprop.0+0x1a>
 80099f4:	0800b721 	.word	0x0800b721

080099f8 <_strtol_r>:
 80099f8:	f7ff bf84 	b.w	8009904 <_strtol_l.constprop.0>

080099fc <__ssputs_r>:
 80099fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a00:	688e      	ldr	r6, [r1, #8]
 8009a02:	461f      	mov	r7, r3
 8009a04:	42be      	cmp	r6, r7
 8009a06:	680b      	ldr	r3, [r1, #0]
 8009a08:	4682      	mov	sl, r0
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	4690      	mov	r8, r2
 8009a0e:	d82d      	bhi.n	8009a6c <__ssputs_r+0x70>
 8009a10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a18:	d026      	beq.n	8009a68 <__ssputs_r+0x6c>
 8009a1a:	6965      	ldr	r5, [r4, #20]
 8009a1c:	6909      	ldr	r1, [r1, #16]
 8009a1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a22:	eba3 0901 	sub.w	r9, r3, r1
 8009a26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a2a:	1c7b      	adds	r3, r7, #1
 8009a2c:	444b      	add	r3, r9
 8009a2e:	106d      	asrs	r5, r5, #1
 8009a30:	429d      	cmp	r5, r3
 8009a32:	bf38      	it	cc
 8009a34:	461d      	movcc	r5, r3
 8009a36:	0553      	lsls	r3, r2, #21
 8009a38:	d527      	bpl.n	8009a8a <__ssputs_r+0x8e>
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	f7fe fc30 	bl	80082a0 <_malloc_r>
 8009a40:	4606      	mov	r6, r0
 8009a42:	b360      	cbz	r0, 8009a9e <__ssputs_r+0xa2>
 8009a44:	6921      	ldr	r1, [r4, #16]
 8009a46:	464a      	mov	r2, r9
 8009a48:	f000 ff66 	bl	800a918 <memcpy>
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a56:	81a3      	strh	r3, [r4, #12]
 8009a58:	6126      	str	r6, [r4, #16]
 8009a5a:	6165      	str	r5, [r4, #20]
 8009a5c:	444e      	add	r6, r9
 8009a5e:	eba5 0509 	sub.w	r5, r5, r9
 8009a62:	6026      	str	r6, [r4, #0]
 8009a64:	60a5      	str	r5, [r4, #8]
 8009a66:	463e      	mov	r6, r7
 8009a68:	42be      	cmp	r6, r7
 8009a6a:	d900      	bls.n	8009a6e <__ssputs_r+0x72>
 8009a6c:	463e      	mov	r6, r7
 8009a6e:	6820      	ldr	r0, [r4, #0]
 8009a70:	4632      	mov	r2, r6
 8009a72:	4641      	mov	r1, r8
 8009a74:	f000 fef1 	bl	800a85a <memmove>
 8009a78:	68a3      	ldr	r3, [r4, #8]
 8009a7a:	1b9b      	subs	r3, r3, r6
 8009a7c:	60a3      	str	r3, [r4, #8]
 8009a7e:	6823      	ldr	r3, [r4, #0]
 8009a80:	4433      	add	r3, r6
 8009a82:	6023      	str	r3, [r4, #0]
 8009a84:	2000      	movs	r0, #0
 8009a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a8a:	462a      	mov	r2, r5
 8009a8c:	f001 fad5 	bl	800b03a <_realloc_r>
 8009a90:	4606      	mov	r6, r0
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d1e0      	bne.n	8009a58 <__ssputs_r+0x5c>
 8009a96:	6921      	ldr	r1, [r4, #16]
 8009a98:	4650      	mov	r0, sl
 8009a9a:	f7fe fb8d 	bl	80081b8 <_free_r>
 8009a9e:	230c      	movs	r3, #12
 8009aa0:	f8ca 3000 	str.w	r3, [sl]
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aaa:	81a3      	strh	r3, [r4, #12]
 8009aac:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab0:	e7e9      	b.n	8009a86 <__ssputs_r+0x8a>
	...

08009ab4 <_svfiprintf_r>:
 8009ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab8:	4698      	mov	r8, r3
 8009aba:	898b      	ldrh	r3, [r1, #12]
 8009abc:	061b      	lsls	r3, r3, #24
 8009abe:	b09d      	sub	sp, #116	@ 0x74
 8009ac0:	4607      	mov	r7, r0
 8009ac2:	460d      	mov	r5, r1
 8009ac4:	4614      	mov	r4, r2
 8009ac6:	d510      	bpl.n	8009aea <_svfiprintf_r+0x36>
 8009ac8:	690b      	ldr	r3, [r1, #16]
 8009aca:	b973      	cbnz	r3, 8009aea <_svfiprintf_r+0x36>
 8009acc:	2140      	movs	r1, #64	@ 0x40
 8009ace:	f7fe fbe7 	bl	80082a0 <_malloc_r>
 8009ad2:	6028      	str	r0, [r5, #0]
 8009ad4:	6128      	str	r0, [r5, #16]
 8009ad6:	b930      	cbnz	r0, 8009ae6 <_svfiprintf_r+0x32>
 8009ad8:	230c      	movs	r3, #12
 8009ada:	603b      	str	r3, [r7, #0]
 8009adc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae0:	b01d      	add	sp, #116	@ 0x74
 8009ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae6:	2340      	movs	r3, #64	@ 0x40
 8009ae8:	616b      	str	r3, [r5, #20]
 8009aea:	2300      	movs	r3, #0
 8009aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aee:	2320      	movs	r3, #32
 8009af0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009af4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009af8:	2330      	movs	r3, #48	@ 0x30
 8009afa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c98 <_svfiprintf_r+0x1e4>
 8009afe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b02:	f04f 0901 	mov.w	r9, #1
 8009b06:	4623      	mov	r3, r4
 8009b08:	469a      	mov	sl, r3
 8009b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b0e:	b10a      	cbz	r2, 8009b14 <_svfiprintf_r+0x60>
 8009b10:	2a25      	cmp	r2, #37	@ 0x25
 8009b12:	d1f9      	bne.n	8009b08 <_svfiprintf_r+0x54>
 8009b14:	ebba 0b04 	subs.w	fp, sl, r4
 8009b18:	d00b      	beq.n	8009b32 <_svfiprintf_r+0x7e>
 8009b1a:	465b      	mov	r3, fp
 8009b1c:	4622      	mov	r2, r4
 8009b1e:	4629      	mov	r1, r5
 8009b20:	4638      	mov	r0, r7
 8009b22:	f7ff ff6b 	bl	80099fc <__ssputs_r>
 8009b26:	3001      	adds	r0, #1
 8009b28:	f000 80a7 	beq.w	8009c7a <_svfiprintf_r+0x1c6>
 8009b2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b2e:	445a      	add	r2, fp
 8009b30:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b32:	f89a 3000 	ldrb.w	r3, [sl]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f000 809f 	beq.w	8009c7a <_svfiprintf_r+0x1c6>
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b46:	f10a 0a01 	add.w	sl, sl, #1
 8009b4a:	9304      	str	r3, [sp, #16]
 8009b4c:	9307      	str	r3, [sp, #28]
 8009b4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b52:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b54:	4654      	mov	r4, sl
 8009b56:	2205      	movs	r2, #5
 8009b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b5c:	484e      	ldr	r0, [pc, #312]	@ (8009c98 <_svfiprintf_r+0x1e4>)
 8009b5e:	f7f6 fb0f 	bl	8000180 <memchr>
 8009b62:	9a04      	ldr	r2, [sp, #16]
 8009b64:	b9d8      	cbnz	r0, 8009b9e <_svfiprintf_r+0xea>
 8009b66:	06d0      	lsls	r0, r2, #27
 8009b68:	bf44      	itt	mi
 8009b6a:	2320      	movmi	r3, #32
 8009b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b70:	0711      	lsls	r1, r2, #28
 8009b72:	bf44      	itt	mi
 8009b74:	232b      	movmi	r3, #43	@ 0x2b
 8009b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b80:	d015      	beq.n	8009bae <_svfiprintf_r+0xfa>
 8009b82:	9a07      	ldr	r2, [sp, #28]
 8009b84:	4654      	mov	r4, sl
 8009b86:	2000      	movs	r0, #0
 8009b88:	f04f 0c0a 	mov.w	ip, #10
 8009b8c:	4621      	mov	r1, r4
 8009b8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b92:	3b30      	subs	r3, #48	@ 0x30
 8009b94:	2b09      	cmp	r3, #9
 8009b96:	d94b      	bls.n	8009c30 <_svfiprintf_r+0x17c>
 8009b98:	b1b0      	cbz	r0, 8009bc8 <_svfiprintf_r+0x114>
 8009b9a:	9207      	str	r2, [sp, #28]
 8009b9c:	e014      	b.n	8009bc8 <_svfiprintf_r+0x114>
 8009b9e:	eba0 0308 	sub.w	r3, r0, r8
 8009ba2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	9304      	str	r3, [sp, #16]
 8009baa:	46a2      	mov	sl, r4
 8009bac:	e7d2      	b.n	8009b54 <_svfiprintf_r+0xa0>
 8009bae:	9b03      	ldr	r3, [sp, #12]
 8009bb0:	1d19      	adds	r1, r3, #4
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	9103      	str	r1, [sp, #12]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	bfbb      	ittet	lt
 8009bba:	425b      	neglt	r3, r3
 8009bbc:	f042 0202 	orrlt.w	r2, r2, #2
 8009bc0:	9307      	strge	r3, [sp, #28]
 8009bc2:	9307      	strlt	r3, [sp, #28]
 8009bc4:	bfb8      	it	lt
 8009bc6:	9204      	strlt	r2, [sp, #16]
 8009bc8:	7823      	ldrb	r3, [r4, #0]
 8009bca:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bcc:	d10a      	bne.n	8009be4 <_svfiprintf_r+0x130>
 8009bce:	7863      	ldrb	r3, [r4, #1]
 8009bd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bd2:	d132      	bne.n	8009c3a <_svfiprintf_r+0x186>
 8009bd4:	9b03      	ldr	r3, [sp, #12]
 8009bd6:	1d1a      	adds	r2, r3, #4
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	9203      	str	r2, [sp, #12]
 8009bdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009be0:	3402      	adds	r4, #2
 8009be2:	9305      	str	r3, [sp, #20]
 8009be4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009c9c <_svfiprintf_r+0x1e8>
 8009be8:	7821      	ldrb	r1, [r4, #0]
 8009bea:	2203      	movs	r2, #3
 8009bec:	4650      	mov	r0, sl
 8009bee:	f7f6 fac7 	bl	8000180 <memchr>
 8009bf2:	b138      	cbz	r0, 8009c04 <_svfiprintf_r+0x150>
 8009bf4:	9b04      	ldr	r3, [sp, #16]
 8009bf6:	eba0 000a 	sub.w	r0, r0, sl
 8009bfa:	2240      	movs	r2, #64	@ 0x40
 8009bfc:	4082      	lsls	r2, r0
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	3401      	adds	r4, #1
 8009c02:	9304      	str	r3, [sp, #16]
 8009c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c08:	4825      	ldr	r0, [pc, #148]	@ (8009ca0 <_svfiprintf_r+0x1ec>)
 8009c0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c0e:	2206      	movs	r2, #6
 8009c10:	f7f6 fab6 	bl	8000180 <memchr>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	d036      	beq.n	8009c86 <_svfiprintf_r+0x1d2>
 8009c18:	4b22      	ldr	r3, [pc, #136]	@ (8009ca4 <_svfiprintf_r+0x1f0>)
 8009c1a:	bb1b      	cbnz	r3, 8009c64 <_svfiprintf_r+0x1b0>
 8009c1c:	9b03      	ldr	r3, [sp, #12]
 8009c1e:	3307      	adds	r3, #7
 8009c20:	f023 0307 	bic.w	r3, r3, #7
 8009c24:	3308      	adds	r3, #8
 8009c26:	9303      	str	r3, [sp, #12]
 8009c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c2a:	4433      	add	r3, r6
 8009c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c2e:	e76a      	b.n	8009b06 <_svfiprintf_r+0x52>
 8009c30:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c34:	460c      	mov	r4, r1
 8009c36:	2001      	movs	r0, #1
 8009c38:	e7a8      	b.n	8009b8c <_svfiprintf_r+0xd8>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	3401      	adds	r4, #1
 8009c3e:	9305      	str	r3, [sp, #20]
 8009c40:	4619      	mov	r1, r3
 8009c42:	f04f 0c0a 	mov.w	ip, #10
 8009c46:	4620      	mov	r0, r4
 8009c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c4c:	3a30      	subs	r2, #48	@ 0x30
 8009c4e:	2a09      	cmp	r2, #9
 8009c50:	d903      	bls.n	8009c5a <_svfiprintf_r+0x1a6>
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d0c6      	beq.n	8009be4 <_svfiprintf_r+0x130>
 8009c56:	9105      	str	r1, [sp, #20]
 8009c58:	e7c4      	b.n	8009be4 <_svfiprintf_r+0x130>
 8009c5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c5e:	4604      	mov	r4, r0
 8009c60:	2301      	movs	r3, #1
 8009c62:	e7f0      	b.n	8009c46 <_svfiprintf_r+0x192>
 8009c64:	ab03      	add	r3, sp, #12
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	462a      	mov	r2, r5
 8009c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca8 <_svfiprintf_r+0x1f4>)
 8009c6c:	a904      	add	r1, sp, #16
 8009c6e:	4638      	mov	r0, r7
 8009c70:	f7fc fb9a 	bl	80063a8 <_printf_float>
 8009c74:	1c42      	adds	r2, r0, #1
 8009c76:	4606      	mov	r6, r0
 8009c78:	d1d6      	bne.n	8009c28 <_svfiprintf_r+0x174>
 8009c7a:	89ab      	ldrh	r3, [r5, #12]
 8009c7c:	065b      	lsls	r3, r3, #25
 8009c7e:	f53f af2d 	bmi.w	8009adc <_svfiprintf_r+0x28>
 8009c82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c84:	e72c      	b.n	8009ae0 <_svfiprintf_r+0x2c>
 8009c86:	ab03      	add	r3, sp, #12
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	462a      	mov	r2, r5
 8009c8c:	4b06      	ldr	r3, [pc, #24]	@ (8009ca8 <_svfiprintf_r+0x1f4>)
 8009c8e:	a904      	add	r1, sp, #16
 8009c90:	4638      	mov	r0, r7
 8009c92:	f7fc fe23 	bl	80068dc <_printf_i>
 8009c96:	e7ed      	b.n	8009c74 <_svfiprintf_r+0x1c0>
 8009c98:	0800b821 	.word	0x0800b821
 8009c9c:	0800b827 	.word	0x0800b827
 8009ca0:	0800b82b 	.word	0x0800b82b
 8009ca4:	080063a9 	.word	0x080063a9
 8009ca8:	080099fd 	.word	0x080099fd

08009cac <_sungetc_r>:
 8009cac:	b538      	push	{r3, r4, r5, lr}
 8009cae:	1c4b      	adds	r3, r1, #1
 8009cb0:	4614      	mov	r4, r2
 8009cb2:	d103      	bne.n	8009cbc <_sungetc_r+0x10>
 8009cb4:	f04f 35ff 	mov.w	r5, #4294967295
 8009cb8:	4628      	mov	r0, r5
 8009cba:	bd38      	pop	{r3, r4, r5, pc}
 8009cbc:	8993      	ldrh	r3, [r2, #12]
 8009cbe:	f023 0320 	bic.w	r3, r3, #32
 8009cc2:	8193      	strh	r3, [r2, #12]
 8009cc4:	6853      	ldr	r3, [r2, #4]
 8009cc6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009cc8:	b2cd      	uxtb	r5, r1
 8009cca:	b18a      	cbz	r2, 8009cf0 <_sungetc_r+0x44>
 8009ccc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	dd08      	ble.n	8009ce4 <_sungetc_r+0x38>
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	1e5a      	subs	r2, r3, #1
 8009cd6:	6022      	str	r2, [r4, #0]
 8009cd8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009cdc:	6863      	ldr	r3, [r4, #4]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	6063      	str	r3, [r4, #4]
 8009ce2:	e7e9      	b.n	8009cb8 <_sungetc_r+0xc>
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	f000 fd7e 	bl	800a7e6 <__submore>
 8009cea:	2800      	cmp	r0, #0
 8009cec:	d0f1      	beq.n	8009cd2 <_sungetc_r+0x26>
 8009cee:	e7e1      	b.n	8009cb4 <_sungetc_r+0x8>
 8009cf0:	6921      	ldr	r1, [r4, #16]
 8009cf2:	6822      	ldr	r2, [r4, #0]
 8009cf4:	b141      	cbz	r1, 8009d08 <_sungetc_r+0x5c>
 8009cf6:	4291      	cmp	r1, r2
 8009cf8:	d206      	bcs.n	8009d08 <_sungetc_r+0x5c>
 8009cfa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009cfe:	42a9      	cmp	r1, r5
 8009d00:	d102      	bne.n	8009d08 <_sungetc_r+0x5c>
 8009d02:	3a01      	subs	r2, #1
 8009d04:	6022      	str	r2, [r4, #0]
 8009d06:	e7ea      	b.n	8009cde <_sungetc_r+0x32>
 8009d08:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009d0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d10:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d12:	2303      	movs	r3, #3
 8009d14:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009d16:	4623      	mov	r3, r4
 8009d18:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e7de      	b.n	8009ce0 <_sungetc_r+0x34>

08009d22 <__ssrefill_r>:
 8009d22:	b510      	push	{r4, lr}
 8009d24:	460c      	mov	r4, r1
 8009d26:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009d28:	b169      	cbz	r1, 8009d46 <__ssrefill_r+0x24>
 8009d2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d2e:	4299      	cmp	r1, r3
 8009d30:	d001      	beq.n	8009d36 <__ssrefill_r+0x14>
 8009d32:	f7fe fa41 	bl	80081b8 <_free_r>
 8009d36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d38:	6063      	str	r3, [r4, #4]
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	6360      	str	r0, [r4, #52]	@ 0x34
 8009d3e:	b113      	cbz	r3, 8009d46 <__ssrefill_r+0x24>
 8009d40:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009d42:	6023      	str	r3, [r4, #0]
 8009d44:	bd10      	pop	{r4, pc}
 8009d46:	6923      	ldr	r3, [r4, #16]
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	6063      	str	r3, [r4, #4]
 8009d4e:	89a3      	ldrh	r3, [r4, #12]
 8009d50:	f043 0320 	orr.w	r3, r3, #32
 8009d54:	81a3      	strh	r3, [r4, #12]
 8009d56:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5a:	e7f3      	b.n	8009d44 <__ssrefill_r+0x22>

08009d5c <__ssvfiscanf_r>:
 8009d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d60:	460c      	mov	r4, r1
 8009d62:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009d66:	2100      	movs	r1, #0
 8009d68:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009d6c:	49a5      	ldr	r1, [pc, #660]	@ (800a004 <__ssvfiscanf_r+0x2a8>)
 8009d6e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009d70:	f10d 0804 	add.w	r8, sp, #4
 8009d74:	49a4      	ldr	r1, [pc, #656]	@ (800a008 <__ssvfiscanf_r+0x2ac>)
 8009d76:	4fa5      	ldr	r7, [pc, #660]	@ (800a00c <__ssvfiscanf_r+0x2b0>)
 8009d78:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	7813      	ldrb	r3, [r2, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 8158 	beq.w	800a03a <__ssvfiscanf_r+0x2de>
 8009d8a:	5cf9      	ldrb	r1, [r7, r3]
 8009d8c:	f011 0108 	ands.w	r1, r1, #8
 8009d90:	f102 0501 	add.w	r5, r2, #1
 8009d94:	d019      	beq.n	8009dca <__ssvfiscanf_r+0x6e>
 8009d96:	6863      	ldr	r3, [r4, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	dd0f      	ble.n	8009dbc <__ssvfiscanf_r+0x60>
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	781a      	ldrb	r2, [r3, #0]
 8009da0:	5cba      	ldrb	r2, [r7, r2]
 8009da2:	0712      	lsls	r2, r2, #28
 8009da4:	d401      	bmi.n	8009daa <__ssvfiscanf_r+0x4e>
 8009da6:	462a      	mov	r2, r5
 8009da8:	e7eb      	b.n	8009d82 <__ssvfiscanf_r+0x26>
 8009daa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009dac:	3201      	adds	r2, #1
 8009dae:	9245      	str	r2, [sp, #276]	@ 0x114
 8009db0:	6862      	ldr	r2, [r4, #4]
 8009db2:	3301      	adds	r3, #1
 8009db4:	3a01      	subs	r2, #1
 8009db6:	6062      	str	r2, [r4, #4]
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	e7ec      	b.n	8009d96 <__ssvfiscanf_r+0x3a>
 8009dbc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	4798      	blx	r3
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d0e9      	beq.n	8009d9c <__ssvfiscanf_r+0x40>
 8009dc8:	e7ed      	b.n	8009da6 <__ssvfiscanf_r+0x4a>
 8009dca:	2b25      	cmp	r3, #37	@ 0x25
 8009dcc:	d012      	beq.n	8009df4 <__ssvfiscanf_r+0x98>
 8009dce:	4699      	mov	r9, r3
 8009dd0:	6863      	ldr	r3, [r4, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f340 8093 	ble.w	8009efe <__ssvfiscanf_r+0x1a2>
 8009dd8:	6822      	ldr	r2, [r4, #0]
 8009dda:	7813      	ldrb	r3, [r2, #0]
 8009ddc:	454b      	cmp	r3, r9
 8009dde:	f040 812c 	bne.w	800a03a <__ssvfiscanf_r+0x2de>
 8009de2:	6863      	ldr	r3, [r4, #4]
 8009de4:	3b01      	subs	r3, #1
 8009de6:	6063      	str	r3, [r4, #4]
 8009de8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009dea:	3201      	adds	r2, #1
 8009dec:	3301      	adds	r3, #1
 8009dee:	6022      	str	r2, [r4, #0]
 8009df0:	9345      	str	r3, [sp, #276]	@ 0x114
 8009df2:	e7d8      	b.n	8009da6 <__ssvfiscanf_r+0x4a>
 8009df4:	9141      	str	r1, [sp, #260]	@ 0x104
 8009df6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009df8:	7853      	ldrb	r3, [r2, #1]
 8009dfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dfc:	bf02      	ittt	eq
 8009dfe:	2310      	moveq	r3, #16
 8009e00:	1c95      	addeq	r5, r2, #2
 8009e02:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009e04:	220a      	movs	r2, #10
 8009e06:	46a9      	mov	r9, r5
 8009e08:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009e0c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009e10:	2b09      	cmp	r3, #9
 8009e12:	d91e      	bls.n	8009e52 <__ssvfiscanf_r+0xf6>
 8009e14:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800a010 <__ssvfiscanf_r+0x2b4>
 8009e18:	2203      	movs	r2, #3
 8009e1a:	4650      	mov	r0, sl
 8009e1c:	f7f6 f9b0 	bl	8000180 <memchr>
 8009e20:	b138      	cbz	r0, 8009e32 <__ssvfiscanf_r+0xd6>
 8009e22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009e24:	eba0 000a 	sub.w	r0, r0, sl
 8009e28:	2301      	movs	r3, #1
 8009e2a:	4083      	lsls	r3, r0
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	9341      	str	r3, [sp, #260]	@ 0x104
 8009e30:	464d      	mov	r5, r9
 8009e32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e36:	2b78      	cmp	r3, #120	@ 0x78
 8009e38:	d806      	bhi.n	8009e48 <__ssvfiscanf_r+0xec>
 8009e3a:	2b57      	cmp	r3, #87	@ 0x57
 8009e3c:	d810      	bhi.n	8009e60 <__ssvfiscanf_r+0x104>
 8009e3e:	2b25      	cmp	r3, #37	@ 0x25
 8009e40:	d0c5      	beq.n	8009dce <__ssvfiscanf_r+0x72>
 8009e42:	d857      	bhi.n	8009ef4 <__ssvfiscanf_r+0x198>
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d065      	beq.n	8009f14 <__ssvfiscanf_r+0x1b8>
 8009e48:	2303      	movs	r3, #3
 8009e4a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009e4c:	230a      	movs	r3, #10
 8009e4e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009e50:	e078      	b.n	8009f44 <__ssvfiscanf_r+0x1e8>
 8009e52:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009e54:	fb02 1103 	mla	r1, r2, r3, r1
 8009e58:	3930      	subs	r1, #48	@ 0x30
 8009e5a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009e5c:	464d      	mov	r5, r9
 8009e5e:	e7d2      	b.n	8009e06 <__ssvfiscanf_r+0xaa>
 8009e60:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009e64:	2a20      	cmp	r2, #32
 8009e66:	d8ef      	bhi.n	8009e48 <__ssvfiscanf_r+0xec>
 8009e68:	a101      	add	r1, pc, #4	@ (adr r1, 8009e70 <__ssvfiscanf_r+0x114>)
 8009e6a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e6e:	bf00      	nop
 8009e70:	08009f23 	.word	0x08009f23
 8009e74:	08009e49 	.word	0x08009e49
 8009e78:	08009e49 	.word	0x08009e49
 8009e7c:	08009f7d 	.word	0x08009f7d
 8009e80:	08009e49 	.word	0x08009e49
 8009e84:	08009e49 	.word	0x08009e49
 8009e88:	08009e49 	.word	0x08009e49
 8009e8c:	08009e49 	.word	0x08009e49
 8009e90:	08009e49 	.word	0x08009e49
 8009e94:	08009e49 	.word	0x08009e49
 8009e98:	08009e49 	.word	0x08009e49
 8009e9c:	08009f93 	.word	0x08009f93
 8009ea0:	08009f79 	.word	0x08009f79
 8009ea4:	08009efb 	.word	0x08009efb
 8009ea8:	08009efb 	.word	0x08009efb
 8009eac:	08009efb 	.word	0x08009efb
 8009eb0:	08009e49 	.word	0x08009e49
 8009eb4:	08009f35 	.word	0x08009f35
 8009eb8:	08009e49 	.word	0x08009e49
 8009ebc:	08009e49 	.word	0x08009e49
 8009ec0:	08009e49 	.word	0x08009e49
 8009ec4:	08009e49 	.word	0x08009e49
 8009ec8:	08009fa3 	.word	0x08009fa3
 8009ecc:	08009f3d 	.word	0x08009f3d
 8009ed0:	08009f1b 	.word	0x08009f1b
 8009ed4:	08009e49 	.word	0x08009e49
 8009ed8:	08009e49 	.word	0x08009e49
 8009edc:	08009f9f 	.word	0x08009f9f
 8009ee0:	08009e49 	.word	0x08009e49
 8009ee4:	08009f79 	.word	0x08009f79
 8009ee8:	08009e49 	.word	0x08009e49
 8009eec:	08009e49 	.word	0x08009e49
 8009ef0:	08009f23 	.word	0x08009f23
 8009ef4:	3b45      	subs	r3, #69	@ 0x45
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d8a6      	bhi.n	8009e48 <__ssvfiscanf_r+0xec>
 8009efa:	2305      	movs	r3, #5
 8009efc:	e021      	b.n	8009f42 <__ssvfiscanf_r+0x1e6>
 8009efe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009f00:	4621      	mov	r1, r4
 8009f02:	4630      	mov	r0, r6
 8009f04:	4798      	blx	r3
 8009f06:	2800      	cmp	r0, #0
 8009f08:	f43f af66 	beq.w	8009dd8 <__ssvfiscanf_r+0x7c>
 8009f0c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	f040 808b 	bne.w	800a02a <__ssvfiscanf_r+0x2ce>
 8009f14:	f04f 30ff 	mov.w	r0, #4294967295
 8009f18:	e08b      	b.n	800a032 <__ssvfiscanf_r+0x2d6>
 8009f1a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009f1c:	f042 0220 	orr.w	r2, r2, #32
 8009f20:	9241      	str	r2, [sp, #260]	@ 0x104
 8009f22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f28:	9241      	str	r2, [sp, #260]	@ 0x104
 8009f2a:	2210      	movs	r2, #16
 8009f2c:	2b6e      	cmp	r3, #110	@ 0x6e
 8009f2e:	9242      	str	r2, [sp, #264]	@ 0x108
 8009f30:	d902      	bls.n	8009f38 <__ssvfiscanf_r+0x1dc>
 8009f32:	e005      	b.n	8009f40 <__ssvfiscanf_r+0x1e4>
 8009f34:	2300      	movs	r3, #0
 8009f36:	9342      	str	r3, [sp, #264]	@ 0x108
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e002      	b.n	8009f42 <__ssvfiscanf_r+0x1e6>
 8009f3c:	2308      	movs	r3, #8
 8009f3e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009f40:	2304      	movs	r3, #4
 8009f42:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009f44:	6863      	ldr	r3, [r4, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	dd39      	ble.n	8009fbe <__ssvfiscanf_r+0x262>
 8009f4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009f4c:	0659      	lsls	r1, r3, #25
 8009f4e:	d404      	bmi.n	8009f5a <__ssvfiscanf_r+0x1fe>
 8009f50:	6823      	ldr	r3, [r4, #0]
 8009f52:	781a      	ldrb	r2, [r3, #0]
 8009f54:	5cba      	ldrb	r2, [r7, r2]
 8009f56:	0712      	lsls	r2, r2, #28
 8009f58:	d438      	bmi.n	8009fcc <__ssvfiscanf_r+0x270>
 8009f5a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	dc47      	bgt.n	8009ff0 <__ssvfiscanf_r+0x294>
 8009f60:	466b      	mov	r3, sp
 8009f62:	4622      	mov	r2, r4
 8009f64:	a941      	add	r1, sp, #260	@ 0x104
 8009f66:	4630      	mov	r0, r6
 8009f68:	f000 f9ac 	bl	800a2c4 <_scanf_chars>
 8009f6c:	2801      	cmp	r0, #1
 8009f6e:	d064      	beq.n	800a03a <__ssvfiscanf_r+0x2de>
 8009f70:	2802      	cmp	r0, #2
 8009f72:	f47f af18 	bne.w	8009da6 <__ssvfiscanf_r+0x4a>
 8009f76:	e7c9      	b.n	8009f0c <__ssvfiscanf_r+0x1b0>
 8009f78:	220a      	movs	r2, #10
 8009f7a:	e7d7      	b.n	8009f2c <__ssvfiscanf_r+0x1d0>
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	4640      	mov	r0, r8
 8009f80:	f000 fbf8 	bl	800a774 <__sccl>
 8009f84:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f8a:	9341      	str	r3, [sp, #260]	@ 0x104
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e7d7      	b.n	8009f42 <__ssvfiscanf_r+0x1e6>
 8009f92:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f98:	9341      	str	r3, [sp, #260]	@ 0x104
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	e7d1      	b.n	8009f42 <__ssvfiscanf_r+0x1e6>
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	e7cf      	b.n	8009f42 <__ssvfiscanf_r+0x1e6>
 8009fa2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009fa4:	06c3      	lsls	r3, r0, #27
 8009fa6:	f53f aefe 	bmi.w	8009da6 <__ssvfiscanf_r+0x4a>
 8009faa:	9b00      	ldr	r3, [sp, #0]
 8009fac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009fae:	1d19      	adds	r1, r3, #4
 8009fb0:	9100      	str	r1, [sp, #0]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	07c0      	lsls	r0, r0, #31
 8009fb6:	bf4c      	ite	mi
 8009fb8:	801a      	strhmi	r2, [r3, #0]
 8009fba:	601a      	strpl	r2, [r3, #0]
 8009fbc:	e6f3      	b.n	8009da6 <__ssvfiscanf_r+0x4a>
 8009fbe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009fc0:	4621      	mov	r1, r4
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	4798      	blx	r3
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	d0bf      	beq.n	8009f4a <__ssvfiscanf_r+0x1ee>
 8009fca:	e79f      	b.n	8009f0c <__ssvfiscanf_r+0x1b0>
 8009fcc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009fce:	3201      	adds	r2, #1
 8009fd0:	9245      	str	r2, [sp, #276]	@ 0x114
 8009fd2:	6862      	ldr	r2, [r4, #4]
 8009fd4:	3a01      	subs	r2, #1
 8009fd6:	2a00      	cmp	r2, #0
 8009fd8:	6062      	str	r2, [r4, #4]
 8009fda:	dd02      	ble.n	8009fe2 <__ssvfiscanf_r+0x286>
 8009fdc:	3301      	adds	r3, #1
 8009fde:	6023      	str	r3, [r4, #0]
 8009fe0:	e7b6      	b.n	8009f50 <__ssvfiscanf_r+0x1f4>
 8009fe2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	4798      	blx	r3
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d0b0      	beq.n	8009f50 <__ssvfiscanf_r+0x1f4>
 8009fee:	e78d      	b.n	8009f0c <__ssvfiscanf_r+0x1b0>
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	dc0f      	bgt.n	800a014 <__ssvfiscanf_r+0x2b8>
 8009ff4:	466b      	mov	r3, sp
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	a941      	add	r1, sp, #260	@ 0x104
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f000 f9bc 	bl	800a378 <_scanf_i>
 800a000:	e7b4      	b.n	8009f6c <__ssvfiscanf_r+0x210>
 800a002:	bf00      	nop
 800a004:	08009cad 	.word	0x08009cad
 800a008:	08009d23 	.word	0x08009d23
 800a00c:	0800b721 	.word	0x0800b721
 800a010:	0800b827 	.word	0x0800b827
 800a014:	4b0a      	ldr	r3, [pc, #40]	@ (800a040 <__ssvfiscanf_r+0x2e4>)
 800a016:	2b00      	cmp	r3, #0
 800a018:	f43f aec5 	beq.w	8009da6 <__ssvfiscanf_r+0x4a>
 800a01c:	466b      	mov	r3, sp
 800a01e:	4622      	mov	r2, r4
 800a020:	a941      	add	r1, sp, #260	@ 0x104
 800a022:	4630      	mov	r0, r6
 800a024:	f7fc fd7a 	bl	8006b1c <_scanf_float>
 800a028:	e7a0      	b.n	8009f6c <__ssvfiscanf_r+0x210>
 800a02a:	89a3      	ldrh	r3, [r4, #12]
 800a02c:	065b      	lsls	r3, r3, #25
 800a02e:	f53f af71 	bmi.w	8009f14 <__ssvfiscanf_r+0x1b8>
 800a032:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a03a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a03c:	e7f9      	b.n	800a032 <__ssvfiscanf_r+0x2d6>
 800a03e:	bf00      	nop
 800a040:	08006b1d 	.word	0x08006b1d

0800a044 <__sfputc_r>:
 800a044:	6893      	ldr	r3, [r2, #8]
 800a046:	3b01      	subs	r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	b410      	push	{r4}
 800a04c:	6093      	str	r3, [r2, #8]
 800a04e:	da07      	bge.n	800a060 <__sfputc_r+0x1c>
 800a050:	6994      	ldr	r4, [r2, #24]
 800a052:	42a3      	cmp	r3, r4
 800a054:	db01      	blt.n	800a05a <__sfputc_r+0x16>
 800a056:	290a      	cmp	r1, #10
 800a058:	d102      	bne.n	800a060 <__sfputc_r+0x1c>
 800a05a:	bc10      	pop	{r4}
 800a05c:	f7fd b92d 	b.w	80072ba <__swbuf_r>
 800a060:	6813      	ldr	r3, [r2, #0]
 800a062:	1c58      	adds	r0, r3, #1
 800a064:	6010      	str	r0, [r2, #0]
 800a066:	7019      	strb	r1, [r3, #0]
 800a068:	4608      	mov	r0, r1
 800a06a:	bc10      	pop	{r4}
 800a06c:	4770      	bx	lr

0800a06e <__sfputs_r>:
 800a06e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a070:	4606      	mov	r6, r0
 800a072:	460f      	mov	r7, r1
 800a074:	4614      	mov	r4, r2
 800a076:	18d5      	adds	r5, r2, r3
 800a078:	42ac      	cmp	r4, r5
 800a07a:	d101      	bne.n	800a080 <__sfputs_r+0x12>
 800a07c:	2000      	movs	r0, #0
 800a07e:	e007      	b.n	800a090 <__sfputs_r+0x22>
 800a080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a084:	463a      	mov	r2, r7
 800a086:	4630      	mov	r0, r6
 800a088:	f7ff ffdc 	bl	800a044 <__sfputc_r>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d1f3      	bne.n	800a078 <__sfputs_r+0xa>
 800a090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a094 <_vfiprintf_r>:
 800a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	460d      	mov	r5, r1
 800a09a:	b09d      	sub	sp, #116	@ 0x74
 800a09c:	4614      	mov	r4, r2
 800a09e:	4698      	mov	r8, r3
 800a0a0:	4606      	mov	r6, r0
 800a0a2:	b118      	cbz	r0, 800a0ac <_vfiprintf_r+0x18>
 800a0a4:	6a03      	ldr	r3, [r0, #32]
 800a0a6:	b90b      	cbnz	r3, 800a0ac <_vfiprintf_r+0x18>
 800a0a8:	f7fc ffd2 	bl	8007050 <__sinit>
 800a0ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0ae:	07d9      	lsls	r1, r3, #31
 800a0b0:	d405      	bmi.n	800a0be <_vfiprintf_r+0x2a>
 800a0b2:	89ab      	ldrh	r3, [r5, #12]
 800a0b4:	059a      	lsls	r2, r3, #22
 800a0b6:	d402      	bmi.n	800a0be <_vfiprintf_r+0x2a>
 800a0b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0ba:	f7fd fa26 	bl	800750a <__retarget_lock_acquire_recursive>
 800a0be:	89ab      	ldrh	r3, [r5, #12]
 800a0c0:	071b      	lsls	r3, r3, #28
 800a0c2:	d501      	bpl.n	800a0c8 <_vfiprintf_r+0x34>
 800a0c4:	692b      	ldr	r3, [r5, #16]
 800a0c6:	b99b      	cbnz	r3, 800a0f0 <_vfiprintf_r+0x5c>
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f7fd f934 	bl	8007338 <__swsetup_r>
 800a0d0:	b170      	cbz	r0, 800a0f0 <_vfiprintf_r+0x5c>
 800a0d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0d4:	07dc      	lsls	r4, r3, #31
 800a0d6:	d504      	bpl.n	800a0e2 <_vfiprintf_r+0x4e>
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0dc:	b01d      	add	sp, #116	@ 0x74
 800a0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e2:	89ab      	ldrh	r3, [r5, #12]
 800a0e4:	0598      	lsls	r0, r3, #22
 800a0e6:	d4f7      	bmi.n	800a0d8 <_vfiprintf_r+0x44>
 800a0e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0ea:	f7fd fa0f 	bl	800750c <__retarget_lock_release_recursive>
 800a0ee:	e7f3      	b.n	800a0d8 <_vfiprintf_r+0x44>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0f4:	2320      	movs	r3, #32
 800a0f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a0fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0fe:	2330      	movs	r3, #48	@ 0x30
 800a100:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a2b0 <_vfiprintf_r+0x21c>
 800a104:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a108:	f04f 0901 	mov.w	r9, #1
 800a10c:	4623      	mov	r3, r4
 800a10e:	469a      	mov	sl, r3
 800a110:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a114:	b10a      	cbz	r2, 800a11a <_vfiprintf_r+0x86>
 800a116:	2a25      	cmp	r2, #37	@ 0x25
 800a118:	d1f9      	bne.n	800a10e <_vfiprintf_r+0x7a>
 800a11a:	ebba 0b04 	subs.w	fp, sl, r4
 800a11e:	d00b      	beq.n	800a138 <_vfiprintf_r+0xa4>
 800a120:	465b      	mov	r3, fp
 800a122:	4622      	mov	r2, r4
 800a124:	4629      	mov	r1, r5
 800a126:	4630      	mov	r0, r6
 800a128:	f7ff ffa1 	bl	800a06e <__sfputs_r>
 800a12c:	3001      	adds	r0, #1
 800a12e:	f000 80a7 	beq.w	800a280 <_vfiprintf_r+0x1ec>
 800a132:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a134:	445a      	add	r2, fp
 800a136:	9209      	str	r2, [sp, #36]	@ 0x24
 800a138:	f89a 3000 	ldrb.w	r3, [sl]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f000 809f 	beq.w	800a280 <_vfiprintf_r+0x1ec>
 800a142:	2300      	movs	r3, #0
 800a144:	f04f 32ff 	mov.w	r2, #4294967295
 800a148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a14c:	f10a 0a01 	add.w	sl, sl, #1
 800a150:	9304      	str	r3, [sp, #16]
 800a152:	9307      	str	r3, [sp, #28]
 800a154:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a158:	931a      	str	r3, [sp, #104]	@ 0x68
 800a15a:	4654      	mov	r4, sl
 800a15c:	2205      	movs	r2, #5
 800a15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a162:	4853      	ldr	r0, [pc, #332]	@ (800a2b0 <_vfiprintf_r+0x21c>)
 800a164:	f7f6 f80c 	bl	8000180 <memchr>
 800a168:	9a04      	ldr	r2, [sp, #16]
 800a16a:	b9d8      	cbnz	r0, 800a1a4 <_vfiprintf_r+0x110>
 800a16c:	06d1      	lsls	r1, r2, #27
 800a16e:	bf44      	itt	mi
 800a170:	2320      	movmi	r3, #32
 800a172:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a176:	0713      	lsls	r3, r2, #28
 800a178:	bf44      	itt	mi
 800a17a:	232b      	movmi	r3, #43	@ 0x2b
 800a17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a180:	f89a 3000 	ldrb.w	r3, [sl]
 800a184:	2b2a      	cmp	r3, #42	@ 0x2a
 800a186:	d015      	beq.n	800a1b4 <_vfiprintf_r+0x120>
 800a188:	9a07      	ldr	r2, [sp, #28]
 800a18a:	4654      	mov	r4, sl
 800a18c:	2000      	movs	r0, #0
 800a18e:	f04f 0c0a 	mov.w	ip, #10
 800a192:	4621      	mov	r1, r4
 800a194:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a198:	3b30      	subs	r3, #48	@ 0x30
 800a19a:	2b09      	cmp	r3, #9
 800a19c:	d94b      	bls.n	800a236 <_vfiprintf_r+0x1a2>
 800a19e:	b1b0      	cbz	r0, 800a1ce <_vfiprintf_r+0x13a>
 800a1a0:	9207      	str	r2, [sp, #28]
 800a1a2:	e014      	b.n	800a1ce <_vfiprintf_r+0x13a>
 800a1a4:	eba0 0308 	sub.w	r3, r0, r8
 800a1a8:	fa09 f303 	lsl.w	r3, r9, r3
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	9304      	str	r3, [sp, #16]
 800a1b0:	46a2      	mov	sl, r4
 800a1b2:	e7d2      	b.n	800a15a <_vfiprintf_r+0xc6>
 800a1b4:	9b03      	ldr	r3, [sp, #12]
 800a1b6:	1d19      	adds	r1, r3, #4
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	9103      	str	r1, [sp, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	bfbb      	ittet	lt
 800a1c0:	425b      	neglt	r3, r3
 800a1c2:	f042 0202 	orrlt.w	r2, r2, #2
 800a1c6:	9307      	strge	r3, [sp, #28]
 800a1c8:	9307      	strlt	r3, [sp, #28]
 800a1ca:	bfb8      	it	lt
 800a1cc:	9204      	strlt	r2, [sp, #16]
 800a1ce:	7823      	ldrb	r3, [r4, #0]
 800a1d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1d2:	d10a      	bne.n	800a1ea <_vfiprintf_r+0x156>
 800a1d4:	7863      	ldrb	r3, [r4, #1]
 800a1d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1d8:	d132      	bne.n	800a240 <_vfiprintf_r+0x1ac>
 800a1da:	9b03      	ldr	r3, [sp, #12]
 800a1dc:	1d1a      	adds	r2, r3, #4
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	9203      	str	r2, [sp, #12]
 800a1e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1e6:	3402      	adds	r4, #2
 800a1e8:	9305      	str	r3, [sp, #20]
 800a1ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a2b4 <_vfiprintf_r+0x220>
 800a1ee:	7821      	ldrb	r1, [r4, #0]
 800a1f0:	2203      	movs	r2, #3
 800a1f2:	4650      	mov	r0, sl
 800a1f4:	f7f5 ffc4 	bl	8000180 <memchr>
 800a1f8:	b138      	cbz	r0, 800a20a <_vfiprintf_r+0x176>
 800a1fa:	9b04      	ldr	r3, [sp, #16]
 800a1fc:	eba0 000a 	sub.w	r0, r0, sl
 800a200:	2240      	movs	r2, #64	@ 0x40
 800a202:	4082      	lsls	r2, r0
 800a204:	4313      	orrs	r3, r2
 800a206:	3401      	adds	r4, #1
 800a208:	9304      	str	r3, [sp, #16]
 800a20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a20e:	482a      	ldr	r0, [pc, #168]	@ (800a2b8 <_vfiprintf_r+0x224>)
 800a210:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a214:	2206      	movs	r2, #6
 800a216:	f7f5 ffb3 	bl	8000180 <memchr>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d03f      	beq.n	800a29e <_vfiprintf_r+0x20a>
 800a21e:	4b27      	ldr	r3, [pc, #156]	@ (800a2bc <_vfiprintf_r+0x228>)
 800a220:	bb1b      	cbnz	r3, 800a26a <_vfiprintf_r+0x1d6>
 800a222:	9b03      	ldr	r3, [sp, #12]
 800a224:	3307      	adds	r3, #7
 800a226:	f023 0307 	bic.w	r3, r3, #7
 800a22a:	3308      	adds	r3, #8
 800a22c:	9303      	str	r3, [sp, #12]
 800a22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a230:	443b      	add	r3, r7
 800a232:	9309      	str	r3, [sp, #36]	@ 0x24
 800a234:	e76a      	b.n	800a10c <_vfiprintf_r+0x78>
 800a236:	fb0c 3202 	mla	r2, ip, r2, r3
 800a23a:	460c      	mov	r4, r1
 800a23c:	2001      	movs	r0, #1
 800a23e:	e7a8      	b.n	800a192 <_vfiprintf_r+0xfe>
 800a240:	2300      	movs	r3, #0
 800a242:	3401      	adds	r4, #1
 800a244:	9305      	str	r3, [sp, #20]
 800a246:	4619      	mov	r1, r3
 800a248:	f04f 0c0a 	mov.w	ip, #10
 800a24c:	4620      	mov	r0, r4
 800a24e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a252:	3a30      	subs	r2, #48	@ 0x30
 800a254:	2a09      	cmp	r2, #9
 800a256:	d903      	bls.n	800a260 <_vfiprintf_r+0x1cc>
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d0c6      	beq.n	800a1ea <_vfiprintf_r+0x156>
 800a25c:	9105      	str	r1, [sp, #20]
 800a25e:	e7c4      	b.n	800a1ea <_vfiprintf_r+0x156>
 800a260:	fb0c 2101 	mla	r1, ip, r1, r2
 800a264:	4604      	mov	r4, r0
 800a266:	2301      	movs	r3, #1
 800a268:	e7f0      	b.n	800a24c <_vfiprintf_r+0x1b8>
 800a26a:	ab03      	add	r3, sp, #12
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	462a      	mov	r2, r5
 800a270:	4b13      	ldr	r3, [pc, #76]	@ (800a2c0 <_vfiprintf_r+0x22c>)
 800a272:	a904      	add	r1, sp, #16
 800a274:	4630      	mov	r0, r6
 800a276:	f7fc f897 	bl	80063a8 <_printf_float>
 800a27a:	4607      	mov	r7, r0
 800a27c:	1c78      	adds	r0, r7, #1
 800a27e:	d1d6      	bne.n	800a22e <_vfiprintf_r+0x19a>
 800a280:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a282:	07d9      	lsls	r1, r3, #31
 800a284:	d405      	bmi.n	800a292 <_vfiprintf_r+0x1fe>
 800a286:	89ab      	ldrh	r3, [r5, #12]
 800a288:	059a      	lsls	r2, r3, #22
 800a28a:	d402      	bmi.n	800a292 <_vfiprintf_r+0x1fe>
 800a28c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a28e:	f7fd f93d 	bl	800750c <__retarget_lock_release_recursive>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	065b      	lsls	r3, r3, #25
 800a296:	f53f af1f 	bmi.w	800a0d8 <_vfiprintf_r+0x44>
 800a29a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a29c:	e71e      	b.n	800a0dc <_vfiprintf_r+0x48>
 800a29e:	ab03      	add	r3, sp, #12
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	462a      	mov	r2, r5
 800a2a4:	4b06      	ldr	r3, [pc, #24]	@ (800a2c0 <_vfiprintf_r+0x22c>)
 800a2a6:	a904      	add	r1, sp, #16
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f7fc fb17 	bl	80068dc <_printf_i>
 800a2ae:	e7e4      	b.n	800a27a <_vfiprintf_r+0x1e6>
 800a2b0:	0800b821 	.word	0x0800b821
 800a2b4:	0800b827 	.word	0x0800b827
 800a2b8:	0800b82b 	.word	0x0800b82b
 800a2bc:	080063a9 	.word	0x080063a9
 800a2c0:	0800a06f 	.word	0x0800a06f

0800a2c4 <_scanf_chars>:
 800a2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c8:	4615      	mov	r5, r2
 800a2ca:	688a      	ldr	r2, [r1, #8]
 800a2cc:	4680      	mov	r8, r0
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	b932      	cbnz	r2, 800a2e0 <_scanf_chars+0x1c>
 800a2d2:	698a      	ldr	r2, [r1, #24]
 800a2d4:	2a00      	cmp	r2, #0
 800a2d6:	bf14      	ite	ne
 800a2d8:	f04f 32ff 	movne.w	r2, #4294967295
 800a2dc:	2201      	moveq	r2, #1
 800a2de:	608a      	str	r2, [r1, #8]
 800a2e0:	6822      	ldr	r2, [r4, #0]
 800a2e2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a374 <_scanf_chars+0xb0>
 800a2e6:	06d1      	lsls	r1, r2, #27
 800a2e8:	bf5f      	itttt	pl
 800a2ea:	681a      	ldrpl	r2, [r3, #0]
 800a2ec:	1d11      	addpl	r1, r2, #4
 800a2ee:	6019      	strpl	r1, [r3, #0]
 800a2f0:	6816      	ldrpl	r6, [r2, #0]
 800a2f2:	2700      	movs	r7, #0
 800a2f4:	69a0      	ldr	r0, [r4, #24]
 800a2f6:	b188      	cbz	r0, 800a31c <_scanf_chars+0x58>
 800a2f8:	2801      	cmp	r0, #1
 800a2fa:	d107      	bne.n	800a30c <_scanf_chars+0x48>
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	781a      	ldrb	r2, [r3, #0]
 800a300:	6963      	ldr	r3, [r4, #20]
 800a302:	5c9b      	ldrb	r3, [r3, r2]
 800a304:	b953      	cbnz	r3, 800a31c <_scanf_chars+0x58>
 800a306:	2f00      	cmp	r7, #0
 800a308:	d031      	beq.n	800a36e <_scanf_chars+0xaa>
 800a30a:	e022      	b.n	800a352 <_scanf_chars+0x8e>
 800a30c:	2802      	cmp	r0, #2
 800a30e:	d120      	bne.n	800a352 <_scanf_chars+0x8e>
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a318:	071b      	lsls	r3, r3, #28
 800a31a:	d41a      	bmi.n	800a352 <_scanf_chars+0x8e>
 800a31c:	6823      	ldr	r3, [r4, #0]
 800a31e:	06da      	lsls	r2, r3, #27
 800a320:	bf5e      	ittt	pl
 800a322:	682b      	ldrpl	r3, [r5, #0]
 800a324:	781b      	ldrbpl	r3, [r3, #0]
 800a326:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a32a:	682a      	ldr	r2, [r5, #0]
 800a32c:	686b      	ldr	r3, [r5, #4]
 800a32e:	3201      	adds	r2, #1
 800a330:	602a      	str	r2, [r5, #0]
 800a332:	68a2      	ldr	r2, [r4, #8]
 800a334:	3b01      	subs	r3, #1
 800a336:	3a01      	subs	r2, #1
 800a338:	606b      	str	r3, [r5, #4]
 800a33a:	3701      	adds	r7, #1
 800a33c:	60a2      	str	r2, [r4, #8]
 800a33e:	b142      	cbz	r2, 800a352 <_scanf_chars+0x8e>
 800a340:	2b00      	cmp	r3, #0
 800a342:	dcd7      	bgt.n	800a2f4 <_scanf_chars+0x30>
 800a344:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a348:	4629      	mov	r1, r5
 800a34a:	4640      	mov	r0, r8
 800a34c:	4798      	blx	r3
 800a34e:	2800      	cmp	r0, #0
 800a350:	d0d0      	beq.n	800a2f4 <_scanf_chars+0x30>
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	f013 0310 	ands.w	r3, r3, #16
 800a358:	d105      	bne.n	800a366 <_scanf_chars+0xa2>
 800a35a:	68e2      	ldr	r2, [r4, #12]
 800a35c:	3201      	adds	r2, #1
 800a35e:	60e2      	str	r2, [r4, #12]
 800a360:	69a2      	ldr	r2, [r4, #24]
 800a362:	b102      	cbz	r2, 800a366 <_scanf_chars+0xa2>
 800a364:	7033      	strb	r3, [r6, #0]
 800a366:	6923      	ldr	r3, [r4, #16]
 800a368:	443b      	add	r3, r7
 800a36a:	6123      	str	r3, [r4, #16]
 800a36c:	2000      	movs	r0, #0
 800a36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a372:	bf00      	nop
 800a374:	0800b721 	.word	0x0800b721

0800a378 <_scanf_i>:
 800a378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a37c:	4698      	mov	r8, r3
 800a37e:	4b74      	ldr	r3, [pc, #464]	@ (800a550 <_scanf_i+0x1d8>)
 800a380:	460c      	mov	r4, r1
 800a382:	4682      	mov	sl, r0
 800a384:	4616      	mov	r6, r2
 800a386:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a38a:	b087      	sub	sp, #28
 800a38c:	ab03      	add	r3, sp, #12
 800a38e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a392:	4b70      	ldr	r3, [pc, #448]	@ (800a554 <_scanf_i+0x1dc>)
 800a394:	69a1      	ldr	r1, [r4, #24]
 800a396:	4a70      	ldr	r2, [pc, #448]	@ (800a558 <_scanf_i+0x1e0>)
 800a398:	2903      	cmp	r1, #3
 800a39a:	bf08      	it	eq
 800a39c:	461a      	moveq	r2, r3
 800a39e:	68a3      	ldr	r3, [r4, #8]
 800a3a0:	9201      	str	r2, [sp, #4]
 800a3a2:	1e5a      	subs	r2, r3, #1
 800a3a4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a3a8:	bf88      	it	hi
 800a3aa:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a3ae:	4627      	mov	r7, r4
 800a3b0:	bf82      	ittt	hi
 800a3b2:	eb03 0905 	addhi.w	r9, r3, r5
 800a3b6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a3ba:	60a3      	strhi	r3, [r4, #8]
 800a3bc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a3c0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a3c4:	bf98      	it	ls
 800a3c6:	f04f 0900 	movls.w	r9, #0
 800a3ca:	6023      	str	r3, [r4, #0]
 800a3cc:	463d      	mov	r5, r7
 800a3ce:	f04f 0b00 	mov.w	fp, #0
 800a3d2:	6831      	ldr	r1, [r6, #0]
 800a3d4:	ab03      	add	r3, sp, #12
 800a3d6:	7809      	ldrb	r1, [r1, #0]
 800a3d8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a3dc:	2202      	movs	r2, #2
 800a3de:	f7f5 fecf 	bl	8000180 <memchr>
 800a3e2:	b328      	cbz	r0, 800a430 <_scanf_i+0xb8>
 800a3e4:	f1bb 0f01 	cmp.w	fp, #1
 800a3e8:	d159      	bne.n	800a49e <_scanf_i+0x126>
 800a3ea:	6862      	ldr	r2, [r4, #4]
 800a3ec:	b92a      	cbnz	r2, 800a3fa <_scanf_i+0x82>
 800a3ee:	6822      	ldr	r2, [r4, #0]
 800a3f0:	2108      	movs	r1, #8
 800a3f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a3f6:	6061      	str	r1, [r4, #4]
 800a3f8:	6022      	str	r2, [r4, #0]
 800a3fa:	6822      	ldr	r2, [r4, #0]
 800a3fc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a400:	6022      	str	r2, [r4, #0]
 800a402:	68a2      	ldr	r2, [r4, #8]
 800a404:	1e51      	subs	r1, r2, #1
 800a406:	60a1      	str	r1, [r4, #8]
 800a408:	b192      	cbz	r2, 800a430 <_scanf_i+0xb8>
 800a40a:	6832      	ldr	r2, [r6, #0]
 800a40c:	1c51      	adds	r1, r2, #1
 800a40e:	6031      	str	r1, [r6, #0]
 800a410:	7812      	ldrb	r2, [r2, #0]
 800a412:	f805 2b01 	strb.w	r2, [r5], #1
 800a416:	6872      	ldr	r2, [r6, #4]
 800a418:	3a01      	subs	r2, #1
 800a41a:	2a00      	cmp	r2, #0
 800a41c:	6072      	str	r2, [r6, #4]
 800a41e:	dc07      	bgt.n	800a430 <_scanf_i+0xb8>
 800a420:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a424:	4631      	mov	r1, r6
 800a426:	4650      	mov	r0, sl
 800a428:	4790      	blx	r2
 800a42a:	2800      	cmp	r0, #0
 800a42c:	f040 8085 	bne.w	800a53a <_scanf_i+0x1c2>
 800a430:	f10b 0b01 	add.w	fp, fp, #1
 800a434:	f1bb 0f03 	cmp.w	fp, #3
 800a438:	d1cb      	bne.n	800a3d2 <_scanf_i+0x5a>
 800a43a:	6863      	ldr	r3, [r4, #4]
 800a43c:	b90b      	cbnz	r3, 800a442 <_scanf_i+0xca>
 800a43e:	230a      	movs	r3, #10
 800a440:	6063      	str	r3, [r4, #4]
 800a442:	6863      	ldr	r3, [r4, #4]
 800a444:	4945      	ldr	r1, [pc, #276]	@ (800a55c <_scanf_i+0x1e4>)
 800a446:	6960      	ldr	r0, [r4, #20]
 800a448:	1ac9      	subs	r1, r1, r3
 800a44a:	f000 f993 	bl	800a774 <__sccl>
 800a44e:	f04f 0b00 	mov.w	fp, #0
 800a452:	68a3      	ldr	r3, [r4, #8]
 800a454:	6822      	ldr	r2, [r4, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d03d      	beq.n	800a4d6 <_scanf_i+0x15e>
 800a45a:	6831      	ldr	r1, [r6, #0]
 800a45c:	6960      	ldr	r0, [r4, #20]
 800a45e:	f891 c000 	ldrb.w	ip, [r1]
 800a462:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a466:	2800      	cmp	r0, #0
 800a468:	d035      	beq.n	800a4d6 <_scanf_i+0x15e>
 800a46a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a46e:	d124      	bne.n	800a4ba <_scanf_i+0x142>
 800a470:	0510      	lsls	r0, r2, #20
 800a472:	d522      	bpl.n	800a4ba <_scanf_i+0x142>
 800a474:	f10b 0b01 	add.w	fp, fp, #1
 800a478:	f1b9 0f00 	cmp.w	r9, #0
 800a47c:	d003      	beq.n	800a486 <_scanf_i+0x10e>
 800a47e:	3301      	adds	r3, #1
 800a480:	f109 39ff 	add.w	r9, r9, #4294967295
 800a484:	60a3      	str	r3, [r4, #8]
 800a486:	6873      	ldr	r3, [r6, #4]
 800a488:	3b01      	subs	r3, #1
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	6073      	str	r3, [r6, #4]
 800a48e:	dd1b      	ble.n	800a4c8 <_scanf_i+0x150>
 800a490:	6833      	ldr	r3, [r6, #0]
 800a492:	3301      	adds	r3, #1
 800a494:	6033      	str	r3, [r6, #0]
 800a496:	68a3      	ldr	r3, [r4, #8]
 800a498:	3b01      	subs	r3, #1
 800a49a:	60a3      	str	r3, [r4, #8]
 800a49c:	e7d9      	b.n	800a452 <_scanf_i+0xda>
 800a49e:	f1bb 0f02 	cmp.w	fp, #2
 800a4a2:	d1ae      	bne.n	800a402 <_scanf_i+0x8a>
 800a4a4:	6822      	ldr	r2, [r4, #0]
 800a4a6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a4aa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a4ae:	d1bf      	bne.n	800a430 <_scanf_i+0xb8>
 800a4b0:	2110      	movs	r1, #16
 800a4b2:	6061      	str	r1, [r4, #4]
 800a4b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a4b8:	e7a2      	b.n	800a400 <_scanf_i+0x88>
 800a4ba:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a4be:	6022      	str	r2, [r4, #0]
 800a4c0:	780b      	ldrb	r3, [r1, #0]
 800a4c2:	f805 3b01 	strb.w	r3, [r5], #1
 800a4c6:	e7de      	b.n	800a486 <_scanf_i+0x10e>
 800a4c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4650      	mov	r0, sl
 800a4d0:	4798      	blx	r3
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d0df      	beq.n	800a496 <_scanf_i+0x11e>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	05d9      	lsls	r1, r3, #23
 800a4da:	d50d      	bpl.n	800a4f8 <_scanf_i+0x180>
 800a4dc:	42bd      	cmp	r5, r7
 800a4de:	d909      	bls.n	800a4f4 <_scanf_i+0x17c>
 800a4e0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a4e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	4650      	mov	r0, sl
 800a4ec:	4798      	blx	r3
 800a4ee:	f105 39ff 	add.w	r9, r5, #4294967295
 800a4f2:	464d      	mov	r5, r9
 800a4f4:	42bd      	cmp	r5, r7
 800a4f6:	d028      	beq.n	800a54a <_scanf_i+0x1d2>
 800a4f8:	6822      	ldr	r2, [r4, #0]
 800a4fa:	f012 0210 	ands.w	r2, r2, #16
 800a4fe:	d113      	bne.n	800a528 <_scanf_i+0x1b0>
 800a500:	702a      	strb	r2, [r5, #0]
 800a502:	6863      	ldr	r3, [r4, #4]
 800a504:	9e01      	ldr	r6, [sp, #4]
 800a506:	4639      	mov	r1, r7
 800a508:	4650      	mov	r0, sl
 800a50a:	47b0      	blx	r6
 800a50c:	f8d8 3000 	ldr.w	r3, [r8]
 800a510:	6821      	ldr	r1, [r4, #0]
 800a512:	1d1a      	adds	r2, r3, #4
 800a514:	f8c8 2000 	str.w	r2, [r8]
 800a518:	f011 0f20 	tst.w	r1, #32
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	d00f      	beq.n	800a540 <_scanf_i+0x1c8>
 800a520:	6018      	str	r0, [r3, #0]
 800a522:	68e3      	ldr	r3, [r4, #12]
 800a524:	3301      	adds	r3, #1
 800a526:	60e3      	str	r3, [r4, #12]
 800a528:	6923      	ldr	r3, [r4, #16]
 800a52a:	1bed      	subs	r5, r5, r7
 800a52c:	445d      	add	r5, fp
 800a52e:	442b      	add	r3, r5
 800a530:	6123      	str	r3, [r4, #16]
 800a532:	2000      	movs	r0, #0
 800a534:	b007      	add	sp, #28
 800a536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53a:	f04f 0b00 	mov.w	fp, #0
 800a53e:	e7ca      	b.n	800a4d6 <_scanf_i+0x15e>
 800a540:	07ca      	lsls	r2, r1, #31
 800a542:	bf4c      	ite	mi
 800a544:	8018      	strhmi	r0, [r3, #0]
 800a546:	6018      	strpl	r0, [r3, #0]
 800a548:	e7eb      	b.n	800a522 <_scanf_i+0x1aa>
 800a54a:	2001      	movs	r0, #1
 800a54c:	e7f2      	b.n	800a534 <_scanf_i+0x1bc>
 800a54e:	bf00      	nop
 800a550:	0800b3d4 	.word	0x0800b3d4
 800a554:	080099f9 	.word	0x080099f9
 800a558:	0800b175 	.word	0x0800b175
 800a55c:	0800b842 	.word	0x0800b842

0800a560 <__sflush_r>:
 800a560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a566:	0716      	lsls	r6, r2, #28
 800a568:	4605      	mov	r5, r0
 800a56a:	460c      	mov	r4, r1
 800a56c:	d454      	bmi.n	800a618 <__sflush_r+0xb8>
 800a56e:	684b      	ldr	r3, [r1, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	dc02      	bgt.n	800a57a <__sflush_r+0x1a>
 800a574:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a576:	2b00      	cmp	r3, #0
 800a578:	dd48      	ble.n	800a60c <__sflush_r+0xac>
 800a57a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a57c:	2e00      	cmp	r6, #0
 800a57e:	d045      	beq.n	800a60c <__sflush_r+0xac>
 800a580:	2300      	movs	r3, #0
 800a582:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a586:	682f      	ldr	r7, [r5, #0]
 800a588:	6a21      	ldr	r1, [r4, #32]
 800a58a:	602b      	str	r3, [r5, #0]
 800a58c:	d030      	beq.n	800a5f0 <__sflush_r+0x90>
 800a58e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	0759      	lsls	r1, r3, #29
 800a594:	d505      	bpl.n	800a5a2 <__sflush_r+0x42>
 800a596:	6863      	ldr	r3, [r4, #4]
 800a598:	1ad2      	subs	r2, r2, r3
 800a59a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a59c:	b10b      	cbz	r3, 800a5a2 <__sflush_r+0x42>
 800a59e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a5a0:	1ad2      	subs	r2, r2, r3
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5a6:	6a21      	ldr	r1, [r4, #32]
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	47b0      	blx	r6
 800a5ac:	1c43      	adds	r3, r0, #1
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	d106      	bne.n	800a5c0 <__sflush_r+0x60>
 800a5b2:	6829      	ldr	r1, [r5, #0]
 800a5b4:	291d      	cmp	r1, #29
 800a5b6:	d82b      	bhi.n	800a610 <__sflush_r+0xb0>
 800a5b8:	4a28      	ldr	r2, [pc, #160]	@ (800a65c <__sflush_r+0xfc>)
 800a5ba:	410a      	asrs	r2, r1
 800a5bc:	07d6      	lsls	r6, r2, #31
 800a5be:	d427      	bmi.n	800a610 <__sflush_r+0xb0>
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	6062      	str	r2, [r4, #4]
 800a5c4:	04d9      	lsls	r1, r3, #19
 800a5c6:	6922      	ldr	r2, [r4, #16]
 800a5c8:	6022      	str	r2, [r4, #0]
 800a5ca:	d504      	bpl.n	800a5d6 <__sflush_r+0x76>
 800a5cc:	1c42      	adds	r2, r0, #1
 800a5ce:	d101      	bne.n	800a5d4 <__sflush_r+0x74>
 800a5d0:	682b      	ldr	r3, [r5, #0]
 800a5d2:	b903      	cbnz	r3, 800a5d6 <__sflush_r+0x76>
 800a5d4:	6560      	str	r0, [r4, #84]	@ 0x54
 800a5d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5d8:	602f      	str	r7, [r5, #0]
 800a5da:	b1b9      	cbz	r1, 800a60c <__sflush_r+0xac>
 800a5dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5e0:	4299      	cmp	r1, r3
 800a5e2:	d002      	beq.n	800a5ea <__sflush_r+0x8a>
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	f7fd fde7 	bl	80081b8 <_free_r>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5ee:	e00d      	b.n	800a60c <__sflush_r+0xac>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	47b0      	blx	r6
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	1c50      	adds	r0, r2, #1
 800a5fa:	d1c9      	bne.n	800a590 <__sflush_r+0x30>
 800a5fc:	682b      	ldr	r3, [r5, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d0c6      	beq.n	800a590 <__sflush_r+0x30>
 800a602:	2b1d      	cmp	r3, #29
 800a604:	d001      	beq.n	800a60a <__sflush_r+0xaa>
 800a606:	2b16      	cmp	r3, #22
 800a608:	d11d      	bne.n	800a646 <__sflush_r+0xe6>
 800a60a:	602f      	str	r7, [r5, #0]
 800a60c:	2000      	movs	r0, #0
 800a60e:	e021      	b.n	800a654 <__sflush_r+0xf4>
 800a610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a614:	b21b      	sxth	r3, r3
 800a616:	e01a      	b.n	800a64e <__sflush_r+0xee>
 800a618:	690f      	ldr	r7, [r1, #16]
 800a61a:	2f00      	cmp	r7, #0
 800a61c:	d0f6      	beq.n	800a60c <__sflush_r+0xac>
 800a61e:	0793      	lsls	r3, r2, #30
 800a620:	680e      	ldr	r6, [r1, #0]
 800a622:	bf08      	it	eq
 800a624:	694b      	ldreq	r3, [r1, #20]
 800a626:	600f      	str	r7, [r1, #0]
 800a628:	bf18      	it	ne
 800a62a:	2300      	movne	r3, #0
 800a62c:	1bf6      	subs	r6, r6, r7
 800a62e:	608b      	str	r3, [r1, #8]
 800a630:	2e00      	cmp	r6, #0
 800a632:	ddeb      	ble.n	800a60c <__sflush_r+0xac>
 800a634:	6a21      	ldr	r1, [r4, #32]
 800a636:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a63a:	4633      	mov	r3, r6
 800a63c:	463a      	mov	r2, r7
 800a63e:	4628      	mov	r0, r5
 800a640:	47e0      	blx	ip
 800a642:	2800      	cmp	r0, #0
 800a644:	dc07      	bgt.n	800a656 <__sflush_r+0xf6>
 800a646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a64a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a64e:	81a3      	strh	r3, [r4, #12]
 800a650:	f04f 30ff 	mov.w	r0, #4294967295
 800a654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a656:	4407      	add	r7, r0
 800a658:	1a36      	subs	r6, r6, r0
 800a65a:	e7e9      	b.n	800a630 <__sflush_r+0xd0>
 800a65c:	dfbffffe 	.word	0xdfbffffe

0800a660 <_fflush_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	690b      	ldr	r3, [r1, #16]
 800a664:	4605      	mov	r5, r0
 800a666:	460c      	mov	r4, r1
 800a668:	b913      	cbnz	r3, 800a670 <_fflush_r+0x10>
 800a66a:	2500      	movs	r5, #0
 800a66c:	4628      	mov	r0, r5
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
 800a670:	b118      	cbz	r0, 800a67a <_fflush_r+0x1a>
 800a672:	6a03      	ldr	r3, [r0, #32]
 800a674:	b90b      	cbnz	r3, 800a67a <_fflush_r+0x1a>
 800a676:	f7fc fceb 	bl	8007050 <__sinit>
 800a67a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d0f3      	beq.n	800a66a <_fflush_r+0xa>
 800a682:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a684:	07d0      	lsls	r0, r2, #31
 800a686:	d404      	bmi.n	800a692 <_fflush_r+0x32>
 800a688:	0599      	lsls	r1, r3, #22
 800a68a:	d402      	bmi.n	800a692 <_fflush_r+0x32>
 800a68c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a68e:	f7fc ff3c 	bl	800750a <__retarget_lock_acquire_recursive>
 800a692:	4628      	mov	r0, r5
 800a694:	4621      	mov	r1, r4
 800a696:	f7ff ff63 	bl	800a560 <__sflush_r>
 800a69a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a69c:	07da      	lsls	r2, r3, #31
 800a69e:	4605      	mov	r5, r0
 800a6a0:	d4e4      	bmi.n	800a66c <_fflush_r+0xc>
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	059b      	lsls	r3, r3, #22
 800a6a6:	d4e1      	bmi.n	800a66c <_fflush_r+0xc>
 800a6a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6aa:	f7fc ff2f 	bl	800750c <__retarget_lock_release_recursive>
 800a6ae:	e7dd      	b.n	800a66c <_fflush_r+0xc>

0800a6b0 <__swhatbuf_r>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b8:	2900      	cmp	r1, #0
 800a6ba:	b096      	sub	sp, #88	@ 0x58
 800a6bc:	4615      	mov	r5, r2
 800a6be:	461e      	mov	r6, r3
 800a6c0:	da0d      	bge.n	800a6de <__swhatbuf_r+0x2e>
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a6c8:	f04f 0100 	mov.w	r1, #0
 800a6cc:	bf14      	ite	ne
 800a6ce:	2340      	movne	r3, #64	@ 0x40
 800a6d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	6031      	str	r1, [r6, #0]
 800a6d8:	602b      	str	r3, [r5, #0]
 800a6da:	b016      	add	sp, #88	@ 0x58
 800a6dc:	bd70      	pop	{r4, r5, r6, pc}
 800a6de:	466a      	mov	r2, sp
 800a6e0:	f000 f8e8 	bl	800a8b4 <_fstat_r>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	dbec      	blt.n	800a6c2 <__swhatbuf_r+0x12>
 800a6e8:	9901      	ldr	r1, [sp, #4]
 800a6ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a6ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a6f2:	4259      	negs	r1, r3
 800a6f4:	4159      	adcs	r1, r3
 800a6f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6fa:	e7eb      	b.n	800a6d4 <__swhatbuf_r+0x24>

0800a6fc <__smakebuf_r>:
 800a6fc:	898b      	ldrh	r3, [r1, #12]
 800a6fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a700:	079d      	lsls	r5, r3, #30
 800a702:	4606      	mov	r6, r0
 800a704:	460c      	mov	r4, r1
 800a706:	d507      	bpl.n	800a718 <__smakebuf_r+0x1c>
 800a708:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a70c:	6023      	str	r3, [r4, #0]
 800a70e:	6123      	str	r3, [r4, #16]
 800a710:	2301      	movs	r3, #1
 800a712:	6163      	str	r3, [r4, #20]
 800a714:	b003      	add	sp, #12
 800a716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a718:	ab01      	add	r3, sp, #4
 800a71a:	466a      	mov	r2, sp
 800a71c:	f7ff ffc8 	bl	800a6b0 <__swhatbuf_r>
 800a720:	9f00      	ldr	r7, [sp, #0]
 800a722:	4605      	mov	r5, r0
 800a724:	4639      	mov	r1, r7
 800a726:	4630      	mov	r0, r6
 800a728:	f7fd fdba 	bl	80082a0 <_malloc_r>
 800a72c:	b948      	cbnz	r0, 800a742 <__smakebuf_r+0x46>
 800a72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a732:	059a      	lsls	r2, r3, #22
 800a734:	d4ee      	bmi.n	800a714 <__smakebuf_r+0x18>
 800a736:	f023 0303 	bic.w	r3, r3, #3
 800a73a:	f043 0302 	orr.w	r3, r3, #2
 800a73e:	81a3      	strh	r3, [r4, #12]
 800a740:	e7e2      	b.n	800a708 <__smakebuf_r+0xc>
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	6020      	str	r0, [r4, #0]
 800a746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a74a:	81a3      	strh	r3, [r4, #12]
 800a74c:	9b01      	ldr	r3, [sp, #4]
 800a74e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a752:	b15b      	cbz	r3, 800a76c <__smakebuf_r+0x70>
 800a754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a758:	4630      	mov	r0, r6
 800a75a:	f000 f8bd 	bl	800a8d8 <_isatty_r>
 800a75e:	b128      	cbz	r0, 800a76c <__smakebuf_r+0x70>
 800a760:	89a3      	ldrh	r3, [r4, #12]
 800a762:	f023 0303 	bic.w	r3, r3, #3
 800a766:	f043 0301 	orr.w	r3, r3, #1
 800a76a:	81a3      	strh	r3, [r4, #12]
 800a76c:	89a3      	ldrh	r3, [r4, #12]
 800a76e:	431d      	orrs	r5, r3
 800a770:	81a5      	strh	r5, [r4, #12]
 800a772:	e7cf      	b.n	800a714 <__smakebuf_r+0x18>

0800a774 <__sccl>:
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	780b      	ldrb	r3, [r1, #0]
 800a778:	4604      	mov	r4, r0
 800a77a:	2b5e      	cmp	r3, #94	@ 0x5e
 800a77c:	bf0b      	itete	eq
 800a77e:	784b      	ldrbeq	r3, [r1, #1]
 800a780:	1c4a      	addne	r2, r1, #1
 800a782:	1c8a      	addeq	r2, r1, #2
 800a784:	2100      	movne	r1, #0
 800a786:	bf08      	it	eq
 800a788:	2101      	moveq	r1, #1
 800a78a:	3801      	subs	r0, #1
 800a78c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a790:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a794:	42a8      	cmp	r0, r5
 800a796:	d1fb      	bne.n	800a790 <__sccl+0x1c>
 800a798:	b90b      	cbnz	r3, 800a79e <__sccl+0x2a>
 800a79a:	1e50      	subs	r0, r2, #1
 800a79c:	bd70      	pop	{r4, r5, r6, pc}
 800a79e:	f081 0101 	eor.w	r1, r1, #1
 800a7a2:	54e1      	strb	r1, [r4, r3]
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a7ac:	2d2d      	cmp	r5, #45	@ 0x2d
 800a7ae:	d005      	beq.n	800a7bc <__sccl+0x48>
 800a7b0:	2d5d      	cmp	r5, #93	@ 0x5d
 800a7b2:	d016      	beq.n	800a7e2 <__sccl+0x6e>
 800a7b4:	2d00      	cmp	r5, #0
 800a7b6:	d0f1      	beq.n	800a79c <__sccl+0x28>
 800a7b8:	462b      	mov	r3, r5
 800a7ba:	e7f2      	b.n	800a7a2 <__sccl+0x2e>
 800a7bc:	7846      	ldrb	r6, [r0, #1]
 800a7be:	2e5d      	cmp	r6, #93	@ 0x5d
 800a7c0:	d0fa      	beq.n	800a7b8 <__sccl+0x44>
 800a7c2:	42b3      	cmp	r3, r6
 800a7c4:	dcf8      	bgt.n	800a7b8 <__sccl+0x44>
 800a7c6:	3002      	adds	r0, #2
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	3201      	adds	r2, #1
 800a7cc:	4296      	cmp	r6, r2
 800a7ce:	54a1      	strb	r1, [r4, r2]
 800a7d0:	dcfb      	bgt.n	800a7ca <__sccl+0x56>
 800a7d2:	1af2      	subs	r2, r6, r3
 800a7d4:	3a01      	subs	r2, #1
 800a7d6:	1c5d      	adds	r5, r3, #1
 800a7d8:	42b3      	cmp	r3, r6
 800a7da:	bfa8      	it	ge
 800a7dc:	2200      	movge	r2, #0
 800a7de:	18ab      	adds	r3, r5, r2
 800a7e0:	e7e1      	b.n	800a7a6 <__sccl+0x32>
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	e7da      	b.n	800a79c <__sccl+0x28>

0800a7e6 <__submore>:
 800a7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a7ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7f2:	4299      	cmp	r1, r3
 800a7f4:	d11d      	bne.n	800a832 <__submore+0x4c>
 800a7f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a7fa:	f7fd fd51 	bl	80082a0 <_malloc_r>
 800a7fe:	b918      	cbnz	r0, 800a808 <__submore+0x22>
 800a800:	f04f 30ff 	mov.w	r0, #4294967295
 800a804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a80c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a80e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a812:	6360      	str	r0, [r4, #52]	@ 0x34
 800a814:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a818:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a81c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a820:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a824:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a828:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a82c:	6020      	str	r0, [r4, #0]
 800a82e:	2000      	movs	r0, #0
 800a830:	e7e8      	b.n	800a804 <__submore+0x1e>
 800a832:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a834:	0077      	lsls	r7, r6, #1
 800a836:	463a      	mov	r2, r7
 800a838:	f000 fbff 	bl	800b03a <_realloc_r>
 800a83c:	4605      	mov	r5, r0
 800a83e:	2800      	cmp	r0, #0
 800a840:	d0de      	beq.n	800a800 <__submore+0x1a>
 800a842:	eb00 0806 	add.w	r8, r0, r6
 800a846:	4601      	mov	r1, r0
 800a848:	4632      	mov	r2, r6
 800a84a:	4640      	mov	r0, r8
 800a84c:	f000 f864 	bl	800a918 <memcpy>
 800a850:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a854:	f8c4 8000 	str.w	r8, [r4]
 800a858:	e7e9      	b.n	800a82e <__submore+0x48>

0800a85a <memmove>:
 800a85a:	4288      	cmp	r0, r1
 800a85c:	b510      	push	{r4, lr}
 800a85e:	eb01 0402 	add.w	r4, r1, r2
 800a862:	d902      	bls.n	800a86a <memmove+0x10>
 800a864:	4284      	cmp	r4, r0
 800a866:	4623      	mov	r3, r4
 800a868:	d807      	bhi.n	800a87a <memmove+0x20>
 800a86a:	1e43      	subs	r3, r0, #1
 800a86c:	42a1      	cmp	r1, r4
 800a86e:	d008      	beq.n	800a882 <memmove+0x28>
 800a870:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a874:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a878:	e7f8      	b.n	800a86c <memmove+0x12>
 800a87a:	4402      	add	r2, r0
 800a87c:	4601      	mov	r1, r0
 800a87e:	428a      	cmp	r2, r1
 800a880:	d100      	bne.n	800a884 <memmove+0x2a>
 800a882:	bd10      	pop	{r4, pc}
 800a884:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a888:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a88c:	e7f7      	b.n	800a87e <memmove+0x24>

0800a88e <strncmp>:
 800a88e:	b510      	push	{r4, lr}
 800a890:	b16a      	cbz	r2, 800a8ae <strncmp+0x20>
 800a892:	3901      	subs	r1, #1
 800a894:	1884      	adds	r4, r0, r2
 800a896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a89a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d103      	bne.n	800a8aa <strncmp+0x1c>
 800a8a2:	42a0      	cmp	r0, r4
 800a8a4:	d001      	beq.n	800a8aa <strncmp+0x1c>
 800a8a6:	2a00      	cmp	r2, #0
 800a8a8:	d1f5      	bne.n	800a896 <strncmp+0x8>
 800a8aa:	1ad0      	subs	r0, r2, r3
 800a8ac:	bd10      	pop	{r4, pc}
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	e7fc      	b.n	800a8ac <strncmp+0x1e>
	...

0800a8b4 <_fstat_r>:
 800a8b4:	b538      	push	{r3, r4, r5, lr}
 800a8b6:	4d07      	ldr	r5, [pc, #28]	@ (800a8d4 <_fstat_r+0x20>)
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	4608      	mov	r0, r1
 800a8be:	4611      	mov	r1, r2
 800a8c0:	602b      	str	r3, [r5, #0]
 800a8c2:	f7f7 fb8b 	bl	8001fdc <_fstat>
 800a8c6:	1c43      	adds	r3, r0, #1
 800a8c8:	d102      	bne.n	800a8d0 <_fstat_r+0x1c>
 800a8ca:	682b      	ldr	r3, [r5, #0]
 800a8cc:	b103      	cbz	r3, 800a8d0 <_fstat_r+0x1c>
 800a8ce:	6023      	str	r3, [r4, #0]
 800a8d0:	bd38      	pop	{r3, r4, r5, pc}
 800a8d2:	bf00      	nop
 800a8d4:	200004fc 	.word	0x200004fc

0800a8d8 <_isatty_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	4d06      	ldr	r5, [pc, #24]	@ (800a8f4 <_isatty_r+0x1c>)
 800a8dc:	2300      	movs	r3, #0
 800a8de:	4604      	mov	r4, r0
 800a8e0:	4608      	mov	r0, r1
 800a8e2:	602b      	str	r3, [r5, #0]
 800a8e4:	f7f7 fb89 	bl	8001ffa <_isatty>
 800a8e8:	1c43      	adds	r3, r0, #1
 800a8ea:	d102      	bne.n	800a8f2 <_isatty_r+0x1a>
 800a8ec:	682b      	ldr	r3, [r5, #0]
 800a8ee:	b103      	cbz	r3, 800a8f2 <_isatty_r+0x1a>
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	bd38      	pop	{r3, r4, r5, pc}
 800a8f4:	200004fc 	.word	0x200004fc

0800a8f8 <_sbrk_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	4d06      	ldr	r5, [pc, #24]	@ (800a914 <_sbrk_r+0x1c>)
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	4604      	mov	r4, r0
 800a900:	4608      	mov	r0, r1
 800a902:	602b      	str	r3, [r5, #0]
 800a904:	f7f7 fb90 	bl	8002028 <_sbrk>
 800a908:	1c43      	adds	r3, r0, #1
 800a90a:	d102      	bne.n	800a912 <_sbrk_r+0x1a>
 800a90c:	682b      	ldr	r3, [r5, #0]
 800a90e:	b103      	cbz	r3, 800a912 <_sbrk_r+0x1a>
 800a910:	6023      	str	r3, [r4, #0]
 800a912:	bd38      	pop	{r3, r4, r5, pc}
 800a914:	200004fc 	.word	0x200004fc

0800a918 <memcpy>:
 800a918:	440a      	add	r2, r1
 800a91a:	4291      	cmp	r1, r2
 800a91c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a920:	d100      	bne.n	800a924 <memcpy+0xc>
 800a922:	4770      	bx	lr
 800a924:	b510      	push	{r4, lr}
 800a926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a92a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a92e:	4291      	cmp	r1, r2
 800a930:	d1f9      	bne.n	800a926 <memcpy+0xe>
 800a932:	bd10      	pop	{r4, pc}

0800a934 <nan>:
 800a934:	4901      	ldr	r1, [pc, #4]	@ (800a93c <nan+0x8>)
 800a936:	2000      	movs	r0, #0
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	7ff80000 	.word	0x7ff80000

0800a940 <__assert_func>:
 800a940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a942:	4614      	mov	r4, r2
 800a944:	461a      	mov	r2, r3
 800a946:	4b09      	ldr	r3, [pc, #36]	@ (800a96c <__assert_func+0x2c>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4605      	mov	r5, r0
 800a94c:	68d8      	ldr	r0, [r3, #12]
 800a94e:	b954      	cbnz	r4, 800a966 <__assert_func+0x26>
 800a950:	4b07      	ldr	r3, [pc, #28]	@ (800a970 <__assert_func+0x30>)
 800a952:	461c      	mov	r4, r3
 800a954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a958:	9100      	str	r1, [sp, #0]
 800a95a:	462b      	mov	r3, r5
 800a95c:	4905      	ldr	r1, [pc, #20]	@ (800a974 <__assert_func+0x34>)
 800a95e:	f000 fc19 	bl	800b194 <fiprintf>
 800a962:	f000 fc29 	bl	800b1b8 <abort>
 800a966:	4b04      	ldr	r3, [pc, #16]	@ (800a978 <__assert_func+0x38>)
 800a968:	e7f4      	b.n	800a954 <__assert_func+0x14>
 800a96a:	bf00      	nop
 800a96c:	20000018 	.word	0x20000018
 800a970:	0800b890 	.word	0x0800b890
 800a974:	0800b862 	.word	0x0800b862
 800a978:	0800b855 	.word	0x0800b855

0800a97c <_calloc_r>:
 800a97c:	b570      	push	{r4, r5, r6, lr}
 800a97e:	fba1 5402 	umull	r5, r4, r1, r2
 800a982:	b93c      	cbnz	r4, 800a994 <_calloc_r+0x18>
 800a984:	4629      	mov	r1, r5
 800a986:	f7fd fc8b 	bl	80082a0 <_malloc_r>
 800a98a:	4606      	mov	r6, r0
 800a98c:	b928      	cbnz	r0, 800a99a <_calloc_r+0x1e>
 800a98e:	2600      	movs	r6, #0
 800a990:	4630      	mov	r0, r6
 800a992:	bd70      	pop	{r4, r5, r6, pc}
 800a994:	220c      	movs	r2, #12
 800a996:	6002      	str	r2, [r0, #0]
 800a998:	e7f9      	b.n	800a98e <_calloc_r+0x12>
 800a99a:	462a      	mov	r2, r5
 800a99c:	4621      	mov	r1, r4
 800a99e:	f7fc fd21 	bl	80073e4 <memset>
 800a9a2:	e7f5      	b.n	800a990 <_calloc_r+0x14>

0800a9a4 <rshift>:
 800a9a4:	6903      	ldr	r3, [r0, #16]
 800a9a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9b2:	f100 0414 	add.w	r4, r0, #20
 800a9b6:	dd45      	ble.n	800aa44 <rshift+0xa0>
 800a9b8:	f011 011f 	ands.w	r1, r1, #31
 800a9bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9c4:	d10c      	bne.n	800a9e0 <rshift+0x3c>
 800a9c6:	f100 0710 	add.w	r7, r0, #16
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	42b1      	cmp	r1, r6
 800a9ce:	d334      	bcc.n	800aa3a <rshift+0x96>
 800a9d0:	1a9b      	subs	r3, r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	1eea      	subs	r2, r5, #3
 800a9d6:	4296      	cmp	r6, r2
 800a9d8:	bf38      	it	cc
 800a9da:	2300      	movcc	r3, #0
 800a9dc:	4423      	add	r3, r4
 800a9de:	e015      	b.n	800aa0c <rshift+0x68>
 800a9e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a9e4:	f1c1 0820 	rsb	r8, r1, #32
 800a9e8:	40cf      	lsrs	r7, r1
 800a9ea:	f105 0e04 	add.w	lr, r5, #4
 800a9ee:	46a1      	mov	r9, r4
 800a9f0:	4576      	cmp	r6, lr
 800a9f2:	46f4      	mov	ip, lr
 800a9f4:	d815      	bhi.n	800aa22 <rshift+0x7e>
 800a9f6:	1a9a      	subs	r2, r3, r2
 800a9f8:	0092      	lsls	r2, r2, #2
 800a9fa:	3a04      	subs	r2, #4
 800a9fc:	3501      	adds	r5, #1
 800a9fe:	42ae      	cmp	r6, r5
 800aa00:	bf38      	it	cc
 800aa02:	2200      	movcc	r2, #0
 800aa04:	18a3      	adds	r3, r4, r2
 800aa06:	50a7      	str	r7, [r4, r2]
 800aa08:	b107      	cbz	r7, 800aa0c <rshift+0x68>
 800aa0a:	3304      	adds	r3, #4
 800aa0c:	1b1a      	subs	r2, r3, r4
 800aa0e:	42a3      	cmp	r3, r4
 800aa10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa14:	bf08      	it	eq
 800aa16:	2300      	moveq	r3, #0
 800aa18:	6102      	str	r2, [r0, #16]
 800aa1a:	bf08      	it	eq
 800aa1c:	6143      	streq	r3, [r0, #20]
 800aa1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa22:	f8dc c000 	ldr.w	ip, [ip]
 800aa26:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa2a:	ea4c 0707 	orr.w	r7, ip, r7
 800aa2e:	f849 7b04 	str.w	r7, [r9], #4
 800aa32:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa36:	40cf      	lsrs	r7, r1
 800aa38:	e7da      	b.n	800a9f0 <rshift+0x4c>
 800aa3a:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa3e:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa42:	e7c3      	b.n	800a9cc <rshift+0x28>
 800aa44:	4623      	mov	r3, r4
 800aa46:	e7e1      	b.n	800aa0c <rshift+0x68>

0800aa48 <__hexdig_fun>:
 800aa48:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aa4c:	2b09      	cmp	r3, #9
 800aa4e:	d802      	bhi.n	800aa56 <__hexdig_fun+0xe>
 800aa50:	3820      	subs	r0, #32
 800aa52:	b2c0      	uxtb	r0, r0
 800aa54:	4770      	bx	lr
 800aa56:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aa5a:	2b05      	cmp	r3, #5
 800aa5c:	d801      	bhi.n	800aa62 <__hexdig_fun+0x1a>
 800aa5e:	3847      	subs	r0, #71	@ 0x47
 800aa60:	e7f7      	b.n	800aa52 <__hexdig_fun+0xa>
 800aa62:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aa66:	2b05      	cmp	r3, #5
 800aa68:	d801      	bhi.n	800aa6e <__hexdig_fun+0x26>
 800aa6a:	3827      	subs	r0, #39	@ 0x27
 800aa6c:	e7f1      	b.n	800aa52 <__hexdig_fun+0xa>
 800aa6e:	2000      	movs	r0, #0
 800aa70:	4770      	bx	lr
	...

0800aa74 <__gethex>:
 800aa74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa78:	b085      	sub	sp, #20
 800aa7a:	468a      	mov	sl, r1
 800aa7c:	9302      	str	r3, [sp, #8]
 800aa7e:	680b      	ldr	r3, [r1, #0]
 800aa80:	9001      	str	r0, [sp, #4]
 800aa82:	4690      	mov	r8, r2
 800aa84:	1c9c      	adds	r4, r3, #2
 800aa86:	46a1      	mov	r9, r4
 800aa88:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aa8c:	2830      	cmp	r0, #48	@ 0x30
 800aa8e:	d0fa      	beq.n	800aa86 <__gethex+0x12>
 800aa90:	eba9 0303 	sub.w	r3, r9, r3
 800aa94:	f1a3 0b02 	sub.w	fp, r3, #2
 800aa98:	f7ff ffd6 	bl	800aa48 <__hexdig_fun>
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d168      	bne.n	800ab74 <__gethex+0x100>
 800aaa2:	49a0      	ldr	r1, [pc, #640]	@ (800ad24 <__gethex+0x2b0>)
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	4648      	mov	r0, r9
 800aaa8:	f7ff fef1 	bl	800a88e <strncmp>
 800aaac:	4607      	mov	r7, r0
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d167      	bne.n	800ab82 <__gethex+0x10e>
 800aab2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aab6:	4626      	mov	r6, r4
 800aab8:	f7ff ffc6 	bl	800aa48 <__hexdig_fun>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d062      	beq.n	800ab86 <__gethex+0x112>
 800aac0:	4623      	mov	r3, r4
 800aac2:	7818      	ldrb	r0, [r3, #0]
 800aac4:	2830      	cmp	r0, #48	@ 0x30
 800aac6:	4699      	mov	r9, r3
 800aac8:	f103 0301 	add.w	r3, r3, #1
 800aacc:	d0f9      	beq.n	800aac2 <__gethex+0x4e>
 800aace:	f7ff ffbb 	bl	800aa48 <__hexdig_fun>
 800aad2:	fab0 f580 	clz	r5, r0
 800aad6:	096d      	lsrs	r5, r5, #5
 800aad8:	f04f 0b01 	mov.w	fp, #1
 800aadc:	464a      	mov	r2, r9
 800aade:	4616      	mov	r6, r2
 800aae0:	3201      	adds	r2, #1
 800aae2:	7830      	ldrb	r0, [r6, #0]
 800aae4:	f7ff ffb0 	bl	800aa48 <__hexdig_fun>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d1f8      	bne.n	800aade <__gethex+0x6a>
 800aaec:	498d      	ldr	r1, [pc, #564]	@ (800ad24 <__gethex+0x2b0>)
 800aaee:	2201      	movs	r2, #1
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	f7ff fecc 	bl	800a88e <strncmp>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d13f      	bne.n	800ab7a <__gethex+0x106>
 800aafa:	b944      	cbnz	r4, 800ab0e <__gethex+0x9a>
 800aafc:	1c74      	adds	r4, r6, #1
 800aafe:	4622      	mov	r2, r4
 800ab00:	4616      	mov	r6, r2
 800ab02:	3201      	adds	r2, #1
 800ab04:	7830      	ldrb	r0, [r6, #0]
 800ab06:	f7ff ff9f 	bl	800aa48 <__hexdig_fun>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d1f8      	bne.n	800ab00 <__gethex+0x8c>
 800ab0e:	1ba4      	subs	r4, r4, r6
 800ab10:	00a7      	lsls	r7, r4, #2
 800ab12:	7833      	ldrb	r3, [r6, #0]
 800ab14:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ab18:	2b50      	cmp	r3, #80	@ 0x50
 800ab1a:	d13e      	bne.n	800ab9a <__gethex+0x126>
 800ab1c:	7873      	ldrb	r3, [r6, #1]
 800ab1e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ab20:	d033      	beq.n	800ab8a <__gethex+0x116>
 800ab22:	2b2d      	cmp	r3, #45	@ 0x2d
 800ab24:	d034      	beq.n	800ab90 <__gethex+0x11c>
 800ab26:	1c71      	adds	r1, r6, #1
 800ab28:	2400      	movs	r4, #0
 800ab2a:	7808      	ldrb	r0, [r1, #0]
 800ab2c:	f7ff ff8c 	bl	800aa48 <__hexdig_fun>
 800ab30:	1e43      	subs	r3, r0, #1
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	2b18      	cmp	r3, #24
 800ab36:	d830      	bhi.n	800ab9a <__gethex+0x126>
 800ab38:	f1a0 0210 	sub.w	r2, r0, #16
 800ab3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab40:	f7ff ff82 	bl	800aa48 <__hexdig_fun>
 800ab44:	f100 3cff 	add.w	ip, r0, #4294967295
 800ab48:	fa5f fc8c 	uxtb.w	ip, ip
 800ab4c:	f1bc 0f18 	cmp.w	ip, #24
 800ab50:	f04f 030a 	mov.w	r3, #10
 800ab54:	d91e      	bls.n	800ab94 <__gethex+0x120>
 800ab56:	b104      	cbz	r4, 800ab5a <__gethex+0xe6>
 800ab58:	4252      	negs	r2, r2
 800ab5a:	4417      	add	r7, r2
 800ab5c:	f8ca 1000 	str.w	r1, [sl]
 800ab60:	b1ed      	cbz	r5, 800ab9e <__gethex+0x12a>
 800ab62:	f1bb 0f00 	cmp.w	fp, #0
 800ab66:	bf0c      	ite	eq
 800ab68:	2506      	moveq	r5, #6
 800ab6a:	2500      	movne	r5, #0
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	b005      	add	sp, #20
 800ab70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab74:	2500      	movs	r5, #0
 800ab76:	462c      	mov	r4, r5
 800ab78:	e7b0      	b.n	800aadc <__gethex+0x68>
 800ab7a:	2c00      	cmp	r4, #0
 800ab7c:	d1c7      	bne.n	800ab0e <__gethex+0x9a>
 800ab7e:	4627      	mov	r7, r4
 800ab80:	e7c7      	b.n	800ab12 <__gethex+0x9e>
 800ab82:	464e      	mov	r6, r9
 800ab84:	462f      	mov	r7, r5
 800ab86:	2501      	movs	r5, #1
 800ab88:	e7c3      	b.n	800ab12 <__gethex+0x9e>
 800ab8a:	2400      	movs	r4, #0
 800ab8c:	1cb1      	adds	r1, r6, #2
 800ab8e:	e7cc      	b.n	800ab2a <__gethex+0xb6>
 800ab90:	2401      	movs	r4, #1
 800ab92:	e7fb      	b.n	800ab8c <__gethex+0x118>
 800ab94:	fb03 0002 	mla	r0, r3, r2, r0
 800ab98:	e7ce      	b.n	800ab38 <__gethex+0xc4>
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	e7de      	b.n	800ab5c <__gethex+0xe8>
 800ab9e:	eba6 0309 	sub.w	r3, r6, r9
 800aba2:	3b01      	subs	r3, #1
 800aba4:	4629      	mov	r1, r5
 800aba6:	2b07      	cmp	r3, #7
 800aba8:	dc0a      	bgt.n	800abc0 <__gethex+0x14c>
 800abaa:	9801      	ldr	r0, [sp, #4]
 800abac:	f7fd fc04 	bl	80083b8 <_Balloc>
 800abb0:	4604      	mov	r4, r0
 800abb2:	b940      	cbnz	r0, 800abc6 <__gethex+0x152>
 800abb4:	4b5c      	ldr	r3, [pc, #368]	@ (800ad28 <__gethex+0x2b4>)
 800abb6:	4602      	mov	r2, r0
 800abb8:	21e4      	movs	r1, #228	@ 0xe4
 800abba:	485c      	ldr	r0, [pc, #368]	@ (800ad2c <__gethex+0x2b8>)
 800abbc:	f7ff fec0 	bl	800a940 <__assert_func>
 800abc0:	3101      	adds	r1, #1
 800abc2:	105b      	asrs	r3, r3, #1
 800abc4:	e7ef      	b.n	800aba6 <__gethex+0x132>
 800abc6:	f100 0a14 	add.w	sl, r0, #20
 800abca:	2300      	movs	r3, #0
 800abcc:	4655      	mov	r5, sl
 800abce:	469b      	mov	fp, r3
 800abd0:	45b1      	cmp	r9, r6
 800abd2:	d337      	bcc.n	800ac44 <__gethex+0x1d0>
 800abd4:	f845 bb04 	str.w	fp, [r5], #4
 800abd8:	eba5 050a 	sub.w	r5, r5, sl
 800abdc:	10ad      	asrs	r5, r5, #2
 800abde:	6125      	str	r5, [r4, #16]
 800abe0:	4658      	mov	r0, fp
 800abe2:	f7fd fcdb 	bl	800859c <__hi0bits>
 800abe6:	016d      	lsls	r5, r5, #5
 800abe8:	f8d8 6000 	ldr.w	r6, [r8]
 800abec:	1a2d      	subs	r5, r5, r0
 800abee:	42b5      	cmp	r5, r6
 800abf0:	dd54      	ble.n	800ac9c <__gethex+0x228>
 800abf2:	1bad      	subs	r5, r5, r6
 800abf4:	4629      	mov	r1, r5
 800abf6:	4620      	mov	r0, r4
 800abf8:	f7fe f865 	bl	8008cc6 <__any_on>
 800abfc:	4681      	mov	r9, r0
 800abfe:	b178      	cbz	r0, 800ac20 <__gethex+0x1ac>
 800ac00:	1e6b      	subs	r3, r5, #1
 800ac02:	1159      	asrs	r1, r3, #5
 800ac04:	f003 021f 	and.w	r2, r3, #31
 800ac08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac0c:	f04f 0901 	mov.w	r9, #1
 800ac10:	fa09 f202 	lsl.w	r2, r9, r2
 800ac14:	420a      	tst	r2, r1
 800ac16:	d003      	beq.n	800ac20 <__gethex+0x1ac>
 800ac18:	454b      	cmp	r3, r9
 800ac1a:	dc36      	bgt.n	800ac8a <__gethex+0x216>
 800ac1c:	f04f 0902 	mov.w	r9, #2
 800ac20:	4629      	mov	r1, r5
 800ac22:	4620      	mov	r0, r4
 800ac24:	f7ff febe 	bl	800a9a4 <rshift>
 800ac28:	442f      	add	r7, r5
 800ac2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac2e:	42bb      	cmp	r3, r7
 800ac30:	da42      	bge.n	800acb8 <__gethex+0x244>
 800ac32:	9801      	ldr	r0, [sp, #4]
 800ac34:	4621      	mov	r1, r4
 800ac36:	f7fd fbff 	bl	8008438 <_Bfree>
 800ac3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	6013      	str	r3, [r2, #0]
 800ac40:	25a3      	movs	r5, #163	@ 0xa3
 800ac42:	e793      	b.n	800ab6c <__gethex+0xf8>
 800ac44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ac48:	2a2e      	cmp	r2, #46	@ 0x2e
 800ac4a:	d012      	beq.n	800ac72 <__gethex+0x1fe>
 800ac4c:	2b20      	cmp	r3, #32
 800ac4e:	d104      	bne.n	800ac5a <__gethex+0x1e6>
 800ac50:	f845 bb04 	str.w	fp, [r5], #4
 800ac54:	f04f 0b00 	mov.w	fp, #0
 800ac58:	465b      	mov	r3, fp
 800ac5a:	7830      	ldrb	r0, [r6, #0]
 800ac5c:	9303      	str	r3, [sp, #12]
 800ac5e:	f7ff fef3 	bl	800aa48 <__hexdig_fun>
 800ac62:	9b03      	ldr	r3, [sp, #12]
 800ac64:	f000 000f 	and.w	r0, r0, #15
 800ac68:	4098      	lsls	r0, r3
 800ac6a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ac6e:	3304      	adds	r3, #4
 800ac70:	e7ae      	b.n	800abd0 <__gethex+0x15c>
 800ac72:	45b1      	cmp	r9, r6
 800ac74:	d8ea      	bhi.n	800ac4c <__gethex+0x1d8>
 800ac76:	492b      	ldr	r1, [pc, #172]	@ (800ad24 <__gethex+0x2b0>)
 800ac78:	9303      	str	r3, [sp, #12]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f7ff fe06 	bl	800a88e <strncmp>
 800ac82:	9b03      	ldr	r3, [sp, #12]
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d1e1      	bne.n	800ac4c <__gethex+0x1d8>
 800ac88:	e7a2      	b.n	800abd0 <__gethex+0x15c>
 800ac8a:	1ea9      	subs	r1, r5, #2
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f7fe f81a 	bl	8008cc6 <__any_on>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d0c2      	beq.n	800ac1c <__gethex+0x1a8>
 800ac96:	f04f 0903 	mov.w	r9, #3
 800ac9a:	e7c1      	b.n	800ac20 <__gethex+0x1ac>
 800ac9c:	da09      	bge.n	800acb2 <__gethex+0x23e>
 800ac9e:	1b75      	subs	r5, r6, r5
 800aca0:	4621      	mov	r1, r4
 800aca2:	9801      	ldr	r0, [sp, #4]
 800aca4:	462a      	mov	r2, r5
 800aca6:	f7fd fddf 	bl	8008868 <__lshift>
 800acaa:	1b7f      	subs	r7, r7, r5
 800acac:	4604      	mov	r4, r0
 800acae:	f100 0a14 	add.w	sl, r0, #20
 800acb2:	f04f 0900 	mov.w	r9, #0
 800acb6:	e7b8      	b.n	800ac2a <__gethex+0x1b6>
 800acb8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800acbc:	42bd      	cmp	r5, r7
 800acbe:	dd6f      	ble.n	800ada0 <__gethex+0x32c>
 800acc0:	1bed      	subs	r5, r5, r7
 800acc2:	42ae      	cmp	r6, r5
 800acc4:	dc34      	bgt.n	800ad30 <__gethex+0x2bc>
 800acc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acca:	2b02      	cmp	r3, #2
 800accc:	d022      	beq.n	800ad14 <__gethex+0x2a0>
 800acce:	2b03      	cmp	r3, #3
 800acd0:	d024      	beq.n	800ad1c <__gethex+0x2a8>
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d115      	bne.n	800ad02 <__gethex+0x28e>
 800acd6:	42ae      	cmp	r6, r5
 800acd8:	d113      	bne.n	800ad02 <__gethex+0x28e>
 800acda:	2e01      	cmp	r6, #1
 800acdc:	d10b      	bne.n	800acf6 <__gethex+0x282>
 800acde:	9a02      	ldr	r2, [sp, #8]
 800ace0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ace4:	6013      	str	r3, [r2, #0]
 800ace6:	2301      	movs	r3, #1
 800ace8:	6123      	str	r3, [r4, #16]
 800acea:	f8ca 3000 	str.w	r3, [sl]
 800acee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acf0:	2562      	movs	r5, #98	@ 0x62
 800acf2:	601c      	str	r4, [r3, #0]
 800acf4:	e73a      	b.n	800ab6c <__gethex+0xf8>
 800acf6:	1e71      	subs	r1, r6, #1
 800acf8:	4620      	mov	r0, r4
 800acfa:	f7fd ffe4 	bl	8008cc6 <__any_on>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	d1ed      	bne.n	800acde <__gethex+0x26a>
 800ad02:	9801      	ldr	r0, [sp, #4]
 800ad04:	4621      	mov	r1, r4
 800ad06:	f7fd fb97 	bl	8008438 <_Bfree>
 800ad0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	6013      	str	r3, [r2, #0]
 800ad10:	2550      	movs	r5, #80	@ 0x50
 800ad12:	e72b      	b.n	800ab6c <__gethex+0xf8>
 800ad14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1f3      	bne.n	800ad02 <__gethex+0x28e>
 800ad1a:	e7e0      	b.n	800acde <__gethex+0x26a>
 800ad1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1dd      	bne.n	800acde <__gethex+0x26a>
 800ad22:	e7ee      	b.n	800ad02 <__gethex+0x28e>
 800ad24:	0800b6c8 	.word	0x0800b6c8
 800ad28:	0800b55b 	.word	0x0800b55b
 800ad2c:	0800b891 	.word	0x0800b891
 800ad30:	1e6f      	subs	r7, r5, #1
 800ad32:	f1b9 0f00 	cmp.w	r9, #0
 800ad36:	d130      	bne.n	800ad9a <__gethex+0x326>
 800ad38:	b127      	cbz	r7, 800ad44 <__gethex+0x2d0>
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f7fd ffc2 	bl	8008cc6 <__any_on>
 800ad42:	4681      	mov	r9, r0
 800ad44:	117a      	asrs	r2, r7, #5
 800ad46:	2301      	movs	r3, #1
 800ad48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ad4c:	f007 071f 	and.w	r7, r7, #31
 800ad50:	40bb      	lsls	r3, r7
 800ad52:	4213      	tst	r3, r2
 800ad54:	4629      	mov	r1, r5
 800ad56:	4620      	mov	r0, r4
 800ad58:	bf18      	it	ne
 800ad5a:	f049 0902 	orrne.w	r9, r9, #2
 800ad5e:	f7ff fe21 	bl	800a9a4 <rshift>
 800ad62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ad66:	1b76      	subs	r6, r6, r5
 800ad68:	2502      	movs	r5, #2
 800ad6a:	f1b9 0f00 	cmp.w	r9, #0
 800ad6e:	d047      	beq.n	800ae00 <__gethex+0x38c>
 800ad70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d015      	beq.n	800ada4 <__gethex+0x330>
 800ad78:	2b03      	cmp	r3, #3
 800ad7a:	d017      	beq.n	800adac <__gethex+0x338>
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d109      	bne.n	800ad94 <__gethex+0x320>
 800ad80:	f019 0f02 	tst.w	r9, #2
 800ad84:	d006      	beq.n	800ad94 <__gethex+0x320>
 800ad86:	f8da 3000 	ldr.w	r3, [sl]
 800ad8a:	ea49 0903 	orr.w	r9, r9, r3
 800ad8e:	f019 0f01 	tst.w	r9, #1
 800ad92:	d10e      	bne.n	800adb2 <__gethex+0x33e>
 800ad94:	f045 0510 	orr.w	r5, r5, #16
 800ad98:	e032      	b.n	800ae00 <__gethex+0x38c>
 800ad9a:	f04f 0901 	mov.w	r9, #1
 800ad9e:	e7d1      	b.n	800ad44 <__gethex+0x2d0>
 800ada0:	2501      	movs	r5, #1
 800ada2:	e7e2      	b.n	800ad6a <__gethex+0x2f6>
 800ada4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ada6:	f1c3 0301 	rsb	r3, r3, #1
 800adaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d0f0      	beq.n	800ad94 <__gethex+0x320>
 800adb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800adb6:	f104 0314 	add.w	r3, r4, #20
 800adba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800adbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800adc2:	f04f 0c00 	mov.w	ip, #0
 800adc6:	4618      	mov	r0, r3
 800adc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adcc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800add0:	d01b      	beq.n	800ae0a <__gethex+0x396>
 800add2:	3201      	adds	r2, #1
 800add4:	6002      	str	r2, [r0, #0]
 800add6:	2d02      	cmp	r5, #2
 800add8:	f104 0314 	add.w	r3, r4, #20
 800addc:	d13c      	bne.n	800ae58 <__gethex+0x3e4>
 800adde:	f8d8 2000 	ldr.w	r2, [r8]
 800ade2:	3a01      	subs	r2, #1
 800ade4:	42b2      	cmp	r2, r6
 800ade6:	d109      	bne.n	800adfc <__gethex+0x388>
 800ade8:	1171      	asrs	r1, r6, #5
 800adea:	2201      	movs	r2, #1
 800adec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800adf0:	f006 061f 	and.w	r6, r6, #31
 800adf4:	fa02 f606 	lsl.w	r6, r2, r6
 800adf8:	421e      	tst	r6, r3
 800adfa:	d13a      	bne.n	800ae72 <__gethex+0x3fe>
 800adfc:	f045 0520 	orr.w	r5, r5, #32
 800ae00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae02:	601c      	str	r4, [r3, #0]
 800ae04:	9b02      	ldr	r3, [sp, #8]
 800ae06:	601f      	str	r7, [r3, #0]
 800ae08:	e6b0      	b.n	800ab6c <__gethex+0xf8>
 800ae0a:	4299      	cmp	r1, r3
 800ae0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae10:	d8d9      	bhi.n	800adc6 <__gethex+0x352>
 800ae12:	68a3      	ldr	r3, [r4, #8]
 800ae14:	459b      	cmp	fp, r3
 800ae16:	db17      	blt.n	800ae48 <__gethex+0x3d4>
 800ae18:	6861      	ldr	r1, [r4, #4]
 800ae1a:	9801      	ldr	r0, [sp, #4]
 800ae1c:	3101      	adds	r1, #1
 800ae1e:	f7fd facb 	bl	80083b8 <_Balloc>
 800ae22:	4681      	mov	r9, r0
 800ae24:	b918      	cbnz	r0, 800ae2e <__gethex+0x3ba>
 800ae26:	4b1a      	ldr	r3, [pc, #104]	@ (800ae90 <__gethex+0x41c>)
 800ae28:	4602      	mov	r2, r0
 800ae2a:	2184      	movs	r1, #132	@ 0x84
 800ae2c:	e6c5      	b.n	800abba <__gethex+0x146>
 800ae2e:	6922      	ldr	r2, [r4, #16]
 800ae30:	3202      	adds	r2, #2
 800ae32:	f104 010c 	add.w	r1, r4, #12
 800ae36:	0092      	lsls	r2, r2, #2
 800ae38:	300c      	adds	r0, #12
 800ae3a:	f7ff fd6d 	bl	800a918 <memcpy>
 800ae3e:	4621      	mov	r1, r4
 800ae40:	9801      	ldr	r0, [sp, #4]
 800ae42:	f7fd faf9 	bl	8008438 <_Bfree>
 800ae46:	464c      	mov	r4, r9
 800ae48:	6923      	ldr	r3, [r4, #16]
 800ae4a:	1c5a      	adds	r2, r3, #1
 800ae4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae50:	6122      	str	r2, [r4, #16]
 800ae52:	2201      	movs	r2, #1
 800ae54:	615a      	str	r2, [r3, #20]
 800ae56:	e7be      	b.n	800add6 <__gethex+0x362>
 800ae58:	6922      	ldr	r2, [r4, #16]
 800ae5a:	455a      	cmp	r2, fp
 800ae5c:	dd0b      	ble.n	800ae76 <__gethex+0x402>
 800ae5e:	2101      	movs	r1, #1
 800ae60:	4620      	mov	r0, r4
 800ae62:	f7ff fd9f 	bl	800a9a4 <rshift>
 800ae66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae6a:	3701      	adds	r7, #1
 800ae6c:	42bb      	cmp	r3, r7
 800ae6e:	f6ff aee0 	blt.w	800ac32 <__gethex+0x1be>
 800ae72:	2501      	movs	r5, #1
 800ae74:	e7c2      	b.n	800adfc <__gethex+0x388>
 800ae76:	f016 061f 	ands.w	r6, r6, #31
 800ae7a:	d0fa      	beq.n	800ae72 <__gethex+0x3fe>
 800ae7c:	4453      	add	r3, sl
 800ae7e:	f1c6 0620 	rsb	r6, r6, #32
 800ae82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae86:	f7fd fb89 	bl	800859c <__hi0bits>
 800ae8a:	42b0      	cmp	r0, r6
 800ae8c:	dbe7      	blt.n	800ae5e <__gethex+0x3ea>
 800ae8e:	e7f0      	b.n	800ae72 <__gethex+0x3fe>
 800ae90:	0800b55b 	.word	0x0800b55b

0800ae94 <L_shift>:
 800ae94:	f1c2 0208 	rsb	r2, r2, #8
 800ae98:	0092      	lsls	r2, r2, #2
 800ae9a:	b570      	push	{r4, r5, r6, lr}
 800ae9c:	f1c2 0620 	rsb	r6, r2, #32
 800aea0:	6843      	ldr	r3, [r0, #4]
 800aea2:	6804      	ldr	r4, [r0, #0]
 800aea4:	fa03 f506 	lsl.w	r5, r3, r6
 800aea8:	432c      	orrs	r4, r5
 800aeaa:	40d3      	lsrs	r3, r2
 800aeac:	6004      	str	r4, [r0, #0]
 800aeae:	f840 3f04 	str.w	r3, [r0, #4]!
 800aeb2:	4288      	cmp	r0, r1
 800aeb4:	d3f4      	bcc.n	800aea0 <L_shift+0xc>
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}

0800aeb8 <__match>:
 800aeb8:	b530      	push	{r4, r5, lr}
 800aeba:	6803      	ldr	r3, [r0, #0]
 800aebc:	3301      	adds	r3, #1
 800aebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aec2:	b914      	cbnz	r4, 800aeca <__match+0x12>
 800aec4:	6003      	str	r3, [r0, #0]
 800aec6:	2001      	movs	r0, #1
 800aec8:	bd30      	pop	{r4, r5, pc}
 800aeca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aece:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aed2:	2d19      	cmp	r5, #25
 800aed4:	bf98      	it	ls
 800aed6:	3220      	addls	r2, #32
 800aed8:	42a2      	cmp	r2, r4
 800aeda:	d0f0      	beq.n	800aebe <__match+0x6>
 800aedc:	2000      	movs	r0, #0
 800aede:	e7f3      	b.n	800aec8 <__match+0x10>

0800aee0 <__hexnan>:
 800aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	680b      	ldr	r3, [r1, #0]
 800aee6:	6801      	ldr	r1, [r0, #0]
 800aee8:	115e      	asrs	r6, r3, #5
 800aeea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aeee:	f013 031f 	ands.w	r3, r3, #31
 800aef2:	b087      	sub	sp, #28
 800aef4:	bf18      	it	ne
 800aef6:	3604      	addne	r6, #4
 800aef8:	2500      	movs	r5, #0
 800aefa:	1f37      	subs	r7, r6, #4
 800aefc:	4682      	mov	sl, r0
 800aefe:	4690      	mov	r8, r2
 800af00:	9301      	str	r3, [sp, #4]
 800af02:	f846 5c04 	str.w	r5, [r6, #-4]
 800af06:	46b9      	mov	r9, r7
 800af08:	463c      	mov	r4, r7
 800af0a:	9502      	str	r5, [sp, #8]
 800af0c:	46ab      	mov	fp, r5
 800af0e:	784a      	ldrb	r2, [r1, #1]
 800af10:	1c4b      	adds	r3, r1, #1
 800af12:	9303      	str	r3, [sp, #12]
 800af14:	b342      	cbz	r2, 800af68 <__hexnan+0x88>
 800af16:	4610      	mov	r0, r2
 800af18:	9105      	str	r1, [sp, #20]
 800af1a:	9204      	str	r2, [sp, #16]
 800af1c:	f7ff fd94 	bl	800aa48 <__hexdig_fun>
 800af20:	2800      	cmp	r0, #0
 800af22:	d151      	bne.n	800afc8 <__hexnan+0xe8>
 800af24:	9a04      	ldr	r2, [sp, #16]
 800af26:	9905      	ldr	r1, [sp, #20]
 800af28:	2a20      	cmp	r2, #32
 800af2a:	d818      	bhi.n	800af5e <__hexnan+0x7e>
 800af2c:	9b02      	ldr	r3, [sp, #8]
 800af2e:	459b      	cmp	fp, r3
 800af30:	dd13      	ble.n	800af5a <__hexnan+0x7a>
 800af32:	454c      	cmp	r4, r9
 800af34:	d206      	bcs.n	800af44 <__hexnan+0x64>
 800af36:	2d07      	cmp	r5, #7
 800af38:	dc04      	bgt.n	800af44 <__hexnan+0x64>
 800af3a:	462a      	mov	r2, r5
 800af3c:	4649      	mov	r1, r9
 800af3e:	4620      	mov	r0, r4
 800af40:	f7ff ffa8 	bl	800ae94 <L_shift>
 800af44:	4544      	cmp	r4, r8
 800af46:	d952      	bls.n	800afee <__hexnan+0x10e>
 800af48:	2300      	movs	r3, #0
 800af4a:	f1a4 0904 	sub.w	r9, r4, #4
 800af4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800af52:	f8cd b008 	str.w	fp, [sp, #8]
 800af56:	464c      	mov	r4, r9
 800af58:	461d      	mov	r5, r3
 800af5a:	9903      	ldr	r1, [sp, #12]
 800af5c:	e7d7      	b.n	800af0e <__hexnan+0x2e>
 800af5e:	2a29      	cmp	r2, #41	@ 0x29
 800af60:	d157      	bne.n	800b012 <__hexnan+0x132>
 800af62:	3102      	adds	r1, #2
 800af64:	f8ca 1000 	str.w	r1, [sl]
 800af68:	f1bb 0f00 	cmp.w	fp, #0
 800af6c:	d051      	beq.n	800b012 <__hexnan+0x132>
 800af6e:	454c      	cmp	r4, r9
 800af70:	d206      	bcs.n	800af80 <__hexnan+0xa0>
 800af72:	2d07      	cmp	r5, #7
 800af74:	dc04      	bgt.n	800af80 <__hexnan+0xa0>
 800af76:	462a      	mov	r2, r5
 800af78:	4649      	mov	r1, r9
 800af7a:	4620      	mov	r0, r4
 800af7c:	f7ff ff8a 	bl	800ae94 <L_shift>
 800af80:	4544      	cmp	r4, r8
 800af82:	d936      	bls.n	800aff2 <__hexnan+0x112>
 800af84:	f1a8 0204 	sub.w	r2, r8, #4
 800af88:	4623      	mov	r3, r4
 800af8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800af8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800af92:	429f      	cmp	r7, r3
 800af94:	d2f9      	bcs.n	800af8a <__hexnan+0xaa>
 800af96:	1b3b      	subs	r3, r7, r4
 800af98:	f023 0303 	bic.w	r3, r3, #3
 800af9c:	3304      	adds	r3, #4
 800af9e:	3401      	adds	r4, #1
 800afa0:	3e03      	subs	r6, #3
 800afa2:	42b4      	cmp	r4, r6
 800afa4:	bf88      	it	hi
 800afa6:	2304      	movhi	r3, #4
 800afa8:	4443      	add	r3, r8
 800afaa:	2200      	movs	r2, #0
 800afac:	f843 2b04 	str.w	r2, [r3], #4
 800afb0:	429f      	cmp	r7, r3
 800afb2:	d2fb      	bcs.n	800afac <__hexnan+0xcc>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	b91b      	cbnz	r3, 800afc0 <__hexnan+0xe0>
 800afb8:	4547      	cmp	r7, r8
 800afba:	d128      	bne.n	800b00e <__hexnan+0x12e>
 800afbc:	2301      	movs	r3, #1
 800afbe:	603b      	str	r3, [r7, #0]
 800afc0:	2005      	movs	r0, #5
 800afc2:	b007      	add	sp, #28
 800afc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc8:	3501      	adds	r5, #1
 800afca:	2d08      	cmp	r5, #8
 800afcc:	f10b 0b01 	add.w	fp, fp, #1
 800afd0:	dd06      	ble.n	800afe0 <__hexnan+0x100>
 800afd2:	4544      	cmp	r4, r8
 800afd4:	d9c1      	bls.n	800af5a <__hexnan+0x7a>
 800afd6:	2300      	movs	r3, #0
 800afd8:	f844 3c04 	str.w	r3, [r4, #-4]
 800afdc:	2501      	movs	r5, #1
 800afde:	3c04      	subs	r4, #4
 800afe0:	6822      	ldr	r2, [r4, #0]
 800afe2:	f000 000f 	and.w	r0, r0, #15
 800afe6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800afea:	6020      	str	r0, [r4, #0]
 800afec:	e7b5      	b.n	800af5a <__hexnan+0x7a>
 800afee:	2508      	movs	r5, #8
 800aff0:	e7b3      	b.n	800af5a <__hexnan+0x7a>
 800aff2:	9b01      	ldr	r3, [sp, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d0dd      	beq.n	800afb4 <__hexnan+0xd4>
 800aff8:	f1c3 0320 	rsb	r3, r3, #32
 800affc:	f04f 32ff 	mov.w	r2, #4294967295
 800b000:	40da      	lsrs	r2, r3
 800b002:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b006:	4013      	ands	r3, r2
 800b008:	f846 3c04 	str.w	r3, [r6, #-4]
 800b00c:	e7d2      	b.n	800afb4 <__hexnan+0xd4>
 800b00e:	3f04      	subs	r7, #4
 800b010:	e7d0      	b.n	800afb4 <__hexnan+0xd4>
 800b012:	2004      	movs	r0, #4
 800b014:	e7d5      	b.n	800afc2 <__hexnan+0xe2>

0800b016 <__ascii_mbtowc>:
 800b016:	b082      	sub	sp, #8
 800b018:	b901      	cbnz	r1, 800b01c <__ascii_mbtowc+0x6>
 800b01a:	a901      	add	r1, sp, #4
 800b01c:	b142      	cbz	r2, 800b030 <__ascii_mbtowc+0x1a>
 800b01e:	b14b      	cbz	r3, 800b034 <__ascii_mbtowc+0x1e>
 800b020:	7813      	ldrb	r3, [r2, #0]
 800b022:	600b      	str	r3, [r1, #0]
 800b024:	7812      	ldrb	r2, [r2, #0]
 800b026:	1e10      	subs	r0, r2, #0
 800b028:	bf18      	it	ne
 800b02a:	2001      	movne	r0, #1
 800b02c:	b002      	add	sp, #8
 800b02e:	4770      	bx	lr
 800b030:	4610      	mov	r0, r2
 800b032:	e7fb      	b.n	800b02c <__ascii_mbtowc+0x16>
 800b034:	f06f 0001 	mvn.w	r0, #1
 800b038:	e7f8      	b.n	800b02c <__ascii_mbtowc+0x16>

0800b03a <_realloc_r>:
 800b03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03e:	4680      	mov	r8, r0
 800b040:	4615      	mov	r5, r2
 800b042:	460c      	mov	r4, r1
 800b044:	b921      	cbnz	r1, 800b050 <_realloc_r+0x16>
 800b046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b04a:	4611      	mov	r1, r2
 800b04c:	f7fd b928 	b.w	80082a0 <_malloc_r>
 800b050:	b92a      	cbnz	r2, 800b05e <_realloc_r+0x24>
 800b052:	f7fd f8b1 	bl	80081b8 <_free_r>
 800b056:	2400      	movs	r4, #0
 800b058:	4620      	mov	r0, r4
 800b05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b05e:	f000 f8b2 	bl	800b1c6 <_malloc_usable_size_r>
 800b062:	4285      	cmp	r5, r0
 800b064:	4606      	mov	r6, r0
 800b066:	d802      	bhi.n	800b06e <_realloc_r+0x34>
 800b068:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b06c:	d8f4      	bhi.n	800b058 <_realloc_r+0x1e>
 800b06e:	4629      	mov	r1, r5
 800b070:	4640      	mov	r0, r8
 800b072:	f7fd f915 	bl	80082a0 <_malloc_r>
 800b076:	4607      	mov	r7, r0
 800b078:	2800      	cmp	r0, #0
 800b07a:	d0ec      	beq.n	800b056 <_realloc_r+0x1c>
 800b07c:	42b5      	cmp	r5, r6
 800b07e:	462a      	mov	r2, r5
 800b080:	4621      	mov	r1, r4
 800b082:	bf28      	it	cs
 800b084:	4632      	movcs	r2, r6
 800b086:	f7ff fc47 	bl	800a918 <memcpy>
 800b08a:	4621      	mov	r1, r4
 800b08c:	4640      	mov	r0, r8
 800b08e:	f7fd f893 	bl	80081b8 <_free_r>
 800b092:	463c      	mov	r4, r7
 800b094:	e7e0      	b.n	800b058 <_realloc_r+0x1e>
	...

0800b098 <_strtoul_l.constprop.0>:
 800b098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b09c:	4e34      	ldr	r6, [pc, #208]	@ (800b170 <_strtoul_l.constprop.0+0xd8>)
 800b09e:	4686      	mov	lr, r0
 800b0a0:	460d      	mov	r5, r1
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0a8:	5d37      	ldrb	r7, [r6, r4]
 800b0aa:	f017 0708 	ands.w	r7, r7, #8
 800b0ae:	d1f8      	bne.n	800b0a2 <_strtoul_l.constprop.0+0xa>
 800b0b0:	2c2d      	cmp	r4, #45	@ 0x2d
 800b0b2:	d12f      	bne.n	800b114 <_strtoul_l.constprop.0+0x7c>
 800b0b4:	782c      	ldrb	r4, [r5, #0]
 800b0b6:	2701      	movs	r7, #1
 800b0b8:	1c85      	adds	r5, r0, #2
 800b0ba:	f033 0010 	bics.w	r0, r3, #16
 800b0be:	d109      	bne.n	800b0d4 <_strtoul_l.constprop.0+0x3c>
 800b0c0:	2c30      	cmp	r4, #48	@ 0x30
 800b0c2:	d12c      	bne.n	800b11e <_strtoul_l.constprop.0+0x86>
 800b0c4:	7828      	ldrb	r0, [r5, #0]
 800b0c6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b0ca:	2858      	cmp	r0, #88	@ 0x58
 800b0cc:	d127      	bne.n	800b11e <_strtoul_l.constprop.0+0x86>
 800b0ce:	786c      	ldrb	r4, [r5, #1]
 800b0d0:	2310      	movs	r3, #16
 800b0d2:	3502      	adds	r5, #2
 800b0d4:	f04f 38ff 	mov.w	r8, #4294967295
 800b0d8:	2600      	movs	r6, #0
 800b0da:	fbb8 f8f3 	udiv	r8, r8, r3
 800b0de:	fb03 f908 	mul.w	r9, r3, r8
 800b0e2:	ea6f 0909 	mvn.w	r9, r9
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b0ec:	f1bc 0f09 	cmp.w	ip, #9
 800b0f0:	d81c      	bhi.n	800b12c <_strtoul_l.constprop.0+0x94>
 800b0f2:	4664      	mov	r4, ip
 800b0f4:	42a3      	cmp	r3, r4
 800b0f6:	dd2a      	ble.n	800b14e <_strtoul_l.constprop.0+0xb6>
 800b0f8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b0fc:	d007      	beq.n	800b10e <_strtoul_l.constprop.0+0x76>
 800b0fe:	4580      	cmp	r8, r0
 800b100:	d322      	bcc.n	800b148 <_strtoul_l.constprop.0+0xb0>
 800b102:	d101      	bne.n	800b108 <_strtoul_l.constprop.0+0x70>
 800b104:	45a1      	cmp	r9, r4
 800b106:	db1f      	blt.n	800b148 <_strtoul_l.constprop.0+0xb0>
 800b108:	fb00 4003 	mla	r0, r0, r3, r4
 800b10c:	2601      	movs	r6, #1
 800b10e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b112:	e7e9      	b.n	800b0e8 <_strtoul_l.constprop.0+0x50>
 800b114:	2c2b      	cmp	r4, #43	@ 0x2b
 800b116:	bf04      	itt	eq
 800b118:	782c      	ldrbeq	r4, [r5, #0]
 800b11a:	1c85      	addeq	r5, r0, #2
 800b11c:	e7cd      	b.n	800b0ba <_strtoul_l.constprop.0+0x22>
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1d8      	bne.n	800b0d4 <_strtoul_l.constprop.0+0x3c>
 800b122:	2c30      	cmp	r4, #48	@ 0x30
 800b124:	bf0c      	ite	eq
 800b126:	2308      	moveq	r3, #8
 800b128:	230a      	movne	r3, #10
 800b12a:	e7d3      	b.n	800b0d4 <_strtoul_l.constprop.0+0x3c>
 800b12c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b130:	f1bc 0f19 	cmp.w	ip, #25
 800b134:	d801      	bhi.n	800b13a <_strtoul_l.constprop.0+0xa2>
 800b136:	3c37      	subs	r4, #55	@ 0x37
 800b138:	e7dc      	b.n	800b0f4 <_strtoul_l.constprop.0+0x5c>
 800b13a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b13e:	f1bc 0f19 	cmp.w	ip, #25
 800b142:	d804      	bhi.n	800b14e <_strtoul_l.constprop.0+0xb6>
 800b144:	3c57      	subs	r4, #87	@ 0x57
 800b146:	e7d5      	b.n	800b0f4 <_strtoul_l.constprop.0+0x5c>
 800b148:	f04f 36ff 	mov.w	r6, #4294967295
 800b14c:	e7df      	b.n	800b10e <_strtoul_l.constprop.0+0x76>
 800b14e:	1c73      	adds	r3, r6, #1
 800b150:	d106      	bne.n	800b160 <_strtoul_l.constprop.0+0xc8>
 800b152:	2322      	movs	r3, #34	@ 0x22
 800b154:	f8ce 3000 	str.w	r3, [lr]
 800b158:	4630      	mov	r0, r6
 800b15a:	b932      	cbnz	r2, 800b16a <_strtoul_l.constprop.0+0xd2>
 800b15c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b160:	b107      	cbz	r7, 800b164 <_strtoul_l.constprop.0+0xcc>
 800b162:	4240      	negs	r0, r0
 800b164:	2a00      	cmp	r2, #0
 800b166:	d0f9      	beq.n	800b15c <_strtoul_l.constprop.0+0xc4>
 800b168:	b106      	cbz	r6, 800b16c <_strtoul_l.constprop.0+0xd4>
 800b16a:	1e69      	subs	r1, r5, #1
 800b16c:	6011      	str	r1, [r2, #0]
 800b16e:	e7f5      	b.n	800b15c <_strtoul_l.constprop.0+0xc4>
 800b170:	0800b721 	.word	0x0800b721

0800b174 <_strtoul_r>:
 800b174:	f7ff bf90 	b.w	800b098 <_strtoul_l.constprop.0>

0800b178 <__ascii_wctomb>:
 800b178:	4603      	mov	r3, r0
 800b17a:	4608      	mov	r0, r1
 800b17c:	b141      	cbz	r1, 800b190 <__ascii_wctomb+0x18>
 800b17e:	2aff      	cmp	r2, #255	@ 0xff
 800b180:	d904      	bls.n	800b18c <__ascii_wctomb+0x14>
 800b182:	228a      	movs	r2, #138	@ 0x8a
 800b184:	601a      	str	r2, [r3, #0]
 800b186:	f04f 30ff 	mov.w	r0, #4294967295
 800b18a:	4770      	bx	lr
 800b18c:	700a      	strb	r2, [r1, #0]
 800b18e:	2001      	movs	r0, #1
 800b190:	4770      	bx	lr
	...

0800b194 <fiprintf>:
 800b194:	b40e      	push	{r1, r2, r3}
 800b196:	b503      	push	{r0, r1, lr}
 800b198:	4601      	mov	r1, r0
 800b19a:	ab03      	add	r3, sp, #12
 800b19c:	4805      	ldr	r0, [pc, #20]	@ (800b1b4 <fiprintf+0x20>)
 800b19e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1a2:	6800      	ldr	r0, [r0, #0]
 800b1a4:	9301      	str	r3, [sp, #4]
 800b1a6:	f7fe ff75 	bl	800a094 <_vfiprintf_r>
 800b1aa:	b002      	add	sp, #8
 800b1ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1b0:	b003      	add	sp, #12
 800b1b2:	4770      	bx	lr
 800b1b4:	20000018 	.word	0x20000018

0800b1b8 <abort>:
 800b1b8:	b508      	push	{r3, lr}
 800b1ba:	2006      	movs	r0, #6
 800b1bc:	f000 f834 	bl	800b228 <raise>
 800b1c0:	2001      	movs	r0, #1
 800b1c2:	f7f6 fed8 	bl	8001f76 <_exit>

0800b1c6 <_malloc_usable_size_r>:
 800b1c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1ca:	1f18      	subs	r0, r3, #4
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	bfbc      	itt	lt
 800b1d0:	580b      	ldrlt	r3, [r1, r0]
 800b1d2:	18c0      	addlt	r0, r0, r3
 800b1d4:	4770      	bx	lr

0800b1d6 <_raise_r>:
 800b1d6:	291f      	cmp	r1, #31
 800b1d8:	b538      	push	{r3, r4, r5, lr}
 800b1da:	4605      	mov	r5, r0
 800b1dc:	460c      	mov	r4, r1
 800b1de:	d904      	bls.n	800b1ea <_raise_r+0x14>
 800b1e0:	2316      	movs	r3, #22
 800b1e2:	6003      	str	r3, [r0, #0]
 800b1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1ec:	b112      	cbz	r2, 800b1f4 <_raise_r+0x1e>
 800b1ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1f2:	b94b      	cbnz	r3, 800b208 <_raise_r+0x32>
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	f000 f831 	bl	800b25c <_getpid_r>
 800b1fa:	4622      	mov	r2, r4
 800b1fc:	4601      	mov	r1, r0
 800b1fe:	4628      	mov	r0, r5
 800b200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b204:	f000 b818 	b.w	800b238 <_kill_r>
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d00a      	beq.n	800b222 <_raise_r+0x4c>
 800b20c:	1c59      	adds	r1, r3, #1
 800b20e:	d103      	bne.n	800b218 <_raise_r+0x42>
 800b210:	2316      	movs	r3, #22
 800b212:	6003      	str	r3, [r0, #0]
 800b214:	2001      	movs	r0, #1
 800b216:	e7e7      	b.n	800b1e8 <_raise_r+0x12>
 800b218:	2100      	movs	r1, #0
 800b21a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b21e:	4620      	mov	r0, r4
 800b220:	4798      	blx	r3
 800b222:	2000      	movs	r0, #0
 800b224:	e7e0      	b.n	800b1e8 <_raise_r+0x12>
	...

0800b228 <raise>:
 800b228:	4b02      	ldr	r3, [pc, #8]	@ (800b234 <raise+0xc>)
 800b22a:	4601      	mov	r1, r0
 800b22c:	6818      	ldr	r0, [r3, #0]
 800b22e:	f7ff bfd2 	b.w	800b1d6 <_raise_r>
 800b232:	bf00      	nop
 800b234:	20000018 	.word	0x20000018

0800b238 <_kill_r>:
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	4d07      	ldr	r5, [pc, #28]	@ (800b258 <_kill_r+0x20>)
 800b23c:	2300      	movs	r3, #0
 800b23e:	4604      	mov	r4, r0
 800b240:	4608      	mov	r0, r1
 800b242:	4611      	mov	r1, r2
 800b244:	602b      	str	r3, [r5, #0]
 800b246:	f7f6 fe86 	bl	8001f56 <_kill>
 800b24a:	1c43      	adds	r3, r0, #1
 800b24c:	d102      	bne.n	800b254 <_kill_r+0x1c>
 800b24e:	682b      	ldr	r3, [r5, #0]
 800b250:	b103      	cbz	r3, 800b254 <_kill_r+0x1c>
 800b252:	6023      	str	r3, [r4, #0]
 800b254:	bd38      	pop	{r3, r4, r5, pc}
 800b256:	bf00      	nop
 800b258:	200004fc 	.word	0x200004fc

0800b25c <_getpid_r>:
 800b25c:	f7f6 be74 	b.w	8001f48 <_getpid>

0800b260 <_init>:
 800b260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b262:	bf00      	nop
 800b264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b266:	bc08      	pop	{r3}
 800b268:	469e      	mov	lr, r3
 800b26a:	4770      	bx	lr

0800b26c <_fini>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	bf00      	nop
 800b270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b272:	bc08      	pop	{r3}
 800b274:	469e      	mov	lr, r3
 800b276:	4770      	bx	lr
